// This file has been generated by Py++.

#include "boost/python.hpp"
#include "__ctypes_integration.pypp.hpp"
#include "opencv_headers.hpp"
#include "boost/python/object.hpp"
#include "CvDTreeSplit.pypp.hpp"

namespace bp = boost::python;

struct CvDTreeSplit_wrapper : CvDTreeSplit, bp::wrapper< CvDTreeSplit > {

    CvDTreeSplit_wrapper(CvDTreeSplit const & arg )
    : CvDTreeSplit( arg )
      , bp::wrapper< CvDTreeSplit >(){
        // copy constructor
        
    }

    CvDTreeSplit_wrapper()
    : CvDTreeSplit()
      , bp::wrapper< CvDTreeSplit >(){
        // null constructor
        
    }

    static bp::object get_next( ::CvDTreeSplit const & inst ){        
        return inst.next? bp::object(inst.next): bp::object();
    }

};

void register_CvDTreeSplit_class(){

    bp::class_< CvDTreeSplit_wrapper >( "CvDTreeSplit" )    
        .add_property( "this", pyplus_conv::make_addressof_inst_getter< CvDTreeSplit >() )    
        .add_property( "this", pyplus_conv::make_addressof_inst_getter< CvDTreeSplit >() )    
        .add_property( "this", pyplus_conv::make_addressof_inst_getter< CvDTreeSplit >() )    
        .def_readwrite( "condensed_idx", &CvDTreeSplit::condensed_idx )    
        .def_readwrite( "inversed", &CvDTreeSplit::inversed )    
        .def_readwrite( "quality", &CvDTreeSplit::quality )    
        .def_readwrite( "var_idx", &CvDTreeSplit::var_idx )    
        .add_property( "next", bp::make_function(&::CvDTreeSplit_wrapper::get_next) );

}
