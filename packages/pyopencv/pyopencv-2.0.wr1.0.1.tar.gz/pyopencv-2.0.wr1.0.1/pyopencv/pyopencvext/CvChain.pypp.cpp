// This file has been generated by Py++.

#include "boost/python.hpp"
#include "__ctypes_integration.pypp.hpp"
#include "opencv_headers.hpp"
#include "boost/python/object.hpp"
#include "boost/python/str.hpp"
#include "CvChain.pypp.hpp"

namespace bp = boost::python;

struct CvChain_wrapper : CvChain, bp::wrapper< CvChain > {

    CvChain_wrapper(CvChain const & arg )
    : CvChain( arg )
      , bp::wrapper< CvChain >(){
        // copy constructor
        
    }

    CvChain_wrapper()
    : CvChain()
      , bp::wrapper< CvChain >(){
        // null constructor
        
    }

    static bp::object get_h_prev( ::CvChain const & inst ){        
        return inst.h_prev? bp::object(inst.h_prev): bp::object();
    }

    static bp::object get_h_next( ::CvChain const & inst ){        
        return inst.h_next? bp::object(inst.h_next): bp::object();
    }

    static bp::object get_v_prev( ::CvChain const & inst ){        
        return inst.v_prev? bp::object(inst.v_prev): bp::object();
    }

    static bp::object get_v_next( ::CvChain const & inst ){        
        return inst.v_next? bp::object(inst.v_next): bp::object();
    }

    static bp::object get_storage( ::CvChain const & inst ){        
        return inst.storage? bp::object(inst.storage): bp::object();
    }

    static bp::object get_free_blocks( ::CvChain const & inst ){        
        return inst.free_blocks? bp::object(inst.free_blocks): bp::object();
    }

    static bp::object get_first( ::CvChain const & inst ){        
        return inst.first? bp::object(inst.first): bp::object();
    }

    static bp::object get_block_max( ::CvChain const & inst ){        
        return inst.block_max? bp::str(inst.block_max): bp::object();
    }

    static bp::object get_ptr( ::CvChain const & inst ){        
        return inst.ptr? bp::str(inst.ptr): bp::object();
    }

};

void register_CvChain_class(){

    bp::class_< CvChain_wrapper >( "CvChain" )    
        .add_property( "this", pyplus_conv::make_addressof_inst_getter< CvChain >() )    
        .def_readwrite( "delta_elems", &CvChain::delta_elems )    
        .def_readwrite( "elem_size", &CvChain::elem_size )    
        .def_readwrite( "flags", &CvChain::flags )    
        .def_readwrite( "header_size", &CvChain::header_size )    
        .def_readwrite( "origin", &CvChain::origin )    
        .def_readwrite( "total", &CvChain::total )    
        .add_property( "h_prev", bp::make_function(&::CvChain_wrapper::get_h_prev) )    
        .add_property( "h_next", bp::make_function(&::CvChain_wrapper::get_h_next) )    
        .add_property( "v_prev", bp::make_function(&::CvChain_wrapper::get_v_prev) )    
        .add_property( "v_next", bp::make_function(&::CvChain_wrapper::get_v_next) )    
        .add_property( "storage", bp::make_function(&::CvChain_wrapper::get_storage) )    
        .add_property( "free_blocks", bp::make_function(&::CvChain_wrapper::get_free_blocks) )    
        .add_property( "first", bp::make_function(&::CvChain_wrapper::get_first) )    
        .add_property( "block_max", bp::make_function(&::CvChain_wrapper::get_block_max) )    
        .add_property( "ptr", bp::make_function(&::CvChain_wrapper::get_ptr) );

}
