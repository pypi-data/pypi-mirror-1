// This file has been generated by Py++.

#include "boost/python.hpp"
#include "__ctypes_integration.pypp.hpp"
#include "opencv_headers.hpp"
#include "boost/python/object.hpp"
#include "CvMemBlock.pypp.hpp"

namespace bp = boost::python;

struct CvMemBlock_wrapper : CvMemBlock, bp::wrapper< CvMemBlock > {

    CvMemBlock_wrapper(CvMemBlock const & arg )
    : CvMemBlock( arg )
      , bp::wrapper< CvMemBlock >(){
        // copy constructor
        
    }

    CvMemBlock_wrapper()
    : CvMemBlock()
      , bp::wrapper< CvMemBlock >(){
        // null constructor
        
    }

    static bp::object get_prev( ::CvMemBlock const & inst ){        
        return inst.prev? bp::object(inst.prev): bp::object();
    }

    static bp::object get_next( ::CvMemBlock const & inst ){        
        return inst.next? bp::object(inst.next): bp::object();
    }

};

void register_CvMemBlock_class(){

    bp::class_< CvMemBlock_wrapper >( "CvMemBlock" )    
        .add_property( "this", pyplus_conv::make_addressof_inst_getter< CvMemBlock >() )    
        .add_property( "prev", bp::make_function(&::CvMemBlock_wrapper::get_prev) )    
        .add_property( "next", bp::make_function(&::CvMemBlock_wrapper::get_next) );

}
