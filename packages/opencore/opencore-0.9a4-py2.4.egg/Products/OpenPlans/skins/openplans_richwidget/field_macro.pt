<metal:define
   define-macro="kupu_edit"
   tal:define="visState python:widget.isVisible(here, mode);
               edit_accessor python:field.getEditAccessor(here);
               getMethod python:(widget.populate and (edit_accessor or accessor)) or None;
               value python:getMethod and getMethod();
               value python:widget.postback and request.get(fieldName, here.session_restore_value(fieldName, value)) or value;
               visCondition python:field.widget.testCondition(context.aq_inner.getParentNode(), portal, context);
               error_id python:errors.get(fieldName)">
  <tal:condition
     condition="python:visState == 'visible' and visCondition">
    <div class="field"
         tal:condition="python:('edit' in widget.modes and 'w' in field.mode and field.checkPermission('w',here))
                        or (mode=='search' and field.checkPermission('r',here))"
         tal:attributes="class python: test(error_id, 'field error ' + 'Archetypes' + widget.getName(), 'field ' + 'Archetypes' + widget.getName());
                         id python: 'archetypes-fieldname-' + field.getName()">
      <span tal:omit-tag=""
            tal:define="error python:errors.get(fieldName)">
        <div tal:condition="error_id"
             tal:content="error_id" i18n:translate="">Validation Error</div>
        <div metal:define-slot="widget_body"></div>
      </span>
    </div>
  </tal:condition>

  <tal:condition condition="python: visState == 'hidden'">
    <metal:hiddenmacro
       tal:define="widget_macro python:path('here/%s/macros' % widget.macro);
                   default_hidden_macro here/widgets/field/macros/hidden;
                   hidden_macro widget_macro/hidden | default_hidden_macro;
                   ">
      <metal:use use-macro="hidden_macro" />
    </metal:hiddenmacro>
  </tal:condition>

</metal:define>
