# 
#
# Generated by dumpDCWorkflow.py written by Sebastien Bigaret
# Original workflow id/title: folder_openplans_workflow/OpenPlans Folder Workflow [Plone]
# Date: 2005/12/06 00:25:13.714 US/Pacific
#
# WARNING: this dumps does NOT contain any scripts you might have added to
# the workflow, IT IS YOUR RESPONSABILITY TO MAKE BACKUPS FOR THESE SCRIPTS.
#
# No script detected in this workflow
# 
"""
Programmatically creates a workflow type
"""
__version__ = "$Revision: 1.1.1.1 $"[11:-2]

from Products.CMFCore.WorkflowTool import addWorkflowFactory

from Products.DCWorkflow.DCWorkflow import DCWorkflowDefinition

def setupFolder_openplans_workflow(wf):
    "..."
    wf.setProperties(title='OpenPlans Folder Workflow [Plone]')

    for s in ['team_visible', 'visible', 'draft', 'visible_locked', 'team_visible_locked']:
        wf.states.addState(s)
    for t in ['lockAsVisible', 'hide', 'show', 'makeVisible', 'unlockAsTeamVisible', 'lockAsTeamVisible', 'team', 'makeTeamVisible', 'unlockAsVisible']:
        wf.transitions.addTransition(t)
    for v in ['action', 'review_history', 'actor', 'comments', 'time']:
        wf.variables.addVariable(v)
    for l in []:
        wf.worklists.addWorklist(l)
    for p in ('Access contents information', 'Modify portal content', 'View', 'List folder contents', 'Delete objects', 'CMFEditions: Access previous versions', 'CMFEditions: Apply version control', 'CMFEditions: Revert to previous versions', 'CMFEditions: Save new version'):
        wf.addManagedPermission(p)
        

    ## Initial State
    wf.states.setInitialState('visible')

    ## States initialization
    sdef = wf.states['team_visible']
    sdef.setProperties(title="""Team Visible""",
                       transitions=('hide', 'lockAsTeamVisible', 'show'))
    sdef.setPermission('Access contents information', 0, ['Manager', 'Owner', 'ProjectAdmin', 'ProjectContentMgr'])
    sdef.setPermission('Modify portal content', 0, ['Manager', 'Owner', 'ProjectAdmin', 'ProjectContentMgr'])
    sdef.setPermission('View', 0, ['Manager', 'Owner', 'ProjectAdmin', 'ProjectContentMgr'])
    sdef.setPermission('List folder contents', 0, ['Manager', 'Owner', 'ProjectAdmin', 'ProjectContentMgr'])
    sdef.setPermission('Delete objects', 0, ['Manager', 'Owner', 'ProjectAdmin', 'ProjectContentMgr'])
    sdef.setPermission('CMFEditions: Access previous versions', 0, ['Manager', 'Owner', 'ProjectAdmin', 'ProjectContentMgr'])
    sdef.setPermission('CMFEditions: Apply version control', 0, ['Manager', 'Owner', 'ProjectAdmin', 'ProjectContentMgr'])
    sdef.setPermission('CMFEditions: Revert to previous versions', 0, ['Manager', 'Owner', 'ProjectAdmin', 'ProjectContentMgr'])
    sdef.setPermission('CMFEditions: Save new version', 0, ['Manager', 'Owner', 'ProjectAdmin', 'ProjectContentMgr'])

    sdef = wf.states['visible']
    sdef.setProperties(title="""Visible but not published""",
                       transitions=('hide', 'lockAsVisible', 'team'))
    sdef.setPermission('Access contents information', 0, ['Anonymous', 'Authenticated', 'Manager', 'Member', 'Owner', 'ProjectAdmin', 'ProjectContentMgr', 'ProjectMember', 'Reviewer'])
    sdef.setPermission('Modify portal content', 0, ['Manager', 'Owner', 'ProjectAdmin', 'ProjectContentMgr'])
    sdef.setPermission('View', 0, ['Anonymous', 'Authenticated', 'Manager', 'Member', 'Owner', 'ProjectAdmin', 'ProjectContentMgr', 'ProjectMember', 'Reviewer'])
    sdef.setPermission('List folder contents', 0, ['Manager', 'Owner', 'ProjectAdmin', 'ProjectContentMgr'])
    sdef.setPermission('Delete objects', 0, ['Manager', 'Owner', 'ProjectAdmin', 'ProjectContentMgr'])
    sdef.setPermission('CMFEditions: Access previous versions', 0, ['Manager', 'Owner', 'ProjectAdmin', 'ProjectContentMgr'])
    sdef.setPermission('CMFEditions: Apply version control', 0, ['Manager', 'Owner', 'ProjectAdmin', 'ProjectContentMgr'])
    sdef.setPermission('CMFEditions: Revert to previous versions', 0, ['Manager', 'Owner', 'ProjectAdmin', 'ProjectContentMgr'])
    sdef.setPermission('CMFEditions: Save new version', 0, ['Manager', 'Owner', 'ProjectAdmin', 'ProjectContentMgr'])

    sdef = wf.states['draft']
    sdef.setProperties(title="""Draft""",
                       transitions=('makeTeamVisible', 'makeVisible'))
    sdef.setPermission('Access contents information', 0, ['Manager', 'Owner', 'ProjectAdmin'])
    sdef.setPermission('Modify portal content', 0, ['Manager', 'Owner', 'ProjectAdmin'])
    sdef.setPermission('View', 0, ['Manager', 'Owner', 'ProjectAdmin'])
    sdef.setPermission('List folder contents', 0, ['Manager', 'Owner', 'ProjectAdmin'])
    sdef.setPermission('Delete objects', 0, ['Manager', 'Owner', 'ProjectAdmin'])
    sdef.setPermission('CMFEditions: Access previous versions', 0, ['Manager', 'Owner', 'ProjectAdmin'])
    sdef.setPermission('CMFEditions: Apply version control', 0, ['Manager', 'Owner', 'ProjectAdmin'])
    sdef.setPermission('CMFEditions: Revert to previous versions', 0, ['Manager', 'Owner', 'ProjectAdmin'])
    sdef.setPermission('CMFEditions: Save new version', 0, ['Manager', 'Owner', 'ProjectAdmin'])

    sdef = wf.states['visible_locked']
    sdef.setProperties(title="""Visible Locked""",
                       transitions=('unlockAsVisible',))
    sdef.setPermission('Access contents information', 0, ['Anonymous', 'Authenticated', 'Manager', 'Member', 'Owner', 'ProjectAdmin', 'ProjectContentMgr', 'ProjectMember', 'Reviewer'])
    sdef.setPermission('Modify portal content', 0, ['Manager', 'Owner', 'ProjectAdmin'])
    sdef.setPermission('View', 0, ['Anonymous', 'Authenticated', 'Manager', 'Member', 'Owner', 'ProjectAdmin', 'ProjectContentMgr', 'ProjectMember', 'Reviewer'])
    sdef.setPermission('List folder contents', 0, ['Manager', 'Owner', 'ProjectAdmin'])
    sdef.setPermission('Delete objects', 0, ['Manager', 'Owner', 'ProjectAdmin'])
    sdef.setPermission('CMFEditions: Access previous versions', 0, ['Manager', 'Owner', 'ProjectAdmin'])
    sdef.setPermission('CMFEditions: Apply version control', 0, ['Manager', 'Owner', 'ProjectAdmin'])
    sdef.setPermission('CMFEditions: Revert to previous versions', 0, ['Manager', 'Owner', 'ProjectAdmin'])
    sdef.setPermission('CMFEditions: Save new version', 0, ['Manager', 'Owner', 'ProjectAdmin'])

    sdef = wf.states['team_visible_locked']
    sdef.setProperties(title="""Team Visible Locked""",
                       transitions=('unlockAsTeamVisible',))
    sdef.setPermission('Access contents information', 0, ['Manager', 'Owner', 'ProjectAdmin', 'ProjectContentMgr'])
    sdef.setPermission('Modify portal content', 0, ['Manager', 'Owner', 'ProjectAdmin'])
    sdef.setPermission('View', 0, ['Manager', 'Owner', 'ProjectAdmin', 'ProjectContentMgr'])
    sdef.setPermission('List folder contents', 0, ['Manager', 'Owner', 'ProjectAdmin'])
    sdef.setPermission('Delete objects', 0, ['Manager', 'Owner', 'ProjectAdmin'])
    sdef.setPermission('CMFEditions: Access previous versions', 0, ['Manager', 'Owner', 'ProjectAdmin', 'ProjectContentMgr'])
    sdef.setPermission('CMFEditions: Apply version control', 0, ['Manager', 'Owner', 'ProjectAdmin'])
    sdef.setPermission('CMFEditions: Revert to previous versions', 0, ['Manager', 'Owner', 'ProjectAdmin'])
    sdef.setPermission('CMFEditions: Save new version', 0, ['Manager', 'Owner', 'ProjectAdmin'])


    ## Transitions initialization
    tdef = wf.transitions['lockAsVisible']
    tdef.setProperties(title="""Lock as Public""",
                       new_state_id="""visible_locked""",
                       trigger_type=1,
                       script_name="""""",
                       after_script_name="""""",
                       actbox_name="""Lock""",
                       actbox_url="""""",
                       actbox_category="""workflow""",
                       props={'guard_roles': 'ProjectAdmin'},
                       )

    tdef = wf.transitions['hide']
    tdef.setProperties(title="""Return to Draft""",
                       new_state_id="""""",
                       trigger_type=1,
                       script_name="""""",
                       after_script_name="""""",
                       actbox_name="""Return to Draft""",
                       actbox_url="""%(content_url)s/content_hide_form""",
                       actbox_category="""workflow""",
                       props={'guard_roles': 'Owner; Manager; ProjectAdmin'},
                       )

    tdef = wf.transitions['show']
    tdef.setProperties(title="""Make Public""",
                       new_state_id="""visible""",
                       trigger_type=1,
                       script_name="""""",
                       after_script_name="""""",
                       actbox_name="""Make Public""",
                       actbox_url="""%(content_url)s/content_show_form""",
                       actbox_category="""workflow""",
                       props={'guard_permissions': 'Modify portal content'},
                       )

    tdef = wf.transitions['makeVisible']
    tdef.setProperties(title="""Make Public""",
                       new_state_id="""visible""",
                       trigger_type=1,
                       script_name="""""",
                       after_script_name="""""",
                       actbox_name="""Make Public""",
                       actbox_url="""""",
                       actbox_category="""workflow""",
                       props={'guard_roles': 'ProjectAdmin; ProjectContentMgr'},
                       )

    tdef = wf.transitions['unlockAsTeamVisible']
    tdef.setProperties(title="""Unlock as Mgmt Only""",
                       new_state_id="""team_visible""",
                       trigger_type=1,
                       script_name="""""",
                       after_script_name="""""",
                       actbox_name="""Unlock""",
                       actbox_url="""""",
                       actbox_category="""workflow""",
                       props={'guard_roles': 'ProjectAdmin'},
                       )

    tdef = wf.transitions['lockAsTeamVisible']
    tdef.setProperties(title="""Lock as Mgmt Only""",
                       new_state_id="""team_visible_locked""",
                       trigger_type=1,
                       script_name="""""",
                       after_script_name="""""",
                       actbox_name="""Lock""",
                       actbox_url="""""",
                       actbox_category="""workflow""",
                       props={'guard_roles': 'ProjectAdmin'},
                       )

    tdef = wf.transitions['team']
    tdef.setProperties(title="""Make Mgmt Only""",
                       new_state_id="""team_visible""",
                       trigger_type=1,
                       script_name="""""",
                       after_script_name="""""",
                       actbox_name="""Make Mgmt Only""",
                       actbox_url="""%(content_url)s/what_is_this_for""",
                       actbox_category="""workflow""",
                       props={'guard_permissions': 'Modify portal content'},
                       )

    tdef = wf.transitions['makeTeamVisible']
    tdef.setProperties(title="""Make Mgmt Only""",
                       new_state_id="""team_visible""",
                       trigger_type=1,
                       script_name="""""",
                       after_script_name="""""",
                       actbox_name="""Make Mgmt Only""",
                       actbox_url="""""",
                       actbox_category="""workflow""",
                       props={'guard_roles': 'ProjectAdmin; ProjectContentMgr'},
                       )

    tdef = wf.transitions['unlockAsVisible']
    tdef.setProperties(title="""Unlock as Public""",
                       new_state_id="""visible""",
                       trigger_type=1,
                       script_name="""""",
                       after_script_name="""""",
                       actbox_name="""Unlock""",
                       actbox_url="""""",
                       actbox_category="""workflow""",
                       props={'guard_roles': 'ProjectAdmin'},
                       )

    ## State Variable
    wf.variables.setStateVar('review_state')

    ## Variables initialization
    vdef = wf.variables['action']
    vdef.setProperties(description="""The last transition""",
                       default_value="""""",
                       default_expr="""transition/getId|nothing""",
                       for_catalog=0,
                       for_status=1,
                       update_always=1,
                       props=None)

    vdef = wf.variables['review_history']
    vdef.setProperties(description="""Provides access to workflow history""",
                       default_value="""""",
                       default_expr="""state_change/getHistory""",
                       for_catalog=0,
                       for_status=0,
                       update_always=0,
                       props={'guard_permissions': 'Request review; Review portal content'})

    vdef = wf.variables['actor']
    vdef.setProperties(description="""The ID of the user who performed the last transition""",
                       default_value="""""",
                       default_expr="""user/getId""",
                       for_catalog=0,
                       for_status=1,
                       update_always=1,
                       props=None)

    vdef = wf.variables['comments']
    vdef.setProperties(description="""Comments about the last transition""",
                       default_value="""""",
                       default_expr="""python:state_change.kwargs.get('comment', '')""",
                       for_catalog=0,
                       for_status=1,
                       update_always=1,
                       props=None)

    vdef = wf.variables['time']
    vdef.setProperties(description="""Time of the last transition""",
                       default_value="""""",
                       default_expr="""state_change/getDateTime""",
                       for_catalog=0,
                       for_status=1,
                       update_always=1,
                       props=None)

    ## Worklists Initialization

def createFolder_openplans_workflow(id):
    "..."
    ob = DCWorkflowDefinition(id)
    setupFolder_openplans_workflow(ob)
    return ob

addWorkflowFactory(createFolder_openplans_workflow,
                   id='folder_openplans_workflow',
                   title='OpenPlans Folder Workflow [Plone]')
