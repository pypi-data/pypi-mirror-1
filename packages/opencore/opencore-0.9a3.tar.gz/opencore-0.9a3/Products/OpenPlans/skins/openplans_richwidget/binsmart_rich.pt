<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:tal="http://xml.zope.org/namespaces/tal"
      xmlns:metal="http://xml.zope.org/namespaces/metal"
      xmlns:i18n="http://xml.zope.org/namespaces/i18n"
      i18n:domain="plone">
  <head><title></title></head>
  <body>

    <!-- Rich Widgets -->

    <metal:view_macro define-macro="view"
                      tal:define="transformable python: here.isTransformable(fieldName);">
      <span tal:condition="transformable"
            tal:replace="structure accessor"/>
<tal:comment replace="nothing">
Commented out the View/Edit links for ordinary display - feel free to
enable these in your site, but they should definitely not be there by
default.
      <tal:download tal:condition="widget/allow_file_upload | python:1">
        <metal:block use-macro="here/widgets/file/macros/file_view">download link</metal:block>
      </tal:download>
</tal:comment>
    </metal:view_macro>
 
    <metal:define define-macro="edit">
      <metal:use use-macro="field_macro | here/widgets/field_macro/macros/kupu_edit">
        <metal:fill fill-slot="widget_body"
                    tal:define="base python:hasattr(value, 'isUnit');
                                binary python:base and value.isBinary() or here.isBinary(fieldName);">
          <tal:area_format tal:condition="widget/allow_format_edit | python:1">
            <div style="text-align: right; margin-right: 0.75em;">
              <metal:block use-macro="here/binsmart_visual/macros/area_format" />
            </div>
          </tal:area_format>
          <fieldset tal:condition="binary" id="binary_info" i18n:translate="binary_info">
            This page's content resides in a binary file.  To edit this page, you
            have two options:
            <ul>
              <li>
                <a tal:attributes="href string:${here/absolute_url}/at_download/$fieldName">Download</a>
                the existing file, edit it using the appropriate application, and 
                then reupload the modified file using the upload box below.
              </li>
              <li>
                Switch to using the WYSIWYG editor to manage this page
                by selecting "HTML" from the "Text Format" selector
                above.  <em>NOTE</em>: THIS WILL DELETE THE
                EXISTING CONTENT!
              </li>
            </ul>
          </fieldset>
          <span id="wysiwygEditorBox"
                tal:define="content python: not not base and value.getRaw() or value;
                            content python: not binary and content or '';
                            inputname fieldName;
                            inputvalue content;
                            tabindex tabindex/next;
                            rows widget/rows;
                            cols widget/cols;"
                tal:attributes="style python:test(binary, 'display:none', 'display:block')">
            <metal:use use-macro="here/wysiwyg_support/macros/wysiwygEditorBox" />
          </span>
          <div style="text-align: right; margin-right: 0.75em;"
               tal:condition="widget/allow_file_upload | python:1">
              <span class="discreet" 
                    i18n:translate="or_upload_a_file">or upload a file (existing content will be replaced)</span>
              <input type="file"
                     size="30"
                     tabindex="" 
                     tal:attributes="name string:${fieldName}_file;
                                     id string:${fieldName}_file;
                                     tabindex tabindex/next;
                                     "/>
          </div>
        </metal:fill>
      </metal:use>
    </metal:define>

    <div metal:define-macro="search">
      <div metal:use-macro="here/widgets/rich/macros/edit">
      </div>
    </div>

    <!-- start field macro for our special binrich widget -->

    <metal:define
       define-macro="kupu_edit"
       tal:define="visState python:widget.isVisible(here, mode);
		   edit_accessor python:field.getEditAccessor(here);
		   getMethod python:(widget.populate and (edit_accessor or accessor)) or None;
		   value python:getMethod and getMethod();
		   value python:widget.postback and request.get(fieldName, here.session_restore_value(fieldName, value)) or value;
		   visCondition python:field.widget.testCondition(context.aq_inner.getParentNode(), portal, context);
		   error_id python:errors.get(fieldName)">
      <tal:condition
	 condition="python:visState == 'visible' and visCondition">
	<div class="field"
             tal:condition="python:('edit' in widget.modes and 'w' in field.mode and field.checkPermission('w',here))
                            or (mode=='search' and field.checkPermission('r',here))"
             tal:attributes="class python: test(error_id, 'field error ' + 'Archetypes' + widget.getName(), 'field ' + 'Archetypes' + widget.getName());
                             id python: 'archetypes-fieldname-' + field.getName()">
	  <!-- span metal:define-slot="widget_body_label_prefix"></span -->
	  <!-- label i18n:translate=""
               tal:content="python:widget.Label(here)"
               tal:attributes="for python:field.getName()">
	       </label -->
	  <!-- span class="fieldRequired"
               tal:condition="field/required"
               title="Required"
               i18n:translate="label_required"
               i18n:attributes="title title_required;">
               (Required)
	       </span -->
	  <div class="formHelp"
               tal:define="description python:widget.Description(here)"
               tal:content="structure description"
               tal:attributes="id string:${fieldName}_help"
               i18n:translate="">
            Help
	  </div>
	  <span tal:omit-tag=""
		tal:define="error python:errors.get(fieldName)">
            <div tal:condition="error_id"
		 tal:content="error_id" i18n:translate="">Validation Error</div>
            <div metal:define-slot="widget_body"></div>
	  </span>
	</div>
      </tal:condition>

      <tal:condition condition="python: visState == 'hidden'">
	<metal:hiddenmacro
	   tal:define="widget_macro python:path('here/%s/macros' % widget.macro);
                       default_hidden_macro here/widgets/field/macros/hidden;
                       hidden_macro widget_macro/hidden | default_hidden_macro;
                       ">
	  <metal:use use-macro="hidden_macro" />
	</metal:hiddenmacro>
      </tal:condition>

    </metal:define>


  </body>

</html>

