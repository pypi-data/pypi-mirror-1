#
# Generated by dumpDCWorkflow.py written by Sebastien Bigaret
# Original workflow id/title: plone_openplans_workflow/Default OpenPlans Workflow [Plone]
# Date: 2006/10/03 16:53:30.120 GMT-7
#
# WARNING: this dumps does NOT contain any scripts you might have added to
# the workflow, IT IS YOUR RESPONSABILITY TO MAKE BACKUPS FOR THESE SCRIPTS.
#
# No script detected in this workflow
#
"""
Programmatically create a workflow type.
"""
__version__ = "$Id: dumpDCWorkflow.py 20757 2006-03-12 23:02:15Z encolpe $"

from Products.CMFCore.WorkflowTool import addWorkflowFactory
from Products.DCWorkflow.DCWorkflow import DCWorkflowDefinition
from Products.PythonScripts.PythonScript import PythonScript
from Products.ExternalMethod.ExternalMethod import ExternalMethod

def setup_plone_openplans_workflow(wf):
    """Setup the workflow
    """
    wf.setProperties(title='Default OpenPlans Workflow [Plone]')

    for s in ('draft',
              'pending',
              'pending_public',
              'published',
              'team_visible',
              'team_visible_locked',
              'visible',
              'visible_locked'):
        wf.states.addState(s)
    for t in ('approveAsTeamVisible',
              'approveAsVisible',
              'hide',
              'lockAsTeamVisible',
              'lockAsVisible',
              'makeTeamVisible',
              'makeVisible',
              'publish',
              'reject',
              'rejectDraft',
              'retract',
              'retractDraft',
              'show',
              'submit',
              'submitDraft',
              'team',
              'unlockAsTeamVisible',
              'unlockAsVisible'):
        wf.transitions.addTransition(t)
    for v in ('action', 'actor', 'comments', 'review_history', 'time'):
        wf.variables.addVariable(v)
    for l in ('reviewer_queue',):
        wf.worklists.addWorklist(l)
    for p in ('Access contents information',
              'Modify portal content',
              'View',
              'Delete objects',
              'Request review',
              'CMFEditions: Access previous versions',
              'CMFEditions: Save new version',
              'CMFEditions: Apply version control',
              'CMFEditions: Revert to previous versions'):
        wf.addManagedPermission(p)

    # Initial State
    wf.states.setInitialState('visible')

    # State Initialization
    sdef = wf.states['draft']
    sdef.setProperties(title='Draft',
                       description='',
                       transitions=('makeTeamVisible', 'makeVisible', 'submitDraft'))
    sdef.setPermission('Access contents information', 0,
                       ['Manager', 'Owner', 'ProjectAdmin'])
    sdef.setPermission('Modify portal content', 0,
                       ['Manager', 'Owner', 'ProjectAdmin'])
    sdef.setPermission('View', 0,
                       ['Manager', 'Owner', 'ProjectAdmin'])
    sdef.setPermission('Delete objects', 0,
                       ['Manager', 'Owner', 'ProjectAdmin'])
    sdef.setPermission('Request review', 0,
                       ['Manager', 'Owner', 'ProjectAdmin'])
    sdef.setPermission('CMFEditions: Access previous versions', 0,
                       ['Manager', 'Owner', 'ProjectAdmin'])
    sdef.setPermission('CMFEditions: Save new version', 0,
                       ['Manager', 'Owner', 'ProjectAdmin'])
    sdef.setPermission('CMFEditions: Apply version control', 0,
                       ['Manager', 'Owner', 'ProjectAdmin'])
    sdef.setPermission('CMFEditions: Revert to previous versions', 0,
                       ['Manager', 'Owner', 'ProjectAdmin'])

    sdef = wf.states['pending']
    sdef.setProperties(title='Waiting for reviewer',
                       description='',
                       transitions=('publish', 'reject', 'retract'))
    sdef.setPermission('Access contents information', 0,
                       ['Anonymous',
                       'Authenticated',
                       'Manager',
                       'Member',
                       'Owner',
                       'ProjectAdmin',
                       'ProjectContentMgr',
                       'ProjectMember',
                       'Reviewer'])
    sdef.setPermission('Modify portal content', 0,
                       ['Manager'])
    sdef.setPermission('View', 0,
                       ['Anonymous',
                       'Authenticated',
                       'Manager',
                       'Member',
                       'Owner',
                       'ProjectAdmin',
                       'ProjectContentMgr',
                       'ProjectMember',
                       'Reviewer'])
    sdef.setPermission('Delete objects', 0,
                       ['Manager'])
    sdef.setPermission('Request review', 0,
                       ['Manager', 'ProjectAdmin', 'Reviewer'])
    sdef.setPermission('CMFEditions: Access previous versions', 0,
                       ['Manager', 'Owner', 'ProjectAdmin', 'ProjectContentMgr'])
    sdef.setPermission('CMFEditions: Save new version', 0,
                       ['Manager'])
    sdef.setPermission('CMFEditions: Apply version control', 0,
                       ['Manager'])
    sdef.setPermission('CMFEditions: Revert to previous versions', 0,
                       ['Manager'])

    sdef = wf.states['pending_public']
    sdef.setProperties(title='Waiting for reviewer',
                       description='',
                       transitions=('approveAsTeamVisible', 'approveAsVisible', 'rejectDraft', 'retractDraft'))
    sdef.setPermission('Access contents information', 0,
                       ['Manager', 'Owner', 'ProjectAdmin', 'ProjectContentMgr'])
    sdef.setPermission('Modify portal content', 0,
                       ['Manager', 'ProjectAdmin', 'ProjectContentMgr'])
    sdef.setPermission('View', 0,
                       ['Manager', 'Owner', 'ProjectAdmin', 'ProjectContentMgr'])
    sdef.setPermission('Delete objects', 0,
                       ['Manager', 'ProjectAdmin', 'ProjectContentMgr'])
    sdef.setPermission('Request review', 0,
                       ['Manager', 'Owner', 'ProjectAdmin'])
    sdef.setPermission('CMFEditions: Access previous versions', 0,
                       ['Manager', 'Owner', 'ProjectAdmin', 'ProjectContentMgr'])
    sdef.setPermission('CMFEditions: Save new version', 0,
                       ['Manager', 'ProjectAdmin', 'ProjectContentMgr'])
    sdef.setPermission('CMFEditions: Apply version control', 0,
                       ['Manager', 'ProjectAdmin', 'ProjectContentMgr'])
    sdef.setPermission('CMFEditions: Revert to previous versions', 0,
                       ['Manager', 'ProjectAdmin', 'ProjectContentMgr'])

    sdef = wf.states['published']
    sdef.setProperties(title='Promoted',
                       description='',
                       transitions=('reject', 'retract'))
    sdef.setPermission('Access contents information', 0,
                       ['Anonymous',
                       'Authenticated',
                       'Manager',
                       'Member',
                       'Owner',
                       'ProjectAdmin',
                       'ProjectContentMgr',
                       'ProjectMember',
                       'Reviewer'])
    sdef.setPermission('Modify portal content', 0,
                       ['Manager'])
    sdef.setPermission('View', 0,
                       ['Anonymous',
                       'Authenticated',
                       'Manager',
                       'Member',
                       'Owner',
                       'ProjectAdmin',
                       'ProjectContentMgr',
                       'ProjectMember',
                       'Reviewer'])
    sdef.setPermission('Delete objects', 0,
                       ['Manager'])
    sdef.setPermission('Request review', 0,
                       ['Manager', 'ProjectAdmin', 'Reviewer'])
    sdef.setPermission('CMFEditions: Access previous versions', 0,
                       ['Manager', 'Owner', 'ProjectAdmin', 'ProjectContentMgr'])
    sdef.setPermission('CMFEditions: Save new version', 0,
                       ['Manager'])
    sdef.setPermission('CMFEditions: Apply version control', 0,
                       ['Manager'])
    sdef.setPermission('CMFEditions: Revert to previous versions', 0,
                       ['Manager'])

    sdef = wf.states['team_visible']
    sdef.setProperties(title='Mgmt Only',
                       description='',
                       transitions=('hide', 'lockAsTeamVisible', 'show'))
    sdef.setPermission('Access contents information', 0,
                       ['Manager', 'Owner', 'ProjectAdmin', 'ProjectContentMgr'])
    sdef.setPermission('Modify portal content', 0,
                       ['Manager', 'ProjectAdmin', 'ProjectContentMgr'])
    sdef.setPermission('View', 0,
                       ['Manager', 'Owner', 'ProjectAdmin', 'ProjectContentMgr'])
    sdef.setPermission('Delete objects', 0,
                       ['Manager', 'ProjectAdmin', 'ProjectContentMgr'])
    sdef.setPermission('Request review', 0,
                       ['Manager', 'ProjectAdmin'])
    sdef.setPermission('CMFEditions: Access previous versions', 0,
                       ['Manager', 'Owner', 'ProjectAdmin', 'ProjectContentMgr'])
    sdef.setPermission('CMFEditions: Save new version', 0,
                       ['Manager', 'ProjectAdmin', 'ProjectContentMgr'])
    sdef.setPermission('CMFEditions: Apply version control', 0,
                       ['Manager', 'ProjectAdmin', 'ProjectContentMgr'])
    sdef.setPermission('CMFEditions: Revert to previous versions', 0,
                       ['Manager', 'ProjectAdmin', 'ProjectContentMgr'])

    sdef = wf.states['team_visible_locked']
    sdef.setProperties(title='Mgmt Only - Locked',
                       description='',
                       transitions=('unlockAsTeamVisible',))
    sdef.setPermission('Access contents information', 0,
                       ['Manager', 'Owner', 'ProjectAdmin', 'ProjectContentMgr'])
    sdef.setPermission('Modify portal content', 0,
                       ['Manager', 'ProjectAdmin'])
    sdef.setPermission('View', 0,
                       ['Manager', 'Owner', 'ProjectAdmin', 'ProjectContentMgr'])
    sdef.setPermission('Delete objects', 0,
                       ['Manager', 'ProjectAdmin'])
    sdef.setPermission('Request review', 0,
                       ['Manager', 'ProjectAdmin'])
    sdef.setPermission('CMFEditions: Access previous versions', 0,
                       ['Manager', 'Owner', 'ProjectAdmin', 'ProjectContentMgr'])
    sdef.setPermission('CMFEditions: Save new version', 0,
                       ['Manager', 'ProjectAdmin'])
    sdef.setPermission('CMFEditions: Apply version control', 0,
                       ['Manager', 'ProjectAdmin'])
    sdef.setPermission('CMFEditions: Revert to previous versions', 0,
                       ['Manager', 'ProjectAdmin'])

    sdef = wf.states['visible']
    sdef.setProperties(title='Public',
                       description='',
                       transitions=('hide', 'lockAsVisible', 'submit', 'team'))
    sdef.setPermission('Access contents information', 0,
                       ['Anonymous',
                       'Authenticated',
                       'Manager',
                       'Member',
                       'Owner',
                       'ProjectAdmin',
                       'ProjectContentMgr',
                       'ProjectMember',
                       'Reviewer'])
    sdef.setPermission('Modify portal content', 0,
                       ['Manager', 'Owner', 'ProjectAdmin', 'ProjectContentMgr'])
    sdef.setPermission('View', 0,
                       ['Anonymous',
                       'Authenticated',
                       'Manager',
                       'Member',
                       'Owner',
                       'ProjectAdmin',
                       'ProjectContentMgr',
                       'ProjectMember',
                       'Reviewer'])
    sdef.setPermission('Delete objects', 0,
                       ['Manager', 'Owner', 'ProjectAdmin', 'ProjectContentMgr'])
    sdef.setPermission('Request review', 0,
                       ['Manager', 'Owner', 'ProjectAdmin', 'Reviewer'])
    sdef.setPermission('CMFEditions: Access previous versions', 0,
                       ['Manager', 'Owner', 'ProjectAdmin', 'ProjectContentMgr'])
    sdef.setPermission('CMFEditions: Save new version', 0,
                       ['Manager', 'Owner', 'ProjectAdmin', 'ProjectContentMgr'])
    sdef.setPermission('CMFEditions: Apply version control', 0,
                       ['Manager', 'Owner', 'ProjectAdmin', 'ProjectContentMgr'])
    sdef.setPermission('CMFEditions: Revert to previous versions', 0,
                       ['Manager', 'Owner', 'ProjectAdmin', 'ProjectContentMgr'])

    sdef = wf.states['visible_locked']
    sdef.setProperties(title='Visible - Locked',
                       description='',
                       transitions=('unlockAsVisible',))
    sdef.setPermission('Access contents information', 0,
                       ['Anonymous',
                       'Authenticated',
                       'Manager',
                       'Member',
                       'Owner',
                       'ProjectAdmin',
                       'ProjectContentMgr',
                       'ProjectMember',
                       'Reviewer'])
    sdef.setPermission('Modify portal content', 0,
                       ['Manager', 'ProjectAdmin'])
    sdef.setPermission('View', 0,
                       ['Anonymous',
                       'Authenticated',
                       'Manager',
                       'Member',
                       'Owner',
                       'ProjectAdmin',
                       'ProjectContentMgr',
                       'ProjectMember',
                       'Reviewer'])
    sdef.setPermission('Delete objects', 0,
                       ['Manager', 'ProjectAdmin'])
    sdef.setPermission('Request review', 0,
                       ['Manager', 'ProjectAdmin', 'Reviewer'])
    sdef.setPermission('CMFEditions: Access previous versions', 0,
                       ['Manager', 'Owner', 'ProjectAdmin', 'ProjectContentMgr'])
    sdef.setPermission('CMFEditions: Save new version', 0,
                       ['Manager', 'ProjectAdmin'])
    sdef.setPermission('CMFEditions: Apply version control', 0,
                       ['Manager', 'ProjectAdmin'])
    sdef.setPermission('CMFEditions: Revert to previous versions', 0,
                       ['Manager', 'ProjectAdmin'])

    # Transition Initialization
    tdef = wf.transitions['approveAsTeamVisible']
    tdef.setProperties(title='Approve as Mgmt Only',
                       description='',
                       new_state_id='team_visible',
                       trigger_type=1,
                       script_name='',
                       after_script_name='',
                       actbox_name='Approve as Mgmt Only',
                       actbox_url='',
                       actbox_category='workflow',
                       props={'guard_permissions': 'OpenPlans: Make content visible'},
                       )

    tdef = wf.transitions['approveAsVisible']
    tdef.setProperties(title='Approve as Public',
                       description='',
                       new_state_id='visible',
                       trigger_type=1,
                       script_name='',
                       after_script_name='',
                       actbox_name='Approve as Public',
                       actbox_url='',
                       actbox_category='workflow',
                       props={'guard_permissions': 'OpenPlans: Make content visible'},
                       )

    tdef = wf.transitions['hide']
    tdef.setProperties(title='Return to Draft',
                       description='',
                       new_state_id='draft',
                       trigger_type=1,
                       script_name='',
                       after_script_name='',
                       actbox_name='Return to Draft',
                       actbox_url='%(content_url)s/content_hide_form',
                       actbox_category='workflow',
                       props={'guard_permissions': 'OpenPlans: Make content visible'},
                       )

    tdef = wf.transitions['lockAsTeamVisible']
    tdef.setProperties(title='Lock as Mgmt Only',
                       description='',
                       new_state_id='team_visible_locked',
                       trigger_type=1,
                       script_name='',
                       after_script_name='',
                       actbox_name='Lock',
                       actbox_url='',
                       actbox_category='workflow',
                       props={'guard_roles': 'ProjectAdmin'},
                       )

    tdef = wf.transitions['lockAsVisible']
    tdef.setProperties(title='Lock as Public',
                       description='',
                       new_state_id='visible_locked',
                       trigger_type=1,
                       script_name='',
                       after_script_name='',
                       actbox_name='Lock',
                       actbox_url='',
                       actbox_category='workflow',
                       props={'guard_roles': 'ProjectAdmin'},
                       )

    tdef = wf.transitions['makeTeamVisible']
    tdef.setProperties(title='Make Mgmt Only',
                       description='',
                       new_state_id='team_visible',
                       trigger_type=1,
                       script_name='',
                       after_script_name='',
                       actbox_name='Make Mgmt Only',
                       actbox_url='',
                       actbox_category='workflow',
                       props={'guard_permissions': 'OpenPlans: Make content visible'},
                       )

    tdef = wf.transitions['makeVisible']
    tdef.setProperties(title='Make Public',
                       description='',
                       new_state_id='visible',
                       trigger_type=1,
                       script_name='',
                       after_script_name='',
                       actbox_name='Make Public',
                       actbox_url='',
                       actbox_category='workflow',
                       props={'guard_permissions': 'OpenPlans: Make content visible'},
                       )

    tdef = wf.transitions['publish']
    tdef.setProperties(title='Reviewer promotes submission',
                       description='',
                       new_state_id='published',
                       trigger_type=1,
                       script_name='',
                       after_script_name='',
                       actbox_name='Promote',
                       actbox_url='%(content_url)s/content_publish_form',
                       actbox_category='workflow',
                       props={'guard_permissions': 'Review portal content'},
                       )

    tdef = wf.transitions['reject']
    tdef.setProperties(title='Reviewer rejects submission',
                       description='',
                       new_state_id='visible',
                       trigger_type=1,
                       script_name='',
                       after_script_name='',
                       actbox_name='Reject',
                       actbox_url='%(content_url)s/content_reject_form',
                       actbox_category='workflow',
                       props={'guard_permissions': 'Review portal content'},
                       )

    tdef = wf.transitions['rejectDraft']
    tdef.setProperties(title='Reject draft',
                       description='',
                       new_state_id='draft',
                       trigger_type=1,
                       script_name='',
                       after_script_name='',
                       actbox_name='Reject draft',
                       actbox_url='',
                       actbox_category='workflow',
                       props={'guard_permissions': 'OpenPlans: Make content visible'},
                       )

    tdef = wf.transitions['retract']
    tdef.setProperties(title='Member retracts submission',
                       description='',
                       new_state_id='visible',
                       trigger_type=1,
                       script_name='',
                       after_script_name='',
                       actbox_name='Retract',
                       actbox_url='%(content_url)s/content_retract_form',
                       actbox_category='workflow',
                       props={'guard_permissions': 'Request review'},
                       )

    tdef = wf.transitions['retractDraft']
    tdef.setProperties(title='Retract draft',
                       description='',
                       new_state_id='draft',
                       trigger_type=1,
                       script_name='',
                       after_script_name='',
                       actbox_name='Retract',
                       actbox_url='',
                       actbox_category='workflow',
                       props={'guard_expr': "python:not here.portal_membership.checkPermission('OpenPlans: Make content visible', here)",
                              'guard_permissions': 'Request review'},
                       )

    tdef = wf.transitions['show']
    tdef.setProperties(title='Make Public',
                       description='',
                       new_state_id='visible',
                       trigger_type=1,
                       script_name='',
                       after_script_name='',
                       actbox_name='Make Public',
                       actbox_url='%(content_url)s/content_show_form',
                       actbox_category='workflow',
                       props={'guard_permissions': 'Modify portal content'},
                       )

    tdef = wf.transitions['submit']
    tdef.setProperties(title='Member requests promotion',
                       description='',
                       new_state_id='pending',
                       trigger_type=1,
                       script_name='',
                       after_script_name='',
                       actbox_name='Submit for Promotion',
                       actbox_url='%(content_url)s/content_submit_form',
                       actbox_category='workflow',
                       props={'guard_permissions': 'Request review'},
                       )

    tdef = wf.transitions['submitDraft']
    tdef.setProperties(title='Submit to be visible to everybody',
                       description='',
                       new_state_id='pending_public',
                       trigger_type=1,
                       script_name='',
                       after_script_name='',
                       actbox_name='Submit',
                       actbox_url='',
                       actbox_category='workflow',
                       props={'guard_expr': "python:not here.portal_membership.checkPermission('OpenPlans: Make content visible', here)",
                              'guard_permissions': 'Request review'},
                       )

    tdef = wf.transitions['team']
    tdef.setProperties(title='Make Mgmt Only',
                       description='',
                       new_state_id='team_visible',
                       trigger_type=1,
                       script_name='',
                       after_script_name='',
                       actbox_name='Make Mgmt Only',
                       actbox_url='%(content_url)s/what_is_this_for',
                       actbox_category='workflow',
                       props={'guard_permissions': 'Modify portal content'},
                       )

    tdef = wf.transitions['unlockAsTeamVisible']
    tdef.setProperties(title='Unlock as Mgmt Only',
                       description='',
                       new_state_id='team_visible',
                       trigger_type=1,
                       script_name='',
                       after_script_name='',
                       actbox_name='Unlock',
                       actbox_url='',
                       actbox_category='workflow',
                       props={'guard_roles': 'ProjectAdmin'},
                       )

    tdef = wf.transitions['unlockAsVisible']
    tdef.setProperties(title='Unlock as Public',
                       description='',
                       new_state_id='visible',
                       trigger_type=1,
                       script_name='',
                       after_script_name='',
                       actbox_name='Unlock',
                       actbox_url='',
                       actbox_category='workflow',
                       props={'guard_roles': 'ProjectAdmin'},
                       )

    # State Variable
    wf.variables.setStateVar('review_state')

    # Variable Initialization
    vdef = wf.variables['action']
    vdef.setProperties(description='The last transition',
                       default_value='',
                       default_expr='transition/getId|nothing',
                       for_catalog=0,
                       for_status=1,
                       update_always=1,
                       props=None)

    vdef = wf.variables['actor']
    vdef.setProperties(description='The ID of the user who performed the last transition',
                       default_value='',
                       default_expr='user/getId',
                       for_catalog=0,
                       for_status=1,
                       update_always=1,
                       props=None)

    vdef = wf.variables['comments']
    vdef.setProperties(description='Comments about the last transition',
                       default_value='',
                       default_expr="python:state_change.kwargs.get('comment', '')",
                       for_catalog=0,
                       for_status=1,
                       update_always=1,
                       props=None)

    vdef = wf.variables['review_history']
    vdef.setProperties(description='Provides access to workflow history',
                       default_value='',
                       default_expr='state_change/getHistory',
                       for_catalog=0,
                       for_status=0,
                       update_always=0,
                       props={'guard_permissions': 'Request review; Review portal content'})

    vdef = wf.variables['time']
    vdef.setProperties(description='Time of the last transition',
                       default_value='',
                       default_expr='state_change/getDateTime',
                       for_catalog=0,
                       for_status=1,
                       update_always=1,
                       props=None)

    # Worklist Initialization
    ldef = wf.worklists['reviewer_queue']
    ldef.setProperties(description='Reviewer tasks',
                       actbox_name='Pending (%(count)d)',
                       actbox_url='%(portal_url)s/search?review_state=pending',
                       actbox_category='global',
                       props={'guard_permissions': 'Review portal content',
                              'var_match_review_state': 'pending'})

def create_plone_openplans_workflow(id):
    """Create, setup and return the workflow.
    """
    ob = DCWorkflowDefinition(id)
    setup_plone_openplans_workflow(ob)
    return ob

addWorkflowFactory(create_plone_openplans_workflow,
                   id='plone_openplans_workflow',
                   title='Default OpenPlans Workflow [Plone]')
