Now lets load up the ghosting adapter (see
interfaces.metadata.IIndexingGhost).

this will get tested more in an integration test with plone, but here
we will check the basics. Essentially, it's an alias to the existing
metadata record::

    >>> from opencore.nui.indexing import ghosted_cols
    >>> klass_dict = dict(zip(ghosted_cols, range(3)))
    >>> proxy = md.proxy(klass_dict)
    >>> md.selectiveMetadataUpdate(catalog._catalog, uid, proxy)
    >>> mdg = md.IIndexingGhost(self.project)

For metadata that does not exist as attr's or methods on the object,
the adapter should return whatever the current value of the metadata
column is for that uid::

    >>> mdg.getValue(ghosted_cols[0])
    0
    >>> mdg.getValue(ghosted_cols[1])
    1
    >>> mdg.getValue(ghosted_cols[2])
    2
