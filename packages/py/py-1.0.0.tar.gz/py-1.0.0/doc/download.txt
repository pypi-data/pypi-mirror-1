.. 
    ==============
    Downloading
    ==============

    .. _`PyPI project page`: http://pypi.python.org/pypi/py/

    Latest Release, see `PyPI project page`_

using setuptools / easy_install 
===================================================

With a working `setuptools installation`_ you can type::

    easy_install -U py 

to get the latest release of the py lib.  The ``-U`` switch
will trigger an upgrade if you already have an older version installed. 
The py lib and its tools are expected to work well on Linux,
Windows and OSX, Python versions 2.3, 2.4, 2.5 and 2.6.

We provide binary eggs for Windows machines. 

On other systems you need a working C-compiler in order to
install the full py lib.  If you don't have a compiler available 
you can still install the py lib but without greenlets - look 
below for the ``install_lib`` target. 

**IMPORTANT NOTE**: if you are using Windows and have 
0.8 versions of the py lib on your system, please download 
and execute http://codespeak.net/svn/py/build/winpathclean.py
This will check that no previous files are getting in the way. 
You can find out the py lib version with::

    import py
    print py.version


.. _`checkout`:

Installing from version control / develop mode
=================================================

To follow development or help with fixing things
for the next release, checkout the complete code
and documentation source with mercurial_::

    hg clone https://bitbucket.org/hpk42/py-trunk/

With a working `setuptools installation`_ you can then issue::

    python setup.py develop 

in order to work with your checkout version. 

For enhancing one of the plugins you may go to
the ``py/test/plugin/`` sub directory. 

.. _mercurial: http://mercurial.selenic.com/wiki/

.. _`no-setuptools`:

Working without setuptools / from source
==========================================

If you have a checkout_ or a tarball_ it is actually not neccessary to issue
``setup.py`` commands in order to use py lib and its tools.  You can
simply add the root directory to ``PYTHONPATH`` and ``py/bin`` or
``py\bin\win32`` to your ``PATH`` settings. 

There are also helper scripts to set the environment
on windows::

    c:\\path\to\checkout\py\env.cmd

and on linux/osx you can add something like this to 
your shell initialization::

    eval `python ~/path/to/checkout/py/env.py`

both of which which will get you good settings 
for ``PYTHONPATH`` and ``PATH``.

Note also that the command line scripts will look 
for "nearby" py libs, so if you have a layout like this::

    mypkg/
        subpkg1/
            tests/
        tests/
    py/ 

then issuing ``py.test subpkg1`` will use the py lib
from that projects root directory. 

Debian and RPM packages 
===================================

As of July 2009 pytest/pylib 1.0 RPMs and Debian packages 
are not yet available. So you will only find older
versions. 

On Debian systems look for ``python-codespeak-lib``.
*But this package is probably outdated - if somebody 
can help with bringing this up to date, 
that would be very much appreciated.*

Dwayne Bailey has thankfully put together a Fedora `RPM`_. 

.. _`RPM`: http://translate.sourceforge.net/releases/testing/fedora/pylib-0.9.2-1.fc9.noarch.rpm

.. _`setuptools installation`: http://pypi.python.org/pypi/setuptools

.. _tarball:

Installing from a TAR archive 
===================================================

You need a working `setuptools installation`_. 

Go to the python package index (pypi) and download a tar file:

    http://pypi.python.org/pypi/py/

and unpack it to a directory, where you then type::

    python setup.py install

