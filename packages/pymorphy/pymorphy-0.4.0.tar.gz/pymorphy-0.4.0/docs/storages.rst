Key-value базы данных для хранения словарей
===========================================

В алгоритмах использовались данные в виде ассоциативных и простых
массивов. Чтобы не загружать все словари сразу в память, в pymorphy
данные берутся из одной из key-value базы данных. Интерфейс доступа
при этом остается как для dict. Т.е. требование к хранилищу - поддерживать
``[]`` и ``in`` (``__getitem__``, ``__setitem__`` и ``__contains__``).


.. _supported-storages:

Поддерживаемые типы хранилищ
----------------------------

SQLite
^^^^^^

Файлы со словарями имеют расширение "``.sqlite``". Набор словарей
для русского языка: ``ru.sqlite.zip``.
Пример подключения::

    m = get_moprh('dicts/ru') # или так: get_moprh('dicts/ru', 'sqlite')

Преимущество - в совместимости. Не требует установки, кроссплатформенный формат
хранения данных. Если какие-то проблемы с использованием других
вариантов, можно использовать SQLite. Вариант по умолчанию.

Этот самый медленный вариант.

Shelve
^^^^^^

Файлы со словарями имеют расширение "``.shelve``". Набор словарей
для русского языка: ``ru.shelve.zip``.
Пример подключения::

    m = get_moprh('dicts/ru', 'shelve')

Это включенная в стандартную поставку библиотека, которая предоставляет
dict-like доступ к базам данных BSDDB, GDB, BDB и DumbDB.

Плюс - включена в стандартную поставку и потребляет меньше всего
оперативной памяти.

Минус - меньшая скорость работы, чем у альтернативных вариантов,
часто меняющийся (от версии к версии) формат баз BSDDB. Из-за этого нельзя
быть уверенным, что скачанный словарь заработает на конкретной машине. Может
потребоваться переконвертиртация словаря для текущей
версии BSDDB (или для поддерживаемой shelve базы данных, если BSDDB вообще
не поддерживается). Переконвертация осуществляется с помощью скрипта
encode_dicts.py, который есть в репозитории (не устанавливается через
easy_install и pip).

Tokyo Cabinet
^^^^^^^^^^^^^

Файлы со словарями имеют расширение "``.tcb``" и "``.tch``" для
Btree+ и Hash-вариантов базы. Наборы словарей для русского языка:
``ru.tcb.zip`` и ``ru.tch.zip``.

.. note::

    Btree-вариант занимает меньше места, но работает чуть медленнее.

Пример подключения::

    m = get_moprh('dicts/ru', 'tch')

Наследник BSDDB, BDB, GDBM, QDBM. Обеспечивает хорошую скорость работы и
небольшой размер словарей. Лицензия LGPL.

Требует установки tokyocabinet средствами ОС.

debian ::

    $ sudo aptitude install tokyocabinet-bin
    $ pip install pytc

macports ::

    $ sudo port install tokyocabinet
    $ pip install pytc

Официальный сайт: http://1978th.net/tokyocabinet/

CDB
^^^

Файлы со словарями имеют расширение "``.cdb``". Набор словарей
для русского языка: ``ru.cdb.zip``.
Пример подключения::

    m = get_moprh('dicts/ru', 'cdb')


Самый быстрый вариант, ест меньше памяти, чем Tokyo Cabinet, автор
D. J. Bernstein.

Установка::

    $ pip install python-cdb

Для установки потребуются установленные средства сборки (gcc, заголовочные
файлы питона).

Минус - лицензия GPL. А pymorphy - под лицензией MIT. И я вот не знаю, можно
ли вообще его использовать.

Официальный сайт: http://cr.yp.to/cdb.html

Официальный сайт библиотеки для python: http://pilcrow.madison.wi.us/


Выбор хранилища
---------------

Очень мало оперативной памяти: Shelve (BSDDB), отключаем кеширование и psyco.

Достаточно оперативной памяти, нужна большая скорость: CDB или Tokyo Cabinet,
включаем кеширование и psyco.

Какие-то проблемы при установке (технические или лицензионного
характера): SQLite, кеширование и psyco включены.

psyco обычно добавляет 1М к занимаемой оперативной памяти и сильно ускоряет
работу (в несколько раз).

Кеширование тоже сильно ускоряет работу (до 20 раз), но увеличивает потребление памяти в
соответствии с тем, сколько разных слов было запрошено.

При выключенном кешировании и psyco узкое место - скорость выбранного хранилища.
При включенном кешировании и выключенном psyco - ресурсы процессора.
При включенном кешировании и psyco - опять скорость хранилища.
