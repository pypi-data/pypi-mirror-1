import PIL

from zope.i18n import translate
from DateTime import DateTime

from Products.plonehrm import PloneHrmMessageFactory as _
from Products.plonehrm.content.employee import Employee
from Products.plonehrm.content.employee import schema
from Products.plonehrm.browser.base_edit import BaseEditView
from Products.plonehrm.validator import AgeValidator, BSNValidator

class EmployeeEditView(BaseEditView):
    """ Special view to edit worklocation.
    """

    def get_gender_vocabulary(self):
        vocab = self.context._genderVocabulary()
        return self.translate_vocabulary(vocab, _)

    def get_civilStatus_vocabulary(self):
        vocab = self.context._civilStatusVocabulary()
        return self.translate_vocabulary(vocab, _)

    def get_idType_vocabulary(self):
        vocab = self.context._idTypeVocabulary()
        return self.translate_vocabulary(vocab, _)

    def get_required_fields(self):
        return ['lastName']        

    def get_errors_list(self):
        """ The list of potential errors to display in the form.
        """
        lang = self.lang()
        
        # The list of potentials errors for each field.
        no_lastName = translate(_(u'msg_error_no_lastName',
                               default=u'You must provide a last name for' + \
                               ' the employee'),
                             target_language=lang)

        incorrect_format = translate(_(u'msg_error_incorrect_format',
                                       default=u'This image format is not supported'),
                                     target_language=lang)

        # Messages for birth date and social security number are
        # dynamically generated by validators.
        return {'lastName' : {'no_lastName': no_lastName},
                'birthDate' : {'invalid' : ''},
                'idEndDate': {'invalid' : ''},
                'socialSecurityNumber' : {'invalid' : ''},
                'portrait' : {'invalid' : incorrect_format}}


    def validate_form(self):
        """ Validates the form submitted when updating the employee.
        """
        fields = self.get_form_fields()
        for field in fields:
            if not field in self.form and not field in self.hidden_fields:
                # Should not happen
                return

        ageValidator = AgeValidator('ageValidator')
        bsnValidator = BSNValidator('BsnValidator')

        if not self.form['lastName']:
            self.errors.append('lastName_no_lastName')

        # Checks that the dates are correct.
        dates = ['birthDate', 'idEndDate']

        for d in dates:
            try:
                year = int(self.form[d + '_year'])
                month = int(self.form[d + '_month'])
                day = int(self.form[d + '_day'])

                if year > 0:
                    DateTime(year, month, day)
            except:
                self.errors.append(d + '_invalid')
                msg_invalid = translate(_('error_invalid_date',
                                          'This date is not valid'),
                                        target_language=self.lang())
                self.errors_list[d]['invalid'] = msg_invalid

        ageValid = ageValidator(self.form['birthDate'],
                                REQUEST=self.request)

        # We have to test '== True' to be sure that it is not a string that
        # is returned.
        if not ageValid == True:
            self.errors.append('birthDate_invalid')
            self.errors_list['birthDate']['invalid'] = ageValid

        bsnValid = bsnValidator(self.form['socialSecurityNumber'],
                                REQUEST=self.request)

        if self.form['socialSecurityNumber'] and not bsnValid == True:
            self.errors.append('socialSecurityNumber_invalid')
            self.errors_list['socialSecurityNumber']['invalid'] = bsnValid


        if 'portrait' in self.form and self.form['portrait']:
            try:
                image = PIL.Image.open(self.form['portrait'])
                if image.format == 'BMP':
                    self.errors.append('portrait_invalid')
            except:
                self.errors.append('portrait_invalid')


    def post_update(self):
        """ Removes the user portrait if asked.
        """
        if 'portrait_delete' in self.form and \
           self.form['portrait_delete'] == 'delete':
            self.context.setPortrait('DELETE_IMAGE')

    def __init__(self, context, request):
        success_msg = _(u'msg_employee_saved',
                        default=u'The employee has been saved.')

        error_msg = _(u'error_employee_saved',
                        default=u'Errors were found while saving the employee.')

        BaseEditView.__init__(self, context, request, schema,
                              success_msg, error_msg)

        self.hidden_fields = ['workStartDate', 'title']
