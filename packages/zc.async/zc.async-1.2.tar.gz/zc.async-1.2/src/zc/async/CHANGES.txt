1.2 (2008-06-20)
================

- made the log for finding an activated agent report the pertinent queue's oid
  as an unpacked integer, rather than the packed string blob. Use
  ``ZODB.utils.p64`` to convert back to an oid that the ZODB will recognize.

- Bugfix: in failing a job, the job thought it was in its old agent, and the
  ``fail`` call failed. This is now tested by the first example in new doctest
  ``catastrophes.txt``.

- jobs no longer default to a ``begin_by`` value of one hour after the
  ``begin_after``.  The default now is no limit.

- Made dispatcher much more robust to transaction errors and ZEO
  ClientDisconnected errors.

- Jobs now use an IRetryPolicy to decide what to do on failure within a job,
  within the commit of the result, and if the job is interrupted.  This allows
  support of transactional jobs, transactional jobs that critically must be
  run to completion, and non-transactional jobs such as communicating with an
  external service.

- The default retry policy supports retries for ClientDisconnected errors,
  transaction errors, and interruptions.

- ``job.txt`` has been expanded significantly to show error handling and the
  use of retry policies. New file ``catastrophes.txt`` shows handling of other
  catastrophes, such as interruptions to polling.

- job errors now go in the main zc.async.event log rather than in the
  zc.async.trace log.  Successes continue to go in the trace log.

- callback failures go to the main log as a CRITICAL error, by default.

- ``handleInterrupt`` is the new protocol on jobs to inform them that they were
  active in a dispatcher that is now dead. They either fail or reschedule,
  depending on the associated IRetryPolicy for the job. If they reschedule,
  this should either be a datetime or timedelta. The job calls the agent's
  ``reschedule`` method. If the timedelta is empty or negative, or the datetime
  is earlier than now, the job is put back in the queue with a new ``putBack``
  method on the queue. This is intended to be the opposite of ``claim``. Jobs
  put in the queue with ``putBack`` will be pulled out before any others.

- convert to using zope.minmax rather than locally defined ``Atom``.

- Fix (and simplify) last_ping code so as to reduce unnecessarily writing the
  state of the parent DispatcherAgents collection to the database whenever the
  atom changed.

- Depends on new release of zc.twist (1.3)

- Switched dispatcher's in-memory storage of job and poll information to be per
  job or per poll, respectively, rather than per time period, so as to try and
  make memory usage more predictable (for instance, whether a dispatcher is
  whipping through lots of jobs quickly, or doing work more slowly).

1.1.1 (2008-05-14)
==================

- more README tweaks.

- converted all reports from the dispatcher, including the monitor output,
  to use "unpacked" integer oids.  This addresses a problem that simplejson
  was having in trying to interpret the packed string blobs as unicode, and
  then making zc.ngi fall over.  To get the object, then, you'll need to
  use ``ZODB.utils.p64``, like this:
  ``connection.get(ZODB.utils.p64(INTEGER_OID))``, where ``INTEGER_OID``
  indicates the integer oid of the object you want to examine.

- added several more tests for the monitor code.

- made the ``async jobs`` monitor command be "up to the minute".  Before, it
  included all of the new and active jobs from the previous poll; now, it
  also filters out those that have since completed.

- The ``async job`` command was broken, as revealed by a new monitor test.
  Fixed, which also means we need a new version of zope.bforest (1.2) for a new
  feature there.

1.1 (2008-04-24)
================

- Fired events when the IQueues and IQueue objects are installed by the
  QueueInstaller (thanks to Fred Drake).

- Dispatchers make agent threads keep their connections, so each connection's
  object cache use is optimized if the agent regularly requests jobs with
  the same objects.

- README improved (thanks to Benji York and Sebastian Ware).

- Callbacks are logged at start in the trace log.

- All job results (including callbacks) are logged, including verbose
  tracebacks if the callback generated a failure.

- Had the ThreadedDispatcherInstaller subscriber stash the thread on the
  dispatcher, so you can shut down tests like this:

  >>> import zc.async.dispatcher
  >>> dispatcher = zc.async.dispatcher.get()
  >>> dispatcher.reactor.callFromThread(dispatcher.reactor.stop)
  >>> dispatcher.thread.join(3)

- Added ``getQueue`` to zc.async.local as a convenience (it does what you
  could already do: ``zc.async.local.getJob().queue``).

- Clarified that ``IQueue.pull`` is the approved way of removing scheduled jobs
  from a queue in interfaces and README.

- reports in the logs of a job's success or failure come before callbacks are
  started.

- Added a section showing how the basic_dispatcher_policy.zcml worked, which
  then pushed the former README_3 examples into README_3b.

- Put ZPL everywhere I was supposed to.

- Moved a number of helpful testing functions out of footnotes and into
  zc.async.testing, both so that zc.async tests don't have to redefine them
  and client packages can reuse them.

1.0 (2008-04-09)
================

Initial release.
