# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.34
#
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

import _CGNS
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


CGNS_VERSION = _CGNS.CGNS_VERSION
CGNS_DOTVERS = _CGNS.CGNS_DOTVERS
CG_MODE_READ = _CGNS.CG_MODE_READ
CG_MODE_WRITE = _CGNS.CG_MODE_WRITE
CG_MODE_CLOSED = _CGNS.CG_MODE_CLOSED
CG_MODE_MODIFY = _CGNS.CG_MODE_MODIFY
CG_OK = _CGNS.CG_OK
CG_ERROR = _CGNS.CG_ERROR
CG_NODE_NOT_FOUND = _CGNS.CG_NODE_NOT_FOUND
CG_INCORRECT_PATH = _CGNS.CG_INCORRECT_PATH
CG_NO_INDEX_DIM = _CGNS.CG_NO_INDEX_DIM
CG_Null = _CGNS.CG_Null
CG_UserDefined = _CGNS.CG_UserDefined
CG_MAX_GOTO_DEPTH = _CGNS.CG_MAX_GOTO_DEPTH
CG_CONFIG_ERROR = _CGNS.CG_CONFIG_ERROR
CG_CONFIG_COMPRESS = _CGNS.CG_CONFIG_COMPRESS
CG_CONFIG_SET_PATH = _CGNS.CG_CONFIG_SET_PATH
CG_CONFIG_ADD_PATH = _CGNS.CG_CONFIG_ADD_PATH
MODE_READ = _CGNS.MODE_READ
MODE_WRITE = _CGNS.MODE_WRITE
MODE_CLOSED = _CGNS.MODE_CLOSED
MODE_MODIFY = _CGNS.MODE_MODIFY
Null = _CGNS.Null
UserDefined = _CGNS.UserDefined
MassUnitsNull = _CGNS.MassUnitsNull
MassUnitsUserDefined = _CGNS.MassUnitsUserDefined
Kilogram = _CGNS.Kilogram
Gram = _CGNS.Gram
Slug = _CGNS.Slug
PoundMass = _CGNS.PoundMass
LengthUnitsNull = _CGNS.LengthUnitsNull
LengthUnitsUserDefined = _CGNS.LengthUnitsUserDefined
Meter = _CGNS.Meter
Centimeter = _CGNS.Centimeter
Millimeter = _CGNS.Millimeter
Foot = _CGNS.Foot
Inch = _CGNS.Inch
TimeUnitsNull = _CGNS.TimeUnitsNull
TimeUnitsUserDefined = _CGNS.TimeUnitsUserDefined
Second = _CGNS.Second
TemperatureUnitsNull = _CGNS.TemperatureUnitsNull
TemperatureUnitsUserDefined = _CGNS.TemperatureUnitsUserDefined
Kelvin = _CGNS.Kelvin
Celsius = _CGNS.Celsius
Rankine = _CGNS.Rankine
Fahrenheit = _CGNS.Fahrenheit
AngleUnitsNull = _CGNS.AngleUnitsNull
AngleUnitsUserDefined = _CGNS.AngleUnitsUserDefined
Degree = _CGNS.Degree
Radian = _CGNS.Radian
ElectricCurrentUnitsNull = _CGNS.ElectricCurrentUnitsNull
ElectricCurrentUnitsUserDefined = _CGNS.ElectricCurrentUnitsUserDefined
Ampere = _CGNS.Ampere
Abampere = _CGNS.Abampere
Statampere = _CGNS.Statampere
Edison = _CGNS.Edison
auCurrent = _CGNS.auCurrent
SubstanceAmountUnitsNull = _CGNS.SubstanceAmountUnitsNull
SubstanceAmountUnitsUserDefined = _CGNS.SubstanceAmountUnitsUserDefined
Mole = _CGNS.Mole
Entities = _CGNS.Entities
StandardCubicFoot = _CGNS.StandardCubicFoot
StandardCubicMeter = _CGNS.StandardCubicMeter
LuminousIntensityUnitsNull = _CGNS.LuminousIntensityUnitsNull
LuminousIntensityUnitsUserDefined = _CGNS.LuminousIntensityUnitsUserDefined
Candela = _CGNS.Candela
Candle = _CGNS.Candle
Carcel = _CGNS.Carcel
Hefner = _CGNS.Hefner
Violle = _CGNS.Violle
NofValidMassUnits = _CGNS.NofValidMassUnits
NofValidLengthUnits = _CGNS.NofValidLengthUnits
NofValidTimeUnits = _CGNS.NofValidTimeUnits
NofValidTemperatureUnits = _CGNS.NofValidTemperatureUnits
NofValidAngleUnits = _CGNS.NofValidAngleUnits
NofValidElectricCurrentUnits = _CGNS.NofValidElectricCurrentUnits
NofValidSubstanceAmountUnits = _CGNS.NofValidSubstanceAmountUnits
NofValidLuminousIntensityUnits = _CGNS.NofValidLuminousIntensityUnits
DataClassNull = _CGNS.DataClassNull
DataClassUserDefined = _CGNS.DataClassUserDefined
Dimensional = _CGNS.Dimensional
NormalizedByDimensional = _CGNS.NormalizedByDimensional
NormalizedByUnknownDimensional = _CGNS.NormalizedByUnknownDimensional
NondimensionalParameter = _CGNS.NondimensionalParameter
DimensionlessConstant = _CGNS.DimensionlessConstant
NofValidDataClass = _CGNS.NofValidDataClass
GridLocationNull = _CGNS.GridLocationNull
GridLocationUserDefined = _CGNS.GridLocationUserDefined
Vertex = _CGNS.Vertex
CellCenter = _CGNS.CellCenter
FaceCenter = _CGNS.FaceCenter
IFaceCenter = _CGNS.IFaceCenter
JFaceCenter = _CGNS.JFaceCenter
KFaceCenter = _CGNS.KFaceCenter
EdgeCenter = _CGNS.EdgeCenter
NofValidGridLocation = _CGNS.NofValidGridLocation
BCDataTypeNull = _CGNS.BCDataTypeNull
BCDataTypeUserDefined = _CGNS.BCDataTypeUserDefined
Dirichlet = _CGNS.Dirichlet
Neumann = _CGNS.Neumann
NofValidBCDataTypes = _CGNS.NofValidBCDataTypes
GridConnectivityTypeNull = _CGNS.GridConnectivityTypeNull
GridConnectivityTypeUserDefined = _CGNS.GridConnectivityTypeUserDefined
Overset = _CGNS.Overset
Abutting = _CGNS.Abutting
Abutting1to1 = _CGNS.Abutting1to1
NofValidGridConnectivityTypes = _CGNS.NofValidGridConnectivityTypes
PointSetTypeNull = _CGNS.PointSetTypeNull
PointSetTypeUserDefined = _CGNS.PointSetTypeUserDefined
PointList = _CGNS.PointList
PointListDonor = _CGNS.PointListDonor
PointRange = _CGNS.PointRange
PointRangeDonor = _CGNS.PointRangeDonor
ElementRange = _CGNS.ElementRange
ElementList = _CGNS.ElementList
CellListDonor = _CGNS.CellListDonor
NofValidPointSetTypes = _CGNS.NofValidPointSetTypes
GoverningEquationsNull = _CGNS.GoverningEquationsNull
GoverningEquationsUserDefined = _CGNS.GoverningEquationsUserDefined
FullPotential = _CGNS.FullPotential
Euler = _CGNS.Euler
NSLaminar = _CGNS.NSLaminar
NSTurbulent = _CGNS.NSTurbulent
NSLaminarIncompressible = _CGNS.NSLaminarIncompressible
NSTurbulentIncompressible = _CGNS.NSTurbulentIncompressible
ModelTypeNull = _CGNS.ModelTypeNull
ModelTypeUserDefined = _CGNS.ModelTypeUserDefined
Ideal = _CGNS.Ideal
VanderWaals = _CGNS.VanderWaals
Constant = _CGNS.Constant
PowerLaw = _CGNS.PowerLaw
SutherlandLaw = _CGNS.SutherlandLaw
ConstantPrandtl = _CGNS.ConstantPrandtl
EddyViscosity = _CGNS.EddyViscosity
ReynoldsStress = _CGNS.ReynoldsStress
ReynoldsStressAlgebraic = _CGNS.ReynoldsStressAlgebraic
Algebraic_BaldwinLomax = _CGNS.Algebraic_BaldwinLomax
Algebraic_CebeciSmith = _CGNS.Algebraic_CebeciSmith
HalfEquation_JohnsonKing = _CGNS.HalfEquation_JohnsonKing
OneEquation_BaldwinBarth = _CGNS.OneEquation_BaldwinBarth
OneEquation_SpalartAllmaras = _CGNS.OneEquation_SpalartAllmaras
TwoEquation_JonesLaunder = _CGNS.TwoEquation_JonesLaunder
TwoEquation_MenterSST = _CGNS.TwoEquation_MenterSST
TwoEquation_Wilcox = _CGNS.TwoEquation_Wilcox
CaloricallyPerfect = _CGNS.CaloricallyPerfect
ThermallyPerfect = _CGNS.ThermallyPerfect
ConstantDensity = _CGNS.ConstantDensity
RedlichKwong = _CGNS.RedlichKwong
Frozen = _CGNS.Frozen
ThermalEquilib = _CGNS.ThermalEquilib
ThermalNonequilib = _CGNS.ThermalNonequilib
ChemicalEquilibCurveFit = _CGNS.ChemicalEquilibCurveFit
ChemicalEquilibMinimization = _CGNS.ChemicalEquilibMinimization
ChemicalNonequilib = _CGNS.ChemicalNonequilib
EMElectricField = _CGNS.EMElectricField
EMMagneticField = _CGNS.EMMagneticField
EMConductivity = _CGNS.EMConductivity
Voltage = _CGNS.Voltage
Interpolated = _CGNS.Interpolated
Equilibrium_LinRessler = _CGNS.Equilibrium_LinRessler
Chemistry_LinRessler = _CGNS.Chemistry_LinRessler
NofValidGoverningEquationsTypes = _CGNS.NofValidGoverningEquationsTypes
NofValidModelTypes = _CGNS.NofValidModelTypes
BCTypeNull = _CGNS.BCTypeNull
BCTypeUserDefined = _CGNS.BCTypeUserDefined
BCAxisymmetricWedge = _CGNS.BCAxisymmetricWedge
BCDegenerateLine = _CGNS.BCDegenerateLine
BCDegeneratePoint = _CGNS.BCDegeneratePoint
BCDirichlet = _CGNS.BCDirichlet
BCExtrapolate = _CGNS.BCExtrapolate
BCFarfield = _CGNS.BCFarfield
BCGeneral = _CGNS.BCGeneral
BCInflow = _CGNS.BCInflow
BCInflowSubsonic = _CGNS.BCInflowSubsonic
BCInflowSupersonic = _CGNS.BCInflowSupersonic
BCNeumann = _CGNS.BCNeumann
BCOutflow = _CGNS.BCOutflow
BCOutflowSubsonic = _CGNS.BCOutflowSubsonic
BCOutflowSupersonic = _CGNS.BCOutflowSupersonic
BCSymmetryPlane = _CGNS.BCSymmetryPlane
BCSymmetryPolar = _CGNS.BCSymmetryPolar
BCTunnelInflow = _CGNS.BCTunnelInflow
BCTunnelOutflow = _CGNS.BCTunnelOutflow
BCWall = _CGNS.BCWall
BCWallInviscid = _CGNS.BCWallInviscid
BCWallViscous = _CGNS.BCWallViscous
BCWallViscousHeatFlux = _CGNS.BCWallViscousHeatFlux
BCWallViscousIsothermal = _CGNS.BCWallViscousIsothermal
FamilySpecified = _CGNS.FamilySpecified
NofValidBCTypes = _CGNS.NofValidBCTypes
DataTypeNull = _CGNS.DataTypeNull
DataTypeUserDefined = _CGNS.DataTypeUserDefined
Integer = _CGNS.Integer
RealSingle = _CGNS.RealSingle
RealDouble = _CGNS.RealDouble
Character = _CGNS.Character
NofValidDataTypes = _CGNS.NofValidDataTypes
ElementTypeNull = _CGNS.ElementTypeNull
ElementTypeUserDefined = _CGNS.ElementTypeUserDefined
NODE = _CGNS.NODE
BAR_2 = _CGNS.BAR_2
BAR_3 = _CGNS.BAR_3
TRI_3 = _CGNS.TRI_3
TRI_6 = _CGNS.TRI_6
QUAD_4 = _CGNS.QUAD_4
QUAD_8 = _CGNS.QUAD_8
QUAD_9 = _CGNS.QUAD_9
TETRA_4 = _CGNS.TETRA_4
TETRA_10 = _CGNS.TETRA_10
PYRA_5 = _CGNS.PYRA_5
PYRA_14 = _CGNS.PYRA_14
PENTA_6 = _CGNS.PENTA_6
PENTA_15 = _CGNS.PENTA_15
PENTA_18 = _CGNS.PENTA_18
HEXA_8 = _CGNS.HEXA_8
HEXA_20 = _CGNS.HEXA_20
HEXA_27 = _CGNS.HEXA_27
MIXED = _CGNS.MIXED
NGON_n = _CGNS.NGON_n
NofValidElementTypes = _CGNS.NofValidElementTypes
ZoneTypeNull = _CGNS.ZoneTypeNull
ZoneTypeUserDefined = _CGNS.ZoneTypeUserDefined
Structured = _CGNS.Structured
Unstructured = _CGNS.Unstructured
NofValidZoneTypes = _CGNS.NofValidZoneTypes
RigidGridMotionTypeNull = _CGNS.RigidGridMotionTypeNull
RigidGridMotionTypeUserDefined = _CGNS.RigidGridMotionTypeUserDefined
ConstantRate = _CGNS.ConstantRate
VariableRate = _CGNS.VariableRate
NofValidRigidGridMotionTypes = _CGNS.NofValidRigidGridMotionTypes
ArbitraryGridMotionTypeNull = _CGNS.ArbitraryGridMotionTypeNull
ArbitraryGridMotionTypeUserDefined = _CGNS.ArbitraryGridMotionTypeUserDefined
NonDeformingGrid = _CGNS.NonDeformingGrid
DeformingGrid = _CGNS.DeformingGrid
NofValidArbitraryGridMotionTypes = _CGNS.NofValidArbitraryGridMotionTypes
SimulationTypeNull = _CGNS.SimulationTypeNull
SimulationTypeUserDefined = _CGNS.SimulationTypeUserDefined
TimeAccurate = _CGNS.TimeAccurate
NonTimeAccurate = _CGNS.NonTimeAccurate
NofValidSimulationTypes = _CGNS.NofValidSimulationTypes
WallFunctionTypeNull = _CGNS.WallFunctionTypeNull
WallFunctionTypeUserDefined = _CGNS.WallFunctionTypeUserDefined
Generic = _CGNS.Generic
AreaTypeNull = _CGNS.AreaTypeNull
AreaTypeUserDefined = _CGNS.AreaTypeUserDefined
BleedArea = _CGNS.BleedArea
CaptureArea = _CGNS.CaptureArea
NofValidWallFunctionTypes = _CGNS.NofValidWallFunctionTypes
NofValidAreaTypes = _CGNS.NofValidAreaTypes
AverageInterfaceTypeNull = _CGNS.AverageInterfaceTypeNull
AverageInterfaceTypeUserDefined = _CGNS.AverageInterfaceTypeUserDefined
AverageAll = _CGNS.AverageAll
AverageCircumferential = _CGNS.AverageCircumferential
AverageRadial = _CGNS.AverageRadial
AverageI = _CGNS.AverageI
AverageJ = _CGNS.AverageJ
AverageK = _CGNS.AverageK
NofValidAverageInterfaceTypes = _CGNS.NofValidAverageInterfaceTypes
cg_open = _CGNS.cg_open
cg_version = _CGNS.cg_version
cg_close = _CGNS.cg_close
cg_root_id = _CGNS.cg_root_id
cg_get_name = _CGNS.cg_get_name
cg_MassUnitsName = _CGNS.cg_MassUnitsName
cg_LengthUnitsName = _CGNS.cg_LengthUnitsName
cg_TimeUnitsName = _CGNS.cg_TimeUnitsName
cg_TemperatureUnitsName = _CGNS.cg_TemperatureUnitsName
cg_AngleUnitsName = _CGNS.cg_AngleUnitsName
cg_ElectricCurrentUnitsName = _CGNS.cg_ElectricCurrentUnitsName
cg_SubstanceAmountUnitsName = _CGNS.cg_SubstanceAmountUnitsName
cg_LuminousIntensityUnitsName = _CGNS.cg_LuminousIntensityUnitsName
cg_DataClassName = _CGNS.cg_DataClassName
cg_GridLocationName = _CGNS.cg_GridLocationName
cg_BCDataTypeName = _CGNS.cg_BCDataTypeName
cg_GridConnectivityTypeName = _CGNS.cg_GridConnectivityTypeName
cg_PointSetTypeName = _CGNS.cg_PointSetTypeName
cg_GoverningEquationsTypeName = _CGNS.cg_GoverningEquationsTypeName
cg_ModelTypeName = _CGNS.cg_ModelTypeName
cg_BCTypeName = _CGNS.cg_BCTypeName
cg_DataTypeName = _CGNS.cg_DataTypeName
cg_ElementTypeName = _CGNS.cg_ElementTypeName
cg_ZoneTypeName = _CGNS.cg_ZoneTypeName
cg_RigidGridMotionTypeName = _CGNS.cg_RigidGridMotionTypeName
cg_ArbitraryGridMotionTypeName = _CGNS.cg_ArbitraryGridMotionTypeName
cg_SimulationTypeName = _CGNS.cg_SimulationTypeName
cg_WallFunctionTypeName = _CGNS.cg_WallFunctionTypeName
cg_AreaTypeName = _CGNS.cg_AreaTypeName
cg_AverageInterfaceTypeName = _CGNS.cg_AverageInterfaceTypeName
cg_configure = _CGNS.cg_configure
cg_is_cgns = _CGNS.cg_is_cgns
cg_nbases = _CGNS.cg_nbases
cg_base_read = _CGNS.cg_base_read
cg_base_id = _CGNS.cg_base_id
cg_base_write = _CGNS.cg_base_write
cg_nzones = _CGNS.cg_nzones
cg_zone_read = _CGNS.cg_zone_read
cg_zone_type = _CGNS.cg_zone_type
cg_zone_id = _CGNS.cg_zone_id
cg_zone_write = _CGNS.cg_zone_write
cg_nfamilies = _CGNS.cg_nfamilies
cg_family_read = _CGNS.cg_family_read
cg_family_write = _CGNS.cg_family_write
cg_famname_read = _CGNS.cg_famname_read
cg_famname_write = _CGNS.cg_famname_write
cg_fambc_read = _CGNS.cg_fambc_read
cg_fambc_write = _CGNS.cg_fambc_write
cg_geo_read = _CGNS.cg_geo_read
cg_geo_write = _CGNS.cg_geo_write
cg_part_read = _CGNS.cg_part_read
cg_part_write = _CGNS.cg_part_write
cg_ngrids = _CGNS.cg_ngrids
cg_grid_read = _CGNS.cg_grid_read
cg_grid_write = _CGNS.cg_grid_write
cg_ncoords = _CGNS.cg_ncoords
cg_coord_info = _CGNS.cg_coord_info
cg_coord_read = _CGNS.cg_coord_read
cg_coord_id = _CGNS.cg_coord_id
cg_coord_write = _CGNS.cg_coord_write
cg_coord_partial_write = _CGNS.cg_coord_partial_write
cg_nsections = _CGNS.cg_nsections
cg_section_read = _CGNS.cg_section_read
cg_elements_read = _CGNS.cg_elements_read
cg_section_write = _CGNS.cg_section_write
cg_parent_data_write = _CGNS.cg_parent_data_write
cg_npe = _CGNS.cg_npe
cg_ElementDataSize = _CGNS.cg_ElementDataSize
cg_section_partial_write = _CGNS.cg_section_partial_write
cg_parent_data_partial_write = _CGNS.cg_parent_data_partial_write
cg_elements_partial_read = _CGNS.cg_elements_partial_read
cg_ElementPartialSize = _CGNS.cg_ElementPartialSize
cg_nsols = _CGNS.cg_nsols
cg_sol_info = _CGNS.cg_sol_info
cg_sol_id = _CGNS.cg_sol_id
cg_sol_write = _CGNS.cg_sol_write
cg_nfields = _CGNS.cg_nfields
cg_field_info = _CGNS.cg_field_info
cg_field_read = _CGNS.cg_field_read
cg_field_id = _CGNS.cg_field_id
cg_field_write = _CGNS.cg_field_write
cg_field_partial_write = _CGNS.cg_field_partial_write
cg_nholes = _CGNS.cg_nholes
cg_hole_info = _CGNS.cg_hole_info
cg_hole_read = _CGNS.cg_hole_read
cg_hole_id = _CGNS.cg_hole_id
cg_hole_write = _CGNS.cg_hole_write
cg_nconns = _CGNS.cg_nconns
cg_conn_info = _CGNS.cg_conn_info
cg_conn_read = _CGNS.cg_conn_read
cg_conn_id = _CGNS.cg_conn_id
cg_conn_write = _CGNS.cg_conn_write
cg_conn_write_short = _CGNS.cg_conn_write_short
cg_conn_read_short = _CGNS.cg_conn_read_short
cg_n1to1 = _CGNS.cg_n1to1
cg_1to1_read = _CGNS.cg_1to1_read
cg_1to1_id = _CGNS.cg_1to1_id
cg_1to1_write = _CGNS.cg_1to1_write
cg_n1to1_global = _CGNS.cg_n1to1_global
cg_1to1_read_global = _CGNS.cg_1to1_read_global
cg_nbocos = _CGNS.cg_nbocos
cg_boco_info = _CGNS.cg_boco_info
cg_boco_read = _CGNS.cg_boco_read
cg_boco_id = _CGNS.cg_boco_id
cg_boco_write = _CGNS.cg_boco_write
cg_boco_normal_write = _CGNS.cg_boco_normal_write
cg_dataset_read = _CGNS.cg_dataset_read
cg_dataset_write = _CGNS.cg_dataset_write
cg_bcdataset_write = _CGNS.cg_bcdataset_write
cg_bcdataset_info = _CGNS.cg_bcdataset_info
cg_bcdataset_read = _CGNS.cg_bcdataset_read
cg_bcdata_write = _CGNS.cg_bcdata_write
cg_ndiscrete = _CGNS.cg_ndiscrete
cg_discrete_read = _CGNS.cg_discrete_read
cg_discrete_write = _CGNS.cg_discrete_write
cg_n_rigid_motions = _CGNS.cg_n_rigid_motions
cg_rigid_motion_read = _CGNS.cg_rigid_motion_read
cg_rigid_motion_write = _CGNS.cg_rigid_motion_write
cg_n_arbitrary_motions = _CGNS.cg_n_arbitrary_motions
cg_arbitrary_motion_read = _CGNS.cg_arbitrary_motion_read
cg_arbitrary_motion_write = _CGNS.cg_arbitrary_motion_write
cg_simulation_type_read = _CGNS.cg_simulation_type_read
cg_simulation_type_write = _CGNS.cg_simulation_type_write
cg_biter_read = _CGNS.cg_biter_read
cg_biter_write = _CGNS.cg_biter_write
cg_ziter_read = _CGNS.cg_ziter_read
cg_ziter_write = _CGNS.cg_ziter_write
cg_gravity_read = _CGNS.cg_gravity_read
cg_gravity_write = _CGNS.cg_gravity_write
cg_axisym_read = _CGNS.cg_axisym_read
cg_axisym_write = _CGNS.cg_axisym_write
cg_rotating_read = _CGNS.cg_rotating_read
cg_rotating_write = _CGNS.cg_rotating_write
cg_bc_wallfunction_read = _CGNS.cg_bc_wallfunction_read
cg_bc_wallfunction_write = _CGNS.cg_bc_wallfunction_write
cg_bc_area_read = _CGNS.cg_bc_area_read
cg_bc_area_write = _CGNS.cg_bc_area_write
cg_conn_periodic_read = _CGNS.cg_conn_periodic_read
cg_conn_periodic_write = _CGNS.cg_conn_periodic_write
cg_1to1_periodic_write = _CGNS.cg_1to1_periodic_write
cg_1to1_periodic_read = _CGNS.cg_1to1_periodic_read
cg_conn_average_read = _CGNS.cg_conn_average_read
cg_conn_average_write = _CGNS.cg_conn_average_write
cg_1to1_average_write = _CGNS.cg_1to1_average_write
cg_1to1_average_read = _CGNS.cg_1to1_average_read
cg_goto = _CGNS.cg_goto
cg_gorel = _CGNS.cg_gorel
cg_gopath = _CGNS.cg_gopath
cg_golist = _CGNS.cg_golist
cg_where = _CGNS.cg_where
cg_convergence_read = _CGNS.cg_convergence_read
cg_convergence_write = _CGNS.cg_convergence_write
cg_state_read = _CGNS.cg_state_read
cg_state_write = _CGNS.cg_state_write
cg_equationset_read = _CGNS.cg_equationset_read
cg_equationset_chemistry_read = _CGNS.cg_equationset_chemistry_read
cg_equationset_elecmagn_read = _CGNS.cg_equationset_elecmagn_read
cg_equationset_write = _CGNS.cg_equationset_write
cg_governing_read = _CGNS.cg_governing_read
cg_governing_write = _CGNS.cg_governing_write
cg_diffusion_read = _CGNS.cg_diffusion_read
cg_diffusion_write = _CGNS.cg_diffusion_write
cg_model_read = _CGNS.cg_model_read
cg_model_write = _CGNS.cg_model_write
cg_narrays = _CGNS.cg_narrays
cg_array_info = _CGNS.cg_array_info
cg_array_read = _CGNS.cg_array_read
cg_array_read_as = _CGNS.cg_array_read_as
cg_array_write = _CGNS.cg_array_write
cg_nuser_data = _CGNS.cg_nuser_data
cg_user_data_read = _CGNS.cg_user_data_read
cg_user_data_write = _CGNS.cg_user_data_write
cg_nintegrals = _CGNS.cg_nintegrals
cg_integral_read = _CGNS.cg_integral_read
cg_integral_write = _CGNS.cg_integral_write
cg_rind_read = _CGNS.cg_rind_read
cg_rind_write = _CGNS.cg_rind_write
cg_ndescriptors = _CGNS.cg_ndescriptors
cg_descriptor_read = _CGNS.cg_descriptor_read
cg_descriptor_write = _CGNS.cg_descriptor_write
cg_nunits = _CGNS.cg_nunits
cg_units_read = _CGNS.cg_units_read
cg_units_write = _CGNS.cg_units_write
cg_unitsfull_read = _CGNS.cg_unitsfull_read
cg_unitsfull_write = _CGNS.cg_unitsfull_write
cg_exponents_info = _CGNS.cg_exponents_info
cg_nexponents = _CGNS.cg_nexponents
cg_exponents_read = _CGNS.cg_exponents_read
cg_exponents_write = _CGNS.cg_exponents_write
cg_expfull_read = _CGNS.cg_expfull_read
cg_expfull_write = _CGNS.cg_expfull_write
cg_conversion_info = _CGNS.cg_conversion_info
cg_conversion_read = _CGNS.cg_conversion_read
cg_conversion_write = _CGNS.cg_conversion_write
cg_dataclass_read = _CGNS.cg_dataclass_read
cg_dataclass_write = _CGNS.cg_dataclass_write
cg_gridlocation_read = _CGNS.cg_gridlocation_read
cg_gridlocation_write = _CGNS.cg_gridlocation_write
cg_ordinal_read = _CGNS.cg_ordinal_read
cg_ordinal_write = _CGNS.cg_ordinal_write
cg_ptset_info = _CGNS.cg_ptset_info
cg_ptset_write = _CGNS.cg_ptset_write
cg_ptset_read = _CGNS.cg_ptset_read
cg_is_link = _CGNS.cg_is_link
cg_link_read = _CGNS.cg_link_read
cg_link_write = _CGNS.cg_link_write
cg_delete_node = _CGNS.cg_delete_node
cg_free = _CGNS.cg_free
cg_get_error = _CGNS.cg_get_error
cg_error_exit = _CGNS.cg_error_exit
cg_error_print = _CGNS.cg_error_print
charP2String = _CGNS.charP2String
class intArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, intArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, intArray, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _CGNS.new_intArray(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _CGNS.delete_intArray
    __del__ = lambda self : None;
    def __getitem__(*args): return _CGNS.intArray___getitem__(*args)
    def __setitem__(*args): return _CGNS.intArray___setitem__(*args)
    def cast(*args): return _CGNS.intArray_cast(*args)
    __swig_getmethods__["frompointer"] = lambda x: _CGNS.intArray_frompointer
    if _newclass:frompointer = staticmethod(_CGNS.intArray_frompointer)
intArray_swigregister = _CGNS.intArray_swigregister
intArray_swigregister(intArray)
cvar = _CGNS.cvar
intArray_frompointer = _CGNS.intArray_frompointer

class floatArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, floatArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, floatArray, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _CGNS.new_floatArray(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _CGNS.delete_floatArray
    __del__ = lambda self : None;
    def __getitem__(*args): return _CGNS.floatArray___getitem__(*args)
    def __setitem__(*args): return _CGNS.floatArray___setitem__(*args)
    def cast(*args): return _CGNS.floatArray_cast(*args)
    __swig_getmethods__["frompointer"] = lambda x: _CGNS.floatArray_frompointer
    if _newclass:frompointer = staticmethod(_CGNS.floatArray_frompointer)
floatArray_swigregister = _CGNS.floatArray_swigregister
floatArray_swigregister(floatArray)
floatArray_frompointer = _CGNS.floatArray_frompointer

class doubleArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, doubleArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, doubleArray, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _CGNS.new_doubleArray(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _CGNS.delete_doubleArray
    __del__ = lambda self : None;
    def __getitem__(*args): return _CGNS.doubleArray___getitem__(*args)
    def __setitem__(*args): return _CGNS.doubleArray___setitem__(*args)
    def cast(*args): return _CGNS.doubleArray_cast(*args)
    __swig_getmethods__["frompointer"] = lambda x: _CGNS.doubleArray_frompointer
    if _newclass:frompointer = staticmethod(_CGNS.doubleArray_frompointer)
doubleArray_swigregister = _CGNS.doubleArray_swigregister
doubleArray_swigregister(doubleArray)
doubleArray_frompointer = _CGNS.doubleArray_frompointer

class intp(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, intp, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, intp, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _CGNS.new_intp(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _CGNS.delete_intp
    __del__ = lambda self : None;
    def assign(*args): return _CGNS.intp_assign(*args)
    def value(*args): return _CGNS.intp_value(*args)
    def cast(*args): return _CGNS.intp_cast(*args)
    __swig_getmethods__["frompointer"] = lambda x: _CGNS.intp_frompointer
    if _newclass:frompointer = staticmethod(_CGNS.intp_frompointer)
intp_swigregister = _CGNS.intp_swigregister
intp_swigregister(intp)
intp_frompointer = _CGNS.intp_frompointer

class floatp(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, floatp, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, floatp, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _CGNS.new_floatp(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _CGNS.delete_floatp
    __del__ = lambda self : None;
    def assign(*args): return _CGNS.floatp_assign(*args)
    def value(*args): return _CGNS.floatp_value(*args)
    def cast(*args): return _CGNS.floatp_cast(*args)
    __swig_getmethods__["frompointer"] = lambda x: _CGNS.floatp_frompointer
    if _newclass:frompointer = staticmethod(_CGNS.floatp_frompointer)
floatp_swigregister = _CGNS.floatp_swigregister
floatp_swigregister(floatp)
floatp_frompointer = _CGNS.floatp_frompointer

class doublep(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, doublep, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, doublep, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _CGNS.new_doublep(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _CGNS.delete_doublep
    __del__ = lambda self : None;
    def assign(*args): return _CGNS.doublep_assign(*args)
    def value(*args): return _CGNS.doublep_value(*args)
    def cast(*args): return _CGNS.doublep_cast(*args)
    __swig_getmethods__["frompointer"] = lambda x: _CGNS.doublep_frompointer
    if _newclass:frompointer = staticmethod(_CGNS.doublep_frompointer)
doublep_swigregister = _CGNS.doublep_swigregister
doublep_swigregister(doublep)
doublep_frompointer = _CGNS.doublep_frompointer

class charp(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, charp, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, charp, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _CGNS.new_charp(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _CGNS.delete_charp
    __del__ = lambda self : None;
    def assign(*args): return _CGNS.charp_assign(*args)
    def value(*args): return _CGNS.charp_value(*args)
    def cast(*args): return _CGNS.charp_cast(*args)
    __swig_getmethods__["frompointer"] = lambda x: _CGNS.charp_frompointer
    if _newclass:frompointer = staticmethod(_CGNS.charp_frompointer)
charp_swigregister = _CGNS.charp_swigregister
charp_swigregister(charp)
charp_frompointer = _CGNS.charp_frompointer

class ZoneType_tp(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ZoneType_tp, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ZoneType_tp, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _CGNS.new_ZoneType_tp(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _CGNS.delete_ZoneType_tp
    __del__ = lambda self : None;
    def assign(*args): return _CGNS.ZoneType_tp_assign(*args)
    def value(*args): return _CGNS.ZoneType_tp_value(*args)
    def cast(*args): return _CGNS.ZoneType_tp_cast(*args)
    __swig_getmethods__["frompointer"] = lambda x: _CGNS.ZoneType_tp_frompointer
    if _newclass:frompointer = staticmethod(_CGNS.ZoneType_tp_frompointer)
ZoneType_tp_swigregister = _CGNS.ZoneType_tp_swigregister
ZoneType_tp_swigregister(ZoneType_tp)
ZoneType_tp_frompointer = _CGNS.ZoneType_tp_frompointer

class AngleUnits_tp(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AngleUnits_tp, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AngleUnits_tp, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _CGNS.new_AngleUnits_tp(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _CGNS.delete_AngleUnits_tp
    __del__ = lambda self : None;
    def assign(*args): return _CGNS.AngleUnits_tp_assign(*args)
    def value(*args): return _CGNS.AngleUnits_tp_value(*args)
    def cast(*args): return _CGNS.AngleUnits_tp_cast(*args)
    __swig_getmethods__["frompointer"] = lambda x: _CGNS.AngleUnits_tp_frompointer
    if _newclass:frompointer = staticmethod(_CGNS.AngleUnits_tp_frompointer)
AngleUnits_tp_swigregister = _CGNS.AngleUnits_tp_swigregister
AngleUnits_tp_swigregister(AngleUnits_tp)
AngleUnits_tp_frompointer = _CGNS.AngleUnits_tp_frompointer

class MassUnits_tp(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MassUnits_tp, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MassUnits_tp, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _CGNS.new_MassUnits_tp(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _CGNS.delete_MassUnits_tp
    __del__ = lambda self : None;
    def assign(*args): return _CGNS.MassUnits_tp_assign(*args)
    def value(*args): return _CGNS.MassUnits_tp_value(*args)
    def cast(*args): return _CGNS.MassUnits_tp_cast(*args)
    __swig_getmethods__["frompointer"] = lambda x: _CGNS.MassUnits_tp_frompointer
    if _newclass:frompointer = staticmethod(_CGNS.MassUnits_tp_frompointer)
MassUnits_tp_swigregister = _CGNS.MassUnits_tp_swigregister
MassUnits_tp_swigregister(MassUnits_tp)
MassUnits_tp_frompointer = _CGNS.MassUnits_tp_frompointer

class LengthUnits_tp(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LengthUnits_tp, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LengthUnits_tp, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _CGNS.new_LengthUnits_tp(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _CGNS.delete_LengthUnits_tp
    __del__ = lambda self : None;
    def assign(*args): return _CGNS.LengthUnits_tp_assign(*args)
    def value(*args): return _CGNS.LengthUnits_tp_value(*args)
    def cast(*args): return _CGNS.LengthUnits_tp_cast(*args)
    __swig_getmethods__["frompointer"] = lambda x: _CGNS.LengthUnits_tp_frompointer
    if _newclass:frompointer = staticmethod(_CGNS.LengthUnits_tp_frompointer)
LengthUnits_tp_swigregister = _CGNS.LengthUnits_tp_swigregister
LengthUnits_tp_swigregister(LengthUnits_tp)
LengthUnits_tp_frompointer = _CGNS.LengthUnits_tp_frompointer

class TimeUnits_tp(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TimeUnits_tp, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TimeUnits_tp, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _CGNS.new_TimeUnits_tp(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _CGNS.delete_TimeUnits_tp
    __del__ = lambda self : None;
    def assign(*args): return _CGNS.TimeUnits_tp_assign(*args)
    def value(*args): return _CGNS.TimeUnits_tp_value(*args)
    def cast(*args): return _CGNS.TimeUnits_tp_cast(*args)
    __swig_getmethods__["frompointer"] = lambda x: _CGNS.TimeUnits_tp_frompointer
    if _newclass:frompointer = staticmethod(_CGNS.TimeUnits_tp_frompointer)
TimeUnits_tp_swigregister = _CGNS.TimeUnits_tp_swigregister
TimeUnits_tp_swigregister(TimeUnits_tp)
TimeUnits_tp_frompointer = _CGNS.TimeUnits_tp_frompointer

class TemperatureUnits_tp(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TemperatureUnits_tp, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TemperatureUnits_tp, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _CGNS.new_TemperatureUnits_tp(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _CGNS.delete_TemperatureUnits_tp
    __del__ = lambda self : None;
    def assign(*args): return _CGNS.TemperatureUnits_tp_assign(*args)
    def value(*args): return _CGNS.TemperatureUnits_tp_value(*args)
    def cast(*args): return _CGNS.TemperatureUnits_tp_cast(*args)
    __swig_getmethods__["frompointer"] = lambda x: _CGNS.TemperatureUnits_tp_frompointer
    if _newclass:frompointer = staticmethod(_CGNS.TemperatureUnits_tp_frompointer)
TemperatureUnits_tp_swigregister = _CGNS.TemperatureUnits_tp_swigregister
TemperatureUnits_tp_swigregister(TemperatureUnits_tp)
TemperatureUnits_tp_frompointer = _CGNS.TemperatureUnits_tp_frompointer

class ElectricCurrentUnits_tp(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ElectricCurrentUnits_tp, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ElectricCurrentUnits_tp, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _CGNS.new_ElectricCurrentUnits_tp(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _CGNS.delete_ElectricCurrentUnits_tp
    __del__ = lambda self : None;
    def assign(*args): return _CGNS.ElectricCurrentUnits_tp_assign(*args)
    def value(*args): return _CGNS.ElectricCurrentUnits_tp_value(*args)
    def cast(*args): return _CGNS.ElectricCurrentUnits_tp_cast(*args)
    __swig_getmethods__["frompointer"] = lambda x: _CGNS.ElectricCurrentUnits_tp_frompointer
    if _newclass:frompointer = staticmethod(_CGNS.ElectricCurrentUnits_tp_frompointer)
ElectricCurrentUnits_tp_swigregister = _CGNS.ElectricCurrentUnits_tp_swigregister
ElectricCurrentUnits_tp_swigregister(ElectricCurrentUnits_tp)
ElectricCurrentUnits_tp_frompointer = _CGNS.ElectricCurrentUnits_tp_frompointer

class LuminousIntensityUnits_tp(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LuminousIntensityUnits_tp, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LuminousIntensityUnits_tp, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _CGNS.new_LuminousIntensityUnits_tp(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _CGNS.delete_LuminousIntensityUnits_tp
    __del__ = lambda self : None;
    def assign(*args): return _CGNS.LuminousIntensityUnits_tp_assign(*args)
    def value(*args): return _CGNS.LuminousIntensityUnits_tp_value(*args)
    def cast(*args): return _CGNS.LuminousIntensityUnits_tp_cast(*args)
    __swig_getmethods__["frompointer"] = lambda x: _CGNS.LuminousIntensityUnits_tp_frompointer
    if _newclass:frompointer = staticmethod(_CGNS.LuminousIntensityUnits_tp_frompointer)
LuminousIntensityUnits_tp_swigregister = _CGNS.LuminousIntensityUnits_tp_swigregister
LuminousIntensityUnits_tp_swigregister(LuminousIntensityUnits_tp)
LuminousIntensityUnits_tp_frompointer = _CGNS.LuminousIntensityUnits_tp_frompointer

class DataClass_tp(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataClass_tp, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DataClass_tp, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _CGNS.new_DataClass_tp(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _CGNS.delete_DataClass_tp
    __del__ = lambda self : None;
    def assign(*args): return _CGNS.DataClass_tp_assign(*args)
    def value(*args): return _CGNS.DataClass_tp_value(*args)
    def cast(*args): return _CGNS.DataClass_tp_cast(*args)
    __swig_getmethods__["frompointer"] = lambda x: _CGNS.DataClass_tp_frompointer
    if _newclass:frompointer = staticmethod(_CGNS.DataClass_tp_frompointer)
DataClass_tp_swigregister = _CGNS.DataClass_tp_swigregister
DataClass_tp_swigregister(DataClass_tp)
DataClass_tp_frompointer = _CGNS.DataClass_tp_frompointer

class GridLocation_tp(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GridLocation_tp, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GridLocation_tp, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _CGNS.new_GridLocation_tp(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _CGNS.delete_GridLocation_tp
    __del__ = lambda self : None;
    def assign(*args): return _CGNS.GridLocation_tp_assign(*args)
    def value(*args): return _CGNS.GridLocation_tp_value(*args)
    def cast(*args): return _CGNS.GridLocation_tp_cast(*args)
    __swig_getmethods__["frompointer"] = lambda x: _CGNS.GridLocation_tp_frompointer
    if _newclass:frompointer = staticmethod(_CGNS.GridLocation_tp_frompointer)
GridLocation_tp_swigregister = _CGNS.GridLocation_tp_swigregister
GridLocation_tp_swigregister(GridLocation_tp)
GridLocation_tp_frompointer = _CGNS.GridLocation_tp_frompointer

class GridConnectivityType_tp(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GridConnectivityType_tp, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GridConnectivityType_tp, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _CGNS.new_GridConnectivityType_tp(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _CGNS.delete_GridConnectivityType_tp
    __del__ = lambda self : None;
    def assign(*args): return _CGNS.GridConnectivityType_tp_assign(*args)
    def value(*args): return _CGNS.GridConnectivityType_tp_value(*args)
    def cast(*args): return _CGNS.GridConnectivityType_tp_cast(*args)
    __swig_getmethods__["frompointer"] = lambda x: _CGNS.GridConnectivityType_tp_frompointer
    if _newclass:frompointer = staticmethod(_CGNS.GridConnectivityType_tp_frompointer)
GridConnectivityType_tp_swigregister = _CGNS.GridConnectivityType_tp_swigregister
GridConnectivityType_tp_swigregister(GridConnectivityType_tp)
GridConnectivityType_tp_frompointer = _CGNS.GridConnectivityType_tp_frompointer

class BCDataType_tp(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BCDataType_tp, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BCDataType_tp, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _CGNS.new_BCDataType_tp(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _CGNS.delete_BCDataType_tp
    __del__ = lambda self : None;
    def assign(*args): return _CGNS.BCDataType_tp_assign(*args)
    def value(*args): return _CGNS.BCDataType_tp_value(*args)
    def cast(*args): return _CGNS.BCDataType_tp_cast(*args)
    __swig_getmethods__["frompointer"] = lambda x: _CGNS.BCDataType_tp_frompointer
    if _newclass:frompointer = staticmethod(_CGNS.BCDataType_tp_frompointer)
BCDataType_tp_swigregister = _CGNS.BCDataType_tp_swigregister
BCDataType_tp_swigregister(BCDataType_tp)
BCDataType_tp_frompointer = _CGNS.BCDataType_tp_frompointer

class PointSetType_tp(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PointSetType_tp, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PointSetType_tp, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _CGNS.new_PointSetType_tp(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _CGNS.delete_PointSetType_tp
    __del__ = lambda self : None;
    def assign(*args): return _CGNS.PointSetType_tp_assign(*args)
    def value(*args): return _CGNS.PointSetType_tp_value(*args)
    def cast(*args): return _CGNS.PointSetType_tp_cast(*args)
    __swig_getmethods__["frompointer"] = lambda x: _CGNS.PointSetType_tp_frompointer
    if _newclass:frompointer = staticmethod(_CGNS.PointSetType_tp_frompointer)
PointSetType_tp_swigregister = _CGNS.PointSetType_tp_swigregister
PointSetType_tp_swigregister(PointSetType_tp)
PointSetType_tp_frompointer = _CGNS.PointSetType_tp_frompointer

class GoverningEquationsType_tp(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GoverningEquationsType_tp, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GoverningEquationsType_tp, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _CGNS.new_GoverningEquationsType_tp(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _CGNS.delete_GoverningEquationsType_tp
    __del__ = lambda self : None;
    def assign(*args): return _CGNS.GoverningEquationsType_tp_assign(*args)
    def value(*args): return _CGNS.GoverningEquationsType_tp_value(*args)
    def cast(*args): return _CGNS.GoverningEquationsType_tp_cast(*args)
    __swig_getmethods__["frompointer"] = lambda x: _CGNS.GoverningEquationsType_tp_frompointer
    if _newclass:frompointer = staticmethod(_CGNS.GoverningEquationsType_tp_frompointer)
GoverningEquationsType_tp_swigregister = _CGNS.GoverningEquationsType_tp_swigregister
GoverningEquationsType_tp_swigregister(GoverningEquationsType_tp)
GoverningEquationsType_tp_frompointer = _CGNS.GoverningEquationsType_tp_frompointer

class ModelType_tp(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModelType_tp, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ModelType_tp, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _CGNS.new_ModelType_tp(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _CGNS.delete_ModelType_tp
    __del__ = lambda self : None;
    def assign(*args): return _CGNS.ModelType_tp_assign(*args)
    def value(*args): return _CGNS.ModelType_tp_value(*args)
    def cast(*args): return _CGNS.ModelType_tp_cast(*args)
    __swig_getmethods__["frompointer"] = lambda x: _CGNS.ModelType_tp_frompointer
    if _newclass:frompointer = staticmethod(_CGNS.ModelType_tp_frompointer)
ModelType_tp_swigregister = _CGNS.ModelType_tp_swigregister
ModelType_tp_swigregister(ModelType_tp)
ModelType_tp_frompointer = _CGNS.ModelType_tp_frompointer

class BCType_tp(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BCType_tp, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BCType_tp, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _CGNS.new_BCType_tp(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _CGNS.delete_BCType_tp
    __del__ = lambda self : None;
    def assign(*args): return _CGNS.BCType_tp_assign(*args)
    def value(*args): return _CGNS.BCType_tp_value(*args)
    def cast(*args): return _CGNS.BCType_tp_cast(*args)
    __swig_getmethods__["frompointer"] = lambda x: _CGNS.BCType_tp_frompointer
    if _newclass:frompointer = staticmethod(_CGNS.BCType_tp_frompointer)
BCType_tp_swigregister = _CGNS.BCType_tp_swigregister
BCType_tp_swigregister(BCType_tp)
BCType_tp_frompointer = _CGNS.BCType_tp_frompointer

class DataType_tp(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataType_tp, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DataType_tp, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _CGNS.new_DataType_tp(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _CGNS.delete_DataType_tp
    __del__ = lambda self : None;
    def assign(*args): return _CGNS.DataType_tp_assign(*args)
    def value(*args): return _CGNS.DataType_tp_value(*args)
    def cast(*args): return _CGNS.DataType_tp_cast(*args)
    __swig_getmethods__["frompointer"] = lambda x: _CGNS.DataType_tp_frompointer
    if _newclass:frompointer = staticmethod(_CGNS.DataType_tp_frompointer)
DataType_tp_swigregister = _CGNS.DataType_tp_swigregister
DataType_tp_swigregister(DataType_tp)
DataType_tp_frompointer = _CGNS.DataType_tp_frompointer

class ElementType_tp(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ElementType_tp, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ElementType_tp, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _CGNS.new_ElementType_tp(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _CGNS.delete_ElementType_tp
    __del__ = lambda self : None;
    def assign(*args): return _CGNS.ElementType_tp_assign(*args)
    def value(*args): return _CGNS.ElementType_tp_value(*args)
    def cast(*args): return _CGNS.ElementType_tp_cast(*args)
    __swig_getmethods__["frompointer"] = lambda x: _CGNS.ElementType_tp_frompointer
    if _newclass:frompointer = staticmethod(_CGNS.ElementType_tp_frompointer)
ElementType_tp_swigregister = _CGNS.ElementType_tp_swigregister
ElementType_tp_swigregister(ElementType_tp)
ElementType_tp_frompointer = _CGNS.ElementType_tp_frompointer

class ArbitraryGridMotionType_tp(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ArbitraryGridMotionType_tp, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ArbitraryGridMotionType_tp, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _CGNS.new_ArbitraryGridMotionType_tp(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _CGNS.delete_ArbitraryGridMotionType_tp
    __del__ = lambda self : None;
    def assign(*args): return _CGNS.ArbitraryGridMotionType_tp_assign(*args)
    def value(*args): return _CGNS.ArbitraryGridMotionType_tp_value(*args)
    def cast(*args): return _CGNS.ArbitraryGridMotionType_tp_cast(*args)
    __swig_getmethods__["frompointer"] = lambda x: _CGNS.ArbitraryGridMotionType_tp_frompointer
    if _newclass:frompointer = staticmethod(_CGNS.ArbitraryGridMotionType_tp_frompointer)
ArbitraryGridMotionType_tp_swigregister = _CGNS.ArbitraryGridMotionType_tp_swigregister
ArbitraryGridMotionType_tp_swigregister(ArbitraryGridMotionType_tp)
ArbitraryGridMotionType_tp_frompointer = _CGNS.ArbitraryGridMotionType_tp_frompointer

class SimulationType_tp(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SimulationType_tp, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SimulationType_tp, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _CGNS.new_SimulationType_tp(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _CGNS.delete_SimulationType_tp
    __del__ = lambda self : None;
    def assign(*args): return _CGNS.SimulationType_tp_assign(*args)
    def value(*args): return _CGNS.SimulationType_tp_value(*args)
    def cast(*args): return _CGNS.SimulationType_tp_cast(*args)
    __swig_getmethods__["frompointer"] = lambda x: _CGNS.SimulationType_tp_frompointer
    if _newclass:frompointer = staticmethod(_CGNS.SimulationType_tp_frompointer)
SimulationType_tp_swigregister = _CGNS.SimulationType_tp_swigregister
SimulationType_tp_swigregister(SimulationType_tp)
SimulationType_tp_frompointer = _CGNS.SimulationType_tp_frompointer

class WallFunctionType_tp(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WallFunctionType_tp, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WallFunctionType_tp, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _CGNS.new_WallFunctionType_tp(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _CGNS.delete_WallFunctionType_tp
    __del__ = lambda self : None;
    def assign(*args): return _CGNS.WallFunctionType_tp_assign(*args)
    def value(*args): return _CGNS.WallFunctionType_tp_value(*args)
    def cast(*args): return _CGNS.WallFunctionType_tp_cast(*args)
    __swig_getmethods__["frompointer"] = lambda x: _CGNS.WallFunctionType_tp_frompointer
    if _newclass:frompointer = staticmethod(_CGNS.WallFunctionType_tp_frompointer)
WallFunctionType_tp_swigregister = _CGNS.WallFunctionType_tp_swigregister
WallFunctionType_tp_swigregister(WallFunctionType_tp)
WallFunctionType_tp_frompointer = _CGNS.WallFunctionType_tp_frompointer

class AreaType_tp(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AreaType_tp, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AreaType_tp, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _CGNS.new_AreaType_tp(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _CGNS.delete_AreaType_tp
    __del__ = lambda self : None;
    def assign(*args): return _CGNS.AreaType_tp_assign(*args)
    def value(*args): return _CGNS.AreaType_tp_value(*args)
    def cast(*args): return _CGNS.AreaType_tp_cast(*args)
    __swig_getmethods__["frompointer"] = lambda x: _CGNS.AreaType_tp_frompointer
    if _newclass:frompointer = staticmethod(_CGNS.AreaType_tp_frompointer)
AreaType_tp_swigregister = _CGNS.AreaType_tp_swigregister
AreaType_tp_swigregister(AreaType_tp)
AreaType_tp_frompointer = _CGNS.AreaType_tp_frompointer

class AverageInterfaceType_tp(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AverageInterfaceType_tp, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AverageInterfaceType_tp, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _CGNS.new_AverageInterfaceType_tp(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _CGNS.delete_AverageInterfaceType_tp
    __del__ = lambda self : None;
    def assign(*args): return _CGNS.AverageInterfaceType_tp_assign(*args)
    def value(*args): return _CGNS.AverageInterfaceType_tp_value(*args)
    def cast(*args): return _CGNS.AverageInterfaceType_tp_cast(*args)
    __swig_getmethods__["frompointer"] = lambda x: _CGNS.AverageInterfaceType_tp_frompointer
    if _newclass:frompointer = staticmethod(_CGNS.AverageInterfaceType_tp_frompointer)
AverageInterfaceType_tp_swigregister = _CGNS.AverageInterfaceType_tp_swigregister
AverageInterfaceType_tp_swigregister(AverageInterfaceType_tp)
AverageInterfaceType_tp_frompointer = _CGNS.AverageInterfaceType_tp_frompointer



