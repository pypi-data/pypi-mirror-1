Defining ZEORAID storage servers
================================

The `gocept.zeoraid:server` recipe can be used to define ZEO storage servers
with management utilities for ZEORAID.

This recipe is internally built on top of `zc.zodbrecipes:server` and
instruments it, adding the generation of management scripts.

To define a storage server, you define a part for the server and specify
configuration data.  

    >>> write('buildout.cfg',
    ... '''
    ... [buildout]
    ... parts = zodb server
    ...
    ... [zodb]
    ... recipe = zc.recipe.egg:script
    ... eggs = ZODB3
    ... 
    ... [server]
    ... recipe = gocept.zeoraid:server
    ... zeo.conf = 
    ...    <zeo>
    ...       address 8100
    ...       monitor-address 8101
    ...       transaction-timeout 300
    ...    </zeo>
    ...    %import gocept.zeoraid
    ...    <raidstorage 1>
    ...       <zeoclient 1>
    ...           address 8101
    ...       </zeoclient>
    ...    </raidstorage>
    ... ''')

Here we specified a minimal ZEORAID configuration. When we run the buildout:

    >>> print system(buildout),
    Installing zodb.
    Generated script '/sample-buildout/bin/mkzeoinst'.
    Generated script '/sample-buildout/bin/fstail'.
    Generated script '/sample-buildout/bin/zeopack'.
    Generated script '/sample-buildout/bin/runzeo'.
    Generated script '/sample-buildout/bin/zeopasswd'.
    Generated script '/sample-buildout/bin/zeoctl'.
    Generated script '/sample-buildout/bin/fsdump'.
    Generated script '/sample-buildout/bin/fsrefs'.
    Generated script '/sample-buildout/bin/repozo'.
    Generated script '/sample-buildout/bin/fsoids'.
    Installing server.
    Generated script '/sample-buildout/bin/server'.
    Generated script '/sample-buildout/bin/server-raid-1'.

We get 2 things.  We get a directory in parts containing ZEO and
zdaemon configuration files:

    >>> ls('parts', 'server')
    -  zdaemon.conf
    -  zeo.conf

Let's look at the configuration files:

    >>> cat('parts', 'server', 'zeo.conf')
    %import gocept.zeoraid
    <BLANKLINE>
    <zeo>
      address 8100
      monitor-address 8101
      transaction-timeout 300
    </zeo>
    <BLANKLINE>
    <raidstorage 1>
      <zeoclient 1>
        address 8101
      </zeoclient>
    </raidstorage>
    <BLANKLINE>
    <eventlog>
      <logfile>
        path STDOUT
      </logfile>
    </eventlog>

We see the same data we input with the addition of an eventlog section that
directs logging to standard out.

Let's look at the scripts that were generated in our bin directory:

    >>> ls('bin')
    -  buildout
    -  fsdump
    -  fsoids
    -  fsrefs
    -  fstail
    -  mkzeoinst
    -  repozo
    -  runzeo
    -  server
    -  server-raid-1
    -  zeoctl
    -  zeopack
    -  zeopasswd


We have an additional RAID control script:

    >>> cat('bin', 'server-raid-1')
    #!/.../python
    <BLANKLINE>
    import sys
    sys.path[0:0] = [
      '.../src',
      '.../externals/ZODB/src',
      '/sample-buildout/eggs/zc.zodbrecipes-0.4.0-py2.4.egg',
      '/sample-buildout/eggs/setuptools-0.6c8-py2.4.egg',
      '/sample-buildout/eggs/transaction-1.0a1-py2.4.egg',
      '/sample-buildout/eggs/zdaemon-2.0.1-py2.4.egg',
      '/sample-buildout/eggs/ZConfig-2.5.1-py2.4.egg',
      '/sample-buildout/eggs/zope.testing-3.5.1-py2.4.egg',
      '/sample-buildout/eggs/zope.proxy-3.4.0-py2.4-linux-i686.egg',
      '/sample-buildout/eggs/zope.interface-3.4.1-py2.4-linux-i686.egg',
      '/sample-buildout/eggs/zc.recipe.egg-1.1.0dev_r84019-py2.4.egg',
      '/sample-buildout/eggs/zc.buildout-1.0.0-py2.4.egg',
      ]
    <BLANKLINE>
    import gocept.zeoraid.scripts.controller
    <BLANKLINE>
    if __name__ == '__main__':
        gocept.zeoraid.scripts.controller.main(port=8100, host="127.0.0.1", storage="1")


This is a console script with customized defaults.  We can use this to control
the RAID storage aspects of the ZEO server.

Unix deployment support
=======================

The management script's name is compatible with `zc.recipe.deployment`.

Let's create a deployment environmont and add a deployment section to our
buildout:

    >>> for d in 'cron', 'etc', 'log', 'rotate', 'rc', 'run':
    ...     mkdir(d)
    ...     globals()[d] = join(sample_buildout, d)

    >>> write('buildout.cfg',
    ... '''
    ... [buildout]
    ... parts = zodb server
    ... 
    ... [zodb]
    ... recipe = zc.recipe.egg:script
    ... eggs = ZODB3
    ... 
    ... [server]
    ... recipe = gocept.zeoraid:server
    ... zeo.conf = 
    ...    <zeo>
    ...       address 8100
    ...       monitor-address 8101
    ...       transaction-timeout 300
    ...    </zeo>
    ...    %%import gocept.zeoraid
    ...    <raidstorage main>
    ...       <zeoclient 1>
    ...         address 8101
    ...       </zeoclient>
    ...    </raidstorage>
    ... deployment = demo
    ...
    ... [demo]
    ... crontab-directory = %(cron)s
    ... etc-directory = %(etc)s
    ... log-directory = %(log)s
    ... logrotate-directory = %(rotate)s
    ... rc-directory = %(rc)s
    ... run-directory = %(run)s
    ... user = bob
    ... ''' % globals())

    >>> print system(buildout),
    Uninstalling server.
    Updating zodb.
    Installing server.
    Generated script '/sample-buildout/rc/demo-server'.
    Generated script '/sample-buildout/rc/demo-server-raid-main'.

Now, the parts directory and the control script will be gone:

    >>> import os
    >>> os.path.exists(join('parts', 'server'))
    False
    >>> os.path.exists(join('bin', 'server'))
    False

Instead, the control script will be in the rc directory:

    >>> ls('rc')
    -  demo-server
    -  demo-server-raid-main

    >>> cat('rc', 'demo-server-raid-main')
    #!/.../python
    <BLANKLINE>
    import sys
    sys.path[0:0] = [
      '.../src',
      '.../externals/ZODB/src',
      '/tmp/tmpfeWuYRbuildoutSetUp/_TEST_/sample-buildout/eggs/zc.zodbrecipes-0.4.0-py2.4.egg',
      '/tmp/tmpfeWuYRbuildoutSetUp/_TEST_/sample-buildout/eggs/setuptools-0.6c8-py2.4.egg',
      '/tmp/tmpfeWuYRbuildoutSetUp/_TEST_/sample-buildout/eggs/transaction-1.0a1-py2.4.egg',
      '/tmp/tmpfeWuYRbuildoutSetUp/_TEST_/sample-buildout/eggs/zdaemon-2.0.1-py2.4.egg',
      '/tmp/tmpfeWuYRbuildoutSetUp/_TEST_/sample-buildout/eggs/ZConfig-2.5.1-py2.4.egg',
      '/tmp/tmpfeWuYRbuildoutSetUp/_TEST_/sample-buildout/eggs/zope.testing-3.5.1-py2.4.egg',
      '/tmp/tmpfeWuYRbuildoutSetUp/_TEST_/sample-buildout/eggs/zope.proxy-3.4.0-py2.4-linux-i686.egg',
      '/tmp/tmpfeWuYRbuildoutSetUp/_TEST_/sample-buildout/eggs/zope.interface-3.4.1-py2.4-linux-i686.egg',
      '/tmp/tmpfeWuYRbuildoutSetUp/_TEST_/sample-buildout/eggs/zc.recipe.egg-1.1.0dev_r84019-py2.4.egg',
      '/tmp/tmpfeWuYRbuildoutSetUp/_TEST_/sample-buildout/eggs/zc.buildout-1.0.0-py2.4.egg',
      ]
    <BLANKLINE>
    import gocept.zeoraid.scripts.controller
    <BLANKLINE>
    if __name__ == '__main__':
        gocept.zeoraid.scripts.controller.main(port=8100, host="127.0.0.1", storage="main")


The run-control script name now combines the deployment name and the
script name.
