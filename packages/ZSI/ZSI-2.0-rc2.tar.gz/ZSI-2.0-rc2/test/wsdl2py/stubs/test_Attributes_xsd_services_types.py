################################################## 
# test_Attributes_xsd_services_types.py 
# generated by ZSI.generate.wsdl2python
##################################################


import ZSI
import ZSI.TCcompound
from ZSI.TC import ElementDeclaration,TypeDefinition
from ZSI.generate.pyclass import pyclass_type

##############################
# targetNamespace
# urn:example
##############################

class ns0:
    targetNamespace = "urn:example"

    class Test1_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:example"
        type = (schema, "Test1")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.Test1_Def.schema
            TClist = []
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            else:
                # attribute handling code
                self.attribute_typecode_dict["myInt"] = ZSI.TCnumbers.Iint()
                self.attribute_typecode_dict[("urn:example","myDouble")] = ZSI.TCnumbers.FPdouble()
                self.attribute_typecode_dict[("urn:example","myString")] = ZSI.TC.String()
                self.attribute_typecode_dict["myFloat"] = ZSI.TCnumbers.FPfloat()
                self.attribute_typecode_dict["myDecimal"] = ZSI.TC.Decimal()
                self.attribute_typecode_dict["myDuration"] = ZSI.TCtimes.Duration()
                self.attribute_typecode_dict["myDateTime"] = ZSI.TCtimes.gDateTime()
                self.attribute_typecode_dict["myTime"] = ZSI.TCtimes.gTime()
                self.attribute_typecode_dict["myDate"] = ZSI.TCtimes.gDate()
                self.attribute_typecode_dict["myGYearMonth"] = ZSI.TCtimes.gYearMonth()
                self.attribute_typecode_dict["myGYear"] = ZSI.TCtimes.gYear()
                self.attribute_typecode_dict["myGMonthDay"] = ZSI.TCtimes.gMonthDay()
                self.attribute_typecode_dict["myGDay"] = ZSI.TCtimes.gDay()
                self.attribute_typecode_dict["myGMonth"] = ZSI.TCtimes.gMonth()
                self.attribute_typecode_dict["myHexBinary"] = ZSI.TC.HexBinaryString()
                self.attribute_typecode_dict["myBase64Binary"] = ZSI.TC.Base64String()
                self.attribute_typecode_dict["myAnyURI"] = ZSI.TC.URI()
                self.attribute_typecode_dict["myQName"] = ZSI.TC.QName()
                self.attribute_typecode_dict["myNOTATION"] = ZSI.TC.AnyType()
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "Test1_Holder"
            self.pyclass = Holder

    class Test1_Dec(ElementDeclaration):
        literal = "Test1"
        schema = "urn:example"
        def __init__(self, **kw):
            kw["pname"] = ("urn:example","Test1")
            kw["aname"] = "_Test1"
            if ns0.Test1_Def not in ns0.Test1_Dec.__bases__:
                bases = list(ns0.Test1_Dec.__bases__)
                bases.insert(0, ns0.Test1_Def)
                ns0.Test1_Dec.__bases__ = tuple(bases)

            ns0.Test1_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "Test1_Dec_Holder"

# end class ns0 (tns: urn:example)
