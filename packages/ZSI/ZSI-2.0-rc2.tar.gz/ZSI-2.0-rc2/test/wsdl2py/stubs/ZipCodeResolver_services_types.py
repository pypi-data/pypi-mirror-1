################################################## 
# ZipCodeResolver_services_types.py 
# generated by ZSI.generate.wsdl2python
##################################################


import ZSI
import ZSI.TCcompound
from ZSI.TC import ElementDeclaration,TypeDefinition
from ZSI.generate.pyclass import pyclass_type

##############################
# targetNamespace
# http://webservices.eraserver.net/
##############################

class ns1:
    targetNamespace = "http://webservices.eraserver.net/"

    class USPSAddress_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://webservices.eraserver.net/"
        type = (schema, "USPSAddress")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.USPSAddress_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"Street"), aname="_Street", minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"City"), aname="_City", minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"State"), aname="_State", minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"ShortZIP"), aname="_ShortZIP", minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"FullZIP"), aname="_FullZIP", minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Street = None
                    self._City = None
                    self._State = None
                    self._ShortZIP = None
                    self._FullZIP = None
                    return
            Holder.__name__ = "USPSAddress_Holder"
            self.pyclass = Holder

    class FullZipCode_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        schema = "http://webservices.eraserver.net/"
        literal = "FullZipCode"
        def __init__(self, **kw):
            ns = ns1.FullZipCode_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"accessCode"), aname="_accessCode", minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"address"), aname="_address", minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"city"), aname="_city", minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"state"), aname="_state", minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://webservices.eraserver.net/","FullZipCode")
            kw["aname"] = "_FullZipCode"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._accessCode = None
                    self._address = None
                    self._city = None
                    self._state = None
                    return
            Holder.__name__ = "FullZipCode_Holder"
            self.pyclass = Holder

    class FullZipCodeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        schema = "http://webservices.eraserver.net/"
        literal = "FullZipCodeResponse"
        def __init__(self, **kw):
            ns = ns1.FullZipCodeResponse_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"FullZipCodeResult"), aname="_FullZipCodeResult", minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://webservices.eraserver.net/","FullZipCodeResponse")
            kw["aname"] = "_FullZipCodeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._FullZipCodeResult = None
                    return
            Holder.__name__ = "FullZipCodeResponse_Holder"
            self.pyclass = Holder

    class ShortZipCode_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        schema = "http://webservices.eraserver.net/"
        literal = "ShortZipCode"
        def __init__(self, **kw):
            ns = ns1.ShortZipCode_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"accessCode"), aname="_accessCode", minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"address"), aname="_address", minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"city"), aname="_city", minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"state"), aname="_state", minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://webservices.eraserver.net/","ShortZipCode")
            kw["aname"] = "_ShortZipCode"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._accessCode = None
                    self._address = None
                    self._city = None
                    self._state = None
                    return
            Holder.__name__ = "ShortZipCode_Holder"
            self.pyclass = Holder

    class ShortZipCodeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        schema = "http://webservices.eraserver.net/"
        literal = "ShortZipCodeResponse"
        def __init__(self, **kw):
            ns = ns1.ShortZipCodeResponse_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"ShortZipCodeResult"), aname="_ShortZipCodeResult", minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://webservices.eraserver.net/","ShortZipCodeResponse")
            kw["aname"] = "_ShortZipCodeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._ShortZipCodeResult = None
                    return
            Holder.__name__ = "ShortZipCodeResponse_Holder"
            self.pyclass = Holder

    class CorrectedAddressHtml_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        schema = "http://webservices.eraserver.net/"
        literal = "CorrectedAddressHtml"
        def __init__(self, **kw):
            ns = ns1.CorrectedAddressHtml_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"accessCode"), aname="_accessCode", minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"address"), aname="_address", minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"city"), aname="_city", minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"state"), aname="_state", minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://webservices.eraserver.net/","CorrectedAddressHtml")
            kw["aname"] = "_CorrectedAddressHtml"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._accessCode = None
                    self._address = None
                    self._city = None
                    self._state = None
                    return
            Holder.__name__ = "CorrectedAddressHtml_Holder"
            self.pyclass = Holder

    class CorrectedAddressHtmlResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        schema = "http://webservices.eraserver.net/"
        literal = "CorrectedAddressHtmlResponse"
        def __init__(self, **kw):
            ns = ns1.CorrectedAddressHtmlResponse_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"CorrectedAddressHtmlResult"), aname="_CorrectedAddressHtmlResult", minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://webservices.eraserver.net/","CorrectedAddressHtmlResponse")
            kw["aname"] = "_CorrectedAddressHtmlResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._CorrectedAddressHtmlResult = None
                    return
            Holder.__name__ = "CorrectedAddressHtmlResponse_Holder"
            self.pyclass = Holder

    class CorrectedAddressXml_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        schema = "http://webservices.eraserver.net/"
        literal = "CorrectedAddressXml"
        def __init__(self, **kw):
            ns = ns1.CorrectedAddressXml_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"accessCode"), aname="_accessCode", minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"address"), aname="_address", minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"city"), aname="_city", minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"state"), aname="_state", minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://webservices.eraserver.net/","CorrectedAddressXml")
            kw["aname"] = "_CorrectedAddressXml"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._accessCode = None
                    self._address = None
                    self._city = None
                    self._state = None
                    return
            Holder.__name__ = "CorrectedAddressXml_Holder"
            self.pyclass = Holder

    class CorrectedAddressXmlResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        schema = "http://webservices.eraserver.net/"
        literal = "CorrectedAddressXmlResponse"
        def __init__(self, **kw):
            ns = ns1.CorrectedAddressXmlResponse_Dec.schema
            TClist = [ns1.USPSAddress_Def(pname=(ns,"CorrectedAddressXmlResult"), aname="_CorrectedAddressXmlResult", minOccurs=1, maxOccurs=1, nillable=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://webservices.eraserver.net/","CorrectedAddressXmlResponse")
            kw["aname"] = "_CorrectedAddressXmlResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._CorrectedAddressXmlResult = None
                    return
            Holder.__name__ = "CorrectedAddressXmlResponse_Holder"
            self.pyclass = Holder

    class VersionInfo_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        schema = "http://webservices.eraserver.net/"
        literal = "VersionInfo"
        def __init__(self, **kw):
            ns = ns1.VersionInfo_Dec.schema
            TClist = []
            kw["pname"] = ("http://webservices.eraserver.net/","VersionInfo")
            kw["aname"] = "_VersionInfo"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "VersionInfo_Holder"
            self.pyclass = Holder

    class VersionInfoResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        schema = "http://webservices.eraserver.net/"
        literal = "VersionInfoResponse"
        def __init__(self, **kw):
            ns = ns1.VersionInfoResponse_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"VersionInfoResult"), aname="_VersionInfoResult", minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://webservices.eraserver.net/","VersionInfoResponse")
            kw["aname"] = "_VersionInfoResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._VersionInfoResult = None
                    return
            Holder.__name__ = "VersionInfoResponse_Holder"
            self.pyclass = Holder

    class string_Dec(ZSI.TC.String, ElementDeclaration):
        literal = "string"
        schema = "http://webservices.eraserver.net/"
        def __init__(self, **kw):
            kw["pname"] = ("http://webservices.eraserver.net/","string")
            kw["aname"] = "_string"
            class IHolder(str): typecode=self
            kw["pyclass"] = IHolder
            IHolder.__name__ = "_string_immutable_holder"
            ZSI.TC.String.__init__(self, **kw)

    class USPSAddress_Dec(ElementDeclaration):
        literal = "USPSAddress"
        schema = "http://webservices.eraserver.net/"
        def __init__(self, **kw):
            kw["pname"] = ("http://webservices.eraserver.net/","USPSAddress")
            kw["aname"] = "_USPSAddress"
            if ns1.USPSAddress_Def not in ns1.USPSAddress_Dec.__bases__:
                bases = list(ns1.USPSAddress_Dec.__bases__)
                bases.insert(0, ns1.USPSAddress_Def)
                ns1.USPSAddress_Dec.__bases__ = tuple(bases)

            ns1.USPSAddress_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "USPSAddress_Dec_Holder"

# end class ns1 (tns: http://webservices.eraserver.net/)
