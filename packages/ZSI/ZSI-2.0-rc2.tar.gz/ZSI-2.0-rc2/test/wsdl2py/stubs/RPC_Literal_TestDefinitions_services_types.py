################################################## 
# RPC_Literal_TestDefinitions_services_types.py 
# generated by ZSI.generate.wsdl2python
##################################################


import ZSI
import ZSI.TCcompound
from ZSI.TC import ElementDeclaration,TypeDefinition
from ZSI.generate.pyclass import pyclass_type

##############################
# targetNamespace
# http://soapbuilders.org/rpc-lit-test/types
##############################

class ns0:
    targetNamespace = "http://soapbuilders.org/rpc-lit-test/types"

    class ArrayOfstring_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://soapbuilders.org/rpc-lit-test/types"
        type = (schema, "ArrayOfstring")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ArrayOfstring_Def.schema
            TClist = [ns0.stringItem_Dec(minOccurs=0, maxOccurs="unbounded", nillable=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._stringItem = None
                    return
            Holder.__name__ = "ArrayOfstring_Holder"
            self.pyclass = Holder

    class ArrayOfint_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://soapbuilders.org/rpc-lit-test/types"
        type = (schema, "ArrayOfint")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ArrayOfint_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname="integer", aname="_integer", minOccurs=0, maxOccurs="unbounded", nillable=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._integer = []
                    return
            Holder.__name__ = "ArrayOfint_Holder"
            self.pyclass = Holder

    class SOAPStruct_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://soapbuilders.org/rpc-lit-test/types"
        type = (schema, "SOAPStruct")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.SOAPStruct_Def.schema
            TClist = []
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "SOAPStruct_Holder"
            self.pyclass = Holder

    class ArrayOfSOAPStruct_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://soapbuilders.org/rpc-lit-test/types"
        type = (schema, "ArrayOfSOAPStruct")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ArrayOfSOAPStruct_Def.schema
            TClist = [ns0.structItem_Dec(minOccurs=0, maxOccurs="unbounded", nillable=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._structItem = None
                    return
            Holder.__name__ = "ArrayOfSOAPStruct_Holder"
            self.pyclass = Holder

    class SOAPStructStruct_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://soapbuilders.org/rpc-lit-test/types"
        type = (schema, "SOAPStructStruct")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.SOAPStructStruct_Def.schema
            TClist = []
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "SOAPStructStruct_Holder"
            self.pyclass = Holder

    class SOAPArrayStruct_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://soapbuilders.org/rpc-lit-test/types"
        type = (schema, "SOAPArrayStruct")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.SOAPArrayStruct_Def.schema
            TClist = []
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "SOAPArrayStruct_Holder"
            self.pyclass = Holder

    class stringItem_Dec(ZSI.TC.String, ElementDeclaration):
        literal = "stringItem"
        schema = "http://soapbuilders.org/rpc-lit-test/types"
        def __init__(self, **kw):
            kw["pname"] = ("http://soapbuilders.org/rpc-lit-test/types","stringItem")
            kw["aname"] = "_stringItem"
            class IHolder(str): typecode=self
            kw["pyclass"] = IHolder
            IHolder.__name__ = "_stringItem_immutable_holder"
            ZSI.TC.String.__init__(self, **kw)

    class structItem_Dec(ElementDeclaration):
        literal = "structItem"
        schema = "http://soapbuilders.org/rpc-lit-test/types"
        def __init__(self, **kw):
            kw["pname"] = ("http://soapbuilders.org/rpc-lit-test/types","structItem")
            kw["aname"] = "_structItem"
            if ns0.SOAPStruct_Def not in ns0.structItem_Dec.__bases__:
                bases = list(ns0.structItem_Dec.__bases__)
                bases.insert(0, ns0.SOAPStruct_Def)
                ns0.structItem_Dec.__bases__ = tuple(bases)

            ns0.SOAPStruct_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "structItem_Dec_Holder"

# end class ns0 (tns: http://soapbuilders.org/rpc-lit-test/types)
