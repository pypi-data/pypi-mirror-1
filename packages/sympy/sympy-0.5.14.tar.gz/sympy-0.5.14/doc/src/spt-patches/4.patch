diff --git a/sympy/printing/pretty/pretty_symbology.py b/sympy/printing/pretty/pretty_symbology.py
--- a/sympy/printing/pretty/pretty_symbology.py
+++ b/sympy/printing/pretty/pretty_symbology.py
@@ -311,7 +311,10 @@ def xobj(symb, length):
     if bot is None:  bot = ext
     if mid is not None:
         if (length % 2) == 0:
-            raise ValueError('xobj: expect length = 2*k+1')
+            # even height, but we have to print it somehow anyway...
+            # XXX is it ok?
+            length += 1
+
     else:
         mid = ext
 
diff --git a/sympy/printing/printer.py b/sympy/printing/printer.py
--- a/sympy/printing/printer.py
+++ b/sympy/printing/printer.py
@@ -22,7 +22,7 @@ class Printer(object):
 
        Also, if BAR is a subclass of FOO, _print_FOO(bar) will be called for
        instance of BAR, if no _print_BAR is provided.  Thus, usually, we don't
-       need to provide prining routines for every class we want to support --
+       need to provide printing routines for every class we want to support --
        only generic routine has to be provided for a set of classes. 
 
        A good example for this are functions - for example PrettyPrinter only
@@ -52,7 +52,7 @@ class Printer(object):
            It's job is to loop through expr classes (class + it's bases), and
            try to dispatch the work to _print_<EXPR_CLASS>
 
-           e.g., suppose we have the following class hierarcy::
+           e.g., suppose we have the following class hierarchy::
 
                  Basic
                    |
diff --git a/sympy/printing/tests/test_pretty_unicode.py b/sympy/printing/tests/test_pretty_unicode.py
--- a/sympy/printing/tests/test_pretty_unicode.py
+++ b/sympy/printing/tests/test_pretty_unicode.py
@@ -198,3 +198,30 @@ u"""\
     assert u == s
 
 
+def test_upretty_seq_even():
+    """there used to be a bug when pprinting sequences with even height"""
+    u = upretty([x**2])
+    s = \
+u"""\
+⎡ 2⎤
+⎣x ⎦\
+"""
+    assert u == s
+
+    u = upretty((x**2,))
+    s = \
+u"""\
+⎛ 2⎞
+⎝x ⎠\
+"""
+    assert u == s
+
+    u = upretty({x**2: 1})
+    s = \
+u"""\
+⎧ 2   ⎫
+⎨x : 1⎬
+⎩     ⎭\
+"""
+    assert u == s
+
