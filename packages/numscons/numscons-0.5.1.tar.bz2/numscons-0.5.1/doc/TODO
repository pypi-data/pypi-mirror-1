Then, those are the old remaining things to do (once we get to the point we
were when scons was inside numpy repository):
    - have an UMFPACK checker
    - remove _glob (scons has the functionality now)
    - clean the code of numpyenv; in perticular: builder creation (should be
      done through tools), rename functions, and set the order right (0.5*
      serie).
    - clean up numpy.core building (0.5* serie)
    - add a function to set up distutils build dirs and call the builder
    - CXX optimizations flags + Control cxxflags from env
    - umfpack checker
    - Add CPPPDEFINES in perflib checkers 
    - handle inplace
    - doc
    - finish scipy
    - CLAPACK: check old atlas

Goals:
    - 0.5: make scons buildable by numscons.

Cleaning checkers modules:
    - Refactor site config custom: remove duplicate between core.libinfo and
      checkers.perflib_info
    - Have test for fortran

Things to implement / problems to solve:
    - Make 'real' python extension builders
    - f2py interoperability ?
    - fortran compiler optimization / option (underscore and so on)

F2py:
    - Numpy version to handle build dir issues
    - Difference between .f and .pyf:

Builder:
    - Get a PythonExtension builder independant of distutils for upstream
      integration
    - Get a CtypesExtension builder independant of distutils for upstream
      integration

Tests:
    - What can be tested ?

Fortran:
    - improve Fortran runtime detection for upstream integration
    - improve Fortran mangling and dummy main detection for upstream
      integration

Not so important things:
    - improve BrokenMathlib and Mathlib in core, and make them available to
      everyone
    - Generic Api builders (with dep tracking)
    - Generic FromTemplate builder (with dep tracking)

Documentation:
    - scons / distutils integration, global design (BuildDir, directories, etc...)
    - use cases: package developers (examples, etc...), numpy developers,
      building numpy with scons, etc...
