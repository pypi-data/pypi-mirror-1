<h2>PyGNM: Python Gaussian Network Model</h2>

<p>A Python module for Gaussian Network Model calculations with integrated 
plotting functions.</p>

<p>PyGNM is pure Pyton code depending on widely used numeric and graphics 
packages.<br/>
All GNM convenience and plotting functions are documented and illustrated in 
the tutorial.<br/>
PyGNM can be used to analyze a single protein structure (see tutorial) and
to perform automated analysis of multiple structures 
(with of course some more Python code).
</p>

<h3>License</h3>
<p>This Python package is distributed under <a href="http://www.fsf.org/licensing/licenses/gpl.html" target="_blank">
GNU General Public License</a>.</p>

<h3>Dependencies</h3>
<p>
  <ul>
    <li><a href='http://biopython.org/' target='_blank'>Biopython</a></li>
    <li><a href='http://numpy.scipy.org/' target='_blank'>Numpy</a></li>
    <li><a href='http://www.scipy.org/SciPy' target='_blank'>Scipy</a></li>
    <li><a href='http://matplotlib.sourceforge.net/' target='_blank'>Matplotlib</a>
    (Optional, but needed for plotting capability.)</li>
  </ul>
</p>

<h3>Download</h3>
<p><b>Version 0.1</b><br/>
For Linux: <a href="http://www.pitt.edu/~ahb12/python/pygnm/pygnm-0.1.tar.gz">pygnm-0.1.tar.gz</a><br/>
For Windows: <a href="http://www.pitt.edu/~ahb12/python/pygnm/pygnm-0.1.win32.exe">pygnm-0.1.win32.exe</a><br/>
</p>

<h3>Installation</h3>
<p><b>Linux</b><br/>
Extract tarball contents and run setup.py as follows:<br/>
<pre>
tar -xzf ppygnm-0.x.tar.gz
cd pygnm-0.x
python setup.py install
</pre>
You may need root access for the last step.
</p>
<p><b>Windows</b><br/>
Use executable to install PyGNM.</p>


<h3>Tutorial</h3>
<p>This tutorial is also contained in the PyGNM package.</p>

<pre>
"""This is an example use of PyGNM, and is distributed with PyGNM package.

This example assumes that you have installed Matplotlib.
In this example a ubiquitin structure is used.
(PDB id 2BWF, Lowe et al., 2006 Acta Crystallogr., Sect. D 62:177)

"""
# Import plotting library
>>> import matplotlib.pyplot as pl

# Import GNM module from pygnm package
>>> from pygnm import GNM

# Initialize a GNM object
>>> gnm = GNM('2BWF.pdb.gz')

# Select residues to be included in the model
# Some examples are
#	 "*" and "*:*"
#	   select all chains and residues
#
#	 "A:x,y-z,w D:k-l G:*"
#	   select residues x, y to z (inclusive),
#	                and w in chain A
#	   and residues k to l (inclusive) in chain D
#	   and all residues in chain G
#
#	 "A B"
#	   select all residues in chains A and B
#
#	 "*:5-25,50-100"
#	   select same set of residues in all chains
>>> gnm.select_residues('A:1-70')

# Build Kirchhoff matrix
#   cutoff=10., gamma=1.0 are default values, and may be omitted
>>> gnm.set_kirchhoff(cutoff=10., gamma=1.0)

# Calculate GNM modes
#   An optional parameter is n_modes
#   If you want to see only 20 nonzero modes, you can set n_modes=20
#   gnm.calculate_modes(n_modes=20)  
>>> gnm.calculate_modes()

# CONVENIENCE FUNCTIONS
# Get first 20 eigenvalues, including the zero eigenvalue
>>> gnm.get_eigenvalues( range(20) )
# Get first eigenvector with a nonzero eigenvalue
>>> gnm.get_eigenvectors(1)
# Get first and second modes (eigenvector^2) with nonzero eigenvalues
>>> gnm.get_modes( [1, 2] )
# Get covariance matrix (pseudo-inverse of Kirchhoff)
>>> gnm.get_covariance()
# Get cross-correlations calclated using first 9 modes (w/ nonzero eigenvalues)
>>> gnm.get_cross_correlations( range(1, 10))

# PLOTTING FUNCTIONS
# Note that before each plot command, pl.figure() function is called
# to prevent plotting over the previous figure.
# Plot eigenvector shape
>>> pl.figure()
>>> gnm.plot_eigenvector(1)
<a href="http://www.pitt.edu/~ahb12/python/pygnm/gnm_eigenvector_1.png" target="_blank"><img src="http://www.pitt.edu/~ahb12/python/pygnm/gnm_eigenvector_1.png" width="203" height="153"></a>
# Plot mode shape
>>> pl.figure()
>>> gnm.plot_mode(1)
<a href="http://www.pitt.edu/~ahb12/python/pygnm/gnm_mode_1.png" target="_blank"><img src="http://www.pitt.edu/~ahb12/python/pygnm/gnm_mode_1.png" width="203" height="153"></a>
# Plot bfactors from PDB file
>>> pl.figure()
>>> gnm.plot_bfactors()
<a href="http://www.pitt.edu/~ahb12/python/pygnm/gnm_pdb_betafactors.png" target="_blank"><img src="http://www.pitt.edu/~ahb12/python/pygnm/gnm_pdb_betafactors.png" width="203" height="153"></a>
# Plot GNM square-fluctuations
>>> pl.figure()
>>> gnm.plot_square_fluctuations()
<a href="http://www.pitt.edu/~ahb12/python/pygnm/gnm_square-fluctuations_all_modes.png" target="_blank"><img src="http://www.pitt.edu/~ahb12/python/pygnm/gnm_square-fluctuations_all_modes.png" width="203" height="153"></a>
# Plot GNM square-fluctuations for low frequence nonzero 10 modes
>>> pl.figure()
>>> gnm.plot_square_fluctuations(indices=range(1, 11))
<a href="http://www.pitt.edu/~ahb12/python/pygnm/gnm_square-fluctuations_1-10_modes.png" target="_blank"><img src="http://www.pitt.edu/~ahb12/python/pygnm/gnm_square-fluctuations_1-10_modes.png" width="203" height="153"></a>
# Plot GNM cross-correlations
>>> pl.figure()
>>> gnm.show_cross_correlations()
<a href="http://www.pitt.edu/~ahb12/python/pygnm/gnm_cross-correlations_all_modes.png" target="_blank"><img src="http://www.pitt.edu/~ahb12/python/pygnm/gnm_cross-correlations_all_modes.png" width="203" height="153"></a>
# Plot GNM cross-correlations for low frequence nonzero 10 modes
>>> pl.figure()
>>> gnm.show_cross_correlations(indices=range(1, 11))
<a href="http://www.pitt.edu/~ahb12/python/pygnm/gnm_cross-correlations_1-10_modes.png" target="_blank"><img src="http://www.pitt.edu/~ahb12/python/pygnm/gnm_cross-correlations_1-10_modes.png" width="203" height="153"></a>
# WRITE PDB 
# Write a PDB file with square fluctuations on beta column
>>> gnm.write_pdb( bfactors=gnm.get_square_fluctuations(indices=range(1, 11)) )

</pre>