#!/usr/bin/env python
import sys, getopt, MySQLdb as db, time
import argparse

tableQry = """SELECT `TABLE_SCHEMA` AS `database`, `TABLE_NAME` AS `table_name` FROM `information_schema`.`tables` WHERE TABLE_SCHEMA = %s ORDER BY TABLE_NAME"""
columnQry = """SELECT * FROM `COLUMNS` WHERE `TABLE_NAME` = %s ORDER BY ORDINAL_POSITION"""

def main():
    #First: Parse command line arguments
    parser = argparse.ArgumentParser(description="Create a schema evolution spec from a database", prog="clixextract", version='ClixExtract 0.2dev')
    parser.add_argument('-u', '--user', action='store', metavar='DB_USER', nargs=1, help="specify the datbase user to use")
    parser.add_argument('-d', '--host', action='store', metavar='DB_HOST', nargs=1, help="specify the datbase host", default=["localhost"])
    parser.add_argument('-p', '--password', action='store', metavar='DB_PASSWORD', nargs='?', const='', help="use a password to connect to the database.")
    parser.add_argument('-o', '--output-file', type=argparse.FileType('w'), help='specify the file in which to store the generated evolution')
    parser.add_argument('database', action="store", metavar="DATABASE", nargs=1, help="the database to extract schema from")
    parser.add_argument('table', action="store", metavar="TABLE", nargs="?", default="*", help="the table to extract schema from")
    args = parser.parse_args()
    host = args.host[0]
    password = args.password
    user = args.user[0]
    database = args.database[0]
    output_file = args.output_file
    table = args.table
    if host is None:
        host = 'localhost'
    if password == '':
        print "Please enter the database password for %s@%s" % (user, host)
        password = raw_input()
    connection = db.connect(host=host, user=user, passwd=password, db = 'information_schema')
    myCurs = connection.cursor()
    tables = []
    if table == '*':
        myCurs.execute(tableQry, (database,))
        s = myCurs.fetchall()
        [tables.append([i[1],list()]) for i in s]
        for ta in tables:
            t = ta[0]
            myCurs.execute(columnQry, (t, ))
            s = myCurs.fetchall()
            ta[1] = s
    else:
        myCurs.execute(columnQry, (table, ))
        s = myCurs.fetchall()
        tables.append([table, s])
    myCurs.close()
    connection.close()
    strBuffer = []
    strBuffer.append("# AUTOGENERATED from %s.%s, using host=%s, user=%s. Time: %s\n" % (database, table, host, user, time.ctime()))
    strBuffer.append("#\n# Assuming starting point of null\n")
    strBuffer.append("{\n")
    strBuffer.append("\t'version':2,\n")
    strBuffer.append("\t'database':'%s',\n" % database)
    strBuffer.append("\t'tables':[\n")
    for ta in tables:
        t = ta[0]
        strBuffer.append("\t\t{'name':'%s', 'action':'new', 'columns':[\n" % t)
        for c in ta[1]:
            strBuffer.append('\t\t\t\t{"name":"%s", "default": "%s", "type":"%s", "nullable":"%s", "character_set_name": "%s", "collation_name":"%s", "extra":"%s", "action":"add"},\n' % (c[3], c[5], c[14], c[6], c[12],c[13], c[16]))
        strBuffer.append("\t\t\t],\n")
        strBuffer.append("\t\t},\n")
    strBuffer.append("\t]\n")
    strBuffer.append("}")
    output = "".join(strBuffer)
    with output_file:
        output_file.write(output)

if __name__ == "__main__": main()