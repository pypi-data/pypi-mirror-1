
Outstanding tasks
-----------------

X Add GViz provider for quickjump entries in VCS.

X Fix output of GVizProviderList macro when building docs for 
  GViz providers having dynamic schema (and document whether the 
  data source is dynamic or not ;o).

X Fix default value of `fmt` parameter in GVizChangesetDetails.

X Fix undocumented column in GVizTimelineFilters provider.

X Add support for WikiFormatting to document data sources.

X Allow to filter milestones by name (e.g. UNIX patterns ?)

X Optimize the UNIX filename pattern matching by using compiled REs.

X Fix infinite recursion in revisions iterator (VCS RPC) using Hg.

X Fix all changesets are not retrieved when using Hg backend.

X Allow to select individual revisions in `GVizChangesets` (i.e. 
  revision log).

X Fix docstrings so that RPC documentation page be rendered.

X Fix all revisions are included in the revision log if only 
  individual revisions are requested.

X Fix exception with message `Invalid list index` is raised when 
  using Subversion backend only if individual revisions are 
  requested.

+ Build a translations catalog for es-ES.

+ GViz API QL: Add support for limitting the number of returned rows, 
  as well as skipping a given number of first rows.

+ Add support for GViz queries in GViz TracLinks providers.

+ Write tests for all features included in TracGViz 1.3.3 and 
  maybe later.

+ GViz API QL: Allow to select the columns to be returned, their 
  order, and labels.

+ Use Trac i18n for strings displayed to clients.

- Add support for retrieving table data in reStructuredText (rst) 
  format.

- Include GVizProviderListMacro.PROVIDER_DOC in a resource file.

- Test GViz providers for VCS (`git` ? + `mtn`).

- Find the root cause for missing changes in revisions `1`, `3` and 
  `8` (e.g. lack of support in TracMercurial for `copy` events?)

- Add `limit` parameter for history methods in VersionControlRPC.

- Implement data source provider for Ticket->Query

- Implement `create`, `update`, and `delete` methods in ReportRPC

- Add an option in GViz milestones in order to only show data about 
  active milestones.

- Cache the requests and optimize the request/response cycle by using 
  the `reqId` parameter.

- Implement various gadget border providers.

- Allow people to upload and use their own image and CSS borders in
  gadgets.

- Implement preview capabilities for gadgets and borders.

- Implement context navigation contributors to Trac Gadgets area.

- Add support for CSS-based and external (HTTP) gadget borders.

- Separate GVizSystem and GVizModule ?

- Add labels to the data sources. bah!

- Include formatted values for dates in JSON result.

- Fix the issue with selecting changed tickets since timestamp.

- Ensure that columns are always arranged in the same order (i.e. use 
  ordered dicts)

- Optimize the calls to TracRPC's Method objects by preventing 
  them from building lists out of generators.

- GViz API QL: Add tasks to support `from`, `where`, `group by`, 
  `pivot`, `order by`, `format` and `options` clauses.

- Allow data source providers to control the details needed to handle 
  queries.

- Put exception types in a separate module.

- Allow to provide documentation to describe dynamic columns (i.e. 
  those columns that appear in data tables only when some run-time 
  conditions are met e.g. ticket custom fields in 
  `ticket.GVizTicketReport`).

- Execute reports defined using URLs to saved custom queries.

- Introduce support for GViz warnings (specially `data_truncated` 
  warnings).

- Provide default border images for gadgets.

- Add a page to view the images in a gadget border (i.e. preview).

- Add a page to list available borders.

- Allow encoders to introduce headers in the HTTP response.

- Allow encoders to introduce headers in the HTTP response.

- Execute reports defined using URLs to saved custom queries.

- Introduce support for GViz warnings (specially `data_truncated` 
  warnings).

- Implement TSV Response Format encoder. Add support for `outFileName` 
  option.

- Ensure that pictures submitted for image-based gadget borders have 
  the proper dimensions.

- Implement local gadget borders with the help of Trac Resources.

- Implement navigation to Trac Gadgets area.

