Metadata-Version: 1.0
Name: zope.cachedescriptors
Version: 3.4.1
Summary: Zope3 Cached Descriptors
Home-page: http://pypi.python.org/pypi/zope.cachedescriptors
Author: Zope Corporation and Contributors
Author-email: zope3-dev@zope.org
License: ZPL 2.1
Description: Cached Descriptors
        ******************
        
        .. contents::
        
        Changes for zope.cachedescriptors
        =================================
        
        3.4.1 (2008-04-23)
        ------------------
        
        - Backported changes from trunk which removes dependency to ZODB.
        
        3.4.0 (2007-08-30)
        ------------------
        
        Initial release as an independent package
        
        Detailed Documentation
        **********************
        
        Cached descriptors
        ==================
        
        Cached descriptors cache their output.  They take into account
        instance attributes that they depend on, so when the instance
        attributes change, the descriptors will change the values they
        return.
        
        Cached descriptors cache their data in _v_ attributes, so they are
        also useful for managing the computation of volatile attributes for
        persistent objects.
        
        Persistent descriptors:
        
        property
        
        A simple computed property. See property.txt.
        
        method
        
        Idempotent method.  The return values are cached based on method
        arguments and on any instance attributes that the methods are
        defined to depend on.
        
        **Note**, only a cache based on arguments has been implemented so far.
        
        Cached Properties
        =================
        
        Cached properties are computed properties that cache their computed
        values.  They take into account instance attributes that they depend
        on, so when the instance attributes change, the properties will change
        the values they return.
        
        Cached properties cache their data in _v_ attributes, so they are
        also useful for managing the computation of volatile attributes for
        persistent objects. Let's look at an example::
        
        >>> from zope.cachedescriptors import property
        >>> import math
        
        >>> class Point:
        ...
        ...     def __init__(self, x, y):
        ...         self.x, self.y = x, y
        ...
        ...     def radius(self):
        ...         print 'computing radius'
        ...         return math.sqrt(self.x**2 + self.y**2)
        ...     radius = property.CachedProperty(radius, 'x', 'y')
        
        >>> point = Point(1.0, 2.0)
        
        If we ask for the radius the first time::
        
        >>> '%.2f' % point.radius
        computing radius
        '2.24'
        
        We see that the radius function is called, but if we ask for it again::
        
        >>> '%.2f' % point.radius
        '2.24'
        
        The function isn't called.  If we change one of the attribute the
        radius depends on, it will be recomputed::
        
        >>> point.x = 2.0
        >>> '%.2f' % point.radius
        computing radius
        '2.83'
        
        But changing other attributes doesn't cause recomputation::
        
        >>> point.q = 1
        >>> '%.2f' % point.radius
        '2.83'
        
        Note that we don't have any non-volitile attributes added::
        
        >>> names = [name for name in point.__dict__ if not name.startswith('_v_')]
        >>> names.sort()
        >>> names
        ['q', 'x', 'y']
        
        
        Lazy Computed Attributes
        ------------------------
        
        The `property` module provides another descriptor that supports a
        slightly different caching model: lazy attributes.  Like cached
        proprties, they are computed the first time they are used. however,
        they aren't stored in volatile attributes and they aren't
        automatically updated when other attributes change.  Furthermore, the
        store their data using their attribute name, thus overriding
        themselves. This provides much faster attribute access after the
        attribute has been computed. Let's look at the previous example using
        lazy attributes::
        
        >>> class Point:
        ...
        ...     def __init__(self, x, y):
        ...         self.x, self.y = x, y
        ...
        ...     def radius(self):
        ...         print 'computing radius'
        ...         return math.sqrt(self.x**2 + self.y**2)
        ...     radius = property.Lazy(radius)
        
        >>> point = Point(1.0, 2.0)
        
        If we ask for the radius the first time::
        
        >>> '%.2f' % point.radius
        computing radius
        '2.24'
        
        We see that the radius function is called, but if we ask for it again::
        
        >>> '%.2f' % point.radius
        '2.24'
        
        The function isn't called.  If we change one of the attribute the
        radius depends on, it still isn't called::
        
        >>> point.x = 2.0
        >>> '%.2f' % point.radius
        '2.24'
        
        If we want the radius to be recomputed, we have to manually delete it::
        
        >>> del point.radius
        
        >>> point.x = 2.0
        >>> '%.2f' % point.radius
        computing radius
        '2.83'
        
        Note that the radius is stored in the instance dictionary::
        
        >>> '%.2f' % point.__dict__['radius']
        '2.83'
        
        The lazy attribute needs to know the attribute name.  It normally
        deduces the attribute name from the name of the function passed. If we
        want to use a different name, we need to pass it::
        
        >>> def d(point):
        ...     print 'computing diameter'
        ...     return 2*point.radius
        
        >>> Point.diameter = property.Lazy(d, 'diameter')
        >>> '%.2f' % point.diameter
        computing diameter
        '5.66'
        
        
        readproperties
        ==============
        
        readproperties are like lazy computed attributes except that the
        attribute isn't set by the property::
        
        
        >>> class Point:
        ...
        ...     def __init__(self, x, y):
        ...         self.x, self.y = x, y
        ...
        ...     def radius(self):
        ...         print 'computing radius'
        ...         return math.sqrt(self.x**2 + self.y**2)
        ...     radius = property.readproperty(radius)
        
        >>> point = Point(1.0, 2.0)
        
        >>> '%.2f' % point.radius
        computing radius
        '2.24'
        
        >>> '%.2f' % point.radius
        computing radius
        '2.24'
        
        But you *can* replace the property by setting a value. This is the major
        difference to the builtin `property`::
        
        >>> point.radius = 5
        >>> point.radius
        5
        
        
        cachedIn
        ========
        
        The `cachedIn` property allows to specify the attribute where to store the
        computed value::
        
        >>> class Point:
        ...
        ...     def __init__(self, x, y):
        ...         self.x, self.y = x, y
        ...
        ...     @property.cachedIn('_radius_attribute')
        ...     def radius(self):
        ...         print 'computing radius'
        ...         return math.sqrt(self.x**2 + self.y**2)
        
        >>> point = Point(1.0, 2.0)
        
        >>> '%.2f' % point.radius
        computing radius
        '2.24'
        
        >>> '%.2f' % point.radius
        '2.24'
        
        The radius is cached in the attribute with the given name, `_radius_attribute`
        in this case::
        
        >>> '%.2f' % point._radius_attribute
        '2.24'
        
        When the attribute is removed the radius is re-calculated once. This allows
        invalidation::
        
        >>> del point._radius_attribute
        
        >>> '%.2f' % point.radius
        computing radius
        '2.24'
        
        >>> '%.2f' % point.radius
        '2.24'
        
        Method Cache
        ============
        
        cachedIn
        --------
        
        The `cachedIn` property allows to specify the attribute where to store the
        computed value:
        
        >>> import math
        >>> from zope.cachedescriptors import method
        
        >>> class Point(object):
        ...
        ...     def __init__(self, x, y):
        ...         self.x, self.y = x, y
        ...
        ...     @method.cachedIn('_cache')
        ...     def distance(self, x, y):
        ...         print 'computing distance'
        ...         return math.sqrt((self.x - x)**2 + (self.y - y)**2)
        ...
        >>> point = Point(1.0, 2.0)
        
        The value is computed once:
        
        >>> point.distance(2, 2)
        computing distance
        1.0
        >>> point.distance(2, 2)
        1.0
        
        
        Using different arguments calculates a new distance:
        
        >>> point.distance(5, 2)
        computing distance
        4.0
        >>> point.distance(5, 2)
        4.0
        
        
        The data is stored at the given `_cache` attribute:
        
        >>> isinstance(point._cache, dict)
        True
        
        >>> sorted(point._cache.items())
        [(((2, 2), ()), 1.0), (((5, 2), ()), 4.0)]
        
        
        It is possible to exlicitly invalidate the data:
        
        >>> point.distance.invalidate(point, 5, 2)
        >>> point.distance(5, 2)
        computing distance
        4.0
        
        Invalidating keys which are not in the cache, does not result in an error:
        
        >>> point.distance.invalidate(point, 47, 11)
        
        
        It is possible to pass in a factory for the cache attribute. Create another
        Point class:
        
        
        >>> class MyDict(dict):
        ...     pass
        >>> class Point(object):
        ...
        ...     def __init__(self, x, y):
        ...         self.x, self.y = x, y
        ...
        ...     @method.cachedIn('_cache', MyDict)
        ...     def distance(self, x, y):
        ...         print 'computing distance'
        ...         return math.sqrt((self.x - x)**2 + (self.y - y)**2)
        ...
        >>> point = Point(1.0, 2.0)
        >>> point.distance(2, 2)
        computing distance
        1.0
        
        Now the cache is a MyDict instance:
        
        >>> isinstance(point._cache, MyDict)
        True
        
Platform: UNKNOWN
Classifier: Development Status :: 5 - Production/Stable
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: Zope Public License
Classifier: Programming Language :: Python
Classifier: Operating System :: OS Independent
Classifier: Topic :: Internet :: WWW/HTTP
Classifier: Topic :: Software Development
