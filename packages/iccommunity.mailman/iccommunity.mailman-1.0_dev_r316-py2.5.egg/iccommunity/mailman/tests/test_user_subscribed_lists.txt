====================
A functional doctest
====================

This is a full-blown functional test. The emphasis here is on testing what
the user may input and see, and the system is largely tested as a black box.
We use PloneTestCase to set up this test as well, so we have a full Plone site
to play with. We *can* inspect the state of the portal, e.g. using
self.portal and self.folder, but it is often frowned upon since you are not
treating the system as a black box. Also, if you, for example, log in or set
roles using calls like self.setRoles(), these are not reflected in the test
browser, which runs as a separate session.

Being a doctest, we can tell a story here.

First, we must perform some setup. We use the testbrowser that is shipped
with Five, as this provides proper Zope 2 integration. Most of the
documentation, though, is in the underlying zope.testbrower package.

    >>> from Products.Five.testbrowser import Browser
    >>> browser = Browser()
    >>> portal_url = self.portal.absolute_url()

The following is useful when writing and debugging testbrowser tests. It lets
us see all error messages in the error_log.

    >>> self.portal.error_log._ignored_exceptions = ()

With that in place, we can go to the portal front page and log in. We will
do this using the default user from PloneTestCase:

    >>> from Products.PloneTestCase.setup import portal_owner, default_password

    >>> browser.open(portal_url)

We have the login portlet, so let's use that.

    >>> browser.getControl(name='__ac_name').value = portal_owner
    >>> browser.getControl(name='__ac_password').value = default_password
    >>> browser.getControl(name='submit').click()

Here, we set the value of the fields on the login form and then simulate a
submit click.

And we ensure that we get the friendly logged-in message:

    >>> "You are now logged in" in browser.contents
    True

	>>> browser.getLink('Site Setup').click()
	>>> browser.getLink('icCommunity').click()

We are at Platecom config main page, lets test it...

	>>> browser.getLink('Mailman').click()
	>>> configlet_url = browser.url
    >>> configlet_debug_url = browser.url + '?debug=1'

Configuro un host de prueba...

    >>> browser.open(configlet_debug_url)

    >>> browser.getControl('URI').value = 'test:///'
    >>> browser.getControl("Apply").click()

    >>> browser.open(configlet_debug_url)
    >>> browser.getControl('Available Lists').value = ['fake list',]
    >>> browser.getControl("Apply").click()

    >>> usr_configlet_debug_url = portal_url + '/@@manage-iccommunity-mailman-user-lists?debug=1'

    >>> browser.open(usr_configlet_debug_url)
    >>> browser.getControl('Subscribed Lists').options
    ['fake list']
    >>> browser.getControl('Subscribed Lists').value
    []
    >>> browser.getControl('Subscribed Lists').value = ['fake list',]
    >>> browser.getControl("Apply").click()

    >>> browser.open(usr_configlet_debug_url)
    >>> browser.getControl('Subscribed Lists').options
    ['fake list']
    >>> browser.getControl('Subscribed Lists').value
    ['fake list']

Es contextual?, no!!! ahora se guarda en las properties del user...

    >>> browser.open(self.folder.absolute_url() + '/@@manage-iccommunity-mailman-user-lists?debug=1')
    >>> browser.getControl('Subscribed Lists').options
    ['fake list']
    >>> browser.getControl('Subscribed Lists').value
    ['fake list']
