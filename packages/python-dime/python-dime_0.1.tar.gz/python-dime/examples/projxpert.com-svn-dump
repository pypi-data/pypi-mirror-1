#!/usr/bin/python

# Copyright (c) 2007 Jakub Wilk <ubanus@users.sf.net>
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License, version 2, as published
# by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
# or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
# for more details.


from base64 import b64decode
from cStringIO import StringIO
from cgi import escape as cgi_escape
from gzip import GzipFile
from optparse import OptionParser
from os.path import walk as path_walk, join as path_join, expanduser
from re import compile as compile_re
from sys import stdout, stderr
from urllib2 import Request, urlopen
from zlib import decompress

import cElementTree as ElementTree

import dime

SOAP_NS = 'http://schemas.xmlsoap.org/soap/envelope/'
REALM_STRING_RE = compile_re('<https://svn.projxpert.com:443> ProjXpert - (.*) repository')

def escape(s):
	return cgi_escape(unicode(s)).encode('ASCII', 'xmlcharreplace')

def xml_request(username, password, project_code, revision_no):
	substs = dict((k, escape(v)) for k, v in locals().iteritems())
	substs.update(SOAP_NS = SOAP_NS)
	return \
'''<?xml version='1.0'?>
<soap:Envelope xmlns:soap='%(SOAP_NS)s'>
  <soap:Header>
    <AuthHeader xmlns='http://www.projxpert.com/Service/v1/'>
      <Username>%(username)s</Username>
      <Password>%(password)s</Password>
      <ProjectCode>%(project_code)s</ProjectCode>
    </AuthHeader>
  </soap:Header>
  <soap:Body>
    <Dump xmlns='http://www.projxpert.com/Service/v1/'>
      <Revision>%(revision_no)s</Revision>
    </Dump>
  </soap:Body>
</soap:Envelope>''' % substs

def guess_subversion_dir():
	try:
		from win32com.shell.shell import SHGetFolderPath
		from win32com.shell.shellcon import CSIDL_APPDATA
		return path_join(SHGetFolderPath(0, CSIDL_APPDATA, 0, 0).encode('UTF-8'), 'Subversion')
	except ImportError:
		return expanduser('~/.subversion/')

def guess_credentials(project_code, username, password):
	if username and password and project_code:
		return (project_code, username, password)
	if not project_code:
		realmstring = None
	else:
		realmstring = REALM_STRING_RE.pattern.replace('(.*)', project_code)
	dir = path_join(guess_subversion_dir(), 'auth', 'svn.simple')

	fnames = []
	def visit(fnames, _dirname, _fnames):
		fnames += _fnames
		del _fnames[:]
	path_walk(dir, visit, fnames)
	for file_ in (file(path_join(dir, fname)) for fname in fnames):
		credentials = {}
		while 1:
			k_, k, v_, v = [file_.readline().strip() for i in xrange(4)]
			if not k:
				break
			credentials[k] = v
		if not realmstring:
			match = REALM_STRING_RE.match(credentials.get('svn:realmstring', ''))
			if not match:
				continue
			_project_code = match.group(1)
		else:
			if credentials.get('svn:realmstring') != realmstring:
				continue
			_project_code = project_code
		if username:
			if username != credentials.get('username'):
				continue
			_username = username
		else:
			_username = credentials.get('username')
		_password = password or credentials.get('password')
		if _project_code and _username and _password:
			return _project_code, _username, _password
	return project_code, username, password

oparser = OptionParser(usage = '%prog [-c PROJECT_CODE] [-u USERNAME] [-p PASSWORD] -r REVISION')
oparser.add_option('-c', '--project-code', dest='project_code')
oparser.add_option('-u', '--username', dest='username')
oparser.add_option('-p', '--password', dest='password')
oparser.add_option('-r', '--revision', dest='revision_no')
options = oparser.parse_args()[0]
try:
	revision_no = int(options.revision_no)
	del options.revision_no
except TypeError:
	oparser.error('Invalid or missing revison number')
project_code, username, password = guess_credentials(**vars(options))
if not username: oparser.error('Username is missing')
if not password: oparser.error('Password is missing')
if not project_code: oparser.error('Project code is missing')

print >>stderr, 'Project code: %s' % project_code
print >>stderr, 'Username: %s' % username
print >>stderr, 'Password: *****'
print >>stderr, 'Revision: %d' % revision_no

data = xml_request(
	username = username,
	password = password,
	project_code = project_code,
	revision_no = revision_no
)

request = Request(
	url = 'https://www.projxpert.com/service/v1/SvnAdmin.asmx',
	data = data,
	headers = \
	{
		'Content-Type': 'text/xml',
		'SOAPAction': 'http://www.projxpert.com/Service/v1/Dump'
	}
)

response = urlopen(request).read()
try:
	xml = ElementTree.fromstring(response)
except SyntaxError:
	dime_message = dime.Message.load(StringIO(response))
	gzipped_xml = dime_message[-1].data
	xml_stream = GzipFile(fileobj = StringIO(gzipped_xml))
	xml = ElementTree.parse(xml_stream)
data = xml.find('.//{http://www.projxpert.com/Service/v1/}DumpResult').text
data = b64decode(data)
stdout.write(data)

# vim:ts=4 sw=4 noet
