<?xml version="1.0" encoding="iso-8859-1"?>
<module name="Ft.Lib.ImportUtil">
  <modification-date>2006-08-11 09:43:24</modification-date>
  <abstract>Utilites for working with Python PEP 302 import hooks.</abstract>
  <description>Copyright 2006 Fourthought, Inc. (USA).
Detailed license and copyright information: http://4suite.org/COPYRIGHT
Project home, documentation, distributions: http://4suite.org/</description>
  <classes>
    <class name="DefaultProvider" public="no">
      <abstract>Resource provider for &quot;classic&quot; loaders</abstract>
      <description/>
      <method-resolution-order>
        <base name="DefaultProvider" module="Ft.Lib.ImportUtil"/>
      </method-resolution-order>
      <methods name="DefaultProvider" module="Ft.Lib.ImportUtil">
        <method public="no" name="__init__" id="DefaultProvider-__init__">
          <abstract/>
          <description/>
          <arguments>
            <arg name="self"/>
            <arg name="module"/>
          </arguments>
        </method>
        <method public="no" name="get_resource_filename" id="DefaultProvider-get_resource_filename">
          <abstract/>
          <description/>
          <arguments>
            <arg name="self"/>
            <arg name="manager"/>
            <arg name="resource_name"/>
          </arguments>
        </method>
        <method public="no" name="get_resource_stream" id="DefaultProvider-get_resource_stream">
          <abstract/>
          <description/>
          <arguments>
            <arg name="self"/>
            <arg name="manager"/>
            <arg name="resource_name"/>
          </arguments>
        </method>
        <method public="no" name="get_resource_string" id="DefaultProvider-get_resource_string">
          <abstract/>
          <description/>
          <arguments>
            <arg name="self"/>
            <arg name="manager"/>
            <arg name="resource_name"/>
          </arguments>
        </method>
        <method public="no" name="has_resource" id="DefaultProvider-has_resource">
          <abstract/>
          <description/>
          <arguments>
            <arg name="self"/>
            <arg name="resource_name"/>
          </arguments>
        </method>
        <method public="no" name="resource_isdir" id="DefaultProvider-resource_isdir">
          <abstract/>
          <description/>
          <arguments>
            <arg name="self"/>
            <arg name="resource_name"/>
          </arguments>
        </method>
        <method public="no" name="resource_listdir" id="DefaultProvider-resource_listdir">
          <abstract/>
          <description/>
          <arguments>
            <arg name="self"/>
            <arg name="resource_name"/>
          </arguments>
        </method>
      </methods>
    </class>
    <class name="ImpImporter" public="no">
      <abstract>PEP 302 Importer that wraps Python's &quot;classic&quot; import algorithm</abstract>
      <description>ImpImporter(dirname) produces a PEP 302 importer that searches that
directory.  ImpImporter(None) produces a PEP 302 importer that
searches the current sys.path, plus any modules that are frozen or
built-in.

Note that ImpImporter does not currently support being used by
placement on sys.meta_path.</description>
      <method-resolution-order>
        <base name="ImpImporter" module="Ft.Lib.ImportUtil"/>
      </method-resolution-order>
      <methods name="ImpImporter" module="Ft.Lib.ImportUtil">
        <method public="no" name="__init__" id="ImpImporter-__init__">
          <abstract/>
          <description/>
          <arguments>
            <arg name="self"/>
            <arg default="None" name="path"/>
          </arguments>
        </method>
        <method public="no" name="__repr__" id="ImpImporter-__repr__">
          <abstract/>
          <description/>
          <arguments>
            <arg name="self"/>
          </arguments>
        </method>
        <method public="no" name="find_module" id="ImpImporter-find_module">
          <abstract/>
          <description/>
          <arguments>
            <arg name="self"/>
            <arg name="fullname"/>
            <arg default="None" name="path"/>
          </arguments>
        </method>
        <method public="no" name="iter_modules" id="ImpImporter-iter_modules">
          <abstract/>
          <description/>
          <arguments>
            <arg name="self"/>
            <arg default="''" name="prefix"/>
          </arguments>
        </method>
      </methods>
    </class>
    <class name="ImpLoader" public="no">
      <abstract>PEP 302 Loader that wraps Python's &quot;classic&quot; import algorithm</abstract>
      <description/>
      <method-resolution-order>
        <base name="ImpLoader" module="Ft.Lib.ImportUtil"/>
      </method-resolution-order>
      <methods name="ImpLoader" module="Ft.Lib.ImportUtil">
        <method public="no" name="__init__" id="ImpLoader-__init__">
          <abstract/>
          <description/>
          <arguments>
            <arg name="self"/>
            <arg name="fullname"/>
            <arg name="file"/>
            <arg name="filename"/>
            <arg name="etc"/>
          </arguments>
        </method>
        <method public="no" name="get_code" id="ImpLoader-get_code">
          <abstract/>
          <description/>
          <arguments>
            <arg name="self"/>
            <arg default="None" name="fullname"/>
          </arguments>
        </method>
        <method public="no" name="get_data" id="ImpLoader-get_data">
          <abstract/>
          <description/>
          <arguments>
            <arg name="self"/>
            <arg name="pathname"/>
          </arguments>
        </method>
        <method public="no" name="get_filename" id="ImpLoader-get_filename">
          <abstract/>
          <description/>
          <arguments>
            <arg name="self"/>
            <arg default="None" name="fullname"/>
          </arguments>
        </method>
        <method public="no" name="get_source" id="ImpLoader-get_source">
          <abstract/>
          <description/>
          <arguments>
            <arg name="self"/>
            <arg default="None" name="fullname"/>
          </arguments>
        </method>
        <method public="no" name="is_package" id="ImpLoader-is_package">
          <abstract/>
          <description/>
          <arguments>
            <arg name="self"/>
            <arg name="fullname"/>
          </arguments>
        </method>
        <method public="no" name="load_module" id="ImpLoader-load_module">
          <abstract/>
          <description/>
          <arguments>
            <arg name="self"/>
            <arg name="fullname"/>
          </arguments>
        </method>
      </methods>
      <members name="ImpLoader" module="Ft.Lib.ImportUtil">
        <member public="no" name="code" id="ImpLoader-code">
          <value>None</value>
        </member>
        <member public="no" name="source" id="ImpLoader-source">
          <value>None</value>
        </member>
      </members>
    </class>
    <class name="ZipProvider" public="no">
      <bases>
        <base documented="yes" class="DefaultProvider" module="Ft.Lib.ImportUtil"/>
      </bases>
      <abstract>Resource provider for ZIP loaders</abstract>
      <description/>
      <method-resolution-order>
        <base name="ZipProvider" module="Ft.Lib.ImportUtil"/>
        <base name="DefaultProvider" module="Ft.Lib.ImportUtil"/>
      </method-resolution-order>
      <methods name="DefaultProvider" module="Ft.Lib.ImportUtil">
        <method public="no" name="__init__" id="ZipProvider-__init__">
          <abstract/>
          <description/>
          <arguments>
            <arg name="self"/>
            <arg name="module"/>
          </arguments>
          <overrides documented="yes" class="DefaultProvider" module="Ft.Lib.ImportUtil"/>
        </method>
        <method public="no" name="get_resource_filename" id="ZipProvider-get_resource_filename">
          <abstract/>
          <description/>
          <arguments>
            <arg name="self"/>
            <arg name="manager"/>
            <arg name="resource_name"/>
          </arguments>
          <overrides documented="yes" class="DefaultProvider" module="Ft.Lib.ImportUtil"/>
        </method>
        <method public="no" name="get_resource_stream" id="ZipProvider-get_resource_stream">
          <abstract/>
          <description/>
          <arguments>
            <arg name="self"/>
            <arg name="manager"/>
            <arg name="resource_name"/>
          </arguments>
          <overrides documented="yes" class="DefaultProvider" module="Ft.Lib.ImportUtil"/>
        </method>
        <method public="no" name="get_resource_string" id="ZipProvider-get_resource_string">
          <abstract/>
          <description/>
          <arguments>
            <arg name="self"/>
            <arg name="manager"/>
            <arg name="resource_name"/>
          </arguments>
          <overrides documented="yes" class="DefaultProvider" module="Ft.Lib.ImportUtil"/>
        </method>
      </methods>
      <inherited-methods documented="yes" class="DefaultProvider" module="Ft.Lib.ImportUtil">
        <member-reference name="has_resource" public="no"/>
        <member-reference name="resource_isdir" public="no"/>
        <member-reference name="resource_listdir" public="no"/>
      </inherited-methods>
    </class>
  </classes>
  <functions>
    <function public="yes" name="FindImporter" id="FindImporter">
      <abstract>Find a PEP 302 &quot;loader&quot; object for fullname</abstract>
      <description>If fullname contains dots, path must be the containing package's
__path__. Returns None if the module cannot be found or imported.</description>
      <arguments>
        <arg name="fullname"/>
      </arguments>
    </function>
    <function public="yes" name="FindLoader" realname="find_loader" id="FindLoader">
      <abstract>Find a PEP 302 &quot;loader&quot; object for fullname</abstract>
      <description>If fullname contains dots, path must be the containing package's
__path__. Returns None if the module cannot be found or imported.</description>
      <arguments>
        <arg name="fullname"/>
      </arguments>
    </function>
    <function public="yes" name="GetImporter" realname="get_importer" id="GetImporter">
      <abstract>Retrieve a PEP 302 importer for the given path item</abstract>
      <description/>
      <arguments>
        <arg name="path_item"/>
      </arguments>
    </function>
    <function public="yes" name="GetLastModified" id="GetLastModified">
      <abstract>Returns the last modified timestamp for the given module.</abstract>
      <description/>
      <arguments>
        <arg name="fullname"/>
      </arguments>
    </function>
    <function public="yes" name="GetResourceFilename" id="GetResourceFilename">
      <abstract>Returns a true filesystem name for the specified resource.</abstract>
      <description/>
      <arguments>
        <arg name="package"/>
        <arg name="resource"/>
      </arguments>
    </function>
    <function public="yes" name="GetResourceLastModified" id="GetResourceLastModified">
      <abstract>Return a timestamp indicating the last-modified time of the
specified resource.  Raises IOError is the pathname cannot be found
from the loader for 'fullname'.</abstract>
      <description/>
      <arguments>
        <arg name="package"/>
        <arg name="resource"/>
      </arguments>
    </function>
    <function public="yes" name="GetResourceStream" id="GetResourceStream">
      <abstract>Return a readable stream for specified resource</abstract>
      <description/>
      <arguments>
        <arg name="package"/>
        <arg name="resource"/>
      </arguments>
    </function>
    <function public="yes" name="GetResourceString" id="GetResourceString">
      <abstract>Return a string containing the contents of the specified resource.</abstract>
      <description>If the pathname is absolute it is retrieved starting at the path of
the importer for 'fullname'.  Otherwise, it is retrieved relative
to the module within the loader.</description>
      <arguments>
        <arg name="package"/>
        <arg name="resource"/>
      </arguments>
    </function>
    <function public="yes" name="GetSearchPath" id="GetSearchPath">
      <abstract/>
      <description/>
      <arguments>
        <arg name="fullname"/>
      </arguments>
    </function>
    <function public="yes" name="IterModules" realname="iter_modules" id="IterModules">
      <abstract>Yield submodule names+loaders for path or sys.path</abstract>
      <description/>
      <arguments>
        <arg default="None" name="path"/>
        <arg default="''" name="prefix"/>
      </arguments>
    </function>
    <function public="yes" name="NormalizeResource" id="NormalizeResource">
      <abstract/>
      <description/>
      <arguments>
        <arg name="package"/>
        <arg name="resource"/>
      </arguments>
    </function>
    <function public="yes" name="OsPathToResource" id="OsPathToResource">
      <abstract/>
      <description/>
      <arguments>
        <arg name="pathname"/>
      </arguments>
    </function>
    <function public="no" name="find_loader" id="find_loader">
      <abstract>Find a PEP 302 &quot;loader&quot; object for fullname</abstract>
      <description>If fullname contains dots, path must be the containing package's
__path__. Returns None if the module cannot be found or imported.</description>
      <arguments>
        <arg name="fullname"/>
      </arguments>
    </function>
    <function public="no" name="get_importer" id="get_importer">
      <abstract>Retrieve a PEP 302 importer for the given path item</abstract>
      <description/>
      <arguments>
        <arg name="path_item"/>
      </arguments>
    </function>
    <function public="no" name="get_loader" id="get_loader">
      <abstract>Get a PEP 302 &quot;loader&quot; object for module_or_name</abstract>
      <description>If the module or package is accessible via the normal import
mechanism, a wrapper around the relevant part of that machinery
is returned.  Returns None if the module cannot be found or imported.
If the named module is not already imported, its containing package
(if any) is imported, in order to establish the package __path__.</description>
      <arguments>
        <arg name="module_or_name"/>
      </arguments>
    </function>
    <function public="no" name="get_provider" id="get_provider">
      <abstract/>
      <description/>
      <arguments>
        <arg name="fullname"/>
      </arguments>
    </function>
    <function public="no" name="iter_importers" id="iter_importers">
      <abstract/>
      <description/>
      <arguments>
        <arg default="''" name="fullname"/>
      </arguments>
    </function>
    <function public="no" name="iter_modules" id="iter_modules">
      <abstract>Yield submodule names+loaders for path or sys.path</abstract>
      <description/>
      <arguments>
        <arg default="None" name="path"/>
        <arg default="''" name="prefix"/>
      </arguments>
    </function>
    <function public="no" name="iter_zipimport_modules" id="iter_zipimport_modules">
      <abstract/>
      <description/>
      <arguments>
        <arg name="importer"/>
        <arg name="prefix"/>
      </arguments>
    </function>
  </functions>
  <globals>
    <global public="no" name="IMP_SEARCH_ORDER" id="IMP_SEARCH_ORDER">
      <value>['.so', 'module.so', '.py', '.pyc']</value>
    </global>
    <global public="no" name="MODULE_TYPE_INFO" id="MODULE_TYPE_INFO">
      <value>{1: ('.py', 'U'), 2: ('.pyc', 'rb'), 3: ('module.so', 'rb')}</value>
    </global>
    <global public="no" name="ZIP_SEARCH_ORDER" id="ZIP_SEARCH_ORDER">
      <value>['.py', '.pyc', '.pyo']</value>
    </global>
    <global public="no" name="__all__" id="__all__">
      <value>['FindLoader', 'FindImporter', 'GetImporter', 'IterModules', 'GetLastModified', 'GetSearchPath', 'OsPathToResource', 'NormalizeResource', 'GetResourceFilename', 'GetResourceString', 'GetResourceStream', 'GetResourceLastModified']</value>
    </global>
    <global public="no" name="__zipsafe__" id="__zipsafe__">
      <value>True</value>
    </global>
    <global public="no" name="desc" id="desc">
      <value>('.pyc', 'rb', 2)</value>
    </global>
    <global public="no" name="generators" id="generators">
      <value>_Feature((2, 2, 0, 'alpha', 1), (2, 3, 0, 'final', 0), 4096)</value>
    </global>
    <global public="no" name="mode" id="mode">
      <value>'rb'</value>
    </global>
    <global public="no" name="module_type" id="module_type">
      <value>2</value>
    </global>
    <global public="no" name="suffix" id="suffix">
      <value>'.pyc'</value>
    </global>
  </globals>
</module>
