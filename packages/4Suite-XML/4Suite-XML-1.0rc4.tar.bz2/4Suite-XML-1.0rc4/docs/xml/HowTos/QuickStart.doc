<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD Simplified DocBook XML V1.1//EN"
   "http://docbook.org/xml/simple/1.1/sdocbook.dtd">
<article class="whitepaper" status="draft">
  <title>Quick Start for the <trademark class="trade">4Suite</trademark> Repository</title>
  <articleinfo>
    <title>Quick Start for the <trademark class="trade">4Suite</trademark> Repository</title>
    <authorgroup>
      <author>
        <firstname>Uche</firstname>
        <surname>Ogbuji</surname>
        <affiliation>
          <orgname>Fourthought, Inc.</orgname>
        </affiliation>
      </author>
      <author>
        <firstname>Shatin</firstname>
        <surname>Rai</surname>
        <affiliation>
          <jobtitle>Intern</jobtitle>
          <orgname>Fourthought, Inc.</orgname>
        </affiliation>
      </author>
      <othercredit>
        <firstname>Mike</firstname>
        <surname>Brown</surname>
        <affiliation>
          <orgname>Fourthought, Inc.</orgname>
        </affiliation>
      </othercredit>
    </authorgroup>
    <legalnotice>
      <para>This document can be freely translated and distributed. It is released under the <ulink url="http://www.linuxdoc.org/manifesto.html" type="off-site">LDP License</ulink>.</para>
    </legalnotice>
    <abstract>
      <para><trademark class="trade">4Suite</trademark> has many features. This document provides a step-by-step introduction to give the user familiarity with the document repository portion of the software.</para>
    </abstract>
    <revhistory>
      <revision>
        <revnumber>0.0</revnumber>
        <date>2000-12-20</date>
        <authorinitials>UO</authorinitials>
        <revremark>Initial Release</revremark>
      </revision>
      <revision>
        <revnumber>0.1</revnumber>
        <date>2002-01-27</date>
        <authorinitials>SR</authorinitials>
        <revremark>Rewrite for 4Suite 1.0a1a1 Release</revremark>
      </revision>
      <revision>
        <revnumber>0.2</revnumber>
        <date>2002-07-01</date>
        <authorinitials>UO</authorinitials>
        <revremark>0.12a3 release</revremark>
      </revision>
      <revision>
        <revnumber>0.3</revnumber>
        <date>2002-08-26</date>
        <authorinitials>MJB</authorinitials>
        <revremark>Conversion to Simplified DocBook V1.0CR1; minor edits</revremark>
      </revision>
      <revision>
        <revnumber>0.4</revnumber>
        <date>2002-11-21</date>
        <authorinitials>MJB</authorinitials>
        <revremark>Minor revisions</revremark>
      </revision>
      <revision>
        <revnumber>0.4</revnumber>
        <date>2003-07-17</date>
        <authorinitials>MJB</authorinitials>
        <revremark>Configuration info moved from HOWTOs to here; intro added</revremark>
      </revision>
    </revhistory>
    <keywordset>
      <keyword>4Suite</keyword>
      <keyword>command line</keyword>
      <keyword>quick start</keyword>
      <keyword>HOWTO</keyword>
      <keyword>help</keyword>
      <keyword>repository</keyword>
    </keywordset>
  </articleinfo>
  <section>
    <title>Introduction</title>
    <para>This document explains how to start using the document repository ("repo") and RDF database ("RDF model") features of 4Suite, after you have already installed the software according to the relevant installation guide. In older versions (0.11.1 and older), these features were called "4Suite Server", or "4SS" for short, and were distributed as an add-on to the main 4Suite libraries. The features are now distributed and installed along with the core libraries of 4Suite. Some additional configuration and activation is required before you can use them. If all you want to do is use the 4Suite Python libraries and their corresponding command-line tools, then you can ignore this entire document.</para>
  </section>
  <section>
    <title>Notes</title>
    <para>Since there is not yet a better name for the document repository, RDF model and related services, the term "4SS" (for 4Suite Server) still appears in some documentation and throughout the software.</para>
    <para>Command-line examples provided in this document do not require superuser/Administrator privileges. The command-line utilities that come with 4Suite work on all supported platforms.</para>
    <para>In this document, "{python}" in a filesystem path represents the directory in which 4Suite is installed. For example, on some Windows systems it is typically something like C:\Python22\lib\site-packages, and on Unix systems it is typically /usr/local/lib/python2.2/site-packages.</para>
    <para>Command-line examples may be shown with "$" representing the command shell prompt. The actual prompt varies from system to system. Don't actually type "$".</para>
    <para>Sometimes there will be a great deal of output from an instruction. If there is nothing of particular interest in the output, it will be omitted and replaced with the text "SNIP".</para>
    <para>There are useful third-party resources mentioned in this document. Those that are necessary for you to access in order to follow instructions are directly linked from the text. Others are marked as endnotes and the links are available in the Resources section.</para>
  </section>
  <section>
    <title>Prerequisites</title>
    <para>It is assumed that the user has already installed 4Suite according to the UNIX or Windows installation guide (a "HOWTO").</para>
  </section>
  <section>
    <title>Repository and RDF Model Setup</title>
    <para>The repository and the RDF model are distinct, yet integrated, components of 4Suite. For a description of them and information about why you might want to use them, see other 4Suite documentation.</para>
    <para>Setup requires creating a configuration file, setting 1 or 2 environment variables, and running a command-line utility to initialize the repository and model.</para>
    <para>The configuration file tells 4Suite what kind of database to use for both the repository and the model. Currently, two kinds of databases are supported:</para>
    <itemizedlist spacing="compact">
      <listitem>
        <para>PostGreSQL ("Postgres") - This free, open-source database server is the preferred back end, and is very efficient. However, it can be difficult for inexperienced users to set up if they haven't managed a Postgres server before. In the interest of keeping this guide "quick", instructions for using Postgres for the repository are not provided here.</para>
      </listitem>
      <listitem>
        <para>The OS's native fileystem ("FlatFile") - This is the easier option, and requires nothing more than an empty directory and some disk space, but is slower than a Postgres-based system. Inexperienced users should experiment first with this option, just to get up and running, and later they can start anew with Postgres, if they wish.</para>
      </listitem>
    </itemizedlist>
    <section>
      <title>Create the Configuration File</title>
      <para>The repository and model are never accessed directly; all communication with them is done via a network server called the Controller, or "4ssd". This daemon listens on a certain port (8803, by default) and uses a custom RPC protocol ("FtRpc") for request/response communication.</para>
      <para>The controller needs a configuration file to tell it what driver to use for accessing the database (FlatFile or Postgres), where the database is, where to put the log file, etc. Sample config files for Windows and Unix are provided in the appendices of this document, and they are also provided in the 4Suite distribution; on Unix look for {PYTHON_HOME}/.../4ss.conf, and on Windows look for C:\Python23\Share\Settings\4Suite\4ss.conf.</para>
      <orderedlist>
        <listitem>
          <para>Use one of the sample configuration files in the appendices below, making adjustments to the LogFile and PidFile elements as necessary (set these to wherever you want the files to be created). Save the config on your system anywhere, under any name. We typically call it "4ss.conf", but the name really doesn't matter.</para>
        </listitem>
        <listitem>
          <para>Now set the environment variable FTSERVER_CONFIG_FILE to be the full path to the file. For example, if you put the file at /usr/local/etc/4ss.conf, then that's what you'd set FTSERVER_CONFIG_FILE to. If you put it at C:\temp\4ss.conf, then use that. This environment variable <emphasis>must</emphasis> be set.</para>
        </listitem>
        <listitem>
          <para>If you are using FlatFile (you probably are, since these directions don't tell you otherwise), then you may want to set the environment variable FT_DATABASE_DIR. This variable tells 4Suite where to look for the FlatFile databases, so set it to the directory where you want the files to be stored. If FT_DATABASE_DIR isn't set, then the default will be {python}/Ft/Share/Data/FlatFile.</para>
        </listitem>
      </orderedlist>
    </section>
    <section>
      <title>Test the Command Line Tools</title>
      <para>4Suite comes with a rich set of command-line tools for various repository management tasks. There are two primary commands, each with a number of subcommands, available to users:</para>
      <orderedlist>
        <listitem>
          <para>4ss_manager - interface to subcommands only available to the repository superuser/administrator. It is generally only used for creating the repository and controlling the servers. For a list of 4ss_manager subcommands, type:</para>
          <programlisting role="sample.IO">
  <computeroutput>$  <userinput>4ss_manager --help</userinput>
  </computeroutput>
  </programlisting>
        </listitem>
        <listitem>
          <para>4ss - interface to general repository access subcommands. These won't work until the repository is created and a server is started to listen for access requests. You will do that in a minute. In the meantime, though, you can still see a list of subcommands:</para>
          <programlisting role="sample.IO">
  <computeroutput>$ <userinput>4ss --help</userinput>
  </computeroutput>
  </programlisting>
        </listitem>
      </orderedlist>
      <para>For help with each subcommand, you can append <computeroutput>--help</computeroutput> to the end. Compare the output of each of these examples:</para>
      <programlisting role="sample.IO">
<computeroutput>$ <userinput>4ss --help</userinput>
SNIP
$ <userinput>4ss fetch --help</userinput>
SNIP
$ <userinput>4ss fetch document --help</userinput>
SNIP
</computeroutput>
</programlisting>
    </section>
    <section id="Initializing.Repo">
      <title id="Initializing.Repo.title">Initialize the 4Suite Repository ("repo")</title>
      <para>Now, from a command shell in which the FTSERVER_CONFIG_FILE environment variable has been set, run <userinput>4ss_manager init</userinput>. See the sample output below.</para>
      <para>A full initialization may take a while, because over 1000 items will be created in the repository, including over 600 XML documents comprising the API documentation for most 4Suite modules. While arguments can be supplied on the command line to force installation of only certain components, it is best, for purposes of this walkthrough, to have a standard, fully-initialized repo.</para>
      <para>If FT_DATABASE_DIR wasn't set, you'll get an informational message about that. It's safe to ignore.</para>
      <programlisting role="sample.IO">
<computeroutput>$ <userinput>4ss_manager init</userinput>
You are about to initialize 4Suite Server. This will erase ALL DATA in the databases.
Are you sure (yes/no)? <userinput>y</userinput>
Add super user name (or just "enter" to pass): <userinput>su</userinput>
Password: <userinput>su</userinput>
Reenter password: <userinput>su</userinput>
Add super user name (or just "enter" to pass):
Installing Repository
Create Container: /ftss
Create Container: /ftss/users
Create Container: /ftss/groups
Create User: /ftss/users/h      docDef=None
Create Group: /ftss/groups/super-users
SNIP
</computeroutput>
</programlisting>
      <para>Note: For "<computeroutput>Are you sure</computeroutput>" question - type <computeroutput>y</computeroutput> - and add a super user name - in  this example <computeroutput>su</computeroutput> - and enter the desired password - in this example <computeroutput>su</computeroutput> - and just press "enter" when prompted to add another superuser.</para>
    </section>
    <section>
      <title>Start the 4SS daemon ("4ssd" or "the controller")</title>
      <para>Assuming the init was successful, the servers to interface with the repo can now be started! Type the following command:</para>
      <programlisting role="sample.IO">
<computeroutput>$ <userinput>4ss_manager start</userinput>
4SS Manager Name: <userinput>su</userinput>
Password for su:
controller started (pid 1064)
</computeroutput>
</programlisting>
      <para>Note: You'll be again asked for user name and password. Use the super user name and the password that you created in the <link linkend="Initializing.Repo" endterm="Initializing.Repo.title"/> section, (i.e. from the previous example, the 4SS Manager Name would be <computeroutput>su</computeroutput> and  Password would be <computeroutput>su</computeroutput>).</para>
      <para>In the next section, we'll play around with some of these resources.</para>
    </section>
  </section>
  <section>
    <title>Test the Repository Access Tools</title>
    <section>
      <title>4ss fetch container</title>
      <para>Seeing the contents of any container of the XML repository is quite simple. For example, to see the resources that were added by the <computeroutput>4ss_manager init</computeroutput> type the following:</para>
      <programlisting role="sample.IO">
<computeroutput>$ <userinput>4ss fetch container /ftss</userinput>
4SS User Name: <userinput>su</userinput>
Password for su:
Host &lt;localhost&gt;:
Port &lt;8803&gt;:
Listing of /ftss
text/xml   0.3kB Nov 21 01:18   users
text/xml   0.3kB Nov 21 01:18   groups
text/xml   0.7kB Nov 21 01:18   docdefs
text/xml   3.7kB Nov 21 01:18   data
text/xml   1.7kB Nov 21 01:18   demos
text/xml   6.9kB Nov 21 01:19   commands
text/xml   4.0kB Nov 21 01:19   dashboard
text/xml   1.3kB Nov 21 01:24   docs
text/xml   0.5kB Nov 21 01:24   servers
total: 9
</computeroutput>
</programlisting>
      <para>Note that you had to log in. By default, one has to log in to use any command, which can get tedious. We shall soon see a way of avoiding this. For <computeroutput>Host &lt;localhost&gt;</computeroutput> and <computeroutput>Port &lt;8803&gt;</computeroutput> just press enter on those ones. <computeroutput>8803</computeroutput> is the port used by FtRpc.server, which allows the client to interact with the repository, i.e. the command line tools you're using right now.</para>
      <para>The first field is the Internet Media Type (IMT). The second is the size of the  file followed by the third, which is the date the resource was last modified. Finally, the last field is the name of the resource. Just a quick note, because everything is defined by an XML file, all the entries above except <computeroutput>error.log</computeroutput> display as <computeroutput>text/xml</computeroutput> Internet Media Type. All those entries are in fact containers. For command line help, type <userinput>4ss fetch container --help</userinput> at the prompt.</para>
    </section>
    <section>
      <title>4ss fetch document</title>
      <para>You can display any of the documents by reference to their URI, relative to the root of the repository. The following command displays the XML document that represents the /ftss/users container:</para>
      <programlisting role="sample.IO">
<computeroutput>$ <userinput>4ss fetch document /ftss/users</userinput>
4SS User Name: <userinput>su</userinput>
Password for su:
Host &lt;localhost&gt;:
Port &lt;8803&gt;:
Document /ftss/users (text/xml)
----------------------------------------
SNIP
</computeroutput>
</programlisting>
      <para>For another example, try <userinput>4ss fetch document /ftss/docs/COPYRIGHT.doc</userinput></para>
      <para>For command line help, type <userinput>4ss fetch document --help</userinput> at the prompt.</para>
    </section>
    <section>
      <title>4ss create user</title>
      <para>Just as in operating system operations, it is a bad idea to use 4Suite as a superuser except as necessary. One of the first things you should do is to create a regular user for typical operations.</para>
      <programlisting role="sample.IO">
<computeroutput>$ <userinput>4ss create user uo</userinput>

Note: After entering the new user's password, you might be prompted for a user
name. This is a user name of an existing user in 4SS with permissions to create
a new user.

Enter new password for uo:
Re-enter password:
4SS User Name: <userinput>su</userinput>
Password for su:
Host &lt;localhost&gt;:
Port &lt;8803&gt;:
</computeroutput>
</programlisting>
      <para>This creates a new user named "uo". The first two prompts are for the password of the new user. Then you are prompted for the superuser, whose privileges are required. For command line help, type <userinput>4ss create user --help</userinput> at the prompt.</para>
      <para>The <userinput>4ss fetch</userinput> command can display various aspects of things in the repository. Compare the output of <userinput>4ss fetch user uo</userinput>, <userinput>4ss fetch resource /ftss/users/uo</userinput>, <userinput>4ss fetch rawfile /ftss/users/uo</userinput>, and <userinput>4ss fetch document /ftss/users/uo</userinput>.</para>
    </section>
    <section>
      <title>4ss create container</title>
      <para>It is useful to create a home container for this new user, a place where that user has permission to create, modify and delete. This must be done as superuser:</para>
      <programlisting role="sample.IO">
<computeroutput>$ <userinput>4ss create container /home</userinput>
4SS User Name: <userinput>su</userinput>
Password for su:
Host &lt;localhost&gt;:
Port &lt;8803&gt;:

$ <userinput>4ss create container /home/uo</userinput>
4SS User Name: <userinput>su</userinput>
Password for su:
Host &lt;localhost&gt;:
Port &lt;8803&gt;:
</computeroutput>
</programlisting>
      <para>There won't be any output from these commands, unless there was a problem.</para>
      <para>For command line help, type <computeroutput>4ss create container --help</computeroutput> at the prompt.</para>
    </section>
    <section>
      <title>4ss set owner</title>
      <para>Next we give the new user full ownership and permissions over this container.  This must also be done as superuser:</para>
      <programlisting role="sample.IO">
<computeroutput>$ <userinput>4ss set owner /home/uo uo</userinput></computeroutput>
</programlisting>
      <para>There won't be any output from this command, unless there was a problem.</para>
      <para>Note: in order to give other users and groups various permissions on this container (or any other resource), you would use the 4ss set acl command, which is discussed in Appendix B.  You may not need to bother with this command in typical operation.</para>
    </section>
    <section>
      <title>4ss create document</title>
      <para>Now let us add an XML document to our brand new home container. Using whatever text editor is convenient, type in the following and save it as a file called profile.xml:</para>
      <programlisting><![CDATA[
<?xml version='1.0' encoding='UTF-8'?>
<profile xmlns:V='http://www.w3.org/2001/vcard-rdf/3.0#'>
    <V:FN>Uchenna Ogbuji</V:FN>
    <V:N>
      <V:Family>Ogbuji</V:Family>
      <V:Given>Uchenna</V:Given>
    </V:N>
    <V:EMAIL>uche.ogbuji@fourthought.com</V:EMAIL>
</profile>
]]></programlisting>
      <para>Now type the following command to read profile.xml and store it in the repository in the /home/uo container:</para>
      <programlisting role="sample.IO">
<computeroutput>$ <userinput>4ss create document --type=xml /home/uo/profile.xml profile.xml</userinput>
4SS User Name: <userinput>su</userinput>
Password for su:
Host &lt;localhost&gt;:
Port &lt;8803&gt;:
</computeroutput>
</programlisting>
      <para>There won't be any output from this command, unless there was a problem.</para>
      <para>Different types of documents are stored in different ways in the repository. The first option, --type, indicates the document type to use as a guide for this purpose, and is one of: xml, xslt, rdf, container, user, group, alias, xpathdocdef, xsltdocdef, or schematron. It's not strictly necessary; the type is inferred from the '.xml' suffix, but it's better to be specific.</para>
      <para>The first argument after the --type option is a file name or URI of the file containing the data to add.</para>
      <para>The second argument is the full path in the repository where you want the document to go. Any additional command-line arguments are optinoal and are interpreted as aliases to be assigned to the new resource. For more information, type in <userinput>4ss create document --help</userinput> at the command line.</para>
    </section>
    <section>
      <title>4ss agent</title>
      <para>If you've been following along with these examples, you're probably quite tired of logging in over and over. You can avoid this by using two 4SS tools: 4ss login and 4ss agent. We'll focus on the latter. 4ss agent allows you to log in once, and creates a new command shell in which you don't even have to log in as that user.</para>
      <programlisting role="sample.IO">
<computeroutput>$ <userinput>4ss agent</userinput>
Username: <userinput>uo</userinput>
Password:
Host &lt;localhost&gt;:
Port &lt;8803&gt;:
Starting new shell: /bin/bash
</computeroutput>
</programlisting>
      <para>Now you can execute commands, and the credentials for user "uo" will automatically be applied. For example, let us now examine the contents of the home container:</para>
      <programlisting role="sample.IO">
<computeroutput>$ <userinput>4ss fetch container /home/uo</userinput>
Listing of /home/uo
text/xml   0.3kB Nov 21 03:47   profile.xml
total: 1
</computeroutput>
</programlisting>
      <para>You can see the document we added earlier, and the fact that it inherited its access control from the container, i.e. 4ss set acl to view the access controls. For more information, type in <computeroutput>4ss agent --help</computeroutput> at the command line.</para>
    </section>
    <section>
      <title>4ss create rawfile</title>
      <para>The repository can also store plain files. For example, these might be images or downloadable files to be retrieved by browsers.</para>
      <programlisting role="sample.IO">
        <computeroutput>$ <userinput>4ss create rawfile --imt=image/jpeg /home/uo/4SS.jpg 4SS.jpg</userinput>
$ <userinput>4ss fetch container /home/uo</userinput>
Listing of /home/uo
text/xml   0.3kB Nov 21 03:47   profile.xml
image/jpeg 4.0kB Nov 21 04:01   4SS.jpg
total: 2
</computeroutput>
</programlisting>
      <para>The "--imt" argument is the Internet Media Type of the new file, then the source file name is specified, then the destination in the repository. One or more aliases can be specified after this. For command line help, type <userinput>4ss create rawfile --help</userinput> at the prompt.</para>
    </section>
  </section>
  <section>
    <title>Working with the Web features</title>
    <para>4Suite comes with a built-in Web server system, which allows one to use XML and RDF features to deploy Web applications.</para>
    <para>You can define multiple servers, each of which represents a distinct site to be served by 4Suite.  Each server is usually on a separate port.  4Suite comes with 2 HTTP servers built in: one for the dashboard, which we shall discuss later in this document.  The other is for the demo applications that come with 4Suite.</para>
    <section>
      <title>Setting up a scratch server</title>
      <para>In order to develop and test 4Suite apps, or to deploy little Web pages that don't merit a dedicated server, we highly recommedn that you set up a scratch server.  This is basically just a 4Suite server which you can partition as you like, and host pages and apps on as you like.  The Web app examples in this document will all use the sratch server.</para>
      <para>As a convenience, Appendix A features a Python program that asks a few questions and then sets up a scratch server for you.  If you have access to the Web, you can just download it from <ulink url="http://uche.ogbuji.net/tech/4Suite/scratch-server.py">http://uche.ogbuji.net/tech/4Suite/scratch-server.py</ulink>.  If not, just copy and paste from the listing.  By the way, if you are a Python developer, you might find the contents of scratch-server.py a useful example of the Python API.</para>
      <para>Run the script.  When it prompts you to log in, you must do so as superuser.</para>
      <programlisting role="sample.IO">
<computeroutput>$ <userinput>python tech/4Suite/scratch-server.py</userinput>
4SS superuser name: <userinput>su</userinput>
Password for su:
In the following prompts, just hit enter if the given defaults are OK.
Name for the container to create [web]:
Port on which to host the HTTP server [8080]:
Brief name to identify the server [4ss]:
Contact e-mail address to display in case of error [root@localhost]:
$
</computeroutput>
</programlisting>
      <para>Adding or changing server specifications may be recognized by the running repository after a certain delay, or not at all, depending on your configuration options.  Just to be sure, you may want to run 4ss_manager restart.</para>
    </section>
  </section>
  <section>
    <title>4Suite Repository Dashboard</title>
    <para>Now that you've played with some of the command-line tools, this section will show those similar set of commands in a visual environment called the 4Suite Repository Dashboard. Dashboard comprises of a GUI interface to manage servers, users, groups, repository and the configuration.</para>
    <section>
      <title>Let's get started!</title>
      <para>Open up your web browser and type in the following URL: http://localhost:8800/</para>
      <para>Note: This is provided you've followed the installation guide and have the 4ss_manager running. Use a web browser and check out localhost ports 8800 and 8801. For example, http://localhost:8800/ for Dashboard and http://localhost:8801 for Demos.</para>
    </section>
    <section>
      <title>Repository</title>
      <para>The default redirect is set to the 4Suite Repository container manager. You should see the following (provided that you followed the command-line examples in the quick-start guide, else you would only see the ftss container).</para>
      <para>Notice the ftss and the home directories. Since we've been playing with the "home" container, let's continue with it. Click on "home" directory, where you should find "uo" directory. Click on "uo", and you should see two files, "4SS.jpg" and "profile.xml", that were added to the container from the previous command-line section. Now if you click on the "4SS.jpg" file, you'll be able to view the file, on the web browser, by clicking on the "View Raw File Data".</para>
      <para>You should also be able to replace the file. For "profile.xml", you can edit the document in the "Editing Content" area or view the document in the browser by pressing "View XML Document Data" button.</para>
      <para>In the change directory field, type in /home/uo/ and press the "Change  Directory" button.You should be able to add new resources by selecting the type (pull down menu) and clicking on the "Add Resource" button. You'll be taken to a page where you have the option of editing a file or browsing for the file. But you'll have to provide the name of the file for the repository, i.e. a local name, otherwise you'll get a randomly generated reference name for the file.</para>
    </section>
    <section>
      <title>Brief overview of rest of the Dashboard features:</title>
      <itemizedlist spacing="compact">
        <listitem>
          <para>
            <emphasis role="bold">Server Manager:</emphasis>
          </para>
          <para>Server manager allows a convenient way to edit server xml file.</para>
        </listitem>
        <listitem>
          <para>
            <emphasis role="bold">User Manager:</emphasis>
          </para>
          <para>Users name and passwords can be edited via the User Manager. Notice the usernames "su" and "uo" that you created in the previous section.</para>
        </listitem>
        <listitem>
          <para>
            <emphasis role="bold">Group Manager:</emphasis>
          </para>
          <para>You can edit, add, and remove members from a group.</para>
        </listitem>
        <listitem>
          <para>
            <emphasis role="bold">Configure:</emphasis>
          </para>
          <para>The configuration screen allows you to configure certain aspects of Dashboard. The temporary workspace entry allows you to define a directory on your local machine where GraphViz (refer to the installation guide for more information) will put its output files. The 'dot' executable directory is the directory where the GraphViz executable is located. The 'Default Manager' option allows you to determine whether or not to view XML based resources using their special managers or to use the generic raw-file manager (in this case to modify the XML content directly). The 'Display icons' option determines whether or not to show icons of container children in the container-manager. Finally, the last option allows the user to determine whether or not to rotate RDF visualizations by 90 degrees, which is helpful for very large graphs, which tend to be wider than they are tall.</para>
        </listitem>
      </itemizedlist>
    </section>
  </section>
  <section>
    <title>Resources</title>
    <section>
      <title>4Suite @ SourceForge</title>
      <para><ulink url="http://sourceforge.net/projects/foursuite/">4Suite Project Page</ulink> - Bug Reports, Feature Requests, Patches</para>
    </section>
    <section>
      <title>External Links</title>
      <para><ulink url="http://4suite.org/">4suite.org</ulink> - Documentation, Downloads, News, CVS, Developer Resources</para>
      <para><ulink url="http://lists.fourthought.com/mailman/listinfo/4suite">4Suite Users Mailing List</ulink> - Peer &amp; Developer Support</para>
      <para><ulink url="http://lists.fourthought.com/mailman/listinfo/4suite-ann">4Suite Announcement Mailing List</ulink> - Infrequent Announcements about 4Suite</para>
      <para><ulink url="http://fourthought.com/">Fourthought, Inc.</ulink> - Commercial Development, Consulting &amp; Support</para>
    </section>
  </section>
  <appendix>
    <title>Sample 4Suite server config file for Windows</title>
    <programlisting role="file-contents">&lt;?xml version='1.0' encoding='UTF-8'?&gt;
&lt;rdf:RDF xmlns:rdf='http://www.w3.org/1999/02/22-rdf-syntax-ns#'
  xmlns='http://xmlns.4suite.org/4ss/properties#'
  xml:base=''
&gt;
  &lt;Core rdf:ID='Core'&gt;

    &lt;SystemContainer&gt;ftss&lt;/SystemContainer&gt;

    &lt;!-- Use filesystem for repository --&gt;
    &lt;Driver rdf:parseType='Resource'&gt;
      &lt;rdf:type resource='http://xmlns.4suite.org/4ss/properties#FlatFile'/&gt;
      &lt;Root&gt;xmlserver&lt;/Root&gt;
    &lt;/Driver&gt;

    &lt;!-- Use PostGreSQL for repository --&gt;
    &lt;!-- User, Password, Host, Port are optional --&gt;
    &lt;!--
    &lt;Driver rdf:parseType='Resource'&gt;
      &lt;rdf:type resource='http://xmlns.4suite.org/4ss/properties#Postgres'/&gt;
      &lt;DbName&gt;xmlserver&lt;/DbName&gt;
      &lt;User&gt;dbusername&lt;/User&gt;
      &lt;Password&gt;dbpwd&lt;/Password&gt;
      &lt;Host&gt;dbhost&lt;/Host&gt;
      &lt;Port&gt;dbport&lt;/Port&gt;
    &lt;/Driver&gt;
    --&gt;

    &lt;!-- Controller PID and log file locations --&gt;
    &lt;PidFile&gt;C:/Devel/tmp/4ss.pid&lt;/PidFile&gt;
    &lt;LogFile&gt;C:/Devel/tmp/4ss.log&lt;/LogFile&gt;

    &lt;!-- Controller log level (optional; default: notice) --&gt;
    &lt;!-- one of emerg|crit|error|warning|notice|info|debug --&gt;
    &lt;LogLevel&gt;debug&lt;/LogLevel&gt;

  &lt;/Core&gt;
&lt;/rdf:RDF&gt;
</programlisting>
    <para>Some notes about the above --</para>
    <para>Capitalization is important! The most common error is a mistyped URI or element name.</para>
    <para>There must be only one Driver element. This element tells 4Suite whether to use FlatFile or Postgres, and provides additional configuration info specific to that database driver. So if you enable the Postgres Driver, be sure to comment out the FlatFile one.</para>
    <para>The content of the Root element is the name of a subdirectory of the directory specified in the FT_DATABASE_DIR environment variable. It will be created if it doesn't exist.</para>
    <para>The PidFile and LogFile can be any local file path, and do not have to exist. The directories they are in must exist and be writeable, though. If the LogFile already exists, it will be appended to.</para>
    <para>Leave LogLevel at 'debug' while getting started or when just experimenting. On a production server, we recommend 'notice', to cut down on disk writes.</para>
  </appendix>
  <appendix>
    <title>Sample 4Suite server config file for Unix</title>
    <programlisting role="file-contents">&lt;?xml version='1.0' encoding='UTF-8'?&gt;
&lt;rdf:RDF xmlns:rdf='http://www.w3.org/1999/02/22-rdf-syntax-ns#'
  xmlns='http://xmlns.4suite.org/4ss/properties#'
  xml:base=''
&gt;
  &lt;Core rdf:ID='Core'&gt;

    &lt;SystemContainer&gt;ftss&lt;/SystemContainer&gt;

    &lt;!-- Use filesystem for repository --&gt;
    &lt;Driver rdf:parseType='Resource'&gt;
      &lt;rdf:type resource='http://xmlns.4suite.org/4ss/properties#FlatFile'/&gt;
      &lt;Root&gt;xmlserver&lt;/Root&gt;
    &lt;/Driver&gt;

    &lt;!-- Use PostGreSQL for repository --&gt;
    &lt;!-- User, Password, Host, Port are optional --&gt;
    &lt;!--
    &lt;Driver rdf:parseType='Resource'&gt;
      &lt;rdf:type resource='http://xmlns.4suite.org/4ss/properties#Postgres'/&gt;
      &lt;DbName&gt;xmlserver&lt;/DbName&gt;
      &lt;User&gt;dbusername&lt;/User&gt;
      &lt;Password&gt;dbpwd&lt;/Password&gt;
      &lt;Host&gt;dbhost&lt;/Host&gt;
      &lt;Port&gt;dbport&lt;/Port&gt;
    &lt;/Driver&gt;
    --&gt;

    &lt;!-- Controller PID and log file locations --&gt;
    &lt;PidFile&gt;/tmp/4ss.pid&lt;/PidFile&gt;
    &lt;LogFile&gt;/tmp/4ss.log&lt;/LogFile&gt;

    &lt;!-- Controller log level (optional; default: notice) --&gt;
    &lt;!-- one of emerg|crit|error|warning|notice|info|debug --&gt;
    &lt;LogLevel&gt;debug&lt;/LogLevel&gt;

  &lt;/Core&gt;
&lt;/rdf:RDF&gt;
    </programlisting>
    <para>Some notes about the above --</para>
    <para>Capitalization is important! The most common error is a mistyped URI or element name.</para>
    <para>There must be only one Driver element. This element tells 4Suite whether to use FlatFile or Postgres, and provides additional configuration info specific to that database driver. So if you enable the Postgres Driver, be sure to comment out the FlatFile one.</para>
    <para>The content of the Root element is the name of a subdirectory of the directory specified in the FT_DATABASE_DIR environment variable. It will be created if it doesn't exist.</para>
    <para>The PidFile and LogFile can be any local file path, and do not have to exist. The directories they are in must exist and be writeable, though. If the LogFile already exists, it will be appended to.</para>
    <para>Leave LogLevel at 'debug' while getting started or when just experimenting. On a production server, we recommend 'notice', to cut down on disk writes.</para>
  </appendix>
  <appendix>
    <title>Scratch Server set-up tool</title>
    <programlisting role="file-contents"><![CDATA[
import sys, sha, getpass
import posixpath
from Ft.Server.Client import FtServerClientException
from Ft.Lib import Uri
from Ft.Server.Common import ResourceTypes, AclConstants
from Ft.Server.Client import Core
from Ft.Server.Client import SmartLogin


def Run():
    print "At the following prompts, just hit enter if the given defaults are OK."
    server_file = raw_input("Path of the server file to create [/scratch/server.xml]: ")
    if not server_file: server_file = '/scratch/server.xml'
    server_port = raw_input("Port on which to listen for HTTP requests [8080]: ")
    if not server_port: server_port = '8080'
    server_name = raw_input("Brief name to identify the server [scratch-server]: ")
    if not server_name: server_name = 'scratch-server'
    contact = raw_input("Contact e-mail address to display in case of error [root@localhost]: ")
    if not contact: contact = 'root@localhost'
    server_doc = SERVER_FILE%locals()

    try:
        try:
            commit = 0
            #Get the repository by logging in
            repo = SmartLogin()
            container = posixpath.split(server_file)[0]
            cont = repo.createContainer(container, 1)
            cont.setAcl(AclConstants.WRITE_ACCESS,
                        AclConstants.USERS_GROUP_NAME, AclConstants.ALLOWED)
            cont.setAcl(AclConstants.READ_ACCESS,
                        AclConstants.USERS_GROUP_NAME, AclConstants.ALLOWED)
            cont.setAcl(AclConstants.READ_ACCESS,
                        AclConstants.WORLD_GROUP_NAME, AclConstants.ALLOWED)
            doc = repo.createDocument(
                server_file, server_doc, imt='text/xml', docDef=None,
                forcedType=ResourceTypes.ResourceType.SERVER)
            commit = 1
        finally:
            try:
                if commit:
                    repo.txCommit()
                else:
                    repo.txRollback()
            except:
                pass

    except FtServerClientException, e:
        print e


SERVER_FILE = """\
<Server xmlns="http://xmlns.4suite.org/reserved"
        xmlns:dc="http://purl.org/dc/elements/1.1/"
>
  <dc:Description>Scratch server</dc:Description>
  <Status running='1'/>
  <Module>Http</Module>
  <Handler>http_basic</Handler>
  <Port>%(server_port)s</Port>

  <!-- contact information -->
  <ServerAdmin>%(contact)s</ServerAdmin>
  <ServerName>%(server_name)s</ServerName>

  <!-- logging -->
  <LogLevel>notice</LogLevel>

  <DocumentRoot>/</DocumentRoot>
</Server>
"""


if __name__ == "__main__":
    Run()

]]></programlisting>
  </appendix>
  <appendix>
    <title>Using 4ss set acl interactively</title>
    <para>Then give the new user full permissions over this container.</para>
    <para>Note: ACL stands for access-control list.  An access control list limits the operations possible on the resource.  For each resource, there is a set of users and groups that can perform each of the operations.  There are six operations currently: Read, Write, Execute, Delete, Change Permissions, and Change Owner.</para>
    <programlisting role="sample.IO">
<computeroutput>$ <userinput>4ss set acl /home/uo</userinput>

4SS User Name: <userinput>su</userinput>
Password for su:
Host &lt;localhost&gt;:
Port &lt;8803&gt;:
Current ACL Settings for: /home/uo
Read ACL
  owner --> allowed
  world --> allowed
  super-users --> allowed
Write ACL
  owner --> allowed
  super-users --> allowed
Execute ACL
  owner --> allowed
  world --> allowed
  super-users --> allowed
Delete ACL
  owner --> allowed
  super-users --> allowed
Change Permissions ACL
  owner --> allowed
  super-users --> allowed
Change Owner ACL
  owner --> allowed
  super-users --> allowed
</computeroutput>
</programlisting>
    <para>Here, you'll be asked to enter a command. These commands allows you to change the above list of ACL permissions, i.e. Read ACL has super-users, world, and  owner with the access permission of <emphasis>allowed</emphasis> to the <computeroutput>/home/uo</computeroutput> container. You'll see how to modify these permissions in the examples below.</para>
    <itemizedlist spacing="compact">
      <listitem>
        <para><emphasis>set</emphasis> - to completely replace existing specific ACL permission with a new set you specify</para>
        <para>For example, if you wanted to set permission of Write ACL to "uo", then type "s".</para>
        <para>Enter the type of access as <emphasis>write</emphasis> and the username to set as "uo".</para>
        <para>The others <emphasis>super-users</emphasis> and <emphasis>owners</emphasis> (that you can see above) will be replaced by "uo".</para>
        <para>Then only "uo" will have permission to write to that container, in this case <computeroutput>/home/uo</computeroutput>.</para>
      </listitem>
      <listitem>
        <para><emphasis>add</emphasis> - to add additional users to a specific ACL permissions list</para>
        <para>For example, if you wanted to add user "uo" to the Write ACL, then type "a" and enter the type of access as <emphasis>write</emphasis> and the username to set as "uo". "uo" will be added to the existing list of users.</para>
      </listitem>
      <listitem>
        <para><emphasis>remove</emphasis> - to remove users from a specific ACL permissions list</para>
      </listitem>
      <listitem>
        <para><emphasis>quit and save</emphasis> - to exit the command and save the changes to ACL that you've made</para>
      </listitem>
      <listitem>
        <para><emphasis>exit without save</emphasis> - exits and restores previous ACL setting</para>
      </listitem>
    </itemizedlist>
    <programlisting role="sample.IO">
<computeroutput>
Please enter a command:
(s)et
(a)dd
(r)emove
(q)uit and save
(e)xit without save
>> <userinput>s</userinput>

Type of access: read | write | execute | delete | change owner | change
permissions

Please enter the type of access: <userinput>write</userinput>
Please enter the ident (i.e. username) to set: <userinput>uo</userinput>
Should uo be allowed write on /home/uo (yes/no): <userinput>y</userinput>
Current ACL Settings for: /home/uo
Read ACL
  super-users --> allowed
  world --> allowed
  owner --> allowed
Write ACL
  uo --> allowed
Execute ACL

SNIP

Please enter a command:
(s)et
(a)dd
(r)emove
(q)uit and save
(e)xit without save
>> <userinput>q</userinput>
</computeroutput>
</programlisting>
    <para>This allows any user to read the contents of the container, but only user "uo" can modify, or add contents to the container. To add more permissions (such as  delete), you would simply continue with the above example (instead of (q)uit, press (s)et and enter type of access as delete. For command line help, type <userinput>4ss set acl --help</userinput> at the prompt.</para>
  </appendix>

</article>
