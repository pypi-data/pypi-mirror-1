
  How to use daxfi package to build your own applications.

Maybe that the scripts that come with DAXFi aren't much useful to you;
fortunately it's really easy to use the daxfi Python packages to
develop new applications that are firewall-independent.

Almost every useful function is accessible through the Firewall
class in the daxfi package, so that all you need is to import
that class in your program and then instantiate a Firewall object.

E.g.:
 ---
from daxfi import Firewall, DetectFirewallError

fw = Firewall()
 ---

Now you can use the 'fw' object to parse XML files (or strings)
and to run firewall rules.  For a list of defined methods see the
documentation in the lib/ subdirectory.

It's important to understand that the Firewall class constructor
can take two optional arguments.

The first optional argument is a string (or a list, or a tuple of strings)
that represents the firewall we want to use.
If it's leaved unspecified the Firewall object will try to automatically
guess what kind of firewall you have, raising the DetectFirewallError
exception if no firewall support is found.
Catch it when you instantiate a Firewall object, if you want your
program to terminate nicely.
If the argument is a list (or tuple) of strings, the firewall to
use is selected amongst that list; again, if kernel support isn't
found for any of these firewall, DetectFirewallError is raised.
If the argument is a _single_ string (or a list with only one element),
daxfi is forced to use this firewall even if no kernel support is
found.

the second is a dictionary that maps some predefined strings (that you
can then put in XML strings or files) to some useful informations.
For every key in the dictionary, its name is searched in every XML file
or string elaborated by the 'fw' object and substituted with its value.

Example:
by default the daxfid program uses three substitution, with
a dictionary like that:
 
substitution_dict = {
    '%REMOTE_IP':    'the remote IP',
    '%LOCAL_IP':     'the local IP',
    '%INTERFACE':    'the interface'
}

Now you can write something like <rule source-ip="%REMOTE_IP">...</rule>
in your XML files or strings, and then the %REMOTE_IP is substituted
with the value in your dictionary (i.e.: 'the remote IP').


  Singleton

If your application need a 'singletonized' instance of Firewall,
you can use the SingletonFirewall class.
If you don't know what a singleton is, you don't need it. :-)


  Functions

The listAvailableFirewalls() in the daxfi module, returns a list of
available and supported (active) firewalls.


