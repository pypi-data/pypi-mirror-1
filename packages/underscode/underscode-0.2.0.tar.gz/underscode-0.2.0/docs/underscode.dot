// Finite state machine recognising (and decoding) underscoded strings.
//
// Meaning of output actions:
//
// RET
//   Return Unicode equivalent of input character.
// NEW
//   Start encoded character.
// STO
//   Append value of input character to current encoded character.
// DEC
//   Decode into Unicode and return current encoded character.
//
// This file has been placed in the public domain.

digraph finite_state_machine {
	graph [ rankdir = q ];

	node [ shape = circle ];
	q2 [ shape = doublecircle ];

	q0 -> q2 [ label = "_ / NEW" ];
	q2 -> q1 [ label = "_ / RET" ];
	q2 -> q1 [ label = "[0-9] / RET" ];
	q2 -> q0xf2 [ label = "x / NEW" ];
	q2 -> q0xf4 [ label = "u / NEW" ];
	q2 -> q0xf8 [ label = "U / NEW" ];

	q0 -> q1 [ label = "[a-zA-Z] / RET" ];
	q1 -> q1 [ label = "[a-zA-Z0-9] / RET" ];
	q1 -> q2 [ label = "_ / NEW" ];

	q0xf8 -> q0xf7 [ label = "[0-9a-fA-F] / STO" ];
	q0xf7 -> q0xf6 [ label = "[0-9a-fA-F] / STO" ];
	q0xf6 -> q0xf5 [ label = "[0-9a-fA-F] / STO" ];
	q0xf5 -> q0xf4 [ label = "[0-9a-fA-F] / STO" ];
	q0xf4 -> q0xf3 [ label = "[0-9a-fA-F] / STO" ];
	q0xf3 -> q0xf2 [ label = "[0-9a-fA-F] / STO" ];
	q0xf2 -> q0xf1 [ label = "[0-9a-fA-F] / STO" ];
	q0xf1 -> q1 [ label = "[0-9a-fA-F] / DEC" ];
}
