this simply takes a config file and loads a build host from it.  then it swaps the
config file with a new config file, and tests the buildhost's reload method for the
config, checking that the tester_value gets set correctly from its original True
to the swapped out False, and then back again to True.

>>> import os, shutil
>>> from releasemanager.tests import TEST_CONF_PATH
>>> from releasemanager.builder.buildhost import BuildHost
>>> configPath = os.path.join(TEST_CONF_PATH, "builder")
>>> configFile = 'build_host_template'
>>> bh = BuildHost(configFile, configPath=configPath)
>>> bh._config.tester_value
True
>>> swap_new_config = "%s_swap.py" % configFile
>>> shutil.copy(os.path.join(configPath, swap_new_config), os.path.join(configPath, "%s.py" % configFile))
>>> bh.reload()
>>> bh._config.tester_value
False
>>> orig_config = "%s_orig.py" % configFile
>>> shutil.copy(os.path.join(configPath, orig_config), os.path.join(configPath, "%s.py" % configFile))
>>> bh.reload()
>>> bh._config.tester_value
True
