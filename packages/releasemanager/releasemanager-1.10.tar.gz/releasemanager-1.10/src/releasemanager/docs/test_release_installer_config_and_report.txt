this simply takes a config file and loads a release installer from it. then it swaps
the config file with a new config file, and tests the ri's reload method for the
config, checking that the tester_value gets set correctly from its original True
to the swapped out False, and then back again to True.

finally, it checks the release installer's report method, making sure it sends
back a dict of environments and associated named targets

>>> import os, shutil
>>> from releasemanager.tests import TEST_CONF_PATH
>>> from releasemanager.installer.releasedaemon import ReleaseInstaller
>>> configPath = os.path.join(TEST_CONF_PATH, "installer")
>>> configName = 'release_installer_template'
>>> configFile = "%s.py" % configName
>>> ri = ReleaseInstaller(configName, configPath=configPath)
>>> ri._config.tester_value
True
>>> swap_new_config = "%s_swap.py" % configName
>>> shutil.copy(os.path.join(configPath, swap_new_config), os.path.join(configPath, configFile))
>>> ri.reload()
>>> ri._config.tester_value
False
>>> orig_config = "%s_orig.py" % configName
>>> shutil.copy(os.path.join(configPath, orig_config), os.path.join(configPath, configFile))
>>> ri.reload()
>>> ri._config.tester_value
True
>>> ri.report()
{'test': ['template']}

