### -*- coding: utf-8 -*- #############################################
#######################################################################
"""Convertor Select class for the Zope 3 based reference package

$Id: convertorselect.py.1 49600 2008-01-21 11:08:39Z cray $
"""
__author__  = "Andrey Orlov, 2007-02-06"
__license__ = "GPL"
__version__ = "$Revision: 49600 $"
__date__ = "$Date: 2008-01-21 14:08:39 +0300 (Пнд, 21 Янв 2008) $"
 
from zope.interface import implements
from interfaces import IConvertorSelect
from cachedconvertor.convertor.convertor import ConvertorBase
from cachedconvertor.convertor.interfaces import IConvertor
import re
                
class ConvertorSelect(ConvertorBase):
    __doc__ = IConvertorSelect.__doc__

    implements(IConvertorSelect)
    
    def __init__(self):
        """ Initialization the convertor by regexp, bytes and lines """

    def convert(self,text):
        """ Do convert """
        text = super(ConvertorSelect,self).convert(text)        
        print text
        bt=0
        et=0
        lt=0
        n =0
        nt=0
        fix = False
        for c in text :
            n+=1
            print "wait bt",float(nt)/n*(n-lt),n,nt,float(nt)/n,n-lt,str(c)
            
            if c in ["<",">"] :
                nt += 1
                lt = n    
            else :
                print "QQ", float(nt)/n*(n-lt)                          
            if float(nt)/n*(n-lt) > 6 :
                print "BT",bt
                bt = lt
                break

        for c in text[bt:] :
            n+=1
            print "wait et q",float(nt)/n*(n-lt),n,nt,n-lt,str(c)
            if c in ["<",">"] :
                nt += 1
                lt = n               
                if float(nt)//n*(n-lt) < 0.2 :
                    et = lt
                    print "ET",et
                    break

        print n
        return text[bt:et]
        
if __name__ == '__main__' :
    import sys
    print ConvertorSelect().convert(sys.stdin.read())
    