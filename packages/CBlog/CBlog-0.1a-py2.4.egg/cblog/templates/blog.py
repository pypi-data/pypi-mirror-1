#!/usr/bin/env python




##################################################
## DEPENDENCIES
import sys
import os
import os.path
from os.path import getmtime, exists
import time
import types
import __builtin__
from Cheetah.Version import MinCompatibleVersion as RequiredCheetahVersion
from Cheetah.Version import MinCompatibleVersionTuple as RequiredCheetahVersionTuple
from Cheetah.Template import Template
from Cheetah.DummyTransaction import DummyTransaction
from Cheetah.NameMapper import NotFound, valueForName, valueFromSearchList, valueFromFrameOrSearchList
from Cheetah.CacheRegion import CacheRegion
import Cheetah.Filters as Filters
import Cheetah.ErrorCatchers as ErrorCatchers
from cblog.templates.SiteTemplate import SiteTemplate

##################################################
## MODULE CONSTANTS
try:
    True, False
except NameError:
    True, False = (1==1), (1==0)
VFFSL=valueFromFrameOrSearchList
VFSL=valueFromSearchList
VFN=valueForName
currentTime=time.time
__CHEETAH_version__ = '2.0rc7'
__CHEETAH_versionTuple__ = (2, 0, 0, 'candidate', 7)
__CHEETAH_genTime__ = 1165587713.9910359
__CHEETAH_genTimestamp__ = 'Fri Dec  8 15:21:53 2006'
__CHEETAH_src__ = 'blog.tmpl'
__CHEETAH_srcLastModified__ = 'Fri Dec  8 14:44:19 2006'
__CHEETAH_docstring__ = 'Autogenerated by CHEETAH: The Python-Powered Template Engine'

if __CHEETAH_versionTuple__ < RequiredCheetahVersionTuple:
    raise AssertionError(
      'This template was compiled with Cheetah version'
      ' %s. Templates compiled before version %s must be recompiled.'%(
         __CHEETAH_version__, RequiredCheetahVersion))

##################################################
## CLASSES

class blog(SiteTemplate):

    ##################################################
    ## CHEETAH GENERATED METHODS


    def __init__(self, *args, **KWs):

        SiteTemplate.__init__(self, *args, **KWs)
        if not self._CHEETAH__instanceInitialized:
            cheetahKWArgs = {}
            allowedKWs = 'searchList namespaces filter filtersLib errorCatcher'.split()
            for k,v in KWs.items():
                if k in allowedKWs: cheetahKWArgs[k] = v
            self._initCheetahInstance(**cheetahKWArgs)
        

    def extra_header_data(self, **KWS):



        ## CHEETAH: generated from #def extra_header_data at line 7, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        if VFFSL(SL,"getVar",False)('tg.feeds', None): # generated from line 8, col 1
            write('  <link rel="alternate" type="application/atom+xml"\n    title="')
            _v = VFN(VFFSL(SL,"tg",False),"feeds",False)['summary']['title'] # "${tg.feeds['summary']['title'], escape='quote'}" on line 10, col 12
            if _v is not None: write(_filter(_v, escape='quote', rawExpr="${tg.feeds['summary']['title'], escape='quote'}")) # from line 10, col 12.
            write('"\n    href="')
            _v = VFN(VFFSL(SL,"tg",False),"feeds",False)['summary']['href'] # "${tg.feeds['summary']['href']}" on line 11, col 11
            if _v is not None: write(_filter(_v, rawExpr="${tg.feeds['summary']['href']}")) # from line 11, col 11.
            write('">\n')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def pagetitle(self, **KWS):



        ## CHEETAH: generated from #def pagetitle at line 15, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write('  <title>')
        _v = VFFSL(SL,"tg.blogtitle",False) # '${tg.blogtitle}' on line 16, col 10
        if _v is not None: write(_filter(_v, rawExpr='${tg.blogtitle}')) # from line 16, col 10.
        if VFFSL(SL,"getVar",False)('tag', None): # generated from line 16, col 25
            write(' (Category ')
            _v = VFFSL(SL,"tag.name",False) # '$tag.name' on line 16, col 61
            if _v is not None: write(_filter(_v, rawExpr='$tag.name')) # from line 16, col 61.
            write(')')
        write('</title>\n')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def pagecontent(self, **KWS):



        ## CHEETAH: generated from #def pagecontent at line 19, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        items = VFN(VFFSL(SL,"tg",False),"ipeek",False)(VFFSL(SL,"entries",False))
        write('\n<div id="blogroll">\n')
        if items: # generated from line 23, col 1
            for entry in VFFSL(SL,"items",False): # generated from line 24, col 3
                write('  <div class="article">\n')
                if VFFSL(SL,"tg.identity.user_name",False) == VFFSL(SL,"entry.author.user_name",False): # generated from line 26, col 5
                    write('    <p class="actionlinks">\n      <a href="')
                    _v = VFN(VFFSL(SL,"tg",False),"url",False)('/edit_article/%i') % VFFSL(SL,"entry.id",False) # "${tg.url('/edit_article/%i') % $entry.id}" on line 28, col 16
                    if _v is not None: write(_filter(_v, rawExpr="${tg.url('/edit_article/%i') % $entry.id}")) # from line 28, col 16.
                    write('">Edit article</a>\n    </p>\n')
                write('\n    <h1 class="title"><a\n      href="')
                _v = VFN(VFFSL(SL,"tg",False),"url",False)('/article/%s' % entry.id) # "${tg.url('/article/%s' % entry.id)}" on line 33, col 13
                if _v is not None: write(_filter(_v, rawExpr="${tg.url('/article/%s' % entry.id)}")) # from line 33, col 13.
                write('">')
                _v = VFFSL(SL,"entry.title",False) # '${entry.title}' on line 33, col 50
                if _v is not None: write(_filter(_v, rawExpr='${entry.title}')) # from line 33, col 50.
                write('</a></h1>\n\n    ')
                _v = VFFSL(SL,"entry.teaser",False) # '$entry.teaser' on line 35, col 5
                if _v is not None: write(_filter(_v, rawExpr='$entry.teaser')) # from line 35, col 5.
                write('''

    <p class="byline">posted by <span
      class="author">''')
                _v = VFFSL(SL,"entry.author.display_name",False) # '${entry.author.display_name}' on line 38, col 22
                if _v is not None: write(_filter(_v, rawExpr='${entry.author.display_name}')) # from line 38, col 22.
                write('</span> on\n      <span class="date">')
                _v = VFN(VFFSL(SL,"tg",False),"format_date",False)(VFFSL(SL,"entry.created",False)) # '${tg.format_date($entry.created)}' on line 39, col 26
                if _v is not None: write(_filter(_v, rawExpr='${tg.format_date($entry.created)}')) # from line 39, col 26.
                write('</span> in\n      <span class="tags">')
                _v = VFN(VFFSL(SL,"tg",False),"format_tags",False)(VFFSL(SL,"entry.tags",False)) # '${tg.format_tags($entry.tags)}' on line 40, col 26
                if _v is not None: write(_filter(_v, rawExpr='${tg.format_tags($entry.tags)}')) # from line 40, col 26.
                write('</span>\n      <span class="numcomments"><a\n      href="')
                _v = VFN(VFFSL(SL,"tg",False),"url",False)('/article/%s#comments' % entry.id) # "${tg.url('/article/%s#comments' % entry.id)}" on line 42, col 13
                if _v is not None: write(_filter(_v, rawExpr="${tg.url('/article/%s#comments' % entry.id)}")) # from line 42, col 13.
                write('"\n      >(')
                _v = VFFSL(SL,"entry.comment_count",False) # '${entry.comment_count}' on line 43, col 9
                if _v is not None: write(_filter(_v, rawExpr='${entry.comment_count}')) # from line 43, col 9.
                write('\n      comment')
                if VFFSL(SL,"entry.comment_count",False) != 1: # generated from line 44, col 14
                    write('s')
                write(''')</a></span>
    </p>

    <p><a class="readon" href="''')
                _v = VFN(VFFSL(SL,"tg",False),"url",False)('/article/%s' % VFFSL(SL,"entry.id",False)) # "${tg.url('/article/%s' % $entry.id)}" on line 47, col 32
                if _v is not None: write(_filter(_v, rawExpr="${tg.url('/article/%s' % $entry.id)}")) # from line 47, col 32.
                write('''">Continue
      reading &hellip;</a></p>

  </div>
''')
            write('\n')
        else: # generated from line 53, col 1
            write('<p>No blog articles found.</p>\n')
        write('</div>\n')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def writeBody(self, **KWS):



        ## CHEETAH: main method generated for this template
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write('''



''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        
    ##################################################
    ## CHEETAH GENERATED ATTRIBUTES


    _CHEETAH__instanceInitialized = False

    _CHEETAH_version = __CHEETAH_version__

    _CHEETAH_versionTuple = __CHEETAH_versionTuple__

    _CHEETAH_genTime = __CHEETAH_genTime__

    _CHEETAH_genTimestamp = __CHEETAH_genTimestamp__

    _CHEETAH_src = __CHEETAH_src__

    _CHEETAH_srcLastModified = __CHEETAH_srcLastModified__

    _mainCheetahMethod_for_blog= 'writeBody'

## END CLASS DEFINITION

if not hasattr(blog, '_initCheetahAttributes'):
    templateAPIClass = getattr(blog, '_CHEETAH_templateClass', Template)
    templateAPIClass._addCheetahPlumbingCodeToClass(blog)


# CHEETAH was developed by Tavis Rudd and Mike Orr
# with code, advice and input from many other volunteers.
# For more information visit http://www.CheetahTemplate.org/

##################################################
## if run from command line:
if __name__ == '__main__':
    from Cheetah.TemplateCmdLineIface import CmdLineIface
    CmdLineIface(templateObj=blog()).run()


