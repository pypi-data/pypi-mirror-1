#!/usr/bin/env python




##################################################
## DEPENDENCIES
import sys
import os
import os.path
from os.path import getmtime, exists
import time
import types
import __builtin__
from Cheetah.Version import MinCompatibleVersion as RequiredCheetahVersion
from Cheetah.Version import MinCompatibleVersionTuple as RequiredCheetahVersionTuple
from Cheetah.Template import Template
from Cheetah.DummyTransaction import DummyTransaction
from Cheetah.NameMapper import NotFound, valueForName, valueFromSearchList, valueFromFrameOrSearchList
from Cheetah.CacheRegion import CacheRegion
import Cheetah.Filters as Filters
import Cheetah.ErrorCatchers as ErrorCatchers
from cblog.templates.SiteTemplate import SiteTemplate

##################################################
## MODULE CONSTANTS
try:
    True, False
except NameError:
    True, False = (1==1), (1==0)
VFFSL=valueFromFrameOrSearchList
VFSL=valueFromSearchList
VFN=valueForName
currentTime=time.time
__CHEETAH_version__ = '2.0rc7'
__CHEETAH_versionTuple__ = (2, 0, 0, 'candidate', 7)
__CHEETAH_genTime__ = 1165587713.032932
__CHEETAH_genTimestamp__ = 'Fri Dec  8 15:21:53 2006'
__CHEETAH_src__ = 'view.tmpl'
__CHEETAH_srcLastModified__ = 'Fri Dec  8 15:21:39 2006'
__CHEETAH_docstring__ = 'Autogenerated by CHEETAH: The Python-Powered Template Engine'

if __CHEETAH_versionTuple__ < RequiredCheetahVersionTuple:
    raise AssertionError(
      'This template was compiled with Cheetah version'
      ' %s. Templates compiled before version %s must be recompiled.'%(
         __CHEETAH_version__, RequiredCheetahVersion))

##################################################
## CLASSES

class view(SiteTemplate):

    ##################################################
    ## CHEETAH GENERATED METHODS


    def __init__(self, *args, **KWs):

        SiteTemplate.__init__(self, *args, **KWs)
        if not self._CHEETAH__instanceInitialized:
            cheetahKWArgs = {}
            allowedKWs = 'searchList namespaces filter filtersLib errorCatcher'.split()
            for k,v in KWs.items():
                if k in allowedKWs: cheetahKWArgs[k] = v
            self._initCheetahInstance(**cheetahKWArgs)
        

    def pagetitle(self, **KWS):



        ## CHEETAH: generated from #def pagetitle at line 7, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write('  <title>')
        _v = VFFSL(SL,"tg.blogtitle",False) # '${tg.blogtitle}' on line 8, col 10
        if _v is not None: write(_filter(_v, rawExpr='${tg.blogtitle}')) # from line 8, col 10.
        write(': ')
        _v = VFFSL(SL,"entry.title",False) # '${entry.title}' on line 8, col 27
        if _v is not None: write(_filter(_v, rawExpr='${entry.title}')) # from line 8, col 27.
        write('</title>\n')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def pagecontent(self, **KWS):



        ## CHEETAH: generated from #def pagecontent at line 11, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write('''<div id="detailview">

  <p id="commentlink"><a href="#" class="show_commentlink">Add a comment</a></p>

  <div class="article">
    <h1 class="title">''')
        _v = VFFSL(SL,"entry.title",False) # '${entry.title}' on line 17, col 23
        if _v is not None: write(_filter(_v, rawExpr='${entry.title}')) # from line 17, col 23.
        write('</h1>\n\n')
        if VFFSL(SL,"comment_form",False): # generated from line 19, col 5
            write('    ')
            _v = VFFSL(SL,"comment_form",False)(value=dict(id=VFFSL(SL,"entry.id",False)),
      submit_text=_(u'Add Comment'),
      action=VFN(VFFSL(SL,"tg",False),"url",False)('/add_comment'),
      form_attrs=dict(id='commentform'))
            if _v is not None: write(_filter(_v, rawExpr="${comment_form(value=dict(id=$entry.id),\n      submit_text=_(u'Add Comment'),\n      action=$tg.url('/add_comment'),\n      form_attrs=dict(id='commentform'))}")) # from line 20, col 5.
            write('\n')
        write('\n')
        if VFFSL(SL,"tg.identity.user_name",False) == VFFSL(SL,"entry.author.user_name",False): # generated from line 26, col 5
            write('    <p class="actionlinks">\n      <a href="')
            _v = VFN(VFFSL(SL,"tg",False),"url",False)('/edit_article/%i') % VFFSL(SL,"entry.id",False) # "${tg.url('/edit_article/%i') % $entry.id}" on line 28, col 16
            if _v is not None: write(_filter(_v, rawExpr="${tg.url('/edit_article/%i') % $entry.id}")) # from line 28, col 16.
            write('">Edit article</a>\n    </p>\n')
        write('\n    <p class="byline"><a href="')
        _v = VFN(VFFSL(SL,"tg",False),"url",False)('/article/%s' % VFFSL(SL,"entry.id",False)) # "${tg.url('/article/%s' % $entry.id)}" on line 32, col 32
        if _v is not None: write(_filter(_v, rawExpr="${tg.url('/article/%s' % $entry.id)}")) # from line 32, col 32.
        write('">#</a>\n      posted by <span\n      class="author">')
        _v = VFFSL(SL,"entry.author.display_name",False) # '${entry.author.display_name}' on line 34, col 22
        if _v is not None: write(_filter(_v, rawExpr='${entry.author.display_name}')) # from line 34, col 22.
        write('</span> on\n      <span class="date">')
        _v = VFN(VFFSL(SL,"tg",False),"format_date",False)(VFFSL(SL,"entry.created",False)) # '${tg.format_date($entry.created)}' on line 35, col 26
        if _v is not None: write(_filter(_v, rawExpr='${tg.format_date($entry.created)}')) # from line 35, col 26.
        write('</span> in\n      <span class="tags">')
        _v = VFN(VFFSL(SL,"tg",False),"format_tags",False)(VFFSL(SL,"entry.tags",False)) # '${tg.format_tags($entry.tags)}' on line 36, col 26
        if _v is not None: write(_filter(_v, rawExpr='${tg.format_tags($entry.tags)}')) # from line 36, col 26.
        write('</span></p>\n\n    ')
        _v = VFFSL(SL,"entry.html_text",False) # '${entry.html_text}' on line 38, col 5
        if _v is not None: write(_filter(_v, rawExpr='${entry.html_text}')) # from line 38, col 5.
        write('''
  </div>

  <div id="comments">
''')
        items = VFN(VFFSL(SL,"tg",False),"ipeek",False)(VFFSL(SL,"comments",False))
        count = VFFSL(SL,"entry.comment_count",False);
        if VFFSL(SL,"items",False): # generated from line 44, col 5
            write('''    <div class="header">
      <a name="comments"></a><h2>Reader comments</h2>

      <p>There are ''')
            _v = VFFSL(SL,"count",False) # '${count}' on line 48, col 20
            if _v is not None: write(_filter(_v, rawExpr='${count}')) # from line 48, col 20.
            write(' comment')
            if VFFSL(SL,"count",False) != 1: # generated from line 48, col 36
                write('s')
            write(''' on this article.
      <a href="#" class="show_commentlink">Add a comment now...</a></p>
    </div>

''')
            for cnum, comment in enumerate(VFFSL(SL,"items",False)): # generated from line 52, col 7
                authorcomment = (VFFSL(SL,"comment.email",False) == VFFSL(SL,"entry.author.email_address",False))
                write('      <div class="comment')
                if VFFSL(SL,"authorcomment",False): # generated from line 54, col 26
                    write(' authorcomment')
                write('">\n\n')
                if VFN(VFFSL(SL,"tg",False),"config",False)('gravatars.show', False): # generated from line 56, col 9
                    write('        ')
                    _v = VFN(VFFSL(SL,"tg_gravatar",False),"display",False)(VFFSL(SL,"comment.email",False)) # '${tg_gravatar.display($comment.email)}' on line 57, col 9
                    if _v is not None: write(_filter(_v, rawExpr='${tg_gravatar.display($comment.email)}')) # from line 57, col 9.
                    write('\n')
                write('\n        <p class="byline">\n          <a class="num" href="#comment-')
                _v = VFFSL(SL,"comment.id",False) # '${comment.id}' on line 61, col 41
                if _v is not None: write(_filter(_v, rawExpr='${comment.id}')) # from line 61, col 41.
                write('">')
                _v = VFFSL(SL,"cnum",False)+1 # '${cnum+1}' on line 61, col 56
                if _v is not None: write(_filter(_v, rawExpr='${cnum+1}')) # from line 61, col 56.
                write('</a>\n          <a name="comment-')
                _v = VFFSL(SL,"comment.id",False) # '${comment.id}' on line 62, col 28
                if _v is not None: write(_filter(_v, rawExpr='${comment.id}')) # from line 62, col 28.
                write('"></a>\n          <span class="author">')
                _v = VFN(VFFSL(SL,"tg",False),"format_author",False)(comment) # '${tg.format_author(comment)}' on line 63, col 32
                if _v is not None: write(_filter(_v, rawExpr='${tg.format_author(comment)}')) # from line 63, col 32.
                write('</span>\n          said on\n          <span class="date">')
                _v = VFN(VFFSL(SL,"tg",False),"format_date",False)(comment.created) # '${tg.format_date(comment.created)}' on line 65, col 30
                if _v is not None: write(_filter(_v, rawExpr='${tg.format_date(comment.created)}')) # from line 65, col 30.
                write('''</span>:</p>

        <div class="text">
          ''')
                _v = VFFSL(SL,"comment.html_text",False) # '${comment.html_text}' on line 68, col 11
                if _v is not None: write(_filter(_v, rawExpr='${comment.html_text}')) # from line 68, col 11.
                write('''
        </div>

      </div>
''')
        else: # generated from line 73, col 5
            write('''    <div class="header">
      <a name="comments"></a><h2>Reader comments</h2>

      <p><a name="comments"></a>There are no comments on this article yet.
      <a href="#" class="show_commentlink">Add a comment now...</a></p>
    </div>
''')
        write('''
  </div>
</div>
''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def writeBody(self, **KWS):



        ## CHEETAH: main method generated for this template
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write('''


''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        
    ##################################################
    ## CHEETAH GENERATED ATTRIBUTES


    _CHEETAH__instanceInitialized = False

    _CHEETAH_version = __CHEETAH_version__

    _CHEETAH_versionTuple = __CHEETAH_versionTuple__

    _CHEETAH_genTime = __CHEETAH_genTime__

    _CHEETAH_genTimestamp = __CHEETAH_genTimestamp__

    _CHEETAH_src = __CHEETAH_src__

    _CHEETAH_srcLastModified = __CHEETAH_srcLastModified__

    _mainCheetahMethod_for_view= 'writeBody'

## END CLASS DEFINITION

if not hasattr(view, '_initCheetahAttributes'):
    templateAPIClass = getattr(view, '_CHEETAH_templateClass', Template)
    templateAPIClass._addCheetahPlumbingCodeToClass(view)


# CHEETAH was developed by Tavis Rudd and Mike Orr
# with code, advice and input from many other volunteers.
# For more information visit http://www.CheetahTemplate.org/

##################################################
## if run from command line:
if __name__ == '__main__':
    from Cheetah.TemplateCmdLineIface import CmdLineIface
    CmdLineIface(templateObj=view()).run()


