!    -*- f90 -*-
! Note: the context of this file is case sensitive.

python module flib ! in 
    interface  ! in :flib
        function whrand() ! in :flib:flib.f
            integer :: ix
            integer :: iy
            integer :: iz
            real :: whrand
            common /randc/ ix,iy,iz
        end function whrand
        function uniform() ! in :flib:flib.f
            integer*4 :: s1
            integer*4 :: s2
            real :: uniform
            common /unif_seeds/ s1,s2
        end function uniform
        subroutine set_uniform(seed1,seed2) ! in :flib:flib.f
            integer*4 :: seed1
            integer*4 :: seed2
            integer*4 :: s1
            integer*4 :: s2
            common /unif_seeds/ s1,s2
        end subroutine set_uniform
        subroutine rcat(hist,mn,step,n,s,k) ! in :flib:flib.f
            real dimension(k),intent(in) :: hist
            real intent(in) :: mn
            real intent(in) :: step
            integer intent(in) :: n
            real dimension(n),intent(out),depend(n) :: s
            integer optional,intent(hide),depend(hist) :: k=len(hist)
        end subroutine rcat
        subroutine categor(x,hist,mn,step,n,k,like) ! in :flib:flib.f
            real dimension(n),intent(in) :: x
            real dimension(k),intent(in) :: hist
            real intent(in) :: mn
            real intent(in) :: step
            integer optional,intent(hide),depend(x) :: n=len(x)
            integer optional,intent(hide),depend(hist) :: k=len(hist)
            real intent(out) :: like
        end subroutine categor
        subroutine hazard(x,sigma,b,k,like) ! in :flib:flib.f
            real dimension(k),intent(in) :: x
            real intent(in) :: sigma
            real intent(in) :: b
            integer optional,intent(hide),depend(x) :: k=len(x)
            real intent(out) :: like
        end subroutine hazard
        subroutine simple(x,w,a,start,m,n,like) ! in :flib:flib.f
            real dimension(n),intent(in) :: x
            real intent(in) :: w
            real dimension(m),intent(in) :: a
            integer intent(in) :: start
            integer optional,intent(hide),depend(a) :: m=len(a)
            integer optional,intent(hide),depend(x) :: n=len(x)
            real intent(out) :: like
        end subroutine simple
        subroutine cosine(x,w,a,start,n,m,like) ! in :flib:flib.f
            real dimension(n),intent(in) :: x
            real intent(in) :: w
            real dimension(m),intent(in) :: a
            integer intent(in) :: start
            integer optional,intent(hide),depend(x) :: n=len(x)
            integer optional,intent(hide),depend(a) :: m=len(a)
            real intent(out) :: like
        end subroutine cosine
        subroutine hermite(x,w,a,start,h,n,m,like) ! in :flib:flib.f
            real dimension(n),intent(in) :: x
            real intent(in) :: w
            real dimension(m),intent(in) :: a
            integer intent(in) :: start
            integer intent(in) :: h
            integer optional,intent(hide),depend(x) :: n=len(x)
            integer optional,intent(hide),depend(a) :: m=len(a)
            real intent(out) :: like
        end subroutine hermite
        subroutine hyperg(x,d,red,total,n,like) ! in :flib:flib.f
            integer dimension(n),intent(in) :: x
            integer intent(in) :: d
            integer intent(in) :: red
            integer intent(in) :: total
            integer optional,intent(hide),depend(x) :: n=len(x)
            real intent(out) :: like
        end subroutine hyperg
        subroutine mvhyperg(x,color,k,like) ! in :flib:flib.f
            integer dimension(k),intent(in) :: x
            integer dimension(k),intent(in),depend(k) :: color
            integer optional,intent(hide),depend(x) :: k=len(x)
            real intent(out) :: like
        end subroutine mvhyperg
        subroutine poisson(x,mu,n,like) ! in :flib:flib.f
            integer dimension(n),intent(in) :: x
            real intent(in) :: mu
            integer optional,intent(hide),depend(x) :: n=len(x)
            real intent(out) :: like
        end subroutine poisson
        subroutine weibull(x,alpha,beta,n,like) ! in :flib:flib.f
            real dimension(n),intent(in) :: x
            real intent(in) :: alpha
            real intent(in) :: beta
            integer optional,intent(hide),depend(x) :: n=len(x)
            real intent(out) :: like
        end subroutine weibull
        subroutine cauchy(x,alpha,beta,n,like) ! in :flib:flib.f
            real dimension(n),intent(in) :: x
            real intent(in) :: alpha
            real intent(in) :: beta
            integer optional,intent(hide),depend(x) :: n=len(x)
            real intent(out) :: like
        end subroutine cauchy
        subroutine negbin(x,r,p,n,like) ! in :flib:flib.f
            integer dimension(n),intent(in) :: x
            integer intent(in) :: r
            real intent(in) :: p
            integer optional,check(len(x)>=n),depend(x) :: n=len(x)
            real intent(out) :: like
        end subroutine negbin
        subroutine binomial(x,n,p,m,like) ! in :flib:flib.f
            integer dimension(m),intent(in) :: x
            integer intent(in) :: n
            real intent(in) :: p
            integer optional,intent(hide),depend(x) :: m=len(x)
            real intent(out) :: like
        end subroutine binomial
        subroutine bernoulli(x,p,m,like) ! in :flib:flib.f
            integer dimension(m),intent(in) :: x
            real intent(in) :: p
            integer optional,intent(hide),depend(x) :: m=len(x)
            real intent(out) :: like
        end subroutine bernoulli
        subroutine multinomial(x,n,p,m,like) ! in :flib:flib.f
            integer dimension(m),intent(in) :: x
            integer intent(in) :: n
            real dimension(m),intent(in),depend(m) :: p
            integer optional,intent(hide),depend(x) :: m=len(x)
            real intent(out) :: like
        end subroutine multinomial
        subroutine normal(x,mu,tau,n,like) ! in :flib:flib.f
            real dimension(n),intent(in) :: x
            real intent(in) :: mu
            real intent(in) :: tau
            integer optional,intent(hide),depend(x) :: n=len(x)
            real intent(out) :: like
        end subroutine normal
        subroutine hnormal(x,tau,n,like) ! in :flib:flib.f
            real dimension(n),intent(in) :: x
            real intent(in) :: tau
            integer optional,intent(hide),depend(x) :: n=len(x)
            real intent(out) :: like
        end subroutine hnormal
        subroutine lognormal(x,mu,tau,n,like) ! in :flib:flib.f
            real dimension(n),intent(in) :: x
            real intent(in) :: mu
            real intent(in) :: tau
            integer optional,intent(hide),depend(x) :: n=len(x)
            real intent(out) :: like
        end subroutine lognormal
        subroutine gamma(x,alpha,beta,n,like) ! in :flib:flib.f
            real dimension(n),intent(in) :: x
            real intent(in) :: alpha
            real intent(in) :: beta
            integer optional,intent(hide),depend(x) :: n=len(x)
            real intent(out) :: like
        end subroutine gamma
        subroutine igamma(x,alpha,beta,n,like) ! in :flib:flib.f
            real dimension(n),intent(in) :: x
            real intent(in) :: alpha
            real intent(in) :: beta
            integer optional,intent(hide),depend(x) :: n=len(x)
            real intent(out) :: like
        end subroutine igamma
        subroutine beta(x,a,b,n,like) ! in :flib:flib.f
            real dimension(n),intent(in) :: x
            real intent(in) :: a
            real intent(in) :: b
            integer optional,intent(hide),depend(x) :: n=len(x)
            real intent(out) :: like
        end subroutine beta
        subroutine dirichlet(x,theta,p,n,like) ! in :flib:flib.f
            real dimension(n,p),intent(in) :: x
            real dimension(n,p),intent(in),depend(n,p) :: theta
            integer optional,intent(hide),depend(x) :: p=shape(x,1)
            integer optional,intent(hide),depend(x) :: n=shape(x,0)
            real intent(out) :: like
        end subroutine dirichlet
        subroutine wishart(x,k,n,sigma,like) ! in :flib:flib.f
            real dimension(k,k),intent(in) :: x
            integer optional,intent(hide),depend(x) :: k=len(x)
            real intent(in) :: n
            real dimension(k,k),intent(in),depend(k,k) :: sigma
            real intent(out) :: like
        end subroutine wishart
        subroutine mvnorm(x,mu,tau,k,like) ! in :flib:flib.f
            real dimension(k),intent(in) :: x
            real dimension(k),intent(in),depend(k) :: mu
            real dimension(k,k),intent(in),depend(k,k) :: tau
            integer optional,intent(hide),depend(x) :: k=len(x)
            real intent(out) :: like
        end subroutine mvnorm
        subroutine trace(mat,k,tr) ! in :flib:flib.f
            real dimension(k,k) :: mat
            integer optional,check(shape(mat,0)==k),depend(mat) :: k=shape(mat,0)
            real :: tr
        end subroutine trace
        subroutine gamfun(xx,gx) ! in :flib:flib.f
            real intent(in) :: xx
            real intent(out) :: gx
        end subroutine gamfun
        subroutine trans(mat,tmat,m,n) ! in :flib:flib.f
            real dimension(m,n),intent(in) :: mat
            real dimension(n,m),intent(out),depend(n,m) :: tmat
            integer optional,intent(hide),depend(mat) :: m=len(mat)
            integer optional,intent(hide),depend(mat) :: n=shape(mat,1)
        end subroutine trans
        subroutine matmult(mat1,mat2,prod,m,n,p,q) ! in :flib:flib.f
            real dimension(m,n),intent(in) :: mat1
            real dimension(p,q),intent(in) :: mat2
            real dimension(m,q),intent(out),depend(m,q) :: prod
            integer optional,intent(hide),depend(mat1) :: m=len(mat1)
            integer optional,intent(hide),depend(mat1) :: n=shape(mat1,1)
            integer optional,intent(hide),depend(mat2) :: p=len(mat2)
            integer optional,intent(hide),depend(mat2) :: q=shape(mat2,1)
        end subroutine matmult
        subroutine dtrm(a,n,d) ! in :flib:flib.f
            real dimension(n,n),intent(in) :: a
            integer optional,intent(hide),depend(a) :: n=len(a)
            real intent(out) :: d
        end subroutine dtrm
        subroutine elgs(a,n,indx) ! in :flib:flib.f
            real dimension(n,n) :: a
            integer optional,check(shape(a,0)==n),depend(a) :: n=shape(a,0)
            integer dimension(n),depend(n) :: indx
        end subroutine elgs
        function gammln(xx) ! in :flib:flib.f
            real :: xx
            real :: gammln
        end function gammln
        function factrl(n) ! in :flib:flib.f
            integer :: n
            real :: factrl
        end function factrl
        function factln(n) ! in :flib:flib.f
            integer :: n
            real :: factln
        end function factln
        function bico(n,k) ! in :flib:flib.f
            integer :: n
            integer :: k
            real :: bico
        end function bico
        subroutine chol(n,a,c) ! in :flib:flib.f
            integer optional,intent(in),depend(a) :: n=len(a)
            real dimension(n,n),intent(in) :: a
            real dimension(n,n),intent(out),depend(n,n) :: c
        end subroutine chol
        subroutine rbin(n,pp,x) ! in :flib:flib.f
            integer intent(in) :: n
            real intent(in) :: pp
            integer intent(out) :: x
        end subroutine rbin
        subroutine rnorm(u1,u2) ! in :flib:flib.f
            real :: u1
            real :: u2
        end subroutine rnorm
        subroutine wshrt(d,n,np,nnp,sb,sa) ! in :flib:flib.f
            real dimension(nnp),intent(in) :: d
            integer intent(in) :: n
            integer intent(in) :: np
            integer optional,intent(hide),depend(d) :: nnp=len(d)
            real dimension(nnp),intent(hide),depend(nnp) :: sb
            real dimension(nnp),intent(out),depend(nnp) :: sa
        end subroutine wshrt
        subroutine hermpoly(n,x,cx) ! in :flib:flib.f
            integer intent(in) :: n
            real intent(in) :: x
            real dimension(n + 1),intent(out),depend(n) :: cx
        end subroutine hermpoly
    end interface 
end python module flib

! This file was auto-generated with f2py (version:2_3048).
! See http://cens.ioc.ee/projects/f2py2e/
