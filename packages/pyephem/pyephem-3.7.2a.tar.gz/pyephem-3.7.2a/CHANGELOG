			  PyEphem CHANGELOG

Version 3.7.2a (2007 June)

  - Upgraded to the libastro from XEphem 3.7.2.

  - Should now compile under Windows!

  - Bugfix: rewrote date-and-time parsing to avoid the use of
    sscanf(), which was breaking under Windows and requiring the
    insertion of a leading space to succeed.

  - Improved the error returned when a date string cannot be parsed,
    so that it now quotes the objectionable string (so you can tell
    which of several date strings on the same line gave an error!).

Version 3.7b  (2005 August 25)

  - Bugfix: in the underlying library, earth satellite objects do not
    support "SOLSYS" attributes like "sun_distance"; so EarthSatellite
    must inherit from Body rather than Planet (and lose several
    attributes, which were returning nonsense values).

Version 3.7a  (2005 August 22)

  - Upgraded to the libastro from XEphem 3.7.

  - Bugfix: after creating an earth satellite and calling compute(),
    some attributes (including "sublat" and "sublong") would always
    equal zero until you had accessed a more mainstream attribute
    (like "ra" or "dec"); now all attributes should return correct
    values on their first access.

  - Bugfix: the sidereal_time() function of an Observer now returns a
    correct floating-point number that measures in radians, rather
    than a number in the range [0,1).

  - The Observer now has an radec_of(az=, alt=) function that returns
    the right ascension and declination of a point in the sky.

  - You can normalize an Angle into the range [0,2pi) by requesting
    the attribute ".norm".

  - Earth satellite objects read in from TLE files now retain their
    TLE catalog number as an attribute "catalog_number".

  - Uninitialized bodies now start off with None for their name,
    rather than the string "unnamed".

Version 3.6.4a  (2005 July 18)

  - Upgraded to the libastro from XEphem 3.6.4, which:

     No longer incorrectly applies relativistic deflection to
     objects on this side of the Sun, whose light will obviously not
     go past the sun and be deflected.

     Now correctly handles earth satellites with a negative es_decay
     parameter.

  - Added several functions to the module:

     moon_phases() - computes a new and full moon following a date.
     delta_t() - computes the difference between Terrestrial Time and
       Universal Time.
     julian_date() - computes the Julian Date for a date or Observer.

     millennium_atlas()
     uranometria()
     uranometria2000() - determine the star atlas page on which a
       given location falls, given as right ascension and declination.

  - Added a function to the Observer class, which takes no arguments:

     sidereal_time() - computes the sidereal time for the Observer

  - Each Observer now has a "horizon" attribute with, which you can
    specify the degrees altitude at which you define an object to be
    rising or setting.  Normally, all rising and setting times are
    computed for when the object appears to be exactly at the horizon
    (at zero degrees altitude).

Version 3.6.1a  (2004 November 25)

  - All major moons in the solar system are now supported.

  - Added copy() method to bodies, that returns a new instance of the
    body which should be identical in all properties.

  - Improved the definitions of body attributes, both in their
    docstrings and in the PyEphem Manual.

  - Improved access to the orbital parameters by which the user
    defines bodies in ellipical, parabolic, and hyperbolic orbits, as
    well as artificial Earth satellites; users can now create such
    objects entirely through setting their parameters, without having
    to use the readdb() function to parse a definition of the object
    in Ephem database format.

  - Source distribution now includes test suites, one of which
    actually checks to see whether your version of PyEphem produces
    the same output as the examples from the PyEphem Manual (two of
    which will fail).

  - Following the same adjustment in the XEphem application, PyEphem
    now uses a default atmospheric pressure of 1010 millibar, rather
    than the old value of 1013, when computing the altitude of a body
    near the horizon.

  - The constellation() function now correctly forces the computation
    of a body's ra and dec before determining the constellation in
    which the body lies.

  - Code should produce cleaner compiles on many platforms.
