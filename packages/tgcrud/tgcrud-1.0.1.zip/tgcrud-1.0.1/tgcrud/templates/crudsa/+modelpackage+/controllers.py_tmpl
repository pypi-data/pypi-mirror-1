#coding=utf-8
from turbogears import controllers, expose, redirect
from turbogears import validate, flash, error_handler
from ${package}.model import session, ${modelname}
from turbogears import widgets, validators
#from turbogears import identity
#from turbogears import paginate

class ${modelname}Fields(widgets.WidgetsList):
    """fields definitions. Replace to your Fields"""
    name = widgets.TextField(label="Name")
    url = widgets.TextField(label="URL")

class ${modelname}Schema(validators.Schema):
    """
    define validation schema that involves 
    field dependency or logical operators
    """
    name = validators.String(not_empty=True, max=16)
    url = validators.URL(add_http=True, check_exists=True)

class ${modelname}Form(widgets.TableForm):
    """form builder"""
    #name="${modelname.capitalize()}"
    fields = ${modelname}Fields()
    #validator = ${modelname}Schema() # define schema outside of ${modelname}Fields
    #method="post"
    #submit_text = "Create"

model_form = ${modelname}Form()

#protect ${modelpackage} with identity by include
#identity.SecureResource in superclass
class ${modelpackage}(controllers.Controller):
    """Basic model admin interface"""
    modelname="${modelname}"

    @expose()
    def default(self, tg_errors=None):
        """handle non exist urls"""
        raise redirect("list")

    #require = identity.in_group("admin")
    @expose()
    def index(self): 
    	"""handle front page"""
    	raise redirect("list")

    @expose(template='kid:${package}.${modelpackage}.templates.list')
    #@paginate('records')
    def list(self, **kw):
        """List records in model"""
        records = ${modelname}.select()
        return dict(records = records, modelname=self.modelname)

    @expose(template='kid:${package}.${modelpackage}.templates.show')
    def show(self,id, **kw):
        """Show record in model"""
        record = ${modelname}.get(int(id))
        return dict(record = record)

    @expose(template='kid:${package}.${modelpackage}.templates.form')
    def new(self, **kw):
        """Create new records in model"""
        return dict(modelname = self.modelname, form = model_form, page='new')

    @expose(template='kid:${package}.${modelpackage}.templates.form')
    def edit(self, id, **kw):
        """Edit record in model"""
        try:
            record = ${modelname}.get(int(id))
        except:
            flash = "Not valid edit"
        return dict(modelname = self.modelname, form = model_form, page='edit',
                    record = record)

    @validate(model_form)
    @error_handler(new)
    @expose()
    def save(self, id=None, **kw):
        """Save or create record to model"""
        #update kw
        if id:
            #do update
            record = ${modelname}.get(int(id))
            for attr in kw:
                setattr(record, attr, kw[attr])
            flash("${modelname} was successfully updated.")
            raise redirect("../list")
        else:
            #do create
            ${modelname}(**kw)
            flash("${modelname} was successfully created.")
            raise redirect("list")

    @expose()
    def destroy(self, id):
        """Destroy record in model"""
        record = ${modelname}.get(int(id))
        session.delete(record)
        flash("${modelname} was successfully destroyed.")
        raise redirect("../list")