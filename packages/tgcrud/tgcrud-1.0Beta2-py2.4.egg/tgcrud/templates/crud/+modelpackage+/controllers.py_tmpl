from turbogears import controllers, expose, redirect
from turbogears import validate, validators, flash, error_handler
#if $sqlalchemy != "True"
from ${package}.model import ${modelname}
#else
from ${package}.model import session, ${modelname}
#end if
from turbogears.widgets import WidgetsList, TableForm
# import required widget fields
from turbogears.widgets import TextField
#from turbogears import identity
#from turbogears import paginate

class ${modelname}Fields(WidgetsList):
    """Replace to your Fields"""
    name = TextField(label="Name")
    url = TextField(label="URL")

class ${modelname}Schema(validators.Schema):
    """
    separate validation schema from the fields definition
    make it possible to define a more complex schema
    that involves field dependency or logical operators
    """
    name = validators.String(not_empty=True, max=16)
    url = validators.URL(add_http=True, check_exists=True)

class ${modelname}Form(TableForm):
    #name="${modelname.capitalize()}"
    fields = ${modelname}Fields()
    #validator = ${modelname}Schema() # define schema outside of ${modelname}Fields
    #method="post"
    submit_text = "Create"


model_form = ${modelname}Form()

#protect ${modelpackage} with identity by include
#identity.SecureResource in superclass
class ${modelpackage}(controllers.Controller):
    """Basic model admin interface"""
    modelname="${modelname}"

    @expose()
    def default(self, tg_errors=None):
        """handle non exist urls"""
        raise redirect("list")


    #require = identity.in_group("admin")
    @expose()
    def index(self):
        raise redirect("list")

    @expose(template='kid:${package}.${modelpackage}.templates.list')
    #@paginate('records')
    def list(self, **kw):
        """List records in model"""
        records = ${modelname}.select()

        return dict(records = records, modelname=self.modelname)


    @expose(template='kid:${package}.${modelpackage}.templates.new')
    def new(self, **kw):
        """Create new records in model"""
        return dict(modelname = self.modelname, form = model_form)

    @expose(template='kid:${package}.${modelpackage}.templates.edit')
    def edit(self, id, **kw):
        """Edit record in model"""
        try:
            record = ${modelname}.get(int(id))
        except:
            flash = "Not valid edit"

        return dict(modelname = self.modelname,
                    record = record,
                    form = model_form)

    @expose(template='kid:${package}.${modelpackage}.templates.show')
    def show(self,id, **kw):
        """Show record in model"""
        record = ${modelname}.get(int(id))

        return dict(record = record)

    @expose()
    def destroy(self, id):
        """Destroy record in model"""
        record = ${modelname}.get(int(id))
        #if $sqlalchemy != "True"
        record.destroySelf()
        #else
        session.delete(record)
        #end if
        flash("${modelname} was successfully destroyed.")
        raise redirect("../list")

    @validate(model_form)
    @error_handler(new)
    @expose()
    def save(self, id=None, **kw):
        """Save or create record to model"""
        #update kw

        #create
        if not id:
            ${modelname}(**kw)
            flash("${modelname} was successfully created.")
            raise redirect("list")
        #update
        else:
            record = ${modelname}.get(int(id))
            for attr in kw:
                setattr(record, attr, kw[attr])
            flash("${modelname} was successfully updated.")
            raise redirect("../list")
