from turbogears import controllers, expose, redirect
from turbogears import validate, validators, flash, error_handler 
from ${package}.model import ${modelname}
from turbogears.widgets import *
#from turbogears import identity
#from turbogears import paginate
    
class ${modelname}Fields(WidgetsList):
    #Replace to your Fields
    name = TextField(name="name", validator=validators.NotEmpty)
    url = TextField(name="url")
    
class ${modelname}Form(TableForm):
    fields = ${modelname}Fields()
    submit_text = "Create"

model_form = ${modelname}Form()

#protect ${modelpackage} with identity by include 
#identity.SecureResource in superclass
class ${modelpackage}(controllers.Controller):
    """Basic model admin interface"""
    #require = identity.in_group("admin")
    modelname="${modelname}"
    
    @expose()
    def index(self):
        raise redirect("list")
    
    @expose(template='kid:${package}.${modelpackage}.templates.list')
    #@paginate('records')
    def list(self, **kw):
        """List records in model"""
        try:
            self.flash = kw['tg_flash']
        except:
            self.flash = None

        records = ${modelname}.select()
        
        return dict(records = records, modelname=self.modelname, 
                    tg_flash = self.flash)
    
    
    @expose(template='kid:${package}.${modelpackage}.templates.new')
    def new(self, **kw):
        """Create new records in model"""
        return dict(modelname = self.modelname,
                    form = model_form)
    
    @expose(template='kid:${package}.${modelpackage}.templates.edit')
    def edit(self, id, **kw):
        """Edit record in model"""
        try:
            record = ${modelname}.get(int(id))
        except:
            flash = "Not valid edit"
            
        return dict(modelname = self.modelname,
                    record = record,
                    form = model_form)
    
    @expose(template='kid:${package}.${modelpackage}.templates.show')
    def show(self,id, **kw):
        """Show record in model"""
        record = ${modelname}.get(int(id))
        
        return dict(record = record)
     
    @expose()
    def destroy(self, id):
        """Destroy record in model"""
        record = ${modelname}.get(int(id))
        record.destroySelf()
        
        raise redirect("../list",
                        tg_flash = "${modelname} was successfully destroyed.")
    
    @validate(model_form)
    #@error_handler(default)
    @expose()
    def save(self, id=None, **kw):
        """Save or create record to model"""   
        #create
        if not id:
            ${modelname}(**kw)
            
            raise redirect("list", 
                            tg_flash = "${modelname} was successfully created.")
        #update        
        else:       
            record = ${modelname}.get(int(id))
            record.set(**kw) 

            raise redirect("../list",
                            tg_flash="${modelname} was successfully updated.")

    @expose()
    def default(self, tg_errors=None):
        """handle non exist urls"""
        raise redirect("list")
