* check arguments for extract_counts in libffi_support, invalid meta will crash PyObjC.
* tests for special type codes: 

   (_C_NSBOOL, _C_UNICHAR, _C_CHAR_AS_TEXT, _C_CHAR_AS_INT, _C_CHAR_AS_INT)
   -> implement python methods with these arguments
   -> verify that all argument types are tested


* fix interaction between NSDecimal and decimal.decimal (the former should convert cleanly to the latter, 
  both are base-10 numbers)

* Clean up OC_PythonObject's conversion routine  (+(int)wrapPyObject:(PyObject *)argument toId:(id *)datum;)

  gIsInstanceWrapper = [] # sort by inheritance graph

  def wrapObject(value):
      while True:
          if hasattr(value, "__pyobjc_object__"):
	      value = value.__pyobjc_object__()
	  else:
	      break

      for cls in gIsInstanceWrapper:
         if isinstance(value, cls):
	    return cls.alloc().initWithPythonObject_(value)

     if isbuffer(value):
     	return OC_PythonData.alloc().initWithPythonObject_(value)

      return OC_PythonObject().alloc().initWithPythonObject_(value)

  - actual implementation in C, using a tree instead of a list
  - also an API for adding entries to the tree
  - investigate "Importing" for adding support for 3th-party
    modules.

* Implement pickling support for Objective-C classes




* Check PyObjc bugtracker
   (there seem to be several relevant bugs)
   - cannot install on 10.5.2 [SF 1922597]
   - binary installer [SF 1843072]
   - protocol conformance [SF 1735937, needs documentation update]
   
   There are more bugreports, those seem stale.


* Website update: 
  - Add google ads
  - Add donation page?

* look into compiling bridgesupport files into C (for speed)

* Pickling ObjC objects (NSCoding)  
  - implemetation
  - basic tests
  - torture: graphs that include python and objective-c objects
  - leaking

* Drop 'Examples' directory, move all examples to the right framework
  package

<checkin>

* mv objc.test.__init__ to PyObjCTools.TestSupport

* mv objc.test to PyObjCTests (including the extension modules)


* PPC64 support  (ask for help on list, Apple won't help)

* Look for Foundation classes that have a corresponding Python class/type
  (builtin and/or stdlib)
  [NSSet/NSMutableSet <-> set/frozenset]

* py2app: sys.path problem on pythonmac list

* py2app: setuptools support: 
    - add pkg_resources.py to .app
    - copy eggs 
    - ... (but extract extensions)
    - set right default cache directory

* py2app: really needs unittests

* pyapp: PYTHONHOME not cleared from environment [SF 1820658]
   [Not a problem unless using a alias build, don't do that!]

* tools: teach sfinx and/or epidoc about pyobjc
  - Special types, metatypes
  - Parse Apple docs to extract information and include in python docs
  - ... but with ways to enhance/override that documentation

Future:
* Research if it is possible to implement copy.deepcopy for ObjC objects
* Add tests for copying python objects (OC_PythonObject -copy/-copyWithZone:)
* test cases that check that an new method doesn't replace one in 
  a super-class
