# -*- coding: utf-8 -*-
from geomobilejp.converter.format import autoformat

def test_format():
    def func(from_point, to_point):
        lat, lon, fmt = to_point
        result_lat, result_lon = autoformat(format=fmt, *from_point)
        assert lat == result_lat, '"%s" expected, actual "%s"' % (lat, result_lat)
        assert lon == result_lon, '"%s" expected, actual "%s"' % (lon, result_lon)

    for f, t in DATA:
        yield (func, f, t)

DATA = (
    [('35.46.51.25', '139.17.7.25'),
     ('35.46.51.25', '139.17.7.25', 'dms'),],

    [('35.39.24.00', '139.40.15.054'),
     ('35.39.24.000', '139.40.15.054', 'dms')],

    [('35.39.24.00', '139.40.15.054'),
     ('35.656667', '139.670848', 'degree')],

    [('35.34.24.218', '139.37.09.379'),
     ('35.573394', '139.619272', 'degree')],

    [('-35.34.24.218', '-139.37.09.379'),
     ('-35.573394', '-139.619272', 'degree')],

    [('35.573394', '139.619272'),
     ('35.34.24.218', '139.37.09.379', 'dms')],

    [('-35.573394', '-139.619272'),
     ('-35.34.24.218', '-139.37.09.379', 'dms')],

    [('N35.573394', 'W139.619272'),
     ('35.34.24.218', '-139.37.09.379', 'dms')],

    [('n35.573394', 'w139.619272'),
     ('35.34.24.218', '-139.37.09.379', 'dms')],

    [('S35.573394', 'E139.619272'),
     ('-35.34.24.218', '139.37.09.379', 'dms')],

    [('s35.573394', 'e139.619272'),
     ('-35.34.24.218', '139.37.09.379', 'dms')],

    [('N35.34.24.218', 'E139.37.09.379'),
     ('35.573394', '139.619272', 'degree')],

    [('N35.34.24.218', 'W139.37.09.379'),
     ('35.573394', '-139.619272', 'degree')],

    [('S35.34.24.218', 'E139.37.09.379'),
     ('-35.573394', '139.619272', 'degree')],

    [('n35.34.24.218', 'w139.37.09.379'),
     ('35.573394', '-139.619272', 'degree')],

    [('s35.34.24.218', 'e139.37.09.379'),
     ('-35.573394', '139.619272', 'degree')],
)
