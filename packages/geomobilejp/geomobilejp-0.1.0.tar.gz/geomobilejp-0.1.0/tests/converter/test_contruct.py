# -*- coding: utf-8 -*-
from geomobilejp.converter.point import Point

def test_construct():
    def func(args, expected):
        lat, lon, format = expected
        pt = Point(*args).to_format(format)
        assert pt.latitude == lat, '"%s" expected, actual "%s"' % (lat, pt.latitude)
        assert pt.longitude == lon, '"%s" expected, actual "%s"' % (lon, pt.longitude)

    for a, b in DATA:
        yield (func, a, b)

DATA = (
    [('35.65580', '139.65580'),
     ('35.655800', '139.655800', 'degree')],

    [('+35.65580', '+139.65580'),
     ('35.655800', '139.655800', 'degree')],

    [('35.65580', '-139.65580'),
     ('35.655800', '-139.655800', 'degree')],

    [('+35.65580', '-139.65580'),
     ('35.655800', '-139.655800', 'degree')],

    [('-35.65580', '139.65580'),
     ('-35.655800', '139.655800', 'degree')],

    [('-35.65580', '+139.65580'),
     ('-35.655800', '139.655800', 'degree')],

    [('-35.65580', '-139.65580'),
     ('-35.655800', '-139.655800', 'degree')],

    [('35.39.24.000', '139.40.15.050'),
     ('35.39.24.000', '139.40.15.050', 'dms')],

    [('+35.39.24.000', '+139.40.15.050'),
     ('35.39.24.000', '139.40.15.050', 'dms')],

    [('35.39.24.000', '-139.40.15.050'),
     ('35.39.24.000', '-139.40.15.050', 'dms')],

    [('+35.39.24.000', '-139.40.15.050'),
     ('35.39.24.000', '-139.40.15.050', 'dms')],

    [('-35.39.24.000', '139.40.15.050'),
     ('-35.39.24.000', '139.40.15.050', 'dms')],

    [('-35.39.24.000', '+139.40.15.050'),
     ('-35.39.24.000', '139.40.15.050', 'dms')],

    [('-35.39.24.000', '-139.40.15.050'),
     ('-35.39.24.000', '-139.40.15.050', 'dms')],

    [('35.65580', '139.65580'),
     ('35.655800', '139.655800', 'degree')]
)
