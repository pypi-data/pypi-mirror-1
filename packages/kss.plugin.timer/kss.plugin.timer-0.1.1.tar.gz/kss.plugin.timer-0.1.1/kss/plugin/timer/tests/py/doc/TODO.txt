Things to do for 1.0.0 
========================= 

py.test 
--------------

- simplify collect API

- get APIGEN back to work 

- get web reporter back to work 

- introduce decorator "shouldfail" or "xfail" 
  as to mark a test as "expected to fail", 
  report specially if it surprisingly passes 

- nightly test runs on multiple platforms 

- review and refactor architecture of py.test with particular
  respect to: 
  - writing (stacked) extensions / plugins (compared to Nose) 
  - porting existing extensions (htmlconftest / buildbot / PyPy's conftest's ...) 
  - fast and stable distributed testing 
  - reliable cross-platform testing 

- improve py.test documentation to reflect new
  event architecture 

- review and optimize skip-handling (it can be quite slow in
  certain situations because e.g. setup/teardown is fully performed 
  although we have "skip by keyword" and could detect this early)

py.execnet
--------------

- cross-python version (2.2/2.3-2.5/6) and cross-platform testing of 
  setup/teardown semantics

- optimize general setup and rsync timing? 

py.apigen 
----------------

- make it work again 

see apigen_refactorings.txt

- check out CodeInvestigator 
  http://codeinvestigator.googlepages.com/main

  or other code that collects data from running a program 
  (in our case running the tests)

ld (review and shift to above)
=================================

refactorings
------------------

- refine doctests usage (particularly skips of doctests if
  some imports/conditions are not satisfied) 

- generalization of "host specifications" for execnet and
  py.test --dist usages in particular (see also revision 37500 which 
  contained a draft for that).  The goal is to have cross-platform 
  testing and dist-testing and other usages of py.execnet all 
  use a common syntax for specifiying connection methods and 
  be able to instantiate gateways/connections through it. 

- unification of "gateway"/host setup and teardown, including
  rsyncing, i.e. cross-platform and dist-testing. 

- py.log: unify API, possibly deprecate duplicate ones, 
  base things on a Config object  (hte latter almost a feature though) 
  (M988)

- see to teardown more eagerly

features 
--------------

- (Harald Armin Massa): make py.exe work with py lib 
- optimize file checking with --looponfailing (harald has code for win32)
- have a py.test scan/run database for results and test names
  etc. (to allow quicker selection of tests and post-run 
  information on failures etc.)  (M760) 

- consider features of py.apigen (recheck closed "M1016")

- integrate rlcompleter2 (make it remotely workable) 
  and maybe integrate with "pdb" / pdbplus (M975) 

- integrate native collecting of unittest.py tests from py.test 
  (along the PyPy lib-python tests)  (M987) 

- provide an automated conversion script helper for converting
  unittest.py based tests to py.test ones. (M987)

- references from ReST docs to modules, functions and classes
  of apigen generated html docs (M960)

- review svn-testing (and escape characters), consider
  svn-bindings (M634)

- py.test.pdb - there is my hack for a while now, which integrates
  rlcompleter2 with pdb. First of all it requires some strange changes
  to rlcompleter itself, which has no tests. Long-term plan would be
  to have pyrepl+rlcompleter2+pdb fixes integrated into pylib and
  have it tested. This requires work though.


