Amara XML Toolkit 1.2.0.2 (released 23 June 2007)
=================================================

by Uche Ogbuji

http://uche.ogbuji.net/tech/4suite/amara


A collection of Python tools for XML processing.  Not just tools
that happen to be written in Python, but tools built from the ground
up to use Python idioms and take advantage of the many advantages
of Python over other programming languages.

Amara builds on 4Suite, but whereas 4Suite focuses more on literal
implementation of XML standards in Python, Amara adds a much more
Pythonic face to these capabilities.

Amara provides tools you can trust to conform with XML standards
without losing the power and expressiveness characteristic of Python.

The components of Amara are:

* Bindery: a data binding tool (fancy way of saying it's a very Pythonic XML API)
* Scimitar: an implementation of the ISO Schematron schema language for XML, which converts Schematron files to Python scripts
* domtools: A set of tools to augment Python DOMs
* saxtools: A set of tools to make SAX easier to use in Python

There's a lot in Amara, but here are highlights:

Amara Bindery: XML as easy as py
--------------------------------

Bindery reads an XML document and it returns a data structure of
Python objects corresponding to the vocabulary used in the XML document,
for maximum clarity.

Bindery turns the document

    <monty>
      <python spam="eggs">What do you mean "bleh"</python>
      <python ministry="abuse">But I was looking for argument</python>
    </monty>

Becomes a data structure such that you can write: 

    binding.monty.python.spam

In order to get the value "eggs" (as a Python Unicode object) or 

    binding.monty.python[1]

In order to get the element object with the contents "But I was looking for argument". 

There are other such tools for Python, and what makes Bindery unique is
that it's driven by a very declarative rules-based system for binding
XML to the Python data.  You can register rules that are triggered by
XPattern expressions specialized binding behavior.  It includes XPath
support and is very efficient, using SAX to generate bindings.

See the user documentation, manual.html, for more details.

Scimitar: exceptional schema language for an exceptional programming language
-----------------------------------------------------------------------------

Scimitar is an implementation of ISO Schematron that compiles a Schematron
schema into a Python validator script.  You typically use scimitar in two
phases.  Say you have a schematron schema schema1.stron and you want to
validate multiple XML files against it, instance1.xml, instance2.xml,
instance3.xml.

First you run schema1.stron through the scimitar compiler script,
scimitar.py:

scimitar.py schema1.stron

A file, schema1-stron.py, is generated in the current working directory.
If you'd prefer a different location or file name, use the "-o" option.
The generated file is a validator script in Python.  It checks the
schematron rules specified in schema1.stron.

Run this validator on each XML file you wish to validate:

python schema1.py instance1.xml

The validation report is generated on standard output by default, or you
can use the "-o" option to redirect it to a file.

The validation report is an XML external parsed entity, a format much like
a well-formed XML document, but with some restrictions relaxed.

Amara DOM Tools: giving DOM a more Pythonic face
------------------------------------------------

Amara DOM Tools features pushdom, similar to xml.dom.pulldom, but easier
to use, and a function to return an XPath location for any DOM node.

Amara SAX Tools: SAX without the brain explosion
------------------------------------------------

Tenorsax (amara.saxtools.tenorsax) is a framework for "linerarizing" SAX logic
so it flows a bit more naturally, needing much less state machine wizardry.

License
-------

Amara is open source, provided under the 4Suite variant of the Apache
license.  See the file COPYING for details.

Installation
------------

Amara requires Python 2.4 or more recent and 4Suite-XML 1.0.2 or more
recent.  It supports setuptools and easy_install, so you can
just do the following:

easy_install amara

If this does not work you are probably not set up for easy_install and I
suggest you follow the simple instructions at

http://peak.telecommunity.com/DevCenter/EasyInstall

easy_install will automatically take care of installing dependencies for
you.  If you prefer not to use easy_install, grab a 4Suite-XML 1.0.2 package
and install that, then install the Amara package using the usual:

python setup.py install

Or a Windows installer, or other method.

Building documentation
----------------------

Most distributions/binary packages have documentation built in, but
If you want to build the documentation yourself, then as long as you do
not have setuptools installed, you can just do:

python setup.py -s config install

If you do have setuptools installed, set AMARA_FTSETUP=1 in the environment
before running the above.  If you do not want to use the default install paths
You can use the --prefix argument, for example:

python setup.py -s install --prefix=$WHERE_YOU_WANT_STUFF

Or just use the usual Python distutils config files:

http://docs.python.org/inst/config-syntax.html

