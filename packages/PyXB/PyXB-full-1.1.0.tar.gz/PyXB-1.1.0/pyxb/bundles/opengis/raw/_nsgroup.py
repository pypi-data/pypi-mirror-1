# ./pyxb/bundles/opengis/raw/_nsgroup.py
# PyXB bindings for NamespaceGroupModule
# NGM:31dc9d33ae09dae9cd9938ac948b7eee03f73812
# Incorporated namespaces:
#  http://www.isotc211.org/2005/gts gts
#  http://www.isotc211.org/2005/gsr gsr
#  http://www.isotc211.org/2005/gco gco
#  http://www.opengis.net/gml/3.2 gml
#  http://www.isotc211.org/2005/gss gss
#  http://www.isotc211.org/2005/gmd gmd

import pyxb
import pyxb.binding
import pyxb.utils.utility

# Unique identifier for bindings created at the same time
_GenerationUID = pyxb.utils.utility.UniqueIdentifier('urn:uuid:bad804a6-de0d-11de-a8dc-001cc05930fc')

# Import bindings for schemas in group
import pyxb.binding.datatypes
import pyxb.bundles.opengis.misc.xlinks

_Namespace_gco = pyxb.namespace.NamespaceForURI(u'http://www.isotc211.org/2005/gco', create_if_missing=True)
_Namespace_gco.configureCategories(['typeBinding', 'elementBinding'])
_Namespace_gmd = pyxb.namespace.NamespaceForURI(u'http://www.isotc211.org/2005/gmd', create_if_missing=True)
_Namespace_gmd.configureCategories(['typeBinding', 'elementBinding'])
_Namespace_gml = pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2', create_if_missing=True)
_Namespace_gml.configureCategories(['typeBinding', 'elementBinding'])
_Namespace_xlink = pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink', create_if_missing=True)
_Namespace_xlink.configureCategories(['typeBinding', 'elementBinding'])
_Namespace_gts = pyxb.namespace.NamespaceForURI(u'http://www.isotc211.org/2005/gts', create_if_missing=True)
_Namespace_gts.configureCategories(['typeBinding', 'elementBinding'])
_Namespace_gss = pyxb.namespace.NamespaceForURI(u'http://www.isotc211.org/2005/gss', create_if_missing=True)
_Namespace_gss.configureCategories(['typeBinding', 'elementBinding'])
_Namespace_gsr = pyxb.namespace.NamespaceForURI(u'http://www.isotc211.org/2005/gsr', create_if_missing=True)
_Namespace_gsr.configureCategories(['typeBinding', 'elementBinding'])

# Atomic SimpleTypeDefinition
class STD_ANON_1 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _Documentation = None
STD_ANON_1._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_1, enum_prefix=None)
STD_ANON_1.inapplicable = STD_ANON_1._CF_enumeration.addEnumeration(unicode_value=u'inapplicable')
STD_ANON_1.missing = STD_ANON_1._CF_enumeration.addEnumeration(unicode_value=u'missing')
STD_ANON_1.template = STD_ANON_1._CF_enumeration.addEnumeration(unicode_value=u'template')
STD_ANON_1.unknown = STD_ANON_1._CF_enumeration.addEnumeration(unicode_value=u'unknown')
STD_ANON_1.withheld = STD_ANON_1._CF_enumeration.addEnumeration(unicode_value=u'withheld')
STD_ANON_1._InitializeFacetMap(STD_ANON_1._CF_enumeration)

# Atomic SimpleTypeDefinition
class STD_ANON_2 (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = None
    _Documentation = None
STD_ANON_2._CF_pattern = pyxb.binding.facets.CF_pattern()
STD_ANON_2._CF_pattern.addPattern(pattern=u'other:\\w{2,}')
STD_ANON_2._InitializeFacetMap(STD_ANON_2._CF_pattern)

# Union SimpleTypeDefinition
# superclasses pyxb.binding.datatypes.anySimpleType
class NilReasonType (pyxb.binding.basis.STD_union):

    """gml:NilReasonType defines a content model that allows recording of an explanation for a void value or other exception.
gml:NilReasonType is a union of the following enumerated values:
-	inapplicable there is no value
-	missing the correct value is not readily available to the sender of this data. Furthermore, a correct value may not exist
-	template the value will be available later
-	unknown the correct value is not known to, and not computable by, the sender of this data. However, a correct value probably exists
-	withheld the value is not divulged
-	other:text other brief explanation, where text is a string of two or more characters with no included spaces
and
-	anyURI which should refer to a resource which describes the reason for the exception
A particular community may choose to assign more detailed semantics to the standard values provided. Alternatively, the URI method enables a specific or more complete explanation for the absence of a value to be provided elsewhere and indicated by-reference in an instance document.
gml:NilReasonType is used as a member of a union in a number of simple content types where it is necessary to permit a value from the NilReasonType union as an alternative to the primary type."""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'NilReasonType')
    _Documentation = u'gml:NilReasonType defines a content model that allows recording of an explanation for a void value or other exception.\ngml:NilReasonType is a union of the following enumerated values:\n-\tinapplicable there is no value\n-\tmissing the correct value is not readily available to the sender of this data. Furthermore, a correct value may not exist\n-\ttemplate the value will be available later\n-\tunknown the correct value is not known to, and not computable by, the sender of this data. However, a correct value probably exists\n-\twithheld the value is not divulged\n-\tother:text other brief explanation, where text is a string of two or more characters with no included spaces\nand\n-\tanyURI which should refer to a resource which describes the reason for the exception\nA particular community may choose to assign more detailed semantics to the standard values provided. Alternatively, the URI method enables a specific or more complete explanation for the absence of a value to be provided elsewhere and indicated by-reference in an instance document.\ngml:NilReasonType is used as a member of a union in a number of simple content types where it is necessary to permit a value from the NilReasonType union as an alternative to the primary type.'

    _MemberTypes = ( STD_ANON_1, STD_ANON_2, pyxb.binding.datatypes.anyURI, )
NilReasonType._CF_pattern = pyxb.binding.facets.CF_pattern()
NilReasonType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=NilReasonType)
NilReasonType.inapplicable = u'inapplicable'      # originally STD_ANON_1.inapplicable
NilReasonType.missing = u'missing'                # originally STD_ANON_1.missing
NilReasonType.template = u'template'              # originally STD_ANON_1.template
NilReasonType.unknown = u'unknown'                # originally STD_ANON_1.unknown
NilReasonType.withheld = u'withheld'              # originally STD_ANON_1.withheld
NilReasonType._InitializeFacetMap(NilReasonType._CF_pattern,
   NilReasonType._CF_enumeration)
_Namespace_gml.addCategoryObject('typeBinding', u'NilReasonType', NilReasonType)

# Atomic SimpleTypeDefinition
class SurfaceInterpolationType (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """gml:SurfaceInterpolationType is a list of codes that may be used to identify the interpolation mechanisms specified by an application schema."""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'SurfaceInterpolationType')
    _Documentation = u'gml:SurfaceInterpolationType is a list of codes that may be used to identify the interpolation mechanisms specified by an application schema.'
SurfaceInterpolationType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=SurfaceInterpolationType, enum_prefix=None)
SurfaceInterpolationType.none = SurfaceInterpolationType._CF_enumeration.addEnumeration(unicode_value=u'none')
SurfaceInterpolationType.planar = SurfaceInterpolationType._CF_enumeration.addEnumeration(unicode_value=u'planar')
SurfaceInterpolationType.spherical = SurfaceInterpolationType._CF_enumeration.addEnumeration(unicode_value=u'spherical')
SurfaceInterpolationType.elliptical = SurfaceInterpolationType._CF_enumeration.addEnumeration(unicode_value=u'elliptical')
SurfaceInterpolationType.conic = SurfaceInterpolationType._CF_enumeration.addEnumeration(unicode_value=u'conic')
SurfaceInterpolationType.tin = SurfaceInterpolationType._CF_enumeration.addEnumeration(unicode_value=u'tin')
SurfaceInterpolationType.parametricCurve = SurfaceInterpolationType._CF_enumeration.addEnumeration(unicode_value=u'parametricCurve')
SurfaceInterpolationType.polynomialSpline = SurfaceInterpolationType._CF_enumeration.addEnumeration(unicode_value=u'polynomialSpline')
SurfaceInterpolationType.rationalSpline = SurfaceInterpolationType._CF_enumeration.addEnumeration(unicode_value=u'rationalSpline')
SurfaceInterpolationType.triangulatedSpline = SurfaceInterpolationType._CF_enumeration.addEnumeration(unicode_value=u'triangulatedSpline')
SurfaceInterpolationType._InitializeFacetMap(SurfaceInterpolationType._CF_enumeration)
_Namespace_gml.addCategoryObject('typeBinding', u'SurfaceInterpolationType', SurfaceInterpolationType)

# Atomic SimpleTypeDefinition
class DegreeValueType (pyxb.binding.datatypes.nonNegativeInteger):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'DegreeValueType')
    _Documentation = ''
DegreeValueType._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=DegreeValueType, value=pyxb.binding.datatypes.nonNegativeInteger(359L))
DegreeValueType._InitializeFacetMap(DegreeValueType._CF_maxInclusive)
_Namespace_gml.addCategoryObject('typeBinding', u'DegreeValueType', DegreeValueType)

# Atomic SimpleTypeDefinition
class STD_ANON_3 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _Documentation = None
STD_ANON_3._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_3, enum_prefix=None)
STD_ANON_3.N = STD_ANON_3._CF_enumeration.addEnumeration(unicode_value=u'N')
STD_ANON_3.E = STD_ANON_3._CF_enumeration.addEnumeration(unicode_value=u'E')
STD_ANON_3.S = STD_ANON_3._CF_enumeration.addEnumeration(unicode_value=u'S')
STD_ANON_3.W = STD_ANON_3._CF_enumeration.addEnumeration(unicode_value=u'W')
STD_ANON_3.emptyString = STD_ANON_3._CF_enumeration.addEnumeration(unicode_value=u'+')
STD_ANON_3.emptyString_ = STD_ANON_3._CF_enumeration.addEnumeration(unicode_value=u'-')
STD_ANON_3._InitializeFacetMap(STD_ANON_3._CF_enumeration)

# Atomic SimpleTypeDefinition
class SignType (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """gml:SignType is a convenience type with values "+" (plus) and "-" (minus)."""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'SignType')
    _Documentation = u'gml:SignType is a convenience type with values "+" (plus) and "-" (minus).'
SignType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=SignType, enum_prefix=None)
SignType.emptyString = SignType._CF_enumeration.addEnumeration(unicode_value=u'-')
SignType.emptyString_ = SignType._CF_enumeration.addEnumeration(unicode_value=u'+')
SignType._InitializeFacetMap(SignType._CF_enumeration)
_Namespace_gml.addCategoryObject('typeBinding', u'SignType', SignType)

# Atomic SimpleTypeDefinition
class AggregationType (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'AggregationType')
    _Documentation = None
AggregationType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=AggregationType, enum_prefix=None)
AggregationType.set = AggregationType._CF_enumeration.addEnumeration(unicode_value=u'set')
AggregationType.bag = AggregationType._CF_enumeration.addEnumeration(unicode_value=u'bag')
AggregationType.sequence = AggregationType._CF_enumeration.addEnumeration(unicode_value=u'sequence')
AggregationType.array = AggregationType._CF_enumeration.addEnumeration(unicode_value=u'array')
AggregationType.record = AggregationType._CF_enumeration.addEnumeration(unicode_value=u'record')
AggregationType.table = AggregationType._CF_enumeration.addEnumeration(unicode_value=u'table')
AggregationType._InitializeFacetMap(AggregationType._CF_enumeration)
_Namespace_gml.addCategoryObject('typeBinding', u'AggregationType', AggregationType)

# Union SimpleTypeDefinition
# superclasses pyxb.binding.datatypes.anySimpleType
class doubleOrNilReason (pyxb.binding.basis.STD_union):

    """Extension to the respective XML Schema built-in simple type to allow a choice of either a value of the built-in simple type or a reason for a nil value."""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'doubleOrNilReason')
    _Documentation = u'Extension to the respective XML Schema built-in simple type to allow a choice of either a value of the built-in simple type or a reason for a nil value.'

    _MemberTypes = ( STD_ANON_1, STD_ANON_2, pyxb.binding.datatypes.double, pyxb.binding.datatypes.anyURI, )
doubleOrNilReason._CF_pattern = pyxb.binding.facets.CF_pattern()
doubleOrNilReason._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=doubleOrNilReason)
doubleOrNilReason.inapplicable = u'inapplicable'  # originally STD_ANON_1.inapplicable
doubleOrNilReason.missing = u'missing'            # originally STD_ANON_1.missing
doubleOrNilReason.template = u'template'          # originally STD_ANON_1.template
doubleOrNilReason.unknown = u'unknown'            # originally STD_ANON_1.unknown
doubleOrNilReason.withheld = u'withheld'          # originally STD_ANON_1.withheld
doubleOrNilReason._InitializeFacetMap(doubleOrNilReason._CF_pattern,
   doubleOrNilReason._CF_enumeration)
_Namespace_gml.addCategoryObject('typeBinding', u'doubleOrNilReason', doubleOrNilReason)

# List SimpleTypeDefinition
# superclasses pyxb.binding.datatypes.anySimpleType
class doubleOrNilReasonList (pyxb.binding.basis.STD_list):

    """A type for a list of values of the respective simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'doubleOrNilReasonList')
    _Documentation = u'A type for a list of values of the respective simple type.'

    _ItemType = doubleOrNilReason
doubleOrNilReasonList._InitializeFacetMap()
_Namespace_gml.addCategoryObject('typeBinding', u'doubleOrNilReasonList', doubleOrNilReasonList)

# List SimpleTypeDefinition
# superclasses doubleOrNilReasonList
class STD_ANON_4 (pyxb.binding.basis.STD_list):

    """Simple type that is a list of doubleOrNilReason."""

    _ExpandedName = None
    _Documentation = None

    _ItemType = doubleOrNilReason
STD_ANON_4._CF_length = pyxb.binding.facets.CF_length(value=pyxb.binding.datatypes.nonNegativeInteger(2L))
STD_ANON_4._InitializeFacetMap(STD_ANON_4._CF_length)

# List SimpleTypeDefinition
# superclasses pyxb.binding.datatypes.anySimpleType
class doubleList (pyxb.binding.basis.STD_list):

    """A type for a list of values of the respective simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'doubleList')
    _Documentation = u'A type for a list of values of the respective simple type.'

    _ItemType = pyxb.binding.datatypes.double
doubleList._InitializeFacetMap()
_Namespace_gml.addCategoryObject('typeBinding', u'doubleList', doubleList)

# List SimpleTypeDefinition
# superclasses pyxb.binding.datatypes.anySimpleType
class NCNameList (pyxb.binding.basis.STD_list):

    """A type for a list of values of the respective simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'NCNameList')
    _Documentation = u'A type for a list of values of the respective simple type.'

    _ItemType = pyxb.binding.datatypes.NCName
NCNameList._InitializeFacetMap()
_Namespace_gml.addCategoryObject('typeBinding', u'NCNameList', NCNameList)

# Union SimpleTypeDefinition
# superclasses pyxb.binding.datatypes.anySimpleType
class NameOrNilReason (pyxb.binding.basis.STD_union):

    """Extension to the respective XML Schema built-in simple type to allow a choice of either a value of the built-in simple type or a reason for a nil value."""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'NameOrNilReason')
    _Documentation = u'Extension to the respective XML Schema built-in simple type to allow a choice of either a value of the built-in simple type or a reason for a nil value.'

    _MemberTypes = ( STD_ANON_1, STD_ANON_2, pyxb.binding.datatypes.Name, pyxb.binding.datatypes.anyURI, )
NameOrNilReason._CF_pattern = pyxb.binding.facets.CF_pattern()
NameOrNilReason._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=NameOrNilReason)
NameOrNilReason.inapplicable = u'inapplicable'    # originally STD_ANON_1.inapplicable
NameOrNilReason.missing = u'missing'              # originally STD_ANON_1.missing
NameOrNilReason.template = u'template'            # originally STD_ANON_1.template
NameOrNilReason.unknown = u'unknown'              # originally STD_ANON_1.unknown
NameOrNilReason.withheld = u'withheld'            # originally STD_ANON_1.withheld
NameOrNilReason._InitializeFacetMap(NameOrNilReason._CF_pattern,
   NameOrNilReason._CF_enumeration)
_Namespace_gml.addCategoryObject('typeBinding', u'NameOrNilReason', NameOrNilReason)

# List SimpleTypeDefinition
# superclasses pyxb.binding.datatypes.anySimpleType
class NameOrNilReasonList (pyxb.binding.basis.STD_list):

    """A type for a list of values of the respective simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'NameOrNilReasonList')
    _Documentation = u'A type for a list of values of the respective simple type.'

    _ItemType = NameOrNilReason
NameOrNilReasonList._InitializeFacetMap()
_Namespace_gml.addCategoryObject('typeBinding', u'NameOrNilReasonList', NameOrNilReasonList)

# Atomic SimpleTypeDefinition
class UomSymbol (pyxb.binding.datatypes.string):

    """This type specifies a character string of length at least one, and restricted such that it must not contain any of the following characters: ":" (colon), " " (space), (newline), (carriage return), (tab). This allows values corresponding to familiar abbreviations, such as "kg", "m/s", etc. 
It is recommended that the symbol be an identifier for a unit of measure as specified in the "Unified Code of Units of Measure" (UCUM) (http://aurora.regenstrief.org/UCUM). This provides a set of symbols and a grammar for constructing identifiers for units of measure that are unique, and may be easily entered with a keyboard supporting the limited character set known as 7-bit ASCII. ISO 2955 formerly provided a specification with this scope, but was withdrawn in 2001. UCUM largely follows ISO 2955 with modifications to remove ambiguities and other problems."""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'UomSymbol')
    _Documentation = u'This type specifies a character string of length at least one, and restricted such that it must not contain any of the following characters: ":" (colon), " " (space), (newline), (carriage return), (tab). This allows values corresponding to familiar abbreviations, such as "kg", "m/s", etc. \nIt is recommended that the symbol be an identifier for a unit of measure as specified in the "Unified Code of Units of Measure" (UCUM) (http://aurora.regenstrief.org/UCUM). This provides a set of symbols and a grammar for constructing identifiers for units of measure that are unique, and may be easily entered with a keyboard supporting the limited character set known as 7-bit ASCII. ISO 2955 formerly provided a specification with this scope, but was withdrawn in 2001. UCUM largely follows ISO 2955 with modifications to remove ambiguities and other problems.'
UomSymbol._CF_pattern = pyxb.binding.facets.CF_pattern()
UomSymbol._CF_pattern.addPattern(pattern=u'[^: \\n\\r\\t]+')
UomSymbol._InitializeFacetMap(UomSymbol._CF_pattern)
_Namespace_gml.addCategoryObject('typeBinding', u'UomSymbol', UomSymbol)

# Atomic SimpleTypeDefinition
class UomURI (pyxb.binding.datatypes.anyURI):

    """This type specifies a URI, restricted such that it must start with one of the following sequences: "#", "./", "../", or a string of characters followed by a ":". These patterns ensure that the most common URI forms are supported, including absolute and relative URIs and URIs that are simple fragment identifiers, but prohibits certain forms of relative URI that could be mistaken for unit of measure symbol . 
NOTE	It is possible to re-write such a relative URI to conform to the restriction (e.g. "./m/s").
In an instance document, on elements of type gml:MeasureType the mandatory uom attribute shall carry a value corresponding to either 
-	a conventional unit of measure symbol,
-	a link to a definition of a unit of measure that does not have a conventional symbol, or when it is desired to indicate a precise or variant definition."""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'UomURI')
    _Documentation = u'This type specifies a URI, restricted such that it must start with one of the following sequences: "#", "./", "../", or a string of characters followed by a ":". These patterns ensure that the most common URI forms are supported, including absolute and relative URIs and URIs that are simple fragment identifiers, but prohibits certain forms of relative URI that could be mistaken for unit of measure symbol . \nNOTE\tIt is possible to re-write such a relative URI to conform to the restriction (e.g. "./m/s").\nIn an instance document, on elements of type gml:MeasureType the mandatory uom attribute shall carry a value corresponding to either \n-\ta conventional unit of measure symbol,\n-\ta link to a definition of a unit of measure that does not have a conventional symbol, or when it is desired to indicate a precise or variant definition.'
UomURI._CF_pattern = pyxb.binding.facets.CF_pattern()
UomURI._CF_pattern.addPattern(pattern=u'([a-zA-Z][a-zA-Z0-9\\-\\+\\.]*:|\\.\\./|\\./|#).*')
UomURI._InitializeFacetMap(UomURI._CF_pattern)
_Namespace_gml.addCategoryObject('typeBinding', u'UomURI', UomURI)

# Union SimpleTypeDefinition
# superclasses pyxb.binding.datatypes.anySimpleType
class UomIdentifier (pyxb.binding.basis.STD_union):

    """The simple type gml:UomIdentifer defines the syntax and value space of the unit of measure identifier."""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'UomIdentifier')
    _Documentation = u'The simple type gml:UomIdentifer defines the syntax and value space of the unit of measure identifier.'

    _MemberTypes = ( UomSymbol, UomURI, )
UomIdentifier._CF_pattern = pyxb.binding.facets.CF_pattern()
UomIdentifier._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=UomIdentifier)
UomIdentifier._InitializeFacetMap(UomIdentifier._CF_pattern,
   UomIdentifier._CF_enumeration)
_Namespace_gml.addCategoryObject('typeBinding', u'UomIdentifier', UomIdentifier)

# Atomic SimpleTypeDefinition
class ArcMinutesType (pyxb.binding.datatypes.nonNegativeInteger):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'ArcMinutesType')
    _Documentation = ''
ArcMinutesType._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=ArcMinutesType, value=pyxb.binding.datatypes.nonNegativeInteger(59L))
ArcMinutesType._InitializeFacetMap(ArcMinutesType._CF_maxInclusive)
_Namespace_gml.addCategoryObject('typeBinding', u'ArcMinutesType', ArcMinutesType)

# Atomic SimpleTypeDefinition
class DecimalMinutesType (pyxb.binding.datatypes.decimal):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'DecimalMinutesType')
    _Documentation = ''
DecimalMinutesType._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=DecimalMinutesType, value=pyxb.binding.datatypes.decimal(0.0))
DecimalMinutesType._CF_maxExclusive = pyxb.binding.facets.CF_maxExclusive(value_datatype=pyxb.binding.datatypes.decimal, value=pyxb.binding.datatypes.anySimpleType(u'60.00'))
DecimalMinutesType._InitializeFacetMap(DecimalMinutesType._CF_minInclusive,
   DecimalMinutesType._CF_maxExclusive)
_Namespace_gml.addCategoryObject('typeBinding', u'DecimalMinutesType', DecimalMinutesType)

# List SimpleTypeDefinition
# superclasses pyxb.binding.datatypes.anySimpleType
class booleanList (pyxb.binding.basis.STD_list):

    """A type for a list of values of the respective simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'booleanList')
    _Documentation = u'A type for a list of values of the respective simple type.'

    _ItemType = pyxb.binding.datatypes.boolean
booleanList._InitializeFacetMap()
_Namespace_gml.addCategoryObject('typeBinding', u'booleanList', booleanList)

# List SimpleTypeDefinition
# superclasses pyxb.binding.datatypes.anySimpleType
class NameList (pyxb.binding.basis.STD_list):

    """A type for a list of values of the respective simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'NameList')
    _Documentation = u'A type for a list of values of the respective simple type.'

    _ItemType = pyxb.binding.datatypes.Name
NameList._InitializeFacetMap()
_Namespace_gml.addCategoryObject('typeBinding', u'NameList', NameList)

# Atomic SimpleTypeDefinition
class MD_PixelOrientationCode_Type (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_PixelOrientationCode_Type')
    _Documentation = None
MD_PixelOrientationCode_Type._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=MD_PixelOrientationCode_Type, enum_prefix=None)
MD_PixelOrientationCode_Type.center = MD_PixelOrientationCode_Type._CF_enumeration.addEnumeration(unicode_value=u'center')
MD_PixelOrientationCode_Type.lowerLeft = MD_PixelOrientationCode_Type._CF_enumeration.addEnumeration(unicode_value=u'lowerLeft')
MD_PixelOrientationCode_Type.lowerRight = MD_PixelOrientationCode_Type._CF_enumeration.addEnumeration(unicode_value=u'lowerRight')
MD_PixelOrientationCode_Type.upperRight = MD_PixelOrientationCode_Type._CF_enumeration.addEnumeration(unicode_value=u'upperRight')
MD_PixelOrientationCode_Type.upperLeft = MD_PixelOrientationCode_Type._CF_enumeration.addEnumeration(unicode_value=u'upperLeft')
MD_PixelOrientationCode_Type._InitializeFacetMap(MD_PixelOrientationCode_Type._CF_enumeration)
_Namespace_gmd.addCategoryObject('typeBinding', u'MD_PixelOrientationCode_Type', MD_PixelOrientationCode_Type)

# Atomic SimpleTypeDefinition
class CurveInterpolationType (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """gml:CurveInterpolationType is a list of codes that may be used to identify the interpolation mechanisms specified by an application schema."""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'CurveInterpolationType')
    _Documentation = u'gml:CurveInterpolationType is a list of codes that may be used to identify the interpolation mechanisms specified by an application schema.'
CurveInterpolationType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=CurveInterpolationType, enum_prefix=None)
CurveInterpolationType.linear = CurveInterpolationType._CF_enumeration.addEnumeration(unicode_value=u'linear')
CurveInterpolationType.geodesic = CurveInterpolationType._CF_enumeration.addEnumeration(unicode_value=u'geodesic')
CurveInterpolationType.circularArc3Points = CurveInterpolationType._CF_enumeration.addEnumeration(unicode_value=u'circularArc3Points')
CurveInterpolationType.circularArc2PointWithBulge = CurveInterpolationType._CF_enumeration.addEnumeration(unicode_value=u'circularArc2PointWithBulge')
CurveInterpolationType.circularArcCenterPointWithRadius = CurveInterpolationType._CF_enumeration.addEnumeration(unicode_value=u'circularArcCenterPointWithRadius')
CurveInterpolationType.elliptical = CurveInterpolationType._CF_enumeration.addEnumeration(unicode_value=u'elliptical')
CurveInterpolationType.clothoid = CurveInterpolationType._CF_enumeration.addEnumeration(unicode_value=u'clothoid')
CurveInterpolationType.conic = CurveInterpolationType._CF_enumeration.addEnumeration(unicode_value=u'conic')
CurveInterpolationType.polynomialSpline = CurveInterpolationType._CF_enumeration.addEnumeration(unicode_value=u'polynomialSpline')
CurveInterpolationType.cubicSpline = CurveInterpolationType._CF_enumeration.addEnumeration(unicode_value=u'cubicSpline')
CurveInterpolationType.rationalSpline = CurveInterpolationType._CF_enumeration.addEnumeration(unicode_value=u'rationalSpline')
CurveInterpolationType._InitializeFacetMap(CurveInterpolationType._CF_enumeration)
_Namespace_gml.addCategoryObject('typeBinding', u'CurveInterpolationType', CurveInterpolationType)

# Union SimpleTypeDefinition
# superclasses pyxb.binding.datatypes.anySimpleType
class NilReasonEnumeration (pyxb.binding.basis.STD_union):

    """Simple type that is a union of STD_ANON_1, STD_ANON_2."""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'NilReasonEnumeration')
    _Documentation = None

    _MemberTypes = ( STD_ANON_1, STD_ANON_2, )
NilReasonEnumeration._CF_pattern = pyxb.binding.facets.CF_pattern()
NilReasonEnumeration._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=NilReasonEnumeration)
NilReasonEnumeration.inapplicable = u'inapplicable'# originally STD_ANON_1.inapplicable
NilReasonEnumeration.missing = u'missing'         # originally STD_ANON_1.missing
NilReasonEnumeration.template = u'template'       # originally STD_ANON_1.template
NilReasonEnumeration.unknown = u'unknown'         # originally STD_ANON_1.unknown
NilReasonEnumeration.withheld = u'withheld'       # originally STD_ANON_1.withheld
NilReasonEnumeration._InitializeFacetMap(NilReasonEnumeration._CF_pattern,
   NilReasonEnumeration._CF_enumeration)
_Namespace_gml.addCategoryObject('typeBinding', u'NilReasonEnumeration', NilReasonEnumeration)

# Union SimpleTypeDefinition
# superclasses pyxb.binding.datatypes.anySimpleType
class integerOrNilReason (pyxb.binding.basis.STD_union):

    """Extension to the respective XML Schema built-in simple type to allow a choice of either a value of the built-in simple type or a reason for a nil value."""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'integerOrNilReason')
    _Documentation = u'Extension to the respective XML Schema built-in simple type to allow a choice of either a value of the built-in simple type or a reason for a nil value.'

    _MemberTypes = ( STD_ANON_1, STD_ANON_2, pyxb.binding.datatypes.integer, pyxb.binding.datatypes.anyURI, )
integerOrNilReason._CF_pattern = pyxb.binding.facets.CF_pattern()
integerOrNilReason._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=integerOrNilReason)
integerOrNilReason.inapplicable = u'inapplicable' # originally STD_ANON_1.inapplicable
integerOrNilReason.missing = u'missing'           # originally STD_ANON_1.missing
integerOrNilReason.template = u'template'         # originally STD_ANON_1.template
integerOrNilReason.unknown = u'unknown'           # originally STD_ANON_1.unknown
integerOrNilReason.withheld = u'withheld'         # originally STD_ANON_1.withheld
integerOrNilReason._InitializeFacetMap(integerOrNilReason._CF_pattern,
   integerOrNilReason._CF_enumeration)
_Namespace_gml.addCategoryObject('typeBinding', u'integerOrNilReason', integerOrNilReason)

# List SimpleTypeDefinition
# superclasses pyxb.binding.datatypes.anySimpleType
class integerOrNilReasonList (pyxb.binding.basis.STD_list):

    """A type for a list of values of the respective simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'integerOrNilReasonList')
    _Documentation = u'A type for a list of values of the respective simple type.'

    _ItemType = integerOrNilReason
integerOrNilReasonList._InitializeFacetMap()
_Namespace_gml.addCategoryObject('typeBinding', u'integerOrNilReasonList', integerOrNilReasonList)

# List SimpleTypeDefinition
# superclasses pyxb.binding.datatypes.anySimpleType
class integerList (pyxb.binding.basis.STD_list):

    """A type for a list of values of the respective simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'integerList')
    _Documentation = u'A type for a list of values of the respective simple type.'

    _ItemType = pyxb.binding.datatypes.integer
integerList._InitializeFacetMap()
_Namespace_gml.addCategoryObject('typeBinding', u'integerList', integerList)

# List SimpleTypeDefinition
# superclasses doubleList
class STD_ANON_5 (pyxb.binding.basis.STD_list):

    """Simple type that is a list of pyxb.binding.datatypes.double."""

    _ExpandedName = None
    _Documentation = None

    _ItemType = pyxb.binding.datatypes.double
STD_ANON_5._InitializeFacetMap()

# Atomic SimpleTypeDefinition
class SuccessionType (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'SuccessionType')
    _Documentation = ''
SuccessionType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=SuccessionType, enum_prefix=None)
SuccessionType.substitution = SuccessionType._CF_enumeration.addEnumeration(unicode_value=u'substitution')
SuccessionType.division = SuccessionType._CF_enumeration.addEnumeration(unicode_value=u'division')
SuccessionType.fusion = SuccessionType._CF_enumeration.addEnumeration(unicode_value=u'fusion')
SuccessionType.initiation = SuccessionType._CF_enumeration.addEnumeration(unicode_value=u'initiation')
SuccessionType._InitializeFacetMap(SuccessionType._CF_enumeration)
_Namespace_gml.addCategoryObject('typeBinding', u'SuccessionType', SuccessionType)

# Atomic SimpleTypeDefinition
class SequenceRuleEnumeration (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'SequenceRuleEnumeration')
    _Documentation = None
SequenceRuleEnumeration._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=SequenceRuleEnumeration, enum_prefix=None)
SequenceRuleEnumeration.Linear = SequenceRuleEnumeration._CF_enumeration.addEnumeration(unicode_value=u'Linear')
SequenceRuleEnumeration.Boustrophedonic = SequenceRuleEnumeration._CF_enumeration.addEnumeration(unicode_value=u'Boustrophedonic')
SequenceRuleEnumeration.Cantor_diagonal = SequenceRuleEnumeration._CF_enumeration.addEnumeration(unicode_value=u'Cantor-diagonal')
SequenceRuleEnumeration.Spiral = SequenceRuleEnumeration._CF_enumeration.addEnumeration(unicode_value=u'Spiral')
SequenceRuleEnumeration.Morton = SequenceRuleEnumeration._CF_enumeration.addEnumeration(unicode_value=u'Morton')
SequenceRuleEnumeration.Hilbert = SequenceRuleEnumeration._CF_enumeration.addEnumeration(unicode_value=u'Hilbert')
SequenceRuleEnumeration._InitializeFacetMap(SequenceRuleEnumeration._CF_enumeration)
_Namespace_gml.addCategoryObject('typeBinding', u'SequenceRuleEnumeration', SequenceRuleEnumeration)

# Atomic SimpleTypeDefinition
class AxisDirection (pyxb.binding.datatypes.string):

    """The value of a gml:AxisDirection indicates the incrementation order to be used on an axis of the grid."""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'AxisDirection')
    _Documentation = u'The value of a gml:AxisDirection indicates the incrementation order to be used on an axis of the grid.'
AxisDirection._CF_pattern = pyxb.binding.facets.CF_pattern()
AxisDirection._CF_pattern.addPattern(pattern=u'[\\+\\-][1-9][0-9]*')
AxisDirection._InitializeFacetMap(AxisDirection._CF_pattern)
_Namespace_gml.addCategoryObject('typeBinding', u'AxisDirection', AxisDirection)

# List SimpleTypeDefinition
# superclasses pyxb.binding.datatypes.anySimpleType
class AxisDirectionList (pyxb.binding.basis.STD_list):

    """The different values in a gml:AxisDirectionList indicate the incrementation order to be used on all axes of the grid. Each axis shall be mentioned once and only once."""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'AxisDirectionList')
    _Documentation = u'The different values in a gml:AxisDirectionList indicate the incrementation order to be used on all axes of the grid. Each axis shall be mentioned once and only once.'

    _ItemType = AxisDirection
AxisDirectionList._InitializeFacetMap()
_Namespace_gml.addCategoryObject('typeBinding', u'AxisDirectionList', AxisDirectionList)

# Atomic SimpleTypeDefinition
class IncrementOrder (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'IncrementOrder')
    _Documentation = ''
IncrementOrder._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=IncrementOrder, enum_prefix=None)
IncrementOrder.xy = IncrementOrder._CF_enumeration.addEnumeration(unicode_value=u'+x+y')
IncrementOrder.yx = IncrementOrder._CF_enumeration.addEnumeration(unicode_value=u'+y+x')
IncrementOrder.x_y = IncrementOrder._CF_enumeration.addEnumeration(unicode_value=u'+x-y')
IncrementOrder.x_y_ = IncrementOrder._CF_enumeration.addEnumeration(unicode_value=u'-x-y')
IncrementOrder._InitializeFacetMap(IncrementOrder._CF_enumeration)
_Namespace_gml.addCategoryObject('typeBinding', u'IncrementOrder', IncrementOrder)

# Atomic SimpleTypeDefinition
class MD_TopicCategoryCode_Type (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """High-level geospatial data thematic classification to assist in the grouping and search of available geospatial datasets"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_TopicCategoryCode_Type')
    _Documentation = u'High-level geospatial data thematic classification to assist in the grouping and search of available geospatial datasets'
MD_TopicCategoryCode_Type._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=MD_TopicCategoryCode_Type, enum_prefix=None)
MD_TopicCategoryCode_Type.farming = MD_TopicCategoryCode_Type._CF_enumeration.addEnumeration(unicode_value=u'farming')
MD_TopicCategoryCode_Type.biota = MD_TopicCategoryCode_Type._CF_enumeration.addEnumeration(unicode_value=u'biota')
MD_TopicCategoryCode_Type.boundaries = MD_TopicCategoryCode_Type._CF_enumeration.addEnumeration(unicode_value=u'boundaries')
MD_TopicCategoryCode_Type.climatologyMeteorologyAtmosphere = MD_TopicCategoryCode_Type._CF_enumeration.addEnumeration(unicode_value=u'climatologyMeteorologyAtmosphere')
MD_TopicCategoryCode_Type.economy = MD_TopicCategoryCode_Type._CF_enumeration.addEnumeration(unicode_value=u'economy')
MD_TopicCategoryCode_Type.elevation = MD_TopicCategoryCode_Type._CF_enumeration.addEnumeration(unicode_value=u'elevation')
MD_TopicCategoryCode_Type.environment = MD_TopicCategoryCode_Type._CF_enumeration.addEnumeration(unicode_value=u'environment')
MD_TopicCategoryCode_Type.geoscientificInformation = MD_TopicCategoryCode_Type._CF_enumeration.addEnumeration(unicode_value=u'geoscientificInformation')
MD_TopicCategoryCode_Type.health = MD_TopicCategoryCode_Type._CF_enumeration.addEnumeration(unicode_value=u'health')
MD_TopicCategoryCode_Type.imageryBaseMapsEarthCover = MD_TopicCategoryCode_Type._CF_enumeration.addEnumeration(unicode_value=u'imageryBaseMapsEarthCover')
MD_TopicCategoryCode_Type.intelligenceMilitary = MD_TopicCategoryCode_Type._CF_enumeration.addEnumeration(unicode_value=u'intelligenceMilitary')
MD_TopicCategoryCode_Type.inlandWaters = MD_TopicCategoryCode_Type._CF_enumeration.addEnumeration(unicode_value=u'inlandWaters')
MD_TopicCategoryCode_Type.location = MD_TopicCategoryCode_Type._CF_enumeration.addEnumeration(unicode_value=u'location')
MD_TopicCategoryCode_Type.oceans = MD_TopicCategoryCode_Type._CF_enumeration.addEnumeration(unicode_value=u'oceans')
MD_TopicCategoryCode_Type.planningCadastre = MD_TopicCategoryCode_Type._CF_enumeration.addEnumeration(unicode_value=u'planningCadastre')
MD_TopicCategoryCode_Type.society = MD_TopicCategoryCode_Type._CF_enumeration.addEnumeration(unicode_value=u'society')
MD_TopicCategoryCode_Type.structure = MD_TopicCategoryCode_Type._CF_enumeration.addEnumeration(unicode_value=u'structure')
MD_TopicCategoryCode_Type.transportation = MD_TopicCategoryCode_Type._CF_enumeration.addEnumeration(unicode_value=u'transportation')
MD_TopicCategoryCode_Type.utilitiesCommunication = MD_TopicCategoryCode_Type._CF_enumeration.addEnumeration(unicode_value=u'utilitiesCommunication')
MD_TopicCategoryCode_Type._InitializeFacetMap(MD_TopicCategoryCode_Type._CF_enumeration)
_Namespace_gmd.addCategoryObject('typeBinding', u'MD_TopicCategoryCode_Type', MD_TopicCategoryCode_Type)

# Atomic SimpleTypeDefinition
class ArcSecondsType (pyxb.binding.datatypes.decimal):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'ArcSecondsType')
    _Documentation = ''
ArcSecondsType._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=ArcSecondsType, value=pyxb.binding.datatypes.decimal(0.0))
ArcSecondsType._CF_maxExclusive = pyxb.binding.facets.CF_maxExclusive(value_datatype=pyxb.binding.datatypes.decimal, value=pyxb.binding.datatypes.anySimpleType(u'60.00'))
ArcSecondsType._InitializeFacetMap(ArcSecondsType._CF_minInclusive,
   ArcSecondsType._CF_maxExclusive)
_Namespace_gml.addCategoryObject('typeBinding', u'ArcSecondsType', ArcSecondsType)

# Atomic SimpleTypeDefinition
class MD_ObligationCode_Type (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_ObligationCode_Type')
    _Documentation = None
MD_ObligationCode_Type._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=MD_ObligationCode_Type, enum_prefix=None)
MD_ObligationCode_Type.mandatory = MD_ObligationCode_Type._CF_enumeration.addEnumeration(unicode_value=u'mandatory')
MD_ObligationCode_Type.optional = MD_ObligationCode_Type._CF_enumeration.addEnumeration(unicode_value=u'optional')
MD_ObligationCode_Type.conditional = MD_ObligationCode_Type._CF_enumeration.addEnumeration(unicode_value=u'conditional')
MD_ObligationCode_Type._InitializeFacetMap(MD_ObligationCode_Type._CF_enumeration)
_Namespace_gmd.addCategoryObject('typeBinding', u'MD_ObligationCode_Type', MD_ObligationCode_Type)

# List SimpleTypeDefinition
# superclasses NameOrNilReasonList
class STD_ANON_6 (pyxb.binding.basis.STD_list):

    """Simple type that is a list of NameOrNilReason."""

    _ExpandedName = None
    _Documentation = None

    _ItemType = NameOrNilReason
STD_ANON_6._CF_length = pyxb.binding.facets.CF_length(value=pyxb.binding.datatypes.nonNegativeInteger(2L))
STD_ANON_6._InitializeFacetMap(STD_ANON_6._CF_length)

# Union SimpleTypeDefinition
# superclasses pyxb.binding.datatypes.anySimpleType
class stringOrNilReason (pyxb.binding.basis.STD_union):

    """Extension to the respective XML Schema built-in simple type to allow a choice of either a value of the built-in simple type or a reason for a nil value."""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'stringOrNilReason')
    _Documentation = u'Extension to the respective XML Schema built-in simple type to allow a choice of either a value of the built-in simple type or a reason for a nil value.'

    _MemberTypes = ( STD_ANON_1, STD_ANON_2, pyxb.binding.datatypes.string, pyxb.binding.datatypes.anyURI, )
stringOrNilReason._CF_pattern = pyxb.binding.facets.CF_pattern()
stringOrNilReason._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=stringOrNilReason)
stringOrNilReason.inapplicable = u'inapplicable'  # originally STD_ANON_1.inapplicable
stringOrNilReason.missing = u'missing'            # originally STD_ANON_1.missing
stringOrNilReason.template = u'template'          # originally STD_ANON_1.template
stringOrNilReason.unknown = u'unknown'            # originally STD_ANON_1.unknown
stringOrNilReason.withheld = u'withheld'          # originally STD_ANON_1.withheld
stringOrNilReason._InitializeFacetMap(stringOrNilReason._CF_pattern,
   stringOrNilReason._CF_enumeration)
_Namespace_gml.addCategoryObject('typeBinding', u'stringOrNilReason', stringOrNilReason)

# Atomic SimpleTypeDefinition
class KnotTypesType (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """This enumeration type specifies values for the knots' type (see ISO 19107:2003, 6.4.25)."""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'KnotTypesType')
    _Documentation = u"This enumeration type specifies values for the knots' type (see ISO 19107:2003, 6.4.25)."
KnotTypesType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=KnotTypesType, enum_prefix=None)
KnotTypesType.uniform = KnotTypesType._CF_enumeration.addEnumeration(unicode_value=u'uniform')
KnotTypesType.quasiUniform = KnotTypesType._CF_enumeration.addEnumeration(unicode_value=u'quasiUniform')
KnotTypesType.piecewiseBezier = KnotTypesType._CF_enumeration.addEnumeration(unicode_value=u'piecewiseBezier')
KnotTypesType._InitializeFacetMap(KnotTypesType._CF_enumeration)
_Namespace_gml.addCategoryObject('typeBinding', u'KnotTypesType', KnotTypesType)

# Atomic SimpleTypeDefinition
class STD_ANON_7 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _Documentation = None
STD_ANON_7._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_7, enum_prefix=None)
STD_ANON_7.Before = STD_ANON_7._CF_enumeration.addEnumeration(unicode_value=u'Before')
STD_ANON_7.After = STD_ANON_7._CF_enumeration.addEnumeration(unicode_value=u'After')
STD_ANON_7.Begins = STD_ANON_7._CF_enumeration.addEnumeration(unicode_value=u'Begins')
STD_ANON_7.Ends = STD_ANON_7._CF_enumeration.addEnumeration(unicode_value=u'Ends')
STD_ANON_7.During = STD_ANON_7._CF_enumeration.addEnumeration(unicode_value=u'During')
STD_ANON_7.Equals = STD_ANON_7._CF_enumeration.addEnumeration(unicode_value=u'Equals')
STD_ANON_7.Contains = STD_ANON_7._CF_enumeration.addEnumeration(unicode_value=u'Contains')
STD_ANON_7.Overlaps = STD_ANON_7._CF_enumeration.addEnumeration(unicode_value=u'Overlaps')
STD_ANON_7.Meets = STD_ANON_7._CF_enumeration.addEnumeration(unicode_value=u'Meets')
STD_ANON_7.OverlappedBy = STD_ANON_7._CF_enumeration.addEnumeration(unicode_value=u'OverlappedBy')
STD_ANON_7.MetBy = STD_ANON_7._CF_enumeration.addEnumeration(unicode_value=u'MetBy')
STD_ANON_7.BegunBy = STD_ANON_7._CF_enumeration.addEnumeration(unicode_value=u'BegunBy')
STD_ANON_7.EndedBy = STD_ANON_7._CF_enumeration.addEnumeration(unicode_value=u'EndedBy')
STD_ANON_7._InitializeFacetMap(STD_ANON_7._CF_enumeration)

# List SimpleTypeDefinition
# superclasses integerOrNilReasonList
class CountExtentType (pyxb.binding.basis.STD_list):

    """Simple type that is a list of integerOrNilReason."""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'CountExtentType')
    _Documentation = None

    _ItemType = integerOrNilReason
CountExtentType._CF_length = pyxb.binding.facets.CF_length(value=pyxb.binding.datatypes.nonNegativeInteger(2L))
CountExtentType._InitializeFacetMap(CountExtentType._CF_length)
_Namespace_gml.addCategoryObject('typeBinding', u'CountExtentType', CountExtentType)

# Union SimpleTypeDefinition
# superclasses pyxb.binding.datatypes.anySimpleType
class TimePositionUnion (pyxb.binding.basis.STD_union):

    """The simple type gml:TimePositionUnion is a union of XML Schema simple types which instantiate the subtypes for temporal position described in ISO 19108.
 An ordinal era may be referenced via URI.  A decimal value may be used to indicate the distance from the scale origin .  time is used for a position that recurs daily (see ISO 19108:2002 5.4.4.2).
 Finally, calendar and clock forms that support the representation of time in systems based on years, months, days, hours, minutes and seconds, in a notation following ISO 8601, are assembled by gml:CalDate"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'TimePositionUnion')
    _Documentation = u'The simple type gml:TimePositionUnion is a union of XML Schema simple types which instantiate the subtypes for temporal position described in ISO 19108.\n An ordinal era may be referenced via URI.  A decimal value may be used to indicate the distance from the scale origin .  time is used for a position that recurs daily (see ISO 19108:2002 5.4.4.2).\n Finally, calendar and clock forms that support the representation of time in systems based on years, months, days, hours, minutes and seconds, in a notation following ISO 8601, are assembled by gml:CalDate'

    _MemberTypes = ( pyxb.binding.datatypes.date, pyxb.binding.datatypes.gYearMonth, pyxb.binding.datatypes.gYear, pyxb.binding.datatypes.time, pyxb.binding.datatypes.dateTime, pyxb.binding.datatypes.anyURI, pyxb.binding.datatypes.decimal, )
TimePositionUnion._CF_pattern = pyxb.binding.facets.CF_pattern()
TimePositionUnion._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=TimePositionUnion)
TimePositionUnion._InitializeFacetMap(TimePositionUnion._CF_pattern,
   TimePositionUnion._CF_enumeration)
_Namespace_gml.addCategoryObject('typeBinding', u'TimePositionUnion', TimePositionUnion)

# Atomic SimpleTypeDefinition
class TimeIndeterminateValueType (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """These values are interpreted as follows: 
-	"unknown" indicates that no specific value for temporal position is provided.
-	"now" indicates that the specified value shall be replaced with the current temporal position whenever the value is accessed.
-	"before" indicates that the actual temporal position is unknown, but it is known to be before the specified value.
-	"after" indicates that the actual temporal position is unknown, but it is known to be after the specified value.
A value for indeterminatePosition may 
-	be used either alone, or 
-	qualify a specific value for temporal position."""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'TimeIndeterminateValueType')
    _Documentation = u'These values are interpreted as follows: \n-\t"unknown" indicates that no specific value for temporal position is provided.\n-\t"now" indicates that the specified value shall be replaced with the current temporal position whenever the value is accessed.\n-\t"before" indicates that the actual temporal position is unknown, but it is known to be before the specified value.\n-\t"after" indicates that the actual temporal position is unknown, but it is known to be after the specified value.\nA value for indeterminatePosition may \n-\tbe used either alone, or \n-\tqualify a specific value for temporal position.'
TimeIndeterminateValueType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=TimeIndeterminateValueType, enum_prefix=None)
TimeIndeterminateValueType.after = TimeIndeterminateValueType._CF_enumeration.addEnumeration(unicode_value=u'after')
TimeIndeterminateValueType.before = TimeIndeterminateValueType._CF_enumeration.addEnumeration(unicode_value=u'before')
TimeIndeterminateValueType.now = TimeIndeterminateValueType._CF_enumeration.addEnumeration(unicode_value=u'now')
TimeIndeterminateValueType.unknown = TimeIndeterminateValueType._CF_enumeration.addEnumeration(unicode_value=u'unknown')
TimeIndeterminateValueType._InitializeFacetMap(TimeIndeterminateValueType._CF_enumeration)
_Namespace_gml.addCategoryObject('typeBinding', u'TimeIndeterminateValueType', TimeIndeterminateValueType)

# Union SimpleTypeDefinition
# superclasses pyxb.binding.datatypes.anySimpleType
class CalDate (pyxb.binding.basis.STD_union):

    """Simple type that is a union of pyxb.binding.datatypes.date, pyxb.binding.datatypes.gYearMonth, pyxb.binding.datatypes.gYear."""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'CalDate')
    _Documentation = None

    _MemberTypes = ( pyxb.binding.datatypes.date, pyxb.binding.datatypes.gYearMonth, pyxb.binding.datatypes.gYear, )
CalDate._CF_pattern = pyxb.binding.facets.CF_pattern()
CalDate._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=CalDate)
CalDate._InitializeFacetMap(CalDate._CF_pattern,
   CalDate._CF_enumeration)
_Namespace_gml.addCategoryObject('typeBinding', u'CalDate', CalDate)

# Atomic SimpleTypeDefinition
class STD_ANON_8 (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = None
    _Documentation = None
STD_ANON_8._InitializeFacetMap()

# Union SimpleTypeDefinition
# superclasses pyxb.binding.datatypes.anySimpleType
class Date_Type (pyxb.binding.basis.STD_union):

    """Simple type that is a union of pyxb.binding.datatypes.date, pyxb.binding.datatypes.gYearMonth, pyxb.binding.datatypes.gYear."""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gco, u'Date_Type')
    _Documentation = None

    _MemberTypes = ( pyxb.binding.datatypes.date, pyxb.binding.datatypes.gYearMonth, pyxb.binding.datatypes.gYear, )
Date_Type._CF_pattern = pyxb.binding.facets.CF_pattern()
Date_Type._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=Date_Type)
Date_Type._InitializeFacetMap(Date_Type._CF_pattern,
   Date_Type._CF_enumeration)
_Namespace_gco.addCategoryObject('typeBinding', u'Date_Type', Date_Type)

# Atomic SimpleTypeDefinition
class CompassPointEnumeration (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """These directions are necessarily approximate, giving direction with a precision of 22.5&#176;. It is thus generally unnecessary to specify the reference frame, though this may be detailed in the definition of a GML application language."""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'CompassPointEnumeration')
    _Documentation = u'These directions are necessarily approximate, giving direction with a precision of 22.5\xb0. It is thus generally unnecessary to specify the reference frame, though this may be detailed in the definition of a GML application language.'
CompassPointEnumeration._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=CompassPointEnumeration, enum_prefix=None)
CompassPointEnumeration.N = CompassPointEnumeration._CF_enumeration.addEnumeration(unicode_value=u'N')
CompassPointEnumeration.NNE = CompassPointEnumeration._CF_enumeration.addEnumeration(unicode_value=u'NNE')
CompassPointEnumeration.NE = CompassPointEnumeration._CF_enumeration.addEnumeration(unicode_value=u'NE')
CompassPointEnumeration.ENE = CompassPointEnumeration._CF_enumeration.addEnumeration(unicode_value=u'ENE')
CompassPointEnumeration.E = CompassPointEnumeration._CF_enumeration.addEnumeration(unicode_value=u'E')
CompassPointEnumeration.ESE = CompassPointEnumeration._CF_enumeration.addEnumeration(unicode_value=u'ESE')
CompassPointEnumeration.SE = CompassPointEnumeration._CF_enumeration.addEnumeration(unicode_value=u'SE')
CompassPointEnumeration.SSE = CompassPointEnumeration._CF_enumeration.addEnumeration(unicode_value=u'SSE')
CompassPointEnumeration.S = CompassPointEnumeration._CF_enumeration.addEnumeration(unicode_value=u'S')
CompassPointEnumeration.SSW = CompassPointEnumeration._CF_enumeration.addEnumeration(unicode_value=u'SSW')
CompassPointEnumeration.SW = CompassPointEnumeration._CF_enumeration.addEnumeration(unicode_value=u'SW')
CompassPointEnumeration.WSW = CompassPointEnumeration._CF_enumeration.addEnumeration(unicode_value=u'WSW')
CompassPointEnumeration.W = CompassPointEnumeration._CF_enumeration.addEnumeration(unicode_value=u'W')
CompassPointEnumeration.WNW = CompassPointEnumeration._CF_enumeration.addEnumeration(unicode_value=u'WNW')
CompassPointEnumeration.NW = CompassPointEnumeration._CF_enumeration.addEnumeration(unicode_value=u'NW')
CompassPointEnumeration.NNW = CompassPointEnumeration._CF_enumeration.addEnumeration(unicode_value=u'NNW')
CompassPointEnumeration._InitializeFacetMap(CompassPointEnumeration._CF_enumeration)
_Namespace_gml.addCategoryObject('typeBinding', u'CompassPointEnumeration', CompassPointEnumeration)

# Atomic SimpleTypeDefinition
class STD_ANON_9 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _Documentation = None
STD_ANON_9._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_9, enum_prefix=None)
STD_ANON_9.year = STD_ANON_9._CF_enumeration.addEnumeration(unicode_value=u'year')
STD_ANON_9.month = STD_ANON_9._CF_enumeration.addEnumeration(unicode_value=u'month')
STD_ANON_9.day = STD_ANON_9._CF_enumeration.addEnumeration(unicode_value=u'day')
STD_ANON_9.hour = STD_ANON_9._CF_enumeration.addEnumeration(unicode_value=u'hour')
STD_ANON_9.minute = STD_ANON_9._CF_enumeration.addEnumeration(unicode_value=u'minute')
STD_ANON_9.second = STD_ANON_9._CF_enumeration.addEnumeration(unicode_value=u'second')
STD_ANON_9._InitializeFacetMap(STD_ANON_9._CF_enumeration)

# Atomic SimpleTypeDefinition
class STD_ANON_10 (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = None
    _Documentation = None
STD_ANON_10._CF_pattern = pyxb.binding.facets.CF_pattern()
STD_ANON_10._CF_pattern.addPattern(pattern=u'other:\\w{2,}')
STD_ANON_10._InitializeFacetMap(STD_ANON_10._CF_pattern)

# Union SimpleTypeDefinition
# superclasses pyxb.binding.datatypes.anySimpleType
class TimeUnitType (pyxb.binding.basis.STD_union):

    """Simple type that is a union of STD_ANON_9, STD_ANON_10."""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'TimeUnitType')
    _Documentation = None

    _MemberTypes = ( STD_ANON_9, STD_ANON_10, )
TimeUnitType._CF_pattern = pyxb.binding.facets.CF_pattern()
TimeUnitType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=TimeUnitType)
TimeUnitType.year = u'year'                       # originally STD_ANON_9.year
TimeUnitType.month = u'month'                     # originally STD_ANON_9.month
TimeUnitType.day = u'day'                         # originally STD_ANON_9.day
TimeUnitType.hour = u'hour'                       # originally STD_ANON_9.hour
TimeUnitType.minute = u'minute'                   # originally STD_ANON_9.minute
TimeUnitType.second = u'second'                   # originally STD_ANON_9.second
TimeUnitType._InitializeFacetMap(TimeUnitType._CF_pattern,
   TimeUnitType._CF_enumeration)
_Namespace_gml.addCategoryObject('typeBinding', u'TimeUnitType', TimeUnitType)

# Union SimpleTypeDefinition
# superclasses pyxb.binding.datatypes.anySimpleType
class booleanOrNilReason (pyxb.binding.basis.STD_union):

    """Extension to the respective XML Schema built-in simple type to allow a choice of either a value of the built-in simple type or a reason for a nil value."""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'booleanOrNilReason')
    _Documentation = u'Extension to the respective XML Schema built-in simple type to allow a choice of either a value of the built-in simple type or a reason for a nil value.'

    _MemberTypes = ( STD_ANON_1, STD_ANON_2, pyxb.binding.datatypes.boolean, pyxb.binding.datatypes.anyURI, )
booleanOrNilReason._CF_pattern = pyxb.binding.facets.CF_pattern()
booleanOrNilReason._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=booleanOrNilReason)
booleanOrNilReason.inapplicable = u'inapplicable' # originally STD_ANON_1.inapplicable
booleanOrNilReason.missing = u'missing'           # originally STD_ANON_1.missing
booleanOrNilReason.template = u'template'         # originally STD_ANON_1.template
booleanOrNilReason.unknown = u'unknown'           # originally STD_ANON_1.unknown
booleanOrNilReason.withheld = u'withheld'         # originally STD_ANON_1.withheld
booleanOrNilReason._InitializeFacetMap(booleanOrNilReason._CF_pattern,
   booleanOrNilReason._CF_enumeration)
_Namespace_gml.addCategoryObject('typeBinding', u'booleanOrNilReason', booleanOrNilReason)

# List SimpleTypeDefinition
# superclasses pyxb.binding.datatypes.anySimpleType
class booleanOrNilReasonList (pyxb.binding.basis.STD_list):

    """A type for a list of values of the respective simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'booleanOrNilReasonList')
    _Documentation = u'A type for a list of values of the respective simple type.'

    _ItemType = booleanOrNilReason
booleanOrNilReasonList._InitializeFacetMap()
_Namespace_gml.addCategoryObject('typeBinding', u'booleanOrNilReasonList', booleanOrNilReasonList)

# List SimpleTypeDefinition
# superclasses pyxb.binding.datatypes.anySimpleType
class QNameList (pyxb.binding.basis.STD_list):

    """A type for a list of values of the respective simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'QNameList')
    _Documentation = u'A type for a list of values of the respective simple type.'

    _ItemType = pyxb.binding.datatypes.QName
QNameList._InitializeFacetMap()
_Namespace_gml.addCategoryObject('typeBinding', u'QNameList', QNameList)

# Complex type CharacterString_PropertyType with content type ELEMENT_ONLY
class CharacterString_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gco, u'CharacterString_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gco}CharacterString uses Python identifier CharacterString
    __CharacterString = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'CharacterString'), 'CharacterString', '__httpwww_isotc211_org2005gco_CharacterString_PropertyType_httpwww_isotc211_org2005gcoCharacterString', False)

    
    CharacterString = property(__CharacterString.value, __CharacterString.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gco_CharacterString_PropertyType_httpwww_isotc211_org2005gconilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)


    _ElementMap = {
        __CharacterString.name() : __CharacterString
    }
    _AttributeMap = {
        __nilReason.name() : __nilReason
    }
_Namespace_gco.addCategoryObject('typeBinding', u'CharacterString_PropertyType', CharacterString_PropertyType)


# Complex type Real_PropertyType with content type ELEMENT_ONLY
class Real_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gco, u'Real_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gco}Real uses Python identifier Real
    __Real = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'Real'), 'Real', '__httpwww_isotc211_org2005gco_Real_PropertyType_httpwww_isotc211_org2005gcoReal', False)

    
    Real = property(__Real.value, __Real.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gco_Real_PropertyType_httpwww_isotc211_org2005gconilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)


    _ElementMap = {
        __Real.name() : __Real
    }
    _AttributeMap = {
        __nilReason.name() : __nilReason
    }
_Namespace_gco.addCategoryObject('typeBinding', u'Real_PropertyType', Real_PropertyType)


# Complex type AbstractObject_Type with content type EMPTY
class AbstractObject_Type (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = True
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gco, u'AbstractObject_Type')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'id'), 'id', '__httpwww_isotc211_org2005gco_AbstractObject_Type_id', pyxb.binding.datatypes.ID)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute uuid uses Python identifier uuid
    __uuid = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uuid'), 'uuid', '__httpwww_isotc211_org2005gco_AbstractObject_Type_uuid', pyxb.binding.datatypes.string)
    
    uuid = property(__uuid.value, __uuid.set, None, None)


    _ElementMap = {
        
    }
    _AttributeMap = {
        __id.name() : __id,
        __uuid.name() : __uuid
    }
_Namespace_gco.addCategoryObject('typeBinding', u'AbstractObject_Type', AbstractObject_Type)


# Complex type AbstractMD_Identification_Type with content type ELEMENT_ONLY
class AbstractMD_Identification_Type (AbstractObject_Type):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = True
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'AbstractMD_Identification_Type')
    # Base type is AbstractObject_Type
    
    # Element {http://www.isotc211.org/2005/gmd}resourceMaintenance uses Python identifier resourceMaintenance
    __resourceMaintenance = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'resourceMaintenance'), 'resourceMaintenance', '__httpwww_isotc211_org2005gmd_AbstractMD_Identification_Type_httpwww_isotc211_org2005gmdresourceMaintenance', True)

    
    resourceMaintenance = property(__resourceMaintenance.value, __resourceMaintenance.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}pointOfContact uses Python identifier pointOfContact
    __pointOfContact = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'pointOfContact'), 'pointOfContact', '__httpwww_isotc211_org2005gmd_AbstractMD_Identification_Type_httpwww_isotc211_org2005gmdpointOfContact', True)

    
    pointOfContact = property(__pointOfContact.value, __pointOfContact.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}purpose uses Python identifier purpose
    __purpose = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'purpose'), 'purpose', '__httpwww_isotc211_org2005gmd_AbstractMD_Identification_Type_httpwww_isotc211_org2005gmdpurpose', False)

    
    purpose = property(__purpose.value, __purpose.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}resourceFormat uses Python identifier resourceFormat
    __resourceFormat = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'resourceFormat'), 'resourceFormat', '__httpwww_isotc211_org2005gmd_AbstractMD_Identification_Type_httpwww_isotc211_org2005gmdresourceFormat', True)

    
    resourceFormat = property(__resourceFormat.value, __resourceFormat.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}graphicOverview uses Python identifier graphicOverview
    __graphicOverview = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'graphicOverview'), 'graphicOverview', '__httpwww_isotc211_org2005gmd_AbstractMD_Identification_Type_httpwww_isotc211_org2005gmdgraphicOverview', True)

    
    graphicOverview = property(__graphicOverview.value, __graphicOverview.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}citation uses Python identifier citation
    __citation = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'citation'), 'citation', '__httpwww_isotc211_org2005gmd_AbstractMD_Identification_Type_httpwww_isotc211_org2005gmdcitation', False)

    
    citation = property(__citation.value, __citation.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}resourceConstraints uses Python identifier resourceConstraints
    __resourceConstraints = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'resourceConstraints'), 'resourceConstraints', '__httpwww_isotc211_org2005gmd_AbstractMD_Identification_Type_httpwww_isotc211_org2005gmdresourceConstraints', True)

    
    resourceConstraints = property(__resourceConstraints.value, __resourceConstraints.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}abstract uses Python identifier abstract
    __abstract = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'abstract'), 'abstract', '__httpwww_isotc211_org2005gmd_AbstractMD_Identification_Type_httpwww_isotc211_org2005gmdabstract', False)

    
    abstract = property(__abstract.value, __abstract.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}resourceSpecificUsage uses Python identifier resourceSpecificUsage
    __resourceSpecificUsage = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'resourceSpecificUsage'), 'resourceSpecificUsage', '__httpwww_isotc211_org2005gmd_AbstractMD_Identification_Type_httpwww_isotc211_org2005gmdresourceSpecificUsage', True)

    
    resourceSpecificUsage = property(__resourceSpecificUsage.value, __resourceSpecificUsage.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}aggregationInfo uses Python identifier aggregationInfo
    __aggregationInfo = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'aggregationInfo'), 'aggregationInfo', '__httpwww_isotc211_org2005gmd_AbstractMD_Identification_Type_httpwww_isotc211_org2005gmdaggregationInfo', True)

    
    aggregationInfo = property(__aggregationInfo.value, __aggregationInfo.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}credit uses Python identifier credit
    __credit = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'credit'), 'credit', '__httpwww_isotc211_org2005gmd_AbstractMD_Identification_Type_httpwww_isotc211_org2005gmdcredit', True)

    
    credit = property(__credit.value, __credit.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}descriptiveKeywords uses Python identifier descriptiveKeywords
    __descriptiveKeywords = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'descriptiveKeywords'), 'descriptiveKeywords', '__httpwww_isotc211_org2005gmd_AbstractMD_Identification_Type_httpwww_isotc211_org2005gmddescriptiveKeywords', True)

    
    descriptiveKeywords = property(__descriptiveKeywords.value, __descriptiveKeywords.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}status uses Python identifier status
    __status = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'status'), 'status', '__httpwww_isotc211_org2005gmd_AbstractMD_Identification_Type_httpwww_isotc211_org2005gmdstatus', True)

    
    status = property(__status.value, __status.set, None, None)

    
    # Attribute id inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type
    
    # Attribute uuid inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type

    _ElementMap = AbstractObject_Type._ElementMap.copy()
    _ElementMap.update({
        __resourceMaintenance.name() : __resourceMaintenance,
        __pointOfContact.name() : __pointOfContact,
        __purpose.name() : __purpose,
        __resourceFormat.name() : __resourceFormat,
        __graphicOverview.name() : __graphicOverview,
        __citation.name() : __citation,
        __resourceConstraints.name() : __resourceConstraints,
        __abstract.name() : __abstract,
        __resourceSpecificUsage.name() : __resourceSpecificUsage,
        __aggregationInfo.name() : __aggregationInfo,
        __credit.name() : __credit,
        __descriptiveKeywords.name() : __descriptiveKeywords,
        __status.name() : __status
    })
    _AttributeMap = AbstractObject_Type._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gmd.addCategoryObject('typeBinding', u'AbstractMD_Identification_Type', AbstractMD_Identification_Type)


# Complex type MD_DataIdentification_Type with content type ELEMENT_ONLY
class MD_DataIdentification_Type (AbstractMD_Identification_Type):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_DataIdentification_Type')
    # Base type is AbstractMD_Identification_Type
    
    # Element pointOfContact ({http://www.isotc211.org/2005/gmd}pointOfContact) inherited from {http://www.isotc211.org/2005/gmd}AbstractMD_Identification_Type
    
    # Element purpose ({http://www.isotc211.org/2005/gmd}purpose) inherited from {http://www.isotc211.org/2005/gmd}AbstractMD_Identification_Type
    
    # Element {http://www.isotc211.org/2005/gmd}characterSet uses Python identifier characterSet
    __characterSet = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'characterSet'), 'characterSet', '__httpwww_isotc211_org2005gmd_MD_DataIdentification_Type_httpwww_isotc211_org2005gmdcharacterSet', True)

    
    characterSet = property(__characterSet.value, __characterSet.set, None, None)

    
    # Element resourceMaintenance ({http://www.isotc211.org/2005/gmd}resourceMaintenance) inherited from {http://www.isotc211.org/2005/gmd}AbstractMD_Identification_Type
    
    # Element {http://www.isotc211.org/2005/gmd}topicCategory uses Python identifier topicCategory
    __topicCategory = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'topicCategory'), 'topicCategory', '__httpwww_isotc211_org2005gmd_MD_DataIdentification_Type_httpwww_isotc211_org2005gmdtopicCategory', True)

    
    topicCategory = property(__topicCategory.value, __topicCategory.set, None, None)

    
    # Element credit ({http://www.isotc211.org/2005/gmd}credit) inherited from {http://www.isotc211.org/2005/gmd}AbstractMD_Identification_Type
    
    # Element {http://www.isotc211.org/2005/gmd}extent uses Python identifier extent
    __extent = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'extent'), 'extent', '__httpwww_isotc211_org2005gmd_MD_DataIdentification_Type_httpwww_isotc211_org2005gmdextent', True)

    
    extent = property(__extent.value, __extent.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}environmentDescription uses Python identifier environmentDescription
    __environmentDescription = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'environmentDescription'), 'environmentDescription', '__httpwww_isotc211_org2005gmd_MD_DataIdentification_Type_httpwww_isotc211_org2005gmdenvironmentDescription', False)

    
    environmentDescription = property(__environmentDescription.value, __environmentDescription.set, None, None)

    
    # Element abstract ({http://www.isotc211.org/2005/gmd}abstract) inherited from {http://www.isotc211.org/2005/gmd}AbstractMD_Identification_Type
    
    # Element resourceFormat ({http://www.isotc211.org/2005/gmd}resourceFormat) inherited from {http://www.isotc211.org/2005/gmd}AbstractMD_Identification_Type
    
    # Element {http://www.isotc211.org/2005/gmd}language uses Python identifier language
    __language = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'language'), 'language', '__httpwww_isotc211_org2005gmd_MD_DataIdentification_Type_httpwww_isotc211_org2005gmdlanguage', True)

    
    language = property(__language.value, __language.set, None, None)

    
    # Element descriptiveKeywords ({http://www.isotc211.org/2005/gmd}descriptiveKeywords) inherited from {http://www.isotc211.org/2005/gmd}AbstractMD_Identification_Type
    
    # Element {http://www.isotc211.org/2005/gmd}supplementalInformation uses Python identifier supplementalInformation
    __supplementalInformation = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'supplementalInformation'), 'supplementalInformation', '__httpwww_isotc211_org2005gmd_MD_DataIdentification_Type_httpwww_isotc211_org2005gmdsupplementalInformation', False)

    
    supplementalInformation = property(__supplementalInformation.value, __supplementalInformation.set, None, None)

    
    # Element graphicOverview ({http://www.isotc211.org/2005/gmd}graphicOverview) inherited from {http://www.isotc211.org/2005/gmd}AbstractMD_Identification_Type
    
    # Element resourceSpecificUsage ({http://www.isotc211.org/2005/gmd}resourceSpecificUsage) inherited from {http://www.isotc211.org/2005/gmd}AbstractMD_Identification_Type
    
    # Element {http://www.isotc211.org/2005/gmd}spatialRepresentationType uses Python identifier spatialRepresentationType
    __spatialRepresentationType = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'spatialRepresentationType'), 'spatialRepresentationType', '__httpwww_isotc211_org2005gmd_MD_DataIdentification_Type_httpwww_isotc211_org2005gmdspatialRepresentationType', True)

    
    spatialRepresentationType = property(__spatialRepresentationType.value, __spatialRepresentationType.set, None, None)

    
    # Element aggregationInfo ({http://www.isotc211.org/2005/gmd}aggregationInfo) inherited from {http://www.isotc211.org/2005/gmd}AbstractMD_Identification_Type
    
    # Element resourceConstraints ({http://www.isotc211.org/2005/gmd}resourceConstraints) inherited from {http://www.isotc211.org/2005/gmd}AbstractMD_Identification_Type
    
    # Element {http://www.isotc211.org/2005/gmd}spatialResolution uses Python identifier spatialResolution
    __spatialResolution = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'spatialResolution'), 'spatialResolution', '__httpwww_isotc211_org2005gmd_MD_DataIdentification_Type_httpwww_isotc211_org2005gmdspatialResolution', True)

    
    spatialResolution = property(__spatialResolution.value, __spatialResolution.set, None, None)

    
    # Element citation ({http://www.isotc211.org/2005/gmd}citation) inherited from {http://www.isotc211.org/2005/gmd}AbstractMD_Identification_Type
    
    # Element status ({http://www.isotc211.org/2005/gmd}status) inherited from {http://www.isotc211.org/2005/gmd}AbstractMD_Identification_Type
    
    # Attribute id inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type
    
    # Attribute uuid inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type

    _ElementMap = AbstractMD_Identification_Type._ElementMap.copy()
    _ElementMap.update({
        __characterSet.name() : __characterSet,
        __topicCategory.name() : __topicCategory,
        __extent.name() : __extent,
        __environmentDescription.name() : __environmentDescription,
        __language.name() : __language,
        __supplementalInformation.name() : __supplementalInformation,
        __spatialRepresentationType.name() : __spatialRepresentationType,
        __spatialResolution.name() : __spatialResolution
    })
    _AttributeMap = AbstractMD_Identification_Type._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gmd.addCategoryObject('typeBinding', u'MD_DataIdentification_Type', MD_DataIdentification_Type)


# Complex type CI_Contact_Type with content type ELEMENT_ONLY
class CI_Contact_Type (AbstractObject_Type):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'CI_Contact_Type')
    # Base type is AbstractObject_Type
    
    # Element {http://www.isotc211.org/2005/gmd}contactInstructions uses Python identifier contactInstructions
    __contactInstructions = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'contactInstructions'), 'contactInstructions', '__httpwww_isotc211_org2005gmd_CI_Contact_Type_httpwww_isotc211_org2005gmdcontactInstructions', False)

    
    contactInstructions = property(__contactInstructions.value, __contactInstructions.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}phone uses Python identifier phone
    __phone = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'phone'), 'phone', '__httpwww_isotc211_org2005gmd_CI_Contact_Type_httpwww_isotc211_org2005gmdphone', False)

    
    phone = property(__phone.value, __phone.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}onlineResource uses Python identifier onlineResource
    __onlineResource = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'onlineResource'), 'onlineResource', '__httpwww_isotc211_org2005gmd_CI_Contact_Type_httpwww_isotc211_org2005gmdonlineResource', False)

    
    onlineResource = property(__onlineResource.value, __onlineResource.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}hoursOfService uses Python identifier hoursOfService
    __hoursOfService = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'hoursOfService'), 'hoursOfService', '__httpwww_isotc211_org2005gmd_CI_Contact_Type_httpwww_isotc211_org2005gmdhoursOfService', False)

    
    hoursOfService = property(__hoursOfService.value, __hoursOfService.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}address uses Python identifier address
    __address = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'address'), 'address', '__httpwww_isotc211_org2005gmd_CI_Contact_Type_httpwww_isotc211_org2005gmdaddress', False)

    
    address = property(__address.value, __address.set, None, None)

    
    # Attribute id inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type
    
    # Attribute uuid inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type

    _ElementMap = AbstractObject_Type._ElementMap.copy()
    _ElementMap.update({
        __contactInstructions.name() : __contactInstructions,
        __phone.name() : __phone,
        __onlineResource.name() : __onlineResource,
        __hoursOfService.name() : __hoursOfService,
        __address.name() : __address
    })
    _AttributeMap = AbstractObject_Type._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gmd.addCategoryObject('typeBinding', u'CI_Contact_Type', CI_Contact_Type)


# Complex type AbstractSurfacePatchType with content type EMPTY
class AbstractSurfacePatchType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = True
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractSurfacePatchType')
    # Base type is pyxb.binding.datatypes.anyType

    _ElementMap = {
        
    }
    _AttributeMap = {
        
    }
_Namespace_gml.addCategoryObject('typeBinding', u'AbstractSurfacePatchType', AbstractSurfacePatchType)


# Complex type TriangleType with content type ELEMENT_ONLY
class TriangleType (AbstractSurfacePatchType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'TriangleType')
    # Base type is AbstractSurfacePatchType
    
    # Element {http://www.opengis.net/gml/3.2}exterior uses Python identifier exterior
    __exterior = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'exterior'), 'exterior', '__httpwww_opengis_netgml3_2_TriangleType_httpwww_opengis_netgml3_2exterior', False)

    
    exterior = property(__exterior.value, __exterior.set, None, u'A boundary of a surface consists of a number of rings. In the normal 2D case, one of these rings is distinguished as being the exterior boundary. In a general manifold this is not always possible, in which case all boundaries shall be listed as interior boundaries, and the exterior will be empty.')

    
    # Attribute interpolation uses Python identifier interpolation
    __interpolation = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'interpolation'), 'interpolation', '__httpwww_opengis_netgml3_2_TriangleType_interpolation', SurfaceInterpolationType, fixed=True, unicode_default=u'planar')
    
    interpolation = property(__interpolation.value, __interpolation.set, None, None)


    _ElementMap = AbstractSurfacePatchType._ElementMap.copy()
    _ElementMap.update({
        __exterior.name() : __exterior
    })
    _AttributeMap = AbstractSurfacePatchType._AttributeMap.copy()
    _AttributeMap.update({
        __interpolation.name() : __interpolation
    })
_Namespace_gml.addCategoryObject('typeBinding', u'TriangleType', TriangleType)


# Complex type DirectionPropertyType with content type ELEMENT_ONLY
class DirectionPropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'DirectionPropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.opengis.net/gml/3.2}DirectionVector uses Python identifier DirectionVector
    __DirectionVector = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'DirectionVector'), 'DirectionVector', '__httpwww_opengis_netgml3_2_DirectionPropertyType_httpwww_opengis_netgml3_2DirectionVector', False)

    
    DirectionVector = property(__DirectionVector.value, __DirectionVector.set, None, None)

    
    # Element {http://www.opengis.net/gml/3.2}DirectionDescription uses Python identifier DirectionDescription
    __DirectionDescription = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'DirectionDescription'), 'DirectionDescription', '__httpwww_opengis_netgml3_2_DirectionPropertyType_httpwww_opengis_netgml3_2DirectionDescription', False)

    
    DirectionDescription = property(__DirectionDescription.value, __DirectionDescription.set, None, None)

    
    # Element {http://www.opengis.net/gml/3.2}CompassPoint uses Python identifier CompassPoint
    __CompassPoint = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'CompassPoint'), 'CompassPoint', '__httpwww_opengis_netgml3_2_DirectionPropertyType_httpwww_opengis_netgml3_2CompassPoint', False)

    
    CompassPoint = property(__CompassPoint.value, __CompassPoint.set, None, None)

    
    # Element {http://www.opengis.net/gml/3.2}DirectionKeyword uses Python identifier DirectionKeyword
    __DirectionKeyword = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'DirectionKeyword'), 'DirectionKeyword', '__httpwww_opengis_netgml3_2_DirectionPropertyType_httpwww_opengis_netgml3_2DirectionKeyword', False)

    
    DirectionKeyword = property(__DirectionKeyword.value, __DirectionKeyword.set, None, None)

    
    # Element {http://www.opengis.net/gml/3.2}DirectionString uses Python identifier DirectionString
    __DirectionString = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'DirectionString'), 'DirectionString', '__httpwww_opengis_netgml3_2_DirectionPropertyType_httpwww_opengis_netgml3_2DirectionString', False)

    
    DirectionString = property(__DirectionString.value, __DirectionString.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_opengis_netgml3_2_DirectionPropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_opengis_netgml3_2_DirectionPropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_opengis_netgml3_2_DirectionPropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_opengis_netgml3_2_DirectionPropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'nilReason'), 'nilReason', '__httpwww_opengis_netgml3_2_DirectionPropertyType_nilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_opengis_netgml3_2_DirectionPropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute owns uses Python identifier owns
    __owns = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'owns'), 'owns', '__httpwww_opengis_netgml3_2_DirectionPropertyType_owns', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    owns = property(__owns.value, __owns.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_opengis_netgml3_2_DirectionPropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_opengis_netgml3_2_DirectionPropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.opengis.net/gml/3.2}remoteSchema uses Python identifier remoteSchema
    __remoteSchema = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'remoteSchema'), 'remoteSchema', '__httpwww_opengis_netgml3_2_DirectionPropertyType_httpwww_opengis_netgml3_2remoteSchema', pyxb.binding.datatypes.anyURI)
    
    remoteSchema = property(__remoteSchema.value, __remoteSchema.set, None, u'')


    _ElementMap = {
        __DirectionVector.name() : __DirectionVector,
        __DirectionDescription.name() : __DirectionDescription,
        __CompassPoint.name() : __CompassPoint,
        __DirectionKeyword.name() : __DirectionKeyword,
        __DirectionString.name() : __DirectionString
    }
    _AttributeMap = {
        __role.name() : __role,
        __type.name() : __type,
        __arcrole.name() : __arcrole,
        __title.name() : __title,
        __nilReason.name() : __nilReason,
        __show.name() : __show,
        __owns.name() : __owns,
        __actuate.name() : __actuate,
        __href.name() : __href,
        __remoteSchema.name() : __remoteSchema
    }
_Namespace_gml.addCategoryObject('typeBinding', u'DirectionPropertyType', DirectionPropertyType)


# Complex type DegreesType with content type SIMPLE
class DegreesType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = DegreeValueType
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'DegreesType')
    # Base type is DegreeValueType
    
    # Attribute direction uses Python identifier direction
    __direction = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'direction'), 'direction', '__httpwww_opengis_netgml3_2_DegreesType_direction', STD_ANON_3)
    
    direction = property(__direction.value, __direction.set, None, None)


    _ElementMap = {
        
    }
    _AttributeMap = {
        __direction.name() : __direction
    }
_Namespace_gml.addCategoryObject('typeBinding', u'DegreesType', DegreesType)


# Complex type ReferenceType with content type EMPTY
class ReferenceType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'ReferenceType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute {http://www.opengis.net/gml/3.2}remoteSchema uses Python identifier remoteSchema
    __remoteSchema = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'remoteSchema'), 'remoteSchema', '__httpwww_opengis_netgml3_2_ReferenceType_httpwww_opengis_netgml3_2remoteSchema', pyxb.binding.datatypes.anyURI)
    
    remoteSchema = property(__remoteSchema.value, __remoteSchema.set, None, u'')

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_opengis_netgml3_2_ReferenceType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_opengis_netgml3_2_ReferenceType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute owns uses Python identifier owns
    __owns = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'owns'), 'owns', '__httpwww_opengis_netgml3_2_ReferenceType_owns', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    owns = property(__owns.value, __owns.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_opengis_netgml3_2_ReferenceType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_opengis_netgml3_2_ReferenceType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'nilReason'), 'nilReason', '__httpwww_opengis_netgml3_2_ReferenceType_nilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_opengis_netgml3_2_ReferenceType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_opengis_netgml3_2_ReferenceType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_opengis_netgml3_2_ReferenceType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)


    _ElementMap = {
        
    }
    _AttributeMap = {
        __remoteSchema.name() : __remoteSchema,
        __role.name() : __role,
        __show.name() : __show,
        __owns.name() : __owns,
        __arcrole.name() : __arcrole,
        __actuate.name() : __actuate,
        __nilReason.name() : __nilReason,
        __href.name() : __href,
        __type.name() : __type,
        __title.name() : __title
    }
_Namespace_gml.addCategoryObject('typeBinding', u'ReferenceType', ReferenceType)


# Complex type SolidArrayPropertyType with content type ELEMENT_ONLY
class SolidArrayPropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'SolidArrayPropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.opengis.net/gml/3.2}AbstractSolid uses Python identifier AbstractSolid
    __AbstractSolid = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractSolid'), 'AbstractSolid', '__httpwww_opengis_netgml3_2_SolidArrayPropertyType_httpwww_opengis_netgml3_2AbstractSolid', True)

    
    AbstractSolid = property(__AbstractSolid.value, __AbstractSolid.set, None, u'The AbstractSolid element is the abstract head of the substituition group for all (continuous) solid elements.')

    
    # Attribute owns uses Python identifier owns
    __owns = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'owns'), 'owns', '__httpwww_opengis_netgml3_2_SolidArrayPropertyType_owns', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    owns = property(__owns.value, __owns.set, None, None)


    _ElementMap = {
        __AbstractSolid.name() : __AbstractSolid
    }
    _AttributeMap = {
        __owns.name() : __owns
    }
_Namespace_gml.addCategoryObject('typeBinding', u'SolidArrayPropertyType', SolidArrayPropertyType)


# Complex type GeneralTransformationPropertyType with content type ELEMENT_ONLY
class GeneralTransformationPropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'GeneralTransformationPropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.opengis.net/gml/3.2}AbstractGeneralTransformation uses Python identifier AbstractGeneralTransformation
    __AbstractGeneralTransformation = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractGeneralTransformation'), 'AbstractGeneralTransformation', '__httpwww_opengis_netgml3_2_GeneralTransformationPropertyType_httpwww_opengis_netgml3_2AbstractGeneralTransformation', False)

    
    AbstractGeneralTransformation = property(__AbstractGeneralTransformation.value, __AbstractGeneralTransformation.set, None, u'gml:AbstractGeneralTransformation is an abstract operation on coordinates that usually includes a change of Datum. The parameters of a coordinate transformation are empirically derived from data containing the coordinates of a series of points in both coordinate reference systems. This computational process is usually "over-determined", allowing derivation of error (or accuracy) estimates for the transformation. Also, the stochastic nature of the parameters may result in multiple (different) versions of the same coordinate transformation. The operationVersion, sourceCRS, and targetCRS proeprty elements are mandatory in a coordinate transformation.\nThis abstract complex type is expected to be extended for well-known operation methods with many Transformation instances, in Application Schemas that define operation-method-specialized value element names and contents. This transformation uses an operation method with associated parameter values. However, operation methods and parameter values are directly associated with concrete subtypes, not with this abstract type. All concrete types derived from this type shall extend this type to include a "usesMethod" element that references one "OperationMethod" element. Similarly, all concrete types derived from this type shall extend this type to include one or more elements each named "uses...Value" that each use the type of an element substitutable for the "AbstractGeneralParameterValue" element.')

    
    # Attribute {http://www.opengis.net/gml/3.2}remoteSchema uses Python identifier remoteSchema
    __remoteSchema = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'remoteSchema'), 'remoteSchema', '__httpwww_opengis_netgml3_2_GeneralTransformationPropertyType_httpwww_opengis_netgml3_2remoteSchema', pyxb.binding.datatypes.anyURI)
    
    remoteSchema = property(__remoteSchema.value, __remoteSchema.set, None, u'')

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_opengis_netgml3_2_GeneralTransformationPropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_opengis_netgml3_2_GeneralTransformationPropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_opengis_netgml3_2_GeneralTransformationPropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_opengis_netgml3_2_GeneralTransformationPropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'nilReason'), 'nilReason', '__httpwww_opengis_netgml3_2_GeneralTransformationPropertyType_nilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_opengis_netgml3_2_GeneralTransformationPropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_opengis_netgml3_2_GeneralTransformationPropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_opengis_netgml3_2_GeneralTransformationPropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")


    _ElementMap = {
        __AbstractGeneralTransformation.name() : __AbstractGeneralTransformation
    }
    _AttributeMap = {
        __remoteSchema.name() : __remoteSchema,
        __href.name() : __href,
        __arcrole.name() : __arcrole,
        __type.name() : __type,
        __title.name() : __title,
        __nilReason.name() : __nilReason,
        __role.name() : __role,
        __show.name() : __show,
        __actuate.name() : __actuate
    }
_Namespace_gml.addCategoryObject('typeBinding', u'GeneralTransformationPropertyType', GeneralTransformationPropertyType)


# Complex type DirectedNodePropertyType with content type ELEMENT_ONLY
class DirectedNodePropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'DirectedNodePropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.opengis.net/gml/3.2}Node uses Python identifier Node
    __Node = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'Node'), 'Node', '__httpwww_opengis_netgml3_2_DirectedNodePropertyType_httpwww_opengis_netgml3_2Node', False)

    
    Node = property(__Node.value, __Node.set, None, u'gml:Node represents the 0-dimensional primitive.\nThe optional coboundary of a node (gml:directedEdge) is a sequence of directed edges which are incident on this node. Edges emanating from this node appear in the node coboundary with a negative orientation. \nIf provided, the aggregationType attribute shall have the value "sequence".\nA node may optionally be realised by a 0-dimensional geometric primitive (gml:pointProperty).')

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_opengis_netgml3_2_DirectedNodePropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute orientation uses Python identifier orientation
    __orientation = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'orientation'), 'orientation', '__httpwww_opengis_netgml3_2_DirectedNodePropertyType_orientation', SignType, unicode_default=u'+')
    
    orientation = property(__orientation.value, __orientation.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_opengis_netgml3_2_DirectedNodePropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute owns uses Python identifier owns
    __owns = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'owns'), 'owns', '__httpwww_opengis_netgml3_2_DirectedNodePropertyType_owns', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    owns = property(__owns.value, __owns.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_opengis_netgml3_2_DirectedNodePropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'nilReason'), 'nilReason', '__httpwww_opengis_netgml3_2_DirectedNodePropertyType_nilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.opengis.net/gml/3.2}remoteSchema uses Python identifier remoteSchema
    __remoteSchema = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'remoteSchema'), 'remoteSchema', '__httpwww_opengis_netgml3_2_DirectedNodePropertyType_httpwww_opengis_netgml3_2remoteSchema', pyxb.binding.datatypes.anyURI)
    
    remoteSchema = property(__remoteSchema.value, __remoteSchema.set, None, u'')

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_opengis_netgml3_2_DirectedNodePropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_opengis_netgml3_2_DirectedNodePropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_opengis_netgml3_2_DirectedNodePropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_opengis_netgml3_2_DirectedNodePropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)


    _ElementMap = {
        __Node.name() : __Node
    }
    _AttributeMap = {
        __type.name() : __type,
        __orientation.name() : __orientation,
        __actuate.name() : __actuate,
        __owns.name() : __owns,
        __href.name() : __href,
        __nilReason.name() : __nilReason,
        __remoteSchema.name() : __remoteSchema,
        __title.name() : __title,
        __arcrole.name() : __arcrole,
        __show.name() : __show,
        __role.name() : __role
    }
_Namespace_gml.addCategoryObject('typeBinding', u'DirectedNodePropertyType', DirectedNodePropertyType)


# Complex type AbstractGMLType with content type ELEMENT_ONLY
class AbstractGMLType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = True
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractGMLType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.opengis.net/gml/3.2}name uses Python identifier name
    __name = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'), 'name', '__httpwww_opengis_netgml3_2_AbstractGMLType_httpwww_opengis_netgml3_2name', True)

    
    name = property(__name.value, __name.set, None, u'The gml:name property provides a label or identifier for the object, commonly a descriptive name. An object may have several names, typically assigned by different authorities. gml:name uses the gml:CodeType content model.  The authority for a name is indicated by the value of its (optional) codeSpace attribute.  The name may or may not be unique, as determined by the rules of the organization responsible for the codeSpace.  In common usage there will be one name per authority, so a processing application may select the name from its preferred codeSpace.')

    
    # Element {http://www.opengis.net/gml/3.2}metaDataProperty uses Python identifier metaDataProperty
    __metaDataProperty = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'metaDataProperty'), 'metaDataProperty', '__httpwww_opengis_netgml3_2_AbstractGMLType_httpwww_opengis_netgml3_2metaDataProperty', True)

    
    metaDataProperty = property(__metaDataProperty.value, __metaDataProperty.set, None, u'')

    
    # Element {http://www.opengis.net/gml/3.2}descriptionReference uses Python identifier descriptionReference
    __descriptionReference = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'), 'descriptionReference', '__httpwww_opengis_netgml3_2_AbstractGMLType_httpwww_opengis_netgml3_2descriptionReference', False)

    
    descriptionReference = property(__descriptionReference.value, __descriptionReference.set, None, u'The value of this property is a remote text description of the object. The xlink:href attribute of the gml:descriptionReference property references the external description.')

    
    # Element {http://www.opengis.net/gml/3.2}description uses Python identifier description
    __description = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'description'), 'description', '__httpwww_opengis_netgml3_2_AbstractGMLType_httpwww_opengis_netgml3_2description', False)

    
    description = property(__description.value, __description.set, None, u'The value of this property is a text description of the object. gml:description uses gml:StringOrRefType as its content model, so it may contain a simple text string content, or carry a reference to an external description. The use of gml:description to reference an external description has been deprecated and replaced by the gml:descriptionReference property.')

    
    # Element {http://www.opengis.net/gml/3.2}identifier uses Python identifier identifier
    __identifier = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'), 'identifier', '__httpwww_opengis_netgml3_2_AbstractGMLType_httpwww_opengis_netgml3_2identifier', False)

    
    identifier = property(__identifier.value, __identifier.set, None, u'Often, a special identifier is assigned to an object by the maintaining authority with the intention that it is used in references to the object For such cases, the codeSpace shall be provided. That identifier is usually unique either globally or within an application domain. gml:identifier is a pre-defined property for such identifiers.')

    
    # Attribute {http://www.opengis.net/gml/3.2}id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'id'), 'id', '__httpwww_opengis_netgml3_2_AbstractGMLType_httpwww_opengis_netgml3_2id', pyxb.binding.datatypes.ID, required=True)
    
    id = property(__id.value, __id.set, None, u'The attribute gml:id supports provision of a handle for the XML element representing a GML Object. Its use is mandatory for all GML objects. It is of XML type ID, so is constrained to be unique in the XML document within which it occurs.')


    _ElementMap = {
        __name.name() : __name,
        __metaDataProperty.name() : __metaDataProperty,
        __descriptionReference.name() : __descriptionReference,
        __description.name() : __description,
        __identifier.name() : __identifier
    }
    _AttributeMap = {
        __id.name() : __id
    }
_Namespace_gml.addCategoryObject('typeBinding', u'AbstractGMLType', AbstractGMLType)


# Complex type DefinitionBaseType with content type ELEMENT_ONLY
class DefinitionBaseType (AbstractGMLType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'DefinitionBaseType')
    # Base type is AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Attribute id is restricted from parent
    
    # Attribute {http://www.opengis.net/gml/3.2}id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'id'), 'id', '__httpwww_opengis_netgml3_2_AbstractGMLType_httpwww_opengis_netgml3_2id', pyxb.binding.datatypes.ID, required=True)
    
    id = property(__id.value, __id.set, None, u'The attribute gml:id supports provision of a handle for the XML element representing a GML Object. Its use is mandatory for all GML objects. It is of XML type ID, so is constrained to be unique in the XML document within which it occurs.')


    _ElementMap = AbstractGMLType._ElementMap.copy()
    _ElementMap.update({
        
    })
    _AttributeMap = AbstractGMLType._AttributeMap.copy()
    _AttributeMap.update({
        __id.name() : __id
    })
_Namespace_gml.addCategoryObject('typeBinding', u'DefinitionBaseType', DefinitionBaseType)


# Complex type DefinitionType with content type ELEMENT_ONLY
class DefinitionType (DefinitionBaseType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'DefinitionType')
    # Base type is DefinitionBaseType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element {http://www.opengis.net/gml/3.2}remarks uses Python identifier remarks
    __remarks = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'remarks'), 'remarks', '__httpwww_opengis_netgml3_2_DefinitionType_httpwww_opengis_netgml3_2remarks', False)

    
    remarks = property(__remarks.value, __remarks.set, None, None)

    
    # Attribute id_ inherited from {http://www.opengis.net/gml/3.2}DefinitionBaseType

    _ElementMap = DefinitionBaseType._ElementMap.copy()
    _ElementMap.update({
        __remarks.name() : __remarks
    })
    _AttributeMap = DefinitionBaseType._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gml.addCategoryObject('typeBinding', u'DefinitionType', DefinitionType)


# Complex type IdentifiedObjectType with content type ELEMENT_ONLY
class IdentifiedObjectType (DefinitionType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = True
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'IdentifiedObjectType')
    # Base type is DefinitionType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element remarks ({http://www.opengis.net/gml/3.2}remarks) inherited from {http://www.opengis.net/gml/3.2}DefinitionType
    
    # Attribute id_ inherited from {http://www.opengis.net/gml/3.2}DefinitionBaseType

    _ElementMap = DefinitionType._ElementMap.copy()
    _ElementMap.update({
        
    })
    _AttributeMap = DefinitionType._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gml.addCategoryObject('typeBinding', u'IdentifiedObjectType', IdentifiedObjectType)


# Complex type AbstractCRSType with content type ELEMENT_ONLY
class AbstractCRSType (IdentifiedObjectType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = True
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractCRSType')
    # Base type is IdentifiedObjectType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element {http://www.opengis.net/gml/3.2}domainOfValidity uses Python identifier domainOfValidity
    __domainOfValidity = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'domainOfValidity'), 'domainOfValidity', '__httpwww_opengis_netgml3_2_AbstractCRSType_httpwww_opengis_netgml3_2domainOfValidity', True)

    
    domainOfValidity = property(__domainOfValidity.value, __domainOfValidity.set, None, u'The gml:domainOfValidity property implements an association role to an EX_Extent object as encoded in ISO/TS 19139, either referencing or containing the definition of that extent.')

    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element {http://www.opengis.net/gml/3.2}scope uses Python identifier scope
    __scope = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'scope'), 'scope', '__httpwww_opengis_netgml3_2_AbstractCRSType_httpwww_opengis_netgml3_2scope', True)

    
    scope = property(__scope.value, __scope.set, None, u'The gml:scope property provides a description of the usage, or limitations of usage, for which this CRS-related object is valid. If unknown, enter "not known".')

    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element remarks ({http://www.opengis.net/gml/3.2}remarks) inherited from {http://www.opengis.net/gml/3.2}DefinitionType
    
    # Attribute id_ inherited from {http://www.opengis.net/gml/3.2}DefinitionBaseType

    _ElementMap = IdentifiedObjectType._ElementMap.copy()
    _ElementMap.update({
        __domainOfValidity.name() : __domainOfValidity,
        __scope.name() : __scope
    })
    _AttributeMap = IdentifiedObjectType._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gml.addCategoryObject('typeBinding', u'AbstractCRSType', AbstractCRSType)


# Complex type AbstractGeneralDerivedCRSType with content type ELEMENT_ONLY
class AbstractGeneralDerivedCRSType (AbstractCRSType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = True
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractGeneralDerivedCRSType')
    # Base type is AbstractCRSType
    
    # Element {http://www.opengis.net/gml/3.2}conversion uses Python identifier conversion
    __conversion = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'conversion'), 'conversion', '__httpwww_opengis_netgml3_2_AbstractGeneralDerivedCRSType_httpwww_opengis_netgml3_2conversion', False)

    
    conversion = property(__conversion.value, __conversion.set, None, u'gml:conversion is an association role to the coordinate conversion used to define the derived CRS.')

    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element domainOfValidity ({http://www.opengis.net/gml/3.2}domainOfValidity) inherited from {http://www.opengis.net/gml/3.2}AbstractCRSType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element scope ({http://www.opengis.net/gml/3.2}scope) inherited from {http://www.opengis.net/gml/3.2}AbstractCRSType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element remarks ({http://www.opengis.net/gml/3.2}remarks) inherited from {http://www.opengis.net/gml/3.2}DefinitionType
    
    # Attribute id_ inherited from {http://www.opengis.net/gml/3.2}DefinitionBaseType

    _ElementMap = AbstractCRSType._ElementMap.copy()
    _ElementMap.update({
        __conversion.name() : __conversion
    })
    _AttributeMap = AbstractCRSType._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gml.addCategoryObject('typeBinding', u'AbstractGeneralDerivedCRSType', AbstractGeneralDerivedCRSType)


# Complex type ProjectedCRSType with content type ELEMENT_ONLY
class ProjectedCRSType (AbstractGeneralDerivedCRSType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'ProjectedCRSType')
    # Base type is AbstractGeneralDerivedCRSType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element conversion ({http://www.opengis.net/gml/3.2}conversion) inherited from {http://www.opengis.net/gml/3.2}AbstractGeneralDerivedCRSType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element domainOfValidity ({http://www.opengis.net/gml/3.2}domainOfValidity) inherited from {http://www.opengis.net/gml/3.2}AbstractCRSType
    
    # Element {http://www.opengis.net/gml/3.2}baseGeodeticCRS uses Python identifier baseGeodeticCRS
    __baseGeodeticCRS = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'baseGeodeticCRS'), 'baseGeodeticCRS', '__httpwww_opengis_netgml3_2_ProjectedCRSType_httpwww_opengis_netgml3_2baseGeodeticCRS', False)

    
    baseGeodeticCRS = property(__baseGeodeticCRS.value, __baseGeodeticCRS.set, None, u'gml:baseGeodeticCRS is an association role to the geodetic coordinate reference system used by this projected CRS.')

    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element scope ({http://www.opengis.net/gml/3.2}scope) inherited from {http://www.opengis.net/gml/3.2}AbstractCRSType
    
    # Element {http://www.opengis.net/gml/3.2}baseGeographicCRS uses Python identifier baseGeographicCRS
    __baseGeographicCRS = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'baseGeographicCRS'), 'baseGeographicCRS', '__httpwww_opengis_netgml3_2_ProjectedCRSType_httpwww_opengis_netgml3_2baseGeographicCRS', False)

    
    baseGeographicCRS = property(__baseGeographicCRS.value, __baseGeographicCRS.set, None, u'')

    
    # Element {http://www.opengis.net/gml/3.2}cartesianCS uses Python identifier cartesianCS
    __cartesianCS = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'cartesianCS'), 'cartesianCS', '__httpwww_opengis_netgml3_2_ProjectedCRSType_httpwww_opengis_netgml3_2cartesianCS', False)

    
    cartesianCS = property(__cartesianCS.value, __cartesianCS.set, None, u'gml:cartesianCS is an association role to the Cartesian coordinate system used by this CRS.')

    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element remarks ({http://www.opengis.net/gml/3.2}remarks) inherited from {http://www.opengis.net/gml/3.2}DefinitionType
    
    # Attribute id_ inherited from {http://www.opengis.net/gml/3.2}DefinitionBaseType

    _ElementMap = AbstractGeneralDerivedCRSType._ElementMap.copy()
    _ElementMap.update({
        __baseGeodeticCRS.name() : __baseGeodeticCRS,
        __baseGeographicCRS.name() : __baseGeographicCRS,
        __cartesianCS.name() : __cartesianCS
    })
    _AttributeMap = AbstractGeneralDerivedCRSType._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gml.addCategoryObject('typeBinding', u'ProjectedCRSType', ProjectedCRSType)


# Complex type SurfaceArrayPropertyType with content type ELEMENT_ONLY
class SurfaceArrayPropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'SurfaceArrayPropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.opengis.net/gml/3.2}AbstractSurface uses Python identifier AbstractSurface
    __AbstractSurface = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractSurface'), 'AbstractSurface', '__httpwww_opengis_netgml3_2_SurfaceArrayPropertyType_httpwww_opengis_netgml3_2AbstractSurface', True)

    
    AbstractSurface = property(__AbstractSurface.value, __AbstractSurface.set, None, u'The AbstractSurface element is the abstract head of the substitution group for all (continuous) surface elements.')

    
    # Attribute owns uses Python identifier owns
    __owns = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'owns'), 'owns', '__httpwww_opengis_netgml3_2_SurfaceArrayPropertyType_owns', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    owns = property(__owns.value, __owns.set, None, None)


    _ElementMap = {
        __AbstractSurface.name() : __AbstractSurface
    }
    _AttributeMap = {
        __owns.name() : __owns
    }
_Namespace_gml.addCategoryObject('typeBinding', u'SurfaceArrayPropertyType', SurfaceArrayPropertyType)


# Complex type PointPropertyType with content type ELEMENT_ONLY
class PointPropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'PointPropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.opengis.net/gml/3.2}Point uses Python identifier Point
    __Point = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'Point'), 'Point', '__httpwww_opengis_netgml3_2_PointPropertyType_httpwww_opengis_netgml3_2Point', False)

    
    Point = property(__Point.value, __Point.set, None, u'A Point is defined by a single coordinate tuple. The direct position of a point is specified by the pos element which is of type DirectPositionType.')

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_opengis_netgml3_2_PointPropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_opengis_netgml3_2_PointPropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_opengis_netgml3_2_PointPropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'nilReason'), 'nilReason', '__httpwww_opengis_netgml3_2_PointPropertyType_nilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_opengis_netgml3_2_PointPropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute owns uses Python identifier owns
    __owns = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'owns'), 'owns', '__httpwww_opengis_netgml3_2_PointPropertyType_owns', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    owns = property(__owns.value, __owns.set, None, None)

    
    # Attribute {http://www.opengis.net/gml/3.2}remoteSchema uses Python identifier remoteSchema
    __remoteSchema = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'remoteSchema'), 'remoteSchema', '__httpwww_opengis_netgml3_2_PointPropertyType_httpwww_opengis_netgml3_2remoteSchema', pyxb.binding.datatypes.anyURI)
    
    remoteSchema = property(__remoteSchema.value, __remoteSchema.set, None, u'')

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_opengis_netgml3_2_PointPropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_opengis_netgml3_2_PointPropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_opengis_netgml3_2_PointPropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)


    _ElementMap = {
        __Point.name() : __Point
    }
    _AttributeMap = {
        __role.name() : __role,
        __arcrole.name() : __arcrole,
        __show.name() : __show,
        __nilReason.name() : __nilReason,
        __actuate.name() : __actuate,
        __owns.name() : __owns,
        __remoteSchema.name() : __remoteSchema,
        __title.name() : __title,
        __href.name() : __href,
        __type.name() : __type
    }
_Namespace_gml.addCategoryObject('typeBinding', u'PointPropertyType', PointPropertyType)


# Complex type CI_ResponsibleParty_Type with content type ELEMENT_ONLY
class CI_ResponsibleParty_Type (AbstractObject_Type):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'CI_ResponsibleParty_Type')
    # Base type is AbstractObject_Type
    
    # Element {http://www.isotc211.org/2005/gmd}role uses Python identifier role
    __role = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'role'), 'role', '__httpwww_isotc211_org2005gmd_CI_ResponsibleParty_Type_httpwww_isotc211_org2005gmdrole', False)

    
    role = property(__role.value, __role.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}individualName uses Python identifier individualName
    __individualName = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'individualName'), 'individualName', '__httpwww_isotc211_org2005gmd_CI_ResponsibleParty_Type_httpwww_isotc211_org2005gmdindividualName', False)

    
    individualName = property(__individualName.value, __individualName.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}organisationName uses Python identifier organisationName
    __organisationName = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'organisationName'), 'organisationName', '__httpwww_isotc211_org2005gmd_CI_ResponsibleParty_Type_httpwww_isotc211_org2005gmdorganisationName', False)

    
    organisationName = property(__organisationName.value, __organisationName.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}contactInfo uses Python identifier contactInfo
    __contactInfo = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'contactInfo'), 'contactInfo', '__httpwww_isotc211_org2005gmd_CI_ResponsibleParty_Type_httpwww_isotc211_org2005gmdcontactInfo', False)

    
    contactInfo = property(__contactInfo.value, __contactInfo.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}positionName uses Python identifier positionName
    __positionName = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'positionName'), 'positionName', '__httpwww_isotc211_org2005gmd_CI_ResponsibleParty_Type_httpwww_isotc211_org2005gmdpositionName', False)

    
    positionName = property(__positionName.value, __positionName.set, None, None)

    
    # Attribute id inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type
    
    # Attribute uuid inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type

    _ElementMap = AbstractObject_Type._ElementMap.copy()
    _ElementMap.update({
        __role.name() : __role,
        __individualName.name() : __individualName,
        __organisationName.name() : __organisationName,
        __contactInfo.name() : __contactInfo,
        __positionName.name() : __positionName
    })
    _AttributeMap = AbstractObject_Type._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gmd.addCategoryObject('typeBinding', u'CI_ResponsibleParty_Type', CI_ResponsibleParty_Type)


# Complex type MD_ReferenceSystem_PropertyType with content type ELEMENT_ONLY
class MD_ReferenceSystem_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_ReferenceSystem_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmd}MD_ReferenceSystem uses Python identifier MD_ReferenceSystem
    __MD_ReferenceSystem = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_ReferenceSystem'), 'MD_ReferenceSystem', '__httpwww_isotc211_org2005gmd_MD_ReferenceSystem_PropertyType_httpwww_isotc211_org2005gmdMD_ReferenceSystem', False)

    
    MD_ReferenceSystem = property(__MD_ReferenceSystem.value, __MD_ReferenceSystem.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_isotc211_org2005gmd_MD_ReferenceSystem_PropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_isotc211_org2005gmd_MD_ReferenceSystem_PropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_isotc211_org2005gmd_MD_ReferenceSystem_PropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmd_MD_ReferenceSystem_PropertyType_httpwww_isotc211_org2005gconilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_isotc211_org2005gmd_MD_ReferenceSystem_PropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute uuidref uses Python identifier uuidref
    __uuidref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uuidref'), 'uuidref', '__httpwww_isotc211_org2005gmd_MD_ReferenceSystem_PropertyType_uuidref', pyxb.binding.datatypes.string)
    
    uuidref = property(__uuidref.value, __uuidref.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_isotc211_org2005gmd_MD_ReferenceSystem_PropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_isotc211_org2005gmd_MD_ReferenceSystem_PropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_isotc211_org2005gmd_MD_ReferenceSystem_PropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")


    _ElementMap = {
        __MD_ReferenceSystem.name() : __MD_ReferenceSystem
    }
    _AttributeMap = {
        __type.name() : __type,
        __role.name() : __role,
        __arcrole.name() : __arcrole,
        __nilReason.name() : __nilReason,
        __title.name() : __title,
        __uuidref.name() : __uuidref,
        __show.name() : __show,
        __href.name() : __href,
        __actuate.name() : __actuate
    }
_Namespace_gmd.addCategoryObject('typeBinding', u'MD_ReferenceSystem_PropertyType', MD_ReferenceSystem_PropertyType)


# Complex type AbstractTopologyType with content type ELEMENT_ONLY
class AbstractTopologyType (AbstractGMLType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = True
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractTopologyType')
    # Base type is AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Attribute id inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType

    _ElementMap = AbstractGMLType._ElementMap.copy()
    _ElementMap.update({
        
    })
    _AttributeMap = AbstractGMLType._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gml.addCategoryObject('typeBinding', u'AbstractTopologyType', AbstractTopologyType)


# Complex type AbstractTopoPrimitiveType with content type ELEMENT_ONLY
class AbstractTopoPrimitiveType (AbstractTopologyType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = True
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractTopoPrimitiveType')
    # Base type is AbstractTopologyType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Attribute id inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType

    _ElementMap = AbstractTopologyType._ElementMap.copy()
    _ElementMap.update({
        
    })
    _AttributeMap = AbstractTopologyType._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gml.addCategoryObject('typeBinding', u'AbstractTopoPrimitiveType', AbstractTopoPrimitiveType)


# Complex type FaceType with content type ELEMENT_ONLY
class FaceType (AbstractTopoPrimitiveType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'FaceType')
    # Base type is AbstractTopoPrimitiveType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element {http://www.opengis.net/gml/3.2}directedEdge uses Python identifier directedEdge
    __directedEdge = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'directedEdge'), 'directedEdge', '__httpwww_opengis_netgml3_2_FaceType_httpwww_opengis_netgml3_2directedEdge', True)

    
    directedEdge = property(__directedEdge.value, __directedEdge.set, None, u'A gml:directedEdge property element describes the boundary of topology faces, the coBoundary of topology nodes and is used in the support of topological line features via the gml:TopoCurve expression, see below. The orientation attribute of type gml:SignType expresses the sense in which the included edge is used, i.e. forward or reverse.')

    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element {http://www.opengis.net/gml/3.2}directedTopoSolid uses Python identifier directedTopoSolid
    __directedTopoSolid = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'directedTopoSolid'), 'directedTopoSolid', '__httpwww_opengis_netgml3_2_FaceType_httpwww_opengis_netgml3_2directedTopoSolid', True)

    
    directedTopoSolid = property(__directedTopoSolid.value, __directedTopoSolid.set, None, u'The gml:directedSolid property element describes the coBoundary of topology faces and is used in the support of volume features via the gml:TopoVolume expression, see below. The orientation attribute of type gml:SignType expresses the sense in which the included solid appears in the face coboundary. In the context of a gml:TopoVolume the orientation attribute has no meaning.')

    
    # Element {http://www.opengis.net/gml/3.2}surfaceProperty uses Python identifier surfaceProperty
    __surfaceProperty = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'surfaceProperty'), 'surfaceProperty', '__httpwww_opengis_netgml3_2_FaceType_httpwww_opengis_netgml3_2surfaceProperty', False)

    
    surfaceProperty = property(__surfaceProperty.value, __surfaceProperty.set, None, u'This property element either references a surface via the XLink-attributes or contains the surface element. surfaceProperty is the predefined property which may be used by GML Application Schemas whenever a GML feature has a property with a value that is substitutable for AbstractSurface.')

    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element {http://www.opengis.net/gml/3.2}isolated uses Python identifier isolated
    __isolated = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'isolated'), 'isolated', '__httpwww_opengis_netgml3_2_FaceType_httpwww_opengis_netgml3_2isolated', True)

    
    isolated = property(__isolated.value, __isolated.set, None, None)

    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Attribute aggregationType uses Python identifier aggregationType
    __aggregationType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'aggregationType'), 'aggregationType', '__httpwww_opengis_netgml3_2_FaceType_aggregationType', AggregationType)
    
    aggregationType = property(__aggregationType.value, __aggregationType.set, None, None)

    
    # Attribute universal uses Python identifier universal
    __universal = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'universal'), 'universal', '__httpwww_opengis_netgml3_2_FaceType_universal', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    universal = property(__universal.value, __universal.set, None, u'If the topological representation exists an unbounded manifold (e.g. Euclidean plane), a gml:Face must indicate whether it is a universal face or not, to ensure a lossless topology representation as defined by Kuijpers, et. al. (see OGC 05-102 Topology IPR). The optional universal attribute of type boolean is used to indicate this. NOTE The universal face is normally not part of any feature, and is used to represent the unbounded portion of the data set. Its interior boundary (it has no exterior boundary) would normally be considered the exterior boundary of the map represented by the data set. ')

    
    # Attribute id inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType

    _ElementMap = AbstractTopoPrimitiveType._ElementMap.copy()
    _ElementMap.update({
        __directedEdge.name() : __directedEdge,
        __directedTopoSolid.name() : __directedTopoSolid,
        __surfaceProperty.name() : __surfaceProperty,
        __isolated.name() : __isolated
    })
    _AttributeMap = AbstractTopoPrimitiveType._AttributeMap.copy()
    _AttributeMap.update({
        __aggregationType.name() : __aggregationType,
        __universal.name() : __universal
    })
_Namespace_gml.addCategoryObject('typeBinding', u'FaceType', FaceType)


# Complex type DQ_ConceptualConsistency_PropertyType with content type ELEMENT_ONLY
class DQ_ConceptualConsistency_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'DQ_ConceptualConsistency_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmd}DQ_ConceptualConsistency uses Python identifier DQ_ConceptualConsistency
    __DQ_ConceptualConsistency = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'DQ_ConceptualConsistency'), 'DQ_ConceptualConsistency', '__httpwww_isotc211_org2005gmd_DQ_ConceptualConsistency_PropertyType_httpwww_isotc211_org2005gmdDQ_ConceptualConsistency', False)

    
    DQ_ConceptualConsistency = property(__DQ_ConceptualConsistency.value, __DQ_ConceptualConsistency.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_isotc211_org2005gmd_DQ_ConceptualConsistency_PropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_isotc211_org2005gmd_DQ_ConceptualConsistency_PropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmd_DQ_ConceptualConsistency_PropertyType_httpwww_isotc211_org2005gconilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_isotc211_org2005gmd_DQ_ConceptualConsistency_PropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_isotc211_org2005gmd_DQ_ConceptualConsistency_PropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute uuidref uses Python identifier uuidref
    __uuidref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uuidref'), 'uuidref', '__httpwww_isotc211_org2005gmd_DQ_ConceptualConsistency_PropertyType_uuidref', pyxb.binding.datatypes.string)
    
    uuidref = property(__uuidref.value, __uuidref.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_isotc211_org2005gmd_DQ_ConceptualConsistency_PropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_isotc211_org2005gmd_DQ_ConceptualConsistency_PropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_isotc211_org2005gmd_DQ_ConceptualConsistency_PropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)


    _ElementMap = {
        __DQ_ConceptualConsistency.name() : __DQ_ConceptualConsistency
    }
    _AttributeMap = {
        __arcrole.name() : __arcrole,
        __role.name() : __role,
        __nilReason.name() : __nilReason,
        __title.name() : __title,
        __show.name() : __show,
        __uuidref.name() : __uuidref,
        __href.name() : __href,
        __actuate.name() : __actuate,
        __type.name() : __type
    }
_Namespace_gmd.addCategoryObject('typeBinding', u'DQ_ConceptualConsistency_PropertyType', DQ_ConceptualConsistency_PropertyType)


# Complex type MD_ServiceIdentification_PropertyType with content type ELEMENT_ONLY
class MD_ServiceIdentification_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_ServiceIdentification_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmd}MD_ServiceIdentification uses Python identifier MD_ServiceIdentification
    __MD_ServiceIdentification = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_ServiceIdentification'), 'MD_ServiceIdentification', '__httpwww_isotc211_org2005gmd_MD_ServiceIdentification_PropertyType_httpwww_isotc211_org2005gmdMD_ServiceIdentification', False)

    
    MD_ServiceIdentification = property(__MD_ServiceIdentification.value, __MD_ServiceIdentification.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_isotc211_org2005gmd_MD_ServiceIdentification_PropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_isotc211_org2005gmd_MD_ServiceIdentification_PropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_isotc211_org2005gmd_MD_ServiceIdentification_PropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_isotc211_org2005gmd_MD_ServiceIdentification_PropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute uuidref uses Python identifier uuidref
    __uuidref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uuidref'), 'uuidref', '__httpwww_isotc211_org2005gmd_MD_ServiceIdentification_PropertyType_uuidref', pyxb.binding.datatypes.string)
    
    uuidref = property(__uuidref.value, __uuidref.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmd_MD_ServiceIdentification_PropertyType_httpwww_isotc211_org2005gconilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_isotc211_org2005gmd_MD_ServiceIdentification_PropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_isotc211_org2005gmd_MD_ServiceIdentification_PropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_isotc211_org2005gmd_MD_ServiceIdentification_PropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")


    _ElementMap = {
        __MD_ServiceIdentification.name() : __MD_ServiceIdentification
    }
    _AttributeMap = {
        __arcrole.name() : __arcrole,
        __role.name() : __role,
        __title.name() : __title,
        __show.name() : __show,
        __uuidref.name() : __uuidref,
        __nilReason.name() : __nilReason,
        __href.name() : __href,
        __type.name() : __type,
        __actuate.name() : __actuate
    }
_Namespace_gmd.addCategoryObject('typeBinding', u'MD_ServiceIdentification_PropertyType', MD_ServiceIdentification_PropertyType)


# Complex type CoordinateSystemAxisPropertyType with content type ELEMENT_ONLY
class CoordinateSystemAxisPropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'CoordinateSystemAxisPropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.opengis.net/gml/3.2}CoordinateSystemAxis uses Python identifier CoordinateSystemAxis
    __CoordinateSystemAxis = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'CoordinateSystemAxis'), 'CoordinateSystemAxis', '__httpwww_opengis_netgml3_2_CoordinateSystemAxisPropertyType_httpwww_opengis_netgml3_2CoordinateSystemAxis', False)

    
    CoordinateSystemAxis = property(__CoordinateSystemAxis.value, __CoordinateSystemAxis.set, None, u'gml:CoordinateSystemAxis is a definition of a coordinate system axis.')

    
    # Attribute {http://www.opengis.net/gml/3.2}remoteSchema uses Python identifier remoteSchema
    __remoteSchema = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'remoteSchema'), 'remoteSchema', '__httpwww_opengis_netgml3_2_CoordinateSystemAxisPropertyType_httpwww_opengis_netgml3_2remoteSchema', pyxb.binding.datatypes.anyURI)
    
    remoteSchema = property(__remoteSchema.value, __remoteSchema.set, None, u'')

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_opengis_netgml3_2_CoordinateSystemAxisPropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_opengis_netgml3_2_CoordinateSystemAxisPropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_opengis_netgml3_2_CoordinateSystemAxisPropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'nilReason'), 'nilReason', '__httpwww_opengis_netgml3_2_CoordinateSystemAxisPropertyType_nilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_opengis_netgml3_2_CoordinateSystemAxisPropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_opengis_netgml3_2_CoordinateSystemAxisPropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_opengis_netgml3_2_CoordinateSystemAxisPropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_opengis_netgml3_2_CoordinateSystemAxisPropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")


    _ElementMap = {
        __CoordinateSystemAxis.name() : __CoordinateSystemAxis
    }
    _AttributeMap = {
        __remoteSchema.name() : __remoteSchema,
        __href.name() : __href,
        __title.name() : __title,
        __type.name() : __type,
        __nilReason.name() : __nilReason,
        __role.name() : __role,
        __show.name() : __show,
        __arcrole.name() : __arcrole,
        __actuate.name() : __actuate
    }
_Namespace_gml.addCategoryObject('typeBinding', u'CoordinateSystemAxisPropertyType', CoordinateSystemAxisPropertyType)


# Complex type Binary_PropertyType with content type ELEMENT_ONLY
class Binary_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gco, u'Binary_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gco}Binary uses Python identifier Binary
    __Binary = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'Binary'), 'Binary', '__httpwww_isotc211_org2005gco_Binary_PropertyType_httpwww_isotc211_org2005gcoBinary', False)

    
    Binary = property(__Binary.value, __Binary.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gco_Binary_PropertyType_httpwww_isotc211_org2005gconilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)


    _ElementMap = {
        __Binary.name() : __Binary
    }
    _AttributeMap = {
        __nilReason.name() : __nilReason
    }
_Namespace_gco.addCategoryObject('typeBinding', u'Binary_PropertyType', Binary_PropertyType)


# Complex type MD_Georeferenceable_PropertyType with content type ELEMENT_ONLY
class MD_Georeferenceable_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_Georeferenceable_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmd}MD_Georeferenceable uses Python identifier MD_Georeferenceable
    __MD_Georeferenceable = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_Georeferenceable'), 'MD_Georeferenceable', '__httpwww_isotc211_org2005gmd_MD_Georeferenceable_PropertyType_httpwww_isotc211_org2005gmdMD_Georeferenceable', False)

    
    MD_Georeferenceable = property(__MD_Georeferenceable.value, __MD_Georeferenceable.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmd_MD_Georeferenceable_PropertyType_httpwww_isotc211_org2005gconilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_isotc211_org2005gmd_MD_Georeferenceable_PropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_isotc211_org2005gmd_MD_Georeferenceable_PropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_isotc211_org2005gmd_MD_Georeferenceable_PropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_isotc211_org2005gmd_MD_Georeferenceable_PropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_isotc211_org2005gmd_MD_Georeferenceable_PropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute uuidref uses Python identifier uuidref
    __uuidref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uuidref'), 'uuidref', '__httpwww_isotc211_org2005gmd_MD_Georeferenceable_PropertyType_uuidref', pyxb.binding.datatypes.string)
    
    uuidref = property(__uuidref.value, __uuidref.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_isotc211_org2005gmd_MD_Georeferenceable_PropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_isotc211_org2005gmd_MD_Georeferenceable_PropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)


    _ElementMap = {
        __MD_Georeferenceable.name() : __MD_Georeferenceable
    }
    _AttributeMap = {
        __nilReason.name() : __nilReason,
        __type.name() : __type,
        __title.name() : __title,
        __show.name() : __show,
        __href.name() : __href,
        __actuate.name() : __actuate,
        __uuidref.name() : __uuidref,
        __role.name() : __role,
        __arcrole.name() : __arcrole
    }
_Namespace_gmd.addCategoryObject('typeBinding', u'MD_Georeferenceable_PropertyType', MD_Georeferenceable_PropertyType)


# Complex type SphericalCSPropertyType with content type ELEMENT_ONLY
class SphericalCSPropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'SphericalCSPropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.opengis.net/gml/3.2}SphericalCS uses Python identifier SphericalCS
    __SphericalCS = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'SphericalCS'), 'SphericalCS', '__httpwww_opengis_netgml3_2_SphericalCSPropertyType_httpwww_opengis_netgml3_2SphericalCS', False)

    
    SphericalCS = property(__SphericalCS.value, __SphericalCS.set, None, u'gml:SphericalCS is a three-dimensional coordinate system with one distance measured from the origin and two angular coordinates. A SphericalCS shall have three gml:axis property elements.')

    
    # Attribute {http://www.opengis.net/gml/3.2}remoteSchema uses Python identifier remoteSchema
    __remoteSchema = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'remoteSchema'), 'remoteSchema', '__httpwww_opengis_netgml3_2_SphericalCSPropertyType_httpwww_opengis_netgml3_2remoteSchema', pyxb.binding.datatypes.anyURI)
    
    remoteSchema = property(__remoteSchema.value, __remoteSchema.set, None, u'')

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_opengis_netgml3_2_SphericalCSPropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_opengis_netgml3_2_SphericalCSPropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_opengis_netgml3_2_SphericalCSPropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_opengis_netgml3_2_SphericalCSPropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'nilReason'), 'nilReason', '__httpwww_opengis_netgml3_2_SphericalCSPropertyType_nilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_opengis_netgml3_2_SphericalCSPropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_opengis_netgml3_2_SphericalCSPropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_opengis_netgml3_2_SphericalCSPropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)


    _ElementMap = {
        __SphericalCS.name() : __SphericalCS
    }
    _AttributeMap = {
        __remoteSchema.name() : __remoteSchema,
        __type.name() : __type,
        __title.name() : __title,
        __arcrole.name() : __arcrole,
        __role.name() : __role,
        __nilReason.name() : __nilReason,
        __actuate.name() : __actuate,
        __show.name() : __show,
        __href.name() : __href
    }
_Namespace_gml.addCategoryObject('typeBinding', u'SphericalCSPropertyType', SphericalCSPropertyType)


# Complex type EdgeType with content type ELEMENT_ONLY
class EdgeType (AbstractTopoPrimitiveType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'EdgeType')
    # Base type is AbstractTopoPrimitiveType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element {http://www.opengis.net/gml/3.2}curveProperty uses Python identifier curveProperty
    __curveProperty = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'curveProperty'), 'curveProperty', '__httpwww_opengis_netgml3_2_EdgeType_httpwww_opengis_netgml3_2curveProperty', False)

    
    curveProperty = property(__curveProperty.value, __curveProperty.set, None, u'This property element either references a curve via the XLink-attributes or contains the curve element. curveProperty is the predefined property which may be used by GML Application Schemas whenever a GML feature has a property with a value that is substitutable for AbstractCurve.')

    
    # Element {http://www.opengis.net/gml/3.2}container uses Python identifier container
    __container = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'container'), 'container', '__httpwww_opengis_netgml3_2_EdgeType_httpwww_opengis_netgml3_2container', False)

    
    container = property(__container.value, __container.set, None, None)

    
    # Element {http://www.opengis.net/gml/3.2}directedFace uses Python identifier directedFace
    __directedFace = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'directedFace'), 'directedFace', '__httpwww_opengis_netgml3_2_EdgeType_httpwww_opengis_netgml3_2directedFace', True)

    
    directedFace = property(__directedFace.value, __directedFace.set, None, u'The gml:directedFace property element describes the boundary of topology solids, in the coBoundary of topology edges and is used in the support of surface features via the gml:TopoSurface expression, see below. The orientation attribute of type gml:SignType expresses the sense in which the included face is used i.e. inward or outward with respect to the surface normal in any geometric realisation.')

    
    # Element {http://www.opengis.net/gml/3.2}directedNode uses Python identifier directedNode
    __directedNode = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'directedNode'), 'directedNode', '__httpwww_opengis_netgml3_2_EdgeType_httpwww_opengis_netgml3_2directedNode', True)

    
    directedNode = property(__directedNode.value, __directedNode.set, None, u'A gml:directedNode property element describes the boundary of topology edges and is used in the support of topological point features via the gml:TopoPoint expression, see below. The orientation attribute of type gml:SignType expresses the sense in which the included node is used: start ("-") or end ("+") node.')

    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Attribute aggregationType uses Python identifier aggregationType
    __aggregationType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'aggregationType'), 'aggregationType', '__httpwww_opengis_netgml3_2_EdgeType_aggregationType', AggregationType)
    
    aggregationType = property(__aggregationType.value, __aggregationType.set, None, None)

    
    # Attribute id inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType

    _ElementMap = AbstractTopoPrimitiveType._ElementMap.copy()
    _ElementMap.update({
        __curveProperty.name() : __curveProperty,
        __container.name() : __container,
        __directedFace.name() : __directedFace,
        __directedNode.name() : __directedNode
    })
    _AttributeMap = AbstractTopoPrimitiveType._AttributeMap.copy()
    _AttributeMap.update({
        __aggregationType.name() : __aggregationType
    })
_Namespace_gml.addCategoryObject('typeBinding', u'EdgeType', EdgeType)


# Complex type AbstractDQ_Result_Type with content type EMPTY
class AbstractDQ_Result_Type (AbstractObject_Type):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = True
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'AbstractDQ_Result_Type')
    # Base type is AbstractObject_Type
    
    # Attribute id inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type
    
    # Attribute uuid inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type

    _ElementMap = AbstractObject_Type._ElementMap.copy()
    _ElementMap.update({
        
    })
    _AttributeMap = AbstractObject_Type._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gmd.addCategoryObject('typeBinding', u'AbstractDQ_Result_Type', AbstractDQ_Result_Type)


# Complex type DQ_ConformanceResult_Type with content type ELEMENT_ONLY
class DQ_ConformanceResult_Type (AbstractDQ_Result_Type):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'DQ_ConformanceResult_Type')
    # Base type is AbstractDQ_Result_Type
    
    # Element {http://www.isotc211.org/2005/gmd}pass uses Python identifier pass_
    __pass = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'pass'), 'pass_', '__httpwww_isotc211_org2005gmd_DQ_ConformanceResult_Type_httpwww_isotc211_org2005gmdpass', False)

    
    pass_ = property(__pass.value, __pass.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}specification uses Python identifier specification
    __specification = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'specification'), 'specification', '__httpwww_isotc211_org2005gmd_DQ_ConformanceResult_Type_httpwww_isotc211_org2005gmdspecification', False)

    
    specification = property(__specification.value, __specification.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}explanation uses Python identifier explanation
    __explanation = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'explanation'), 'explanation', '__httpwww_isotc211_org2005gmd_DQ_ConformanceResult_Type_httpwww_isotc211_org2005gmdexplanation', False)

    
    explanation = property(__explanation.value, __explanation.set, None, None)

    
    # Attribute id inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type
    
    # Attribute uuid inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type

    _ElementMap = AbstractDQ_Result_Type._ElementMap.copy()
    _ElementMap.update({
        __pass.name() : __pass,
        __specification.name() : __specification,
        __explanation.name() : __explanation
    })
    _AttributeMap = AbstractDQ_Result_Type._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gmd.addCategoryObject('typeBinding', u'DQ_ConformanceResult_Type', DQ_ConformanceResult_Type)


# Complex type RangeSetType with content type ELEMENT_ONLY
class RangeSetType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'RangeSetType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.opengis.net/gml/3.2}ValueArray uses Python identifier ValueArray
    __ValueArray = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'ValueArray'), 'ValueArray', '__httpwww_opengis_netgml3_2_RangeSetType_httpwww_opengis_netgml3_2ValueArray', True)

    
    ValueArray = property(__ValueArray.value, __ValueArray.set, None, u'A Value Array is used for homogeneous arrays of primitive and aggregate values.  \nThe member values may be scalars, composites, arrays or lists.\nValueArray has the same content model as CompositeValue, but the member values shall be homogeneous.  The element declaration contains a Schematron constraint which expresses this restriction precisely.  Since the members are homogeneous, the gml:referenceSystem (uom, codeSpace) may be specified on the gml:ValueArray itself and inherited by all the members if desired.')

    
    # Element {http://www.opengis.net/gml/3.2}AbstractScalarValueList uses Python identifier AbstractScalarValueList
    __AbstractScalarValueList = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractScalarValueList'), 'AbstractScalarValueList', '__httpwww_opengis_netgml3_2_RangeSetType_httpwww_opengis_netgml3_2AbstractScalarValueList', True)

    
    AbstractScalarValueList = property(__AbstractScalarValueList.value, __AbstractScalarValueList.set, None, u'gml:AbstractScalarValueList is an abstract element which acts as the head of a substitution group which contains gml:BooleanList, gml:CategoryList, gml:CountList and gml:QuantityList, and (transitively) the elements in their substitution groups.')

    
    # Element {http://www.opengis.net/gml/3.2}DataBlock uses Python identifier DataBlock
    __DataBlock = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'DataBlock'), 'DataBlock', '__httpwww_opengis_netgml3_2_RangeSetType_httpwww_opengis_netgml3_2DataBlock', False)

    
    DataBlock = property(__DataBlock.value, __DataBlock.set, None, u'gml:DataBlock describes the Range as a block of text encoded values similar to a Common Separated Value (CSV) representation.\nThe range set parameterization is described by the property gml:rangeParameters.')

    
    # Element {http://www.opengis.net/gml/3.2}File uses Python identifier File
    __File = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'File'), 'File', '__httpwww_opengis_netgml3_2_RangeSetType_httpwww_opengis_netgml3_2File', False)

    
    File = property(__File.value, __File.set, None, u'for efficiency reasons, GML also provides a means of encoding the range set in an arbitrary external encoding, such as a binary file.  This encoding may be "well-known" but this is not required. This mode uses the gml:File element.\nThe values of the coverage (attribute values in the range set) are transmitted in a external file that is referenced from the XML structure described by gml:FileType.  The external file is referenced by the gml:fileReference property that is an anyURI (the gml:fileName property has been deprecated).  This means that the external file may be located remotely from the referencing GML instance. \nThe gml:compression property points to a definition of a compression algorithm through an anyURI.  This may be a retrievable, computable definition or simply a reference to an unambiguous name for the compression method.\nThe gml:mimeType property points to a definition of the file mime type.\nThe gml:fileStructure property is defined by a codelist. Note further that all values shall be enclosed in a single file. Multi-file structures for values are not supported in GML.\nThe semantics of the range set is described as above using the gml:rangeParameters property.\nNote that if any compression algorithm is applied, the structure above applies only to the pre-compression or post-decompression structure of the file.\nNote that the fields within a record match the gml:valueComponents of the gml:CompositeValue in document order.')


    _ElementMap = {
        __ValueArray.name() : __ValueArray,
        __AbstractScalarValueList.name() : __AbstractScalarValueList,
        __DataBlock.name() : __DataBlock,
        __File.name() : __File
    }
    _AttributeMap = {
        
    }
_Namespace_gml.addCategoryObject('typeBinding', u'RangeSetType', RangeSetType)


# Complex type Binary_Type with content type SIMPLE
class Binary_Type (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = pyxb.binding.datatypes.string
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gco, u'Binary_Type')
    # Base type is pyxb.binding.datatypes.string
    
    # Attribute src uses Python identifier src
    __src = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'src'), 'src', '__httpwww_isotc211_org2005gco_Binary_Type_src', pyxb.binding.datatypes.anyURI)
    
    src = property(__src.value, __src.set, None, None)


    _ElementMap = {
        
    }
    _AttributeMap = {
        __src.name() : __src
    }
_Namespace_gco.addCategoryObject('typeBinding', u'Binary_Type', Binary_Type)


# Complex type CompoundCRSType with content type ELEMENT_ONLY
class CompoundCRSType (AbstractCRSType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'CompoundCRSType')
    # Base type is AbstractCRSType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element {http://www.opengis.net/gml/3.2}componentReferenceSystem uses Python identifier componentReferenceSystem
    __componentReferenceSystem = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'componentReferenceSystem'), 'componentReferenceSystem', '__httpwww_opengis_netgml3_2_CompoundCRSType_httpwww_opengis_netgml3_2componentReferenceSystem', True)

    
    componentReferenceSystem = property(__componentReferenceSystem.value, __componentReferenceSystem.set, None, u'The gml:componentReferenceSystem elements are an ordered sequence of associations to all the component coordinate reference systems included in this compound coordinate reference system. The gml:AggregationAttributeGroup should be used to specify that the gml:componentReferenceSystem properties are ordered.')

    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element domainOfValidity ({http://www.opengis.net/gml/3.2}domainOfValidity) inherited from {http://www.opengis.net/gml/3.2}AbstractCRSType
    
    # Element scope ({http://www.opengis.net/gml/3.2}scope) inherited from {http://www.opengis.net/gml/3.2}AbstractCRSType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element remarks ({http://www.opengis.net/gml/3.2}remarks) inherited from {http://www.opengis.net/gml/3.2}DefinitionType
    
    # Attribute aggregationType uses Python identifier aggregationType
    __aggregationType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'aggregationType'), 'aggregationType', '__httpwww_opengis_netgml3_2_CompoundCRSType_aggregationType', AggregationType)
    
    aggregationType = property(__aggregationType.value, __aggregationType.set, None, None)

    
    # Attribute id_ inherited from {http://www.opengis.net/gml/3.2}DefinitionBaseType

    _ElementMap = AbstractCRSType._ElementMap.copy()
    _ElementMap.update({
        __componentReferenceSystem.name() : __componentReferenceSystem
    })
    _AttributeMap = AbstractCRSType._AttributeMap.copy()
    _AttributeMap.update({
        __aggregationType.name() : __aggregationType
    })
_Namespace_gml.addCategoryObject('typeBinding', u'CompoundCRSType', CompoundCRSType)


# Complex type AbstractDatumType with content type ELEMENT_ONLY
class AbstractDatumType (IdentifiedObjectType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = True
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractDatumType')
    # Base type is IdentifiedObjectType
    
    # Element {http://www.opengis.net/gml/3.2}scope uses Python identifier scope
    __scope = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'scope'), 'scope', '__httpwww_opengis_netgml3_2_AbstractDatumType_httpwww_opengis_netgml3_2scope', True)

    
    scope = property(__scope.value, __scope.set, None, u'The gml:scope property provides a description of the usage, or limitations of usage, for which this CRS-related object is valid. If unknown, enter "not known".')

    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element {http://www.opengis.net/gml/3.2}anchorDefinition uses Python identifier anchorDefinition
    __anchorDefinition = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'anchorDefinition'), 'anchorDefinition', '__httpwww_opengis_netgml3_2_AbstractDatumType_httpwww_opengis_netgml3_2anchorDefinition', False)

    
    anchorDefinition = property(__anchorDefinition.value, __anchorDefinition.set, None, u'gml:anchorDefinition is a description, possibly including coordinates, of the definition used to anchor the datum to the Earth. Also known as the "origin", especially for engineering and image datums. The codeSpace attribute may be used to reference a source of more detailed on this point or surface, or on a set of such descriptions.\n-\tFor a geodetic datum, this point is also known as the fundamental point, which is traditionally the point where the relationship between geoid and ellipsoid is defined. In some cases, the "fundamental point" may consist of a number of points. In those cases, the parameters defining the geoid/ellipsoid relationship have been averaged for these points, and the averages adopted as the datum definition.\n-\tFor an engineering datum, the anchor definition may be a physical point, or it may be a point with defined coordinates in another CRS.may\n-\tFor an image datum, the anchor definition is usually either the centre of the image or the corner of the image.\n-\tFor a temporal datum, this attribute is not defined. Instead of the anchor definition, a temporal datum carries a separate time origin of type DateTime.')

    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element {http://www.opengis.net/gml/3.2}realizationEpoch uses Python identifier realizationEpoch
    __realizationEpoch = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'realizationEpoch'), 'realizationEpoch', '__httpwww_opengis_netgml3_2_AbstractDatumType_httpwww_opengis_netgml3_2realizationEpoch', False)

    
    realizationEpoch = property(__realizationEpoch.value, __realizationEpoch.set, None, u'gml:realizationEpoch is the time after which this datum definition is valid. See ISO 19111 Table 32 for details.')

    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element {http://www.opengis.net/gml/3.2}domainOfValidity uses Python identifier domainOfValidity
    __domainOfValidity = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'domainOfValidity'), 'domainOfValidity', '__httpwww_opengis_netgml3_2_AbstractDatumType_httpwww_opengis_netgml3_2domainOfValidity', False)

    
    domainOfValidity = property(__domainOfValidity.value, __domainOfValidity.set, None, u'The gml:domainOfValidity property implements an association role to an EX_Extent object as encoded in ISO/TS 19139, either referencing or containing the definition of that extent.')

    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element remarks ({http://www.opengis.net/gml/3.2}remarks) inherited from {http://www.opengis.net/gml/3.2}DefinitionType
    
    # Attribute id_ inherited from {http://www.opengis.net/gml/3.2}DefinitionBaseType

    _ElementMap = IdentifiedObjectType._ElementMap.copy()
    _ElementMap.update({
        __scope.name() : __scope,
        __anchorDefinition.name() : __anchorDefinition,
        __realizationEpoch.name() : __realizationEpoch,
        __domainOfValidity.name() : __domainOfValidity
    })
    _AttributeMap = IdentifiedObjectType._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gml.addCategoryObject('typeBinding', u'AbstractDatumType', AbstractDatumType)


# Complex type VerticalDatumType with content type ELEMENT_ONLY
class VerticalDatumType (AbstractDatumType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'VerticalDatumType')
    # Base type is AbstractDatumType
    
    # Element scope ({http://www.opengis.net/gml/3.2}scope) inherited from {http://www.opengis.net/gml/3.2}AbstractDatumType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element anchorDefinition ({http://www.opengis.net/gml/3.2}anchorDefinition) inherited from {http://www.opengis.net/gml/3.2}AbstractDatumType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element realizationEpoch ({http://www.opengis.net/gml/3.2}realizationEpoch) inherited from {http://www.opengis.net/gml/3.2}AbstractDatumType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element domainOfValidity ({http://www.opengis.net/gml/3.2}domainOfValidity) inherited from {http://www.opengis.net/gml/3.2}AbstractDatumType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element remarks ({http://www.opengis.net/gml/3.2}remarks) inherited from {http://www.opengis.net/gml/3.2}DefinitionType
    
    # Attribute id_ inherited from {http://www.opengis.net/gml/3.2}DefinitionBaseType

    _ElementMap = AbstractDatumType._ElementMap.copy()
    _ElementMap.update({
        
    })
    _AttributeMap = AbstractDatumType._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gml.addCategoryObject('typeBinding', u'VerticalDatumType', VerticalDatumType)


# Complex type TemporalDatumBaseType with content type ELEMENT_ONLY
class TemporalDatumBaseType (AbstractDatumType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = True
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'TemporalDatumBaseType')
    # Base type is AbstractDatumType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element scope ({http://www.opengis.net/gml/3.2}scope) inherited from {http://www.opengis.net/gml/3.2}AbstractDatumType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element domainOfValidity ({http://www.opengis.net/gml/3.2}domainOfValidity) inherited from {http://www.opengis.net/gml/3.2}AbstractDatumType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element remarks ({http://www.opengis.net/gml/3.2}remarks) inherited from {http://www.opengis.net/gml/3.2}DefinitionType
    
    # Attribute id_ is restricted from parent
    
    # Attribute {http://www.opengis.net/gml/3.2}id uses Python identifier id_
    __id_ = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'id'), 'id_', '__httpwww_opengis_netgml3_2_DefinitionBaseType_httpwww_opengis_netgml3_2id', pyxb.binding.datatypes.ID, required=True)
    
    id_ = property(__id_.value, __id_.set, None, u'The attribute gml:id supports provision of a handle for the XML element representing a GML Object. Its use is mandatory for all GML objects. It is of XML type ID, so is constrained to be unique in the XML document within which it occurs.')


    _ElementMap = AbstractDatumType._ElementMap.copy()
    _ElementMap.update({
        
    })
    _AttributeMap = AbstractDatumType._AttributeMap.copy()
    _AttributeMap.update({
        __id_.name() : __id_
    })
_Namespace_gml.addCategoryObject('typeBinding', u'TemporalDatumBaseType', TemporalDatumBaseType)


# Complex type TemporalDatumType with content type ELEMENT_ONLY
class TemporalDatumType (TemporalDatumBaseType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'TemporalDatumType')
    # Base type is TemporalDatumBaseType
    
    # Element scope ({http://www.opengis.net/gml/3.2}scope) inherited from {http://www.opengis.net/gml/3.2}AbstractDatumType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element {http://www.opengis.net/gml/3.2}origin uses Python identifier origin
    __origin = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'origin'), 'origin', '__httpwww_opengis_netgml3_2_TemporalDatumType_httpwww_opengis_netgml3_2origin', False)

    
    origin = property(__origin.value, __origin.set, None, u'gml:origin is the date and time origin of this temporal datum.')

    
    # Element domainOfValidity ({http://www.opengis.net/gml/3.2}domainOfValidity) inherited from {http://www.opengis.net/gml/3.2}AbstractDatumType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element remarks ({http://www.opengis.net/gml/3.2}remarks) inherited from {http://www.opengis.net/gml/3.2}DefinitionType
    
    # Attribute id_2 inherited from {http://www.opengis.net/gml/3.2}TemporalDatumBaseType

    _ElementMap = TemporalDatumBaseType._ElementMap.copy()
    _ElementMap.update({
        __origin.name() : __origin
    })
    _AttributeMap = TemporalDatumBaseType._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gml.addCategoryObject('typeBinding', u'TemporalDatumType', TemporalDatumType)


# Complex type CI_OnLineFunctionCode_PropertyType with content type ELEMENT_ONLY
class CI_OnLineFunctionCode_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'CI_OnLineFunctionCode_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmd}CI_OnLineFunctionCode uses Python identifier CI_OnLineFunctionCode
    __CI_OnLineFunctionCode = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'CI_OnLineFunctionCode'), 'CI_OnLineFunctionCode', '__httpwww_isotc211_org2005gmd_CI_OnLineFunctionCode_PropertyType_httpwww_isotc211_org2005gmdCI_OnLineFunctionCode', False)

    
    CI_OnLineFunctionCode = property(__CI_OnLineFunctionCode.value, __CI_OnLineFunctionCode.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmd_CI_OnLineFunctionCode_PropertyType_httpwww_isotc211_org2005gconilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)


    _ElementMap = {
        __CI_OnLineFunctionCode.name() : __CI_OnLineFunctionCode
    }
    _AttributeMap = {
        __nilReason.name() : __nilReason
    }
_Namespace_gmd.addCategoryObject('typeBinding', u'CI_OnLineFunctionCode_PropertyType', CI_OnLineFunctionCode_PropertyType)


# Complex type ImageCRSType with content type ELEMENT_ONLY
class ImageCRSType (AbstractCRSType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'ImageCRSType')
    # Base type is AbstractCRSType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element {http://www.opengis.net/gml/3.2}affineCS uses Python identifier affineCS
    __affineCS = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'affineCS'), 'affineCS', '__httpwww_opengis_netgml3_2_ImageCRSType_httpwww_opengis_netgml3_2affineCS', False)

    
    affineCS = property(__affineCS.value, __affineCS.set, None, u'gml:affineCS is an association role to the affine coordinate system used by this CRS.')

    
    # Element {http://www.opengis.net/gml/3.2}usesObliqueCartesianCS uses Python identifier usesObliqueCartesianCS
    __usesObliqueCartesianCS = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'usesObliqueCartesianCS'), 'usesObliqueCartesianCS', '__httpwww_opengis_netgml3_2_ImageCRSType_httpwww_opengis_netgml3_2usesObliqueCartesianCS', False)

    
    usesObliqueCartesianCS = property(__usesObliqueCartesianCS.value, __usesObliqueCartesianCS.set, None, u'')

    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element domainOfValidity ({http://www.opengis.net/gml/3.2}domainOfValidity) inherited from {http://www.opengis.net/gml/3.2}AbstractCRSType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element scope ({http://www.opengis.net/gml/3.2}scope) inherited from {http://www.opengis.net/gml/3.2}AbstractCRSType
    
    # Element {http://www.opengis.net/gml/3.2}cartesianCS uses Python identifier cartesianCS
    __cartesianCS = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'cartesianCS'), 'cartesianCS', '__httpwww_opengis_netgml3_2_ImageCRSType_httpwww_opengis_netgml3_2cartesianCS', False)

    
    cartesianCS = property(__cartesianCS.value, __cartesianCS.set, None, u'gml:cartesianCS is an association role to the Cartesian coordinate system used by this CRS.')

    
    # Element remarks ({http://www.opengis.net/gml/3.2}remarks) inherited from {http://www.opengis.net/gml/3.2}DefinitionType
    
    # Element {http://www.opengis.net/gml/3.2}imageDatum uses Python identifier imageDatum
    __imageDatum = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'imageDatum'), 'imageDatum', '__httpwww_opengis_netgml3_2_ImageCRSType_httpwww_opengis_netgml3_2imageDatum', False)

    
    imageDatum = property(__imageDatum.value, __imageDatum.set, None, u'gml:imageDatum is an association role to the image datum used by this CRS.')

    
    # Attribute id_ inherited from {http://www.opengis.net/gml/3.2}DefinitionBaseType

    _ElementMap = AbstractCRSType._ElementMap.copy()
    _ElementMap.update({
        __affineCS.name() : __affineCS,
        __usesObliqueCartesianCS.name() : __usesObliqueCartesianCS,
        __cartesianCS.name() : __cartesianCS,
        __imageDatum.name() : __imageDatum
    })
    _AttributeMap = AbstractCRSType._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gml.addCategoryObject('typeBinding', u'ImageCRSType', ImageCRSType)


# Complex type CoordinatesType with content type SIMPLE
class CoordinatesType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = pyxb.binding.datatypes.string
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'CoordinatesType')
    # Base type is pyxb.binding.datatypes.string
    
    # Attribute cs uses Python identifier cs
    __cs = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'cs'), 'cs', '__httpwww_opengis_netgml3_2_CoordinatesType_cs', pyxb.binding.datatypes.string, unicode_default=u',')
    
    cs = property(__cs.value, __cs.set, None, None)

    
    # Attribute decimal uses Python identifier decimal
    __decimal = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'decimal'), 'decimal', '__httpwww_opengis_netgml3_2_CoordinatesType_decimal', pyxb.binding.datatypes.string, unicode_default=u'.')
    
    decimal = property(__decimal.value, __decimal.set, None, None)

    
    # Attribute ts uses Python identifier ts
    __ts = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'ts'), 'ts', '__httpwww_opengis_netgml3_2_CoordinatesType_ts', pyxb.binding.datatypes.string, unicode_default=u' ')
    
    ts = property(__ts.value, __ts.set, None, None)


    _ElementMap = {
        
    }
    _AttributeMap = {
        __cs.name() : __cs,
        __decimal.name() : __decimal,
        __ts.name() : __ts
    }
_Namespace_gml.addCategoryObject('typeBinding', u'CoordinatesType', CoordinatesType)


# Complex type DirectPositionType with content type SIMPLE
class DirectPositionType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = doubleList
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'DirectPositionType')
    # Base type is doubleList
    
    # Attribute srsName uses Python identifier srsName
    __srsName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'srsName'), 'srsName', '__httpwww_opengis_netgml3_2_DirectPositionType_srsName', pyxb.binding.datatypes.anyURI)
    
    srsName = property(__srsName.value, __srsName.set, None, None)

    
    # Attribute axisLabels uses Python identifier axisLabels
    __axisLabels = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'axisLabels'), 'axisLabels', '__httpwww_opengis_netgml3_2_DirectPositionType_axisLabels', NCNameList)
    
    axisLabels = property(__axisLabels.value, __axisLabels.set, None, None)

    
    # Attribute uomLabels uses Python identifier uomLabels
    __uomLabels = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uomLabels'), 'uomLabels', '__httpwww_opengis_netgml3_2_DirectPositionType_uomLabels', NCNameList)
    
    uomLabels = property(__uomLabels.value, __uomLabels.set, None, None)

    
    # Attribute srsDimension uses Python identifier srsDimension
    __srsDimension = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'srsDimension'), 'srsDimension', '__httpwww_opengis_netgml3_2_DirectPositionType_srsDimension', pyxb.binding.datatypes.positiveInteger)
    
    srsDimension = property(__srsDimension.value, __srsDimension.set, None, None)


    _ElementMap = {
        
    }
    _AttributeMap = {
        __srsName.name() : __srsName,
        __axisLabels.name() : __axisLabels,
        __uomLabels.name() : __uomLabels,
        __srsDimension.name() : __srsDimension
    }
_Namespace_gml.addCategoryObject('typeBinding', u'DirectPositionType', DirectPositionType)


# Complex type CI_OnlineResource_PropertyType with content type ELEMENT_ONLY
class CI_OnlineResource_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'CI_OnlineResource_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmd}CI_OnlineResource uses Python identifier CI_OnlineResource
    __CI_OnlineResource = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'CI_OnlineResource'), 'CI_OnlineResource', '__httpwww_isotc211_org2005gmd_CI_OnlineResource_PropertyType_httpwww_isotc211_org2005gmdCI_OnlineResource', False)

    
    CI_OnlineResource = property(__CI_OnlineResource.value, __CI_OnlineResource.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_isotc211_org2005gmd_CI_OnlineResource_PropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_isotc211_org2005gmd_CI_OnlineResource_PropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_isotc211_org2005gmd_CI_OnlineResource_PropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_isotc211_org2005gmd_CI_OnlineResource_PropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute uuidref uses Python identifier uuidref
    __uuidref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uuidref'), 'uuidref', '__httpwww_isotc211_org2005gmd_CI_OnlineResource_PropertyType_uuidref', pyxb.binding.datatypes.string)
    
    uuidref = property(__uuidref.value, __uuidref.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_isotc211_org2005gmd_CI_OnlineResource_PropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_isotc211_org2005gmd_CI_OnlineResource_PropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmd_CI_OnlineResource_PropertyType_httpwww_isotc211_org2005gconilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_isotc211_org2005gmd_CI_OnlineResource_PropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)


    _ElementMap = {
        __CI_OnlineResource.name() : __CI_OnlineResource
    }
    _AttributeMap = {
        __type.name() : __type,
        __show.name() : __show,
        __href.name() : __href,
        __actuate.name() : __actuate,
        __uuidref.name() : __uuidref,
        __arcrole.name() : __arcrole,
        __role.name() : __role,
        __nilReason.name() : __nilReason,
        __title.name() : __title
    }
_Namespace_gmd.addCategoryObject('typeBinding', u'CI_OnlineResource_PropertyType', CI_OnlineResource_PropertyType)


# Complex type DS_Platform_PropertyType with content type ELEMENT_ONLY
class DS_Platform_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'DS_Platform_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmd}DS_Platform uses Python identifier DS_Platform
    __DS_Platform = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'DS_Platform'), 'DS_Platform', '__httpwww_isotc211_org2005gmd_DS_Platform_PropertyType_httpwww_isotc211_org2005gmdDS_Platform', False)

    
    DS_Platform = property(__DS_Platform.value, __DS_Platform.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_isotc211_org2005gmd_DS_Platform_PropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_isotc211_org2005gmd_DS_Platform_PropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_isotc211_org2005gmd_DS_Platform_PropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_isotc211_org2005gmd_DS_Platform_PropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute uuidref uses Python identifier uuidref
    __uuidref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uuidref'), 'uuidref', '__httpwww_isotc211_org2005gmd_DS_Platform_PropertyType_uuidref', pyxb.binding.datatypes.string)
    
    uuidref = property(__uuidref.value, __uuidref.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_isotc211_org2005gmd_DS_Platform_PropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_isotc211_org2005gmd_DS_Platform_PropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmd_DS_Platform_PropertyType_httpwww_isotc211_org2005gconilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_isotc211_org2005gmd_DS_Platform_PropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)


    _ElementMap = {
        __DS_Platform.name() : __DS_Platform
    }
    _AttributeMap = {
        __type.name() : __type,
        __show.name() : __show,
        __href.name() : __href,
        __actuate.name() : __actuate,
        __uuidref.name() : __uuidref,
        __arcrole.name() : __arcrole,
        __role.name() : __role,
        __nilReason.name() : __nilReason,
        __title.name() : __title
    }
_Namespace_gmd.addCategoryObject('typeBinding', u'DS_Platform_PropertyType', DS_Platform_PropertyType)


# Complex type MD_Constraints_PropertyType with content type ELEMENT_ONLY
class MD_Constraints_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_Constraints_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmd}MD_Constraints uses Python identifier MD_Constraints
    __MD_Constraints = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_Constraints'), 'MD_Constraints', '__httpwww_isotc211_org2005gmd_MD_Constraints_PropertyType_httpwww_isotc211_org2005gmdMD_Constraints', False)

    
    MD_Constraints = property(__MD_Constraints.value, __MD_Constraints.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_isotc211_org2005gmd_MD_Constraints_PropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_isotc211_org2005gmd_MD_Constraints_PropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_isotc211_org2005gmd_MD_Constraints_PropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_isotc211_org2005gmd_MD_Constraints_PropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute uuidref uses Python identifier uuidref
    __uuidref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uuidref'), 'uuidref', '__httpwww_isotc211_org2005gmd_MD_Constraints_PropertyType_uuidref', pyxb.binding.datatypes.string)
    
    uuidref = property(__uuidref.value, __uuidref.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_isotc211_org2005gmd_MD_Constraints_PropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_isotc211_org2005gmd_MD_Constraints_PropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmd_MD_Constraints_PropertyType_httpwww_isotc211_org2005gconilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_isotc211_org2005gmd_MD_Constraints_PropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)


    _ElementMap = {
        __MD_Constraints.name() : __MD_Constraints
    }
    _AttributeMap = {
        __type.name() : __type,
        __show.name() : __show,
        __href.name() : __href,
        __actuate.name() : __actuate,
        __uuidref.name() : __uuidref,
        __arcrole.name() : __arcrole,
        __role.name() : __role,
        __nilReason.name() : __nilReason,
        __title.name() : __title
    }
_Namespace_gmd.addCategoryObject('typeBinding', u'MD_Constraints_PropertyType', MD_Constraints_PropertyType)


# Complex type AbstractFeatureType with content type ELEMENT_ONLY
class AbstractFeatureType (AbstractGMLType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = True
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractFeatureType')
    # Base type is AbstractGMLType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element {http://www.opengis.net/gml/3.2}boundedBy uses Python identifier boundedBy
    __boundedBy = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'boundedBy'), 'boundedBy', '__httpwww_opengis_netgml3_2_AbstractFeatureType_httpwww_opengis_netgml3_2boundedBy', False)

    
    boundedBy = property(__boundedBy.value, __boundedBy.set, None, u'This property describes the minimum bounding box or rectangle that encloses the entire feature.')

    
    # Element {http://www.opengis.net/gml/3.2}location uses Python identifier location
    __location = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'location'), 'location', '__httpwww_opengis_netgml3_2_AbstractFeatureType_httpwww_opengis_netgml3_2location', False)

    
    location = property(__location.value, __location.set, None, u'')

    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Attribute id inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType

    _ElementMap = AbstractGMLType._ElementMap.copy()
    _ElementMap.update({
        __boundedBy.name() : __boundedBy,
        __location.name() : __location
    })
    _AttributeMap = AbstractGMLType._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gml.addCategoryObject('typeBinding', u'AbstractFeatureType', AbstractFeatureType)


# Complex type BoundedFeatureType with content type ELEMENT_ONLY
class BoundedFeatureType (AbstractFeatureType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = True
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'BoundedFeatureType')
    # Base type is AbstractFeatureType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element location ({http://www.opengis.net/gml/3.2}location) inherited from {http://www.opengis.net/gml/3.2}AbstractFeatureType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element boundedBy ({http://www.opengis.net/gml/3.2}boundedBy) inherited from {http://www.opengis.net/gml/3.2}AbstractFeatureType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Attribute id inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType

    _ElementMap = AbstractFeatureType._ElementMap.copy()
    _ElementMap.update({
        
    })
    _AttributeMap = AbstractFeatureType._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gml.addCategoryObject('typeBinding', u'BoundedFeatureType', BoundedFeatureType)


# Complex type MD_DistributionUnits_PropertyType with content type ELEMENT_ONLY
class MD_DistributionUnits_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_DistributionUnits_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmd}MD_DistributionUnits uses Python identifier MD_DistributionUnits
    __MD_DistributionUnits = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_DistributionUnits'), 'MD_DistributionUnits', '__httpwww_isotc211_org2005gmd_MD_DistributionUnits_PropertyType_httpwww_isotc211_org2005gmdMD_DistributionUnits', False)

    
    MD_DistributionUnits = property(__MD_DistributionUnits.value, __MD_DistributionUnits.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmd_MD_DistributionUnits_PropertyType_httpwww_isotc211_org2005gconilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)


    _ElementMap = {
        __MD_DistributionUnits.name() : __MD_DistributionUnits
    }
    _AttributeMap = {
        __nilReason.name() : __nilReason
    }
_Namespace_gmd.addCategoryObject('typeBinding', u'MD_DistributionUnits_PropertyType', MD_DistributionUnits_PropertyType)


# Complex type ConversionPropertyType with content type ELEMENT_ONLY
class ConversionPropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'ConversionPropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.opengis.net/gml/3.2}Conversion uses Python identifier Conversion
    __Conversion = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'Conversion'), 'Conversion', '__httpwww_opengis_netgml3_2_ConversionPropertyType_httpwww_opengis_netgml3_2Conversion', False)

    
    Conversion = property(__Conversion.value, __Conversion.set, None, u'gml:Conversion is a concrete operation on coordinates that does not include any change of Datum. The best-known example of a coordinate conversion is a map projection. The parameters describing coordinate conversions are defined rather than empirically derived. Note that some conversions have no parameters.\nThis concrete complex type can be used without using a GML Application Schema that defines operation-method-specialized element names and contents, especially for methods with only one Conversion instance.\nThe usesValue property elements are an unordered list of composition associations to the set of parameter values used by this conversion operation.')

    
    # Attribute {http://www.opengis.net/gml/3.2}remoteSchema uses Python identifier remoteSchema
    __remoteSchema = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'remoteSchema'), 'remoteSchema', '__httpwww_opengis_netgml3_2_ConversionPropertyType_httpwww_opengis_netgml3_2remoteSchema', pyxb.binding.datatypes.anyURI)
    
    remoteSchema = property(__remoteSchema.value, __remoteSchema.set, None, u'')

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_opengis_netgml3_2_ConversionPropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_opengis_netgml3_2_ConversionPropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_opengis_netgml3_2_ConversionPropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_opengis_netgml3_2_ConversionPropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_opengis_netgml3_2_ConversionPropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'nilReason'), 'nilReason', '__httpwww_opengis_netgml3_2_ConversionPropertyType_nilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_opengis_netgml3_2_ConversionPropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_opengis_netgml3_2_ConversionPropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)


    _ElementMap = {
        __Conversion.name() : __Conversion
    }
    _AttributeMap = {
        __remoteSchema.name() : __remoteSchema,
        __type.name() : __type,
        __show.name() : __show,
        __title.name() : __title,
        __arcrole.name() : __arcrole,
        __role.name() : __role,
        __nilReason.name() : __nilReason,
        __actuate.name() : __actuate,
        __href.name() : __href
    }
_Namespace_gml.addCategoryObject('typeBinding', u'ConversionPropertyType', ConversionPropertyType)


# Complex type TimeCSPropertyType with content type ELEMENT_ONLY
class TimeCSPropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'TimeCSPropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.opengis.net/gml/3.2}TimeCS uses Python identifier TimeCS
    __TimeCS = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'TimeCS'), 'TimeCS', '__httpwww_opengis_netgml3_2_TimeCSPropertyType_httpwww_opengis_netgml3_2TimeCS', False)

    
    TimeCS = property(__TimeCS.value, __TimeCS.set, None, u'gml:TimeCS is a one-dimensional coordinate system containing a time axis, used to describe the temporal position of a point in the specified time units from a specified time origin. A TimeCS shall have one gml:axis property element.')

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_opengis_netgml3_2_TimeCSPropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.opengis.net/gml/3.2}remoteSchema uses Python identifier remoteSchema
    __remoteSchema = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'remoteSchema'), 'remoteSchema', '__httpwww_opengis_netgml3_2_TimeCSPropertyType_httpwww_opengis_netgml3_2remoteSchema', pyxb.binding.datatypes.anyURI)
    
    remoteSchema = property(__remoteSchema.value, __remoteSchema.set, None, u'')

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_opengis_netgml3_2_TimeCSPropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_opengis_netgml3_2_TimeCSPropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_opengis_netgml3_2_TimeCSPropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'nilReason'), 'nilReason', '__httpwww_opengis_netgml3_2_TimeCSPropertyType_nilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_opengis_netgml3_2_TimeCSPropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_opengis_netgml3_2_TimeCSPropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_opengis_netgml3_2_TimeCSPropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)


    _ElementMap = {
        __TimeCS.name() : __TimeCS
    }
    _AttributeMap = {
        __arcrole.name() : __arcrole,
        __remoteSchema.name() : __remoteSchema,
        __role.name() : __role,
        __show.name() : __show,
        __actuate.name() : __actuate,
        __nilReason.name() : __nilReason,
        __href.name() : __href,
        __type.name() : __type,
        __title.name() : __title
    }
_Namespace_gml.addCategoryObject('typeBinding', u'TimeCSPropertyType', TimeCSPropertyType)


# Complex type AbstractTimeSliceType with content type ELEMENT_ONLY
class AbstractTimeSliceType (AbstractGMLType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = True
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractTimeSliceType')
    # Base type is AbstractGMLType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element {http://www.opengis.net/gml/3.2}validTime uses Python identifier validTime
    __validTime = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'validTime'), 'validTime', '__httpwww_opengis_netgml3_2_AbstractTimeSliceType_httpwww_opengis_netgml3_2validTime', False)

    
    validTime = property(__validTime.value, __validTime.set, None, u'gml:validTime is a convenience property element.')

    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element {http://www.opengis.net/gml/3.2}dataSource uses Python identifier dataSource
    __dataSource = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'dataSource'), 'dataSource', '__httpwww_opengis_netgml3_2_AbstractTimeSliceType_httpwww_opengis_netgml3_2dataSource', False)

    
    dataSource = property(__dataSource.value, __dataSource.set, None, u'Evidence is represented by a simple gml:dataSource or gml:dataSourceReference property that indicates the source of the temporal data. The remote link attributes of the gml:dataSource element have been deprecated along with its current type.')

    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Attribute id inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType

    _ElementMap = AbstractGMLType._ElementMap.copy()
    _ElementMap.update({
        __validTime.name() : __validTime,
        __dataSource.name() : __dataSource
    })
    _AttributeMap = AbstractGMLType._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gml.addCategoryObject('typeBinding', u'AbstractTimeSliceType', AbstractTimeSliceType)


# Complex type AbstractTimeObjectType with content type ELEMENT_ONLY
class AbstractTimeObjectType (AbstractGMLType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = True
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractTimeObjectType')
    # Base type is AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Attribute id inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType

    _ElementMap = AbstractGMLType._ElementMap.copy()
    _ElementMap.update({
        
    })
    _AttributeMap = AbstractGMLType._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gml.addCategoryObject('typeBinding', u'AbstractTimeObjectType', AbstractTimeObjectType)


# Complex type AbstractTimePrimitiveType with content type ELEMENT_ONLY
class AbstractTimePrimitiveType (AbstractTimeObjectType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = True
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractTimePrimitiveType')
    # Base type is AbstractTimeObjectType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element {http://www.opengis.net/gml/3.2}relatedTime uses Python identifier relatedTime
    __relatedTime = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'relatedTime'), 'relatedTime', '__httpwww_opengis_netgml3_2_AbstractTimePrimitiveType_httpwww_opengis_netgml3_2relatedTime', True)

    
    relatedTime = property(__relatedTime.value, __relatedTime.set, None, None)

    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Attribute id inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType

    _ElementMap = AbstractTimeObjectType._ElementMap.copy()
    _ElementMap.update({
        __relatedTime.name() : __relatedTime
    })
    _AttributeMap = AbstractTimeObjectType._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gml.addCategoryObject('typeBinding', u'AbstractTimePrimitiveType', AbstractTimePrimitiveType)


# Complex type AbstractTimeGeometricPrimitiveType with content type ELEMENT_ONLY
class AbstractTimeGeometricPrimitiveType (AbstractTimePrimitiveType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = True
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractTimeGeometricPrimitiveType')
    # Base type is AbstractTimePrimitiveType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element relatedTime ({http://www.opengis.net/gml/3.2}relatedTime) inherited from {http://www.opengis.net/gml/3.2}AbstractTimePrimitiveType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Attribute frame uses Python identifier frame
    __frame = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'frame'), 'frame', '__httpwww_opengis_netgml3_2_AbstractTimeGeometricPrimitiveType_frame', pyxb.binding.datatypes.anyURI, unicode_default=u'#ISO-8601')
    
    frame = property(__frame.value, __frame.set, None, None)

    
    # Attribute id inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType

    _ElementMap = AbstractTimePrimitiveType._ElementMap.copy()
    _ElementMap.update({
        
    })
    _AttributeMap = AbstractTimePrimitiveType._AttributeMap.copy()
    _AttributeMap.update({
        __frame.name() : __frame
    })
_Namespace_gml.addCategoryObject('typeBinding', u'AbstractTimeGeometricPrimitiveType', AbstractTimeGeometricPrimitiveType)


# Complex type TimeInstantType with content type ELEMENT_ONLY
class TimeInstantType (AbstractTimeGeometricPrimitiveType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'TimeInstantType')
    # Base type is AbstractTimeGeometricPrimitiveType
    
    # Element {http://www.opengis.net/gml/3.2}timePosition uses Python identifier timePosition
    __timePosition = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'timePosition'), 'timePosition', '__httpwww_opengis_netgml3_2_TimeInstantType_httpwww_opengis_netgml3_2timePosition', False)

    
    timePosition = property(__timePosition.value, __timePosition.set, None, u'This element is used directly as a property of gml:TimeInstant (see 15.2.2.3), and may also be used in application schemas.')

    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element relatedTime ({http://www.opengis.net/gml/3.2}relatedTime) inherited from {http://www.opengis.net/gml/3.2}AbstractTimePrimitiveType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Attribute frame inherited from {http://www.opengis.net/gml/3.2}AbstractTimeGeometricPrimitiveType
    
    # Attribute id inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType

    _ElementMap = AbstractTimeGeometricPrimitiveType._ElementMap.copy()
    _ElementMap.update({
        __timePosition.name() : __timePosition
    })
    _AttributeMap = AbstractTimeGeometricPrimitiveType._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gml.addCategoryObject('typeBinding', u'TimeInstantType', TimeInstantType)


# Complex type CodeType with content type SIMPLE
class CodeType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = pyxb.binding.datatypes.string
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'CodeType')
    # Base type is pyxb.binding.datatypes.string
    
    # Attribute codeSpace uses Python identifier codeSpace
    __codeSpace = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'codeSpace'), 'codeSpace', '__httpwww_opengis_netgml3_2_CodeType_codeSpace', pyxb.binding.datatypes.anyURI)
    
    codeSpace = property(__codeSpace.value, __codeSpace.set, None, None)


    _ElementMap = {
        
    }
    _AttributeMap = {
        __codeSpace.name() : __codeSpace
    }
_Namespace_gml.addCategoryObject('typeBinding', u'CodeType', CodeType)


# Complex type CodeWithAuthorityType with content type SIMPLE
class CodeWithAuthorityType (CodeType):
    _TypeDefinition = STD_ANON_8
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'CodeWithAuthorityType')
    # Base type is CodeType
    
    # Attribute codeSpace is restricted from parent
    
    # Attribute codeSpace uses Python identifier codeSpace
    __codeSpace = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'codeSpace'), 'codeSpace', '__httpwww_opengis_netgml3_2_CodeType_codeSpace', pyxb.binding.datatypes.anyURI, required=True)
    
    codeSpace = property(__codeSpace.value, __codeSpace.set, None, None)


    _ElementMap = CodeType._ElementMap.copy()
    _ElementMap.update({
        
    })
    _AttributeMap = CodeType._AttributeMap.copy()
    _AttributeMap.update({
        __codeSpace.name() : __codeSpace
    })
_Namespace_gml.addCategoryObject('typeBinding', u'CodeWithAuthorityType', CodeWithAuthorityType)


# Complex type CI_RoleCode_PropertyType with content type ELEMENT_ONLY
class CI_RoleCode_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'CI_RoleCode_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmd}CI_RoleCode uses Python identifier CI_RoleCode
    __CI_RoleCode = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'CI_RoleCode'), 'CI_RoleCode', '__httpwww_isotc211_org2005gmd_CI_RoleCode_PropertyType_httpwww_isotc211_org2005gmdCI_RoleCode', False)

    
    CI_RoleCode = property(__CI_RoleCode.value, __CI_RoleCode.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmd_CI_RoleCode_PropertyType_httpwww_isotc211_org2005gconilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)


    _ElementMap = {
        __CI_RoleCode.name() : __CI_RoleCode
    }
    _AttributeMap = {
        __nilReason.name() : __nilReason
    }
_Namespace_gmd.addCategoryObject('typeBinding', u'CI_RoleCode_PropertyType', CI_RoleCode_PropertyType)


# Complex type AbstractGeneralParameterValuePropertyType with content type ELEMENT_ONLY
class AbstractGeneralParameterValuePropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractGeneralParameterValuePropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.opengis.net/gml/3.2}AbstractGeneralParameterValue uses Python identifier AbstractGeneralParameterValue
    __AbstractGeneralParameterValue = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractGeneralParameterValue'), 'AbstractGeneralParameterValue', '__httpwww_opengis_netgml3_2_AbstractGeneralParameterValuePropertyType_httpwww_opengis_netgml3_2AbstractGeneralParameterValue', False)

    
    AbstractGeneralParameterValue = property(__AbstractGeneralParameterValue.value, __AbstractGeneralParameterValue.set, None, u'gml:AbstractGeneralParameterValue is an abstract parameter value or group of parameter values.\nThis abstract complexType is expected to be extended and restricted for well-known operation methods with many instances, in Application Schemas that define operation-method-specialized element names and contents. Specific parameter value elements are directly contained in concrete subtypes, not in this abstract type. All concrete types derived from this type shall extend this type to include one "...Value" element with an appropriate type, which should be one of the element types allowed in the ParameterValueType. In addition, all derived concrete types shall extend this type to include a "operationParameter" property element that references one element substitutable for the "OperationParameter" object element.')


    _ElementMap = {
        __AbstractGeneralParameterValue.name() : __AbstractGeneralParameterValue
    }
    _AttributeMap = {
        
    }
_Namespace_gml.addCategoryObject('typeBinding', u'AbstractGeneralParameterValuePropertyType', AbstractGeneralParameterValuePropertyType)


# Complex type CoverageFunctionType with content type ELEMENT_ONLY
class CoverageFunctionType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'CoverageFunctionType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.opengis.net/gml/3.2}MappingRule uses Python identifier MappingRule
    __MappingRule = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'MappingRule'), 'MappingRule', '__httpwww_opengis_netgml3_2_CoverageFunctionType_httpwww_opengis_netgml3_2MappingRule', False)

    
    MappingRule = property(__MappingRule.value, __MappingRule.set, None, u'')

    
    # Element {http://www.opengis.net/gml/3.2}CoverageMappingRule uses Python identifier CoverageMappingRule
    __CoverageMappingRule = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'CoverageMappingRule'), 'CoverageMappingRule', '__httpwww_opengis_netgml3_2_CoverageFunctionType_httpwww_opengis_netgml3_2CoverageMappingRule', False)

    
    CoverageMappingRule = property(__CoverageMappingRule.value, __CoverageMappingRule.set, None, u"gml:CoverageMappingRule provides a formal or informal description of the coverage function.\nThe mapping rule may be defined as an in-line string (gml:ruleDefinition) or via a remote reference through xlink:href (gml:ruleReference).  \nIf no rule name is specified, the default is 'Linear' with respect to members of the domain in document order.")

    
    # Element {http://www.opengis.net/gml/3.2}GridFunction uses Python identifier GridFunction
    __GridFunction = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'GridFunction'), 'GridFunction', '__httpwww_opengis_netgml3_2_CoverageFunctionType_httpwww_opengis_netgml3_2GridFunction', False)

    
    GridFunction = property(__GridFunction.value, __GridFunction.set, None, u'gml:GridFunction provides an explicit mapping rule for grid geometries, i.e. the domain shall be a geometry of type grid.  It describes the mapping of grid posts (discrete point grid coverage) or grid cells (discrete surface coverage) to the values in the range set.\nThe gml:startPoint is the index position of a point in the grid that is mapped to the first point in the range set (this is also the index position of the first grid post).  If the gml:startPoint property is omitted the gml:startPoint is assumed to be equal to the value of gml:low in the gml:Grid geometry. Subsequent points in the mapping are determined by the value of the gml:sequenceRule.')


    _ElementMap = {
        __MappingRule.name() : __MappingRule,
        __CoverageMappingRule.name() : __CoverageMappingRule,
        __GridFunction.name() : __GridFunction
    }
    _AttributeMap = {
        
    }
_Namespace_gml.addCategoryObject('typeBinding', u'CoverageFunctionType', CoverageFunctionType)


# Complex type CodeOrNilReasonListType with content type SIMPLE
class CodeOrNilReasonListType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = NameOrNilReasonList
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'CodeOrNilReasonListType')
    # Base type is NameOrNilReasonList
    
    # Attribute codeSpace uses Python identifier codeSpace
    __codeSpace = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'codeSpace'), 'codeSpace', '__httpwww_opengis_netgml3_2_CodeOrNilReasonListType_codeSpace', pyxb.binding.datatypes.anyURI)
    
    codeSpace = property(__codeSpace.value, __codeSpace.set, None, None)


    _ElementMap = {
        
    }
    _AttributeMap = {
        __codeSpace.name() : __codeSpace
    }
_Namespace_gml.addCategoryObject('typeBinding', u'CodeOrNilReasonListType', CodeOrNilReasonListType)


# Complex type AbstractCoordinateSystemType with content type ELEMENT_ONLY
class AbstractCoordinateSystemType (IdentifiedObjectType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = True
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractCoordinateSystemType')
    # Base type is IdentifiedObjectType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element {http://www.opengis.net/gml/3.2}axis uses Python identifier axis
    __axis = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'axis'), 'axis', '__httpwww_opengis_netgml3_2_AbstractCoordinateSystemType_httpwww_opengis_netgml3_2axis', True)

    
    axis = property(__axis.value, __axis.set, None, u'The gml:axis property is an association role (ordered sequence) to the coordinate system axes included in this coordinate system. The coordinate values in a coordinate tuple shall be recorded in the order in which the coordinate system axes associations are recorded, whenever those coordinates use a coordinate reference system that uses this coordinate system. The gml:AggregationAttributeGroup should be used to specify that the axis objects are ordered.')

    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element remarks ({http://www.opengis.net/gml/3.2}remarks) inherited from {http://www.opengis.net/gml/3.2}DefinitionType
    
    # Attribute aggregationType uses Python identifier aggregationType
    __aggregationType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'aggregationType'), 'aggregationType', '__httpwww_opengis_netgml3_2_AbstractCoordinateSystemType_aggregationType', AggregationType)
    
    aggregationType = property(__aggregationType.value, __aggregationType.set, None, None)

    
    # Attribute id_ inherited from {http://www.opengis.net/gml/3.2}DefinitionBaseType

    _ElementMap = IdentifiedObjectType._ElementMap.copy()
    _ElementMap.update({
        __axis.name() : __axis
    })
    _AttributeMap = IdentifiedObjectType._AttributeMap.copy()
    _AttributeMap.update({
        __aggregationType.name() : __aggregationType
    })
_Namespace_gml.addCategoryObject('typeBinding', u'AbstractCoordinateSystemType', AbstractCoordinateSystemType)


# Complex type AffineCSType with content type ELEMENT_ONLY
class AffineCSType (AbstractCoordinateSystemType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'AffineCSType')
    # Base type is AbstractCoordinateSystemType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element axis ({http://www.opengis.net/gml/3.2}axis) inherited from {http://www.opengis.net/gml/3.2}AbstractCoordinateSystemType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element remarks ({http://www.opengis.net/gml/3.2}remarks) inherited from {http://www.opengis.net/gml/3.2}DefinitionType
    
    # Attribute aggregationType inherited from {http://www.opengis.net/gml/3.2}AbstractCoordinateSystemType
    
    # Attribute id_ inherited from {http://www.opengis.net/gml/3.2}DefinitionBaseType

    _ElementMap = AbstractCoordinateSystemType._ElementMap.copy()
    _ElementMap.update({
        
    })
    _AttributeMap = AbstractCoordinateSystemType._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gml.addCategoryObject('typeBinding', u'AffineCSType', AffineCSType)


# Complex type PolarCSType with content type ELEMENT_ONLY
class PolarCSType (AbstractCoordinateSystemType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'PolarCSType')
    # Base type is AbstractCoordinateSystemType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element axis ({http://www.opengis.net/gml/3.2}axis) inherited from {http://www.opengis.net/gml/3.2}AbstractCoordinateSystemType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element remarks ({http://www.opengis.net/gml/3.2}remarks) inherited from {http://www.opengis.net/gml/3.2}DefinitionType
    
    # Attribute aggregationType inherited from {http://www.opengis.net/gml/3.2}AbstractCoordinateSystemType
    
    # Attribute id_ inherited from {http://www.opengis.net/gml/3.2}DefinitionBaseType

    _ElementMap = AbstractCoordinateSystemType._ElementMap.copy()
    _ElementMap.update({
        
    })
    _AttributeMap = AbstractCoordinateSystemType._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gml.addCategoryObject('typeBinding', u'PolarCSType', PolarCSType)


# Complex type TemporalCRSType with content type ELEMENT_ONLY
class TemporalCRSType (AbstractCRSType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'TemporalCRSType')
    # Base type is AbstractCRSType
    
    # Element {http://www.opengis.net/gml/3.2}temporalDatum uses Python identifier temporalDatum
    __temporalDatum = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'temporalDatum'), 'temporalDatum', '__httpwww_opengis_netgml3_2_TemporalCRSType_httpwww_opengis_netgml3_2temporalDatum', False)

    
    temporalDatum = property(__temporalDatum.value, __temporalDatum.set, None, u'gml:temporalDatum is an association role to the temporal datum used by this CRS.')

    
    # Element {http://www.opengis.net/gml/3.2}usesTemporalCS uses Python identifier usesTemporalCS
    __usesTemporalCS = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'usesTemporalCS'), 'usesTemporalCS', '__httpwww_opengis_netgml3_2_TemporalCRSType_httpwww_opengis_netgml3_2usesTemporalCS', False)

    
    usesTemporalCS = property(__usesTemporalCS.value, __usesTemporalCS.set, None, u'')

    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element domainOfValidity ({http://www.opengis.net/gml/3.2}domainOfValidity) inherited from {http://www.opengis.net/gml/3.2}AbstractCRSType
    
    # Element scope ({http://www.opengis.net/gml/3.2}scope) inherited from {http://www.opengis.net/gml/3.2}AbstractCRSType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element {http://www.opengis.net/gml/3.2}timeCS uses Python identifier timeCS
    __timeCS = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'timeCS'), 'timeCS', '__httpwww_opengis_netgml3_2_TemporalCRSType_httpwww_opengis_netgml3_2timeCS', False)

    
    timeCS = property(__timeCS.value, __timeCS.set, None, u'gml:timeCS is an association role to the time coordinate system used by this CRS.')

    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element remarks ({http://www.opengis.net/gml/3.2}remarks) inherited from {http://www.opengis.net/gml/3.2}DefinitionType
    
    # Attribute id_ inherited from {http://www.opengis.net/gml/3.2}DefinitionBaseType

    _ElementMap = AbstractCRSType._ElementMap.copy()
    _ElementMap.update({
        __temporalDatum.name() : __temporalDatum,
        __usesTemporalCS.name() : __usesTemporalCS,
        __timeCS.name() : __timeCS
    })
    _AttributeMap = AbstractCRSType._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gml.addCategoryObject('typeBinding', u'TemporalCRSType', TemporalCRSType)


# Complex type Country_PropertyType with content type ELEMENT_ONLY
class Country_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'Country_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmd}Country uses Python identifier Country
    __Country = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'Country'), 'Country', '__httpwww_isotc211_org2005gmd_Country_PropertyType_httpwww_isotc211_org2005gmdCountry', False)

    
    Country = property(__Country.value, __Country.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmd_Country_PropertyType_httpwww_isotc211_org2005gconilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)


    _ElementMap = {
        __Country.name() : __Country
    }
    _AttributeMap = {
        __nilReason.name() : __nilReason
    }
_Namespace_gmd.addCategoryObject('typeBinding', u'Country_PropertyType', Country_PropertyType)


# Complex type MeasureType with content type SIMPLE
class MeasureType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = pyxb.binding.datatypes.double
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'MeasureType')
    # Base type is pyxb.binding.datatypes.double
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uom'), 'uom', '__httpwww_opengis_netgml3_2_MeasureType_uom', UomIdentifier, required=True)
    
    uom = property(__uom.value, __uom.set, None, None)


    _ElementMap = {
        
    }
    _AttributeMap = {
        __uom.name() : __uom
    }
_Namespace_gml.addCategoryObject('typeBinding', u'MeasureType', MeasureType)


# Complex type LocationPropertyType with content type ELEMENT_ONLY
class LocationPropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'LocationPropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.opengis.net/gml/3.2}AbstractGeometry uses Python identifier AbstractGeometry
    __AbstractGeometry = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractGeometry'), 'AbstractGeometry', '__httpwww_opengis_netgml3_2_LocationPropertyType_httpwww_opengis_netgml3_2AbstractGeometry', False)

    
    AbstractGeometry = property(__AbstractGeometry.value, __AbstractGeometry.set, None, u'The AbstractGeometry element is the abstract head of the substitution group for all geometry elements of GML. This includes pre-defined and user-defined geometry elements. Any geometry element shall be a direct or indirect extension/restriction of AbstractGeometryType and shall be directly or indirectly in the substitution group of AbstractGeometry.')

    
    # Element {http://www.opengis.net/gml/3.2}LocationKeyWord uses Python identifier LocationKeyWord
    __LocationKeyWord = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'LocationKeyWord'), 'LocationKeyWord', '__httpwww_opengis_netgml3_2_LocationPropertyType_httpwww_opengis_netgml3_2LocationKeyWord', False)

    
    LocationKeyWord = property(__LocationKeyWord.value, __LocationKeyWord.set, None, u'')

    
    # Element {http://www.opengis.net/gml/3.2}Null uses Python identifier Null
    __Null = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'Null'), 'Null', '__httpwww_opengis_netgml3_2_LocationPropertyType_httpwww_opengis_netgml3_2Null', False)

    
    Null = property(__Null.value, __Null.set, None, u'')

    
    # Element {http://www.opengis.net/gml/3.2}LocationString uses Python identifier LocationString
    __LocationString = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'LocationString'), 'LocationString', '__httpwww_opengis_netgml3_2_LocationPropertyType_httpwww_opengis_netgml3_2LocationString', False)

    
    LocationString = property(__LocationString.value, __LocationString.set, None, u'')

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_opengis_netgml3_2_LocationPropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute {http://www.opengis.net/gml/3.2}remoteSchema uses Python identifier remoteSchema
    __remoteSchema = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'remoteSchema'), 'remoteSchema', '__httpwww_opengis_netgml3_2_LocationPropertyType_httpwww_opengis_netgml3_2remoteSchema', pyxb.binding.datatypes.anyURI)
    
    remoteSchema = property(__remoteSchema.value, __remoteSchema.set, None, u'')

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_opengis_netgml3_2_LocationPropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_opengis_netgml3_2_LocationPropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_opengis_netgml3_2_LocationPropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'nilReason'), 'nilReason', '__httpwww_opengis_netgml3_2_LocationPropertyType_nilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_opengis_netgml3_2_LocationPropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_opengis_netgml3_2_LocationPropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_opengis_netgml3_2_LocationPropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")


    _ElementMap = {
        __AbstractGeometry.name() : __AbstractGeometry,
        __LocationKeyWord.name() : __LocationKeyWord,
        __Null.name() : __Null,
        __LocationString.name() : __LocationString
    }
    _AttributeMap = {
        __actuate.name() : __actuate,
        __remoteSchema.name() : __remoteSchema,
        __href.name() : __href,
        __type.name() : __type,
        __title.name() : __title,
        __nilReason.name() : __nilReason,
        __arcrole.name() : __arcrole,
        __role.name() : __role,
        __show.name() : __show
    }
_Namespace_gml.addCategoryObject('typeBinding', u'LocationPropertyType', LocationPropertyType)


# Complex type PriorityLocationPropertyType with content type ELEMENT_ONLY
class PriorityLocationPropertyType (LocationPropertyType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'PriorityLocationPropertyType')
    # Base type is LocationPropertyType
    
    # Element AbstractGeometry ({http://www.opengis.net/gml/3.2}AbstractGeometry) inherited from {http://www.opengis.net/gml/3.2}LocationPropertyType
    
    # Element LocationKeyWord ({http://www.opengis.net/gml/3.2}LocationKeyWord) inherited from {http://www.opengis.net/gml/3.2}LocationPropertyType
    
    # Element Null ({http://www.opengis.net/gml/3.2}Null) inherited from {http://www.opengis.net/gml/3.2}LocationPropertyType
    
    # Element LocationString ({http://www.opengis.net/gml/3.2}LocationString) inherited from {http://www.opengis.net/gml/3.2}LocationPropertyType
    
    # Attribute actuate inherited from {http://www.opengis.net/gml/3.2}LocationPropertyType
    
    # Attribute remoteSchema inherited from {http://www.opengis.net/gml/3.2}LocationPropertyType
    
    # Attribute priority uses Python identifier priority
    __priority = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'priority'), 'priority', '__httpwww_opengis_netgml3_2_PriorityLocationPropertyType_priority', pyxb.binding.datatypes.string)
    
    priority = property(__priority.value, __priority.set, None, None)

    
    # Attribute href inherited from {http://www.opengis.net/gml/3.2}LocationPropertyType
    
    # Attribute type inherited from {http://www.opengis.net/gml/3.2}LocationPropertyType
    
    # Attribute title inherited from {http://www.opengis.net/gml/3.2}LocationPropertyType
    
    # Attribute nilReason inherited from {http://www.opengis.net/gml/3.2}LocationPropertyType
    
    # Attribute arcrole inherited from {http://www.opengis.net/gml/3.2}LocationPropertyType
    
    # Attribute role inherited from {http://www.opengis.net/gml/3.2}LocationPropertyType
    
    # Attribute show inherited from {http://www.opengis.net/gml/3.2}LocationPropertyType

    _ElementMap = LocationPropertyType._ElementMap.copy()
    _ElementMap.update({
        
    })
    _AttributeMap = LocationPropertyType._AttributeMap.copy()
    _AttributeMap.update({
        __priority.name() : __priority
    })
_Namespace_gml.addCategoryObject('typeBinding', u'PriorityLocationPropertyType', PriorityLocationPropertyType)


# Complex type BoundingShapeType with content type ELEMENT_ONLY
class BoundingShapeType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'BoundingShapeType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.opengis.net/gml/3.2}Envelope uses Python identifier Envelope
    __Envelope = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'Envelope'), 'Envelope', '__httpwww_opengis_netgml3_2_BoundingShapeType_httpwww_opengis_netgml3_2Envelope', False)

    
    Envelope = property(__Envelope.value, __Envelope.set, None, u'Envelope defines an extent using a pair of positions defining opposite corners in arbitrary dimensions. The first direct position is the "lower corner" (a coordinate position consisting of all the minimal ordinates for each dimension for all points within the envelope), the second one the "upper corner" (a coordinate position consisting of all the maximal ordinates for each dimension for all points within the envelope).\nThe use of the properties "coordinates" and "pos" has been deprecated. The explicitly named properties "lowerCorner" and "upperCorner" shall be used instead.')

    
    # Element {http://www.opengis.net/gml/3.2}Null uses Python identifier Null
    __Null = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'Null'), 'Null', '__httpwww_opengis_netgml3_2_BoundingShapeType_httpwww_opengis_netgml3_2Null', False)

    
    Null = property(__Null.value, __Null.set, None, u'')

    
    # Attribute nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'nilReason'), 'nilReason', '__httpwww_opengis_netgml3_2_BoundingShapeType_nilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)


    _ElementMap = {
        __Envelope.name() : __Envelope,
        __Null.name() : __Null
    }
    _AttributeMap = {
        __nilReason.name() : __nilReason
    }
_Namespace_gml.addCategoryObject('typeBinding', u'BoundingShapeType', BoundingShapeType)


# Complex type AbstractRingPropertyType with content type ELEMENT_ONLY
class AbstractRingPropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractRingPropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.opengis.net/gml/3.2}AbstractRing uses Python identifier AbstractRing
    __AbstractRing = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractRing'), 'AbstractRing', '__httpwww_opengis_netgml3_2_AbstractRingPropertyType_httpwww_opengis_netgml3_2AbstractRing', False)

    
    AbstractRing = property(__AbstractRing.value, __AbstractRing.set, None, u'An abstraction of a ring to support surface boundaries of different complexity.\nThe AbstractRing element is the abstract head of the substituition group for all closed boundaries of a surface patch.')


    _ElementMap = {
        __AbstractRing.name() : __AbstractRing
    }
    _AttributeMap = {
        
    }
_Namespace_gml.addCategoryObject('typeBinding', u'AbstractRingPropertyType', AbstractRingPropertyType)


# Complex type DS_InitiativeTypeCode_PropertyType with content type ELEMENT_ONLY
class DS_InitiativeTypeCode_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'DS_InitiativeTypeCode_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmd}DS_InitiativeTypeCode uses Python identifier DS_InitiativeTypeCode
    __DS_InitiativeTypeCode = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'DS_InitiativeTypeCode'), 'DS_InitiativeTypeCode', '__httpwww_isotc211_org2005gmd_DS_InitiativeTypeCode_PropertyType_httpwww_isotc211_org2005gmdDS_InitiativeTypeCode', False)

    
    DS_InitiativeTypeCode = property(__DS_InitiativeTypeCode.value, __DS_InitiativeTypeCode.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmd_DS_InitiativeTypeCode_PropertyType_httpwww_isotc211_org2005gconilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)


    _ElementMap = {
        __DS_InitiativeTypeCode.name() : __DS_InitiativeTypeCode
    }
    _AttributeMap = {
        __nilReason.name() : __nilReason
    }
_Namespace_gmd.addCategoryObject('typeBinding', u'DS_InitiativeTypeCode_PropertyType', DS_InitiativeTypeCode_PropertyType)


# Complex type MultiSurfacePropertyType with content type ELEMENT_ONLY
class MultiSurfacePropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'MultiSurfacePropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.opengis.net/gml/3.2}MultiSurface uses Python identifier MultiSurface
    __MultiSurface = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'MultiSurface'), 'MultiSurface', '__httpwww_opengis_netgml3_2_MultiSurfacePropertyType_httpwww_opengis_netgml3_2MultiSurface', False)

    
    MultiSurface = property(__MultiSurface.value, __MultiSurface.set, None, u'A gml:MultiSurface is defined by one or more gml:AbstractSurfaces.\nThe members of the geometric aggregate may be specified either using the "standard" property (gml:surfaceMember) or the array property (gml:surfaceMembers). It is also valid to use both the "standard" and the array properties in the same collection.')

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_opengis_netgml3_2_MultiSurfacePropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_opengis_netgml3_2_MultiSurfacePropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute owns uses Python identifier owns
    __owns = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'owns'), 'owns', '__httpwww_opengis_netgml3_2_MultiSurfacePropertyType_owns', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    owns = property(__owns.value, __owns.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_opengis_netgml3_2_MultiSurfacePropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'nilReason'), 'nilReason', '__httpwww_opengis_netgml3_2_MultiSurfacePropertyType_nilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_opengis_netgml3_2_MultiSurfacePropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_opengis_netgml3_2_MultiSurfacePropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_opengis_netgml3_2_MultiSurfacePropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_opengis_netgml3_2_MultiSurfacePropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.opengis.net/gml/3.2}remoteSchema uses Python identifier remoteSchema
    __remoteSchema = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'remoteSchema'), 'remoteSchema', '__httpwww_opengis_netgml3_2_MultiSurfacePropertyType_httpwww_opengis_netgml3_2remoteSchema', pyxb.binding.datatypes.anyURI)
    
    remoteSchema = property(__remoteSchema.value, __remoteSchema.set, None, u'')


    _ElementMap = {
        __MultiSurface.name() : __MultiSurface
    }
    _AttributeMap = {
        __role.name() : __role,
        __show.name() : __show,
        __owns.name() : __owns,
        __actuate.name() : __actuate,
        __nilReason.name() : __nilReason,
        __arcrole.name() : __arcrole,
        __type.name() : __type,
        __href.name() : __href,
        __title.name() : __title,
        __remoteSchema.name() : __remoteSchema
    }
_Namespace_gml.addCategoryObject('typeBinding', u'MultiSurfacePropertyType', MultiSurfacePropertyType)


# Complex type CI_Citation_Type with content type ELEMENT_ONLY
class CI_Citation_Type (AbstractObject_Type):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'CI_Citation_Type')
    # Base type is AbstractObject_Type
    
    # Element {http://www.isotc211.org/2005/gmd}series uses Python identifier series
    __series = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'series'), 'series', '__httpwww_isotc211_org2005gmd_CI_Citation_Type_httpwww_isotc211_org2005gmdseries', False)

    
    series = property(__series.value, __series.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}date uses Python identifier date
    __date = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'date'), 'date', '__httpwww_isotc211_org2005gmd_CI_Citation_Type_httpwww_isotc211_org2005gmddate', True)

    
    date = property(__date.value, __date.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}alternateTitle uses Python identifier alternateTitle
    __alternateTitle = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'alternateTitle'), 'alternateTitle', '__httpwww_isotc211_org2005gmd_CI_Citation_Type_httpwww_isotc211_org2005gmdalternateTitle', True)

    
    alternateTitle = property(__alternateTitle.value, __alternateTitle.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}collectiveTitle uses Python identifier collectiveTitle
    __collectiveTitle = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'collectiveTitle'), 'collectiveTitle', '__httpwww_isotc211_org2005gmd_CI_Citation_Type_httpwww_isotc211_org2005gmdcollectiveTitle', False)

    
    collectiveTitle = property(__collectiveTitle.value, __collectiveTitle.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}edition uses Python identifier edition
    __edition = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'edition'), 'edition', '__httpwww_isotc211_org2005gmd_CI_Citation_Type_httpwww_isotc211_org2005gmdedition', False)

    
    edition = property(__edition.value, __edition.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}title uses Python identifier title
    __title = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'title'), 'title', '__httpwww_isotc211_org2005gmd_CI_Citation_Type_httpwww_isotc211_org2005gmdtitle', False)

    
    title = property(__title.value, __title.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}editionDate uses Python identifier editionDate
    __editionDate = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'editionDate'), 'editionDate', '__httpwww_isotc211_org2005gmd_CI_Citation_Type_httpwww_isotc211_org2005gmdeditionDate', False)

    
    editionDate = property(__editionDate.value, __editionDate.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}ISSN uses Python identifier ISSN
    __ISSN = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'ISSN'), 'ISSN', '__httpwww_isotc211_org2005gmd_CI_Citation_Type_httpwww_isotc211_org2005gmdISSN', False)

    
    ISSN = property(__ISSN.value, __ISSN.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}identifier uses Python identifier identifier
    __identifier = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'identifier'), 'identifier', '__httpwww_isotc211_org2005gmd_CI_Citation_Type_httpwww_isotc211_org2005gmdidentifier', True)

    
    identifier = property(__identifier.value, __identifier.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}otherCitationDetails uses Python identifier otherCitationDetails
    __otherCitationDetails = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'otherCitationDetails'), 'otherCitationDetails', '__httpwww_isotc211_org2005gmd_CI_Citation_Type_httpwww_isotc211_org2005gmdotherCitationDetails', False)

    
    otherCitationDetails = property(__otherCitationDetails.value, __otherCitationDetails.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}citedResponsibleParty uses Python identifier citedResponsibleParty
    __citedResponsibleParty = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'citedResponsibleParty'), 'citedResponsibleParty', '__httpwww_isotc211_org2005gmd_CI_Citation_Type_httpwww_isotc211_org2005gmdcitedResponsibleParty', True)

    
    citedResponsibleParty = property(__citedResponsibleParty.value, __citedResponsibleParty.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}presentationForm uses Python identifier presentationForm
    __presentationForm = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'presentationForm'), 'presentationForm', '__httpwww_isotc211_org2005gmd_CI_Citation_Type_httpwww_isotc211_org2005gmdpresentationForm', True)

    
    presentationForm = property(__presentationForm.value, __presentationForm.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}ISBN uses Python identifier ISBN
    __ISBN = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'ISBN'), 'ISBN', '__httpwww_isotc211_org2005gmd_CI_Citation_Type_httpwww_isotc211_org2005gmdISBN', False)

    
    ISBN = property(__ISBN.value, __ISBN.set, None, None)

    
    # Attribute id inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type
    
    # Attribute uuid inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type

    _ElementMap = AbstractObject_Type._ElementMap.copy()
    _ElementMap.update({
        __series.name() : __series,
        __date.name() : __date,
        __alternateTitle.name() : __alternateTitle,
        __collectiveTitle.name() : __collectiveTitle,
        __edition.name() : __edition,
        __title.name() : __title,
        __editionDate.name() : __editionDate,
        __ISSN.name() : __ISSN,
        __identifier.name() : __identifier,
        __otherCitationDetails.name() : __otherCitationDetails,
        __citedResponsibleParty.name() : __citedResponsibleParty,
        __presentationForm.name() : __presentationForm,
        __ISBN.name() : __ISBN
    })
    _AttributeMap = AbstractObject_Type._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gmd.addCategoryObject('typeBinding', u'CI_Citation_Type', CI_Citation_Type)


# Complex type CTD_ANON_1 with content type ELEMENT_ONLY
class CTD_ANON_1 (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmd}EX_Extent uses Python identifier EX_Extent
    __EX_Extent = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'EX_Extent'), 'EX_Extent', '__httpwww_opengis_netgml3_2_CTD_ANON_1_httpwww_isotc211_org2005gmdEX_Extent', False)

    
    EX_Extent = property(__EX_Extent.value, __EX_Extent.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_opengis_netgml3_2_CTD_ANON_1_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_opengis_netgml3_2_CTD_ANON_1_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_opengis_netgml3_2_CTD_ANON_1_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.opengis.net/gml/3.2}remoteSchema uses Python identifier remoteSchema
    __remoteSchema = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'remoteSchema'), 'remoteSchema', '__httpwww_opengis_netgml3_2_CTD_ANON_1_httpwww_opengis_netgml3_2remoteSchema', pyxb.binding.datatypes.anyURI)
    
    remoteSchema = property(__remoteSchema.value, __remoteSchema.set, None, u'')

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_opengis_netgml3_2_CTD_ANON_1_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'nilReason'), 'nilReason', '__httpwww_opengis_netgml3_2_CTD_ANON_1_nilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_opengis_netgml3_2_CTD_ANON_1_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_opengis_netgml3_2_CTD_ANON_1_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_opengis_netgml3_2_CTD_ANON_1_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)


    _ElementMap = {
        __EX_Extent.name() : __EX_Extent
    }
    _AttributeMap = {
        __title.name() : __title,
        __role.name() : __role,
        __arcrole.name() : __arcrole,
        __remoteSchema.name() : __remoteSchema,
        __show.name() : __show,
        __nilReason.name() : __nilReason,
        __actuate.name() : __actuate,
        __href.name() : __href,
        __type.name() : __type
    }



# Complex type ScopedName_PropertyType with content type ELEMENT_ONLY
class ScopedName_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gco, u'ScopedName_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gco}ScopedName uses Python identifier ScopedName
    __ScopedName = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'ScopedName'), 'ScopedName', '__httpwww_isotc211_org2005gco_ScopedName_PropertyType_httpwww_isotc211_org2005gcoScopedName', False)

    
    ScopedName = property(__ScopedName.value, __ScopedName.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gco_ScopedName_PropertyType_httpwww_isotc211_org2005gconilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)


    _ElementMap = {
        __ScopedName.name() : __ScopedName
    }
    _AttributeMap = {
        __nilReason.name() : __nilReason
    }
_Namespace_gco.addCategoryObject('typeBinding', u'ScopedName_PropertyType', ScopedName_PropertyType)


# Complex type MD_ScopeCode_PropertyType with content type ELEMENT_ONLY
class MD_ScopeCode_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_ScopeCode_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmd}MD_ScopeCode uses Python identifier MD_ScopeCode
    __MD_ScopeCode = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_ScopeCode'), 'MD_ScopeCode', '__httpwww_isotc211_org2005gmd_MD_ScopeCode_PropertyType_httpwww_isotc211_org2005gmdMD_ScopeCode', False)

    
    MD_ScopeCode = property(__MD_ScopeCode.value, __MD_ScopeCode.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmd_MD_ScopeCode_PropertyType_httpwww_isotc211_org2005gconilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)


    _ElementMap = {
        __MD_ScopeCode.name() : __MD_ScopeCode
    }
    _AttributeMap = {
        __nilReason.name() : __nilReason
    }
_Namespace_gmd.addCategoryObject('typeBinding', u'MD_ScopeCode_PropertyType', MD_ScopeCode_PropertyType)


# Complex type NodeType with content type ELEMENT_ONLY
class NodeType (AbstractTopoPrimitiveType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'NodeType')
    # Base type is AbstractTopoPrimitiveType
    
    # Element {http://www.opengis.net/gml/3.2}pointProperty uses Python identifier pointProperty
    __pointProperty = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'pointProperty'), 'pointProperty', '__httpwww_opengis_netgml3_2_NodeType_httpwww_opengis_netgml3_2pointProperty', False)

    
    pointProperty = property(__pointProperty.value, __pointProperty.set, None, u'This property element either references a point via the XLink-attributes or contains the point element. pointProperty is the predefined property which may be used by GML Application Schemas whenever a GML feature has a property with a value that is substitutable for Point.')

    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element {http://www.opengis.net/gml/3.2}container uses Python identifier container
    __container = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'container'), 'container', '__httpwww_opengis_netgml3_2_NodeType_httpwww_opengis_netgml3_2container', False)

    
    container = property(__container.value, __container.set, None, None)

    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element {http://www.opengis.net/gml/3.2}directedEdge uses Python identifier directedEdge
    __directedEdge = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'directedEdge'), 'directedEdge', '__httpwww_opengis_netgml3_2_NodeType_httpwww_opengis_netgml3_2directedEdge', True)

    
    directedEdge = property(__directedEdge.value, __directedEdge.set, None, u'A gml:directedEdge property element describes the boundary of topology faces, the coBoundary of topology nodes and is used in the support of topological line features via the gml:TopoCurve expression, see below. The orientation attribute of type gml:SignType expresses the sense in which the included edge is used, i.e. forward or reverse.')

    
    # Attribute aggregationType uses Python identifier aggregationType
    __aggregationType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'aggregationType'), 'aggregationType', '__httpwww_opengis_netgml3_2_NodeType_aggregationType', AggregationType)
    
    aggregationType = property(__aggregationType.value, __aggregationType.set, None, None)

    
    # Attribute id inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType

    _ElementMap = AbstractTopoPrimitiveType._ElementMap.copy()
    _ElementMap.update({
        __pointProperty.name() : __pointProperty,
        __container.name() : __container,
        __directedEdge.name() : __directedEdge
    })
    _AttributeMap = AbstractTopoPrimitiveType._AttributeMap.copy()
    _AttributeMap.update({
        __aggregationType.name() : __aggregationType
    })
_Namespace_gml.addCategoryObject('typeBinding', u'NodeType', NodeType)


# Complex type CodeListValue_Type with content type SIMPLE
class CodeListValue_Type (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = pyxb.binding.datatypes.string
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gco, u'CodeListValue_Type')
    # Base type is pyxb.binding.datatypes.string
    
    # Attribute codeList uses Python identifier codeList
    __codeList = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'codeList'), 'codeList', '__httpwww_isotc211_org2005gco_CodeListValue_Type_codeList', pyxb.binding.datatypes.anyURI, required=True)
    
    codeList = property(__codeList.value, __codeList.set, None, None)

    
    # Attribute codeSpace uses Python identifier codeSpace
    __codeSpace = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'codeSpace'), 'codeSpace', '__httpwww_isotc211_org2005gco_CodeListValue_Type_codeSpace', pyxb.binding.datatypes.anyURI)
    
    codeSpace = property(__codeSpace.value, __codeSpace.set, None, None)

    
    # Attribute codeListValue uses Python identifier codeListValue
    __codeListValue = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'codeListValue'), 'codeListValue', '__httpwww_isotc211_org2005gco_CodeListValue_Type_codeListValue', pyxb.binding.datatypes.anyURI, required=True)
    
    codeListValue = property(__codeListValue.value, __codeListValue.set, None, None)


    _ElementMap = {
        
    }
    _AttributeMap = {
        __codeList.name() : __codeList,
        __codeSpace.name() : __codeSpace,
        __codeListValue.name() : __codeListValue
    }
_Namespace_gco.addCategoryObject('typeBinding', u'CodeListValue_Type', CodeListValue_Type)


# Complex type CI_DateTypeCode_PropertyType with content type ELEMENT_ONLY
class CI_DateTypeCode_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'CI_DateTypeCode_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmd}CI_DateTypeCode uses Python identifier CI_DateTypeCode
    __CI_DateTypeCode = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'CI_DateTypeCode'), 'CI_DateTypeCode', '__httpwww_isotc211_org2005gmd_CI_DateTypeCode_PropertyType_httpwww_isotc211_org2005gmdCI_DateTypeCode', False)

    
    CI_DateTypeCode = property(__CI_DateTypeCode.value, __CI_DateTypeCode.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmd_CI_DateTypeCode_PropertyType_httpwww_isotc211_org2005gconilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)


    _ElementMap = {
        __CI_DateTypeCode.name() : __CI_DateTypeCode
    }
    _AttributeMap = {
        __nilReason.name() : __nilReason
    }
_Namespace_gmd.addCategoryObject('typeBinding', u'CI_DateTypeCode_PropertyType', CI_DateTypeCode_PropertyType)


# Complex type AbstractCurveSegmentType with content type EMPTY
class AbstractCurveSegmentType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = True
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractCurveSegmentType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute numDerivativesAtEnd uses Python identifier numDerivativesAtEnd
    __numDerivativesAtEnd = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'numDerivativesAtEnd'), 'numDerivativesAtEnd', '__httpwww_opengis_netgml3_2_AbstractCurveSegmentType_numDerivativesAtEnd', pyxb.binding.datatypes.integer, unicode_default=u'0')
    
    numDerivativesAtEnd = property(__numDerivativesAtEnd.value, __numDerivativesAtEnd.set, None, None)

    
    # Attribute numDerivativeInterior uses Python identifier numDerivativeInterior
    __numDerivativeInterior = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'numDerivativeInterior'), 'numDerivativeInterior', '__httpwww_opengis_netgml3_2_AbstractCurveSegmentType_numDerivativeInterior', pyxb.binding.datatypes.integer, unicode_default=u'0')
    
    numDerivativeInterior = property(__numDerivativeInterior.value, __numDerivativeInterior.set, None, None)

    
    # Attribute numDerivativesAtStart uses Python identifier numDerivativesAtStart
    __numDerivativesAtStart = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'numDerivativesAtStart'), 'numDerivativesAtStart', '__httpwww_opengis_netgml3_2_AbstractCurveSegmentType_numDerivativesAtStart', pyxb.binding.datatypes.integer, unicode_default=u'0')
    
    numDerivativesAtStart = property(__numDerivativesAtStart.value, __numDerivativesAtStart.set, None, None)


    _ElementMap = {
        
    }
    _AttributeMap = {
        __numDerivativesAtEnd.name() : __numDerivativesAtEnd,
        __numDerivativeInterior.name() : __numDerivativeInterior,
        __numDerivativesAtStart.name() : __numDerivativesAtStart
    }
_Namespace_gml.addCategoryObject('typeBinding', u'AbstractCurveSegmentType', AbstractCurveSegmentType)


# Complex type OffsetCurveType with content type ELEMENT_ONLY
class OffsetCurveType (AbstractCurveSegmentType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'OffsetCurveType')
    # Base type is AbstractCurveSegmentType
    
    # Element {http://www.opengis.net/gml/3.2}refDirection uses Python identifier refDirection
    __refDirection = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'refDirection'), 'refDirection', '__httpwww_opengis_netgml3_2_OffsetCurveType_httpwww_opengis_netgml3_2refDirection', False)

    
    refDirection = property(__refDirection.value, __refDirection.set, None, None)

    
    # Element {http://www.opengis.net/gml/3.2}offsetBase uses Python identifier offsetBase
    __offsetBase = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'offsetBase'), 'offsetBase', '__httpwww_opengis_netgml3_2_OffsetCurveType_httpwww_opengis_netgml3_2offsetBase', False)

    
    offsetBase = property(__offsetBase.value, __offsetBase.set, None, None)

    
    # Element {http://www.opengis.net/gml/3.2}distance uses Python identifier distance
    __distance = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'distance'), 'distance', '__httpwww_opengis_netgml3_2_OffsetCurveType_httpwww_opengis_netgml3_2distance', False)

    
    distance = property(__distance.value, __distance.set, None, None)

    
    # Attribute numDerivativesAtEnd inherited from {http://www.opengis.net/gml/3.2}AbstractCurveSegmentType
    
    # Attribute numDerivativesAtStart inherited from {http://www.opengis.net/gml/3.2}AbstractCurveSegmentType
    
    # Attribute numDerivativeInterior inherited from {http://www.opengis.net/gml/3.2}AbstractCurveSegmentType

    _ElementMap = AbstractCurveSegmentType._ElementMap.copy()
    _ElementMap.update({
        __refDirection.name() : __refDirection,
        __offsetBase.name() : __offsetBase,
        __distance.name() : __distance
    })
    _AttributeMap = AbstractCurveSegmentType._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gml.addCategoryObject('typeBinding', u'OffsetCurveType', OffsetCurveType)


# Complex type AbstractCoverageType with content type ELEMENT_ONLY
class AbstractCoverageType (AbstractFeatureType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = True
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractCoverageType')
    # Base type is AbstractFeatureType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element boundedBy ({http://www.opengis.net/gml/3.2}boundedBy) inherited from {http://www.opengis.net/gml/3.2}AbstractFeatureType
    
    # Element location ({http://www.opengis.net/gml/3.2}location) inherited from {http://www.opengis.net/gml/3.2}AbstractFeatureType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element {http://www.opengis.net/gml/3.2}domainSet uses Python identifier domainSet
    __domainSet = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'domainSet'), 'domainSet', '__httpwww_opengis_netgml3_2_AbstractCoverageType_httpwww_opengis_netgml3_2domainSet', False)

    
    domainSet = property(__domainSet.value, __domainSet.set, None, u'The gml:domainSet property element describes the spatio-temporal region of interest, within which the coverage is defined. Its content model is given by gml:DomainSetType.\nThe value of the domain is thus a choice between a gml:AbstractGeometry and a gml:AbstractTimeObject.  In the instance these abstract elements will normally be substituted by a geometry complex or temporal complex, to represent spatial coverages and time-series, respectively.  \nThe presence of the gml:AssociationAttributeGroup means that domainSet follows the usual GML property model and may use the xlink:href attribute to point to the domain, as an alternative to describing the domain inline. Ownership semantics may be provided using the gml:OwnershipAttributeGroup.\n')

    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element {http://www.opengis.net/gml/3.2}rangeSet uses Python identifier rangeSet
    __rangeSet = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'rangeSet'), 'rangeSet', '__httpwww_opengis_netgml3_2_AbstractCoverageType_httpwww_opengis_netgml3_2rangeSet', False)

    
    rangeSet = property(__rangeSet.value, __rangeSet.set, None, u'The gml:rangeSet property element contains the values of the coverage (sometimes called the attribute values).  Its content model is given by gml:RangeSetType.\nThis content model supports a structural description of the range.  The semantic information describing the range set is embedded using a uniform method, as part of the explicit values, or as a template value accompanying the representation using gml:DataBlock and gml:File.\nThe values from each component (or "band") in the range may be encoded within a gml:ValueArray element or a concrete member of the gml:AbstractScalarValueList substitution group . Use of these elements satisfies the value-type homogeneity requirement.')

    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Attribute id inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType

    _ElementMap = AbstractFeatureType._ElementMap.copy()
    _ElementMap.update({
        __domainSet.name() : __domainSet,
        __rangeSet.name() : __rangeSet
    })
    _AttributeMap = AbstractFeatureType._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gml.addCategoryObject('typeBinding', u'AbstractCoverageType', AbstractCoverageType)


# Complex type AbstractContinuousCoverageType with content type ELEMENT_ONLY
class AbstractContinuousCoverageType (AbstractCoverageType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = True
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractContinuousCoverageType')
    # Base type is AbstractCoverageType
    
    # Element rangeSet ({http://www.opengis.net/gml/3.2}rangeSet) inherited from {http://www.opengis.net/gml/3.2}AbstractCoverageType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element boundedBy ({http://www.opengis.net/gml/3.2}boundedBy) inherited from {http://www.opengis.net/gml/3.2}AbstractFeatureType
    
    # Element location ({http://www.opengis.net/gml/3.2}location) inherited from {http://www.opengis.net/gml/3.2}AbstractFeatureType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element domainSet ({http://www.opengis.net/gml/3.2}domainSet) inherited from {http://www.opengis.net/gml/3.2}AbstractCoverageType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element {http://www.opengis.net/gml/3.2}coverageFunction uses Python identifier coverageFunction
    __coverageFunction = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'coverageFunction'), 'coverageFunction', '__httpwww_opengis_netgml3_2_AbstractContinuousCoverageType_httpwww_opengis_netgml3_2coverageFunction', False)

    
    coverageFunction = property(__coverageFunction.value, __coverageFunction.set, None, u'The gml:coverageFunction property describes the mapping function from the domain to the range of the coverage.\nThe value of the CoverageFunction is one of gml:CoverageMappingRule and gml:GridFunction.\nIf the gml:coverageFunction property is omitted for a gridded coverage (including rectified gridded coverages) the gml:startPoint is assumed to be the value of the gml:low property in the gml:Grid geometry, and the gml:sequenceRule is assumed to be linear and the gml:axisOrder property is assumed to be "+1 +2".')

    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Attribute id inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType

    _ElementMap = AbstractCoverageType._ElementMap.copy()
    _ElementMap.update({
        __coverageFunction.name() : __coverageFunction
    })
    _AttributeMap = AbstractCoverageType._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gml.addCategoryObject('typeBinding', u'AbstractContinuousCoverageType', AbstractContinuousCoverageType)


# Complex type AbstractDQ_Element_Type with content type ELEMENT_ONLY
class AbstractDQ_Element_Type (AbstractObject_Type):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = True
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'AbstractDQ_Element_Type')
    # Base type is AbstractObject_Type
    
    # Element {http://www.isotc211.org/2005/gmd}evaluationMethodDescription uses Python identifier evaluationMethodDescription
    __evaluationMethodDescription = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationMethodDescription'), 'evaluationMethodDescription', '__httpwww_isotc211_org2005gmd_AbstractDQ_Element_Type_httpwww_isotc211_org2005gmdevaluationMethodDescription', False)

    
    evaluationMethodDescription = property(__evaluationMethodDescription.value, __evaluationMethodDescription.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}measureDescription uses Python identifier measureDescription
    __measureDescription = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'measureDescription'), 'measureDescription', '__httpwww_isotc211_org2005gmd_AbstractDQ_Element_Type_httpwww_isotc211_org2005gmdmeasureDescription', False)

    
    measureDescription = property(__measureDescription.value, __measureDescription.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}evaluationProcedure uses Python identifier evaluationProcedure
    __evaluationProcedure = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationProcedure'), 'evaluationProcedure', '__httpwww_isotc211_org2005gmd_AbstractDQ_Element_Type_httpwww_isotc211_org2005gmdevaluationProcedure', False)

    
    evaluationProcedure = property(__evaluationProcedure.value, __evaluationProcedure.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}evaluationMethodType uses Python identifier evaluationMethodType
    __evaluationMethodType = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationMethodType'), 'evaluationMethodType', '__httpwww_isotc211_org2005gmd_AbstractDQ_Element_Type_httpwww_isotc211_org2005gmdevaluationMethodType', False)

    
    evaluationMethodType = property(__evaluationMethodType.value, __evaluationMethodType.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}dateTime uses Python identifier dateTime
    __dateTime = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'dateTime'), 'dateTime', '__httpwww_isotc211_org2005gmd_AbstractDQ_Element_Type_httpwww_isotc211_org2005gmddateTime', True)

    
    dateTime = property(__dateTime.value, __dateTime.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}result uses Python identifier result
    __result = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'result'), 'result', '__httpwww_isotc211_org2005gmd_AbstractDQ_Element_Type_httpwww_isotc211_org2005gmdresult', True)

    
    result = property(__result.value, __result.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}nameOfMeasure uses Python identifier nameOfMeasure
    __nameOfMeasure = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'nameOfMeasure'), 'nameOfMeasure', '__httpwww_isotc211_org2005gmd_AbstractDQ_Element_Type_httpwww_isotc211_org2005gmdnameOfMeasure', True)

    
    nameOfMeasure = property(__nameOfMeasure.value, __nameOfMeasure.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}measureIdentification uses Python identifier measureIdentification
    __measureIdentification = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'measureIdentification'), 'measureIdentification', '__httpwww_isotc211_org2005gmd_AbstractDQ_Element_Type_httpwww_isotc211_org2005gmdmeasureIdentification', False)

    
    measureIdentification = property(__measureIdentification.value, __measureIdentification.set, None, None)

    
    # Attribute id inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type
    
    # Attribute uuid inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type

    _ElementMap = AbstractObject_Type._ElementMap.copy()
    _ElementMap.update({
        __evaluationMethodDescription.name() : __evaluationMethodDescription,
        __measureDescription.name() : __measureDescription,
        __evaluationProcedure.name() : __evaluationProcedure,
        __evaluationMethodType.name() : __evaluationMethodType,
        __dateTime.name() : __dateTime,
        __result.name() : __result,
        __nameOfMeasure.name() : __nameOfMeasure,
        __measureIdentification.name() : __measureIdentification
    })
    _AttributeMap = AbstractObject_Type._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gmd.addCategoryObject('typeBinding', u'AbstractDQ_Element_Type', AbstractDQ_Element_Type)


# Complex type AbstractDQ_TemporalAccuracy_Type with content type ELEMENT_ONLY
class AbstractDQ_TemporalAccuracy_Type (AbstractDQ_Element_Type):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = True
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'AbstractDQ_TemporalAccuracy_Type')
    # Base type is AbstractDQ_Element_Type
    
    # Element evaluationMethodDescription ({http://www.isotc211.org/2005/gmd}evaluationMethodDescription) inherited from {http://www.isotc211.org/2005/gmd}AbstractDQ_Element_Type
    
    # Element measureDescription ({http://www.isotc211.org/2005/gmd}measureDescription) inherited from {http://www.isotc211.org/2005/gmd}AbstractDQ_Element_Type
    
    # Element evaluationProcedure ({http://www.isotc211.org/2005/gmd}evaluationProcedure) inherited from {http://www.isotc211.org/2005/gmd}AbstractDQ_Element_Type
    
    # Element evaluationMethodType ({http://www.isotc211.org/2005/gmd}evaluationMethodType) inherited from {http://www.isotc211.org/2005/gmd}AbstractDQ_Element_Type
    
    # Element dateTime ({http://www.isotc211.org/2005/gmd}dateTime) inherited from {http://www.isotc211.org/2005/gmd}AbstractDQ_Element_Type
    
    # Element result ({http://www.isotc211.org/2005/gmd}result) inherited from {http://www.isotc211.org/2005/gmd}AbstractDQ_Element_Type
    
    # Element nameOfMeasure ({http://www.isotc211.org/2005/gmd}nameOfMeasure) inherited from {http://www.isotc211.org/2005/gmd}AbstractDQ_Element_Type
    
    # Element measureIdentification ({http://www.isotc211.org/2005/gmd}measureIdentification) inherited from {http://www.isotc211.org/2005/gmd}AbstractDQ_Element_Type
    
    # Attribute id inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type
    
    # Attribute uuid inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type

    _ElementMap = AbstractDQ_Element_Type._ElementMap.copy()
    _ElementMap.update({
        
    })
    _AttributeMap = AbstractDQ_Element_Type._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gmd.addCategoryObject('typeBinding', u'AbstractDQ_TemporalAccuracy_Type', AbstractDQ_TemporalAccuracy_Type)


# Complex type DQ_TemporalConsistency_Type with content type ELEMENT_ONLY
class DQ_TemporalConsistency_Type (AbstractDQ_TemporalAccuracy_Type):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'DQ_TemporalConsistency_Type')
    # Base type is AbstractDQ_TemporalAccuracy_Type
    
    # Element evaluationMethodDescription ({http://www.isotc211.org/2005/gmd}evaluationMethodDescription) inherited from {http://www.isotc211.org/2005/gmd}AbstractDQ_Element_Type
    
    # Element measureDescription ({http://www.isotc211.org/2005/gmd}measureDescription) inherited from {http://www.isotc211.org/2005/gmd}AbstractDQ_Element_Type
    
    # Element evaluationProcedure ({http://www.isotc211.org/2005/gmd}evaluationProcedure) inherited from {http://www.isotc211.org/2005/gmd}AbstractDQ_Element_Type
    
    # Element evaluationMethodType ({http://www.isotc211.org/2005/gmd}evaluationMethodType) inherited from {http://www.isotc211.org/2005/gmd}AbstractDQ_Element_Type
    
    # Element dateTime ({http://www.isotc211.org/2005/gmd}dateTime) inherited from {http://www.isotc211.org/2005/gmd}AbstractDQ_Element_Type
    
    # Element result ({http://www.isotc211.org/2005/gmd}result) inherited from {http://www.isotc211.org/2005/gmd}AbstractDQ_Element_Type
    
    # Element nameOfMeasure ({http://www.isotc211.org/2005/gmd}nameOfMeasure) inherited from {http://www.isotc211.org/2005/gmd}AbstractDQ_Element_Type
    
    # Element measureIdentification ({http://www.isotc211.org/2005/gmd}measureIdentification) inherited from {http://www.isotc211.org/2005/gmd}AbstractDQ_Element_Type
    
    # Attribute id inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type
    
    # Attribute uuid inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type

    _ElementMap = AbstractDQ_TemporalAccuracy_Type._ElementMap.copy()
    _ElementMap.update({
        
    })
    _AttributeMap = AbstractDQ_TemporalAccuracy_Type._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gmd.addCategoryObject('typeBinding', u'DQ_TemporalConsistency_Type', DQ_TemporalConsistency_Type)


# Complex type AbstractMD_SpatialRepresentation_Type with content type EMPTY
class AbstractMD_SpatialRepresentation_Type (AbstractObject_Type):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = True
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'AbstractMD_SpatialRepresentation_Type')
    # Base type is AbstractObject_Type
    
    # Attribute id inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type
    
    # Attribute uuid inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type

    _ElementMap = AbstractObject_Type._ElementMap.copy()
    _ElementMap.update({
        
    })
    _AttributeMap = AbstractObject_Type._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gmd.addCategoryObject('typeBinding', u'AbstractMD_SpatialRepresentation_Type', AbstractMD_SpatialRepresentation_Type)


# Complex type MD_GridSpatialRepresentation_Type with content type ELEMENT_ONLY
class MD_GridSpatialRepresentation_Type (AbstractMD_SpatialRepresentation_Type):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_GridSpatialRepresentation_Type')
    # Base type is AbstractMD_SpatialRepresentation_Type
    
    # Element {http://www.isotc211.org/2005/gmd}transformationParameterAvailability uses Python identifier transformationParameterAvailability
    __transformationParameterAvailability = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'transformationParameterAvailability'), 'transformationParameterAvailability', '__httpwww_isotc211_org2005gmd_MD_GridSpatialRepresentation_Type_httpwww_isotc211_org2005gmdtransformationParameterAvailability', False)

    
    transformationParameterAvailability = property(__transformationParameterAvailability.value, __transformationParameterAvailability.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}numberOfDimensions uses Python identifier numberOfDimensions
    __numberOfDimensions = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'numberOfDimensions'), 'numberOfDimensions', '__httpwww_isotc211_org2005gmd_MD_GridSpatialRepresentation_Type_httpwww_isotc211_org2005gmdnumberOfDimensions', False)

    
    numberOfDimensions = property(__numberOfDimensions.value, __numberOfDimensions.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}cellGeometry uses Python identifier cellGeometry
    __cellGeometry = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'cellGeometry'), 'cellGeometry', '__httpwww_isotc211_org2005gmd_MD_GridSpatialRepresentation_Type_httpwww_isotc211_org2005gmdcellGeometry', False)

    
    cellGeometry = property(__cellGeometry.value, __cellGeometry.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}axisDimensionProperties uses Python identifier axisDimensionProperties
    __axisDimensionProperties = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'axisDimensionProperties'), 'axisDimensionProperties', '__httpwww_isotc211_org2005gmd_MD_GridSpatialRepresentation_Type_httpwww_isotc211_org2005gmdaxisDimensionProperties', True)

    
    axisDimensionProperties = property(__axisDimensionProperties.value, __axisDimensionProperties.set, None, None)

    
    # Attribute id inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type
    
    # Attribute uuid inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type

    _ElementMap = AbstractMD_SpatialRepresentation_Type._ElementMap.copy()
    _ElementMap.update({
        __transformationParameterAvailability.name() : __transformationParameterAvailability,
        __numberOfDimensions.name() : __numberOfDimensions,
        __cellGeometry.name() : __cellGeometry,
        __axisDimensionProperties.name() : __axisDimensionProperties
    })
    _AttributeMap = AbstractMD_SpatialRepresentation_Type._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gmd.addCategoryObject('typeBinding', u'MD_GridSpatialRepresentation_Type', MD_GridSpatialRepresentation_Type)


# Complex type MD_Georeferenceable_Type with content type ELEMENT_ONLY
class MD_Georeferenceable_Type (MD_GridSpatialRepresentation_Type):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_Georeferenceable_Type')
    # Base type is MD_GridSpatialRepresentation_Type
    
    # Element transformationParameterAvailability ({http://www.isotc211.org/2005/gmd}transformationParameterAvailability) inherited from {http://www.isotc211.org/2005/gmd}MD_GridSpatialRepresentation_Type
    
    # Element {http://www.isotc211.org/2005/gmd}controlPointAvailability uses Python identifier controlPointAvailability
    __controlPointAvailability = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'controlPointAvailability'), 'controlPointAvailability', '__httpwww_isotc211_org2005gmd_MD_Georeferenceable_Type_httpwww_isotc211_org2005gmdcontrolPointAvailability', False)

    
    controlPointAvailability = property(__controlPointAvailability.value, __controlPointAvailability.set, None, None)

    
    # Element cellGeometry ({http://www.isotc211.org/2005/gmd}cellGeometry) inherited from {http://www.isotc211.org/2005/gmd}MD_GridSpatialRepresentation_Type
    
    # Element {http://www.isotc211.org/2005/gmd}orientationParameterDescription uses Python identifier orientationParameterDescription
    __orientationParameterDescription = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'orientationParameterDescription'), 'orientationParameterDescription', '__httpwww_isotc211_org2005gmd_MD_Georeferenceable_Type_httpwww_isotc211_org2005gmdorientationParameterDescription', False)

    
    orientationParameterDescription = property(__orientationParameterDescription.value, __orientationParameterDescription.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}georeferencedParameters uses Python identifier georeferencedParameters
    __georeferencedParameters = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'georeferencedParameters'), 'georeferencedParameters', '__httpwww_isotc211_org2005gmd_MD_Georeferenceable_Type_httpwww_isotc211_org2005gmdgeoreferencedParameters', False)

    
    georeferencedParameters = property(__georeferencedParameters.value, __georeferencedParameters.set, None, None)

    
    # Element numberOfDimensions ({http://www.isotc211.org/2005/gmd}numberOfDimensions) inherited from {http://www.isotc211.org/2005/gmd}MD_GridSpatialRepresentation_Type
    
    # Element {http://www.isotc211.org/2005/gmd}orientationParameterAvailability uses Python identifier orientationParameterAvailability
    __orientationParameterAvailability = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'orientationParameterAvailability'), 'orientationParameterAvailability', '__httpwww_isotc211_org2005gmd_MD_Georeferenceable_Type_httpwww_isotc211_org2005gmdorientationParameterAvailability', False)

    
    orientationParameterAvailability = property(__orientationParameterAvailability.value, __orientationParameterAvailability.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}parameterCitation uses Python identifier parameterCitation
    __parameterCitation = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'parameterCitation'), 'parameterCitation', '__httpwww_isotc211_org2005gmd_MD_Georeferenceable_Type_httpwww_isotc211_org2005gmdparameterCitation', True)

    
    parameterCitation = property(__parameterCitation.value, __parameterCitation.set, None, None)

    
    # Element axisDimensionProperties ({http://www.isotc211.org/2005/gmd}axisDimensionProperties) inherited from {http://www.isotc211.org/2005/gmd}MD_GridSpatialRepresentation_Type
    
    # Attribute id inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type
    
    # Attribute uuid inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type

    _ElementMap = MD_GridSpatialRepresentation_Type._ElementMap.copy()
    _ElementMap.update({
        __controlPointAvailability.name() : __controlPointAvailability,
        __orientationParameterDescription.name() : __orientationParameterDescription,
        __georeferencedParameters.name() : __georeferencedParameters,
        __orientationParameterAvailability.name() : __orientationParameterAvailability,
        __parameterCitation.name() : __parameterCitation
    })
    _AttributeMap = MD_GridSpatialRepresentation_Type._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gmd.addCategoryObject('typeBinding', u'MD_Georeferenceable_Type', MD_Georeferenceable_Type)


# Complex type DQ_AccuracyOfATimeMeasurement_Type with content type ELEMENT_ONLY
class DQ_AccuracyOfATimeMeasurement_Type (AbstractDQ_TemporalAccuracy_Type):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'DQ_AccuracyOfATimeMeasurement_Type')
    # Base type is AbstractDQ_TemporalAccuracy_Type
    
    # Element evaluationMethodDescription ({http://www.isotc211.org/2005/gmd}evaluationMethodDescription) inherited from {http://www.isotc211.org/2005/gmd}AbstractDQ_Element_Type
    
    # Element measureDescription ({http://www.isotc211.org/2005/gmd}measureDescription) inherited from {http://www.isotc211.org/2005/gmd}AbstractDQ_Element_Type
    
    # Element evaluationProcedure ({http://www.isotc211.org/2005/gmd}evaluationProcedure) inherited from {http://www.isotc211.org/2005/gmd}AbstractDQ_Element_Type
    
    # Element evaluationMethodType ({http://www.isotc211.org/2005/gmd}evaluationMethodType) inherited from {http://www.isotc211.org/2005/gmd}AbstractDQ_Element_Type
    
    # Element dateTime ({http://www.isotc211.org/2005/gmd}dateTime) inherited from {http://www.isotc211.org/2005/gmd}AbstractDQ_Element_Type
    
    # Element result ({http://www.isotc211.org/2005/gmd}result) inherited from {http://www.isotc211.org/2005/gmd}AbstractDQ_Element_Type
    
    # Element nameOfMeasure ({http://www.isotc211.org/2005/gmd}nameOfMeasure) inherited from {http://www.isotc211.org/2005/gmd}AbstractDQ_Element_Type
    
    # Element measureIdentification ({http://www.isotc211.org/2005/gmd}measureIdentification) inherited from {http://www.isotc211.org/2005/gmd}AbstractDQ_Element_Type
    
    # Attribute id inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type
    
    # Attribute uuid inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type

    _ElementMap = AbstractDQ_TemporalAccuracy_Type._ElementMap.copy()
    _ElementMap.update({
        
    })
    _AttributeMap = AbstractDQ_TemporalAccuracy_Type._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gmd.addCategoryObject('typeBinding', u'DQ_AccuracyOfATimeMeasurement_Type', DQ_AccuracyOfATimeMeasurement_Type)


# Complex type EllipsoidalCSPropertyType with content type ELEMENT_ONLY
class EllipsoidalCSPropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'EllipsoidalCSPropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.opengis.net/gml/3.2}EllipsoidalCS uses Python identifier EllipsoidalCS
    __EllipsoidalCS = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'EllipsoidalCS'), 'EllipsoidalCS', '__httpwww_opengis_netgml3_2_EllipsoidalCSPropertyType_httpwww_opengis_netgml3_2EllipsoidalCS', False)

    
    EllipsoidalCS = property(__EllipsoidalCS.value, __EllipsoidalCS.set, None, u'gml:EllipsoidalCS is a two- or three-dimensional coordinate system in which position is specified by geodetic latitude, geodetic longitude, and (in the three-dimensional case) ellipsoidal height. An EllipsoidalCS shall have two or three gml:axis property elements; the number of associations shall equal the dimension of the CS.')

    
    # Attribute {http://www.opengis.net/gml/3.2}remoteSchema uses Python identifier remoteSchema
    __remoteSchema = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'remoteSchema'), 'remoteSchema', '__httpwww_opengis_netgml3_2_EllipsoidalCSPropertyType_httpwww_opengis_netgml3_2remoteSchema', pyxb.binding.datatypes.anyURI)
    
    remoteSchema = property(__remoteSchema.value, __remoteSchema.set, None, u'')

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_opengis_netgml3_2_EllipsoidalCSPropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_opengis_netgml3_2_EllipsoidalCSPropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_opengis_netgml3_2_EllipsoidalCSPropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'nilReason'), 'nilReason', '__httpwww_opengis_netgml3_2_EllipsoidalCSPropertyType_nilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_opengis_netgml3_2_EllipsoidalCSPropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_opengis_netgml3_2_EllipsoidalCSPropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_opengis_netgml3_2_EllipsoidalCSPropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_opengis_netgml3_2_EllipsoidalCSPropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")


    _ElementMap = {
        __EllipsoidalCS.name() : __EllipsoidalCS
    }
    _AttributeMap = {
        __remoteSchema.name() : __remoteSchema,
        __actuate.name() : __actuate,
        __href.name() : __href,
        __type.name() : __type,
        __nilReason.name() : __nilReason,
        __title.name() : __title,
        __arcrole.name() : __arcrole,
        __role.name() : __role,
        __show.name() : __show
    }
_Namespace_gml.addCategoryObject('typeBinding', u'EllipsoidalCSPropertyType', EllipsoidalCSPropertyType)


# Complex type MD_GeometricObjects_Type with content type ELEMENT_ONLY
class MD_GeometricObjects_Type (AbstractObject_Type):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_GeometricObjects_Type')
    # Base type is AbstractObject_Type
    
    # Element {http://www.isotc211.org/2005/gmd}geometricObjectCount uses Python identifier geometricObjectCount
    __geometricObjectCount = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'geometricObjectCount'), 'geometricObjectCount', '__httpwww_isotc211_org2005gmd_MD_GeometricObjects_Type_httpwww_isotc211_org2005gmdgeometricObjectCount', False)

    
    geometricObjectCount = property(__geometricObjectCount.value, __geometricObjectCount.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}geometricObjectType uses Python identifier geometricObjectType
    __geometricObjectType = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'geometricObjectType'), 'geometricObjectType', '__httpwww_isotc211_org2005gmd_MD_GeometricObjects_Type_httpwww_isotc211_org2005gmdgeometricObjectType', False)

    
    geometricObjectType = property(__geometricObjectType.value, __geometricObjectType.set, None, None)

    
    # Attribute id inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type
    
    # Attribute uuid inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type

    _ElementMap = AbstractObject_Type._ElementMap.copy()
    _ElementMap.update({
        __geometricObjectCount.name() : __geometricObjectCount,
        __geometricObjectType.name() : __geometricObjectType
    })
    _AttributeMap = AbstractObject_Type._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gmd.addCategoryObject('typeBinding', u'MD_GeometricObjects_Type', MD_GeometricObjects_Type)


# Complex type ObservationType with content type ELEMENT_ONLY
class ObservationType (AbstractFeatureType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'ObservationType')
    # Base type is AbstractFeatureType
    
    # Element {http://www.opengis.net/gml/3.2}using uses Python identifier using
    __using = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'using'), 'using', '__httpwww_opengis_netgml3_2_ObservationType_httpwww_opengis_netgml3_2using', False)

    
    using = property(__using.value, __using.set, None, None)

    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element {http://www.opengis.net/gml/3.2}target uses Python identifier target
    __target = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'target'), 'target', '__httpwww_opengis_netgml3_2_ObservationType_httpwww_opengis_netgml3_2target', False)

    
    target = property(__target.value, __target.set, None, None)

    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element {http://www.opengis.net/gml/3.2}resultOf uses Python identifier resultOf
    __resultOf = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'resultOf'), 'resultOf', '__httpwww_opengis_netgml3_2_ObservationType_httpwww_opengis_netgml3_2resultOf', False)

    
    resultOf = property(__resultOf.value, __resultOf.set, None, None)

    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element location ({http://www.opengis.net/gml/3.2}location) inherited from {http://www.opengis.net/gml/3.2}AbstractFeatureType
    
    # Element boundedBy ({http://www.opengis.net/gml/3.2}boundedBy) inherited from {http://www.opengis.net/gml/3.2}AbstractFeatureType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element {http://www.opengis.net/gml/3.2}validTime uses Python identifier validTime
    __validTime = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'validTime'), 'validTime', '__httpwww_opengis_netgml3_2_ObservationType_httpwww_opengis_netgml3_2validTime', False)

    
    validTime = property(__validTime.value, __validTime.set, None, u'gml:validTime is a convenience property element.')

    
    # Attribute id inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType

    _ElementMap = AbstractFeatureType._ElementMap.copy()
    _ElementMap.update({
        __using.name() : __using,
        __target.name() : __target,
        __resultOf.name() : __resultOf,
        __validTime.name() : __validTime
    })
    _AttributeMap = AbstractFeatureType._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gml.addCategoryObject('typeBinding', u'ObservationType', ObservationType)


# Complex type DirectedObservationType with content type ELEMENT_ONLY
class DirectedObservationType (ObservationType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'DirectedObservationType')
    # Base type is ObservationType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element boundedBy ({http://www.opengis.net/gml/3.2}boundedBy) inherited from {http://www.opengis.net/gml/3.2}AbstractFeatureType
    
    # Element target ({http://www.opengis.net/gml/3.2}target) inherited from {http://www.opengis.net/gml/3.2}ObservationType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element using ({http://www.opengis.net/gml/3.2}using) inherited from {http://www.opengis.net/gml/3.2}ObservationType
    
    # Element {http://www.opengis.net/gml/3.2}direction uses Python identifier direction
    __direction = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'direction'), 'direction', '__httpwww_opengis_netgml3_2_DirectedObservationType_httpwww_opengis_netgml3_2direction', False)

    
    direction = property(__direction.value, __direction.set, None, u'The property gml:direction is intended as a pre-defined property expressing a direction to be assigned to features defined in a GML application schema.')

    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element location ({http://www.opengis.net/gml/3.2}location) inherited from {http://www.opengis.net/gml/3.2}AbstractFeatureType
    
    # Element resultOf ({http://www.opengis.net/gml/3.2}resultOf) inherited from {http://www.opengis.net/gml/3.2}ObservationType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element validTime ({http://www.opengis.net/gml/3.2}validTime) inherited from {http://www.opengis.net/gml/3.2}ObservationType
    
    # Attribute id inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType

    _ElementMap = ObservationType._ElementMap.copy()
    _ElementMap.update({
        __direction.name() : __direction
    })
    _AttributeMap = ObservationType._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gml.addCategoryObject('typeBinding', u'DirectedObservationType', DirectedObservationType)


# Complex type DirectedObservationAtDistanceType with content type ELEMENT_ONLY
class DirectedObservationAtDistanceType (DirectedObservationType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'DirectedObservationAtDistanceType')
    # Base type is DirectedObservationType
    
    # Element {http://www.opengis.net/gml/3.2}distance uses Python identifier distance
    __distance = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'distance'), 'distance', '__httpwww_opengis_netgml3_2_DirectedObservationAtDistanceType_httpwww_opengis_netgml3_2distance', False)

    
    distance = property(__distance.value, __distance.set, None, None)

    
    # Element using ({http://www.opengis.net/gml/3.2}using) inherited from {http://www.opengis.net/gml/3.2}ObservationType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element target ({http://www.opengis.net/gml/3.2}target) inherited from {http://www.opengis.net/gml/3.2}ObservationType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element direction ({http://www.opengis.net/gml/3.2}direction) inherited from {http://www.opengis.net/gml/3.2}DirectedObservationType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element location ({http://www.opengis.net/gml/3.2}location) inherited from {http://www.opengis.net/gml/3.2}AbstractFeatureType
    
    # Element boundedBy ({http://www.opengis.net/gml/3.2}boundedBy) inherited from {http://www.opengis.net/gml/3.2}AbstractFeatureType
    
    # Element resultOf ({http://www.opengis.net/gml/3.2}resultOf) inherited from {http://www.opengis.net/gml/3.2}ObservationType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element validTime ({http://www.opengis.net/gml/3.2}validTime) inherited from {http://www.opengis.net/gml/3.2}ObservationType
    
    # Attribute id inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType

    _ElementMap = DirectedObservationType._ElementMap.copy()
    _ElementMap.update({
        __distance.name() : __distance
    })
    _AttributeMap = DirectedObservationType._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gml.addCategoryObject('typeBinding', u'DirectedObservationAtDistanceType', DirectedObservationAtDistanceType)


# Complex type AbstractTimeComplexType with content type ELEMENT_ONLY
class AbstractTimeComplexType (AbstractTimeObjectType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = True
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractTimeComplexType')
    # Base type is AbstractTimeObjectType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Attribute id inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType

    _ElementMap = AbstractTimeObjectType._ElementMap.copy()
    _ElementMap.update({
        
    })
    _AttributeMap = AbstractTimeObjectType._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gml.addCategoryObject('typeBinding', u'AbstractTimeComplexType', AbstractTimeComplexType)


# Complex type TimeTopologyComplexType with content type ELEMENT_ONLY
class TimeTopologyComplexType (AbstractTimeComplexType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = True
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'TimeTopologyComplexType')
    # Base type is AbstractTimeComplexType
    
    # Element {http://www.opengis.net/gml/3.2}primitive uses Python identifier primitive
    __primitive = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'primitive'), 'primitive', '__httpwww_opengis_netgml3_2_TimeTopologyComplexType_httpwww_opengis_netgml3_2primitive', True)

    
    primitive = property(__primitive.value, __primitive.set, None, None)

    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Attribute id inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType

    _ElementMap = AbstractTimeComplexType._ElementMap.copy()
    _ElementMap.update({
        __primitive.name() : __primitive
    })
    _AttributeMap = AbstractTimeComplexType._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gml.addCategoryObject('typeBinding', u'TimeTopologyComplexType', TimeTopologyComplexType)


# Complex type AbstractDQ_Completeness_Type with content type ELEMENT_ONLY
class AbstractDQ_Completeness_Type (AbstractDQ_Element_Type):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = True
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'AbstractDQ_Completeness_Type')
    # Base type is AbstractDQ_Element_Type
    
    # Element evaluationMethodDescription ({http://www.isotc211.org/2005/gmd}evaluationMethodDescription) inherited from {http://www.isotc211.org/2005/gmd}AbstractDQ_Element_Type
    
    # Element measureDescription ({http://www.isotc211.org/2005/gmd}measureDescription) inherited from {http://www.isotc211.org/2005/gmd}AbstractDQ_Element_Type
    
    # Element evaluationProcedure ({http://www.isotc211.org/2005/gmd}evaluationProcedure) inherited from {http://www.isotc211.org/2005/gmd}AbstractDQ_Element_Type
    
    # Element evaluationMethodType ({http://www.isotc211.org/2005/gmd}evaluationMethodType) inherited from {http://www.isotc211.org/2005/gmd}AbstractDQ_Element_Type
    
    # Element dateTime ({http://www.isotc211.org/2005/gmd}dateTime) inherited from {http://www.isotc211.org/2005/gmd}AbstractDQ_Element_Type
    
    # Element result ({http://www.isotc211.org/2005/gmd}result) inherited from {http://www.isotc211.org/2005/gmd}AbstractDQ_Element_Type
    
    # Element nameOfMeasure ({http://www.isotc211.org/2005/gmd}nameOfMeasure) inherited from {http://www.isotc211.org/2005/gmd}AbstractDQ_Element_Type
    
    # Element measureIdentification ({http://www.isotc211.org/2005/gmd}measureIdentification) inherited from {http://www.isotc211.org/2005/gmd}AbstractDQ_Element_Type
    
    # Attribute id inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type
    
    # Attribute uuid inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type

    _ElementMap = AbstractDQ_Element_Type._ElementMap.copy()
    _ElementMap.update({
        
    })
    _AttributeMap = AbstractDQ_Element_Type._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gmd.addCategoryObject('typeBinding', u'AbstractDQ_Completeness_Type', AbstractDQ_Completeness_Type)


# Complex type DQ_CompletenessCommission_Type with content type ELEMENT_ONLY
class DQ_CompletenessCommission_Type (AbstractDQ_Completeness_Type):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'DQ_CompletenessCommission_Type')
    # Base type is AbstractDQ_Completeness_Type
    
    # Element evaluationMethodDescription ({http://www.isotc211.org/2005/gmd}evaluationMethodDescription) inherited from {http://www.isotc211.org/2005/gmd}AbstractDQ_Element_Type
    
    # Element measureDescription ({http://www.isotc211.org/2005/gmd}measureDescription) inherited from {http://www.isotc211.org/2005/gmd}AbstractDQ_Element_Type
    
    # Element evaluationProcedure ({http://www.isotc211.org/2005/gmd}evaluationProcedure) inherited from {http://www.isotc211.org/2005/gmd}AbstractDQ_Element_Type
    
    # Element evaluationMethodType ({http://www.isotc211.org/2005/gmd}evaluationMethodType) inherited from {http://www.isotc211.org/2005/gmd}AbstractDQ_Element_Type
    
    # Element dateTime ({http://www.isotc211.org/2005/gmd}dateTime) inherited from {http://www.isotc211.org/2005/gmd}AbstractDQ_Element_Type
    
    # Element result ({http://www.isotc211.org/2005/gmd}result) inherited from {http://www.isotc211.org/2005/gmd}AbstractDQ_Element_Type
    
    # Element nameOfMeasure ({http://www.isotc211.org/2005/gmd}nameOfMeasure) inherited from {http://www.isotc211.org/2005/gmd}AbstractDQ_Element_Type
    
    # Element measureIdentification ({http://www.isotc211.org/2005/gmd}measureIdentification) inherited from {http://www.isotc211.org/2005/gmd}AbstractDQ_Element_Type
    
    # Attribute id inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type
    
    # Attribute uuid inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type

    _ElementMap = AbstractDQ_Completeness_Type._ElementMap.copy()
    _ElementMap.update({
        
    })
    _AttributeMap = AbstractDQ_Completeness_Type._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gmd.addCategoryObject('typeBinding', u'DQ_CompletenessCommission_Type', DQ_CompletenessCommission_Type)


# Complex type TimePeriodPropertyType with content type ELEMENT_ONLY
class TimePeriodPropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'TimePeriodPropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.opengis.net/gml/3.2}TimePeriod uses Python identifier TimePeriod
    __TimePeriod = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'TimePeriod'), 'TimePeriod', '__httpwww_opengis_netgml3_2_TimePeriodPropertyType_httpwww_opengis_netgml3_2TimePeriod', False)

    
    TimePeriod = property(__TimePeriod.value, __TimePeriod.set, None, u'gml:TimePeriod acts as a one-dimensional geometric primitive that represents an identifiable extent in time.\nThe location in of a gml:TimePeriod is described by the temporal positions of the instants at which it begins and ends. The length of the period is equal to the temporal distance between the two bounding temporal positions. \nBoth beginning and end may be described in terms of their direct position using gml:TimePositionType which is an XML Schema simple content type, or by reference to an indentifiable time instant using gml:TimeInstantPropertyType.\nAlternatively a limit of a gml:TimePeriod may use the conventional GML property model to make a reference to a time instant described elsewhere, or a limit may be indicated as a direct position.')

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_opengis_netgml3_2_TimePeriodPropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute owns uses Python identifier owns
    __owns = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'owns'), 'owns', '__httpwww_opengis_netgml3_2_TimePeriodPropertyType_owns', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    owns = property(__owns.value, __owns.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_opengis_netgml3_2_TimePeriodPropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_opengis_netgml3_2_TimePeriodPropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'nilReason'), 'nilReason', '__httpwww_opengis_netgml3_2_TimePeriodPropertyType_nilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.opengis.net/gml/3.2}remoteSchema uses Python identifier remoteSchema
    __remoteSchema = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'remoteSchema'), 'remoteSchema', '__httpwww_opengis_netgml3_2_TimePeriodPropertyType_httpwww_opengis_netgml3_2remoteSchema', pyxb.binding.datatypes.anyURI)
    
    remoteSchema = property(__remoteSchema.value, __remoteSchema.set, None, u'')

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_opengis_netgml3_2_TimePeriodPropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_opengis_netgml3_2_TimePeriodPropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_opengis_netgml3_2_TimePeriodPropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_opengis_netgml3_2_TimePeriodPropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")


    _ElementMap = {
        __TimePeriod.name() : __TimePeriod
    }
    _AttributeMap = {
        __title.name() : __title,
        __owns.name() : __owns,
        __href.name() : __href,
        __type.name() : __type,
        __nilReason.name() : __nilReason,
        __remoteSchema.name() : __remoteSchema,
        __arcrole.name() : __arcrole,
        __role.name() : __role,
        __show.name() : __show,
        __actuate.name() : __actuate
    }
_Namespace_gml.addCategoryObject('typeBinding', u'TimePeriodPropertyType', TimePeriodPropertyType)


# Complex type DS_DataSet_Type with content type ELEMENT_ONLY
class DS_DataSet_Type (AbstractObject_Type):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'DS_DataSet_Type')
    # Base type is AbstractObject_Type
    
    # Element {http://www.isotc211.org/2005/gmd}partOf uses Python identifier partOf
    __partOf = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'partOf'), 'partOf', '__httpwww_isotc211_org2005gmd_DS_DataSet_Type_httpwww_isotc211_org2005gmdpartOf', True)

    
    partOf = property(__partOf.value, __partOf.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}has uses Python identifier has
    __has = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'has'), 'has', '__httpwww_isotc211_org2005gmd_DS_DataSet_Type_httpwww_isotc211_org2005gmdhas', True)

    
    has = property(__has.value, __has.set, None, None)

    
    # Attribute id inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type
    
    # Attribute uuid inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type

    _ElementMap = AbstractObject_Type._ElementMap.copy()
    _ElementMap.update({
        __partOf.name() : __partOf,
        __has.name() : __has
    })
    _AttributeMap = AbstractObject_Type._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gmd.addCategoryObject('typeBinding', u'DS_DataSet_Type', DS_DataSet_Type)


# Complex type OperationPropertyType with content type ELEMENT_ONLY
class OperationPropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'OperationPropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.opengis.net/gml/3.2}AbstractOperation uses Python identifier AbstractOperation
    __AbstractOperation = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractOperation'), 'AbstractOperation', '__httpwww_opengis_netgml3_2_OperationPropertyType_httpwww_opengis_netgml3_2AbstractOperation', False)

    
    AbstractOperation = property(__AbstractOperation.value, __AbstractOperation.set, None, u'')

    
    # Attribute {http://www.opengis.net/gml/3.2}remoteSchema uses Python identifier remoteSchema
    __remoteSchema = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'remoteSchema'), 'remoteSchema', '__httpwww_opengis_netgml3_2_OperationPropertyType_httpwww_opengis_netgml3_2remoteSchema', pyxb.binding.datatypes.anyURI)
    
    remoteSchema = property(__remoteSchema.value, __remoteSchema.set, None, u'')

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_opengis_netgml3_2_OperationPropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_opengis_netgml3_2_OperationPropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_opengis_netgml3_2_OperationPropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'nilReason'), 'nilReason', '__httpwww_opengis_netgml3_2_OperationPropertyType_nilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_opengis_netgml3_2_OperationPropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_opengis_netgml3_2_OperationPropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_opengis_netgml3_2_OperationPropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_opengis_netgml3_2_OperationPropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")


    _ElementMap = {
        __AbstractOperation.name() : __AbstractOperation
    }
    _AttributeMap = {
        __remoteSchema.name() : __remoteSchema,
        __actuate.name() : __actuate,
        __href.name() : __href,
        __type.name() : __type,
        __nilReason.name() : __nilReason,
        __title.name() : __title,
        __arcrole.name() : __arcrole,
        __role.name() : __role,
        __show.name() : __show
    }
_Namespace_gml.addCategoryObject('typeBinding', u'OperationPropertyType', OperationPropertyType)


# Complex type AreaType with content type SIMPLE
class AreaType (MeasureType):
    _TypeDefinition = pyxb.binding.datatypes.double
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'AreaType')
    # Base type is MeasureType
    
    # Attribute uom inherited from {http://www.opengis.net/gml/3.2}MeasureType

    _ElementMap = MeasureType._ElementMap.copy()
    _ElementMap.update({
        
    })
    _AttributeMap = MeasureType._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gml.addCategoryObject('typeBinding', u'AreaType', AreaType)


# Complex type Measure_PropertyType with content type ELEMENT_ONLY
class Measure_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gco, u'Measure_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gco}Measure uses Python identifier Measure
    __Measure = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'Measure'), 'Measure', '__httpwww_isotc211_org2005gco_Measure_PropertyType_httpwww_isotc211_org2005gcoMeasure', False)

    
    Measure = property(__Measure.value, __Measure.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gco_Measure_PropertyType_httpwww_isotc211_org2005gconilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)


    _ElementMap = {
        __Measure.name() : __Measure
    }
    _AttributeMap = {
        __nilReason.name() : __nilReason
    }
_Namespace_gco.addCategoryObject('typeBinding', u'Measure_PropertyType', Measure_PropertyType)


# Complex type EngineeringDatumPropertyType with content type ELEMENT_ONLY
class EngineeringDatumPropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'EngineeringDatumPropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.opengis.net/gml/3.2}EngineeringDatum uses Python identifier EngineeringDatum
    __EngineeringDatum = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'EngineeringDatum'), 'EngineeringDatum', '__httpwww_opengis_netgml3_2_EngineeringDatumPropertyType_httpwww_opengis_netgml3_2EngineeringDatum', False)

    
    EngineeringDatum = property(__EngineeringDatum.value, __EngineeringDatum.set, None, u'gml:EngineeringDatum defines the origin of an engineering coordinate reference system, and is used in a region around that origin. This origin may be fixed with respect to the earth (such as a defined point at a construction site), or be a defined point on a moving vehicle (such as on a ship or satellite).')

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_opengis_netgml3_2_EngineeringDatumPropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute {http://www.opengis.net/gml/3.2}remoteSchema uses Python identifier remoteSchema
    __remoteSchema = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'remoteSchema'), 'remoteSchema', '__httpwww_opengis_netgml3_2_EngineeringDatumPropertyType_httpwww_opengis_netgml3_2remoteSchema', pyxb.binding.datatypes.anyURI)
    
    remoteSchema = property(__remoteSchema.value, __remoteSchema.set, None, u'')

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_opengis_netgml3_2_EngineeringDatumPropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_opengis_netgml3_2_EngineeringDatumPropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_opengis_netgml3_2_EngineeringDatumPropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'nilReason'), 'nilReason', '__httpwww_opengis_netgml3_2_EngineeringDatumPropertyType_nilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_opengis_netgml3_2_EngineeringDatumPropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_opengis_netgml3_2_EngineeringDatumPropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_opengis_netgml3_2_EngineeringDatumPropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")


    _ElementMap = {
        __EngineeringDatum.name() : __EngineeringDatum
    }
    _AttributeMap = {
        __actuate.name() : __actuate,
        __remoteSchema.name() : __remoteSchema,
        __href.name() : __href,
        __type.name() : __type,
        __title.name() : __title,
        __nilReason.name() : __nilReason,
        __arcrole.name() : __arcrole,
        __role.name() : __role,
        __show.name() : __show
    }
_Namespace_gml.addCategoryObject('typeBinding', u'EngineeringDatumPropertyType', EngineeringDatumPropertyType)


# Complex type TimeNodePropertyType with content type ELEMENT_ONLY
class TimeNodePropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'TimeNodePropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.opengis.net/gml/3.2}TimeNode uses Python identifier TimeNode
    __TimeNode = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'TimeNode'), 'TimeNode', '__httpwww_opengis_netgml3_2_TimeNodePropertyType_httpwww_opengis_netgml3_2TimeNode', False)

    
    TimeNode = property(__TimeNode.value, __TimeNode.set, None, u'A time node is a zero-dimensional topological primitive that represents an identifiable node in time (it is equivalent to a point in space). A node may act as the termination or initiation of any number of time edges. A time node may be realised as a geometry, its position, whose value is a time instant.')

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_opengis_netgml3_2_TimeNodePropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_opengis_netgml3_2_TimeNodePropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_opengis_netgml3_2_TimeNodePropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute owns uses Python identifier owns
    __owns = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'owns'), 'owns', '__httpwww_opengis_netgml3_2_TimeNodePropertyType_owns', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    owns = property(__owns.value, __owns.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_opengis_netgml3_2_TimeNodePropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_opengis_netgml3_2_TimeNodePropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_opengis_netgml3_2_TimeNodePropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'nilReason'), 'nilReason', '__httpwww_opengis_netgml3_2_TimeNodePropertyType_nilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_opengis_netgml3_2_TimeNodePropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.opengis.net/gml/3.2}remoteSchema uses Python identifier remoteSchema
    __remoteSchema = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'remoteSchema'), 'remoteSchema', '__httpwww_opengis_netgml3_2_TimeNodePropertyType_httpwww_opengis_netgml3_2remoteSchema', pyxb.binding.datatypes.anyURI)
    
    remoteSchema = property(__remoteSchema.value, __remoteSchema.set, None, u'')


    _ElementMap = {
        __TimeNode.name() : __TimeNode
    }
    _AttributeMap = {
        __show.name() : __show,
        __role.name() : __role,
        __title.name() : __title,
        __owns.name() : __owns,
        __actuate.name() : __actuate,
        __arcrole.name() : __arcrole,
        __href.name() : __href,
        __nilReason.name() : __nilReason,
        __type.name() : __type,
        __remoteSchema.name() : __remoteSchema
    }
_Namespace_gml.addCategoryObject('typeBinding', u'TimeNodePropertyType', TimeNodePropertyType)


# Complex type GeodeticDatumPropertyType with content type ELEMENT_ONLY
class GeodeticDatumPropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'GeodeticDatumPropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.opengis.net/gml/3.2}GeodeticDatum uses Python identifier GeodeticDatum
    __GeodeticDatum = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'GeodeticDatum'), 'GeodeticDatum', '__httpwww_opengis_netgml3_2_GeodeticDatumPropertyType_httpwww_opengis_netgml3_2GeodeticDatum', False)

    
    GeodeticDatum = property(__GeodeticDatum.value, __GeodeticDatum.set, None, u'gml:GeodeticDatum is a geodetic datum defines the precise location and orientation in 3-dimensional space of a defined ellipsoid (or sphere), or of a Cartesian coordinate system centered in this ellipsoid (or sphere).')

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_opengis_netgml3_2_GeodeticDatumPropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_opengis_netgml3_2_GeodeticDatumPropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_opengis_netgml3_2_GeodeticDatumPropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_opengis_netgml3_2_GeodeticDatumPropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.opengis.net/gml/3.2}remoteSchema uses Python identifier remoteSchema
    __remoteSchema = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'remoteSchema'), 'remoteSchema', '__httpwww_opengis_netgml3_2_GeodeticDatumPropertyType_httpwww_opengis_netgml3_2remoteSchema', pyxb.binding.datatypes.anyURI)
    
    remoteSchema = property(__remoteSchema.value, __remoteSchema.set, None, u'')

    
    # Attribute nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'nilReason'), 'nilReason', '__httpwww_opengis_netgml3_2_GeodeticDatumPropertyType_nilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_opengis_netgml3_2_GeodeticDatumPropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_opengis_netgml3_2_GeodeticDatumPropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_opengis_netgml3_2_GeodeticDatumPropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)


    _ElementMap = {
        __GeodeticDatum.name() : __GeodeticDatum
    }
    _AttributeMap = {
        __role.name() : __role,
        __type.name() : __type,
        __title.name() : __title,
        __arcrole.name() : __arcrole,
        __remoteSchema.name() : __remoteSchema,
        __nilReason.name() : __nilReason,
        __show.name() : __show,
        __actuate.name() : __actuate,
        __href.name() : __href
    }
_Namespace_gml.addCategoryObject('typeBinding', u'GeodeticDatumPropertyType', GeodeticDatumPropertyType)


# Complex type MovingObjectStatusType with content type ELEMENT_ONLY
class MovingObjectStatusType (AbstractTimeSliceType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'MovingObjectStatusType')
    # Base type is AbstractTimeSliceType
    
    # Element {http://www.opengis.net/gml/3.2}location uses Python identifier location
    __location = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'location'), 'location', '__httpwww_opengis_netgml3_2_MovingObjectStatusType_httpwww_opengis_netgml3_2location', False)

    
    location = property(__location.value, __location.set, None, u'')

    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element {http://www.opengis.net/gml/3.2}locationName uses Python identifier locationName
    __locationName = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'locationName'), 'locationName', '__httpwww_opengis_netgml3_2_MovingObjectStatusType_httpwww_opengis_netgml3_2locationName', False)

    
    locationName = property(__locationName.value, __locationName.set, None, u'The gml:locationName property element is a convenience property where the text value describes the location of the feature. If the location names are selected from a controlled list, then the list shall be identified in the codeSpace attribute.')

    
    # Element {http://www.opengis.net/gml/3.2}pos uses Python identifier pos
    __pos = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'pos'), 'pos', '__httpwww_opengis_netgml3_2_MovingObjectStatusType_httpwww_opengis_netgml3_2pos', False)

    
    pos = property(__pos.value, __pos.set, None, None)

    
    # Element {http://www.opengis.net/gml/3.2}locationReference uses Python identifier locationReference
    __locationReference = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'locationReference'), 'locationReference', '__httpwww_opengis_netgml3_2_MovingObjectStatusType_httpwww_opengis_netgml3_2locationReference', False)

    
    locationReference = property(__locationReference.value, __locationReference.set, None, u'The gml:locationReference property element is a convenience property where the text value referenced by the xlink:href attribute describes the location of the feature.')

    
    # Element {http://www.opengis.net/gml/3.2}bearing uses Python identifier bearing
    __bearing = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'bearing'), 'bearing', '__httpwww_opengis_netgml3_2_MovingObjectStatusType_httpwww_opengis_netgml3_2bearing', False)

    
    bearing = property(__bearing.value, __bearing.set, None, None)

    
    # Element {http://www.opengis.net/gml/3.2}speed uses Python identifier speed
    __speed = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'speed'), 'speed', '__httpwww_opengis_netgml3_2_MovingObjectStatusType_httpwww_opengis_netgml3_2speed', False)

    
    speed = property(__speed.value, __speed.set, None, None)

    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element {http://www.opengis.net/gml/3.2}position uses Python identifier position
    __position = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'position'), 'position', '__httpwww_opengis_netgml3_2_MovingObjectStatusType_httpwww_opengis_netgml3_2position', False)

    
    position = property(__position.value, __position.set, None, None)

    
    # Element dataSource ({http://www.opengis.net/gml/3.2}dataSource) inherited from {http://www.opengis.net/gml/3.2}AbstractTimeSliceType
    
    # Element {http://www.opengis.net/gml/3.2}status uses Python identifier status
    __status = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'status'), 'status', '__httpwww_opengis_netgml3_2_MovingObjectStatusType_httpwww_opengis_netgml3_2status', False)

    
    status = property(__status.value, __status.set, None, u'')

    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element {http://www.opengis.net/gml/3.2}elevation uses Python identifier elevation
    __elevation = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'elevation'), 'elevation', '__httpwww_opengis_netgml3_2_MovingObjectStatusType_httpwww_opengis_netgml3_2elevation', False)

    
    elevation = property(__elevation.value, __elevation.set, None, None)

    
    # Element {http://www.opengis.net/gml/3.2}statusReference uses Python identifier statusReference
    __statusReference = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'statusReference'), 'statusReference', '__httpwww_opengis_netgml3_2_MovingObjectStatusType_httpwww_opengis_netgml3_2statusReference', False)

    
    statusReference = property(__statusReference.value, __statusReference.set, None, u'')

    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element validTime ({http://www.opengis.net/gml/3.2}validTime) inherited from {http://www.opengis.net/gml/3.2}AbstractTimeSliceType
    
    # Element {http://www.opengis.net/gml/3.2}acceleration uses Python identifier acceleration
    __acceleration = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'acceleration'), 'acceleration', '__httpwww_opengis_netgml3_2_MovingObjectStatusType_httpwww_opengis_netgml3_2acceleration', False)

    
    acceleration = property(__acceleration.value, __acceleration.set, None, None)

    
    # Attribute id inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType

    _ElementMap = AbstractTimeSliceType._ElementMap.copy()
    _ElementMap.update({
        __location.name() : __location,
        __locationName.name() : __locationName,
        __pos.name() : __pos,
        __locationReference.name() : __locationReference,
        __bearing.name() : __bearing,
        __speed.name() : __speed,
        __position.name() : __position,
        __status.name() : __status,
        __elevation.name() : __elevation,
        __statusReference.name() : __statusReference,
        __acceleration.name() : __acceleration
    })
    _AttributeMap = AbstractTimeSliceType._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gml.addCategoryObject('typeBinding', u'MovingObjectStatusType', MovingObjectStatusType)


# Complex type MD_MetadataExtensionInformation_PropertyType with content type ELEMENT_ONLY
class MD_MetadataExtensionInformation_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_MetadataExtensionInformation_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmd}MD_MetadataExtensionInformation uses Python identifier MD_MetadataExtensionInformation
    __MD_MetadataExtensionInformation = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_MetadataExtensionInformation'), 'MD_MetadataExtensionInformation', '__httpwww_isotc211_org2005gmd_MD_MetadataExtensionInformation_PropertyType_httpwww_isotc211_org2005gmdMD_MetadataExtensionInformation', False)

    
    MD_MetadataExtensionInformation = property(__MD_MetadataExtensionInformation.value, __MD_MetadataExtensionInformation.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_isotc211_org2005gmd_MD_MetadataExtensionInformation_PropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_isotc211_org2005gmd_MD_MetadataExtensionInformation_PropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_isotc211_org2005gmd_MD_MetadataExtensionInformation_PropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_isotc211_org2005gmd_MD_MetadataExtensionInformation_PropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmd_MD_MetadataExtensionInformation_PropertyType_httpwww_isotc211_org2005gconilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute uuidref uses Python identifier uuidref
    __uuidref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uuidref'), 'uuidref', '__httpwww_isotc211_org2005gmd_MD_MetadataExtensionInformation_PropertyType_uuidref', pyxb.binding.datatypes.string)
    
    uuidref = property(__uuidref.value, __uuidref.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_isotc211_org2005gmd_MD_MetadataExtensionInformation_PropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_isotc211_org2005gmd_MD_MetadataExtensionInformation_PropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_isotc211_org2005gmd_MD_MetadataExtensionInformation_PropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")


    _ElementMap = {
        __MD_MetadataExtensionInformation.name() : __MD_MetadataExtensionInformation
    }
    _AttributeMap = {
        __type.name() : __type,
        __title.name() : __title,
        __arcrole.name() : __arcrole,
        __role.name() : __role,
        __nilReason.name() : __nilReason,
        __uuidref.name() : __uuidref,
        __show.name() : __show,
        __href.name() : __href,
        __actuate.name() : __actuate
    }
_Namespace_gmd.addCategoryObject('typeBinding', u'MD_MetadataExtensionInformation_PropertyType', MD_MetadataExtensionInformation_PropertyType)


# Complex type MD_Constraints_Type with content type ELEMENT_ONLY
class MD_Constraints_Type (AbstractObject_Type):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_Constraints_Type')
    # Base type is AbstractObject_Type
    
    # Element {http://www.isotc211.org/2005/gmd}useLimitation uses Python identifier useLimitation
    __useLimitation = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'useLimitation'), 'useLimitation', '__httpwww_isotc211_org2005gmd_MD_Constraints_Type_httpwww_isotc211_org2005gmduseLimitation', True)

    
    useLimitation = property(__useLimitation.value, __useLimitation.set, None, None)

    
    # Attribute id inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type
    
    # Attribute uuid inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type

    _ElementMap = AbstractObject_Type._ElementMap.copy()
    _ElementMap.update({
        __useLimitation.name() : __useLimitation
    })
    _AttributeMap = AbstractObject_Type._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gmd.addCategoryObject('typeBinding', u'MD_Constraints_Type', MD_Constraints_Type)


# Complex type ImageDatumPropertyType with content type ELEMENT_ONLY
class ImageDatumPropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'ImageDatumPropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.opengis.net/gml/3.2}ImageDatum uses Python identifier ImageDatum
    __ImageDatum = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'ImageDatum'), 'ImageDatum', '__httpwww_opengis_netgml3_2_ImageDatumPropertyType_httpwww_opengis_netgml3_2ImageDatum', False)

    
    ImageDatum = property(__ImageDatum.value, __ImageDatum.set, None, u'gml:ImageDatum defines the origin of an image coordinate reference system, and is used in a local context only. For an image datum, the anchor definition is usually either the centre of the image or the corner of the image. For more information, see ISO 19111 B.3.5.')

    
    # Attribute {http://www.opengis.net/gml/3.2}remoteSchema uses Python identifier remoteSchema
    __remoteSchema = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'remoteSchema'), 'remoteSchema', '__httpwww_opengis_netgml3_2_ImageDatumPropertyType_httpwww_opengis_netgml3_2remoteSchema', pyxb.binding.datatypes.anyURI)
    
    remoteSchema = property(__remoteSchema.value, __remoteSchema.set, None, u'')

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_opengis_netgml3_2_ImageDatumPropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_opengis_netgml3_2_ImageDatumPropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_opengis_netgml3_2_ImageDatumPropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'nilReason'), 'nilReason', '__httpwww_opengis_netgml3_2_ImageDatumPropertyType_nilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_opengis_netgml3_2_ImageDatumPropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_opengis_netgml3_2_ImageDatumPropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_opengis_netgml3_2_ImageDatumPropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_opengis_netgml3_2_ImageDatumPropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)


    _ElementMap = {
        __ImageDatum.name() : __ImageDatum
    }
    _AttributeMap = {
        __remoteSchema.name() : __remoteSchema,
        __role.name() : __role,
        __show.name() : __show,
        __actuate.name() : __actuate,
        __nilReason.name() : __nilReason,
        __href.name() : __href,
        __type.name() : __type,
        __title.name() : __title,
        __arcrole.name() : __arcrole
    }
_Namespace_gml.addCategoryObject('typeBinding', u'ImageDatumPropertyType', ImageDatumPropertyType)


# Complex type CurveArrayPropertyType with content type ELEMENT_ONLY
class CurveArrayPropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'CurveArrayPropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.opengis.net/gml/3.2}AbstractCurve uses Python identifier AbstractCurve
    __AbstractCurve = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractCurve'), 'AbstractCurve', '__httpwww_opengis_netgml3_2_CurveArrayPropertyType_httpwww_opengis_netgml3_2AbstractCurve', True)

    
    AbstractCurve = property(__AbstractCurve.value, __AbstractCurve.set, None, u'The AbstractCurve element is the abstract head of the substitution group for all (continuous) curve elements.')

    
    # Attribute owns uses Python identifier owns
    __owns = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'owns'), 'owns', '__httpwww_opengis_netgml3_2_CurveArrayPropertyType_owns', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    owns = property(__owns.value, __owns.set, None, None)


    _ElementMap = {
        __AbstractCurve.name() : __AbstractCurve
    }
    _AttributeMap = {
        __owns.name() : __owns
    }
_Namespace_gml.addCategoryObject('typeBinding', u'CurveArrayPropertyType', CurveArrayPropertyType)


# Complex type CTD_ANON_2 with content type ELEMENT_ONLY
class CTD_ANON_2 (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmd}AbstractDQ_PositionalAccuracy uses Python identifier AbstractDQ_PositionalAccuracy
    __AbstractDQ_PositionalAccuracy = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'AbstractDQ_PositionalAccuracy'), 'AbstractDQ_PositionalAccuracy', '__httpwww_opengis_netgml3_2_CTD_ANON_2_httpwww_isotc211_org2005gmdAbstractDQ_PositionalAccuracy', False)

    
    AbstractDQ_PositionalAccuracy = property(__AbstractDQ_PositionalAccuracy.value, __AbstractDQ_PositionalAccuracy.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_opengis_netgml3_2_CTD_ANON_2_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute {http://www.opengis.net/gml/3.2}remoteSchema uses Python identifier remoteSchema
    __remoteSchema = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'remoteSchema'), 'remoteSchema', '__httpwww_opengis_netgml3_2_CTD_ANON_2_httpwww_opengis_netgml3_2remoteSchema', pyxb.binding.datatypes.anyURI)
    
    remoteSchema = property(__remoteSchema.value, __remoteSchema.set, None, u'')

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_opengis_netgml3_2_CTD_ANON_2_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_opengis_netgml3_2_CTD_ANON_2_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_opengis_netgml3_2_CTD_ANON_2_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'nilReason'), 'nilReason', '__httpwww_opengis_netgml3_2_CTD_ANON_2_nilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_opengis_netgml3_2_CTD_ANON_2_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_opengis_netgml3_2_CTD_ANON_2_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_opengis_netgml3_2_CTD_ANON_2_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")


    _ElementMap = {
        __AbstractDQ_PositionalAccuracy.name() : __AbstractDQ_PositionalAccuracy
    }
    _AttributeMap = {
        __actuate.name() : __actuate,
        __remoteSchema.name() : __remoteSchema,
        __href.name() : __href,
        __type.name() : __type,
        __title.name() : __title,
        __nilReason.name() : __nilReason,
        __arcrole.name() : __arcrole,
        __role.name() : __role,
        __show.name() : __show
    }



# Complex type Date_PropertyType with content type ELEMENT_ONLY
class Date_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gco, u'Date_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gco}Date uses Python identifier Date
    __Date = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'Date'), 'Date', '__httpwww_isotc211_org2005gco_Date_PropertyType_httpwww_isotc211_org2005gcoDate', False)

    
    Date = property(__Date.value, __Date.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gco}DateTime uses Python identifier DateTime
    __DateTime = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'DateTime'), 'DateTime', '__httpwww_isotc211_org2005gco_Date_PropertyType_httpwww_isotc211_org2005gcoDateTime', False)

    
    DateTime = property(__DateTime.value, __DateTime.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gco_Date_PropertyType_httpwww_isotc211_org2005gconilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)


    _ElementMap = {
        __Date.name() : __Date,
        __DateTime.name() : __DateTime
    }
    _AttributeMap = {
        __nilReason.name() : __nilReason
    }
_Namespace_gco.addCategoryObject('typeBinding', u'Date_PropertyType', Date_PropertyType)


# Complex type NodePropertyType with content type ELEMENT_ONLY
class NodePropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'NodePropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.opengis.net/gml/3.2}Node uses Python identifier Node
    __Node = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'Node'), 'Node', '__httpwww_opengis_netgml3_2_NodePropertyType_httpwww_opengis_netgml3_2Node', False)

    
    Node = property(__Node.value, __Node.set, None, u'gml:Node represents the 0-dimensional primitive.\nThe optional coboundary of a node (gml:directedEdge) is a sequence of directed edges which are incident on this node. Edges emanating from this node appear in the node coboundary with a negative orientation. \nIf provided, the aggregationType attribute shall have the value "sequence".\nA node may optionally be realised by a 0-dimensional geometric primitive (gml:pointProperty).')

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_opengis_netgml3_2_NodePropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_opengis_netgml3_2_NodePropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_opengis_netgml3_2_NodePropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_opengis_netgml3_2_NodePropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute owns uses Python identifier owns
    __owns = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'owns'), 'owns', '__httpwww_opengis_netgml3_2_NodePropertyType_owns', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    owns = property(__owns.value, __owns.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_opengis_netgml3_2_NodePropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'nilReason'), 'nilReason', '__httpwww_opengis_netgml3_2_NodePropertyType_nilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_opengis_netgml3_2_NodePropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_opengis_netgml3_2_NodePropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.opengis.net/gml/3.2}remoteSchema uses Python identifier remoteSchema
    __remoteSchema = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'remoteSchema'), 'remoteSchema', '__httpwww_opengis_netgml3_2_NodePropertyType_httpwww_opengis_netgml3_2remoteSchema', pyxb.binding.datatypes.anyURI)
    
    remoteSchema = property(__remoteSchema.value, __remoteSchema.set, None, u'')


    _ElementMap = {
        __Node.name() : __Node
    }
    _AttributeMap = {
        __arcrole.name() : __arcrole,
        __role.name() : __role,
        __show.name() : __show,
        __type.name() : __type,
        __owns.name() : __owns,
        __actuate.name() : __actuate,
        __nilReason.name() : __nilReason,
        __href.name() : __href,
        __title.name() : __title,
        __remoteSchema.name() : __remoteSchema
    }
_Namespace_gml.addCategoryObject('typeBinding', u'NodePropertyType', NodePropertyType)


# Complex type AbstractCoordinateOperationType with content type ELEMENT_ONLY
class AbstractCoordinateOperationType (IdentifiedObjectType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = True
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractCoordinateOperationType')
    # Base type is IdentifiedObjectType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element {http://www.opengis.net/gml/3.2}targetCRS uses Python identifier targetCRS
    __targetCRS = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'targetCRS'), 'targetCRS', '__httpwww_opengis_netgml3_2_AbstractCoordinateOperationType_httpwww_opengis_netgml3_2targetCRS', False)

    
    targetCRS = property(__targetCRS.value, __targetCRS.set, None, u'gml:targetCRS is an association role to the target CRS (coordinate reference system) of this coordinate operation.')

    
    # Element {http://www.opengis.net/gml/3.2}domainOfValidity uses Python identifier domainOfValidity
    __domainOfValidity = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'domainOfValidity'), 'domainOfValidity', '__httpwww_opengis_netgml3_2_AbstractCoordinateOperationType_httpwww_opengis_netgml3_2domainOfValidity', False)

    
    domainOfValidity = property(__domainOfValidity.value, __domainOfValidity.set, None, u'The gml:domainOfValidity property implements an association role to an EX_Extent object as encoded in ISO/TS 19139, either referencing or containing the definition of that extent.')

    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element {http://www.opengis.net/gml/3.2}sourceCRS uses Python identifier sourceCRS
    __sourceCRS = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'sourceCRS'), 'sourceCRS', '__httpwww_opengis_netgml3_2_AbstractCoordinateOperationType_httpwww_opengis_netgml3_2sourceCRS', False)

    
    sourceCRS = property(__sourceCRS.value, __sourceCRS.set, None, u'gml:sourceCRS is an association role to the source CRS (coordinate reference system) of this coordinate operation.')

    
    # Element {http://www.opengis.net/gml/3.2}operationVersion uses Python identifier operationVersion
    __operationVersion = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'operationVersion'), 'operationVersion', '__httpwww_opengis_netgml3_2_AbstractCoordinateOperationType_httpwww_opengis_netgml3_2operationVersion', False)

    
    operationVersion = property(__operationVersion.value, __operationVersion.set, None, u'gml:operationVersion is the version of the coordinate transformation (i.e., instantiation due to the stochastic nature of the parameters). Mandatory when describing a transformation, and should not be supplied for a conversion.')

    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element {http://www.opengis.net/gml/3.2}scope uses Python identifier scope
    __scope = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'scope'), 'scope', '__httpwww_opengis_netgml3_2_AbstractCoordinateOperationType_httpwww_opengis_netgml3_2scope', True)

    
    scope = property(__scope.value, __scope.set, None, u'The gml:scope property provides a description of the usage, or limitations of usage, for which this CRS-related object is valid. If unknown, enter "not known".')

    
    # Element {http://www.opengis.net/gml/3.2}coordinateOperationAccuracy uses Python identifier coordinateOperationAccuracy
    __coordinateOperationAccuracy = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'coordinateOperationAccuracy'), 'coordinateOperationAccuracy', '__httpwww_opengis_netgml3_2_AbstractCoordinateOperationType_httpwww_opengis_netgml3_2coordinateOperationAccuracy', True)

    
    coordinateOperationAccuracy = property(__coordinateOperationAccuracy.value, __coordinateOperationAccuracy.set, None, u'gml:coordinateOperationAccuracy is an association role to a DQ_PositionalAccuracy object as encoded in ISO/TS 19139, either referencing or containing the definition of that positional accuracy. That object contains an estimate of the impact of this coordinate operation on point accuracy. That is, it gives position error estimates for the target coordinates of this coordinate operation, assuming no errors in the source coordinates.')

    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element remarks ({http://www.opengis.net/gml/3.2}remarks) inherited from {http://www.opengis.net/gml/3.2}DefinitionType
    
    # Attribute id_ inherited from {http://www.opengis.net/gml/3.2}DefinitionBaseType

    _ElementMap = IdentifiedObjectType._ElementMap.copy()
    _ElementMap.update({
        __targetCRS.name() : __targetCRS,
        __domainOfValidity.name() : __domainOfValidity,
        __sourceCRS.name() : __sourceCRS,
        __operationVersion.name() : __operationVersion,
        __scope.name() : __scope,
        __coordinateOperationAccuracy.name() : __coordinateOperationAccuracy
    })
    _AttributeMap = IdentifiedObjectType._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gml.addCategoryObject('typeBinding', u'AbstractCoordinateOperationType', AbstractCoordinateOperationType)


# Complex type MD_ScopeDescription_PropertyType with content type ELEMENT_ONLY
class MD_ScopeDescription_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_ScopeDescription_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmd}MD_ScopeDescription uses Python identifier MD_ScopeDescription
    __MD_ScopeDescription = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_ScopeDescription'), 'MD_ScopeDescription', '__httpwww_isotc211_org2005gmd_MD_ScopeDescription_PropertyType_httpwww_isotc211_org2005gmdMD_ScopeDescription', False)

    
    MD_ScopeDescription = property(__MD_ScopeDescription.value, __MD_ScopeDescription.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmd_MD_ScopeDescription_PropertyType_httpwww_isotc211_org2005gconilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)


    _ElementMap = {
        __MD_ScopeDescription.name() : __MD_ScopeDescription
    }
    _AttributeMap = {
        __nilReason.name() : __nilReason
    }
_Namespace_gmd.addCategoryObject('typeBinding', u'MD_ScopeDescription_PropertyType', MD_ScopeDescription_PropertyType)


# Complex type Record_PropertyType with content type ELEMENT_ONLY
class Record_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gco, u'Record_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gco}Record uses Python identifier Record
    __Record = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'Record'), 'Record', '__httpwww_isotc211_org2005gco_Record_PropertyType_httpwww_isotc211_org2005gcoRecord', False)

    
    Record = property(__Record.value, __Record.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_isotc211_org2005gco_Record_PropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_isotc211_org2005gco_Record_PropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_isotc211_org2005gco_Record_PropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gco_Record_PropertyType_httpwww_isotc211_org2005gconilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute uuidref uses Python identifier uuidref
    __uuidref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uuidref'), 'uuidref', '__httpwww_isotc211_org2005gco_Record_PropertyType_uuidref', pyxb.binding.datatypes.string)
    
    uuidref = property(__uuidref.value, __uuidref.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_isotc211_org2005gco_Record_PropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_isotc211_org2005gco_Record_PropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_isotc211_org2005gco_Record_PropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_isotc211_org2005gco_Record_PropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")


    _ElementMap = {
        __Record.name() : __Record
    }
    _AttributeMap = {
        __type.name() : __type,
        __arcrole.name() : __arcrole,
        __role.name() : __role,
        __nilReason.name() : __nilReason,
        __uuidref.name() : __uuidref,
        __show.name() : __show,
        __title.name() : __title,
        __href.name() : __href,
        __actuate.name() : __actuate
    }
_Namespace_gco.addCategoryObject('typeBinding', u'Record_PropertyType', Record_PropertyType)


# Complex type AbstractFeatureCollectionType with content type ELEMENT_ONLY
class AbstractFeatureCollectionType (AbstractFeatureType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = True
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractFeatureCollectionType')
    # Base type is AbstractFeatureType
    
    # Element {http://www.opengis.net/gml/3.2}featureMember uses Python identifier featureMember
    __featureMember = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'featureMember'), 'featureMember', '__httpwww_opengis_netgml3_2_AbstractFeatureCollectionType_httpwww_opengis_netgml3_2featureMember', True)

    
    featureMember = property(__featureMember.value, __featureMember.set, None, u'')

    
    # Element {http://www.opengis.net/gml/3.2}featureMembers uses Python identifier featureMembers
    __featureMembers = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'featureMembers'), 'featureMembers', '__httpwww_opengis_netgml3_2_AbstractFeatureCollectionType_httpwww_opengis_netgml3_2featureMembers', False)

    
    featureMembers = property(__featureMembers.value, __featureMembers.set, None, u'')

    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element location ({http://www.opengis.net/gml/3.2}location) inherited from {http://www.opengis.net/gml/3.2}AbstractFeatureType
    
    # Element boundedBy ({http://www.opengis.net/gml/3.2}boundedBy) inherited from {http://www.opengis.net/gml/3.2}AbstractFeatureType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Attribute id inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType

    _ElementMap = AbstractFeatureType._ElementMap.copy()
    _ElementMap.update({
        __featureMember.name() : __featureMember,
        __featureMembers.name() : __featureMembers
    })
    _AttributeMap = AbstractFeatureType._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gml.addCategoryObject('typeBinding', u'AbstractFeatureCollectionType', AbstractFeatureCollectionType)


# Complex type AbstractFeatureMemberType with content type EMPTY
class AbstractFeatureMemberType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = True
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractFeatureMemberType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute owns uses Python identifier owns
    __owns = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'owns'), 'owns', '__httpwww_opengis_netgml3_2_AbstractFeatureMemberType_owns', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    owns = property(__owns.value, __owns.set, None, None)


    _ElementMap = {
        
    }
    _AttributeMap = {
        __owns.name() : __owns
    }
_Namespace_gml.addCategoryObject('typeBinding', u'AbstractFeatureMemberType', AbstractFeatureMemberType)


# Complex type DynamicFeatureMemberType with content type ELEMENT_ONLY
class DynamicFeatureMemberType (AbstractFeatureMemberType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'DynamicFeatureMemberType')
    # Base type is AbstractFeatureMemberType
    
    # Element {http://www.opengis.net/gml/3.2}DynamicFeature uses Python identifier DynamicFeature
    __DynamicFeature = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'DynamicFeature'), 'DynamicFeature', '__httpwww_opengis_netgml3_2_DynamicFeatureMemberType_httpwww_opengis_netgml3_2DynamicFeature', True)

    
    DynamicFeature = property(__DynamicFeature.value, __DynamicFeature.set, None, u"States are captured by time-stamped instances of a feature. The content model extends the standard gml:AbstractFeatureType with the gml:dynamicProperties model group.\nEach time-stamped instance represents a 'snapshot' of a feature. The dynamic feature classes will normally be extended to suit particular applications.  A dynamic feature bears either a time stamp or a history.")

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_opengis_netgml3_2_DynamicFeatureMemberType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_opengis_netgml3_2_DynamicFeatureMemberType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_opengis_netgml3_2_DynamicFeatureMemberType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_opengis_netgml3_2_DynamicFeatureMemberType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'nilReason'), 'nilReason', '__httpwww_opengis_netgml3_2_DynamicFeatureMemberType_nilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_opengis_netgml3_2_DynamicFeatureMemberType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute owns inherited from {http://www.opengis.net/gml/3.2}AbstractFeatureMemberType
    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_opengis_netgml3_2_DynamicFeatureMemberType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.opengis.net/gml/3.2}remoteSchema uses Python identifier remoteSchema
    __remoteSchema = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'remoteSchema'), 'remoteSchema', '__httpwww_opengis_netgml3_2_DynamicFeatureMemberType_httpwww_opengis_netgml3_2remoteSchema', pyxb.binding.datatypes.anyURI)
    
    remoteSchema = property(__remoteSchema.value, __remoteSchema.set, None, u'')

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_opengis_netgml3_2_DynamicFeatureMemberType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")


    _ElementMap = AbstractFeatureMemberType._ElementMap.copy()
    _ElementMap.update({
        __DynamicFeature.name() : __DynamicFeature
    })
    _AttributeMap = AbstractFeatureMemberType._AttributeMap.copy()
    _AttributeMap.update({
        __role.name() : __role,
        __type.name() : __type,
        __actuate.name() : __actuate,
        __href.name() : __href,
        __nilReason.name() : __nilReason,
        __title.name() : __title,
        __arcrole.name() : __arcrole,
        __remoteSchema.name() : __remoteSchema,
        __show.name() : __show
    })
_Namespace_gml.addCategoryObject('typeBinding', u'DynamicFeatureMemberType', DynamicFeatureMemberType)


# Complex type AbstractDS_Aggregate_Type with content type ELEMENT_ONLY
class AbstractDS_Aggregate_Type (AbstractObject_Type):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = True
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'AbstractDS_Aggregate_Type')
    # Base type is AbstractObject_Type
    
    # Element {http://www.isotc211.org/2005/gmd}superset uses Python identifier superset
    __superset = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'superset'), 'superset', '__httpwww_isotc211_org2005gmd_AbstractDS_Aggregate_Type_httpwww_isotc211_org2005gmdsuperset', True)

    
    superset = property(__superset.value, __superset.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}composedOf uses Python identifier composedOf
    __composedOf = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'composedOf'), 'composedOf', '__httpwww_isotc211_org2005gmd_AbstractDS_Aggregate_Type_httpwww_isotc211_org2005gmdcomposedOf', True)

    
    composedOf = property(__composedOf.value, __composedOf.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}seriesMetadata uses Python identifier seriesMetadata
    __seriesMetadata = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'seriesMetadata'), 'seriesMetadata', '__httpwww_isotc211_org2005gmd_AbstractDS_Aggregate_Type_httpwww_isotc211_org2005gmdseriesMetadata', True)

    
    seriesMetadata = property(__seriesMetadata.value, __seriesMetadata.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}subset uses Python identifier subset
    __subset = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'subset'), 'subset', '__httpwww_isotc211_org2005gmd_AbstractDS_Aggregate_Type_httpwww_isotc211_org2005gmdsubset', True)

    
    subset = property(__subset.value, __subset.set, None, None)

    
    # Attribute id inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type
    
    # Attribute uuid inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type

    _ElementMap = AbstractObject_Type._ElementMap.copy()
    _ElementMap.update({
        __superset.name() : __superset,
        __composedOf.name() : __composedOf,
        __seriesMetadata.name() : __seriesMetadata,
        __subset.name() : __subset
    })
    _AttributeMap = AbstractObject_Type._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gmd.addCategoryObject('typeBinding', u'AbstractDS_Aggregate_Type', AbstractDS_Aggregate_Type)


# Complex type DS_Series_Type with content type ELEMENT_ONLY
class DS_Series_Type (AbstractDS_Aggregate_Type):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'DS_Series_Type')
    # Base type is AbstractDS_Aggregate_Type
    
    # Element superset ({http://www.isotc211.org/2005/gmd}superset) inherited from {http://www.isotc211.org/2005/gmd}AbstractDS_Aggregate_Type
    
    # Element composedOf ({http://www.isotc211.org/2005/gmd}composedOf) inherited from {http://www.isotc211.org/2005/gmd}AbstractDS_Aggregate_Type
    
    # Element seriesMetadata ({http://www.isotc211.org/2005/gmd}seriesMetadata) inherited from {http://www.isotc211.org/2005/gmd}AbstractDS_Aggregate_Type
    
    # Element subset ({http://www.isotc211.org/2005/gmd}subset) inherited from {http://www.isotc211.org/2005/gmd}AbstractDS_Aggregate_Type
    
    # Attribute id inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type
    
    # Attribute uuid inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type

    _ElementMap = AbstractDS_Aggregate_Type._ElementMap.copy()
    _ElementMap.update({
        
    })
    _AttributeMap = AbstractDS_Aggregate_Type._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gmd.addCategoryObject('typeBinding', u'DS_Series_Type', DS_Series_Type)


# Complex type DS_Platform_Type with content type ELEMENT_ONLY
class DS_Platform_Type (DS_Series_Type):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'DS_Platform_Type')
    # Base type is DS_Series_Type
    
    # Element superset ({http://www.isotc211.org/2005/gmd}superset) inherited from {http://www.isotc211.org/2005/gmd}AbstractDS_Aggregate_Type
    
    # Element composedOf ({http://www.isotc211.org/2005/gmd}composedOf) inherited from {http://www.isotc211.org/2005/gmd}AbstractDS_Aggregate_Type
    
    # Element seriesMetadata ({http://www.isotc211.org/2005/gmd}seriesMetadata) inherited from {http://www.isotc211.org/2005/gmd}AbstractDS_Aggregate_Type
    
    # Element subset ({http://www.isotc211.org/2005/gmd}subset) inherited from {http://www.isotc211.org/2005/gmd}AbstractDS_Aggregate_Type
    
    # Attribute id inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type
    
    # Attribute uuid inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type

    _ElementMap = DS_Series_Type._ElementMap.copy()
    _ElementMap.update({
        
    })
    _AttributeMap = DS_Series_Type._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gmd.addCategoryObject('typeBinding', u'DS_Platform_Type', DS_Platform_Type)


# Complex type UnitDefinitionType with content type ELEMENT_ONLY
class UnitDefinitionType (DefinitionType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'UnitDefinitionType')
    # Base type is DefinitionType
    
    # Element {http://www.opengis.net/gml/3.2}catalogSymbol uses Python identifier catalogSymbol
    __catalogSymbol = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'catalogSymbol'), 'catalogSymbol', '__httpwww_opengis_netgml3_2_UnitDefinitionType_httpwww_opengis_netgml3_2catalogSymbol', False)

    
    catalogSymbol = property(__catalogSymbol.value, __catalogSymbol.set, None, u'The catalogSymbol is the preferred lexical symbol used for this unit of measure.\nThe codeSpace attribute in gml:CodeType identifies a namespace for the catalog symbol value, and might reference the external catalog. The string value in gml:CodeType contains the value of a symbol that should be unique within this catalog namespace. This symbol often appears explicitly in the catalog, but it could be a combination of symbols using a specified algebra of units.')

    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element {http://www.opengis.net/gml/3.2}quantityType uses Python identifier quantityType
    __quantityType = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'quantityType'), 'quantityType', '__httpwww_opengis_netgml3_2_UnitDefinitionType_httpwww_opengis_netgml3_2quantityType', False)

    
    quantityType = property(__quantityType.value, __quantityType.set, None, u'The gml:quantityType property indicates the phenomenon to which the units apply. This element contains an informal description of the phenomenon or type of physical quantity that is measured or observed. When the physical quantity is the result of an observation or measurement, this term is known as observable type or measurand.\nThe use of gml:quantityType for references to remote values is deprecated.')

    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element {http://www.opengis.net/gml/3.2}quantityTypeReference uses Python identifier quantityTypeReference
    __quantityTypeReference = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'quantityTypeReference'), 'quantityTypeReference', '__httpwww_opengis_netgml3_2_UnitDefinitionType_httpwww_opengis_netgml3_2quantityTypeReference', False)

    
    quantityTypeReference = property(__quantityTypeReference.value, __quantityTypeReference.set, None, u'The gml:quantityTypeReference property indicates the phenomenon to which the units apply. The content is a reference to a remote value.')

    
    # Element remarks ({http://www.opengis.net/gml/3.2}remarks) inherited from {http://www.opengis.net/gml/3.2}DefinitionType
    
    # Attribute id_ inherited from {http://www.opengis.net/gml/3.2}DefinitionBaseType

    _ElementMap = DefinitionType._ElementMap.copy()
    _ElementMap.update({
        __catalogSymbol.name() : __catalogSymbol,
        __quantityType.name() : __quantityType,
        __quantityTypeReference.name() : __quantityTypeReference
    })
    _AttributeMap = DefinitionType._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gml.addCategoryObject('typeBinding', u'UnitDefinitionType', UnitDefinitionType)


# Complex type DQ_TopologicalConsistency_PropertyType with content type ELEMENT_ONLY
class DQ_TopologicalConsistency_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'DQ_TopologicalConsistency_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmd}DQ_TopologicalConsistency uses Python identifier DQ_TopologicalConsistency
    __DQ_TopologicalConsistency = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'DQ_TopologicalConsistency'), 'DQ_TopologicalConsistency', '__httpwww_isotc211_org2005gmd_DQ_TopologicalConsistency_PropertyType_httpwww_isotc211_org2005gmdDQ_TopologicalConsistency', False)

    
    DQ_TopologicalConsistency = property(__DQ_TopologicalConsistency.value, __DQ_TopologicalConsistency.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_isotc211_org2005gmd_DQ_TopologicalConsistency_PropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_isotc211_org2005gmd_DQ_TopologicalConsistency_PropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_isotc211_org2005gmd_DQ_TopologicalConsistency_PropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmd_DQ_TopologicalConsistency_PropertyType_httpwww_isotc211_org2005gconilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute uuidref uses Python identifier uuidref
    __uuidref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uuidref'), 'uuidref', '__httpwww_isotc211_org2005gmd_DQ_TopologicalConsistency_PropertyType_uuidref', pyxb.binding.datatypes.string)
    
    uuidref = property(__uuidref.value, __uuidref.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_isotc211_org2005gmd_DQ_TopologicalConsistency_PropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_isotc211_org2005gmd_DQ_TopologicalConsistency_PropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_isotc211_org2005gmd_DQ_TopologicalConsistency_PropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_isotc211_org2005gmd_DQ_TopologicalConsistency_PropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)


    _ElementMap = {
        __DQ_TopologicalConsistency.name() : __DQ_TopologicalConsistency
    }
    _AttributeMap = {
        __type.name() : __type,
        __arcrole.name() : __arcrole,
        __role.name() : __role,
        __nilReason.name() : __nilReason,
        __uuidref.name() : __uuidref,
        __show.name() : __show,
        __href.name() : __href,
        __actuate.name() : __actuate,
        __title.name() : __title
    }
_Namespace_gmd.addCategoryObject('typeBinding', u'DQ_TopologicalConsistency_PropertyType', DQ_TopologicalConsistency_PropertyType)


# Complex type DiscreteCoverageType with content type ELEMENT_ONLY
class DiscreteCoverageType (AbstractCoverageType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'DiscreteCoverageType')
    # Base type is AbstractCoverageType
    
    # Element boundedBy ({http://www.opengis.net/gml/3.2}boundedBy) inherited from {http://www.opengis.net/gml/3.2}AbstractFeatureType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element rangeSet ({http://www.opengis.net/gml/3.2}rangeSet) inherited from {http://www.opengis.net/gml/3.2}AbstractCoverageType
    
    # Element {http://www.opengis.net/gml/3.2}coverageFunction uses Python identifier coverageFunction
    __coverageFunction = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'coverageFunction'), 'coverageFunction', '__httpwww_opengis_netgml3_2_DiscreteCoverageType_httpwww_opengis_netgml3_2coverageFunction', False)

    
    coverageFunction = property(__coverageFunction.value, __coverageFunction.set, None, u'The gml:coverageFunction property describes the mapping function from the domain to the range of the coverage.\nThe value of the CoverageFunction is one of gml:CoverageMappingRule and gml:GridFunction.\nIf the gml:coverageFunction property is omitted for a gridded coverage (including rectified gridded coverages) the gml:startPoint is assumed to be the value of the gml:low property in the gml:Grid geometry, and the gml:sequenceRule is assumed to be linear and the gml:axisOrder property is assumed to be "+1 +2".')

    
    # Element location ({http://www.opengis.net/gml/3.2}location) inherited from {http://www.opengis.net/gml/3.2}AbstractFeatureType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element domainSet ({http://www.opengis.net/gml/3.2}domainSet) inherited from {http://www.opengis.net/gml/3.2}AbstractCoverageType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Attribute id inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType

    _ElementMap = AbstractCoverageType._ElementMap.copy()
    _ElementMap.update({
        __coverageFunction.name() : __coverageFunction
    })
    _AttributeMap = AbstractCoverageType._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gml.addCategoryObject('typeBinding', u'DiscreteCoverageType', DiscreteCoverageType)


# Complex type AbstractEX_GeographicExtent_Type with content type ELEMENT_ONLY
class AbstractEX_GeographicExtent_Type (AbstractObject_Type):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = True
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'AbstractEX_GeographicExtent_Type')
    # Base type is AbstractObject_Type
    
    # Element {http://www.isotc211.org/2005/gmd}extentTypeCode uses Python identifier extentTypeCode
    __extentTypeCode = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'extentTypeCode'), 'extentTypeCode', '__httpwww_isotc211_org2005gmd_AbstractEX_GeographicExtent_Type_httpwww_isotc211_org2005gmdextentTypeCode', False)

    
    extentTypeCode = property(__extentTypeCode.value, __extentTypeCode.set, None, None)

    
    # Attribute id inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type
    
    # Attribute uuid inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type

    _ElementMap = AbstractObject_Type._ElementMap.copy()
    _ElementMap.update({
        __extentTypeCode.name() : __extentTypeCode
    })
    _AttributeMap = AbstractObject_Type._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gmd.addCategoryObject('typeBinding', u'AbstractEX_GeographicExtent_Type', AbstractEX_GeographicExtent_Type)


# Complex type AngleChoiceType with content type ELEMENT_ONLY
class AngleChoiceType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'AngleChoiceType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.opengis.net/gml/3.2}angle uses Python identifier angle
    __angle = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'angle'), 'angle', '__httpwww_opengis_netgml3_2_AngleChoiceType_httpwww_opengis_netgml3_2angle', False)

    
    angle = property(__angle.value, __angle.set, None, u'The gml:angle property element is used to record the value of an angle quantity as a single number, with its units.')

    
    # Element {http://www.opengis.net/gml/3.2}dmsAngle uses Python identifier dmsAngle
    __dmsAngle = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'dmsAngle'), 'dmsAngle', '__httpwww_opengis_netgml3_2_AngleChoiceType_httpwww_opengis_netgml3_2dmsAngle', False)

    
    dmsAngle = property(__dmsAngle.value, __dmsAngle.set, None, u'')


    _ElementMap = {
        __angle.name() : __angle,
        __dmsAngle.name() : __dmsAngle
    }
    _AttributeMap = {
        
    }
_Namespace_gml.addCategoryObject('typeBinding', u'AngleChoiceType', AngleChoiceType)


# Complex type Integer_PropertyType with content type ELEMENT_ONLY
class Integer_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gco, u'Integer_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gco}Integer uses Python identifier Integer
    __Integer = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'Integer'), 'Integer', '__httpwww_isotc211_org2005gco_Integer_PropertyType_httpwww_isotc211_org2005gcoInteger', False)

    
    Integer = property(__Integer.value, __Integer.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gco_Integer_PropertyType_httpwww_isotc211_org2005gconilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)


    _ElementMap = {
        __Integer.name() : __Integer
    }
    _AttributeMap = {
        __nilReason.name() : __nilReason
    }
_Namespace_gco.addCategoryObject('typeBinding', u'Integer_PropertyType', Integer_PropertyType)


# Complex type MD_Keywords_PropertyType with content type ELEMENT_ONLY
class MD_Keywords_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_Keywords_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmd}MD_Keywords uses Python identifier MD_Keywords
    __MD_Keywords = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_Keywords'), 'MD_Keywords', '__httpwww_isotc211_org2005gmd_MD_Keywords_PropertyType_httpwww_isotc211_org2005gmdMD_Keywords', False)

    
    MD_Keywords = property(__MD_Keywords.value, __MD_Keywords.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_isotc211_org2005gmd_MD_Keywords_PropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_isotc211_org2005gmd_MD_Keywords_PropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_isotc211_org2005gmd_MD_Keywords_PropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmd_MD_Keywords_PropertyType_httpwww_isotc211_org2005gconilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_isotc211_org2005gmd_MD_Keywords_PropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute uuidref uses Python identifier uuidref
    __uuidref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uuidref'), 'uuidref', '__httpwww_isotc211_org2005gmd_MD_Keywords_PropertyType_uuidref', pyxb.binding.datatypes.string)
    
    uuidref = property(__uuidref.value, __uuidref.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_isotc211_org2005gmd_MD_Keywords_PropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_isotc211_org2005gmd_MD_Keywords_PropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_isotc211_org2005gmd_MD_Keywords_PropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")


    _ElementMap = {
        __MD_Keywords.name() : __MD_Keywords
    }
    _AttributeMap = {
        __type.name() : __type,
        __arcrole.name() : __arcrole,
        __role.name() : __role,
        __nilReason.name() : __nilReason,
        __title.name() : __title,
        __uuidref.name() : __uuidref,
        __show.name() : __show,
        __href.name() : __href,
        __actuate.name() : __actuate
    }
_Namespace_gmd.addCategoryObject('typeBinding', u'MD_Keywords_PropertyType', MD_Keywords_PropertyType)


# Complex type AssociationRoleType with content type ELEMENT_ONLY
class AssociationRoleType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'AssociationRoleType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_opengis_netgml3_2_AssociationRoleType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_opengis_netgml3_2_AssociationRoleType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_opengis_netgml3_2_AssociationRoleType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_opengis_netgml3_2_AssociationRoleType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute owns uses Python identifier owns
    __owns = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'owns'), 'owns', '__httpwww_opengis_netgml3_2_AssociationRoleType_owns', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    owns = property(__owns.value, __owns.set, None, None)

    
    # Attribute nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'nilReason'), 'nilReason', '__httpwww_opengis_netgml3_2_AssociationRoleType_nilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_opengis_netgml3_2_AssociationRoleType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.opengis.net/gml/3.2}remoteSchema uses Python identifier remoteSchema
    __remoteSchema = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'remoteSchema'), 'remoteSchema', '__httpwww_opengis_netgml3_2_AssociationRoleType_httpwww_opengis_netgml3_2remoteSchema', pyxb.binding.datatypes.anyURI)
    
    remoteSchema = property(__remoteSchema.value, __remoteSchema.set, None, u'')

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_opengis_netgml3_2_AssociationRoleType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_opengis_netgml3_2_AssociationRoleType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    _HasWildcardElement = True

    _ElementMap = {
        
    }
    _AttributeMap = {
        __role.name() : __role,
        __arcrole.name() : __arcrole,
        __title.name() : __title,
        __show.name() : __show,
        __owns.name() : __owns,
        __nilReason.name() : __nilReason,
        __href.name() : __href,
        __remoteSchema.name() : __remoteSchema,
        __actuate.name() : __actuate,
        __type.name() : __type
    }
_Namespace_gml.addCategoryObject('typeBinding', u'AssociationRoleType', AssociationRoleType)


# Complex type AbstractDQ_PositionalAccuracy_Type with content type ELEMENT_ONLY
class AbstractDQ_PositionalAccuracy_Type (AbstractDQ_Element_Type):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = True
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'AbstractDQ_PositionalAccuracy_Type')
    # Base type is AbstractDQ_Element_Type
    
    # Element evaluationMethodDescription ({http://www.isotc211.org/2005/gmd}evaluationMethodDescription) inherited from {http://www.isotc211.org/2005/gmd}AbstractDQ_Element_Type
    
    # Element measureDescription ({http://www.isotc211.org/2005/gmd}measureDescription) inherited from {http://www.isotc211.org/2005/gmd}AbstractDQ_Element_Type
    
    # Element evaluationProcedure ({http://www.isotc211.org/2005/gmd}evaluationProcedure) inherited from {http://www.isotc211.org/2005/gmd}AbstractDQ_Element_Type
    
    # Element evaluationMethodType ({http://www.isotc211.org/2005/gmd}evaluationMethodType) inherited from {http://www.isotc211.org/2005/gmd}AbstractDQ_Element_Type
    
    # Element dateTime ({http://www.isotc211.org/2005/gmd}dateTime) inherited from {http://www.isotc211.org/2005/gmd}AbstractDQ_Element_Type
    
    # Element result ({http://www.isotc211.org/2005/gmd}result) inherited from {http://www.isotc211.org/2005/gmd}AbstractDQ_Element_Type
    
    # Element nameOfMeasure ({http://www.isotc211.org/2005/gmd}nameOfMeasure) inherited from {http://www.isotc211.org/2005/gmd}AbstractDQ_Element_Type
    
    # Element measureIdentification ({http://www.isotc211.org/2005/gmd}measureIdentification) inherited from {http://www.isotc211.org/2005/gmd}AbstractDQ_Element_Type
    
    # Attribute id inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type
    
    # Attribute uuid inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type

    _ElementMap = AbstractDQ_Element_Type._ElementMap.copy()
    _ElementMap.update({
        
    })
    _AttributeMap = AbstractDQ_Element_Type._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gmd.addCategoryObject('typeBinding', u'AbstractDQ_PositionalAccuracy_Type', AbstractDQ_PositionalAccuracy_Type)


# Complex type DQ_GriddedDataPositionalAccuracy_Type with content type ELEMENT_ONLY
class DQ_GriddedDataPositionalAccuracy_Type (AbstractDQ_PositionalAccuracy_Type):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'DQ_GriddedDataPositionalAccuracy_Type')
    # Base type is AbstractDQ_PositionalAccuracy_Type
    
    # Element evaluationMethodDescription ({http://www.isotc211.org/2005/gmd}evaluationMethodDescription) inherited from {http://www.isotc211.org/2005/gmd}AbstractDQ_Element_Type
    
    # Element measureDescription ({http://www.isotc211.org/2005/gmd}measureDescription) inherited from {http://www.isotc211.org/2005/gmd}AbstractDQ_Element_Type
    
    # Element evaluationProcedure ({http://www.isotc211.org/2005/gmd}evaluationProcedure) inherited from {http://www.isotc211.org/2005/gmd}AbstractDQ_Element_Type
    
    # Element evaluationMethodType ({http://www.isotc211.org/2005/gmd}evaluationMethodType) inherited from {http://www.isotc211.org/2005/gmd}AbstractDQ_Element_Type
    
    # Element dateTime ({http://www.isotc211.org/2005/gmd}dateTime) inherited from {http://www.isotc211.org/2005/gmd}AbstractDQ_Element_Type
    
    # Element result ({http://www.isotc211.org/2005/gmd}result) inherited from {http://www.isotc211.org/2005/gmd}AbstractDQ_Element_Type
    
    # Element nameOfMeasure ({http://www.isotc211.org/2005/gmd}nameOfMeasure) inherited from {http://www.isotc211.org/2005/gmd}AbstractDQ_Element_Type
    
    # Element measureIdentification ({http://www.isotc211.org/2005/gmd}measureIdentification) inherited from {http://www.isotc211.org/2005/gmd}AbstractDQ_Element_Type
    
    # Attribute id inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type
    
    # Attribute uuid inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type

    _ElementMap = AbstractDQ_PositionalAccuracy_Type._ElementMap.copy()
    _ElementMap.update({
        
    })
    _AttributeMap = AbstractDQ_PositionalAccuracy_Type._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gmd.addCategoryObject('typeBinding', u'DQ_GriddedDataPositionalAccuracy_Type', DQ_GriddedDataPositionalAccuracy_Type)


# Complex type SphericalCSType with content type ELEMENT_ONLY
class SphericalCSType (AbstractCoordinateSystemType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'SphericalCSType')
    # Base type is AbstractCoordinateSystemType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element axis ({http://www.opengis.net/gml/3.2}axis) inherited from {http://www.opengis.net/gml/3.2}AbstractCoordinateSystemType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element remarks ({http://www.opengis.net/gml/3.2}remarks) inherited from {http://www.opengis.net/gml/3.2}DefinitionType
    
    # Attribute aggregationType inherited from {http://www.opengis.net/gml/3.2}AbstractCoordinateSystemType
    
    # Attribute id_ inherited from {http://www.opengis.net/gml/3.2}DefinitionBaseType

    _ElementMap = AbstractCoordinateSystemType._ElementMap.copy()
    _ElementMap.update({
        
    })
    _AttributeMap = AbstractCoordinateSystemType._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gml.addCategoryObject('typeBinding', u'SphericalCSType', SphericalCSType)


# Complex type MD_TopologyLevelCode_PropertyType with content type ELEMENT_ONLY
class MD_TopologyLevelCode_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_TopologyLevelCode_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmd}MD_TopologyLevelCode uses Python identifier MD_TopologyLevelCode
    __MD_TopologyLevelCode = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_TopologyLevelCode'), 'MD_TopologyLevelCode', '__httpwww_isotc211_org2005gmd_MD_TopologyLevelCode_PropertyType_httpwww_isotc211_org2005gmdMD_TopologyLevelCode', False)

    
    MD_TopologyLevelCode = property(__MD_TopologyLevelCode.value, __MD_TopologyLevelCode.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmd_MD_TopologyLevelCode_PropertyType_httpwww_isotc211_org2005gconilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)


    _ElementMap = {
        __MD_TopologyLevelCode.name() : __MD_TopologyLevelCode
    }
    _AttributeMap = {
        __nilReason.name() : __nilReason
    }
_Namespace_gmd.addCategoryObject('typeBinding', u'MD_TopologyLevelCode_PropertyType', MD_TopologyLevelCode_PropertyType)


# Complex type ObliqueCartesianCSPropertyType with content type ELEMENT_ONLY
class ObliqueCartesianCSPropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'ObliqueCartesianCSPropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.opengis.net/gml/3.2}ObliqueCartesianCS uses Python identifier ObliqueCartesianCS
    __ObliqueCartesianCS = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'ObliqueCartesianCS'), 'ObliqueCartesianCS', '__httpwww_opengis_netgml3_2_ObliqueCartesianCSPropertyType_httpwww_opengis_netgml3_2ObliqueCartesianCS', False)

    
    ObliqueCartesianCS = property(__ObliqueCartesianCS.value, __ObliqueCartesianCS.set, None, u'')

    
    # Attribute {http://www.opengis.net/gml/3.2}remoteSchema uses Python identifier remoteSchema
    __remoteSchema = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'remoteSchema'), 'remoteSchema', '__httpwww_opengis_netgml3_2_ObliqueCartesianCSPropertyType_httpwww_opengis_netgml3_2remoteSchema', pyxb.binding.datatypes.anyURI)
    
    remoteSchema = property(__remoteSchema.value, __remoteSchema.set, None, u'')

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_opengis_netgml3_2_ObliqueCartesianCSPropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_opengis_netgml3_2_ObliqueCartesianCSPropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_opengis_netgml3_2_ObliqueCartesianCSPropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'nilReason'), 'nilReason', '__httpwww_opengis_netgml3_2_ObliqueCartesianCSPropertyType_nilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_opengis_netgml3_2_ObliqueCartesianCSPropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_opengis_netgml3_2_ObliqueCartesianCSPropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_opengis_netgml3_2_ObliqueCartesianCSPropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_opengis_netgml3_2_ObliqueCartesianCSPropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")


    _ElementMap = {
        __ObliqueCartesianCS.name() : __ObliqueCartesianCS
    }
    _AttributeMap = {
        __remoteSchema.name() : __remoteSchema,
        __href.name() : __href,
        __type.name() : __type,
        __title.name() : __title,
        __nilReason.name() : __nilReason,
        __arcrole.name() : __arcrole,
        __role.name() : __role,
        __show.name() : __show,
        __actuate.name() : __actuate
    }
_Namespace_gml.addCategoryObject('typeBinding', u'ObliqueCartesianCSPropertyType', ObliqueCartesianCSPropertyType)


# Complex type EnvelopeType with content type ELEMENT_ONLY
class EnvelopeType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'EnvelopeType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.opengis.net/gml/3.2}upperCorner uses Python identifier upperCorner
    __upperCorner = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'upperCorner'), 'upperCorner', '__httpwww_opengis_netgml3_2_EnvelopeType_httpwww_opengis_netgml3_2upperCorner', False)

    
    upperCorner = property(__upperCorner.value, __upperCorner.set, None, None)

    
    # Element {http://www.opengis.net/gml/3.2}lowerCorner uses Python identifier lowerCorner
    __lowerCorner = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'lowerCorner'), 'lowerCorner', '__httpwww_opengis_netgml3_2_EnvelopeType_httpwww_opengis_netgml3_2lowerCorner', False)

    
    lowerCorner = property(__lowerCorner.value, __lowerCorner.set, None, None)

    
    # Element {http://www.opengis.net/gml/3.2}coordinates uses Python identifier coordinates
    __coordinates = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'coordinates'), 'coordinates', '__httpwww_opengis_netgml3_2_EnvelopeType_httpwww_opengis_netgml3_2coordinates', False)

    
    coordinates = property(__coordinates.value, __coordinates.set, None, u'')

    
    # Element {http://www.opengis.net/gml/3.2}pos uses Python identifier pos
    __pos = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'pos'), 'pos', '__httpwww_opengis_netgml3_2_EnvelopeType_httpwww_opengis_netgml3_2pos', True)

    
    pos = property(__pos.value, __pos.set, None, None)

    
    # Attribute srsName uses Python identifier srsName
    __srsName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'srsName'), 'srsName', '__httpwww_opengis_netgml3_2_EnvelopeType_srsName', pyxb.binding.datatypes.anyURI)
    
    srsName = property(__srsName.value, __srsName.set, None, None)

    
    # Attribute axisLabels uses Python identifier axisLabels
    __axisLabels = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'axisLabels'), 'axisLabels', '__httpwww_opengis_netgml3_2_EnvelopeType_axisLabels', NCNameList)
    
    axisLabels = property(__axisLabels.value, __axisLabels.set, None, None)

    
    # Attribute uomLabels uses Python identifier uomLabels
    __uomLabels = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uomLabels'), 'uomLabels', '__httpwww_opengis_netgml3_2_EnvelopeType_uomLabels', NCNameList)
    
    uomLabels = property(__uomLabels.value, __uomLabels.set, None, None)

    
    # Attribute srsDimension uses Python identifier srsDimension
    __srsDimension = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'srsDimension'), 'srsDimension', '__httpwww_opengis_netgml3_2_EnvelopeType_srsDimension', pyxb.binding.datatypes.positiveInteger)
    
    srsDimension = property(__srsDimension.value, __srsDimension.set, None, None)


    _ElementMap = {
        __upperCorner.name() : __upperCorner,
        __lowerCorner.name() : __lowerCorner,
        __coordinates.name() : __coordinates,
        __pos.name() : __pos
    }
    _AttributeMap = {
        __srsName.name() : __srsName,
        __axisLabels.name() : __axisLabels,
        __uomLabels.name() : __uomLabels,
        __srsDimension.name() : __srsDimension
    }
_Namespace_gml.addCategoryObject('typeBinding', u'EnvelopeType', EnvelopeType)


# Complex type EnvelopeWithTimePeriodType with content type ELEMENT_ONLY
class EnvelopeWithTimePeriodType (EnvelopeType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'EnvelopeWithTimePeriodType')
    # Base type is EnvelopeType
    
    # Element {http://www.opengis.net/gml/3.2}beginPosition uses Python identifier beginPosition
    __beginPosition = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'beginPosition'), 'beginPosition', '__httpwww_opengis_netgml3_2_EnvelopeWithTimePeriodType_httpwww_opengis_netgml3_2beginPosition', False)

    
    beginPosition = property(__beginPosition.value, __beginPosition.set, None, None)

    
    # Element coordinates ({http://www.opengis.net/gml/3.2}coordinates) inherited from {http://www.opengis.net/gml/3.2}EnvelopeType
    
    # Element pos ({http://www.opengis.net/gml/3.2}pos) inherited from {http://www.opengis.net/gml/3.2}EnvelopeType
    
    # Element lowerCorner ({http://www.opengis.net/gml/3.2}lowerCorner) inherited from {http://www.opengis.net/gml/3.2}EnvelopeType
    
    # Element {http://www.opengis.net/gml/3.2}endPosition uses Python identifier endPosition
    __endPosition = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'endPosition'), 'endPosition', '__httpwww_opengis_netgml3_2_EnvelopeWithTimePeriodType_httpwww_opengis_netgml3_2endPosition', False)

    
    endPosition = property(__endPosition.value, __endPosition.set, None, None)

    
    # Element upperCorner ({http://www.opengis.net/gml/3.2}upperCorner) inherited from {http://www.opengis.net/gml/3.2}EnvelopeType
    
    # Attribute srsName inherited from {http://www.opengis.net/gml/3.2}EnvelopeType
    
    # Attribute axisLabels inherited from {http://www.opengis.net/gml/3.2}EnvelopeType
    
    # Attribute uomLabels inherited from {http://www.opengis.net/gml/3.2}EnvelopeType
    
    # Attribute srsDimension inherited from {http://www.opengis.net/gml/3.2}EnvelopeType
    
    # Attribute frame uses Python identifier frame
    __frame = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'frame'), 'frame', '__httpwww_opengis_netgml3_2_EnvelopeWithTimePeriodType_frame', pyxb.binding.datatypes.anyURI, unicode_default=u'#ISO-8601')
    
    frame = property(__frame.value, __frame.set, None, None)


    _ElementMap = EnvelopeType._ElementMap.copy()
    _ElementMap.update({
        __beginPosition.name() : __beginPosition,
        __endPosition.name() : __endPosition
    })
    _AttributeMap = EnvelopeType._AttributeMap.copy()
    _AttributeMap.update({
        __frame.name() : __frame
    })
_Namespace_gml.addCategoryObject('typeBinding', u'EnvelopeWithTimePeriodType', EnvelopeWithTimePeriodType)


# Complex type SurfacePropertyType with content type ELEMENT_ONLY
class SurfacePropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'SurfacePropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.opengis.net/gml/3.2}AbstractSurface uses Python identifier AbstractSurface
    __AbstractSurface = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractSurface'), 'AbstractSurface', '__httpwww_opengis_netgml3_2_SurfacePropertyType_httpwww_opengis_netgml3_2AbstractSurface', False)

    
    AbstractSurface = property(__AbstractSurface.value, __AbstractSurface.set, None, u'The AbstractSurface element is the abstract head of the substitution group for all (continuous) surface elements.')

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_opengis_netgml3_2_SurfacePropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute owns uses Python identifier owns
    __owns = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'owns'), 'owns', '__httpwww_opengis_netgml3_2_SurfacePropertyType_owns', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    owns = property(__owns.value, __owns.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_opengis_netgml3_2_SurfacePropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_opengis_netgml3_2_SurfacePropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_opengis_netgml3_2_SurfacePropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'nilReason'), 'nilReason', '__httpwww_opengis_netgml3_2_SurfacePropertyType_nilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_opengis_netgml3_2_SurfacePropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.opengis.net/gml/3.2}remoteSchema uses Python identifier remoteSchema
    __remoteSchema = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'remoteSchema'), 'remoteSchema', '__httpwww_opengis_netgml3_2_SurfacePropertyType_httpwww_opengis_netgml3_2remoteSchema', pyxb.binding.datatypes.anyURI)
    
    remoteSchema = property(__remoteSchema.value, __remoteSchema.set, None, u'')

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_opengis_netgml3_2_SurfacePropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_opengis_netgml3_2_SurfacePropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")


    _ElementMap = {
        __AbstractSurface.name() : __AbstractSurface
    }
    _AttributeMap = {
        __actuate.name() : __actuate,
        __owns.name() : __owns,
        __arcrole.name() : __arcrole,
        __href.name() : __href,
        __type.name() : __type,
        __nilReason.name() : __nilReason,
        __title.name() : __title,
        __remoteSchema.name() : __remoteSchema,
        __role.name() : __role,
        __show.name() : __show
    }
_Namespace_gml.addCategoryObject('typeBinding', u'SurfacePropertyType', SurfacePropertyType)


# Complex type AbstractGeneralTransformationType with content type ELEMENT_ONLY
class AbstractGeneralTransformationType (AbstractCoordinateOperationType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = True
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractGeneralTransformationType')
    # Base type is AbstractCoordinateOperationType
    
    # Element sourceCRS ({http://www.opengis.net/gml/3.2}sourceCRS) inherited from {http://www.opengis.net/gml/3.2}AbstractCoordinateOperationType
    
    # Element targetCRS ({http://www.opengis.net/gml/3.2}targetCRS) inherited from {http://www.opengis.net/gml/3.2}AbstractCoordinateOperationType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element operationVersion ({http://www.opengis.net/gml/3.2}operationVersion) inherited from {http://www.opengis.net/gml/3.2}AbstractCoordinateOperationType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element scope ({http://www.opengis.net/gml/3.2}scope) inherited from {http://www.opengis.net/gml/3.2}AbstractCoordinateOperationType
    
    # Element domainOfValidity ({http://www.opengis.net/gml/3.2}domainOfValidity) inherited from {http://www.opengis.net/gml/3.2}AbstractCoordinateOperationType
    
    # Element coordinateOperationAccuracy ({http://www.opengis.net/gml/3.2}coordinateOperationAccuracy) inherited from {http://www.opengis.net/gml/3.2}AbstractCoordinateOperationType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element remarks ({http://www.opengis.net/gml/3.2}remarks) inherited from {http://www.opengis.net/gml/3.2}DefinitionType
    
    # Attribute id_ is restricted from parent
    
    # Attribute {http://www.opengis.net/gml/3.2}id uses Python identifier id_
    __id_ = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'id'), 'id_', '__httpwww_opengis_netgml3_2_DefinitionBaseType_httpwww_opengis_netgml3_2id', pyxb.binding.datatypes.ID, required=True)
    
    id_ = property(__id_.value, __id_.set, None, u'The attribute gml:id supports provision of a handle for the XML element representing a GML Object. Its use is mandatory for all GML objects. It is of XML type ID, so is constrained to be unique in the XML document within which it occurs.')


    _ElementMap = AbstractCoordinateOperationType._ElementMap.copy()
    _ElementMap.update({
        
    })
    _AttributeMap = AbstractCoordinateOperationType._AttributeMap.copy()
    _AttributeMap.update({
        __id_.name() : __id_
    })
_Namespace_gml.addCategoryObject('typeBinding', u'AbstractGeneralTransformationType', AbstractGeneralTransformationType)


# Complex type TransformationType with content type ELEMENT_ONLY
class TransformationType (AbstractGeneralTransformationType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'TransformationType')
    # Base type is AbstractGeneralTransformationType
    
    # Element sourceCRS ({http://www.opengis.net/gml/3.2}sourceCRS) inherited from {http://www.opengis.net/gml/3.2}AbstractCoordinateOperationType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element {http://www.opengis.net/gml/3.2}parameterValue uses Python identifier parameterValue
    __parameterValue = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'parameterValue'), 'parameterValue', '__httpwww_opengis_netgml3_2_TransformationType_httpwww_opengis_netgml3_2parameterValue', True)

    
    parameterValue = property(__parameterValue.value, __parameterValue.set, None, u'gml:parameterValue is a composition association to a parameter value or group of parameter values used by a coordinate operation.')

    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element {http://www.opengis.net/gml/3.2}method uses Python identifier method
    __method = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'method'), 'method', '__httpwww_opengis_netgml3_2_TransformationType_httpwww_opengis_netgml3_2method', False)

    
    method = property(__method.value, __method.set, None, u'gml:method is an association role to the operation method used by a coordinate operation.')

    
    # Element operationVersion ({http://www.opengis.net/gml/3.2}operationVersion) inherited from {http://www.opengis.net/gml/3.2}AbstractCoordinateOperationType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element scope ({http://www.opengis.net/gml/3.2}scope) inherited from {http://www.opengis.net/gml/3.2}AbstractCoordinateOperationType
    
    # Element domainOfValidity ({http://www.opengis.net/gml/3.2}domainOfValidity) inherited from {http://www.opengis.net/gml/3.2}AbstractCoordinateOperationType
    
    # Element coordinateOperationAccuracy ({http://www.opengis.net/gml/3.2}coordinateOperationAccuracy) inherited from {http://www.opengis.net/gml/3.2}AbstractCoordinateOperationType
    
    # Element targetCRS ({http://www.opengis.net/gml/3.2}targetCRS) inherited from {http://www.opengis.net/gml/3.2}AbstractCoordinateOperationType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element remarks ({http://www.opengis.net/gml/3.2}remarks) inherited from {http://www.opengis.net/gml/3.2}DefinitionType
    
    # Attribute id_2 inherited from {http://www.opengis.net/gml/3.2}AbstractGeneralTransformationType

    _ElementMap = AbstractGeneralTransformationType._ElementMap.copy()
    _ElementMap.update({
        __parameterValue.name() : __parameterValue,
        __method.name() : __method
    })
    _AttributeMap = AbstractGeneralTransformationType._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gml.addCategoryObject('typeBinding', u'TransformationType', TransformationType)


# Complex type UnlimitedInteger_Type with content type SIMPLE
class UnlimitedInteger_Type (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = pyxb.binding.datatypes.nonNegativeInteger
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gco, u'UnlimitedInteger_Type')
    # Base type is pyxb.binding.datatypes.nonNegativeInteger
    
    # Attribute isInfinite uses Python identifier isInfinite
    __isInfinite = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'isInfinite'), 'isInfinite', '__httpwww_isotc211_org2005gco_UnlimitedInteger_Type_isInfinite', pyxb.binding.datatypes.boolean)
    
    isInfinite = property(__isInfinite.value, __isInfinite.set, None, None)


    _ElementMap = {
        
    }
    _AttributeMap = {
        __isInfinite.name() : __isInfinite
    }
_Namespace_gco.addCategoryObject('typeBinding', u'UnlimitedInteger_Type', UnlimitedInteger_Type)


# Complex type CI_Telephone_PropertyType with content type ELEMENT_ONLY
class CI_Telephone_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'CI_Telephone_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmd}CI_Telephone uses Python identifier CI_Telephone
    __CI_Telephone = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'CI_Telephone'), 'CI_Telephone', '__httpwww_isotc211_org2005gmd_CI_Telephone_PropertyType_httpwww_isotc211_org2005gmdCI_Telephone', False)

    
    CI_Telephone = property(__CI_Telephone.value, __CI_Telephone.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_isotc211_org2005gmd_CI_Telephone_PropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_isotc211_org2005gmd_CI_Telephone_PropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_isotc211_org2005gmd_CI_Telephone_PropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_isotc211_org2005gmd_CI_Telephone_PropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_isotc211_org2005gmd_CI_Telephone_PropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute uuidref uses Python identifier uuidref
    __uuidref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uuidref'), 'uuidref', '__httpwww_isotc211_org2005gmd_CI_Telephone_PropertyType_uuidref', pyxb.binding.datatypes.string)
    
    uuidref = property(__uuidref.value, __uuidref.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_isotc211_org2005gmd_CI_Telephone_PropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmd_CI_Telephone_PropertyType_httpwww_isotc211_org2005gconilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_isotc211_org2005gmd_CI_Telephone_PropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)


    _ElementMap = {
        __CI_Telephone.name() : __CI_Telephone
    }
    _AttributeMap = {
        __show.name() : __show,
        __role.name() : __role,
        __href.name() : __href,
        __actuate.name() : __actuate,
        __type.name() : __type,
        __uuidref.name() : __uuidref,
        __arcrole.name() : __arcrole,
        __nilReason.name() : __nilReason,
        __title.name() : __title
    }
_Namespace_gmd.addCategoryObject('typeBinding', u'CI_Telephone_PropertyType', CI_Telephone_PropertyType)


# Complex type DS_OtherAggregate_PropertyType with content type ELEMENT_ONLY
class DS_OtherAggregate_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'DS_OtherAggregate_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmd}DS_OtherAggregate uses Python identifier DS_OtherAggregate
    __DS_OtherAggregate = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'DS_OtherAggregate'), 'DS_OtherAggregate', '__httpwww_isotc211_org2005gmd_DS_OtherAggregate_PropertyType_httpwww_isotc211_org2005gmdDS_OtherAggregate', False)

    
    DS_OtherAggregate = property(__DS_OtherAggregate.value, __DS_OtherAggregate.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_isotc211_org2005gmd_DS_OtherAggregate_PropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_isotc211_org2005gmd_DS_OtherAggregate_PropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmd_DS_OtherAggregate_PropertyType_httpwww_isotc211_org2005gconilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_isotc211_org2005gmd_DS_OtherAggregate_PropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_isotc211_org2005gmd_DS_OtherAggregate_PropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute uuidref uses Python identifier uuidref
    __uuidref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uuidref'), 'uuidref', '__httpwww_isotc211_org2005gmd_DS_OtherAggregate_PropertyType_uuidref', pyxb.binding.datatypes.string)
    
    uuidref = property(__uuidref.value, __uuidref.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_isotc211_org2005gmd_DS_OtherAggregate_PropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_isotc211_org2005gmd_DS_OtherAggregate_PropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_isotc211_org2005gmd_DS_OtherAggregate_PropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)


    _ElementMap = {
        __DS_OtherAggregate.name() : __DS_OtherAggregate
    }
    _AttributeMap = {
        __arcrole.name() : __arcrole,
        __role.name() : __role,
        __nilReason.name() : __nilReason,
        __title.name() : __title,
        __show.name() : __show,
        __uuidref.name() : __uuidref,
        __href.name() : __href,
        __actuate.name() : __actuate,
        __type.name() : __type
    }
_Namespace_gmd.addCategoryObject('typeBinding', u'DS_OtherAggregate_PropertyType', DS_OtherAggregate_PropertyType)


# Complex type AngleType with content type SIMPLE
class AngleType (MeasureType):
    _TypeDefinition = pyxb.binding.datatypes.double
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'AngleType')
    # Base type is MeasureType
    
    # Attribute uom inherited from {http://www.opengis.net/gml/3.2}MeasureType

    _ElementMap = MeasureType._ElementMap.copy()
    _ElementMap.update({
        
    })
    _AttributeMap = MeasureType._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gml.addCategoryObject('typeBinding', u'AngleType', AngleType)


# Complex type MD_PixelOrientationCode_PropertyType with content type ELEMENT_ONLY
class MD_PixelOrientationCode_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_PixelOrientationCode_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmd}MD_PixelOrientationCode uses Python identifier MD_PixelOrientationCode
    __MD_PixelOrientationCode = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_PixelOrientationCode'), 'MD_PixelOrientationCode', '__httpwww_isotc211_org2005gmd_MD_PixelOrientationCode_PropertyType_httpwww_isotc211_org2005gmdMD_PixelOrientationCode', False)

    
    MD_PixelOrientationCode = property(__MD_PixelOrientationCode.value, __MD_PixelOrientationCode.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmd_MD_PixelOrientationCode_PropertyType_httpwww_isotc211_org2005gconilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)


    _ElementMap = {
        __MD_PixelOrientationCode.name() : __MD_PixelOrientationCode
    }
    _AttributeMap = {
        __nilReason.name() : __nilReason
    }
_Namespace_gmd.addCategoryObject('typeBinding', u'MD_PixelOrientationCode_PropertyType', MD_PixelOrientationCode_PropertyType)


# Complex type StringOrRefType with content type SIMPLE
class StringOrRefType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = pyxb.binding.datatypes.string
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'StringOrRefType')
    # Base type is pyxb.binding.datatypes.string
    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_opengis_netgml3_2_StringOrRefType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.opengis.net/gml/3.2}remoteSchema uses Python identifier remoteSchema
    __remoteSchema = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'remoteSchema'), 'remoteSchema', '__httpwww_opengis_netgml3_2_StringOrRefType_httpwww_opengis_netgml3_2remoteSchema', pyxb.binding.datatypes.anyURI)
    
    remoteSchema = property(__remoteSchema.value, __remoteSchema.set, None, u'')

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_opengis_netgml3_2_StringOrRefType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_opengis_netgml3_2_StringOrRefType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_opengis_netgml3_2_StringOrRefType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'nilReason'), 'nilReason', '__httpwww_opengis_netgml3_2_StringOrRefType_nilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_opengis_netgml3_2_StringOrRefType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_opengis_netgml3_2_StringOrRefType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_opengis_netgml3_2_StringOrRefType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)


    _ElementMap = {
        
    }
    _AttributeMap = {
        __role.name() : __role,
        __remoteSchema.name() : __remoteSchema,
        __show.name() : __show,
        __actuate.name() : __actuate,
        __href.name() : __href,
        __nilReason.name() : __nilReason,
        __type.name() : __type,
        __title.name() : __title,
        __arcrole.name() : __arcrole
    }
_Namespace_gml.addCategoryObject('typeBinding', u'StringOrRefType', StringOrRefType)


# Complex type AffinePlacementType with content type ELEMENT_ONLY
class AffinePlacementType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'AffinePlacementType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.opengis.net/gml/3.2}outDimension uses Python identifier outDimension
    __outDimension = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'outDimension'), 'outDimension', '__httpwww_opengis_netgml3_2_AffinePlacementType_httpwww_opengis_netgml3_2outDimension', False)

    
    outDimension = property(__outDimension.value, __outDimension.set, None, None)

    
    # Element {http://www.opengis.net/gml/3.2}location uses Python identifier location
    __location = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'location'), 'location', '__httpwww_opengis_netgml3_2_AffinePlacementType_httpwww_opengis_netgml3_2location', False)

    
    location = property(__location.value, __location.set, None, None)

    
    # Element {http://www.opengis.net/gml/3.2}refDirection uses Python identifier refDirection
    __refDirection = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'refDirection'), 'refDirection', '__httpwww_opengis_netgml3_2_AffinePlacementType_httpwww_opengis_netgml3_2refDirection', True)

    
    refDirection = property(__refDirection.value, __refDirection.set, None, None)

    
    # Element {http://www.opengis.net/gml/3.2}inDimension uses Python identifier inDimension
    __inDimension = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'inDimension'), 'inDimension', '__httpwww_opengis_netgml3_2_AffinePlacementType_httpwww_opengis_netgml3_2inDimension', False)

    
    inDimension = property(__inDimension.value, __inDimension.set, None, None)


    _ElementMap = {
        __outDimension.name() : __outDimension,
        __location.name() : __location,
        __refDirection.name() : __refDirection,
        __inDimension.name() : __inDimension
    }
    _AttributeMap = {
        
    }
_Namespace_gml.addCategoryObject('typeBinding', u'AffinePlacementType', AffinePlacementType)


# Complex type AbstractMetadataPropertyType with content type EMPTY
class AbstractMetadataPropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = True
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractMetadataPropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute owns uses Python identifier owns
    __owns = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'owns'), 'owns', '__httpwww_opengis_netgml3_2_AbstractMetadataPropertyType_owns', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    owns = property(__owns.value, __owns.set, None, None)


    _ElementMap = {
        
    }
    _AttributeMap = {
        __owns.name() : __owns
    }
_Namespace_gml.addCategoryObject('typeBinding', u'AbstractMetadataPropertyType', AbstractMetadataPropertyType)


# Complex type EllipsoidPropertyType with content type ELEMENT_ONLY
class EllipsoidPropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'EllipsoidPropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.opengis.net/gml/3.2}Ellipsoid uses Python identifier Ellipsoid
    __Ellipsoid = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'Ellipsoid'), 'Ellipsoid', '__httpwww_opengis_netgml3_2_EllipsoidPropertyType_httpwww_opengis_netgml3_2Ellipsoid', False)

    
    Ellipsoid = property(__Ellipsoid.value, __Ellipsoid.set, None, u'A gml:Ellipsoid is a geometric figure that may be used to describe the approximate shape of the earth. In mathematical terms, it is a surface formed by the rotation of an ellipse about its minor axis.')

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_opengis_netgml3_2_EllipsoidPropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_opengis_netgml3_2_EllipsoidPropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_opengis_netgml3_2_EllipsoidPropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.opengis.net/gml/3.2}remoteSchema uses Python identifier remoteSchema
    __remoteSchema = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'remoteSchema'), 'remoteSchema', '__httpwww_opengis_netgml3_2_EllipsoidPropertyType_httpwww_opengis_netgml3_2remoteSchema', pyxb.binding.datatypes.anyURI)
    
    remoteSchema = property(__remoteSchema.value, __remoteSchema.set, None, u'')

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_opengis_netgml3_2_EllipsoidPropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'nilReason'), 'nilReason', '__httpwww_opengis_netgml3_2_EllipsoidPropertyType_nilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_opengis_netgml3_2_EllipsoidPropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_opengis_netgml3_2_EllipsoidPropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_opengis_netgml3_2_EllipsoidPropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)


    _ElementMap = {
        __Ellipsoid.name() : __Ellipsoid
    }
    _AttributeMap = {
        __title.name() : __title,
        __role.name() : __role,
        __arcrole.name() : __arcrole,
        __remoteSchema.name() : __remoteSchema,
        __show.name() : __show,
        __nilReason.name() : __nilReason,
        __actuate.name() : __actuate,
        __href.name() : __href,
        __type.name() : __type
    }
_Namespace_gml.addCategoryObject('typeBinding', u'EllipsoidPropertyType', EllipsoidPropertyType)


# Complex type TimeReferenceSystemType with content type ELEMENT_ONLY
class TimeReferenceSystemType (DefinitionType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'TimeReferenceSystemType')
    # Base type is DefinitionType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element {http://www.opengis.net/gml/3.2}domainOfValidity uses Python identifier domainOfValidity
    __domainOfValidity = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'domainOfValidity'), 'domainOfValidity', '__httpwww_opengis_netgml3_2_TimeReferenceSystemType_httpwww_opengis_netgml3_2domainOfValidity', False)

    
    domainOfValidity = property(__domainOfValidity.value, __domainOfValidity.set, None, None)

    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element remarks ({http://www.opengis.net/gml/3.2}remarks) inherited from {http://www.opengis.net/gml/3.2}DefinitionType
    
    # Attribute id_ inherited from {http://www.opengis.net/gml/3.2}DefinitionBaseType

    _ElementMap = DefinitionType._ElementMap.copy()
    _ElementMap.update({
        __domainOfValidity.name() : __domainOfValidity
    })
    _AttributeMap = DefinitionType._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gml.addCategoryObject('typeBinding', u'TimeReferenceSystemType', TimeReferenceSystemType)


# Complex type TimeCoordinateSystemType with content type ELEMENT_ONLY
class TimeCoordinateSystemType (TimeReferenceSystemType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'TimeCoordinateSystemType')
    # Base type is TimeReferenceSystemType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element domainOfValidity ({http://www.opengis.net/gml/3.2}domainOfValidity) inherited from {http://www.opengis.net/gml/3.2}TimeReferenceSystemType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element {http://www.opengis.net/gml/3.2}originPosition uses Python identifier originPosition
    __originPosition = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'originPosition'), 'originPosition', '__httpwww_opengis_netgml3_2_TimeCoordinateSystemType_httpwww_opengis_netgml3_2originPosition', False)

    
    originPosition = property(__originPosition.value, __originPosition.set, None, None)

    
    # Element {http://www.opengis.net/gml/3.2}origin uses Python identifier origin
    __origin = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'origin'), 'origin', '__httpwww_opengis_netgml3_2_TimeCoordinateSystemType_httpwww_opengis_netgml3_2origin', False)

    
    origin = property(__origin.value, __origin.set, None, None)

    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element {http://www.opengis.net/gml/3.2}interval uses Python identifier interval
    __interval = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'interval'), 'interval', '__httpwww_opengis_netgml3_2_TimeCoordinateSystemType_httpwww_opengis_netgml3_2interval', False)

    
    interval = property(__interval.value, __interval.set, None, None)

    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element remarks ({http://www.opengis.net/gml/3.2}remarks) inherited from {http://www.opengis.net/gml/3.2}DefinitionType
    
    # Attribute id_ inherited from {http://www.opengis.net/gml/3.2}DefinitionBaseType

    _ElementMap = TimeReferenceSystemType._ElementMap.copy()
    _ElementMap.update({
        __originPosition.name() : __originPosition,
        __origin.name() : __origin,
        __interval.name() : __interval
    })
    _AttributeMap = TimeReferenceSystemType._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gml.addCategoryObject('typeBinding', u'TimeCoordinateSystemType', TimeCoordinateSystemType)


# Complex type MD_Identifier_PropertyType with content type ELEMENT_ONLY
class MD_Identifier_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_Identifier_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmd}MD_Identifier uses Python identifier MD_Identifier
    __MD_Identifier = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_Identifier'), 'MD_Identifier', '__httpwww_isotc211_org2005gmd_MD_Identifier_PropertyType_httpwww_isotc211_org2005gmdMD_Identifier', False)

    
    MD_Identifier = property(__MD_Identifier.value, __MD_Identifier.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_isotc211_org2005gmd_MD_Identifier_PropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_isotc211_org2005gmd_MD_Identifier_PropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_isotc211_org2005gmd_MD_Identifier_PropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_isotc211_org2005gmd_MD_Identifier_PropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute uuidref uses Python identifier uuidref
    __uuidref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uuidref'), 'uuidref', '__httpwww_isotc211_org2005gmd_MD_Identifier_PropertyType_uuidref', pyxb.binding.datatypes.string)
    
    uuidref = property(__uuidref.value, __uuidref.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmd_MD_Identifier_PropertyType_httpwww_isotc211_org2005gconilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_isotc211_org2005gmd_MD_Identifier_PropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_isotc211_org2005gmd_MD_Identifier_PropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_isotc211_org2005gmd_MD_Identifier_PropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)


    _ElementMap = {
        __MD_Identifier.name() : __MD_Identifier
    }
    _AttributeMap = {
        __actuate.name() : __actuate,
        __type.name() : __type,
        __arcrole.name() : __arcrole,
        __role.name() : __role,
        __uuidref.name() : __uuidref,
        __nilReason.name() : __nilReason,
        __title.name() : __title,
        __show.name() : __show,
        __href.name() : __href
    }
_Namespace_gmd.addCategoryObject('typeBinding', u'MD_Identifier_PropertyType', MD_Identifier_PropertyType)


# Complex type MultiPointPropertyType with content type ELEMENT_ONLY
class MultiPointPropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'MultiPointPropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.opengis.net/gml/3.2}MultiPoint uses Python identifier MultiPoint
    __MultiPoint = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'MultiPoint'), 'MultiPoint', '__httpwww_opengis_netgml3_2_MultiPointPropertyType_httpwww_opengis_netgml3_2MultiPoint', False)

    
    MultiPoint = property(__MultiPoint.value, __MultiPoint.set, None, u'A gml:MultiPoint consists of one or more gml:Points.\nThe members of the geometric aggregate may be specified either using the "standard" property (gml:pointMember) or the array property (gml:pointMembers). It is also valid to use both the "standard" and the array properties in the same collection.')

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_opengis_netgml3_2_MultiPointPropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute owns uses Python identifier owns
    __owns = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'owns'), 'owns', '__httpwww_opengis_netgml3_2_MultiPointPropertyType_owns', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    owns = property(__owns.value, __owns.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_opengis_netgml3_2_MultiPointPropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_opengis_netgml3_2_MultiPointPropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_opengis_netgml3_2_MultiPointPropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.opengis.net/gml/3.2}remoteSchema uses Python identifier remoteSchema
    __remoteSchema = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'remoteSchema'), 'remoteSchema', '__httpwww_opengis_netgml3_2_MultiPointPropertyType_httpwww_opengis_netgml3_2remoteSchema', pyxb.binding.datatypes.anyURI)
    
    remoteSchema = property(__remoteSchema.value, __remoteSchema.set, None, u'')

    
    # Attribute nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'nilReason'), 'nilReason', '__httpwww_opengis_netgml3_2_MultiPointPropertyType_nilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_opengis_netgml3_2_MultiPointPropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_opengis_netgml3_2_MultiPointPropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_opengis_netgml3_2_MultiPointPropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")


    _ElementMap = {
        __MultiPoint.name() : __MultiPoint
    }
    _AttributeMap = {
        __href.name() : __href,
        __owns.name() : __owns,
        __type.name() : __type,
        __title.name() : __title,
        __arcrole.name() : __arcrole,
        __remoteSchema.name() : __remoteSchema,
        __nilReason.name() : __nilReason,
        __role.name() : __role,
        __show.name() : __show,
        __actuate.name() : __actuate
    }
_Namespace_gml.addCategoryObject('typeBinding', u'MultiPointPropertyType', MultiPointPropertyType)


# Complex type MultiCurvePropertyType with content type ELEMENT_ONLY
class MultiCurvePropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'MultiCurvePropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.opengis.net/gml/3.2}MultiCurve uses Python identifier MultiCurve
    __MultiCurve = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'MultiCurve'), 'MultiCurve', '__httpwww_opengis_netgml3_2_MultiCurvePropertyType_httpwww_opengis_netgml3_2MultiCurve', False)

    
    MultiCurve = property(__MultiCurve.value, __MultiCurve.set, None, u'A gml:MultiCurve is defined by one or more gml:AbstractCurves.\nThe members of the geometric aggregate may be specified either using the "standard" property (gml:curveMember) or the array property (gml:curveMembers). It is also valid to use both the "standard" and the array properties in the same collection.')

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_opengis_netgml3_2_MultiCurvePropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute owns uses Python identifier owns
    __owns = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'owns'), 'owns', '__httpwww_opengis_netgml3_2_MultiCurvePropertyType_owns', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    owns = property(__owns.value, __owns.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_opengis_netgml3_2_MultiCurvePropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.opengis.net/gml/3.2}remoteSchema uses Python identifier remoteSchema
    __remoteSchema = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'remoteSchema'), 'remoteSchema', '__httpwww_opengis_netgml3_2_MultiCurvePropertyType_httpwww_opengis_netgml3_2remoteSchema', pyxb.binding.datatypes.anyURI)
    
    remoteSchema = property(__remoteSchema.value, __remoteSchema.set, None, u'')

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_opengis_netgml3_2_MultiCurvePropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_opengis_netgml3_2_MultiCurvePropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'nilReason'), 'nilReason', '__httpwww_opengis_netgml3_2_MultiCurvePropertyType_nilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_opengis_netgml3_2_MultiCurvePropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_opengis_netgml3_2_MultiCurvePropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_opengis_netgml3_2_MultiCurvePropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)


    _ElementMap = {
        __MultiCurve.name() : __MultiCurve
    }
    _AttributeMap = {
        __title.name() : __title,
        __owns.name() : __owns,
        __arcrole.name() : __arcrole,
        __remoteSchema.name() : __remoteSchema,
        __role.name() : __role,
        __show.name() : __show,
        __nilReason.name() : __nilReason,
        __actuate.name() : __actuate,
        __href.name() : __href,
        __type.name() : __type
    }
_Namespace_gml.addCategoryObject('typeBinding', u'MultiCurvePropertyType', MultiCurvePropertyType)


# Complex type MD_Resolution_Type with content type ELEMENT_ONLY
class MD_Resolution_Type (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_Resolution_Type')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmd}equivalentScale uses Python identifier equivalentScale
    __equivalentScale = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'equivalentScale'), 'equivalentScale', '__httpwww_isotc211_org2005gmd_MD_Resolution_Type_httpwww_isotc211_org2005gmdequivalentScale', False)

    
    equivalentScale = property(__equivalentScale.value, __equivalentScale.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}distance uses Python identifier distance
    __distance = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'distance'), 'distance', '__httpwww_isotc211_org2005gmd_MD_Resolution_Type_httpwww_isotc211_org2005gmddistance', False)

    
    distance = property(__distance.value, __distance.set, None, None)


    _ElementMap = {
        __equivalentScale.name() : __equivalentScale,
        __distance.name() : __distance
    }
    _AttributeMap = {
        
    }
_Namespace_gmd.addCategoryObject('typeBinding', u'MD_Resolution_Type', MD_Resolution_Type)


# Complex type MD_DigitalTransferOptions_Type with content type ELEMENT_ONLY
class MD_DigitalTransferOptions_Type (AbstractObject_Type):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_DigitalTransferOptions_Type')
    # Base type is AbstractObject_Type
    
    # Element {http://www.isotc211.org/2005/gmd}offLine uses Python identifier offLine
    __offLine = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'offLine'), 'offLine', '__httpwww_isotc211_org2005gmd_MD_DigitalTransferOptions_Type_httpwww_isotc211_org2005gmdoffLine', False)

    
    offLine = property(__offLine.value, __offLine.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}unitsOfDistribution uses Python identifier unitsOfDistribution
    __unitsOfDistribution = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'unitsOfDistribution'), 'unitsOfDistribution', '__httpwww_isotc211_org2005gmd_MD_DigitalTransferOptions_Type_httpwww_isotc211_org2005gmdunitsOfDistribution', False)

    
    unitsOfDistribution = property(__unitsOfDistribution.value, __unitsOfDistribution.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}transferSize uses Python identifier transferSize
    __transferSize = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'transferSize'), 'transferSize', '__httpwww_isotc211_org2005gmd_MD_DigitalTransferOptions_Type_httpwww_isotc211_org2005gmdtransferSize', False)

    
    transferSize = property(__transferSize.value, __transferSize.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}onLine uses Python identifier onLine
    __onLine = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'onLine'), 'onLine', '__httpwww_isotc211_org2005gmd_MD_DigitalTransferOptions_Type_httpwww_isotc211_org2005gmdonLine', True)

    
    onLine = property(__onLine.value, __onLine.set, None, None)

    
    # Attribute id inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type
    
    # Attribute uuid inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type

    _ElementMap = AbstractObject_Type._ElementMap.copy()
    _ElementMap.update({
        __offLine.name() : __offLine,
        __unitsOfDistribution.name() : __unitsOfDistribution,
        __transferSize.name() : __transferSize,
        __onLine.name() : __onLine
    })
    _AttributeMap = AbstractObject_Type._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gmd.addCategoryObject('typeBinding', u'MD_DigitalTransferOptions_Type', MD_DigitalTransferOptions_Type)


# Complex type AbstractGeometryType with content type ELEMENT_ONLY
class AbstractGeometryType (AbstractGMLType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = True
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractGeometryType')
    # Base type is AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Attribute srsName uses Python identifier srsName
    __srsName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'srsName'), 'srsName', '__httpwww_opengis_netgml3_2_AbstractGeometryType_srsName', pyxb.binding.datatypes.anyURI)
    
    srsName = property(__srsName.value, __srsName.set, None, None)

    
    # Attribute axisLabels uses Python identifier axisLabels
    __axisLabels = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'axisLabels'), 'axisLabels', '__httpwww_opengis_netgml3_2_AbstractGeometryType_axisLabels', NCNameList)
    
    axisLabels = property(__axisLabels.value, __axisLabels.set, None, None)

    
    # Attribute id inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Attribute uomLabels uses Python identifier uomLabels
    __uomLabels = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uomLabels'), 'uomLabels', '__httpwww_opengis_netgml3_2_AbstractGeometryType_uomLabels', NCNameList)
    
    uomLabels = property(__uomLabels.value, __uomLabels.set, None, None)

    
    # Attribute srsDimension uses Python identifier srsDimension
    __srsDimension = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'srsDimension'), 'srsDimension', '__httpwww_opengis_netgml3_2_AbstractGeometryType_srsDimension', pyxb.binding.datatypes.positiveInteger)
    
    srsDimension = property(__srsDimension.value, __srsDimension.set, None, None)


    _ElementMap = AbstractGMLType._ElementMap.copy()
    _ElementMap.update({
        
    })
    _AttributeMap = AbstractGMLType._AttributeMap.copy()
    _AttributeMap.update({
        __srsName.name() : __srsName,
        __axisLabels.name() : __axisLabels,
        __uomLabels.name() : __uomLabels,
        __srsDimension.name() : __srsDimension
    })
_Namespace_gml.addCategoryObject('typeBinding', u'AbstractGeometryType', AbstractGeometryType)


# Complex type OperationMethodPropertyType with content type ELEMENT_ONLY
class OperationMethodPropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'OperationMethodPropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.opengis.net/gml/3.2}OperationMethod uses Python identifier OperationMethod
    __OperationMethod = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'OperationMethod'), 'OperationMethod', '__httpwww_opengis_netgml3_2_OperationMethodPropertyType_httpwww_opengis_netgml3_2OperationMethod', False)

    
    OperationMethod = property(__OperationMethod.value, __OperationMethod.set, None, u'gml:OperationMethod is a method (algorithm or procedure) used to perform a coordinate operation. Most operation methods use a number of operation parameters, although some coordinate conversions use none. Each coordinate operation using the method assigns values to these parameters.\nThe parameter elements are an unordered list of associations to the set of operation parameters and parameter groups used by this operation method.')

    
    # Attribute {http://www.opengis.net/gml/3.2}remoteSchema uses Python identifier remoteSchema
    __remoteSchema = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'remoteSchema'), 'remoteSchema', '__httpwww_opengis_netgml3_2_OperationMethodPropertyType_httpwww_opengis_netgml3_2remoteSchema', pyxb.binding.datatypes.anyURI)
    
    remoteSchema = property(__remoteSchema.value, __remoteSchema.set, None, u'')

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_opengis_netgml3_2_OperationMethodPropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_opengis_netgml3_2_OperationMethodPropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_opengis_netgml3_2_OperationMethodPropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_opengis_netgml3_2_OperationMethodPropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'nilReason'), 'nilReason', '__httpwww_opengis_netgml3_2_OperationMethodPropertyType_nilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_opengis_netgml3_2_OperationMethodPropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_opengis_netgml3_2_OperationMethodPropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_opengis_netgml3_2_OperationMethodPropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)


    _ElementMap = {
        __OperationMethod.name() : __OperationMethod
    }
    _AttributeMap = {
        __remoteSchema.name() : __remoteSchema,
        __href.name() : __href,
        __show.name() : __show,
        __title.name() : __title,
        __type.name() : __type,
        __nilReason.name() : __nilReason,
        __role.name() : __role,
        __actuate.name() : __actuate,
        __arcrole.name() : __arcrole
    }
_Namespace_gml.addCategoryObject('typeBinding', u'OperationMethodPropertyType', OperationMethodPropertyType)


# Complex type PT_FreeText_PropertyType with content type ELEMENT_ONLY
class PT_FreeText_PropertyType (CharacterString_PropertyType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'PT_FreeText_PropertyType')
    # Base type is CharacterString_PropertyType
    
    # Element {http://www.isotc211.org/2005/gmd}PT_FreeText uses Python identifier PT_FreeText
    __PT_FreeText = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'PT_FreeText'), 'PT_FreeText', '__httpwww_isotc211_org2005gmd_PT_FreeText_PropertyType_httpwww_isotc211_org2005gmdPT_FreeText', False)

    
    PT_FreeText = property(__PT_FreeText.value, __PT_FreeText.set, None, None)

    
    # Element CharacterString ({http://www.isotc211.org/2005/gco}CharacterString) inherited from {http://www.isotc211.org/2005/gco}CharacterString_PropertyType
    
    # Attribute nilReason inherited from {http://www.isotc211.org/2005/gco}CharacterString_PropertyType

    _ElementMap = CharacterString_PropertyType._ElementMap.copy()
    _ElementMap.update({
        __PT_FreeText.name() : __PT_FreeText
    })
    _AttributeMap = CharacterString_PropertyType._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gmd.addCategoryObject('typeBinding', u'PT_FreeText_PropertyType', PT_FreeText_PropertyType)


# Complex type BaseUnitType with content type ELEMENT_ONLY
class BaseUnitType (UnitDefinitionType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'BaseUnitType')
    # Base type is UnitDefinitionType
    
    # Element {http://www.opengis.net/gml/3.2}unitsSystem uses Python identifier unitsSystem
    __unitsSystem = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'unitsSystem'), 'unitsSystem', '__httpwww_opengis_netgml3_2_BaseUnitType_httpwww_opengis_netgml3_2unitsSystem', False)

    
    unitsSystem = property(__unitsSystem.value, __unitsSystem.set, None, None)

    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element catalogSymbol ({http://www.opengis.net/gml/3.2}catalogSymbol) inherited from {http://www.opengis.net/gml/3.2}UnitDefinitionType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element quantityType ({http://www.opengis.net/gml/3.2}quantityType) inherited from {http://www.opengis.net/gml/3.2}UnitDefinitionType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element quantityTypeReference ({http://www.opengis.net/gml/3.2}quantityTypeReference) inherited from {http://www.opengis.net/gml/3.2}UnitDefinitionType
    
    # Element remarks ({http://www.opengis.net/gml/3.2}remarks) inherited from {http://www.opengis.net/gml/3.2}DefinitionType
    
    # Attribute id_ inherited from {http://www.opengis.net/gml/3.2}DefinitionBaseType

    _ElementMap = UnitDefinitionType._ElementMap.copy()
    _ElementMap.update({
        __unitsSystem.name() : __unitsSystem
    })
    _AttributeMap = UnitDefinitionType._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gml.addCategoryObject('typeBinding', u'BaseUnitType', BaseUnitType)


# Complex type MD_CharacterSetCode_PropertyType with content type ELEMENT_ONLY
class MD_CharacterSetCode_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_CharacterSetCode_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmd}MD_CharacterSetCode uses Python identifier MD_CharacterSetCode
    __MD_CharacterSetCode = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_CharacterSetCode'), 'MD_CharacterSetCode', '__httpwww_isotc211_org2005gmd_MD_CharacterSetCode_PropertyType_httpwww_isotc211_org2005gmdMD_CharacterSetCode', False)

    
    MD_CharacterSetCode = property(__MD_CharacterSetCode.value, __MD_CharacterSetCode.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmd_MD_CharacterSetCode_PropertyType_httpwww_isotc211_org2005gconilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)


    _ElementMap = {
        __MD_CharacterSetCode.name() : __MD_CharacterSetCode
    }
    _AttributeMap = {
        __nilReason.name() : __nilReason
    }
_Namespace_gmd.addCategoryObject('typeBinding', u'MD_CharacterSetCode_PropertyType', MD_CharacterSetCode_PropertyType)


# Complex type CI_ResponsibleParty_PropertyType with content type ELEMENT_ONLY
class CI_ResponsibleParty_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'CI_ResponsibleParty_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmd}CI_ResponsibleParty uses Python identifier CI_ResponsibleParty
    __CI_ResponsibleParty = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'CI_ResponsibleParty'), 'CI_ResponsibleParty', '__httpwww_isotc211_org2005gmd_CI_ResponsibleParty_PropertyType_httpwww_isotc211_org2005gmdCI_ResponsibleParty', False)

    
    CI_ResponsibleParty = property(__CI_ResponsibleParty.value, __CI_ResponsibleParty.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_isotc211_org2005gmd_CI_ResponsibleParty_PropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_isotc211_org2005gmd_CI_ResponsibleParty_PropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_isotc211_org2005gmd_CI_ResponsibleParty_PropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_isotc211_org2005gmd_CI_ResponsibleParty_PropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute uuidref uses Python identifier uuidref
    __uuidref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uuidref'), 'uuidref', '__httpwww_isotc211_org2005gmd_CI_ResponsibleParty_PropertyType_uuidref', pyxb.binding.datatypes.string)
    
    uuidref = property(__uuidref.value, __uuidref.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmd_CI_ResponsibleParty_PropertyType_httpwww_isotc211_org2005gconilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_isotc211_org2005gmd_CI_ResponsibleParty_PropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_isotc211_org2005gmd_CI_ResponsibleParty_PropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_isotc211_org2005gmd_CI_ResponsibleParty_PropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)


    _ElementMap = {
        __CI_ResponsibleParty.name() : __CI_ResponsibleParty
    }
    _AttributeMap = {
        __type.name() : __type,
        __arcrole.name() : __arcrole,
        __role.name() : __role,
        __title.name() : __title,
        __uuidref.name() : __uuidref,
        __nilReason.name() : __nilReason,
        __show.name() : __show,
        __actuate.name() : __actuate,
        __href.name() : __href
    }
_Namespace_gmd.addCategoryObject('typeBinding', u'CI_ResponsibleParty_PropertyType', CI_ResponsibleParty_PropertyType)


# Complex type CI_Address_Type with content type ELEMENT_ONLY
class CI_Address_Type (AbstractObject_Type):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'CI_Address_Type')
    # Base type is AbstractObject_Type
    
    # Element {http://www.isotc211.org/2005/gmd}city uses Python identifier city
    __city = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'city'), 'city', '__httpwww_isotc211_org2005gmd_CI_Address_Type_httpwww_isotc211_org2005gmdcity', False)

    
    city = property(__city.value, __city.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}deliveryPoint uses Python identifier deliveryPoint
    __deliveryPoint = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'deliveryPoint'), 'deliveryPoint', '__httpwww_isotc211_org2005gmd_CI_Address_Type_httpwww_isotc211_org2005gmddeliveryPoint', True)

    
    deliveryPoint = property(__deliveryPoint.value, __deliveryPoint.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}postalCode uses Python identifier postalCode
    __postalCode = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'postalCode'), 'postalCode', '__httpwww_isotc211_org2005gmd_CI_Address_Type_httpwww_isotc211_org2005gmdpostalCode', False)

    
    postalCode = property(__postalCode.value, __postalCode.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}administrativeArea uses Python identifier administrativeArea
    __administrativeArea = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'administrativeArea'), 'administrativeArea', '__httpwww_isotc211_org2005gmd_CI_Address_Type_httpwww_isotc211_org2005gmdadministrativeArea', False)

    
    administrativeArea = property(__administrativeArea.value, __administrativeArea.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}country uses Python identifier country
    __country = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'country'), 'country', '__httpwww_isotc211_org2005gmd_CI_Address_Type_httpwww_isotc211_org2005gmdcountry', False)

    
    country = property(__country.value, __country.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}electronicMailAddress uses Python identifier electronicMailAddress
    __electronicMailAddress = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'electronicMailAddress'), 'electronicMailAddress', '__httpwww_isotc211_org2005gmd_CI_Address_Type_httpwww_isotc211_org2005gmdelectronicMailAddress', True)

    
    electronicMailAddress = property(__electronicMailAddress.value, __electronicMailAddress.set, None, None)

    
    # Attribute id inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type
    
    # Attribute uuid inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type

    _ElementMap = AbstractObject_Type._ElementMap.copy()
    _ElementMap.update({
        __city.name() : __city,
        __deliveryPoint.name() : __deliveryPoint,
        __postalCode.name() : __postalCode,
        __administrativeArea.name() : __administrativeArea,
        __country.name() : __country,
        __electronicMailAddress.name() : __electronicMailAddress
    })
    _AttributeMap = AbstractObject_Type._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gmd.addCategoryObject('typeBinding', u'CI_Address_Type', CI_Address_Type)


# Complex type EX_Extent_PropertyType with content type ELEMENT_ONLY
class EX_Extent_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'EX_Extent_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmd}EX_Extent uses Python identifier EX_Extent
    __EX_Extent = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'EX_Extent'), 'EX_Extent', '__httpwww_isotc211_org2005gmd_EX_Extent_PropertyType_httpwww_isotc211_org2005gmdEX_Extent', False)

    
    EX_Extent = property(__EX_Extent.value, __EX_Extent.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_isotc211_org2005gmd_EX_Extent_PropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_isotc211_org2005gmd_EX_Extent_PropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_isotc211_org2005gmd_EX_Extent_PropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_isotc211_org2005gmd_EX_Extent_PropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute uuidref uses Python identifier uuidref
    __uuidref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uuidref'), 'uuidref', '__httpwww_isotc211_org2005gmd_EX_Extent_PropertyType_uuidref', pyxb.binding.datatypes.string)
    
    uuidref = property(__uuidref.value, __uuidref.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_isotc211_org2005gmd_EX_Extent_PropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmd_EX_Extent_PropertyType_httpwww_isotc211_org2005gconilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_isotc211_org2005gmd_EX_Extent_PropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_isotc211_org2005gmd_EX_Extent_PropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")


    _ElementMap = {
        __EX_Extent.name() : __EX_Extent
    }
    _AttributeMap = {
        __type.name() : __type,
        __href.name() : __href,
        __actuate.name() : __actuate,
        __arcrole.name() : __arcrole,
        __uuidref.name() : __uuidref,
        __role.name() : __role,
        __nilReason.name() : __nilReason,
        __title.name() : __title,
        __show.name() : __show
    }
_Namespace_gmd.addCategoryObject('typeBinding', u'EX_Extent_PropertyType', EX_Extent_PropertyType)


# Complex type FeaturePropertyType with content type ELEMENT_ONLY
class FeaturePropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'FeaturePropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.opengis.net/gml/3.2}AbstractFeature uses Python identifier AbstractFeature
    __AbstractFeature = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractFeature'), 'AbstractFeature', '__httpwww_opengis_netgml3_2_FeaturePropertyType_httpwww_opengis_netgml3_2AbstractFeature', False)

    
    AbstractFeature = property(__AbstractFeature.value, __AbstractFeature.set, None, u'This abstract element serves as the head of a substitution group which may contain any elements whose content model is derived from gml:AbstractFeatureType.  This may be used as a variable in the construction of content models.  \ngml:AbstractFeature may be thought of as "anything that is a GML feature" and may be used to define variables or templates in which the value of a GML property is "any feature". This occurs in particular in a GML feature collection where the feature member properties contain one or multiple copies of gml:AbstractFeature respectively.')

    
    # Attribute {http://www.opengis.net/gml/3.2}remoteSchema uses Python identifier remoteSchema
    __remoteSchema = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'remoteSchema'), 'remoteSchema', '__httpwww_opengis_netgml3_2_FeaturePropertyType_httpwww_opengis_netgml3_2remoteSchema', pyxb.binding.datatypes.anyURI)
    
    remoteSchema = property(__remoteSchema.value, __remoteSchema.set, None, u'')

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_opengis_netgml3_2_FeaturePropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_opengis_netgml3_2_FeaturePropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute owns uses Python identifier owns
    __owns = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'owns'), 'owns', '__httpwww_opengis_netgml3_2_FeaturePropertyType_owns', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    owns = property(__owns.value, __owns.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_opengis_netgml3_2_FeaturePropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_opengis_netgml3_2_FeaturePropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'nilReason'), 'nilReason', '__httpwww_opengis_netgml3_2_FeaturePropertyType_nilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_opengis_netgml3_2_FeaturePropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_opengis_netgml3_2_FeaturePropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_opengis_netgml3_2_FeaturePropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)


    _ElementMap = {
        __AbstractFeature.name() : __AbstractFeature
    }
    _AttributeMap = {
        __remoteSchema.name() : __remoteSchema,
        __role.name() : __role,
        __show.name() : __show,
        __owns.name() : __owns,
        __actuate.name() : __actuate,
        __href.name() : __href,
        __nilReason.name() : __nilReason,
        __type.name() : __type,
        __arcrole.name() : __arcrole,
        __title.name() : __title
    }
_Namespace_gml.addCategoryObject('typeBinding', u'FeaturePropertyType', FeaturePropertyType)


# Complex type AbstractDQ_LogicalConsistency_Type with content type ELEMENT_ONLY
class AbstractDQ_LogicalConsistency_Type (AbstractDQ_Element_Type):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = True
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'AbstractDQ_LogicalConsistency_Type')
    # Base type is AbstractDQ_Element_Type
    
    # Element evaluationMethodDescription ({http://www.isotc211.org/2005/gmd}evaluationMethodDescription) inherited from {http://www.isotc211.org/2005/gmd}AbstractDQ_Element_Type
    
    # Element measureDescription ({http://www.isotc211.org/2005/gmd}measureDescription) inherited from {http://www.isotc211.org/2005/gmd}AbstractDQ_Element_Type
    
    # Element evaluationProcedure ({http://www.isotc211.org/2005/gmd}evaluationProcedure) inherited from {http://www.isotc211.org/2005/gmd}AbstractDQ_Element_Type
    
    # Element evaluationMethodType ({http://www.isotc211.org/2005/gmd}evaluationMethodType) inherited from {http://www.isotc211.org/2005/gmd}AbstractDQ_Element_Type
    
    # Element dateTime ({http://www.isotc211.org/2005/gmd}dateTime) inherited from {http://www.isotc211.org/2005/gmd}AbstractDQ_Element_Type
    
    # Element result ({http://www.isotc211.org/2005/gmd}result) inherited from {http://www.isotc211.org/2005/gmd}AbstractDQ_Element_Type
    
    # Element nameOfMeasure ({http://www.isotc211.org/2005/gmd}nameOfMeasure) inherited from {http://www.isotc211.org/2005/gmd}AbstractDQ_Element_Type
    
    # Element measureIdentification ({http://www.isotc211.org/2005/gmd}measureIdentification) inherited from {http://www.isotc211.org/2005/gmd}AbstractDQ_Element_Type
    
    # Attribute id inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type
    
    # Attribute uuid inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type

    _ElementMap = AbstractDQ_Element_Type._ElementMap.copy()
    _ElementMap.update({
        
    })
    _AttributeMap = AbstractDQ_Element_Type._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gmd.addCategoryObject('typeBinding', u'AbstractDQ_LogicalConsistency_Type', AbstractDQ_LogicalConsistency_Type)


# Complex type CoordinateSystemAxisType with content type ELEMENT_ONLY
class CoordinateSystemAxisType (IdentifiedObjectType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'CoordinateSystemAxisType')
    # Base type is IdentifiedObjectType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element {http://www.opengis.net/gml/3.2}axisDirection uses Python identifier axisDirection
    __axisDirection = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'axisDirection'), 'axisDirection', '__httpwww_opengis_netgml3_2_CoordinateSystemAxisType_httpwww_opengis_netgml3_2axisDirection', False)

    
    axisDirection = property(__axisDirection.value, __axisDirection.set, None, u'gml:axisDirection is the direction of this coordinate system axis (or in the case of Cartesian projected coordinates, the direction of this coordinate system axis at the origin).\nWithin any set of coordinate system axes, only one of each pair of terms may be used. For earth-fixed CRSs, this direction is often approximate and intended to provide a human interpretable meaning to the axis. When a geodetic datum is used, the precise directions of the axes may therefore vary slightly from this approximate direction.\nThe codeSpace attribute shall reference a source of information specifying the values and meanings of all the allowed string values for this property.')

    
    # Element {http://www.opengis.net/gml/3.2}rangeMeaning uses Python identifier rangeMeaning
    __rangeMeaning = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'rangeMeaning'), 'rangeMeaning', '__httpwww_opengis_netgml3_2_CoordinateSystemAxisType_httpwww_opengis_netgml3_2rangeMeaning', False)

    
    rangeMeaning = property(__rangeMeaning.value, __rangeMeaning.set, None, u'gml:rangeMeaning describes the meaning of axis value range specified by gml:minimumValue and gml:maximumValue. This element shall be omitted when both gml:minimumValue and gml:maximumValue are omitted. This element should be included when gml:minimumValue and/or gml:maximumValue are included. If this element is omitted when the gml:minimumValue and/or gml:maximumValue are included, the meaning is unspecified. The codeSpace attribute shall reference a source of information specifying the values and meanings of all the allowed string values for this property.')

    
    # Element {http://www.opengis.net/gml/3.2}minimumValue uses Python identifier minimumValue
    __minimumValue = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'minimumValue'), 'minimumValue', '__httpwww_opengis_netgml3_2_CoordinateSystemAxisType_httpwww_opengis_netgml3_2minimumValue', False)

    
    minimumValue = property(__minimumValue.value, __minimumValue.set, None, u'The gml:minimumValue and gml:maximumValue properties allow the specification of minimum and maximum value normally allowed for this axis, in the unit of measure for the axis. For a continuous angular axis such as longitude, the values wrap-around at this value. Also, values beyond this minimum/maximum can be used for specified purposes, such as in a bounding box. A value of minus infinity shall be allowed for the gml:minimumValue element, a value of plus infiniy for the gml:maximumValue element. If these elements are omitted, the value is unspecified.')

    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element {http://www.opengis.net/gml/3.2}maximumValue uses Python identifier maximumValue
    __maximumValue = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'maximumValue'), 'maximumValue', '__httpwww_opengis_netgml3_2_CoordinateSystemAxisType_httpwww_opengis_netgml3_2maximumValue', False)

    
    maximumValue = property(__maximumValue.value, __maximumValue.set, None, u'The gml:minimumValue and gml:maximumValue properties allow the specification of minimum and maximum value normally allowed for this axis, in the unit of measure for the axis. For a continuous angular axis such as longitude, the values wrap-around at this value. Also, values beyond this minimum/maximum can be used for specified purposes, such as in a bounding box. A value of minus infinity shall be allowed for the gml:minimumValue element, a value of plus infiniy for the gml:maximumValue element. If these elements are omitted, the value is unspecified.')

    
    # Element {http://www.opengis.net/gml/3.2}axisAbbrev uses Python identifier axisAbbrev
    __axisAbbrev = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'axisAbbrev'), 'axisAbbrev', '__httpwww_opengis_netgml3_2_CoordinateSystemAxisType_httpwww_opengis_netgml3_2axisAbbrev', False)

    
    axisAbbrev = property(__axisAbbrev.value, __axisAbbrev.set, None, u'gml:axisAbbrev is the abbreviation used for this coordinate system axis; this abbreviation is also used to identify the coordinates in the coordinate tuple. The codeSpace attribute may reference a source of more information on a set of standardized abbreviations, or on this abbreviation.')

    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element remarks ({http://www.opengis.net/gml/3.2}remarks) inherited from {http://www.opengis.net/gml/3.2}DefinitionType
    
    # Attribute id_ inherited from {http://www.opengis.net/gml/3.2}DefinitionBaseType
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uom'), 'uom', '__httpwww_opengis_netgml3_2_CoordinateSystemAxisType_uom', UomIdentifier, required=True)
    
    uom = property(__uom.value, __uom.set, None, u'The uom attribute provides an identifier of the unit of measure used for this coordinate system axis. The value of this coordinate in a coordinate tuple shall be recorded using this unit of measure, whenever those coordinates use a coordinate reference system that uses a coordinate system that uses this axis.')


    _ElementMap = IdentifiedObjectType._ElementMap.copy()
    _ElementMap.update({
        __axisDirection.name() : __axisDirection,
        __rangeMeaning.name() : __rangeMeaning,
        __minimumValue.name() : __minimumValue,
        __maximumValue.name() : __maximumValue,
        __axisAbbrev.name() : __axisAbbrev
    })
    _AttributeMap = IdentifiedObjectType._AttributeMap.copy()
    _AttributeMap.update({
        __uom.name() : __uom
    })
_Namespace_gml.addCategoryObject('typeBinding', u'CoordinateSystemAxisType', CoordinateSystemAxisType)


# Complex type TopoCurveType with content type ELEMENT_ONLY
class TopoCurveType (AbstractTopologyType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'TopoCurveType')
    # Base type is AbstractTopologyType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element {http://www.opengis.net/gml/3.2}directedEdge uses Python identifier directedEdge
    __directedEdge = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'directedEdge'), 'directedEdge', '__httpwww_opengis_netgml3_2_TopoCurveType_httpwww_opengis_netgml3_2directedEdge', True)

    
    directedEdge = property(__directedEdge.value, __directedEdge.set, None, u'A gml:directedEdge property element describes the boundary of topology faces, the coBoundary of topology nodes and is used in the support of topological line features via the gml:TopoCurve expression, see below. The orientation attribute of type gml:SignType expresses the sense in which the included edge is used, i.e. forward or reverse.')

    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Attribute aggregationType uses Python identifier aggregationType
    __aggregationType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'aggregationType'), 'aggregationType', '__httpwww_opengis_netgml3_2_TopoCurveType_aggregationType', AggregationType)
    
    aggregationType = property(__aggregationType.value, __aggregationType.set, None, None)

    
    # Attribute id inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType

    _ElementMap = AbstractTopologyType._ElementMap.copy()
    _ElementMap.update({
        __directedEdge.name() : __directedEdge
    })
    _AttributeMap = AbstractTopologyType._AttributeMap.copy()
    _AttributeMap.update({
        __aggregationType.name() : __aggregationType
    })
_Namespace_gml.addCategoryObject('typeBinding', u'TopoCurveType', TopoCurveType)


# Complex type CRSPropertyType with content type ELEMENT_ONLY
class CRSPropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'CRSPropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.opengis.net/gml/3.2}AbstractCRS uses Python identifier AbstractCRS
    __AbstractCRS = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractCRS'), 'AbstractCRS', '__httpwww_opengis_netgml3_2_CRSPropertyType_httpwww_opengis_netgml3_2AbstractCRS', False)

    
    AbstractCRS = property(__AbstractCRS.value, __AbstractCRS.set, None, u'gml:AbstractCRS specifies a coordinate reference system which is usually single but may be compound. This abstract complex type shall not be used, extended, or restricted, in a GML Application Schema, to define a concrete subtype with a meaning equivalent to a concrete subtype specified in this document.')

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_opengis_netgml3_2_CRSPropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_opengis_netgml3_2_CRSPropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_opengis_netgml3_2_CRSPropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_opengis_netgml3_2_CRSPropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_opengis_netgml3_2_CRSPropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'nilReason'), 'nilReason', '__httpwww_opengis_netgml3_2_CRSPropertyType_nilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_opengis_netgml3_2_CRSPropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_opengis_netgml3_2_CRSPropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.opengis.net/gml/3.2}remoteSchema uses Python identifier remoteSchema
    __remoteSchema = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'remoteSchema'), 'remoteSchema', '__httpwww_opengis_netgml3_2_CRSPropertyType_httpwww_opengis_netgml3_2remoteSchema', pyxb.binding.datatypes.anyURI)
    
    remoteSchema = property(__remoteSchema.value, __remoteSchema.set, None, u'')


    _ElementMap = {
        __AbstractCRS.name() : __AbstractCRS
    }
    _AttributeMap = {
        __arcrole.name() : __arcrole,
        __role.name() : __role,
        __title.name() : __title,
        __show.name() : __show,
        __actuate.name() : __actuate,
        __nilReason.name() : __nilReason,
        __href.name() : __href,
        __type.name() : __type,
        __remoteSchema.name() : __remoteSchema
    }
_Namespace_gml.addCategoryObject('typeBinding', u'CRSPropertyType', CRSPropertyType)


# Complex type DirectPositionListType with content type SIMPLE
class DirectPositionListType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = doubleList
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'DirectPositionListType')
    # Base type is doubleList
    
    # Attribute count uses Python identifier count
    __count = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'count'), 'count', '__httpwww_opengis_netgml3_2_DirectPositionListType_count', pyxb.binding.datatypes.positiveInteger)
    
    count = property(__count.value, __count.set, None, None)

    
    # Attribute srsName uses Python identifier srsName
    __srsName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'srsName'), 'srsName', '__httpwww_opengis_netgml3_2_DirectPositionListType_srsName', pyxb.binding.datatypes.anyURI)
    
    srsName = property(__srsName.value, __srsName.set, None, None)

    
    # Attribute srsDimension uses Python identifier srsDimension
    __srsDimension = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'srsDimension'), 'srsDimension', '__httpwww_opengis_netgml3_2_DirectPositionListType_srsDimension', pyxb.binding.datatypes.positiveInteger)
    
    srsDimension = property(__srsDimension.value, __srsDimension.set, None, None)

    
    # Attribute axisLabels uses Python identifier axisLabels
    __axisLabels = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'axisLabels'), 'axisLabels', '__httpwww_opengis_netgml3_2_DirectPositionListType_axisLabels', NCNameList)
    
    axisLabels = property(__axisLabels.value, __axisLabels.set, None, None)

    
    # Attribute uomLabels uses Python identifier uomLabels
    __uomLabels = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uomLabels'), 'uomLabels', '__httpwww_opengis_netgml3_2_DirectPositionListType_uomLabels', NCNameList)
    
    uomLabels = property(__uomLabels.value, __uomLabels.set, None, None)


    _ElementMap = {
        
    }
    _AttributeMap = {
        __count.name() : __count,
        __srsName.name() : __srsName,
        __srsDimension.name() : __srsDimension,
        __axisLabels.name() : __axisLabels,
        __uomLabels.name() : __uomLabels
    }
_Namespace_gml.addCategoryObject('typeBinding', u'DirectPositionListType', DirectPositionListType)


# Complex type SingleCRSPropertyType with content type ELEMENT_ONLY
class SingleCRSPropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'SingleCRSPropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.opengis.net/gml/3.2}AbstractSingleCRS uses Python identifier AbstractSingleCRS
    __AbstractSingleCRS = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractSingleCRS'), 'AbstractSingleCRS', '__httpwww_opengis_netgml3_2_SingleCRSPropertyType_httpwww_opengis_netgml3_2AbstractSingleCRS', False)

    
    AbstractSingleCRS = property(__AbstractSingleCRS.value, __AbstractSingleCRS.set, None, u'gml:AbstractSingleCRS implements a coordinate reference system consisting of one coordinate system and one datum (as opposed to a Compound CRS).')

    
    # Attribute {http://www.opengis.net/gml/3.2}remoteSchema uses Python identifier remoteSchema
    __remoteSchema = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'remoteSchema'), 'remoteSchema', '__httpwww_opengis_netgml3_2_SingleCRSPropertyType_httpwww_opengis_netgml3_2remoteSchema', pyxb.binding.datatypes.anyURI)
    
    remoteSchema = property(__remoteSchema.value, __remoteSchema.set, None, u'')

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_opengis_netgml3_2_SingleCRSPropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_opengis_netgml3_2_SingleCRSPropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_opengis_netgml3_2_SingleCRSPropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_opengis_netgml3_2_SingleCRSPropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'nilReason'), 'nilReason', '__httpwww_opengis_netgml3_2_SingleCRSPropertyType_nilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_opengis_netgml3_2_SingleCRSPropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_opengis_netgml3_2_SingleCRSPropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_opengis_netgml3_2_SingleCRSPropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")


    _ElementMap = {
        __AbstractSingleCRS.name() : __AbstractSingleCRS
    }
    _AttributeMap = {
        __remoteSchema.name() : __remoteSchema,
        __actuate.name() : __actuate,
        __title.name() : __title,
        __href.name() : __href,
        __type.name() : __type,
        __nilReason.name() : __nilReason,
        __arcrole.name() : __arcrole,
        __role.name() : __role,
        __show.name() : __show
    }
_Namespace_gml.addCategoryObject('typeBinding', u'SingleCRSPropertyType', SingleCRSPropertyType)


# Complex type DQ_FormatConsistency_Type with content type ELEMENT_ONLY
class DQ_FormatConsistency_Type (AbstractDQ_LogicalConsistency_Type):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'DQ_FormatConsistency_Type')
    # Base type is AbstractDQ_LogicalConsistency_Type
    
    # Element evaluationMethodDescription ({http://www.isotc211.org/2005/gmd}evaluationMethodDescription) inherited from {http://www.isotc211.org/2005/gmd}AbstractDQ_Element_Type
    
    # Element measureDescription ({http://www.isotc211.org/2005/gmd}measureDescription) inherited from {http://www.isotc211.org/2005/gmd}AbstractDQ_Element_Type
    
    # Element evaluationProcedure ({http://www.isotc211.org/2005/gmd}evaluationProcedure) inherited from {http://www.isotc211.org/2005/gmd}AbstractDQ_Element_Type
    
    # Element evaluationMethodType ({http://www.isotc211.org/2005/gmd}evaluationMethodType) inherited from {http://www.isotc211.org/2005/gmd}AbstractDQ_Element_Type
    
    # Element dateTime ({http://www.isotc211.org/2005/gmd}dateTime) inherited from {http://www.isotc211.org/2005/gmd}AbstractDQ_Element_Type
    
    # Element result ({http://www.isotc211.org/2005/gmd}result) inherited from {http://www.isotc211.org/2005/gmd}AbstractDQ_Element_Type
    
    # Element nameOfMeasure ({http://www.isotc211.org/2005/gmd}nameOfMeasure) inherited from {http://www.isotc211.org/2005/gmd}AbstractDQ_Element_Type
    
    # Element measureIdentification ({http://www.isotc211.org/2005/gmd}measureIdentification) inherited from {http://www.isotc211.org/2005/gmd}AbstractDQ_Element_Type
    
    # Attribute id inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type
    
    # Attribute uuid inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type

    _ElementMap = AbstractDQ_LogicalConsistency_Type._ElementMap.copy()
    _ElementMap.update({
        
    })
    _AttributeMap = AbstractDQ_LogicalConsistency_Type._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gmd.addCategoryObject('typeBinding', u'DQ_FormatConsistency_Type', DQ_FormatConsistency_Type)


# Complex type PolygonPatchType with content type ELEMENT_ONLY
class PolygonPatchType (AbstractSurfacePatchType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'PolygonPatchType')
    # Base type is AbstractSurfacePatchType
    
    # Element {http://www.opengis.net/gml/3.2}interior uses Python identifier interior
    __interior = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'interior'), 'interior', '__httpwww_opengis_netgml3_2_PolygonPatchType_httpwww_opengis_netgml3_2interior', True)

    
    interior = property(__interior.value, __interior.set, None, u'A boundary of a surface consists of a number of rings. The "interior" rings separate the surface / surface patch from the area enclosed by the rings.')

    
    # Element {http://www.opengis.net/gml/3.2}exterior uses Python identifier exterior
    __exterior = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'exterior'), 'exterior', '__httpwww_opengis_netgml3_2_PolygonPatchType_httpwww_opengis_netgml3_2exterior', False)

    
    exterior = property(__exterior.value, __exterior.set, None, u'A boundary of a surface consists of a number of rings. In the normal 2D case, one of these rings is distinguished as being the exterior boundary. In a general manifold this is not always possible, in which case all boundaries shall be listed as interior boundaries, and the exterior will be empty.')

    
    # Attribute interpolation uses Python identifier interpolation
    __interpolation = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'interpolation'), 'interpolation', '__httpwww_opengis_netgml3_2_PolygonPatchType_interpolation', SurfaceInterpolationType, fixed=True, unicode_default=u'planar')
    
    interpolation = property(__interpolation.value, __interpolation.set, None, None)


    _ElementMap = AbstractSurfacePatchType._ElementMap.copy()
    _ElementMap.update({
        __interior.name() : __interior,
        __exterior.name() : __exterior
    })
    _AttributeMap = AbstractSurfacePatchType._AttributeMap.copy()
    _AttributeMap.update({
        __interpolation.name() : __interpolation
    })
_Namespace_gml.addCategoryObject('typeBinding', u'PolygonPatchType', PolygonPatchType)


# Complex type AbstractGeometricAggregateType with content type ELEMENT_ONLY
class AbstractGeometricAggregateType (AbstractGeometryType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = True
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractGeometricAggregateType')
    # Base type is AbstractGeometryType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Attribute uomLabels inherited from {http://www.opengis.net/gml/3.2}AbstractGeometryType
    
    # Attribute aggregationType uses Python identifier aggregationType
    __aggregationType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'aggregationType'), 'aggregationType', '__httpwww_opengis_netgml3_2_AbstractGeometricAggregateType_aggregationType', AggregationType)
    
    aggregationType = property(__aggregationType.value, __aggregationType.set, None, None)

    
    # Attribute srsName inherited from {http://www.opengis.net/gml/3.2}AbstractGeometryType
    
    # Attribute id inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Attribute srsDimension inherited from {http://www.opengis.net/gml/3.2}AbstractGeometryType
    
    # Attribute axisLabels inherited from {http://www.opengis.net/gml/3.2}AbstractGeometryType

    _ElementMap = AbstractGeometryType._ElementMap.copy()
    _ElementMap.update({
        
    })
    _AttributeMap = AbstractGeometryType._AttributeMap.copy()
    _AttributeMap.update({
        __aggregationType.name() : __aggregationType
    })
_Namespace_gml.addCategoryObject('typeBinding', u'AbstractGeometricAggregateType', AbstractGeometricAggregateType)


# Complex type Boolean_PropertyType with content type ELEMENT_ONLY
class Boolean_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gco, u'Boolean_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gco}Boolean uses Python identifier Boolean
    __Boolean = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'Boolean'), 'Boolean', '__httpwww_isotc211_org2005gco_Boolean_PropertyType_httpwww_isotc211_org2005gcoBoolean', False)

    
    Boolean = property(__Boolean.value, __Boolean.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gco_Boolean_PropertyType_httpwww_isotc211_org2005gconilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)


    _ElementMap = {
        __Boolean.name() : __Boolean
    }
    _AttributeMap = {
        __nilReason.name() : __nilReason
    }
_Namespace_gco.addCategoryObject('typeBinding', u'Boolean_PropertyType', Boolean_PropertyType)


# Complex type EX_TemporalExtent_Type with content type ELEMENT_ONLY
class EX_TemporalExtent_Type (AbstractObject_Type):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'EX_TemporalExtent_Type')
    # Base type is AbstractObject_Type
    
    # Element {http://www.isotc211.org/2005/gmd}extent uses Python identifier extent
    __extent = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'extent'), 'extent', '__httpwww_isotc211_org2005gmd_EX_TemporalExtent_Type_httpwww_isotc211_org2005gmdextent', False)

    
    extent = property(__extent.value, __extent.set, None, None)

    
    # Attribute id inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type
    
    # Attribute uuid inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type

    _ElementMap = AbstractObject_Type._ElementMap.copy()
    _ElementMap.update({
        __extent.name() : __extent
    })
    _AttributeMap = AbstractObject_Type._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gmd.addCategoryObject('typeBinding', u'EX_TemporalExtent_Type', EX_TemporalExtent_Type)


# Complex type EX_SpatialTemporalExtent_Type with content type ELEMENT_ONLY
class EX_SpatialTemporalExtent_Type (EX_TemporalExtent_Type):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'EX_SpatialTemporalExtent_Type')
    # Base type is EX_TemporalExtent_Type
    
    # Element {http://www.isotc211.org/2005/gmd}spatialExtent uses Python identifier spatialExtent
    __spatialExtent = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'spatialExtent'), 'spatialExtent', '__httpwww_isotc211_org2005gmd_EX_SpatialTemporalExtent_Type_httpwww_isotc211_org2005gmdspatialExtent', True)

    
    spatialExtent = property(__spatialExtent.value, __spatialExtent.set, None, None)

    
    # Element extent ({http://www.isotc211.org/2005/gmd}extent) inherited from {http://www.isotc211.org/2005/gmd}EX_TemporalExtent_Type
    
    # Attribute id inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type
    
    # Attribute uuid inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type

    _ElementMap = EX_TemporalExtent_Type._ElementMap.copy()
    _ElementMap.update({
        __spatialExtent.name() : __spatialExtent
    })
    _AttributeMap = EX_TemporalExtent_Type._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gmd.addCategoryObject('typeBinding', u'EX_SpatialTemporalExtent_Type', EX_SpatialTemporalExtent_Type)


# Complex type MD_DimensionNameTypeCode_PropertyType with content type ELEMENT_ONLY
class MD_DimensionNameTypeCode_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_DimensionNameTypeCode_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmd}MD_DimensionNameTypeCode uses Python identifier MD_DimensionNameTypeCode
    __MD_DimensionNameTypeCode = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_DimensionNameTypeCode'), 'MD_DimensionNameTypeCode', '__httpwww_isotc211_org2005gmd_MD_DimensionNameTypeCode_PropertyType_httpwww_isotc211_org2005gmdMD_DimensionNameTypeCode', False)

    
    MD_DimensionNameTypeCode = property(__MD_DimensionNameTypeCode.value, __MD_DimensionNameTypeCode.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmd_MD_DimensionNameTypeCode_PropertyType_httpwww_isotc211_org2005gconilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)


    _ElementMap = {
        __MD_DimensionNameTypeCode.name() : __MD_DimensionNameTypeCode
    }
    _AttributeMap = {
        __nilReason.name() : __nilReason
    }
_Namespace_gmd.addCategoryObject('typeBinding', u'MD_DimensionNameTypeCode_PropertyType', MD_DimensionNameTypeCode_PropertyType)


# Complex type CI_Citation_PropertyType with content type ELEMENT_ONLY
class CI_Citation_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'CI_Citation_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmd}CI_Citation uses Python identifier CI_Citation
    __CI_Citation = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'CI_Citation'), 'CI_Citation', '__httpwww_isotc211_org2005gmd_CI_Citation_PropertyType_httpwww_isotc211_org2005gmdCI_Citation', False)

    
    CI_Citation = property(__CI_Citation.value, __CI_Citation.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_isotc211_org2005gmd_CI_Citation_PropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_isotc211_org2005gmd_CI_Citation_PropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_isotc211_org2005gmd_CI_Citation_PropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_isotc211_org2005gmd_CI_Citation_PropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmd_CI_Citation_PropertyType_httpwww_isotc211_org2005gconilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_isotc211_org2005gmd_CI_Citation_PropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute uuidref uses Python identifier uuidref
    __uuidref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uuidref'), 'uuidref', '__httpwww_isotc211_org2005gmd_CI_Citation_PropertyType_uuidref', pyxb.binding.datatypes.string)
    
    uuidref = property(__uuidref.value, __uuidref.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_isotc211_org2005gmd_CI_Citation_PropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_isotc211_org2005gmd_CI_Citation_PropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")


    _ElementMap = {
        __CI_Citation.name() : __CI_Citation
    }
    _AttributeMap = {
        __arcrole.name() : __arcrole,
        __type.name() : __type,
        __role.name() : __role,
        __href.name() : __href,
        __nilReason.name() : __nilReason,
        __show.name() : __show,
        __uuidref.name() : __uuidref,
        __title.name() : __title,
        __actuate.name() : __actuate
    }
_Namespace_gmd.addCategoryObject('typeBinding', u'CI_Citation_PropertyType', CI_Citation_PropertyType)


# Complex type PolarCSPropertyType with content type ELEMENT_ONLY
class PolarCSPropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'PolarCSPropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.opengis.net/gml/3.2}PolarCS uses Python identifier PolarCS
    __PolarCS = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'PolarCS'), 'PolarCS', '__httpwww_opengis_netgml3_2_PolarCSPropertyType_httpwww_opengis_netgml3_2PolarCS', False)

    
    PolarCS = property(__PolarCS.value, __PolarCS.set, None, u'gml:PolarCS ia s two-dimensional coordinate system in which position is specified by the distance from the origin and the angle between the line from the origin to a point and a reference direction. A PolarCS shall have two gml:axis property elements.')

    
    # Attribute {http://www.opengis.net/gml/3.2}remoteSchema uses Python identifier remoteSchema
    __remoteSchema = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'remoteSchema'), 'remoteSchema', '__httpwww_opengis_netgml3_2_PolarCSPropertyType_httpwww_opengis_netgml3_2remoteSchema', pyxb.binding.datatypes.anyURI)
    
    remoteSchema = property(__remoteSchema.value, __remoteSchema.set, None, u'')

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_opengis_netgml3_2_PolarCSPropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_opengis_netgml3_2_PolarCSPropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_opengis_netgml3_2_PolarCSPropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'nilReason'), 'nilReason', '__httpwww_opengis_netgml3_2_PolarCSPropertyType_nilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_opengis_netgml3_2_PolarCSPropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_opengis_netgml3_2_PolarCSPropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_opengis_netgml3_2_PolarCSPropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_opengis_netgml3_2_PolarCSPropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")


    _ElementMap = {
        __PolarCS.name() : __PolarCS
    }
    _AttributeMap = {
        __remoteSchema.name() : __remoteSchema,
        __type.name() : __type,
        __actuate.name() : __actuate,
        __href.name() : __href,
        __nilReason.name() : __nilReason,
        __title.name() : __title,
        __arcrole.name() : __arcrole,
        __role.name() : __role,
        __show.name() : __show
    }
_Namespace_gml.addCategoryObject('typeBinding', u'PolarCSPropertyType', PolarCSPropertyType)


# Complex type VectorType with content type SIMPLE
class VectorType (DirectPositionType):
    _TypeDefinition = STD_ANON_5
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'VectorType')
    # Base type is DirectPositionType
    
    # Attribute srsName inherited from {http://www.opengis.net/gml/3.2}DirectPositionType
    
    # Attribute axisLabels inherited from {http://www.opengis.net/gml/3.2}DirectPositionType
    
    # Attribute uomLabels inherited from {http://www.opengis.net/gml/3.2}DirectPositionType
    
    # Attribute srsDimension inherited from {http://www.opengis.net/gml/3.2}DirectPositionType

    _ElementMap = DirectPositionType._ElementMap.copy()
    _ElementMap.update({
        
    })
    _AttributeMap = DirectPositionType._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gml.addCategoryObject('typeBinding', u'VectorType', VectorType)


# Complex type CI_Date_PropertyType with content type ELEMENT_ONLY
class CI_Date_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'CI_Date_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmd}CI_Date uses Python identifier CI_Date
    __CI_Date = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'CI_Date'), 'CI_Date', '__httpwww_isotc211_org2005gmd_CI_Date_PropertyType_httpwww_isotc211_org2005gmdCI_Date', False)

    
    CI_Date = property(__CI_Date.value, __CI_Date.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_isotc211_org2005gmd_CI_Date_PropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmd_CI_Date_PropertyType_httpwww_isotc211_org2005gconilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_isotc211_org2005gmd_CI_Date_PropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_isotc211_org2005gmd_CI_Date_PropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_isotc211_org2005gmd_CI_Date_PropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute uuidref uses Python identifier uuidref
    __uuidref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uuidref'), 'uuidref', '__httpwww_isotc211_org2005gmd_CI_Date_PropertyType_uuidref', pyxb.binding.datatypes.string)
    
    uuidref = property(__uuidref.value, __uuidref.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_isotc211_org2005gmd_CI_Date_PropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_isotc211_org2005gmd_CI_Date_PropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_isotc211_org2005gmd_CI_Date_PropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)


    _ElementMap = {
        __CI_Date.name() : __CI_Date
    }
    _AttributeMap = {
        __type.name() : __type,
        __nilReason.name() : __nilReason,
        __actuate.name() : __actuate,
        __show.name() : __show,
        __href.name() : __href,
        __uuidref.name() : __uuidref,
        __role.name() : __role,
        __title.name() : __title,
        __arcrole.name() : __arcrole
    }
_Namespace_gmd.addCategoryObject('typeBinding', u'CI_Date_PropertyType', CI_Date_PropertyType)


# Complex type DQ_DomainConsistency_Type with content type ELEMENT_ONLY
class DQ_DomainConsistency_Type (AbstractDQ_LogicalConsistency_Type):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'DQ_DomainConsistency_Type')
    # Base type is AbstractDQ_LogicalConsistency_Type
    
    # Element evaluationMethodDescription ({http://www.isotc211.org/2005/gmd}evaluationMethodDescription) inherited from {http://www.isotc211.org/2005/gmd}AbstractDQ_Element_Type
    
    # Element measureDescription ({http://www.isotc211.org/2005/gmd}measureDescription) inherited from {http://www.isotc211.org/2005/gmd}AbstractDQ_Element_Type
    
    # Element evaluationProcedure ({http://www.isotc211.org/2005/gmd}evaluationProcedure) inherited from {http://www.isotc211.org/2005/gmd}AbstractDQ_Element_Type
    
    # Element evaluationMethodType ({http://www.isotc211.org/2005/gmd}evaluationMethodType) inherited from {http://www.isotc211.org/2005/gmd}AbstractDQ_Element_Type
    
    # Element dateTime ({http://www.isotc211.org/2005/gmd}dateTime) inherited from {http://www.isotc211.org/2005/gmd}AbstractDQ_Element_Type
    
    # Element result ({http://www.isotc211.org/2005/gmd}result) inherited from {http://www.isotc211.org/2005/gmd}AbstractDQ_Element_Type
    
    # Element nameOfMeasure ({http://www.isotc211.org/2005/gmd}nameOfMeasure) inherited from {http://www.isotc211.org/2005/gmd}AbstractDQ_Element_Type
    
    # Element measureIdentification ({http://www.isotc211.org/2005/gmd}measureIdentification) inherited from {http://www.isotc211.org/2005/gmd}AbstractDQ_Element_Type
    
    # Attribute id inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type
    
    # Attribute uuid inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type

    _ElementMap = AbstractDQ_LogicalConsistency_Type._ElementMap.copy()
    _ElementMap.update({
        
    })
    _AttributeMap = AbstractDQ_LogicalConsistency_Type._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gmd.addCategoryObject('typeBinding', u'DQ_DomainConsistency_Type', DQ_DomainConsistency_Type)


# Complex type CylindricalCSPropertyType with content type ELEMENT_ONLY
class CylindricalCSPropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'CylindricalCSPropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.opengis.net/gml/3.2}CylindricalCS uses Python identifier CylindricalCS
    __CylindricalCS = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'CylindricalCS'), 'CylindricalCS', '__httpwww_opengis_netgml3_2_CylindricalCSPropertyType_httpwww_opengis_netgml3_2CylindricalCS', False)

    
    CylindricalCS = property(__CylindricalCS.value, __CylindricalCS.set, None, u'gml:CylindricalCS is a three-dimensional coordinate system consisting of a polar coordinate system extended by a straight coordinate axis perpendicular to the plane spanned by the polar coordinate system. A CylindricalCS shall have three gml:axis property elements.')

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_opengis_netgml3_2_CylindricalCSPropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_opengis_netgml3_2_CylindricalCSPropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_opengis_netgml3_2_CylindricalCSPropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.opengis.net/gml/3.2}remoteSchema uses Python identifier remoteSchema
    __remoteSchema = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'remoteSchema'), 'remoteSchema', '__httpwww_opengis_netgml3_2_CylindricalCSPropertyType_httpwww_opengis_netgml3_2remoteSchema', pyxb.binding.datatypes.anyURI)
    
    remoteSchema = property(__remoteSchema.value, __remoteSchema.set, None, u'')

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_opengis_netgml3_2_CylindricalCSPropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'nilReason'), 'nilReason', '__httpwww_opengis_netgml3_2_CylindricalCSPropertyType_nilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_opengis_netgml3_2_CylindricalCSPropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_opengis_netgml3_2_CylindricalCSPropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_opengis_netgml3_2_CylindricalCSPropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)


    _ElementMap = {
        __CylindricalCS.name() : __CylindricalCS
    }
    _AttributeMap = {
        __title.name() : __title,
        __role.name() : __role,
        __arcrole.name() : __arcrole,
        __remoteSchema.name() : __remoteSchema,
        __show.name() : __show,
        __nilReason.name() : __nilReason,
        __actuate.name() : __actuate,
        __href.name() : __href,
        __type.name() : __type
    }
_Namespace_gml.addCategoryObject('typeBinding', u'CylindricalCSPropertyType', CylindricalCSPropertyType)


# Complex type MD_SpatialRepresentation_PropertyType with content type ELEMENT_ONLY
class MD_SpatialRepresentation_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_SpatialRepresentation_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmd}AbstractMD_SpatialRepresentation uses Python identifier AbstractMD_SpatialRepresentation
    __AbstractMD_SpatialRepresentation = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'AbstractMD_SpatialRepresentation'), 'AbstractMD_SpatialRepresentation', '__httpwww_isotc211_org2005gmd_MD_SpatialRepresentation_PropertyType_httpwww_isotc211_org2005gmdAbstractMD_SpatialRepresentation', False)

    
    AbstractMD_SpatialRepresentation = property(__AbstractMD_SpatialRepresentation.value, __AbstractMD_SpatialRepresentation.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_isotc211_org2005gmd_MD_SpatialRepresentation_PropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmd_MD_SpatialRepresentation_PropertyType_httpwww_isotc211_org2005gconilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_isotc211_org2005gmd_MD_SpatialRepresentation_PropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_isotc211_org2005gmd_MD_SpatialRepresentation_PropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_isotc211_org2005gmd_MD_SpatialRepresentation_PropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute uuidref uses Python identifier uuidref
    __uuidref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uuidref'), 'uuidref', '__httpwww_isotc211_org2005gmd_MD_SpatialRepresentation_PropertyType_uuidref', pyxb.binding.datatypes.string)
    
    uuidref = property(__uuidref.value, __uuidref.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_isotc211_org2005gmd_MD_SpatialRepresentation_PropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_isotc211_org2005gmd_MD_SpatialRepresentation_PropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_isotc211_org2005gmd_MD_SpatialRepresentation_PropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)


    _ElementMap = {
        __AbstractMD_SpatialRepresentation.name() : __AbstractMD_SpatialRepresentation
    }
    _AttributeMap = {
        __type.name() : __type,
        __nilReason.name() : __nilReason,
        __title.name() : __title,
        __show.name() : __show,
        __href.name() : __href,
        __uuidref.name() : __uuidref,
        __actuate.name() : __actuate,
        __role.name() : __role,
        __arcrole.name() : __arcrole
    }
_Namespace_gmd.addCategoryObject('typeBinding', u'MD_SpatialRepresentation_PropertyType', MD_SpatialRepresentation_PropertyType)


# Complex type ConcatenatedOperationType with content type ELEMENT_ONLY
class ConcatenatedOperationType (AbstractCoordinateOperationType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'ConcatenatedOperationType')
    # Base type is AbstractCoordinateOperationType
    
    # Element sourceCRS ({http://www.opengis.net/gml/3.2}sourceCRS) inherited from {http://www.opengis.net/gml/3.2}AbstractCoordinateOperationType
    
    # Element targetCRS ({http://www.opengis.net/gml/3.2}targetCRS) inherited from {http://www.opengis.net/gml/3.2}AbstractCoordinateOperationType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element operationVersion ({http://www.opengis.net/gml/3.2}operationVersion) inherited from {http://www.opengis.net/gml/3.2}AbstractCoordinateOperationType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element scope ({http://www.opengis.net/gml/3.2}scope) inherited from {http://www.opengis.net/gml/3.2}AbstractCoordinateOperationType
    
    # Element {http://www.opengis.net/gml/3.2}coordOperation uses Python identifier coordOperation
    __coordOperation = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'coordOperation'), 'coordOperation', '__httpwww_opengis_netgml3_2_ConcatenatedOperationType_httpwww_opengis_netgml3_2coordOperation', True)

    
    coordOperation = property(__coordOperation.value, __coordOperation.set, None, u'gml:coordOperation is an association role to a coordinate operation.')

    
    # Element domainOfValidity ({http://www.opengis.net/gml/3.2}domainOfValidity) inherited from {http://www.opengis.net/gml/3.2}AbstractCoordinateOperationType
    
    # Element coordinateOperationAccuracy ({http://www.opengis.net/gml/3.2}coordinateOperationAccuracy) inherited from {http://www.opengis.net/gml/3.2}AbstractCoordinateOperationType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element remarks ({http://www.opengis.net/gml/3.2}remarks) inherited from {http://www.opengis.net/gml/3.2}DefinitionType
    
    # Attribute aggregationType uses Python identifier aggregationType
    __aggregationType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'aggregationType'), 'aggregationType', '__httpwww_opengis_netgml3_2_ConcatenatedOperationType_aggregationType', AggregationType)
    
    aggregationType = property(__aggregationType.value, __aggregationType.set, None, None)

    
    # Attribute id_ inherited from {http://www.opengis.net/gml/3.2}DefinitionBaseType

    _ElementMap = AbstractCoordinateOperationType._ElementMap.copy()
    _ElementMap.update({
        __coordOperation.name() : __coordOperation
    })
    _AttributeMap = AbstractCoordinateOperationType._AttributeMap.copy()
    _AttributeMap.update({
        __aggregationType.name() : __aggregationType
    })
_Namespace_gml.addCategoryObject('typeBinding', u'ConcatenatedOperationType', ConcatenatedOperationType)


# Complex type GridFunctionType with content type ELEMENT_ONLY
class GridFunctionType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'GridFunctionType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.opengis.net/gml/3.2}startPoint uses Python identifier startPoint
    __startPoint = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'startPoint'), 'startPoint', '__httpwww_opengis_netgml3_2_GridFunctionType_httpwww_opengis_netgml3_2startPoint', False)

    
    startPoint = property(__startPoint.value, __startPoint.set, None, None)

    
    # Element {http://www.opengis.net/gml/3.2}sequenceRule uses Python identifier sequenceRule
    __sequenceRule = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'sequenceRule'), 'sequenceRule', '__httpwww_opengis_netgml3_2_GridFunctionType_httpwww_opengis_netgml3_2sequenceRule', False)

    
    sequenceRule = property(__sequenceRule.value, __sequenceRule.set, None, None)


    _ElementMap = {
        __startPoint.name() : __startPoint,
        __sequenceRule.name() : __sequenceRule
    }
    _AttributeMap = {
        
    }
_Namespace_gml.addCategoryObject('typeBinding', u'GridFunctionType', GridFunctionType)


# Complex type CI_Telephone_Type with content type ELEMENT_ONLY
class CI_Telephone_Type (AbstractObject_Type):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'CI_Telephone_Type')
    # Base type is AbstractObject_Type
    
    # Element {http://www.isotc211.org/2005/gmd}facsimile uses Python identifier facsimile
    __facsimile = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'facsimile'), 'facsimile', '__httpwww_isotc211_org2005gmd_CI_Telephone_Type_httpwww_isotc211_org2005gmdfacsimile', True)

    
    facsimile = property(__facsimile.value, __facsimile.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}voice uses Python identifier voice
    __voice = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'voice'), 'voice', '__httpwww_isotc211_org2005gmd_CI_Telephone_Type_httpwww_isotc211_org2005gmdvoice', True)

    
    voice = property(__voice.value, __voice.set, None, None)

    
    # Attribute id inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type
    
    # Attribute uuid inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type

    _ElementMap = AbstractObject_Type._ElementMap.copy()
    _ElementMap.update({
        __facsimile.name() : __facsimile,
        __voice.name() : __voice
    })
    _AttributeMap = AbstractObject_Type._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gmd.addCategoryObject('typeBinding', u'CI_Telephone_Type', CI_Telephone_Type)


# Complex type MD_DataIdentification_PropertyType with content type ELEMENT_ONLY
class MD_DataIdentification_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_DataIdentification_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmd}MD_DataIdentification uses Python identifier MD_DataIdentification
    __MD_DataIdentification = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_DataIdentification'), 'MD_DataIdentification', '__httpwww_isotc211_org2005gmd_MD_DataIdentification_PropertyType_httpwww_isotc211_org2005gmdMD_DataIdentification', False)

    
    MD_DataIdentification = property(__MD_DataIdentification.value, __MD_DataIdentification.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_isotc211_org2005gmd_MD_DataIdentification_PropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_isotc211_org2005gmd_MD_DataIdentification_PropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_isotc211_org2005gmd_MD_DataIdentification_PropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_isotc211_org2005gmd_MD_DataIdentification_PropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute uuidref uses Python identifier uuidref
    __uuidref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uuidref'), 'uuidref', '__httpwww_isotc211_org2005gmd_MD_DataIdentification_PropertyType_uuidref', pyxb.binding.datatypes.string)
    
    uuidref = property(__uuidref.value, __uuidref.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmd_MD_DataIdentification_PropertyType_httpwww_isotc211_org2005gconilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_isotc211_org2005gmd_MD_DataIdentification_PropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_isotc211_org2005gmd_MD_DataIdentification_PropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_isotc211_org2005gmd_MD_DataIdentification_PropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)


    _ElementMap = {
        __MD_DataIdentification.name() : __MD_DataIdentification
    }
    _AttributeMap = {
        __role.name() : __role,
        __type.name() : __type,
        __arcrole.name() : __arcrole,
        __title.name() : __title,
        __uuidref.name() : __uuidref,
        __nilReason.name() : __nilReason,
        __show.name() : __show,
        __actuate.name() : __actuate,
        __href.name() : __href
    }
_Namespace_gmd.addCategoryObject('typeBinding', u'MD_DataIdentification_PropertyType', MD_DataIdentification_PropertyType)


# Complex type CI_PresentationFormCode_PropertyType with content type ELEMENT_ONLY
class CI_PresentationFormCode_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'CI_PresentationFormCode_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmd}CI_PresentationFormCode uses Python identifier CI_PresentationFormCode
    __CI_PresentationFormCode = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'CI_PresentationFormCode'), 'CI_PresentationFormCode', '__httpwww_isotc211_org2005gmd_CI_PresentationFormCode_PropertyType_httpwww_isotc211_org2005gmdCI_PresentationFormCode', False)

    
    CI_PresentationFormCode = property(__CI_PresentationFormCode.value, __CI_PresentationFormCode.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmd_CI_PresentationFormCode_PropertyType_httpwww_isotc211_org2005gconilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)


    _ElementMap = {
        __CI_PresentationFormCode.name() : __CI_PresentationFormCode
    }
    _AttributeMap = {
        __nilReason.name() : __nilReason
    }
_Namespace_gmd.addCategoryObject('typeBinding', u'CI_PresentationFormCode_PropertyType', CI_PresentationFormCode_PropertyType)


# Complex type OperationParameterPropertyType with content type ELEMENT_ONLY
class OperationParameterPropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'OperationParameterPropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.opengis.net/gml/3.2}OperationParameter uses Python identifier OperationParameter
    __OperationParameter = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'OperationParameter'), 'OperationParameter', '__httpwww_opengis_netgml3_2_OperationParameterPropertyType_httpwww_opengis_netgml3_2OperationParameter', False)

    
    OperationParameter = property(__OperationParameter.value, __OperationParameter.set, None, u'gml:OperationParameter is the definition of a parameter used by an operation method. Most parameter values are numeric, but other types of parameter values are possible. This complex type is expected to be used or extended for all operation methods, without defining operation-method-specialized element names.')

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_opengis_netgml3_2_OperationParameterPropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.opengis.net/gml/3.2}remoteSchema uses Python identifier remoteSchema
    __remoteSchema = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'remoteSchema'), 'remoteSchema', '__httpwww_opengis_netgml3_2_OperationParameterPropertyType_httpwww_opengis_netgml3_2remoteSchema', pyxb.binding.datatypes.anyURI)
    
    remoteSchema = property(__remoteSchema.value, __remoteSchema.set, None, u'')

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_opengis_netgml3_2_OperationParameterPropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_opengis_netgml3_2_OperationParameterPropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_opengis_netgml3_2_OperationParameterPropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'nilReason'), 'nilReason', '__httpwww_opengis_netgml3_2_OperationParameterPropertyType_nilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_opengis_netgml3_2_OperationParameterPropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_opengis_netgml3_2_OperationParameterPropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_opengis_netgml3_2_OperationParameterPropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")


    _ElementMap = {
        __OperationParameter.name() : __OperationParameter
    }
    _AttributeMap = {
        __arcrole.name() : __arcrole,
        __remoteSchema.name() : __remoteSchema,
        __href.name() : __href,
        __type.name() : __type,
        __title.name() : __title,
        __nilReason.name() : __nilReason,
        __role.name() : __role,
        __show.name() : __show,
        __actuate.name() : __actuate
    }
_Namespace_gml.addCategoryObject('typeBinding', u'OperationParameterPropertyType', OperationParameterPropertyType)


# Complex type TM_PeriodDuration_PropertyType with content type ELEMENT_ONLY
class TM_PeriodDuration_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gts, u'TM_PeriodDuration_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gts}TM_PeriodDuration uses Python identifier TM_PeriodDuration
    __TM_PeriodDuration = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gts, u'TM_PeriodDuration'), 'TM_PeriodDuration', '__httpwww_isotc211_org2005gts_TM_PeriodDuration_PropertyType_httpwww_isotc211_org2005gtsTM_PeriodDuration', False)

    
    TM_PeriodDuration = property(__TM_PeriodDuration.value, __TM_PeriodDuration.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gts_TM_PeriodDuration_PropertyType_httpwww_isotc211_org2005gconilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)


    _ElementMap = {
        __TM_PeriodDuration.name() : __TM_PeriodDuration
    }
    _AttributeMap = {
        __nilReason.name() : __nilReason
    }
_Namespace_gts.addCategoryObject('typeBinding', u'TM_PeriodDuration_PropertyType', TM_PeriodDuration_PropertyType)


# Complex type AbstractGeneralOperationParameterType with content type ELEMENT_ONLY
class AbstractGeneralOperationParameterType (IdentifiedObjectType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = True
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractGeneralOperationParameterType')
    # Base type is IdentifiedObjectType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element {http://www.opengis.net/gml/3.2}minimumOccurs uses Python identifier minimumOccurs
    __minimumOccurs = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'minimumOccurs'), 'minimumOccurs', '__httpwww_opengis_netgml3_2_AbstractGeneralOperationParameterType_httpwww_opengis_netgml3_2minimumOccurs', False)

    
    minimumOccurs = property(__minimumOccurs.value, __minimumOccurs.set, None, u'gml:minimumOccurs is the minimum number of times that values for this parameter group or parameter are required. If this attribute is omitted, the minimum number shall be one.')

    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element remarks ({http://www.opengis.net/gml/3.2}remarks) inherited from {http://www.opengis.net/gml/3.2}DefinitionType
    
    # Attribute id_ inherited from {http://www.opengis.net/gml/3.2}DefinitionBaseType

    _ElementMap = IdentifiedObjectType._ElementMap.copy()
    _ElementMap.update({
        __minimumOccurs.name() : __minimumOccurs
    })
    _AttributeMap = IdentifiedObjectType._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gml.addCategoryObject('typeBinding', u'AbstractGeneralOperationParameterType', AbstractGeneralOperationParameterType)


# Complex type OperationParameterGroupType with content type ELEMENT_ONLY
class OperationParameterGroupType (AbstractGeneralOperationParameterType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'OperationParameterGroupType')
    # Base type is AbstractGeneralOperationParameterType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element {http://www.opengis.net/gml/3.2}maximumOccurs uses Python identifier maximumOccurs
    __maximumOccurs = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'maximumOccurs'), 'maximumOccurs', '__httpwww_opengis_netgml3_2_OperationParameterGroupType_httpwww_opengis_netgml3_2maximumOccurs', False)

    
    maximumOccurs = property(__maximumOccurs.value, __maximumOccurs.set, None, u'gml:maximumOccurs is the maximum number of times that values for this parameter group may be included. If this attribute is omitted, the maximum number shall be one.')

    
    # Element {http://www.opengis.net/gml/3.2}parameter uses Python identifier parameter
    __parameter = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'parameter'), 'parameter', '__httpwww_opengis_netgml3_2_OperationParameterGroupType_httpwww_opengis_netgml3_2parameter', True)

    
    parameter = property(__parameter.value, __parameter.set, None, u'gml:parameter is an association to an operation parameter or parameter group.')

    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element minimumOccurs ({http://www.opengis.net/gml/3.2}minimumOccurs) inherited from {http://www.opengis.net/gml/3.2}AbstractGeneralOperationParameterType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element remarks ({http://www.opengis.net/gml/3.2}remarks) inherited from {http://www.opengis.net/gml/3.2}DefinitionType
    
    # Attribute id_ inherited from {http://www.opengis.net/gml/3.2}DefinitionBaseType

    _ElementMap = AbstractGeneralOperationParameterType._ElementMap.copy()
    _ElementMap.update({
        __maximumOccurs.name() : __maximumOccurs,
        __parameter.name() : __parameter
    })
    _AttributeMap = AbstractGeneralOperationParameterType._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gml.addCategoryObject('typeBinding', u'OperationParameterGroupType', OperationParameterGroupType)


# Complex type MD_Georectified_Type with content type ELEMENT_ONLY
class MD_Georectified_Type (MD_GridSpatialRepresentation_Type):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_Georectified_Type')
    # Base type is MD_GridSpatialRepresentation_Type
    
    # Element cellGeometry ({http://www.isotc211.org/2005/gmd}cellGeometry) inherited from {http://www.isotc211.org/2005/gmd}MD_GridSpatialRepresentation_Type
    
    # Element {http://www.isotc211.org/2005/gmd}pointInPixel uses Python identifier pointInPixel
    __pointInPixel = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'pointInPixel'), 'pointInPixel', '__httpwww_isotc211_org2005gmd_MD_Georectified_Type_httpwww_isotc211_org2005gmdpointInPixel', False)

    
    pointInPixel = property(__pointInPixel.value, __pointInPixel.set, None, None)

    
    # Element numberOfDimensions ({http://www.isotc211.org/2005/gmd}numberOfDimensions) inherited from {http://www.isotc211.org/2005/gmd}MD_GridSpatialRepresentation_Type
    
    # Element axisDimensionProperties ({http://www.isotc211.org/2005/gmd}axisDimensionProperties) inherited from {http://www.isotc211.org/2005/gmd}MD_GridSpatialRepresentation_Type
    
    # Element transformationParameterAvailability ({http://www.isotc211.org/2005/gmd}transformationParameterAvailability) inherited from {http://www.isotc211.org/2005/gmd}MD_GridSpatialRepresentation_Type
    
    # Element {http://www.isotc211.org/2005/gmd}transformationDimensionMapping uses Python identifier transformationDimensionMapping
    __transformationDimensionMapping = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'transformationDimensionMapping'), 'transformationDimensionMapping', '__httpwww_isotc211_org2005gmd_MD_Georectified_Type_httpwww_isotc211_org2005gmdtransformationDimensionMapping', True)

    
    transformationDimensionMapping = property(__transformationDimensionMapping.value, __transformationDimensionMapping.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}transformationDimensionDescription uses Python identifier transformationDimensionDescription
    __transformationDimensionDescription = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'transformationDimensionDescription'), 'transformationDimensionDescription', '__httpwww_isotc211_org2005gmd_MD_Georectified_Type_httpwww_isotc211_org2005gmdtransformationDimensionDescription', False)

    
    transformationDimensionDescription = property(__transformationDimensionDescription.value, __transformationDimensionDescription.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}checkPointAvailability uses Python identifier checkPointAvailability
    __checkPointAvailability = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'checkPointAvailability'), 'checkPointAvailability', '__httpwww_isotc211_org2005gmd_MD_Georectified_Type_httpwww_isotc211_org2005gmdcheckPointAvailability', False)

    
    checkPointAvailability = property(__checkPointAvailability.value, __checkPointAvailability.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}checkPointDescription uses Python identifier checkPointDescription
    __checkPointDescription = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'checkPointDescription'), 'checkPointDescription', '__httpwww_isotc211_org2005gmd_MD_Georectified_Type_httpwww_isotc211_org2005gmdcheckPointDescription', False)

    
    checkPointDescription = property(__checkPointDescription.value, __checkPointDescription.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}cornerPoints uses Python identifier cornerPoints
    __cornerPoints = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'cornerPoints'), 'cornerPoints', '__httpwww_isotc211_org2005gmd_MD_Georectified_Type_httpwww_isotc211_org2005gmdcornerPoints', True)

    
    cornerPoints = property(__cornerPoints.value, __cornerPoints.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}centerPoint uses Python identifier centerPoint
    __centerPoint = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'centerPoint'), 'centerPoint', '__httpwww_isotc211_org2005gmd_MD_Georectified_Type_httpwww_isotc211_org2005gmdcenterPoint', False)

    
    centerPoint = property(__centerPoint.value, __centerPoint.set, None, None)

    
    # Attribute id inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type
    
    # Attribute uuid inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type

    _ElementMap = MD_GridSpatialRepresentation_Type._ElementMap.copy()
    _ElementMap.update({
        __pointInPixel.name() : __pointInPixel,
        __transformationDimensionMapping.name() : __transformationDimensionMapping,
        __transformationDimensionDescription.name() : __transformationDimensionDescription,
        __checkPointAvailability.name() : __checkPointAvailability,
        __checkPointDescription.name() : __checkPointDescription,
        __cornerPoints.name() : __cornerPoints,
        __centerPoint.name() : __centerPoint
    })
    _AttributeMap = MD_GridSpatialRepresentation_Type._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gmd.addCategoryObject('typeBinding', u'MD_Georectified_Type', MD_Georectified_Type)


# Complex type DQ_DataQuality_Type with content type ELEMENT_ONLY
class DQ_DataQuality_Type (AbstractObject_Type):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'DQ_DataQuality_Type')
    # Base type is AbstractObject_Type
    
    # Element {http://www.isotc211.org/2005/gmd}lineage uses Python identifier lineage
    __lineage = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'lineage'), 'lineage', '__httpwww_isotc211_org2005gmd_DQ_DataQuality_Type_httpwww_isotc211_org2005gmdlineage', False)

    
    lineage = property(__lineage.value, __lineage.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}scope uses Python identifier scope
    __scope = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'scope'), 'scope', '__httpwww_isotc211_org2005gmd_DQ_DataQuality_Type_httpwww_isotc211_org2005gmdscope', False)

    
    scope = property(__scope.value, __scope.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}report uses Python identifier report
    __report = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'report'), 'report', '__httpwww_isotc211_org2005gmd_DQ_DataQuality_Type_httpwww_isotc211_org2005gmdreport', True)

    
    report = property(__report.value, __report.set, None, None)

    
    # Attribute id inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type
    
    # Attribute uuid inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type

    _ElementMap = AbstractObject_Type._ElementMap.copy()
    _ElementMap.update({
        __lineage.name() : __lineage,
        __scope.name() : __scope,
        __report.name() : __report
    })
    _AttributeMap = AbstractObject_Type._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gmd.addCategoryObject('typeBinding', u'DQ_DataQuality_Type', DQ_DataQuality_Type)


# Complex type SolidPropertyType with content type ELEMENT_ONLY
class SolidPropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'SolidPropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.opengis.net/gml/3.2}AbstractSolid uses Python identifier AbstractSolid
    __AbstractSolid = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractSolid'), 'AbstractSolid', '__httpwww_opengis_netgml3_2_SolidPropertyType_httpwww_opengis_netgml3_2AbstractSolid', False)

    
    AbstractSolid = property(__AbstractSolid.value, __AbstractSolid.set, None, u'The AbstractSolid element is the abstract head of the substituition group for all (continuous) solid elements.')

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_opengis_netgml3_2_SolidPropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_opengis_netgml3_2_SolidPropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute owns uses Python identifier owns
    __owns = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'owns'), 'owns', '__httpwww_opengis_netgml3_2_SolidPropertyType_owns', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    owns = property(__owns.value, __owns.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_opengis_netgml3_2_SolidPropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_opengis_netgml3_2_SolidPropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'nilReason'), 'nilReason', '__httpwww_opengis_netgml3_2_SolidPropertyType_nilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_opengis_netgml3_2_SolidPropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_opengis_netgml3_2_SolidPropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_opengis_netgml3_2_SolidPropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.opengis.net/gml/3.2}remoteSchema uses Python identifier remoteSchema
    __remoteSchema = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'remoteSchema'), 'remoteSchema', '__httpwww_opengis_netgml3_2_SolidPropertyType_httpwww_opengis_netgml3_2remoteSchema', pyxb.binding.datatypes.anyURI)
    
    remoteSchema = property(__remoteSchema.value, __remoteSchema.set, None, u'')


    _ElementMap = {
        __AbstractSolid.name() : __AbstractSolid
    }
    _AttributeMap = {
        __show.name() : __show,
        __role.name() : __role,
        __owns.name() : __owns,
        __actuate.name() : __actuate,
        __href.name() : __href,
        __nilReason.name() : __nilReason,
        __type.name() : __type,
        __arcrole.name() : __arcrole,
        __title.name() : __title,
        __remoteSchema.name() : __remoteSchema
    }
_Namespace_gml.addCategoryObject('typeBinding', u'SolidPropertyType', SolidPropertyType)


# Complex type MD_Format_Type with content type ELEMENT_ONLY
class MD_Format_Type (AbstractObject_Type):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_Format_Type')
    # Base type is AbstractObject_Type
    
    # Element {http://www.isotc211.org/2005/gmd}version uses Python identifier version
    __version = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'version'), 'version', '__httpwww_isotc211_org2005gmd_MD_Format_Type_httpwww_isotc211_org2005gmdversion', False)

    
    version = property(__version.value, __version.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}formatDistributor uses Python identifier formatDistributor
    __formatDistributor = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'formatDistributor'), 'formatDistributor', '__httpwww_isotc211_org2005gmd_MD_Format_Type_httpwww_isotc211_org2005gmdformatDistributor', True)

    
    formatDistributor = property(__formatDistributor.value, __formatDistributor.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}amendmentNumber uses Python identifier amendmentNumber
    __amendmentNumber = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'amendmentNumber'), 'amendmentNumber', '__httpwww_isotc211_org2005gmd_MD_Format_Type_httpwww_isotc211_org2005gmdamendmentNumber', False)

    
    amendmentNumber = property(__amendmentNumber.value, __amendmentNumber.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}specification uses Python identifier specification
    __specification = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'specification'), 'specification', '__httpwww_isotc211_org2005gmd_MD_Format_Type_httpwww_isotc211_org2005gmdspecification', False)

    
    specification = property(__specification.value, __specification.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}fileDecompressionTechnique uses Python identifier fileDecompressionTechnique
    __fileDecompressionTechnique = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'fileDecompressionTechnique'), 'fileDecompressionTechnique', '__httpwww_isotc211_org2005gmd_MD_Format_Type_httpwww_isotc211_org2005gmdfileDecompressionTechnique', False)

    
    fileDecompressionTechnique = property(__fileDecompressionTechnique.value, __fileDecompressionTechnique.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}name uses Python identifier name
    __name = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'name'), 'name', '__httpwww_isotc211_org2005gmd_MD_Format_Type_httpwww_isotc211_org2005gmdname', False)

    
    name = property(__name.value, __name.set, None, None)

    
    # Attribute id inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type
    
    # Attribute uuid inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type

    _ElementMap = AbstractObject_Type._ElementMap.copy()
    _ElementMap.update({
        __version.name() : __version,
        __formatDistributor.name() : __formatDistributor,
        __amendmentNumber.name() : __amendmentNumber,
        __specification.name() : __specification,
        __fileDecompressionTechnique.name() : __fileDecompressionTechnique,
        __name.name() : __name
    })
    _AttributeMap = AbstractObject_Type._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gmd.addCategoryObject('typeBinding', u'MD_Format_Type', MD_Format_Type)


# Complex type TopoSolidPropertyType with content type ELEMENT_ONLY
class TopoSolidPropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'TopoSolidPropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.opengis.net/gml/3.2}TopoSolid uses Python identifier TopoSolid
    __TopoSolid = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'TopoSolid'), 'TopoSolid', '__httpwww_opengis_netgml3_2_TopoSolidPropertyType_httpwww_opengis_netgml3_2TopoSolid', False)

    
    TopoSolid = property(__TopoSolid.value, __TopoSolid.set, None, u'gml:TopoSolid represents the 3-dimensional topology primitive. \nThe topological boundary of a solid (gml:directedFace) consists of a set of directed faces.\nA solid may optionally be realised by a 3-dimensional geometric primitive (gml:solidProperty).')

    
    # Attribute owns uses Python identifier owns
    __owns = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'owns'), 'owns', '__httpwww_opengis_netgml3_2_TopoSolidPropertyType_owns', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    owns = property(__owns.value, __owns.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_opengis_netgml3_2_TopoSolidPropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_opengis_netgml3_2_TopoSolidPropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_opengis_netgml3_2_TopoSolidPropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_opengis_netgml3_2_TopoSolidPropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.opengis.net/gml/3.2}remoteSchema uses Python identifier remoteSchema
    __remoteSchema = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'remoteSchema'), 'remoteSchema', '__httpwww_opengis_netgml3_2_TopoSolidPropertyType_httpwww_opengis_netgml3_2remoteSchema', pyxb.binding.datatypes.anyURI)
    
    remoteSchema = property(__remoteSchema.value, __remoteSchema.set, None, u'')

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_opengis_netgml3_2_TopoSolidPropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'nilReason'), 'nilReason', '__httpwww_opengis_netgml3_2_TopoSolidPropertyType_nilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_opengis_netgml3_2_TopoSolidPropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_opengis_netgml3_2_TopoSolidPropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")


    _ElementMap = {
        __TopoSolid.name() : __TopoSolid
    }
    _AttributeMap = {
        __owns.name() : __owns,
        __role.name() : __role,
        __actuate.name() : __actuate,
        __title.name() : __title,
        __href.name() : __href,
        __remoteSchema.name() : __remoteSchema,
        __type.name() : __type,
        __nilReason.name() : __nilReason,
        __arcrole.name() : __arcrole,
        __show.name() : __show
    }
_Namespace_gml.addCategoryObject('typeBinding', u'TopoSolidPropertyType', TopoSolidPropertyType)


# Complex type CodeListType with content type SIMPLE
class CodeListType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = NameList
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'CodeListType')
    # Base type is NameList
    
    # Attribute codeSpace uses Python identifier codeSpace
    __codeSpace = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'codeSpace'), 'codeSpace', '__httpwww_opengis_netgml3_2_CodeListType_codeSpace', pyxb.binding.datatypes.anyURI)
    
    codeSpace = property(__codeSpace.value, __codeSpace.set, None, None)


    _ElementMap = {
        
    }
    _AttributeMap = {
        __codeSpace.name() : __codeSpace
    }
_Namespace_gml.addCategoryObject('typeBinding', u'CodeListType', CodeListType)


# Complex type TargetPropertyType with content type ELEMENT_ONLY
class TargetPropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'TargetPropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.opengis.net/gml/3.2}AbstractFeature uses Python identifier AbstractFeature
    __AbstractFeature = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractFeature'), 'AbstractFeature', '__httpwww_opengis_netgml3_2_TargetPropertyType_httpwww_opengis_netgml3_2AbstractFeature', False)

    
    AbstractFeature = property(__AbstractFeature.value, __AbstractFeature.set, None, u'This abstract element serves as the head of a substitution group which may contain any elements whose content model is derived from gml:AbstractFeatureType.  This may be used as a variable in the construction of content models.  \ngml:AbstractFeature may be thought of as "anything that is a GML feature" and may be used to define variables or templates in which the value of a GML property is "any feature". This occurs in particular in a GML feature collection where the feature member properties contain one or multiple copies of gml:AbstractFeature respectively.')

    
    # Element {http://www.opengis.net/gml/3.2}AbstractGeometry uses Python identifier AbstractGeometry
    __AbstractGeometry = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractGeometry'), 'AbstractGeometry', '__httpwww_opengis_netgml3_2_TargetPropertyType_httpwww_opengis_netgml3_2AbstractGeometry', False)

    
    AbstractGeometry = property(__AbstractGeometry.value, __AbstractGeometry.set, None, u'The AbstractGeometry element is the abstract head of the substitution group for all geometry elements of GML. This includes pre-defined and user-defined geometry elements. Any geometry element shall be a direct or indirect extension/restriction of AbstractGeometryType and shall be directly or indirectly in the substitution group of AbstractGeometry.')

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_opengis_netgml3_2_TargetPropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_opengis_netgml3_2_TargetPropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.opengis.net/gml/3.2}remoteSchema uses Python identifier remoteSchema
    __remoteSchema = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'remoteSchema'), 'remoteSchema', '__httpwww_opengis_netgml3_2_TargetPropertyType_httpwww_opengis_netgml3_2remoteSchema', pyxb.binding.datatypes.anyURI)
    
    remoteSchema = property(__remoteSchema.value, __remoteSchema.set, None, u'')

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_opengis_netgml3_2_TargetPropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_opengis_netgml3_2_TargetPropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute owns uses Python identifier owns
    __owns = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'owns'), 'owns', '__httpwww_opengis_netgml3_2_TargetPropertyType_owns', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    owns = property(__owns.value, __owns.set, None, None)

    
    # Attribute nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'nilReason'), 'nilReason', '__httpwww_opengis_netgml3_2_TargetPropertyType_nilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_opengis_netgml3_2_TargetPropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_opengis_netgml3_2_TargetPropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_opengis_netgml3_2_TargetPropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)


    _ElementMap = {
        __AbstractFeature.name() : __AbstractFeature,
        __AbstractGeometry.name() : __AbstractGeometry
    }
    _AttributeMap = {
        __role.name() : __role,
        __arcrole.name() : __arcrole,
        __remoteSchema.name() : __remoteSchema,
        __actuate.name() : __actuate,
        __show.name() : __show,
        __owns.name() : __owns,
        __nilReason.name() : __nilReason,
        __href.name() : __href,
        __title.name() : __title,
        __type.name() : __type
    }
_Namespace_gml.addCategoryObject('typeBinding', u'TargetPropertyType', TargetPropertyType)


# Complex type MD_Georectified_PropertyType with content type ELEMENT_ONLY
class MD_Georectified_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_Georectified_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmd}MD_Georectified uses Python identifier MD_Georectified
    __MD_Georectified = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_Georectified'), 'MD_Georectified', '__httpwww_isotc211_org2005gmd_MD_Georectified_PropertyType_httpwww_isotc211_org2005gmdMD_Georectified', False)

    
    MD_Georectified = property(__MD_Georectified.value, __MD_Georectified.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_isotc211_org2005gmd_MD_Georectified_PropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_isotc211_org2005gmd_MD_Georectified_PropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_isotc211_org2005gmd_MD_Georectified_PropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmd_MD_Georectified_PropertyType_httpwww_isotc211_org2005gconilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute uuidref uses Python identifier uuidref
    __uuidref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uuidref'), 'uuidref', '__httpwww_isotc211_org2005gmd_MD_Georectified_PropertyType_uuidref', pyxb.binding.datatypes.string)
    
    uuidref = property(__uuidref.value, __uuidref.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_isotc211_org2005gmd_MD_Georectified_PropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_isotc211_org2005gmd_MD_Georectified_PropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_isotc211_org2005gmd_MD_Georectified_PropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_isotc211_org2005gmd_MD_Georectified_PropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)


    _ElementMap = {
        __MD_Georectified.name() : __MD_Georectified
    }
    _AttributeMap = {
        __type.name() : __type,
        __arcrole.name() : __arcrole,
        __role.name() : __role,
        __nilReason.name() : __nilReason,
        __uuidref.name() : __uuidref,
        __show.name() : __show,
        __href.name() : __href,
        __actuate.name() : __actuate,
        __title.name() : __title
    }
_Namespace_gmd.addCategoryObject('typeBinding', u'MD_Georectified_PropertyType', MD_Georectified_PropertyType)


# Complex type TimeTopologyComplexPropertyType with content type ELEMENT_ONLY
class TimeTopologyComplexPropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'TimeTopologyComplexPropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.opengis.net/gml/3.2}TimeTopologyComplex uses Python identifier TimeTopologyComplex
    __TimeTopologyComplex = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'TimeTopologyComplex'), 'TimeTopologyComplex', '__httpwww_opengis_netgml3_2_TimeTopologyComplexPropertyType_httpwww_opengis_netgml3_2TimeTopologyComplex', False)

    
    TimeTopologyComplex = property(__TimeTopologyComplex.value, __TimeTopologyComplex.set, None, u'A temporal topology complex shall be the connected acyclic directed graph composed of temporal topological primitives, i.e. time nodes and time edges. Because a time edge may not exist without two time nodes on its boundaries, static features have time edges from a temporal topology complex as the values of their temporal properties, regardless of explicit declarations.\nA temporal topology complex expresses a linear or a non-linear graph. A temporal linear graph, composed of a sequence of time edges, provides a lineage described only by "substitution" of feature instances or feature element values. A time node as the start or the end of the graph connects with at least one time edge. A time node other than the start and the end shall connect to at least two time edges: one of starting from the node, and another ending at the node.\nA temporal topological complex is a set of connected temporal topological primitives. The member primtives are indicated, either by reference or by value, using the primitive property.')

    
    # Attribute owns uses Python identifier owns
    __owns = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'owns'), 'owns', '__httpwww_opengis_netgml3_2_TimeTopologyComplexPropertyType_owns', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    owns = property(__owns.value, __owns.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_opengis_netgml3_2_TimeTopologyComplexPropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_opengis_netgml3_2_TimeTopologyComplexPropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_opengis_netgml3_2_TimeTopologyComplexPropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_opengis_netgml3_2_TimeTopologyComplexPropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.opengis.net/gml/3.2}remoteSchema uses Python identifier remoteSchema
    __remoteSchema = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'remoteSchema'), 'remoteSchema', '__httpwww_opengis_netgml3_2_TimeTopologyComplexPropertyType_httpwww_opengis_netgml3_2remoteSchema', pyxb.binding.datatypes.anyURI)
    
    remoteSchema = property(__remoteSchema.value, __remoteSchema.set, None, u'')

    
    # Attribute nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'nilReason'), 'nilReason', '__httpwww_opengis_netgml3_2_TimeTopologyComplexPropertyType_nilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_opengis_netgml3_2_TimeTopologyComplexPropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_opengis_netgml3_2_TimeTopologyComplexPropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_opengis_netgml3_2_TimeTopologyComplexPropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)


    _ElementMap = {
        __TimeTopologyComplex.name() : __TimeTopologyComplex
    }
    _AttributeMap = {
        __owns.name() : __owns,
        __show.name() : __show,
        __type.name() : __type,
        __role.name() : __role,
        __arcrole.name() : __arcrole,
        __remoteSchema.name() : __remoteSchema,
        __nilReason.name() : __nilReason,
        __title.name() : __title,
        __actuate.name() : __actuate,
        __href.name() : __href
    }
_Namespace_gml.addCategoryObject('typeBinding', u'TimeTopologyComplexPropertyType', TimeTopologyComplexPropertyType)


# Complex type AbstractMD_ContentInformation_Type with content type EMPTY
class AbstractMD_ContentInformation_Type (AbstractObject_Type):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = True
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'AbstractMD_ContentInformation_Type')
    # Base type is AbstractObject_Type
    
    # Attribute id inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type
    
    # Attribute uuid inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type

    _ElementMap = AbstractObject_Type._ElementMap.copy()
    _ElementMap.update({
        
    })
    _AttributeMap = AbstractObject_Type._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gmd.addCategoryObject('typeBinding', u'AbstractMD_ContentInformation_Type', AbstractMD_ContentInformation_Type)


# Complex type MD_CoverageDescription_Type with content type ELEMENT_ONLY
class MD_CoverageDescription_Type (AbstractMD_ContentInformation_Type):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_CoverageDescription_Type')
    # Base type is AbstractMD_ContentInformation_Type
    
    # Element {http://www.isotc211.org/2005/gmd}dimension uses Python identifier dimension
    __dimension = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'dimension'), 'dimension', '__httpwww_isotc211_org2005gmd_MD_CoverageDescription_Type_httpwww_isotc211_org2005gmddimension', True)

    
    dimension = property(__dimension.value, __dimension.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}attributeDescription uses Python identifier attributeDescription
    __attributeDescription = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'attributeDescription'), 'attributeDescription', '__httpwww_isotc211_org2005gmd_MD_CoverageDescription_Type_httpwww_isotc211_org2005gmdattributeDescription', False)

    
    attributeDescription = property(__attributeDescription.value, __attributeDescription.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}contentType uses Python identifier contentType
    __contentType = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'contentType'), 'contentType', '__httpwww_isotc211_org2005gmd_MD_CoverageDescription_Type_httpwww_isotc211_org2005gmdcontentType', False)

    
    contentType = property(__contentType.value, __contentType.set, None, None)

    
    # Attribute id inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type
    
    # Attribute uuid inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type

    _ElementMap = AbstractMD_ContentInformation_Type._ElementMap.copy()
    _ElementMap.update({
        __dimension.name() : __dimension,
        __attributeDescription.name() : __attributeDescription,
        __contentType.name() : __contentType
    })
    _AttributeMap = AbstractMD_ContentInformation_Type._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gmd.addCategoryObject('typeBinding', u'MD_CoverageDescription_Type', MD_CoverageDescription_Type)


# Complex type GeodeticDatumType with content type ELEMENT_ONLY
class GeodeticDatumType (AbstractDatumType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'GeodeticDatumType')
    # Base type is AbstractDatumType
    
    # Element scope ({http://www.opengis.net/gml/3.2}scope) inherited from {http://www.opengis.net/gml/3.2}AbstractDatumType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element anchorDefinition ({http://www.opengis.net/gml/3.2}anchorDefinition) inherited from {http://www.opengis.net/gml/3.2}AbstractDatumType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element realizationEpoch ({http://www.opengis.net/gml/3.2}realizationEpoch) inherited from {http://www.opengis.net/gml/3.2}AbstractDatumType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element {http://www.opengis.net/gml/3.2}primeMeridian uses Python identifier primeMeridian
    __primeMeridian = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'primeMeridian'), 'primeMeridian', '__httpwww_opengis_netgml3_2_GeodeticDatumType_httpwww_opengis_netgml3_2primeMeridian', False)

    
    primeMeridian = property(__primeMeridian.value, __primeMeridian.set, None, u'gml:primeMeridian is an association role to the prime meridian used by this geodetic datum.')

    
    # Element {http://www.opengis.net/gml/3.2}ellipsoid uses Python identifier ellipsoid
    __ellipsoid = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'ellipsoid'), 'ellipsoid', '__httpwww_opengis_netgml3_2_GeodeticDatumType_httpwww_opengis_netgml3_2ellipsoid', False)

    
    ellipsoid = property(__ellipsoid.value, __ellipsoid.set, None, u'gml:ellipsoid is an association role to the ellipsoid used by this geodetic datum.')

    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element domainOfValidity ({http://www.opengis.net/gml/3.2}domainOfValidity) inherited from {http://www.opengis.net/gml/3.2}AbstractDatumType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element remarks ({http://www.opengis.net/gml/3.2}remarks) inherited from {http://www.opengis.net/gml/3.2}DefinitionType
    
    # Attribute id_ inherited from {http://www.opengis.net/gml/3.2}DefinitionBaseType

    _ElementMap = AbstractDatumType._ElementMap.copy()
    _ElementMap.update({
        __primeMeridian.name() : __primeMeridian,
        __ellipsoid.name() : __ellipsoid
    })
    _AttributeMap = AbstractDatumType._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gml.addCategoryObject('typeBinding', u'GeodeticDatumType', GeodeticDatumType)


# Complex type TopoVolumePropertyType with content type ELEMENT_ONLY
class TopoVolumePropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'TopoVolumePropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.opengis.net/gml/3.2}TopoVolume uses Python identifier TopoVolume
    __TopoVolume = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'TopoVolume'), 'TopoVolume', '__httpwww_opengis_netgml3_2_TopoVolumePropertyType_httpwww_opengis_netgml3_2TopoVolume', False)

    
    TopoVolume = property(__TopoVolume.value, __TopoVolume.set, None, u'gml:TopoVolume represents a homogeneous topological expression, a set of directed topologic solids, which if realised are isomorphic to a geometric solid primitive. The intended use of gml:TopoVolume is to appear within a solid feature to express the structural and geometric relationships of this solid feature to other features via the shared solid definitions.')

    
    # Attribute owns uses Python identifier owns
    __owns = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'owns'), 'owns', '__httpwww_opengis_netgml3_2_TopoVolumePropertyType_owns', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    owns = property(__owns.value, __owns.set, None, None)


    _ElementMap = {
        __TopoVolume.name() : __TopoVolume
    }
    _AttributeMap = {
        __owns.name() : __owns
    }
_Namespace_gml.addCategoryObject('typeBinding', u'TopoVolumePropertyType', TopoVolumePropertyType)


# Complex type CurvePropertyType with content type ELEMENT_ONLY
class CurvePropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'CurvePropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.opengis.net/gml/3.2}AbstractCurve uses Python identifier AbstractCurve
    __AbstractCurve = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractCurve'), 'AbstractCurve', '__httpwww_opengis_netgml3_2_CurvePropertyType_httpwww_opengis_netgml3_2AbstractCurve', False)

    
    AbstractCurve = property(__AbstractCurve.value, __AbstractCurve.set, None, u'The AbstractCurve element is the abstract head of the substitution group for all (continuous) curve elements.')

    
    # Attribute owns uses Python identifier owns
    __owns = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'owns'), 'owns', '__httpwww_opengis_netgml3_2_CurvePropertyType_owns', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    owns = property(__owns.value, __owns.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_opengis_netgml3_2_CurvePropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.opengis.net/gml/3.2}remoteSchema uses Python identifier remoteSchema
    __remoteSchema = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'remoteSchema'), 'remoteSchema', '__httpwww_opengis_netgml3_2_CurvePropertyType_httpwww_opengis_netgml3_2remoteSchema', pyxb.binding.datatypes.anyURI)
    
    remoteSchema = property(__remoteSchema.value, __remoteSchema.set, None, u'')

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_opengis_netgml3_2_CurvePropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_opengis_netgml3_2_CurvePropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'nilReason'), 'nilReason', '__httpwww_opengis_netgml3_2_CurvePropertyType_nilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_opengis_netgml3_2_CurvePropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_opengis_netgml3_2_CurvePropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_opengis_netgml3_2_CurvePropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_opengis_netgml3_2_CurvePropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)


    _ElementMap = {
        __AbstractCurve.name() : __AbstractCurve
    }
    _AttributeMap = {
        __owns.name() : __owns,
        __arcrole.name() : __arcrole,
        __remoteSchema.name() : __remoteSchema,
        __role.name() : __role,
        __show.name() : __show,
        __nilReason.name() : __nilReason,
        __type.name() : __type,
        __href.name() : __href,
        __actuate.name() : __actuate,
        __title.name() : __title
    }
_Namespace_gml.addCategoryObject('typeBinding', u'CurvePropertyType', CurvePropertyType)


# Complex type MD_ImageDescription_Type with content type ELEMENT_ONLY
class MD_ImageDescription_Type (MD_CoverageDescription_Type):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_ImageDescription_Type')
    # Base type is MD_CoverageDescription_Type
    
    # Element {http://www.isotc211.org/2005/gmd}illuminationAzimuthAngle uses Python identifier illuminationAzimuthAngle
    __illuminationAzimuthAngle = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'illuminationAzimuthAngle'), 'illuminationAzimuthAngle', '__httpwww_isotc211_org2005gmd_MD_ImageDescription_Type_httpwww_isotc211_org2005gmdilluminationAzimuthAngle', False)

    
    illuminationAzimuthAngle = property(__illuminationAzimuthAngle.value, __illuminationAzimuthAngle.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}lensDistortionInformationAvailability uses Python identifier lensDistortionInformationAvailability
    __lensDistortionInformationAvailability = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'lensDistortionInformationAvailability'), 'lensDistortionInformationAvailability', '__httpwww_isotc211_org2005gmd_MD_ImageDescription_Type_httpwww_isotc211_org2005gmdlensDistortionInformationAvailability', False)

    
    lensDistortionInformationAvailability = property(__lensDistortionInformationAvailability.value, __lensDistortionInformationAvailability.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}imagingCondition uses Python identifier imagingCondition
    __imagingCondition = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'imagingCondition'), 'imagingCondition', '__httpwww_isotc211_org2005gmd_MD_ImageDescription_Type_httpwww_isotc211_org2005gmdimagingCondition', False)

    
    imagingCondition = property(__imagingCondition.value, __imagingCondition.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}cameraCalibrationInformationAvailability uses Python identifier cameraCalibrationInformationAvailability
    __cameraCalibrationInformationAvailability = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'cameraCalibrationInformationAvailability'), 'cameraCalibrationInformationAvailability', '__httpwww_isotc211_org2005gmd_MD_ImageDescription_Type_httpwww_isotc211_org2005gmdcameraCalibrationInformationAvailability', False)

    
    cameraCalibrationInformationAvailability = property(__cameraCalibrationInformationAvailability.value, __cameraCalibrationInformationAvailability.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}imageQualityCode uses Python identifier imageQualityCode
    __imageQualityCode = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'imageQualityCode'), 'imageQualityCode', '__httpwww_isotc211_org2005gmd_MD_ImageDescription_Type_httpwww_isotc211_org2005gmdimageQualityCode', False)

    
    imageQualityCode = property(__imageQualityCode.value, __imageQualityCode.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}cloudCoverPercentage uses Python identifier cloudCoverPercentage
    __cloudCoverPercentage = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'cloudCoverPercentage'), 'cloudCoverPercentage', '__httpwww_isotc211_org2005gmd_MD_ImageDescription_Type_httpwww_isotc211_org2005gmdcloudCoverPercentage', False)

    
    cloudCoverPercentage = property(__cloudCoverPercentage.value, __cloudCoverPercentage.set, None, None)

    
    # Element contentType ({http://www.isotc211.org/2005/gmd}contentType) inherited from {http://www.isotc211.org/2005/gmd}MD_CoverageDescription_Type
    
    # Element attributeDescription ({http://www.isotc211.org/2005/gmd}attributeDescription) inherited from {http://www.isotc211.org/2005/gmd}MD_CoverageDescription_Type
    
    # Element {http://www.isotc211.org/2005/gmd}radiometricCalibrationDataAvailability uses Python identifier radiometricCalibrationDataAvailability
    __radiometricCalibrationDataAvailability = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'radiometricCalibrationDataAvailability'), 'radiometricCalibrationDataAvailability', '__httpwww_isotc211_org2005gmd_MD_ImageDescription_Type_httpwww_isotc211_org2005gmdradiometricCalibrationDataAvailability', False)

    
    radiometricCalibrationDataAvailability = property(__radiometricCalibrationDataAvailability.value, __radiometricCalibrationDataAvailability.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}compressionGenerationQuantity uses Python identifier compressionGenerationQuantity
    __compressionGenerationQuantity = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'compressionGenerationQuantity'), 'compressionGenerationQuantity', '__httpwww_isotc211_org2005gmd_MD_ImageDescription_Type_httpwww_isotc211_org2005gmdcompressionGenerationQuantity', False)

    
    compressionGenerationQuantity = property(__compressionGenerationQuantity.value, __compressionGenerationQuantity.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}processingLevelCode uses Python identifier processingLevelCode
    __processingLevelCode = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'processingLevelCode'), 'processingLevelCode', '__httpwww_isotc211_org2005gmd_MD_ImageDescription_Type_httpwww_isotc211_org2005gmdprocessingLevelCode', False)

    
    processingLevelCode = property(__processingLevelCode.value, __processingLevelCode.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}triangulationIndicator uses Python identifier triangulationIndicator
    __triangulationIndicator = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'triangulationIndicator'), 'triangulationIndicator', '__httpwww_isotc211_org2005gmd_MD_ImageDescription_Type_httpwww_isotc211_org2005gmdtriangulationIndicator', False)

    
    triangulationIndicator = property(__triangulationIndicator.value, __triangulationIndicator.set, None, None)

    
    # Element dimension ({http://www.isotc211.org/2005/gmd}dimension) inherited from {http://www.isotc211.org/2005/gmd}MD_CoverageDescription_Type
    
    # Element {http://www.isotc211.org/2005/gmd}filmDistortionInformationAvailability uses Python identifier filmDistortionInformationAvailability
    __filmDistortionInformationAvailability = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'filmDistortionInformationAvailability'), 'filmDistortionInformationAvailability', '__httpwww_isotc211_org2005gmd_MD_ImageDescription_Type_httpwww_isotc211_org2005gmdfilmDistortionInformationAvailability', False)

    
    filmDistortionInformationAvailability = property(__filmDistortionInformationAvailability.value, __filmDistortionInformationAvailability.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}illuminationElevationAngle uses Python identifier illuminationElevationAngle
    __illuminationElevationAngle = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'illuminationElevationAngle'), 'illuminationElevationAngle', '__httpwww_isotc211_org2005gmd_MD_ImageDescription_Type_httpwww_isotc211_org2005gmdilluminationElevationAngle', False)

    
    illuminationElevationAngle = property(__illuminationElevationAngle.value, __illuminationElevationAngle.set, None, None)

    
    # Attribute id inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type
    
    # Attribute uuid inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type

    _ElementMap = MD_CoverageDescription_Type._ElementMap.copy()
    _ElementMap.update({
        __illuminationAzimuthAngle.name() : __illuminationAzimuthAngle,
        __lensDistortionInformationAvailability.name() : __lensDistortionInformationAvailability,
        __imagingCondition.name() : __imagingCondition,
        __cameraCalibrationInformationAvailability.name() : __cameraCalibrationInformationAvailability,
        __imageQualityCode.name() : __imageQualityCode,
        __cloudCoverPercentage.name() : __cloudCoverPercentage,
        __radiometricCalibrationDataAvailability.name() : __radiometricCalibrationDataAvailability,
        __compressionGenerationQuantity.name() : __compressionGenerationQuantity,
        __processingLevelCode.name() : __processingLevelCode,
        __triangulationIndicator.name() : __triangulationIndicator,
        __filmDistortionInformationAvailability.name() : __filmDistortionInformationAvailability,
        __illuminationElevationAngle.name() : __illuminationElevationAngle
    })
    _AttributeMap = MD_CoverageDescription_Type._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gmd.addCategoryObject('typeBinding', u'MD_ImageDescription_Type', MD_ImageDescription_Type)


# Complex type TimeInstantPropertyType with content type ELEMENT_ONLY
class TimeInstantPropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'TimeInstantPropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.opengis.net/gml/3.2}TimeInstant uses Python identifier TimeInstant
    __TimeInstant = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'TimeInstant'), 'TimeInstant', '__httpwww_opengis_netgml3_2_TimeInstantPropertyType_httpwww_opengis_netgml3_2TimeInstant', False)

    
    TimeInstant = property(__TimeInstant.value, __TimeInstant.set, None, u'gml:TimeInstant acts as a zero-dimensional geometric primitive that represents an identifiable position in time.')

    
    # Attribute owns uses Python identifier owns
    __owns = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'owns'), 'owns', '__httpwww_opengis_netgml3_2_TimeInstantPropertyType_owns', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    owns = property(__owns.value, __owns.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_opengis_netgml3_2_TimeInstantPropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_opengis_netgml3_2_TimeInstantPropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'nilReason'), 'nilReason', '__httpwww_opengis_netgml3_2_TimeInstantPropertyType_nilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_opengis_netgml3_2_TimeInstantPropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_opengis_netgml3_2_TimeInstantPropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_opengis_netgml3_2_TimeInstantPropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_opengis_netgml3_2_TimeInstantPropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_opengis_netgml3_2_TimeInstantPropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.opengis.net/gml/3.2}remoteSchema uses Python identifier remoteSchema
    __remoteSchema = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'remoteSchema'), 'remoteSchema', '__httpwww_opengis_netgml3_2_TimeInstantPropertyType_httpwww_opengis_netgml3_2remoteSchema', pyxb.binding.datatypes.anyURI)
    
    remoteSchema = property(__remoteSchema.value, __remoteSchema.set, None, u'')


    _ElementMap = {
        __TimeInstant.name() : __TimeInstant
    }
    _AttributeMap = {
        __owns.name() : __owns,
        __href.name() : __href,
        __type.name() : __type,
        __nilReason.name() : __nilReason,
        __role.name() : __role,
        __arcrole.name() : __arcrole,
        __show.name() : __show,
        __actuate.name() : __actuate,
        __title.name() : __title,
        __remoteSchema.name() : __remoteSchema
    }
_Namespace_gml.addCategoryObject('typeBinding', u'TimeInstantPropertyType', TimeInstantPropertyType)


# Complex type DQ_QuantitativeResult_Type with content type ELEMENT_ONLY
class DQ_QuantitativeResult_Type (AbstractDQ_Result_Type):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'DQ_QuantitativeResult_Type')
    # Base type is AbstractDQ_Result_Type
    
    # Element {http://www.isotc211.org/2005/gmd}value uses Python identifier value_
    __value = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'value'), 'value_', '__httpwww_isotc211_org2005gmd_DQ_QuantitativeResult_Type_httpwww_isotc211_org2005gmdvalue', True)

    
    value_ = property(__value.value, __value.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}valueType uses Python identifier valueType
    __valueType = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'valueType'), 'valueType', '__httpwww_isotc211_org2005gmd_DQ_QuantitativeResult_Type_httpwww_isotc211_org2005gmdvalueType', False)

    
    valueType = property(__valueType.value, __valueType.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}errorStatistic uses Python identifier errorStatistic
    __errorStatistic = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'errorStatistic'), 'errorStatistic', '__httpwww_isotc211_org2005gmd_DQ_QuantitativeResult_Type_httpwww_isotc211_org2005gmderrorStatistic', False)

    
    errorStatistic = property(__errorStatistic.value, __errorStatistic.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}valueUnit uses Python identifier valueUnit
    __valueUnit = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'valueUnit'), 'valueUnit', '__httpwww_isotc211_org2005gmd_DQ_QuantitativeResult_Type_httpwww_isotc211_org2005gmdvalueUnit', False)

    
    valueUnit = property(__valueUnit.value, __valueUnit.set, None, None)

    
    # Attribute id inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type
    
    # Attribute uuid inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type

    _ElementMap = AbstractDQ_Result_Type._ElementMap.copy()
    _ElementMap.update({
        __value.name() : __value,
        __valueType.name() : __valueType,
        __errorStatistic.name() : __errorStatistic,
        __valueUnit.name() : __valueUnit
    })
    _AttributeMap = AbstractDQ_Result_Type._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gmd.addCategoryObject('typeBinding', u'DQ_QuantitativeResult_Type', DQ_QuantitativeResult_Type)


# Complex type CartesianCSPropertyType with content type ELEMENT_ONLY
class CartesianCSPropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'CartesianCSPropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.opengis.net/gml/3.2}CartesianCS uses Python identifier CartesianCS
    __CartesianCS = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'CartesianCS'), 'CartesianCS', '__httpwww_opengis_netgml3_2_CartesianCSPropertyType_httpwww_opengis_netgml3_2CartesianCS', False)

    
    CartesianCS = property(__CartesianCS.value, __CartesianCS.set, None, u'gml:CartesianCS is a 1-, 2-, or 3-dimensional coordinate system. In the 1-dimensional case, it contains a single straight coordinate axis. In the 2- and 3-dimensional cases gives the position of points relative to orthogonal straight axes. In the multi-dimensional case, all axes shall have the same length unit of measure. A CartesianCS shall have one, two, or three gml:axis property elements.')

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_opengis_netgml3_2_CartesianCSPropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_opengis_netgml3_2_CartesianCSPropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_opengis_netgml3_2_CartesianCSPropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.opengis.net/gml/3.2}remoteSchema uses Python identifier remoteSchema
    __remoteSchema = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'remoteSchema'), 'remoteSchema', '__httpwww_opengis_netgml3_2_CartesianCSPropertyType_httpwww_opengis_netgml3_2remoteSchema', pyxb.binding.datatypes.anyURI)
    
    remoteSchema = property(__remoteSchema.value, __remoteSchema.set, None, u'')

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_opengis_netgml3_2_CartesianCSPropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'nilReason'), 'nilReason', '__httpwww_opengis_netgml3_2_CartesianCSPropertyType_nilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_opengis_netgml3_2_CartesianCSPropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_opengis_netgml3_2_CartesianCSPropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_opengis_netgml3_2_CartesianCSPropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)


    _ElementMap = {
        __CartesianCS.name() : __CartesianCS
    }
    _AttributeMap = {
        __title.name() : __title,
        __role.name() : __role,
        __arcrole.name() : __arcrole,
        __remoteSchema.name() : __remoteSchema,
        __show.name() : __show,
        __nilReason.name() : __nilReason,
        __actuate.name() : __actuate,
        __href.name() : __href,
        __type.name() : __type
    }
_Namespace_gml.addCategoryObject('typeBinding', u'CartesianCSPropertyType', CartesianCSPropertyType)


# Complex type AbstractMetaDataType with content type MIXED
class AbstractMetaDataType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_MIXED
    _Abstract = True
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractMetaDataType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute {http://www.opengis.net/gml/3.2}id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'id'), 'id', '__httpwww_opengis_netgml3_2_AbstractMetaDataType_httpwww_opengis_netgml3_2id', pyxb.binding.datatypes.ID)
    
    id = property(__id.value, __id.set, None, u'The attribute gml:id supports provision of a handle for the XML element representing a GML Object. Its use is mandatory for all GML objects. It is of XML type ID, so is constrained to be unique in the XML document within which it occurs.')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __id.name() : __id
    }
_Namespace_gml.addCategoryObject('typeBinding', u'AbstractMetaDataType', AbstractMetaDataType)


# Complex type GenericMetaDataType with content type MIXED
class GenericMetaDataType (AbstractMetaDataType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_MIXED
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'GenericMetaDataType')
    # Base type is AbstractMetaDataType
    
    # Attribute id inherited from {http://www.opengis.net/gml/3.2}AbstractMetaDataType
    _HasWildcardElement = True

    _ElementMap = AbstractMetaDataType._ElementMap.copy()
    _ElementMap.update({
        
    })
    _AttributeMap = AbstractMetaDataType._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gml.addCategoryObject('typeBinding', u'GenericMetaDataType', GenericMetaDataType)


# Complex type PT_Locale_Type with content type ELEMENT_ONLY
class PT_Locale_Type (AbstractObject_Type):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'PT_Locale_Type')
    # Base type is AbstractObject_Type
    
    # Element {http://www.isotc211.org/2005/gmd}characterEncoding uses Python identifier characterEncoding
    __characterEncoding = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'characterEncoding'), 'characterEncoding', '__httpwww_isotc211_org2005gmd_PT_Locale_Type_httpwww_isotc211_org2005gmdcharacterEncoding', False)

    
    characterEncoding = property(__characterEncoding.value, __characterEncoding.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}languageCode uses Python identifier languageCode
    __languageCode = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'languageCode'), 'languageCode', '__httpwww_isotc211_org2005gmd_PT_Locale_Type_httpwww_isotc211_org2005gmdlanguageCode', False)

    
    languageCode = property(__languageCode.value, __languageCode.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}country uses Python identifier country
    __country = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'country'), 'country', '__httpwww_isotc211_org2005gmd_PT_Locale_Type_httpwww_isotc211_org2005gmdcountry', False)

    
    country = property(__country.value, __country.set, None, None)

    
    # Attribute id inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type
    
    # Attribute uuid inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type

    _ElementMap = AbstractObject_Type._ElementMap.copy()
    _ElementMap.update({
        __characterEncoding.name() : __characterEncoding,
        __languageCode.name() : __languageCode,
        __country.name() : __country
    })
    _AttributeMap = AbstractObject_Type._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gmd.addCategoryObject('typeBinding', u'PT_Locale_Type', PT_Locale_Type)


# Complex type CylindricalCSType with content type ELEMENT_ONLY
class CylindricalCSType (AbstractCoordinateSystemType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'CylindricalCSType')
    # Base type is AbstractCoordinateSystemType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element axis ({http://www.opengis.net/gml/3.2}axis) inherited from {http://www.opengis.net/gml/3.2}AbstractCoordinateSystemType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element remarks ({http://www.opengis.net/gml/3.2}remarks) inherited from {http://www.opengis.net/gml/3.2}DefinitionType
    
    # Attribute aggregationType inherited from {http://www.opengis.net/gml/3.2}AbstractCoordinateSystemType
    
    # Attribute id_ inherited from {http://www.opengis.net/gml/3.2}DefinitionBaseType

    _ElementMap = AbstractCoordinateSystemType._ElementMap.copy()
    _ElementMap.update({
        
    })
    _AttributeMap = AbstractCoordinateSystemType._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gml.addCategoryObject('typeBinding', u'CylindricalCSType', CylindricalCSType)


# Complex type AbstractParametricCurveSurfaceType with content type EMPTY
class AbstractParametricCurveSurfaceType (AbstractSurfacePatchType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = True
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractParametricCurveSurfaceType')
    # Base type is AbstractSurfacePatchType
    
    # Attribute aggregationType uses Python identifier aggregationType
    __aggregationType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'aggregationType'), 'aggregationType', '__httpwww_opengis_netgml3_2_AbstractParametricCurveSurfaceType_aggregationType', AggregationType)
    
    aggregationType = property(__aggregationType.value, __aggregationType.set, None, None)


    _ElementMap = AbstractSurfacePatchType._ElementMap.copy()
    _ElementMap.update({
        
    })
    _AttributeMap = AbstractSurfacePatchType._AttributeMap.copy()
    _AttributeMap.update({
        __aggregationType.name() : __aggregationType
    })
_Namespace_gml.addCategoryObject('typeBinding', u'AbstractParametricCurveSurfaceType', AbstractParametricCurveSurfaceType)


# Complex type AbstractGriddedSurfaceType with content type ELEMENT_ONLY
class AbstractGriddedSurfaceType (AbstractParametricCurveSurfaceType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = True
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractGriddedSurfaceType')
    # Base type is AbstractParametricCurveSurfaceType
    
    # Element {http://www.opengis.net/gml/3.2}rows uses Python identifier rows
    __rows = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'rows'), 'rows', '__httpwww_opengis_netgml3_2_AbstractGriddedSurfaceType_httpwww_opengis_netgml3_2rows', False)

    
    rows = property(__rows.value, __rows.set, None, None)

    
    # Attribute aggregationType inherited from {http://www.opengis.net/gml/3.2}AbstractParametricCurveSurfaceType
    
    # Attribute rows uses Python identifier rows_
    __rows_ = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'rows'), 'rows_', '__httpwww_opengis_netgml3_2_AbstractGriddedSurfaceType_rows', pyxb.binding.datatypes.integer)
    
    rows_ = property(__rows_.value, __rows_.set, None, None)

    
    # Attribute columns uses Python identifier columns
    __columns = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'columns'), 'columns', '__httpwww_opengis_netgml3_2_AbstractGriddedSurfaceType_columns', pyxb.binding.datatypes.integer)
    
    columns = property(__columns.value, __columns.set, None, None)


    _ElementMap = AbstractParametricCurveSurfaceType._ElementMap.copy()
    _ElementMap.update({
        __rows.name() : __rows
    })
    _AttributeMap = AbstractParametricCurveSurfaceType._AttributeMap.copy()
    _AttributeMap.update({
        __rows_.name() : __rows_,
        __columns.name() : __columns
    })
_Namespace_gml.addCategoryObject('typeBinding', u'AbstractGriddedSurfaceType', AbstractGriddedSurfaceType)


# Complex type SphereType with content type ELEMENT_ONLY
class SphereType (AbstractGriddedSurfaceType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'SphereType')
    # Base type is AbstractGriddedSurfaceType
    
    # Element rows ({http://www.opengis.net/gml/3.2}rows) inherited from {http://www.opengis.net/gml/3.2}AbstractGriddedSurfaceType
    
    # Attribute aggregationType inherited from {http://www.opengis.net/gml/3.2}AbstractParametricCurveSurfaceType
    
    # Attribute horizontalCurveType uses Python identifier horizontalCurveType
    __horizontalCurveType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'horizontalCurveType'), 'horizontalCurveType', '__httpwww_opengis_netgml3_2_SphereType_horizontalCurveType', CurveInterpolationType, fixed=True, unicode_default=u'circularArc3Points')
    
    horizontalCurveType = property(__horizontalCurveType.value, __horizontalCurveType.set, None, None)

    
    # Attribute columns inherited from {http://www.opengis.net/gml/3.2}AbstractGriddedSurfaceType
    
    # Attribute verticalCurveType uses Python identifier verticalCurveType
    __verticalCurveType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'verticalCurveType'), 'verticalCurveType', '__httpwww_opengis_netgml3_2_SphereType_verticalCurveType', CurveInterpolationType, fixed=True, unicode_default=u'circularArc3Points')
    
    verticalCurveType = property(__verticalCurveType.value, __verticalCurveType.set, None, None)

    
    # Attribute rows_ inherited from {http://www.opengis.net/gml/3.2}AbstractGriddedSurfaceType

    _ElementMap = AbstractGriddedSurfaceType._ElementMap.copy()
    _ElementMap.update({
        
    })
    _AttributeMap = AbstractGriddedSurfaceType._AttributeMap.copy()
    _AttributeMap.update({
        __horizontalCurveType.name() : __horizontalCurveType,
        __verticalCurveType.name() : __verticalCurveType
    })
_Namespace_gml.addCategoryObject('typeBinding', u'SphereType', SphereType)


# Complex type RS_Identifier_PropertyType with content type ELEMENT_ONLY
class RS_Identifier_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'RS_Identifier_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmd}RS_Identifier uses Python identifier RS_Identifier
    __RS_Identifier = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'RS_Identifier'), 'RS_Identifier', '__httpwww_isotc211_org2005gmd_RS_Identifier_PropertyType_httpwww_isotc211_org2005gmdRS_Identifier', False)

    
    RS_Identifier = property(__RS_Identifier.value, __RS_Identifier.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_isotc211_org2005gmd_RS_Identifier_PropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_isotc211_org2005gmd_RS_Identifier_PropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmd_RS_Identifier_PropertyType_httpwww_isotc211_org2005gconilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_isotc211_org2005gmd_RS_Identifier_PropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_isotc211_org2005gmd_RS_Identifier_PropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute uuidref uses Python identifier uuidref
    __uuidref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uuidref'), 'uuidref', '__httpwww_isotc211_org2005gmd_RS_Identifier_PropertyType_uuidref', pyxb.binding.datatypes.string)
    
    uuidref = property(__uuidref.value, __uuidref.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_isotc211_org2005gmd_RS_Identifier_PropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_isotc211_org2005gmd_RS_Identifier_PropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_isotc211_org2005gmd_RS_Identifier_PropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)


    _ElementMap = {
        __RS_Identifier.name() : __RS_Identifier
    }
    _AttributeMap = {
        __type.name() : __type,
        __href.name() : __href,
        __nilReason.name() : __nilReason,
        __title.name() : __title,
        __show.name() : __show,
        __uuidref.name() : __uuidref,
        __actuate.name() : __actuate,
        __role.name() : __role,
        __arcrole.name() : __arcrole
    }
_Namespace_gmd.addCategoryObject('typeBinding', u'RS_Identifier_PropertyType', RS_Identifier_PropertyType)


# Complex type MD_ClassificationCode_PropertyType with content type ELEMENT_ONLY
class MD_ClassificationCode_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_ClassificationCode_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmd}MD_ClassificationCode uses Python identifier MD_ClassificationCode
    __MD_ClassificationCode = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_ClassificationCode'), 'MD_ClassificationCode', '__httpwww_isotc211_org2005gmd_MD_ClassificationCode_PropertyType_httpwww_isotc211_org2005gmdMD_ClassificationCode', False)

    
    MD_ClassificationCode = property(__MD_ClassificationCode.value, __MD_ClassificationCode.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmd_MD_ClassificationCode_PropertyType_httpwww_isotc211_org2005gconilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)


    _ElementMap = {
        __MD_ClassificationCode.name() : __MD_ClassificationCode
    }
    _AttributeMap = {
        __nilReason.name() : __nilReason
    }
_Namespace_gmd.addCategoryObject('typeBinding', u'MD_ClassificationCode_PropertyType', MD_ClassificationCode_PropertyType)


# Complex type MD_BrowseGraphic_Type with content type ELEMENT_ONLY
class MD_BrowseGraphic_Type (AbstractObject_Type):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_BrowseGraphic_Type')
    # Base type is AbstractObject_Type
    
    # Element {http://www.isotc211.org/2005/gmd}fileType uses Python identifier fileType
    __fileType = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'fileType'), 'fileType', '__httpwww_isotc211_org2005gmd_MD_BrowseGraphic_Type_httpwww_isotc211_org2005gmdfileType', False)

    
    fileType = property(__fileType.value, __fileType.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}fileName uses Python identifier fileName
    __fileName = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'fileName'), 'fileName', '__httpwww_isotc211_org2005gmd_MD_BrowseGraphic_Type_httpwww_isotc211_org2005gmdfileName', False)

    
    fileName = property(__fileName.value, __fileName.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}fileDescription uses Python identifier fileDescription
    __fileDescription = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'fileDescription'), 'fileDescription', '__httpwww_isotc211_org2005gmd_MD_BrowseGraphic_Type_httpwww_isotc211_org2005gmdfileDescription', False)

    
    fileDescription = property(__fileDescription.value, __fileDescription.set, None, None)

    
    # Attribute id inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type
    
    # Attribute uuid inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type

    _ElementMap = AbstractObject_Type._ElementMap.copy()
    _ElementMap.update({
        __fileType.name() : __fileType,
        __fileName.name() : __fileName,
        __fileDescription.name() : __fileDescription
    })
    _AttributeMap = AbstractObject_Type._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gmd.addCategoryObject('typeBinding', u'MD_BrowseGraphic_Type', MD_BrowseGraphic_Type)


# Complex type MD_Identifier_Type with content type ELEMENT_ONLY
class MD_Identifier_Type (AbstractObject_Type):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_Identifier_Type')
    # Base type is AbstractObject_Type
    
    # Element {http://www.isotc211.org/2005/gmd}code uses Python identifier code
    __code = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'code'), 'code', '__httpwww_isotc211_org2005gmd_MD_Identifier_Type_httpwww_isotc211_org2005gmdcode', False)

    
    code = property(__code.value, __code.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}authority uses Python identifier authority
    __authority = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'authority'), 'authority', '__httpwww_isotc211_org2005gmd_MD_Identifier_Type_httpwww_isotc211_org2005gmdauthority', False)

    
    authority = property(__authority.value, __authority.set, None, None)

    
    # Attribute id inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type
    
    # Attribute uuid inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type

    _ElementMap = AbstractObject_Type._ElementMap.copy()
    _ElementMap.update({
        __code.name() : __code,
        __authority.name() : __authority
    })
    _AttributeMap = AbstractObject_Type._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gmd.addCategoryObject('typeBinding', u'MD_Identifier_Type', MD_Identifier_Type)


# Complex type RS_Identifier_Type with content type ELEMENT_ONLY
class RS_Identifier_Type (MD_Identifier_Type):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'RS_Identifier_Type')
    # Base type is MD_Identifier_Type
    
    # Element {http://www.isotc211.org/2005/gmd}version uses Python identifier version
    __version = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'version'), 'version', '__httpwww_isotc211_org2005gmd_RS_Identifier_Type_httpwww_isotc211_org2005gmdversion', False)

    
    version = property(__version.value, __version.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}codeSpace uses Python identifier codeSpace
    __codeSpace = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'codeSpace'), 'codeSpace', '__httpwww_isotc211_org2005gmd_RS_Identifier_Type_httpwww_isotc211_org2005gmdcodeSpace', False)

    
    codeSpace = property(__codeSpace.value, __codeSpace.set, None, None)

    
    # Element authority ({http://www.isotc211.org/2005/gmd}authority) inherited from {http://www.isotc211.org/2005/gmd}MD_Identifier_Type
    
    # Element code ({http://www.isotc211.org/2005/gmd}code) inherited from {http://www.isotc211.org/2005/gmd}MD_Identifier_Type
    
    # Attribute id inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type
    
    # Attribute uuid inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type

    _ElementMap = MD_Identifier_Type._ElementMap.copy()
    _ElementMap.update({
        __version.name() : __version,
        __codeSpace.name() : __codeSpace
    })
    _AttributeMap = MD_Identifier_Type._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gmd.addCategoryObject('typeBinding', u'RS_Identifier_Type', RS_Identifier_Type)


# Complex type DQ_ConformanceResult_PropertyType with content type ELEMENT_ONLY
class DQ_ConformanceResult_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'DQ_ConformanceResult_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmd}DQ_ConformanceResult uses Python identifier DQ_ConformanceResult
    __DQ_ConformanceResult = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'DQ_ConformanceResult'), 'DQ_ConformanceResult', '__httpwww_isotc211_org2005gmd_DQ_ConformanceResult_PropertyType_httpwww_isotc211_org2005gmdDQ_ConformanceResult', False)

    
    DQ_ConformanceResult = property(__DQ_ConformanceResult.value, __DQ_ConformanceResult.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_isotc211_org2005gmd_DQ_ConformanceResult_PropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_isotc211_org2005gmd_DQ_ConformanceResult_PropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_isotc211_org2005gmd_DQ_ConformanceResult_PropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_isotc211_org2005gmd_DQ_ConformanceResult_PropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute uuidref uses Python identifier uuidref
    __uuidref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uuidref'), 'uuidref', '__httpwww_isotc211_org2005gmd_DQ_ConformanceResult_PropertyType_uuidref', pyxb.binding.datatypes.string)
    
    uuidref = property(__uuidref.value, __uuidref.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmd_DQ_ConformanceResult_PropertyType_httpwww_isotc211_org2005gconilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_isotc211_org2005gmd_DQ_ConformanceResult_PropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_isotc211_org2005gmd_DQ_ConformanceResult_PropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_isotc211_org2005gmd_DQ_ConformanceResult_PropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")


    _ElementMap = {
        __DQ_ConformanceResult.name() : __DQ_ConformanceResult
    }
    _AttributeMap = {
        __href.name() : __href,
        __role.name() : __role,
        __type.name() : __type,
        __arcrole.name() : __arcrole,
        __uuidref.name() : __uuidref,
        __nilReason.name() : __nilReason,
        __title.name() : __title,
        __actuate.name() : __actuate,
        __show.name() : __show
    }
_Namespace_gmd.addCategoryObject('typeBinding', u'DQ_ConformanceResult_PropertyType', DQ_ConformanceResult_PropertyType)


# Complex type MultiSolidType with content type ELEMENT_ONLY
class MultiSolidType (AbstractGeometricAggregateType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'MultiSolidType')
    # Base type is AbstractGeometricAggregateType
    
    # Element {http://www.opengis.net/gml/3.2}solidMember uses Python identifier solidMember
    __solidMember = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'solidMember'), 'solidMember', '__httpwww_opengis_netgml3_2_MultiSolidType_httpwww_opengis_netgml3_2solidMember', True)

    
    solidMember = property(__solidMember.value, __solidMember.set, None, u'This property element either references a solid via the XLink-attributes or contains the solid element. A solid element is any element, which is substitutable for gml:AbstractSolid.')

    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element {http://www.opengis.net/gml/3.2}solidMembers uses Python identifier solidMembers
    __solidMembers = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'solidMembers'), 'solidMembers', '__httpwww_opengis_netgml3_2_MultiSolidType_httpwww_opengis_netgml3_2solidMembers', False)

    
    solidMembers = property(__solidMembers.value, __solidMembers.set, None, u'This property element contains a list of solids. The order of the elements is significant and shall be preserved when processing the array.')

    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Attribute uomLabels inherited from {http://www.opengis.net/gml/3.2}AbstractGeometryType
    
    # Attribute aggregationType inherited from {http://www.opengis.net/gml/3.2}AbstractGeometricAggregateType
    
    # Attribute srsName inherited from {http://www.opengis.net/gml/3.2}AbstractGeometryType
    
    # Attribute id inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Attribute srsDimension inherited from {http://www.opengis.net/gml/3.2}AbstractGeometryType
    
    # Attribute axisLabels inherited from {http://www.opengis.net/gml/3.2}AbstractGeometryType

    _ElementMap = AbstractGeometricAggregateType._ElementMap.copy()
    _ElementMap.update({
        __solidMember.name() : __solidMember,
        __solidMembers.name() : __solidMembers
    })
    _AttributeMap = AbstractGeometricAggregateType._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gml.addCategoryObject('typeBinding', u'MultiSolidType', MultiSolidType)


# Complex type ArcStringByBulgeType with content type ELEMENT_ONLY
class ArcStringByBulgeType (AbstractCurveSegmentType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'ArcStringByBulgeType')
    # Base type is AbstractCurveSegmentType
    
    # Element {http://www.opengis.net/gml/3.2}pointRep uses Python identifier pointRep
    __pointRep = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'pointRep'), 'pointRep', '__httpwww_opengis_netgml3_2_ArcStringByBulgeType_httpwww_opengis_netgml3_2pointRep', True)

    
    pointRep = property(__pointRep.value, __pointRep.set, None, u'')

    
    # Element {http://www.opengis.net/gml/3.2}posList uses Python identifier posList
    __posList = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'posList'), 'posList', '__httpwww_opengis_netgml3_2_ArcStringByBulgeType_httpwww_opengis_netgml3_2posList', False)

    
    posList = property(__posList.value, __posList.set, None, None)

    
    # Element {http://www.opengis.net/gml/3.2}coordinates uses Python identifier coordinates
    __coordinates = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'coordinates'), 'coordinates', '__httpwww_opengis_netgml3_2_ArcStringByBulgeType_httpwww_opengis_netgml3_2coordinates', False)

    
    coordinates = property(__coordinates.value, __coordinates.set, None, u'')

    
    # Element {http://www.opengis.net/gml/3.2}normal uses Python identifier normal
    __normal = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'normal'), 'normal', '__httpwww_opengis_netgml3_2_ArcStringByBulgeType_httpwww_opengis_netgml3_2normal', True)

    
    normal = property(__normal.value, __normal.set, None, None)

    
    # Element {http://www.opengis.net/gml/3.2}bulge uses Python identifier bulge
    __bulge = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'bulge'), 'bulge', '__httpwww_opengis_netgml3_2_ArcStringByBulgeType_httpwww_opengis_netgml3_2bulge', True)

    
    bulge = property(__bulge.value, __bulge.set, None, None)

    
    # Element {http://www.opengis.net/gml/3.2}pos uses Python identifier pos
    __pos = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'pos'), 'pos', '__httpwww_opengis_netgml3_2_ArcStringByBulgeType_httpwww_opengis_netgml3_2pos', True)

    
    pos = property(__pos.value, __pos.set, None, None)

    
    # Element {http://www.opengis.net/gml/3.2}pointProperty uses Python identifier pointProperty
    __pointProperty = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'pointProperty'), 'pointProperty', '__httpwww_opengis_netgml3_2_ArcStringByBulgeType_httpwww_opengis_netgml3_2pointProperty', True)

    
    pointProperty = property(__pointProperty.value, __pointProperty.set, None, u'This property element either references a point via the XLink-attributes or contains the point element. pointProperty is the predefined property which may be used by GML Application Schemas whenever a GML feature has a property with a value that is substitutable for Point.')

    
    # Attribute numDerivativesAtEnd inherited from {http://www.opengis.net/gml/3.2}AbstractCurveSegmentType
    
    # Attribute numDerivativesAtStart inherited from {http://www.opengis.net/gml/3.2}AbstractCurveSegmentType
    
    # Attribute numArc uses Python identifier numArc
    __numArc = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'numArc'), 'numArc', '__httpwww_opengis_netgml3_2_ArcStringByBulgeType_numArc', pyxb.binding.datatypes.integer)
    
    numArc = property(__numArc.value, __numArc.set, None, None)

    
    # Attribute numDerivativeInterior inherited from {http://www.opengis.net/gml/3.2}AbstractCurveSegmentType
    
    # Attribute interpolation uses Python identifier interpolation
    __interpolation = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'interpolation'), 'interpolation', '__httpwww_opengis_netgml3_2_ArcStringByBulgeType_interpolation', CurveInterpolationType, fixed=True, unicode_default=u'circularArc2PointWithBulge')
    
    interpolation = property(__interpolation.value, __interpolation.set, None, None)


    _ElementMap = AbstractCurveSegmentType._ElementMap.copy()
    _ElementMap.update({
        __pointRep.name() : __pointRep,
        __posList.name() : __posList,
        __coordinates.name() : __coordinates,
        __normal.name() : __normal,
        __bulge.name() : __bulge,
        __pos.name() : __pos,
        __pointProperty.name() : __pointProperty
    })
    _AttributeMap = AbstractCurveSegmentType._AttributeMap.copy()
    _AttributeMap.update({
        __numArc.name() : __numArc,
        __interpolation.name() : __interpolation
    })
_Namespace_gml.addCategoryObject('typeBinding', u'ArcStringByBulgeType', ArcStringByBulgeType)


# Complex type DictionaryType with content type ELEMENT_ONLY
class DictionaryType (DefinitionType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'DictionaryType')
    # Base type is DefinitionType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element {http://www.opengis.net/gml/3.2}indirectEntry uses Python identifier indirectEntry
    __indirectEntry = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'indirectEntry'), 'indirectEntry', '__httpwww_opengis_netgml3_2_DictionaryType_httpwww_opengis_netgml3_2indirectEntry', True)

    
    indirectEntry = property(__indirectEntry.value, __indirectEntry.set, None, u'')

    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element {http://www.opengis.net/gml/3.2}dictionaryEntry uses Python identifier dictionaryEntry
    __dictionaryEntry = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'dictionaryEntry'), 'dictionaryEntry', '__httpwww_opengis_netgml3_2_DictionaryType_httpwww_opengis_netgml3_2dictionaryEntry', True)

    
    dictionaryEntry = property(__dictionaryEntry.value, __dictionaryEntry.set, None, u'This property element contains or refers to the definitions which are members of a dictionary. \nThe content model follows the standard GML property pattern, so a gml:dictionaryEntry may either contain or refer to a single gml:Definition. Since gml:Dictionary is substitutable for gml:Definition, the content of an entry may itself be a lower level dictionary. \nNote that if the value is provided by reference, this definition does not carry a handle (gml:id) in this context, so does not allow external references to this specific definition in this context.  When used in this way the referenced definition will usually be in a dictionary in the same XML document.')

    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element remarks ({http://www.opengis.net/gml/3.2}remarks) inherited from {http://www.opengis.net/gml/3.2}DefinitionType
    
    # Attribute aggregationType uses Python identifier aggregationType
    __aggregationType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'aggregationType'), 'aggregationType', '__httpwww_opengis_netgml3_2_DictionaryType_aggregationType', AggregationType)
    
    aggregationType = property(__aggregationType.value, __aggregationType.set, None, None)

    
    # Attribute id_ inherited from {http://www.opengis.net/gml/3.2}DefinitionBaseType

    _ElementMap = DefinitionType._ElementMap.copy()
    _ElementMap.update({
        __indirectEntry.name() : __indirectEntry,
        __dictionaryEntry.name() : __dictionaryEntry
    })
    _AttributeMap = DefinitionType._AttributeMap.copy()
    _AttributeMap.update({
        __aggregationType.name() : __aggregationType
    })
_Namespace_gml.addCategoryObject('typeBinding', u'DictionaryType', DictionaryType)


# Complex type DirectedTopoSolidPropertyType with content type ELEMENT_ONLY
class DirectedTopoSolidPropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'DirectedTopoSolidPropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.opengis.net/gml/3.2}TopoSolid uses Python identifier TopoSolid
    __TopoSolid = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'TopoSolid'), 'TopoSolid', '__httpwww_opengis_netgml3_2_DirectedTopoSolidPropertyType_httpwww_opengis_netgml3_2TopoSolid', False)

    
    TopoSolid = property(__TopoSolid.value, __TopoSolid.set, None, u'gml:TopoSolid represents the 3-dimensional topology primitive. \nThe topological boundary of a solid (gml:directedFace) consists of a set of directed faces.\nA solid may optionally be realised by a 3-dimensional geometric primitive (gml:solidProperty).')

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_opengis_netgml3_2_DirectedTopoSolidPropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute orientation uses Python identifier orientation
    __orientation = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'orientation'), 'orientation', '__httpwww_opengis_netgml3_2_DirectedTopoSolidPropertyType_orientation', SignType, unicode_default=u'+')
    
    orientation = property(__orientation.value, __orientation.set, None, None)

    
    # Attribute owns uses Python identifier owns
    __owns = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'owns'), 'owns', '__httpwww_opengis_netgml3_2_DirectedTopoSolidPropertyType_owns', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    owns = property(__owns.value, __owns.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_opengis_netgml3_2_DirectedTopoSolidPropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_opengis_netgml3_2_DirectedTopoSolidPropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_opengis_netgml3_2_DirectedTopoSolidPropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_opengis_netgml3_2_DirectedTopoSolidPropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'nilReason'), 'nilReason', '__httpwww_opengis_netgml3_2_DirectedTopoSolidPropertyType_nilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.opengis.net/gml/3.2}remoteSchema uses Python identifier remoteSchema
    __remoteSchema = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'remoteSchema'), 'remoteSchema', '__httpwww_opengis_netgml3_2_DirectedTopoSolidPropertyType_httpwww_opengis_netgml3_2remoteSchema', pyxb.binding.datatypes.anyURI)
    
    remoteSchema = property(__remoteSchema.value, __remoteSchema.set, None, u'')

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_opengis_netgml3_2_DirectedTopoSolidPropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_opengis_netgml3_2_DirectedTopoSolidPropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")


    _ElementMap = {
        __TopoSolid.name() : __TopoSolid
    }
    _AttributeMap = {
        __actuate.name() : __actuate,
        __orientation.name() : __orientation,
        __owns.name() : __owns,
        __role.name() : __role,
        __arcrole.name() : __arcrole,
        __href.name() : __href,
        __type.name() : __type,
        __nilReason.name() : __nilReason,
        __remoteSchema.name() : __remoteSchema,
        __title.name() : __title,
        __show.name() : __show
    }
_Namespace_gml.addCategoryObject('typeBinding', u'DirectedTopoSolidPropertyType', DirectedTopoSolidPropertyType)


# Complex type ObliqueCartesianCSType with content type ELEMENT_ONLY
class ObliqueCartesianCSType (AbstractCoordinateSystemType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'ObliqueCartesianCSType')
    # Base type is AbstractCoordinateSystemType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element axis ({http://www.opengis.net/gml/3.2}axis) inherited from {http://www.opengis.net/gml/3.2}AbstractCoordinateSystemType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element remarks ({http://www.opengis.net/gml/3.2}remarks) inherited from {http://www.opengis.net/gml/3.2}DefinitionType
    
    # Attribute aggregationType inherited from {http://www.opengis.net/gml/3.2}AbstractCoordinateSystemType
    
    # Attribute id_ inherited from {http://www.opengis.net/gml/3.2}DefinitionBaseType

    _ElementMap = AbstractCoordinateSystemType._ElementMap.copy()
    _ElementMap.update({
        
    })
    _AttributeMap = AbstractCoordinateSystemType._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gml.addCategoryObject('typeBinding', u'ObliqueCartesianCSType', ObliqueCartesianCSType)


# Complex type DateTime_PropertyType with content type ELEMENT_ONLY
class DateTime_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gco, u'DateTime_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gco}DateTime uses Python identifier DateTime
    __DateTime = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'DateTime'), 'DateTime', '__httpwww_isotc211_org2005gco_DateTime_PropertyType_httpwww_isotc211_org2005gcoDateTime', False)

    
    DateTime = property(__DateTime.value, __DateTime.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gco_DateTime_PropertyType_httpwww_isotc211_org2005gconilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)


    _ElementMap = {
        __DateTime.name() : __DateTime
    }
    _AttributeMap = {
        __nilReason.name() : __nilReason
    }
_Namespace_gco.addCategoryObject('typeBinding', u'DateTime_PropertyType', DateTime_PropertyType)


# Complex type GeometricPrimitivePropertyType with content type ELEMENT_ONLY
class GeometricPrimitivePropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'GeometricPrimitivePropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.opengis.net/gml/3.2}AbstractGeometricPrimitive uses Python identifier AbstractGeometricPrimitive
    __AbstractGeometricPrimitive = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractGeometricPrimitive'), 'AbstractGeometricPrimitive', '__httpwww_opengis_netgml3_2_GeometricPrimitivePropertyType_httpwww_opengis_netgml3_2AbstractGeometricPrimitive', False)

    
    AbstractGeometricPrimitive = property(__AbstractGeometricPrimitive.value, __AbstractGeometricPrimitive.set, None, u'The AbstractGeometricPrimitive element is the abstract head of the substitution group for all (pre- and user-defined) geometric primitives.')

    
    # Attribute {http://www.opengis.net/gml/3.2}remoteSchema uses Python identifier remoteSchema
    __remoteSchema = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'remoteSchema'), 'remoteSchema', '__httpwww_opengis_netgml3_2_GeometricPrimitivePropertyType_httpwww_opengis_netgml3_2remoteSchema', pyxb.binding.datatypes.anyURI)
    
    remoteSchema = property(__remoteSchema.value, __remoteSchema.set, None, u'')

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_opengis_netgml3_2_GeometricPrimitivePropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_opengis_netgml3_2_GeometricPrimitivePropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_opengis_netgml3_2_GeometricPrimitivePropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_opengis_netgml3_2_GeometricPrimitivePropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'nilReason'), 'nilReason', '__httpwww_opengis_netgml3_2_GeometricPrimitivePropertyType_nilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute owns uses Python identifier owns
    __owns = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'owns'), 'owns', '__httpwww_opengis_netgml3_2_GeometricPrimitivePropertyType_owns', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    owns = property(__owns.value, __owns.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_opengis_netgml3_2_GeometricPrimitivePropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_opengis_netgml3_2_GeometricPrimitivePropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_opengis_netgml3_2_GeometricPrimitivePropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")


    _ElementMap = {
        __AbstractGeometricPrimitive.name() : __AbstractGeometricPrimitive
    }
    _AttributeMap = {
        __remoteSchema.name() : __remoteSchema,
        __role.name() : __role,
        __type.name() : __type,
        __arcrole.name() : __arcrole,
        __title.name() : __title,
        __nilReason.name() : __nilReason,
        __owns.name() : __owns,
        __actuate.name() : __actuate,
        __href.name() : __href,
        __show.name() : __show
    }
_Namespace_gml.addCategoryObject('typeBinding', u'GeometricPrimitivePropertyType', GeometricPrimitivePropertyType)


# Complex type CoordinateOperationPropertyType with content type ELEMENT_ONLY
class CoordinateOperationPropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'CoordinateOperationPropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.opengis.net/gml/3.2}AbstractCoordinateOperation uses Python identifier AbstractCoordinateOperation
    __AbstractCoordinateOperation = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractCoordinateOperation'), 'AbstractCoordinateOperation', '__httpwww_opengis_netgml3_2_CoordinateOperationPropertyType_httpwww_opengis_netgml3_2AbstractCoordinateOperation', False)

    
    AbstractCoordinateOperation = property(__AbstractCoordinateOperation.value, __AbstractCoordinateOperation.set, None, u'gml:AbstractCoordinateOperation is a mathematical operation on coordinates that transforms or converts coordinates to another coordinate reference system. Many but not all coordinate operations (from CRS A to CRS B) also uniquely define the inverse operation (from CRS B to CRS A). In some cases, the operation method algorithm for the inverse operation is the same as for the forward algorithm, but the signs of some operation parameter values shall be reversed. In other cases, different algorithms are required for the forward and inverse operations, but the same operation parameter values are used. If (some) entirely different parameter values are needed, a different coordinate operation shall be defined.\nThe optional coordinateOperationAccuracy property elements provide estimates of the impact of this coordinate operation on point position accuracy.')

    
    # Attribute {http://www.opengis.net/gml/3.2}remoteSchema uses Python identifier remoteSchema
    __remoteSchema = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'remoteSchema'), 'remoteSchema', '__httpwww_opengis_netgml3_2_CoordinateOperationPropertyType_httpwww_opengis_netgml3_2remoteSchema', pyxb.binding.datatypes.anyURI)
    
    remoteSchema = property(__remoteSchema.value, __remoteSchema.set, None, u'')

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_opengis_netgml3_2_CoordinateOperationPropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_opengis_netgml3_2_CoordinateOperationPropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_opengis_netgml3_2_CoordinateOperationPropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'nilReason'), 'nilReason', '__httpwww_opengis_netgml3_2_CoordinateOperationPropertyType_nilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_opengis_netgml3_2_CoordinateOperationPropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_opengis_netgml3_2_CoordinateOperationPropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_opengis_netgml3_2_CoordinateOperationPropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_opengis_netgml3_2_CoordinateOperationPropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")


    _ElementMap = {
        __AbstractCoordinateOperation.name() : __AbstractCoordinateOperation
    }
    _AttributeMap = {
        __remoteSchema.name() : __remoteSchema,
        __href.name() : __href,
        __title.name() : __title,
        __type.name() : __type,
        __nilReason.name() : __nilReason,
        __show.name() : __show,
        __role.name() : __role,
        __arcrole.name() : __arcrole,
        __actuate.name() : __actuate
    }
_Namespace_gml.addCategoryObject('typeBinding', u'CoordinateOperationPropertyType', CoordinateOperationPropertyType)


# Complex type DerivedCRSType with content type ELEMENT_ONLY
class DerivedCRSType (AbstractGeneralDerivedCRSType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'DerivedCRSType')
    # Base type is AbstractGeneralDerivedCRSType
    
    # Element {http://www.opengis.net/gml/3.2}baseCRS uses Python identifier baseCRS
    __baseCRS = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'baseCRS'), 'baseCRS', '__httpwww_opengis_netgml3_2_DerivedCRSType_httpwww_opengis_netgml3_2baseCRS', False)

    
    baseCRS = property(__baseCRS.value, __baseCRS.set, None, u'gml:baseCRS is an association role to the coordinate reference system used by this derived CRS.')

    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element conversion ({http://www.opengis.net/gml/3.2}conversion) inherited from {http://www.opengis.net/gml/3.2}AbstractGeneralDerivedCRSType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element domainOfValidity ({http://www.opengis.net/gml/3.2}domainOfValidity) inherited from {http://www.opengis.net/gml/3.2}AbstractCRSType
    
    # Element {http://www.opengis.net/gml/3.2}derivedCRSType uses Python identifier derivedCRSType
    __derivedCRSType = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'derivedCRSType'), 'derivedCRSType', '__httpwww_opengis_netgml3_2_DerivedCRSType_httpwww_opengis_netgml3_2derivedCRSType', False)

    
    derivedCRSType = property(__derivedCRSType.value, __derivedCRSType.set, None, u'The gml:derivedCRSType property describes the type of a derived coordinate reference system. The required codeSpace attribute shall reference a source of information specifying the values and meanings of all the allowed string values for this property.')

    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element scope ({http://www.opengis.net/gml/3.2}scope) inherited from {http://www.opengis.net/gml/3.2}AbstractCRSType
    
    # Element {http://www.opengis.net/gml/3.2}coordinateSystem uses Python identifier coordinateSystem
    __coordinateSystem = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'coordinateSystem'), 'coordinateSystem', '__httpwww_opengis_netgml3_2_DerivedCRSType_httpwww_opengis_netgml3_2coordinateSystem', False)

    
    coordinateSystem = property(__coordinateSystem.value, __coordinateSystem.set, None, u'An association role to the coordinate system used by this CRS.')

    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element remarks ({http://www.opengis.net/gml/3.2}remarks) inherited from {http://www.opengis.net/gml/3.2}DefinitionType
    
    # Attribute id_ inherited from {http://www.opengis.net/gml/3.2}DefinitionBaseType

    _ElementMap = AbstractGeneralDerivedCRSType._ElementMap.copy()
    _ElementMap.update({
        __baseCRS.name() : __baseCRS,
        __derivedCRSType.name() : __derivedCRSType,
        __coordinateSystem.name() : __coordinateSystem
    })
    _AttributeMap = AbstractGeneralDerivedCRSType._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gml.addCategoryObject('typeBinding', u'DerivedCRSType', DerivedCRSType)


# Complex type LI_ProcessStep_PropertyType with content type ELEMENT_ONLY
class LI_ProcessStep_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'LI_ProcessStep_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmd}LI_ProcessStep uses Python identifier LI_ProcessStep
    __LI_ProcessStep = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'LI_ProcessStep'), 'LI_ProcessStep', '__httpwww_isotc211_org2005gmd_LI_ProcessStep_PropertyType_httpwww_isotc211_org2005gmdLI_ProcessStep', False)

    
    LI_ProcessStep = property(__LI_ProcessStep.value, __LI_ProcessStep.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_isotc211_org2005gmd_LI_ProcessStep_PropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_isotc211_org2005gmd_LI_ProcessStep_PropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_isotc211_org2005gmd_LI_ProcessStep_PropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute uuidref uses Python identifier uuidref
    __uuidref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uuidref'), 'uuidref', '__httpwww_isotc211_org2005gmd_LI_ProcessStep_PropertyType_uuidref', pyxb.binding.datatypes.string)
    
    uuidref = property(__uuidref.value, __uuidref.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmd_LI_ProcessStep_PropertyType_httpwww_isotc211_org2005gconilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_isotc211_org2005gmd_LI_ProcessStep_PropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_isotc211_org2005gmd_LI_ProcessStep_PropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_isotc211_org2005gmd_LI_ProcessStep_PropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_isotc211_org2005gmd_LI_ProcessStep_PropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")


    _ElementMap = {
        __LI_ProcessStep.name() : __LI_ProcessStep
    }
    _AttributeMap = {
        __type.name() : __type,
        __arcrole.name() : __arcrole,
        __role.name() : __role,
        __uuidref.name() : __uuidref,
        __nilReason.name() : __nilReason,
        __show.name() : __show,
        __title.name() : __title,
        __href.name() : __href,
        __actuate.name() : __actuate
    }
_Namespace_gmd.addCategoryObject('typeBinding', u'LI_ProcessStep_PropertyType', LI_ProcessStep_PropertyType)


# Complex type LI_Lineage_Type with content type ELEMENT_ONLY
class LI_Lineage_Type (AbstractObject_Type):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'LI_Lineage_Type')
    # Base type is AbstractObject_Type
    
    # Element {http://www.isotc211.org/2005/gmd}source uses Python identifier source
    __source = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'source'), 'source', '__httpwww_isotc211_org2005gmd_LI_Lineage_Type_httpwww_isotc211_org2005gmdsource', True)

    
    source = property(__source.value, __source.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}statement uses Python identifier statement
    __statement = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'statement'), 'statement', '__httpwww_isotc211_org2005gmd_LI_Lineage_Type_httpwww_isotc211_org2005gmdstatement', False)

    
    statement = property(__statement.value, __statement.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}processStep uses Python identifier processStep
    __processStep = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'processStep'), 'processStep', '__httpwww_isotc211_org2005gmd_LI_Lineage_Type_httpwww_isotc211_org2005gmdprocessStep', True)

    
    processStep = property(__processStep.value, __processStep.set, None, None)

    
    # Attribute id inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type
    
    # Attribute uuid inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type

    _ElementMap = AbstractObject_Type._ElementMap.copy()
    _ElementMap.update({
        __source.name() : __source,
        __statement.name() : __statement,
        __processStep.name() : __processStep
    })
    _AttributeMap = AbstractObject_Type._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gmd.addCategoryObject('typeBinding', u'LI_Lineage_Type', LI_Lineage_Type)


# Complex type PassThroughOperationType with content type ELEMENT_ONLY
class PassThroughOperationType (AbstractCoordinateOperationType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'PassThroughOperationType')
    # Base type is AbstractCoordinateOperationType
    
    # Element sourceCRS ({http://www.opengis.net/gml/3.2}sourceCRS) inherited from {http://www.opengis.net/gml/3.2}AbstractCoordinateOperationType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element targetCRS ({http://www.opengis.net/gml/3.2}targetCRS) inherited from {http://www.opengis.net/gml/3.2}AbstractCoordinateOperationType
    
    # Element domainOfValidity ({http://www.opengis.net/gml/3.2}domainOfValidity) inherited from {http://www.opengis.net/gml/3.2}AbstractCoordinateOperationType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element {http://www.opengis.net/gml/3.2}modifiedCoordinate uses Python identifier modifiedCoordinate
    __modifiedCoordinate = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'modifiedCoordinate'), 'modifiedCoordinate', '__httpwww_opengis_netgml3_2_PassThroughOperationType_httpwww_opengis_netgml3_2modifiedCoordinate', True)

    
    modifiedCoordinate = property(__modifiedCoordinate.value, __modifiedCoordinate.set, None, u'gml:modifiedCoordinate is a positive integer defining a position in a coordinate tuple.')

    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element operationVersion ({http://www.opengis.net/gml/3.2}operationVersion) inherited from {http://www.opengis.net/gml/3.2}AbstractCoordinateOperationType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element scope ({http://www.opengis.net/gml/3.2}scope) inherited from {http://www.opengis.net/gml/3.2}AbstractCoordinateOperationType
    
    # Element {http://www.opengis.net/gml/3.2}coordOperation uses Python identifier coordOperation
    __coordOperation = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'coordOperation'), 'coordOperation', '__httpwww_opengis_netgml3_2_PassThroughOperationType_httpwww_opengis_netgml3_2coordOperation', False)

    
    coordOperation = property(__coordOperation.value, __coordOperation.set, None, u'gml:coordOperation is an association role to a coordinate operation.')

    
    # Element coordinateOperationAccuracy ({http://www.opengis.net/gml/3.2}coordinateOperationAccuracy) inherited from {http://www.opengis.net/gml/3.2}AbstractCoordinateOperationType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element remarks ({http://www.opengis.net/gml/3.2}remarks) inherited from {http://www.opengis.net/gml/3.2}DefinitionType
    
    # Attribute aggregationType uses Python identifier aggregationType
    __aggregationType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'aggregationType'), 'aggregationType', '__httpwww_opengis_netgml3_2_PassThroughOperationType_aggregationType', AggregationType)
    
    aggregationType = property(__aggregationType.value, __aggregationType.set, None, None)

    
    # Attribute id_ inherited from {http://www.opengis.net/gml/3.2}DefinitionBaseType

    _ElementMap = AbstractCoordinateOperationType._ElementMap.copy()
    _ElementMap.update({
        __modifiedCoordinate.name() : __modifiedCoordinate,
        __coordOperation.name() : __coordOperation
    })
    _AttributeMap = AbstractCoordinateOperationType._AttributeMap.copy()
    _AttributeMap.update({
        __aggregationType.name() : __aggregationType
    })
_Namespace_gml.addCategoryObject('typeBinding', u'PassThroughOperationType', PassThroughOperationType)


# Complex type CurveSegmentArrayPropertyType with content type ELEMENT_ONLY
class CurveSegmentArrayPropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'CurveSegmentArrayPropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.opengis.net/gml/3.2}AbstractCurveSegment uses Python identifier AbstractCurveSegment
    __AbstractCurveSegment = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractCurveSegment'), 'AbstractCurveSegment', '__httpwww_opengis_netgml3_2_CurveSegmentArrayPropertyType_httpwww_opengis_netgml3_2AbstractCurveSegment', True)

    
    AbstractCurveSegment = property(__AbstractCurveSegment.value, __AbstractCurveSegment.set, None, u'A curve segment defines a homogeneous segment of a curve.\nThe attributes numDerivativesAtStart, numDerivativesAtEnd and numDerivativesInterior specify the type of continuity as specified in ISO 19107:2003, 6.4.9.3.\nThe AbstractCurveSegment element is the abstract head of the substituition group for all curve segment elements, i.e. continuous segments of the same interpolation mechanism.\nAll curve segments shall have an attribute interpolation with type gml:CurveInterpolationType specifying the curve interpolation mechanism used for this segment. This mechanism uses the control points and control parameters to determine the position of this curve segment.')


    _ElementMap = {
        __AbstractCurveSegment.name() : __AbstractCurveSegment
    }
    _AttributeMap = {
        
    }
_Namespace_gml.addCategoryObject('typeBinding', u'CurveSegmentArrayPropertyType', CurveSegmentArrayPropertyType)


# Complex type PT_Locale_PropertyType with content type ELEMENT_ONLY
class PT_Locale_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'PT_Locale_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmd}PT_Locale uses Python identifier PT_Locale
    __PT_Locale = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'PT_Locale'), 'PT_Locale', '__httpwww_isotc211_org2005gmd_PT_Locale_PropertyType_httpwww_isotc211_org2005gmdPT_Locale', False)

    
    PT_Locale = property(__PT_Locale.value, __PT_Locale.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_isotc211_org2005gmd_PT_Locale_PropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_isotc211_org2005gmd_PT_Locale_PropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_isotc211_org2005gmd_PT_Locale_PropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmd_PT_Locale_PropertyType_httpwww_isotc211_org2005gconilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_isotc211_org2005gmd_PT_Locale_PropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute uuidref uses Python identifier uuidref
    __uuidref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uuidref'), 'uuidref', '__httpwww_isotc211_org2005gmd_PT_Locale_PropertyType_uuidref', pyxb.binding.datatypes.string)
    
    uuidref = property(__uuidref.value, __uuidref.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_isotc211_org2005gmd_PT_Locale_PropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_isotc211_org2005gmd_PT_Locale_PropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_isotc211_org2005gmd_PT_Locale_PropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")


    _ElementMap = {
        __PT_Locale.name() : __PT_Locale
    }
    _AttributeMap = {
        __type.name() : __type,
        __arcrole.name() : __arcrole,
        __role.name() : __role,
        __nilReason.name() : __nilReason,
        __title.name() : __title,
        __uuidref.name() : __uuidref,
        __href.name() : __href,
        __show.name() : __show,
        __actuate.name() : __actuate
    }
_Namespace_gmd.addCategoryObject('typeBinding', u'PT_Locale_PropertyType', PT_Locale_PropertyType)


# Complex type LI_Source_PropertyType with content type ELEMENT_ONLY
class LI_Source_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'LI_Source_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmd}LI_Source uses Python identifier LI_Source
    __LI_Source = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'LI_Source'), 'LI_Source', '__httpwww_isotc211_org2005gmd_LI_Source_PropertyType_httpwww_isotc211_org2005gmdLI_Source', False)

    
    LI_Source = property(__LI_Source.value, __LI_Source.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_isotc211_org2005gmd_LI_Source_PropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_isotc211_org2005gmd_LI_Source_PropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_isotc211_org2005gmd_LI_Source_PropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmd_LI_Source_PropertyType_httpwww_isotc211_org2005gconilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute uuidref uses Python identifier uuidref
    __uuidref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uuidref'), 'uuidref', '__httpwww_isotc211_org2005gmd_LI_Source_PropertyType_uuidref', pyxb.binding.datatypes.string)
    
    uuidref = property(__uuidref.value, __uuidref.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_isotc211_org2005gmd_LI_Source_PropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_isotc211_org2005gmd_LI_Source_PropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_isotc211_org2005gmd_LI_Source_PropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_isotc211_org2005gmd_LI_Source_PropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)


    _ElementMap = {
        __LI_Source.name() : __LI_Source
    }
    _AttributeMap = {
        __type.name() : __type,
        __arcrole.name() : __arcrole,
        __role.name() : __role,
        __nilReason.name() : __nilReason,
        __uuidref.name() : __uuidref,
        __actuate.name() : __actuate,
        __show.name() : __show,
        __title.name() : __title,
        __href.name() : __href
    }
_Namespace_gmd.addCategoryObject('typeBinding', u'LI_Source_PropertyType', LI_Source_PropertyType)


# Complex type Multiplicity_Type with content type ELEMENT_ONLY
class Multiplicity_Type (AbstractObject_Type):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gco, u'Multiplicity_Type')
    # Base type is AbstractObject_Type
    
    # Element {http://www.isotc211.org/2005/gco}range uses Python identifier range
    __range = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'range'), 'range', '__httpwww_isotc211_org2005gco_Multiplicity_Type_httpwww_isotc211_org2005gcorange', True)

    
    range = property(__range.value, __range.set, None, None)

    
    # Attribute id inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type
    
    # Attribute uuid inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type

    _ElementMap = AbstractObject_Type._ElementMap.copy()
    _ElementMap.update({
        __range.name() : __range
    })
    _AttributeMap = AbstractObject_Type._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gco.addCategoryObject('typeBinding', u'Multiplicity_Type', Multiplicity_Type)


# Complex type VerticalCRSType with content type ELEMENT_ONLY
class VerticalCRSType (AbstractCRSType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'VerticalCRSType')
    # Base type is AbstractCRSType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element {http://www.opengis.net/gml/3.2}verticalDatum uses Python identifier verticalDatum
    __verticalDatum = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'verticalDatum'), 'verticalDatum', '__httpwww_opengis_netgml3_2_VerticalCRSType_httpwww_opengis_netgml3_2verticalDatum', False)

    
    verticalDatum = property(__verticalDatum.value, __verticalDatum.set, None, u'gml:verticalDatum is an association role to the vertical datum used by this CRS.')

    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element domainOfValidity ({http://www.opengis.net/gml/3.2}domainOfValidity) inherited from {http://www.opengis.net/gml/3.2}AbstractCRSType
    
    # Element {http://www.opengis.net/gml/3.2}verticalCS uses Python identifier verticalCS
    __verticalCS = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'verticalCS'), 'verticalCS', '__httpwww_opengis_netgml3_2_VerticalCRSType_httpwww_opengis_netgml3_2verticalCS', False)

    
    verticalCS = property(__verticalCS.value, __verticalCS.set, None, u'gml:verticalCS is an association role to the vertical coordinate system used by this CRS.')

    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element scope ({http://www.opengis.net/gml/3.2}scope) inherited from {http://www.opengis.net/gml/3.2}AbstractCRSType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element remarks ({http://www.opengis.net/gml/3.2}remarks) inherited from {http://www.opengis.net/gml/3.2}DefinitionType
    
    # Attribute id_ inherited from {http://www.opengis.net/gml/3.2}DefinitionBaseType

    _ElementMap = AbstractCRSType._ElementMap.copy()
    _ElementMap.update({
        __verticalDatum.name() : __verticalDatum,
        __verticalCS.name() : __verticalCS
    })
    _AttributeMap = AbstractCRSType._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gml.addCategoryObject('typeBinding', u'VerticalCRSType', VerticalCRSType)


# Complex type IndirectEntryType with content type ELEMENT_ONLY
class IndirectEntryType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'IndirectEntryType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.opengis.net/gml/3.2}DefinitionProxy uses Python identifier DefinitionProxy
    __DefinitionProxy = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'DefinitionProxy'), 'DefinitionProxy', '__httpwww_opengis_netgml3_2_IndirectEntryType_httpwww_opengis_netgml3_2DefinitionProxy', False)

    
    DefinitionProxy = property(__DefinitionProxy.value, __DefinitionProxy.set, None, u'')


    _ElementMap = {
        __DefinitionProxy.name() : __DefinitionProxy
    }
    _AttributeMap = {
        
    }
_Namespace_gml.addCategoryObject('typeBinding', u'IndirectEntryType', IndirectEntryType)


# Complex type AbstractGeometricPrimitiveType with content type ELEMENT_ONLY
class AbstractGeometricPrimitiveType (AbstractGeometryType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = True
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractGeometricPrimitiveType')
    # Base type is AbstractGeometryType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Attribute srsName inherited from {http://www.opengis.net/gml/3.2}AbstractGeometryType
    
    # Attribute axisLabels inherited from {http://www.opengis.net/gml/3.2}AbstractGeometryType
    
    # Attribute id inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Attribute uomLabels inherited from {http://www.opengis.net/gml/3.2}AbstractGeometryType
    
    # Attribute srsDimension inherited from {http://www.opengis.net/gml/3.2}AbstractGeometryType

    _ElementMap = AbstractGeometryType._ElementMap.copy()
    _ElementMap.update({
        
    })
    _AttributeMap = AbstractGeometryType._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gml.addCategoryObject('typeBinding', u'AbstractGeometricPrimitiveType', AbstractGeometricPrimitiveType)


# Complex type AbstractSurfaceType with content type ELEMENT_ONLY
class AbstractSurfaceType (AbstractGeometricPrimitiveType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = True
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractSurfaceType')
    # Base type is AbstractGeometricPrimitiveType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Attribute srsName inherited from {http://www.opengis.net/gml/3.2}AbstractGeometryType
    
    # Attribute axisLabels inherited from {http://www.opengis.net/gml/3.2}AbstractGeometryType
    
    # Attribute id inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Attribute uomLabels inherited from {http://www.opengis.net/gml/3.2}AbstractGeometryType
    
    # Attribute srsDimension inherited from {http://www.opengis.net/gml/3.2}AbstractGeometryType

    _ElementMap = AbstractGeometricPrimitiveType._ElementMap.copy()
    _ElementMap.update({
        
    })
    _AttributeMap = AbstractGeometricPrimitiveType._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gml.addCategoryObject('typeBinding', u'AbstractSurfaceType', AbstractSurfaceType)


# Complex type OrientableSurfaceType with content type ELEMENT_ONLY
class OrientableSurfaceType (AbstractSurfaceType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'OrientableSurfaceType')
    # Base type is AbstractSurfaceType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element {http://www.opengis.net/gml/3.2}baseSurface uses Python identifier baseSurface
    __baseSurface = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'baseSurface'), 'baseSurface', '__httpwww_opengis_netgml3_2_OrientableSurfaceType_httpwww_opengis_netgml3_2baseSurface', False)

    
    baseSurface = property(__baseSurface.value, __baseSurface.set, None, u'The property baseSurface references or contains the base surface. The property baseSurface either references the base surface via the XLink-attributes or contains the surface element. A surface element is any element which is substitutable for gml:AbstractSurface. The base surface has positive orientation.')

    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Attribute orientation uses Python identifier orientation
    __orientation = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'orientation'), 'orientation', '__httpwww_opengis_netgml3_2_OrientableSurfaceType_orientation', SignType, unicode_default=u'+')
    
    orientation = property(__orientation.value, __orientation.set, None, None)

    
    # Attribute uomLabels inherited from {http://www.opengis.net/gml/3.2}AbstractGeometryType
    
    # Attribute srsName inherited from {http://www.opengis.net/gml/3.2}AbstractGeometryType
    
    # Attribute id inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Attribute srsDimension inherited from {http://www.opengis.net/gml/3.2}AbstractGeometryType
    
    # Attribute axisLabels inherited from {http://www.opengis.net/gml/3.2}AbstractGeometryType

    _ElementMap = AbstractSurfaceType._ElementMap.copy()
    _ElementMap.update({
        __baseSurface.name() : __baseSurface
    })
    _AttributeMap = AbstractSurfaceType._AttributeMap.copy()
    _AttributeMap.update({
        __orientation.name() : __orientation
    })
_Namespace_gml.addCategoryObject('typeBinding', u'OrientableSurfaceType', OrientableSurfaceType)


# Complex type CTD_ANON_3 with content type SIMPLE
class CTD_ANON_3 (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = pyxb.binding.datatypes.boolean
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    # Base type is pyxb.binding.datatypes.boolean
    
    # Attribute nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'nilReason'), 'nilReason', '__httpwww_opengis_netgml3_2_CTD_ANON_3_nilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)


    _ElementMap = {
        
    }
    _AttributeMap = {
        __nilReason.name() : __nilReason
    }



# Complex type AbstractDQ_ThematicAccuracy_Type with content type ELEMENT_ONLY
class AbstractDQ_ThematicAccuracy_Type (AbstractDQ_Element_Type):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = True
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'AbstractDQ_ThematicAccuracy_Type')
    # Base type is AbstractDQ_Element_Type
    
    # Element evaluationMethodDescription ({http://www.isotc211.org/2005/gmd}evaluationMethodDescription) inherited from {http://www.isotc211.org/2005/gmd}AbstractDQ_Element_Type
    
    # Element measureDescription ({http://www.isotc211.org/2005/gmd}measureDescription) inherited from {http://www.isotc211.org/2005/gmd}AbstractDQ_Element_Type
    
    # Element evaluationProcedure ({http://www.isotc211.org/2005/gmd}evaluationProcedure) inherited from {http://www.isotc211.org/2005/gmd}AbstractDQ_Element_Type
    
    # Element evaluationMethodType ({http://www.isotc211.org/2005/gmd}evaluationMethodType) inherited from {http://www.isotc211.org/2005/gmd}AbstractDQ_Element_Type
    
    # Element dateTime ({http://www.isotc211.org/2005/gmd}dateTime) inherited from {http://www.isotc211.org/2005/gmd}AbstractDQ_Element_Type
    
    # Element result ({http://www.isotc211.org/2005/gmd}result) inherited from {http://www.isotc211.org/2005/gmd}AbstractDQ_Element_Type
    
    # Element nameOfMeasure ({http://www.isotc211.org/2005/gmd}nameOfMeasure) inherited from {http://www.isotc211.org/2005/gmd}AbstractDQ_Element_Type
    
    # Element measureIdentification ({http://www.isotc211.org/2005/gmd}measureIdentification) inherited from {http://www.isotc211.org/2005/gmd}AbstractDQ_Element_Type
    
    # Attribute id inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type
    
    # Attribute uuid inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type

    _ElementMap = AbstractDQ_Element_Type._ElementMap.copy()
    _ElementMap.update({
        
    })
    _AttributeMap = AbstractDQ_Element_Type._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gmd.addCategoryObject('typeBinding', u'AbstractDQ_ThematicAccuracy_Type', AbstractDQ_ThematicAccuracy_Type)


# Complex type PT_LocaleContainer_Type with content type ELEMENT_ONLY
class PT_LocaleContainer_Type (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'PT_LocaleContainer_Type')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmd}localisedString uses Python identifier localisedString
    __localisedString = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'localisedString'), 'localisedString', '__httpwww_isotc211_org2005gmd_PT_LocaleContainer_Type_httpwww_isotc211_org2005gmdlocalisedString', True)

    
    localisedString = property(__localisedString.value, __localisedString.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}description uses Python identifier description
    __description = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'description'), 'description', '__httpwww_isotc211_org2005gmd_PT_LocaleContainer_Type_httpwww_isotc211_org2005gmddescription', False)

    
    description = property(__description.value, __description.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}locale uses Python identifier locale
    __locale = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'locale'), 'locale', '__httpwww_isotc211_org2005gmd_PT_LocaleContainer_Type_httpwww_isotc211_org2005gmdlocale', False)

    
    locale = property(__locale.value, __locale.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}responsibleParty uses Python identifier responsibleParty
    __responsibleParty = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'responsibleParty'), 'responsibleParty', '__httpwww_isotc211_org2005gmd_PT_LocaleContainer_Type_httpwww_isotc211_org2005gmdresponsibleParty', True)

    
    responsibleParty = property(__responsibleParty.value, __responsibleParty.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}date uses Python identifier date
    __date = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'date'), 'date', '__httpwww_isotc211_org2005gmd_PT_LocaleContainer_Type_httpwww_isotc211_org2005gmddate', True)

    
    date = property(__date.value, __date.set, None, None)


    _ElementMap = {
        __localisedString.name() : __localisedString,
        __description.name() : __description,
        __locale.name() : __locale,
        __responsibleParty.name() : __responsibleParty,
        __date.name() : __date
    }
    _AttributeMap = {
        
    }
_Namespace_gmd.addCategoryObject('typeBinding', u'PT_LocaleContainer_Type', PT_LocaleContainer_Type)


# Complex type MD_MaintenanceFrequencyCode_PropertyType with content type ELEMENT_ONLY
class MD_MaintenanceFrequencyCode_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_MaintenanceFrequencyCode_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmd}MD_MaintenanceFrequencyCode uses Python identifier MD_MaintenanceFrequencyCode
    __MD_MaintenanceFrequencyCode = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_MaintenanceFrequencyCode'), 'MD_MaintenanceFrequencyCode', '__httpwww_isotc211_org2005gmd_MD_MaintenanceFrequencyCode_PropertyType_httpwww_isotc211_org2005gmdMD_MaintenanceFrequencyCode', False)

    
    MD_MaintenanceFrequencyCode = property(__MD_MaintenanceFrequencyCode.value, __MD_MaintenanceFrequencyCode.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmd_MD_MaintenanceFrequencyCode_PropertyType_httpwww_isotc211_org2005gconilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)


    _ElementMap = {
        __MD_MaintenanceFrequencyCode.name() : __MD_MaintenanceFrequencyCode
    }
    _AttributeMap = {
        __nilReason.name() : __nilReason
    }
_Namespace_gmd.addCategoryObject('typeBinding', u'MD_MaintenanceFrequencyCode_PropertyType', MD_MaintenanceFrequencyCode_PropertyType)


# Complex type ValuePropertyType with content type ELEMENT_ONLY
class ValuePropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'ValuePropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.opengis.net/gml/3.2}AbstractValue uses Python identifier AbstractValue
    __AbstractValue = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractValue'), 'AbstractValue', '__httpwww_opengis_netgml3_2_ValuePropertyType_httpwww_opengis_netgml3_2AbstractValue', False)

    
    AbstractValue = property(__AbstractValue.value, __AbstractValue.set, None, u'gml:AbstractValue is an abstract element which acts as the head of a substitution group which contains gml:AbstractScalarValue, gml:AbstractScalarValueList, gml:CompositeValue and gml:ValueExtent, and (transitively) the elements in their substitution groups.\nThese elements may be used in an application schema as variables, so that in an XML instance document any member of its substitution group may occur.')

    
    # Element {http://www.opengis.net/gml/3.2}AbstractGeometry uses Python identifier AbstractGeometry
    __AbstractGeometry = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractGeometry'), 'AbstractGeometry', '__httpwww_opengis_netgml3_2_ValuePropertyType_httpwww_opengis_netgml3_2AbstractGeometry', False)

    
    AbstractGeometry = property(__AbstractGeometry.value, __AbstractGeometry.set, None, u'The AbstractGeometry element is the abstract head of the substitution group for all geometry elements of GML. This includes pre-defined and user-defined geometry elements. Any geometry element shall be a direct or indirect extension/restriction of AbstractGeometryType and shall be directly or indirectly in the substitution group of AbstractGeometry.')

    
    # Element {http://www.opengis.net/gml/3.2}AbstractTimeObject uses Python identifier AbstractTimeObject
    __AbstractTimeObject = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractTimeObject'), 'AbstractTimeObject', '__httpwww_opengis_netgml3_2_ValuePropertyType_httpwww_opengis_netgml3_2AbstractTimeObject', False)

    
    AbstractTimeObject = property(__AbstractTimeObject.value, __AbstractTimeObject.set, None, u'gml:AbstractTimeObject acts as the head of a substitution group for all temporal primitives and complexes.')

    
    # Element {http://www.opengis.net/gml/3.2}Null uses Python identifier Null
    __Null = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'Null'), 'Null', '__httpwww_opengis_netgml3_2_ValuePropertyType_httpwww_opengis_netgml3_2Null', False)

    
    Null = property(__Null.value, __Null.set, None, u'')

    
    # Attribute owns uses Python identifier owns
    __owns = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'owns'), 'owns', '__httpwww_opengis_netgml3_2_ValuePropertyType_owns', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    owns = property(__owns.value, __owns.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_opengis_netgml3_2_ValuePropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_opengis_netgml3_2_ValuePropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_opengis_netgml3_2_ValuePropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_opengis_netgml3_2_ValuePropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_opengis_netgml3_2_ValuePropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'nilReason'), 'nilReason', '__httpwww_opengis_netgml3_2_ValuePropertyType_nilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.opengis.net/gml/3.2}remoteSchema uses Python identifier remoteSchema
    __remoteSchema = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'remoteSchema'), 'remoteSchema', '__httpwww_opengis_netgml3_2_ValuePropertyType_httpwww_opengis_netgml3_2remoteSchema', pyxb.binding.datatypes.anyURI)
    
    remoteSchema = property(__remoteSchema.value, __remoteSchema.set, None, u'')

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_opengis_netgml3_2_ValuePropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_opengis_netgml3_2_ValuePropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")


    _ElementMap = {
        __AbstractValue.name() : __AbstractValue,
        __AbstractGeometry.name() : __AbstractGeometry,
        __AbstractTimeObject.name() : __AbstractTimeObject,
        __Null.name() : __Null
    }
    _AttributeMap = {
        __owns.name() : __owns,
        __href.name() : __href,
        __role.name() : __role,
        __arcrole.name() : __arcrole,
        __type.name() : __type,
        __title.name() : __title,
        __nilReason.name() : __nilReason,
        __remoteSchema.name() : __remoteSchema,
        __show.name() : __show,
        __actuate.name() : __actuate
    }
_Namespace_gml.addCategoryObject('typeBinding', u'ValuePropertyType', ValuePropertyType)


# Complex type PointType with content type ELEMENT_ONLY
class PointType (AbstractGeometricPrimitiveType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'PointType')
    # Base type is AbstractGeometricPrimitiveType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element {http://www.opengis.net/gml/3.2}pos uses Python identifier pos
    __pos = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'pos'), 'pos', '__httpwww_opengis_netgml3_2_PointType_httpwww_opengis_netgml3_2pos', False)

    
    pos = property(__pos.value, __pos.set, None, None)

    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element {http://www.opengis.net/gml/3.2}coordinates uses Python identifier coordinates
    __coordinates = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'coordinates'), 'coordinates', '__httpwww_opengis_netgml3_2_PointType_httpwww_opengis_netgml3_2coordinates', False)

    
    coordinates = property(__coordinates.value, __coordinates.set, None, u'')

    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Attribute srsName inherited from {http://www.opengis.net/gml/3.2}AbstractGeometryType
    
    # Attribute axisLabels inherited from {http://www.opengis.net/gml/3.2}AbstractGeometryType
    
    # Attribute id inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Attribute uomLabels inherited from {http://www.opengis.net/gml/3.2}AbstractGeometryType
    
    # Attribute srsDimension inherited from {http://www.opengis.net/gml/3.2}AbstractGeometryType

    _ElementMap = AbstractGeometricPrimitiveType._ElementMap.copy()
    _ElementMap.update({
        __pos.name() : __pos,
        __coordinates.name() : __coordinates
    })
    _AttributeMap = AbstractGeometricPrimitiveType._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gml.addCategoryObject('typeBinding', u'PointType', PointType)


# Complex type GridLimitsType with content type ELEMENT_ONLY
class GridLimitsType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'GridLimitsType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.opengis.net/gml/3.2}GridEnvelope uses Python identifier GridEnvelope
    __GridEnvelope = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'GridEnvelope'), 'GridEnvelope', '__httpwww_opengis_netgml3_2_GridLimitsType_httpwww_opengis_netgml3_2GridEnvelope', False)

    
    GridEnvelope = property(__GridEnvelope.value, __GridEnvelope.set, None, None)


    _ElementMap = {
        __GridEnvelope.name() : __GridEnvelope
    }
    _AttributeMap = {
        
    }
_Namespace_gml.addCategoryObject('typeBinding', u'GridLimitsType', GridLimitsType)


# Complex type SurfaceType with content type ELEMENT_ONLY
class SurfaceType (AbstractSurfaceType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'SurfaceType')
    # Base type is AbstractSurfaceType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element {http://www.opengis.net/gml/3.2}patches uses Python identifier patches
    __patches = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'patches'), 'patches', '__httpwww_opengis_netgml3_2_SurfaceType_httpwww_opengis_netgml3_2patches', False)

    
    patches = property(__patches.value, __patches.set, None, u'The patches property element contains the sequence of surface patches. The order of the elements is significant and shall be preserved when processing the array.')

    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Attribute srsName inherited from {http://www.opengis.net/gml/3.2}AbstractGeometryType
    
    # Attribute axisLabels inherited from {http://www.opengis.net/gml/3.2}AbstractGeometryType
    
    # Attribute id inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Attribute uomLabels inherited from {http://www.opengis.net/gml/3.2}AbstractGeometryType
    
    # Attribute srsDimension inherited from {http://www.opengis.net/gml/3.2}AbstractGeometryType

    _ElementMap = AbstractSurfaceType._ElementMap.copy()
    _ElementMap.update({
        __patches.name() : __patches
    })
    _AttributeMap = AbstractSurfaceType._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gml.addCategoryObject('typeBinding', u'SurfaceType', SurfaceType)


# Complex type ArcByCenterPointType with content type ELEMENT_ONLY
class ArcByCenterPointType (AbstractCurveSegmentType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'ArcByCenterPointType')
    # Base type is AbstractCurveSegmentType
    
    # Element {http://www.opengis.net/gml/3.2}pos uses Python identifier pos
    __pos = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'pos'), 'pos', '__httpwww_opengis_netgml3_2_ArcByCenterPointType_httpwww_opengis_netgml3_2pos', False)

    
    pos = property(__pos.value, __pos.set, None, None)

    
    # Element {http://www.opengis.net/gml/3.2}pointRep uses Python identifier pointRep
    __pointRep = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'pointRep'), 'pointRep', '__httpwww_opengis_netgml3_2_ArcByCenterPointType_httpwww_opengis_netgml3_2pointRep', False)

    
    pointRep = property(__pointRep.value, __pointRep.set, None, u'')

    
    # Element {http://www.opengis.net/gml/3.2}posList uses Python identifier posList
    __posList = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'posList'), 'posList', '__httpwww_opengis_netgml3_2_ArcByCenterPointType_httpwww_opengis_netgml3_2posList', False)

    
    posList = property(__posList.value, __posList.set, None, None)

    
    # Element {http://www.opengis.net/gml/3.2}radius uses Python identifier radius
    __radius = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'radius'), 'radius', '__httpwww_opengis_netgml3_2_ArcByCenterPointType_httpwww_opengis_netgml3_2radius', False)

    
    radius = property(__radius.value, __radius.set, None, None)

    
    # Element {http://www.opengis.net/gml/3.2}startAngle uses Python identifier startAngle
    __startAngle = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'startAngle'), 'startAngle', '__httpwww_opengis_netgml3_2_ArcByCenterPointType_httpwww_opengis_netgml3_2startAngle', False)

    
    startAngle = property(__startAngle.value, __startAngle.set, None, None)

    
    # Element {http://www.opengis.net/gml/3.2}coordinates uses Python identifier coordinates
    __coordinates = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'coordinates'), 'coordinates', '__httpwww_opengis_netgml3_2_ArcByCenterPointType_httpwww_opengis_netgml3_2coordinates', False)

    
    coordinates = property(__coordinates.value, __coordinates.set, None, u'')

    
    # Element {http://www.opengis.net/gml/3.2}endAngle uses Python identifier endAngle
    __endAngle = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'endAngle'), 'endAngle', '__httpwww_opengis_netgml3_2_ArcByCenterPointType_httpwww_opengis_netgml3_2endAngle', False)

    
    endAngle = property(__endAngle.value, __endAngle.set, None, None)

    
    # Element {http://www.opengis.net/gml/3.2}pointProperty uses Python identifier pointProperty
    __pointProperty = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'pointProperty'), 'pointProperty', '__httpwww_opengis_netgml3_2_ArcByCenterPointType_httpwww_opengis_netgml3_2pointProperty', False)

    
    pointProperty = property(__pointProperty.value, __pointProperty.set, None, u'This property element either references a point via the XLink-attributes or contains the point element. pointProperty is the predefined property which may be used by GML Application Schemas whenever a GML feature has a property with a value that is substitutable for Point.')

    
    # Attribute numDerivativesAtEnd inherited from {http://www.opengis.net/gml/3.2}AbstractCurveSegmentType
    
    # Attribute numDerivativesAtStart inherited from {http://www.opengis.net/gml/3.2}AbstractCurveSegmentType
    
    # Attribute interpolation uses Python identifier interpolation
    __interpolation = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'interpolation'), 'interpolation', '__httpwww_opengis_netgml3_2_ArcByCenterPointType_interpolation', CurveInterpolationType, fixed=True, unicode_default=u'circularArcCenterPointWithRadius')
    
    interpolation = property(__interpolation.value, __interpolation.set, None, None)

    
    # Attribute numDerivativeInterior inherited from {http://www.opengis.net/gml/3.2}AbstractCurveSegmentType
    
    # Attribute numArc uses Python identifier numArc
    __numArc = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'numArc'), 'numArc', '__httpwww_opengis_netgml3_2_ArcByCenterPointType_numArc', pyxb.binding.datatypes.integer, fixed=True, unicode_default=u'1', required=True)
    
    numArc = property(__numArc.value, __numArc.set, None, None)


    _ElementMap = AbstractCurveSegmentType._ElementMap.copy()
    _ElementMap.update({
        __pos.name() : __pos,
        __pointRep.name() : __pointRep,
        __posList.name() : __posList,
        __radius.name() : __radius,
        __startAngle.name() : __startAngle,
        __coordinates.name() : __coordinates,
        __endAngle.name() : __endAngle,
        __pointProperty.name() : __pointProperty
    })
    _AttributeMap = AbstractCurveSegmentType._AttributeMap.copy()
    _AttributeMap.update({
        __interpolation.name() : __interpolation,
        __numArc.name() : __numArc
    })
_Namespace_gml.addCategoryObject('typeBinding', u'ArcByCenterPointType', ArcByCenterPointType)


# Complex type CircleByCenterPointType with content type ELEMENT_ONLY
class CircleByCenterPointType (ArcByCenterPointType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'CircleByCenterPointType')
    # Base type is ArcByCenterPointType
    
    # Element pos ({http://www.opengis.net/gml/3.2}pos) inherited from {http://www.opengis.net/gml/3.2}ArcByCenterPointType
    
    # Element pointRep ({http://www.opengis.net/gml/3.2}pointRep) inherited from {http://www.opengis.net/gml/3.2}ArcByCenterPointType
    
    # Element posList ({http://www.opengis.net/gml/3.2}posList) inherited from {http://www.opengis.net/gml/3.2}ArcByCenterPointType
    
    # Element coordinates ({http://www.opengis.net/gml/3.2}coordinates) inherited from {http://www.opengis.net/gml/3.2}ArcByCenterPointType
    
    # Element radius ({http://www.opengis.net/gml/3.2}radius) inherited from {http://www.opengis.net/gml/3.2}ArcByCenterPointType
    
    # Element pointProperty ({http://www.opengis.net/gml/3.2}pointProperty) inherited from {http://www.opengis.net/gml/3.2}ArcByCenterPointType
    
    # Attribute numArc inherited from {http://www.opengis.net/gml/3.2}ArcByCenterPointType
    
    # Attribute numDerivativesAtEnd inherited from {http://www.opengis.net/gml/3.2}AbstractCurveSegmentType
    
    # Attribute interpolation inherited from {http://www.opengis.net/gml/3.2}ArcByCenterPointType
    
    # Attribute numDerivativeInterior inherited from {http://www.opengis.net/gml/3.2}AbstractCurveSegmentType
    
    # Attribute numDerivativesAtStart inherited from {http://www.opengis.net/gml/3.2}AbstractCurveSegmentType

    _ElementMap = ArcByCenterPointType._ElementMap.copy()
    _ElementMap.update({
        
    })
    _AttributeMap = ArcByCenterPointType._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gml.addCategoryObject('typeBinding', u'CircleByCenterPointType', CircleByCenterPointType)


# Complex type EX_BoundingPolygon_PropertyType with content type ELEMENT_ONLY
class EX_BoundingPolygon_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'EX_BoundingPolygon_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmd}EX_BoundingPolygon uses Python identifier EX_BoundingPolygon
    __EX_BoundingPolygon = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'EX_BoundingPolygon'), 'EX_BoundingPolygon', '__httpwww_isotc211_org2005gmd_EX_BoundingPolygon_PropertyType_httpwww_isotc211_org2005gmdEX_BoundingPolygon', False)

    
    EX_BoundingPolygon = property(__EX_BoundingPolygon.value, __EX_BoundingPolygon.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_isotc211_org2005gmd_EX_BoundingPolygon_PropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_isotc211_org2005gmd_EX_BoundingPolygon_PropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmd_EX_BoundingPolygon_PropertyType_httpwww_isotc211_org2005gconilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_isotc211_org2005gmd_EX_BoundingPolygon_PropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_isotc211_org2005gmd_EX_BoundingPolygon_PropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute uuidref uses Python identifier uuidref
    __uuidref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uuidref'), 'uuidref', '__httpwww_isotc211_org2005gmd_EX_BoundingPolygon_PropertyType_uuidref', pyxb.binding.datatypes.string)
    
    uuidref = property(__uuidref.value, __uuidref.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_isotc211_org2005gmd_EX_BoundingPolygon_PropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_isotc211_org2005gmd_EX_BoundingPolygon_PropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_isotc211_org2005gmd_EX_BoundingPolygon_PropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)


    _ElementMap = {
        __EX_BoundingPolygon.name() : __EX_BoundingPolygon
    }
    _AttributeMap = {
        __type.name() : __type,
        __actuate.name() : __actuate,
        __nilReason.name() : __nilReason,
        __role.name() : __role,
        __show.name() : __show,
        __uuidref.name() : __uuidref,
        __href.name() : __href,
        __title.name() : __title,
        __arcrole.name() : __arcrole
    }
_Namespace_gmd.addCategoryObject('typeBinding', u'EX_BoundingPolygon_PropertyType', EX_BoundingPolygon_PropertyType)


# Complex type AbstractRingType with content type EMPTY
class AbstractRingType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = True
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractRingType')
    # Base type is pyxb.binding.datatypes.anyType

    _ElementMap = {
        
    }
    _AttributeMap = {
        
    }
_Namespace_gml.addCategoryObject('typeBinding', u'AbstractRingType', AbstractRingType)


# Complex type LinearRingType with content type ELEMENT_ONLY
class LinearRingType (AbstractRingType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'LinearRingType')
    # Base type is AbstractRingType
    
    # Element {http://www.opengis.net/gml/3.2}pointRep uses Python identifier pointRep
    __pointRep = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'pointRep'), 'pointRep', '__httpwww_opengis_netgml3_2_LinearRingType_httpwww_opengis_netgml3_2pointRep', True)

    
    pointRep = property(__pointRep.value, __pointRep.set, None, u'')

    
    # Element {http://www.opengis.net/gml/3.2}pointProperty uses Python identifier pointProperty
    __pointProperty = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'pointProperty'), 'pointProperty', '__httpwww_opengis_netgml3_2_LinearRingType_httpwww_opengis_netgml3_2pointProperty', True)

    
    pointProperty = property(__pointProperty.value, __pointProperty.set, None, u'This property element either references a point via the XLink-attributes or contains the point element. pointProperty is the predefined property which may be used by GML Application Schemas whenever a GML feature has a property with a value that is substitutable for Point.')

    
    # Element {http://www.opengis.net/gml/3.2}posList uses Python identifier posList
    __posList = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'posList'), 'posList', '__httpwww_opengis_netgml3_2_LinearRingType_httpwww_opengis_netgml3_2posList', False)

    
    posList = property(__posList.value, __posList.set, None, None)

    
    # Element {http://www.opengis.net/gml/3.2}pos uses Python identifier pos
    __pos = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'pos'), 'pos', '__httpwww_opengis_netgml3_2_LinearRingType_httpwww_opengis_netgml3_2pos', True)

    
    pos = property(__pos.value, __pos.set, None, None)

    
    # Element {http://www.opengis.net/gml/3.2}coordinates uses Python identifier coordinates
    __coordinates = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'coordinates'), 'coordinates', '__httpwww_opengis_netgml3_2_LinearRingType_httpwww_opengis_netgml3_2coordinates', False)

    
    coordinates = property(__coordinates.value, __coordinates.set, None, u'')


    _ElementMap = AbstractRingType._ElementMap.copy()
    _ElementMap.update({
        __pointRep.name() : __pointRep,
        __pointProperty.name() : __pointProperty,
        __posList.name() : __posList,
        __pos.name() : __pos,
        __coordinates.name() : __coordinates
    })
    _AttributeMap = AbstractRingType._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gml.addCategoryObject('typeBinding', u'LinearRingType', LinearRingType)


# Complex type MD_Format_PropertyType with content type ELEMENT_ONLY
class MD_Format_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_Format_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmd}MD_Format uses Python identifier MD_Format
    __MD_Format = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_Format'), 'MD_Format', '__httpwww_isotc211_org2005gmd_MD_Format_PropertyType_httpwww_isotc211_org2005gmdMD_Format', False)

    
    MD_Format = property(__MD_Format.value, __MD_Format.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_isotc211_org2005gmd_MD_Format_PropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_isotc211_org2005gmd_MD_Format_PropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmd_MD_Format_PropertyType_httpwww_isotc211_org2005gconilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_isotc211_org2005gmd_MD_Format_PropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_isotc211_org2005gmd_MD_Format_PropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_isotc211_org2005gmd_MD_Format_PropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute uuidref uses Python identifier uuidref
    __uuidref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uuidref'), 'uuidref', '__httpwww_isotc211_org2005gmd_MD_Format_PropertyType_uuidref', pyxb.binding.datatypes.string)
    
    uuidref = property(__uuidref.value, __uuidref.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_isotc211_org2005gmd_MD_Format_PropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_isotc211_org2005gmd_MD_Format_PropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)


    _ElementMap = {
        __MD_Format.name() : __MD_Format
    }
    _AttributeMap = {
        __role.name() : __role,
        __type.name() : __type,
        __nilReason.name() : __nilReason,
        __title.name() : __title,
        __show.name() : __show,
        __actuate.name() : __actuate,
        __uuidref.name() : __uuidref,
        __href.name() : __href,
        __arcrole.name() : __arcrole
    }
_Namespace_gmd.addCategoryObject('typeBinding', u'MD_Format_PropertyType', MD_Format_PropertyType)


# Complex type DS_Sensor_PropertyType with content type ELEMENT_ONLY
class DS_Sensor_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'DS_Sensor_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmd}DS_Sensor uses Python identifier DS_Sensor
    __DS_Sensor = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'DS_Sensor'), 'DS_Sensor', '__httpwww_isotc211_org2005gmd_DS_Sensor_PropertyType_httpwww_isotc211_org2005gmdDS_Sensor', False)

    
    DS_Sensor = property(__DS_Sensor.value, __DS_Sensor.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_isotc211_org2005gmd_DS_Sensor_PropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_isotc211_org2005gmd_DS_Sensor_PropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_isotc211_org2005gmd_DS_Sensor_PropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmd_DS_Sensor_PropertyType_httpwww_isotc211_org2005gconilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute uuidref uses Python identifier uuidref
    __uuidref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uuidref'), 'uuidref', '__httpwww_isotc211_org2005gmd_DS_Sensor_PropertyType_uuidref', pyxb.binding.datatypes.string)
    
    uuidref = property(__uuidref.value, __uuidref.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_isotc211_org2005gmd_DS_Sensor_PropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_isotc211_org2005gmd_DS_Sensor_PropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_isotc211_org2005gmd_DS_Sensor_PropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_isotc211_org2005gmd_DS_Sensor_PropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)


    _ElementMap = {
        __DS_Sensor.name() : __DS_Sensor
    }
    _AttributeMap = {
        __type.name() : __type,
        __arcrole.name() : __arcrole,
        __role.name() : __role,
        __nilReason.name() : __nilReason,
        __uuidref.name() : __uuidref,
        __show.name() : __show,
        __actuate.name() : __actuate,
        __title.name() : __title,
        __href.name() : __href
    }
_Namespace_gmd.addCategoryObject('typeBinding', u'DS_Sensor_PropertyType', DS_Sensor_PropertyType)


# Complex type DQ_AbsoluteExternalPositionalAccuracy_Type with content type ELEMENT_ONLY
class DQ_AbsoluteExternalPositionalAccuracy_Type (AbstractDQ_PositionalAccuracy_Type):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'DQ_AbsoluteExternalPositionalAccuracy_Type')
    # Base type is AbstractDQ_PositionalAccuracy_Type
    
    # Element evaluationMethodDescription ({http://www.isotc211.org/2005/gmd}evaluationMethodDescription) inherited from {http://www.isotc211.org/2005/gmd}AbstractDQ_Element_Type
    
    # Element measureDescription ({http://www.isotc211.org/2005/gmd}measureDescription) inherited from {http://www.isotc211.org/2005/gmd}AbstractDQ_Element_Type
    
    # Element evaluationProcedure ({http://www.isotc211.org/2005/gmd}evaluationProcedure) inherited from {http://www.isotc211.org/2005/gmd}AbstractDQ_Element_Type
    
    # Element evaluationMethodType ({http://www.isotc211.org/2005/gmd}evaluationMethodType) inherited from {http://www.isotc211.org/2005/gmd}AbstractDQ_Element_Type
    
    # Element dateTime ({http://www.isotc211.org/2005/gmd}dateTime) inherited from {http://www.isotc211.org/2005/gmd}AbstractDQ_Element_Type
    
    # Element result ({http://www.isotc211.org/2005/gmd}result) inherited from {http://www.isotc211.org/2005/gmd}AbstractDQ_Element_Type
    
    # Element nameOfMeasure ({http://www.isotc211.org/2005/gmd}nameOfMeasure) inherited from {http://www.isotc211.org/2005/gmd}AbstractDQ_Element_Type
    
    # Element measureIdentification ({http://www.isotc211.org/2005/gmd}measureIdentification) inherited from {http://www.isotc211.org/2005/gmd}AbstractDQ_Element_Type
    
    # Attribute id inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type
    
    # Attribute uuid inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type

    _ElementMap = AbstractDQ_PositionalAccuracy_Type._ElementMap.copy()
    _ElementMap.update({
        
    })
    _AttributeMap = AbstractDQ_PositionalAccuracy_Type._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gmd.addCategoryObject('typeBinding', u'DQ_AbsoluteExternalPositionalAccuracy_Type', DQ_AbsoluteExternalPositionalAccuracy_Type)


# Complex type GeographicCRSType with content type ELEMENT_ONLY
class GeographicCRSType (AbstractCRSType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'GeographicCRSType')
    # Base type is AbstractCRSType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element {http://www.opengis.net/gml/3.2}usesEllipsoidalCS uses Python identifier usesEllipsoidalCS
    __usesEllipsoidalCS = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'usesEllipsoidalCS'), 'usesEllipsoidalCS', '__httpwww_opengis_netgml3_2_GeographicCRSType_httpwww_opengis_netgml3_2usesEllipsoidalCS', False)

    
    usesEllipsoidalCS = property(__usesEllipsoidalCS.value, __usesEllipsoidalCS.set, None, u'')

    
    # Element {http://www.opengis.net/gml/3.2}usesGeodeticDatum uses Python identifier usesGeodeticDatum
    __usesGeodeticDatum = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'usesGeodeticDatum'), 'usesGeodeticDatum', '__httpwww_opengis_netgml3_2_GeographicCRSType_httpwww_opengis_netgml3_2usesGeodeticDatum', False)

    
    usesGeodeticDatum = property(__usesGeodeticDatum.value, __usesGeodeticDatum.set, None, u'')

    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element domainOfValidity ({http://www.opengis.net/gml/3.2}domainOfValidity) inherited from {http://www.opengis.net/gml/3.2}AbstractCRSType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element scope ({http://www.opengis.net/gml/3.2}scope) inherited from {http://www.opengis.net/gml/3.2}AbstractCRSType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element remarks ({http://www.opengis.net/gml/3.2}remarks) inherited from {http://www.opengis.net/gml/3.2}DefinitionType
    
    # Attribute id_ inherited from {http://www.opengis.net/gml/3.2}DefinitionBaseType

    _ElementMap = AbstractCRSType._ElementMap.copy()
    _ElementMap.update({
        __usesEllipsoidalCS.name() : __usesEllipsoidalCS,
        __usesGeodeticDatum.name() : __usesGeodeticDatum
    })
    _AttributeMap = AbstractCRSType._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gml.addCategoryObject('typeBinding', u'GeographicCRSType', GeographicCRSType)


# Complex type DirectedFacePropertyType with content type ELEMENT_ONLY
class DirectedFacePropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'DirectedFacePropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.opengis.net/gml/3.2}Face uses Python identifier Face
    __Face = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'Face'), 'Face', '__httpwww_opengis_netgml3_2_DirectedFacePropertyType_httpwww_opengis_netgml3_2Face', False)

    
    Face = property(__Face.value, __Face.set, None, u'gml:Face represents the 2-dimensional topology primitive.\nThe topological boundary of a face (gml:directedEdge) consists of a sequence of directed edges. If provided, the aggregationType attribute shall have the value "sequence".\nThe optional coboundary of a face (gml:directedTopoSolid) is a pair of directed solids which are bounded by this face. A positively directed solid corresponds to a solid which lies in the direction of the negatively directed normal to the face in any geometric realisation. \nA face may optionally be realised by a 2-dimensional geometric primitive (gml:surfaceProperty).')

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_opengis_netgml3_2_DirectedFacePropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute orientation uses Python identifier orientation
    __orientation = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'orientation'), 'orientation', '__httpwww_opengis_netgml3_2_DirectedFacePropertyType_orientation', SignType, unicode_default=u'+')
    
    orientation = property(__orientation.value, __orientation.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_opengis_netgml3_2_DirectedFacePropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_opengis_netgml3_2_DirectedFacePropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_opengis_netgml3_2_DirectedFacePropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.opengis.net/gml/3.2}remoteSchema uses Python identifier remoteSchema
    __remoteSchema = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'remoteSchema'), 'remoteSchema', '__httpwww_opengis_netgml3_2_DirectedFacePropertyType_httpwww_opengis_netgml3_2remoteSchema', pyxb.binding.datatypes.anyURI)
    
    remoteSchema = property(__remoteSchema.value, __remoteSchema.set, None, u'')

    
    # Attribute nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'nilReason'), 'nilReason', '__httpwww_opengis_netgml3_2_DirectedFacePropertyType_nilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_opengis_netgml3_2_DirectedFacePropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_opengis_netgml3_2_DirectedFacePropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_opengis_netgml3_2_DirectedFacePropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute owns uses Python identifier owns
    __owns = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'owns'), 'owns', '__httpwww_opengis_netgml3_2_DirectedFacePropertyType_owns', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    owns = property(__owns.value, __owns.set, None, None)


    _ElementMap = {
        __Face.name() : __Face
    }
    _AttributeMap = {
        __href.name() : __href,
        __orientation.name() : __orientation,
        __title.name() : __title,
        __role.name() : __role,
        __type.name() : __type,
        __remoteSchema.name() : __remoteSchema,
        __nilReason.name() : __nilReason,
        __show.name() : __show,
        __arcrole.name() : __arcrole,
        __actuate.name() : __actuate,
        __owns.name() : __owns
    }
_Namespace_gml.addCategoryObject('typeBinding', u'DirectedFacePropertyType', DirectedFacePropertyType)


# Complex type GridLengthType with content type SIMPLE
class GridLengthType (MeasureType):
    _TypeDefinition = pyxb.binding.datatypes.double
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'GridLengthType')
    # Base type is MeasureType
    
    # Attribute uom inherited from {http://www.opengis.net/gml/3.2}MeasureType

    _ElementMap = MeasureType._ElementMap.copy()
    _ElementMap.update({
        
    })
    _AttributeMap = MeasureType._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gml.addCategoryObject('typeBinding', u'GridLengthType', GridLengthType)


# Complex type AbstractCurveType with content type ELEMENT_ONLY
class AbstractCurveType (AbstractGeometricPrimitiveType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = True
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractCurveType')
    # Base type is AbstractGeometricPrimitiveType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Attribute srsName inherited from {http://www.opengis.net/gml/3.2}AbstractGeometryType
    
    # Attribute axisLabels inherited from {http://www.opengis.net/gml/3.2}AbstractGeometryType
    
    # Attribute id inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Attribute uomLabels inherited from {http://www.opengis.net/gml/3.2}AbstractGeometryType
    
    # Attribute srsDimension inherited from {http://www.opengis.net/gml/3.2}AbstractGeometryType

    _ElementMap = AbstractGeometricPrimitiveType._ElementMap.copy()
    _ElementMap.update({
        
    })
    _AttributeMap = AbstractGeometricPrimitiveType._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gml.addCategoryObject('typeBinding', u'AbstractCurveType', AbstractCurveType)


# Complex type CompositeCurveType with content type ELEMENT_ONLY
class CompositeCurveType (AbstractCurveType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'CompositeCurveType')
    # Base type is AbstractCurveType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element {http://www.opengis.net/gml/3.2}curveMember uses Python identifier curveMember
    __curveMember = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'curveMember'), 'curveMember', '__httpwww_opengis_netgml3_2_CompositeCurveType_httpwww_opengis_netgml3_2curveMember', True)

    
    curveMember = property(__curveMember.value, __curveMember.set, None, None)

    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Attribute uomLabels inherited from {http://www.opengis.net/gml/3.2}AbstractGeometryType
    
    # Attribute srsName inherited from {http://www.opengis.net/gml/3.2}AbstractGeometryType
    
    # Attribute id inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Attribute axisLabels inherited from {http://www.opengis.net/gml/3.2}AbstractGeometryType
    
    # Attribute srsDimension inherited from {http://www.opengis.net/gml/3.2}AbstractGeometryType
    
    # Attribute aggregationType uses Python identifier aggregationType
    __aggregationType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'aggregationType'), 'aggregationType', '__httpwww_opengis_netgml3_2_CompositeCurveType_aggregationType', AggregationType)
    
    aggregationType = property(__aggregationType.value, __aggregationType.set, None, None)


    _ElementMap = AbstractCurveType._ElementMap.copy()
    _ElementMap.update({
        __curveMember.name() : __curveMember
    })
    _AttributeMap = AbstractCurveType._AttributeMap.copy()
    _AttributeMap.update({
        __aggregationType.name() : __aggregationType
    })
_Namespace_gml.addCategoryObject('typeBinding', u'CompositeCurveType', CompositeCurveType)


# Complex type UserDefinedCSType with content type ELEMENT_ONLY
class UserDefinedCSType (AbstractCoordinateSystemType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'UserDefinedCSType')
    # Base type is AbstractCoordinateSystemType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element axis ({http://www.opengis.net/gml/3.2}axis) inherited from {http://www.opengis.net/gml/3.2}AbstractCoordinateSystemType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element remarks ({http://www.opengis.net/gml/3.2}remarks) inherited from {http://www.opengis.net/gml/3.2}DefinitionType
    
    # Attribute aggregationType inherited from {http://www.opengis.net/gml/3.2}AbstractCoordinateSystemType
    
    # Attribute id_ inherited from {http://www.opengis.net/gml/3.2}DefinitionBaseType

    _ElementMap = AbstractCoordinateSystemType._ElementMap.copy()
    _ElementMap.update({
        
    })
    _AttributeMap = AbstractCoordinateSystemType._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gml.addCategoryObject('typeBinding', u'UserDefinedCSType', UserDefinedCSType)


# Complex type MD_ContentInformation_PropertyType with content type ELEMENT_ONLY
class MD_ContentInformation_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_ContentInformation_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmd}AbstractMD_ContentInformation uses Python identifier AbstractMD_ContentInformation
    __AbstractMD_ContentInformation = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'AbstractMD_ContentInformation'), 'AbstractMD_ContentInformation', '__httpwww_isotc211_org2005gmd_MD_ContentInformation_PropertyType_httpwww_isotc211_org2005gmdAbstractMD_ContentInformation', False)

    
    AbstractMD_ContentInformation = property(__AbstractMD_ContentInformation.value, __AbstractMD_ContentInformation.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_isotc211_org2005gmd_MD_ContentInformation_PropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_isotc211_org2005gmd_MD_ContentInformation_PropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_isotc211_org2005gmd_MD_ContentInformation_PropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_isotc211_org2005gmd_MD_ContentInformation_PropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_isotc211_org2005gmd_MD_ContentInformation_PropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute uuidref uses Python identifier uuidref
    __uuidref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uuidref'), 'uuidref', '__httpwww_isotc211_org2005gmd_MD_ContentInformation_PropertyType_uuidref', pyxb.binding.datatypes.string)
    
    uuidref = property(__uuidref.value, __uuidref.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_isotc211_org2005gmd_MD_ContentInformation_PropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmd_MD_ContentInformation_PropertyType_httpwww_isotc211_org2005gconilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_isotc211_org2005gmd_MD_ContentInformation_PropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)


    _ElementMap = {
        __AbstractMD_ContentInformation.name() : __AbstractMD_ContentInformation
    }
    _AttributeMap = {
        __type.name() : __type,
        __show.name() : __show,
        __actuate.name() : __actuate,
        __href.name() : __href,
        __title.name() : __title,
        __uuidref.name() : __uuidref,
        __arcrole.name() : __arcrole,
        __nilReason.name() : __nilReason,
        __role.name() : __role
    }
_Namespace_gmd.addCategoryObject('typeBinding', u'MD_ContentInformation_PropertyType', MD_ContentInformation_PropertyType)


# Complex type DQ_ThematicClassificationCorrectness_PropertyType with content type ELEMENT_ONLY
class DQ_ThematicClassificationCorrectness_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'DQ_ThematicClassificationCorrectness_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmd}DQ_ThematicClassificationCorrectness uses Python identifier DQ_ThematicClassificationCorrectness
    __DQ_ThematicClassificationCorrectness = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'DQ_ThematicClassificationCorrectness'), 'DQ_ThematicClassificationCorrectness', '__httpwww_isotc211_org2005gmd_DQ_ThematicClassificationCorrectness_PropertyType_httpwww_isotc211_org2005gmdDQ_ThematicClassificationCorrectness', False)

    
    DQ_ThematicClassificationCorrectness = property(__DQ_ThematicClassificationCorrectness.value, __DQ_ThematicClassificationCorrectness.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_isotc211_org2005gmd_DQ_ThematicClassificationCorrectness_PropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_isotc211_org2005gmd_DQ_ThematicClassificationCorrectness_PropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_isotc211_org2005gmd_DQ_ThematicClassificationCorrectness_PropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_isotc211_org2005gmd_DQ_ThematicClassificationCorrectness_PropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_isotc211_org2005gmd_DQ_ThematicClassificationCorrectness_PropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute uuidref uses Python identifier uuidref
    __uuidref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uuidref'), 'uuidref', '__httpwww_isotc211_org2005gmd_DQ_ThematicClassificationCorrectness_PropertyType_uuidref', pyxb.binding.datatypes.string)
    
    uuidref = property(__uuidref.value, __uuidref.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_isotc211_org2005gmd_DQ_ThematicClassificationCorrectness_PropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_isotc211_org2005gmd_DQ_ThematicClassificationCorrectness_PropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmd_DQ_ThematicClassificationCorrectness_PropertyType_httpwww_isotc211_org2005gconilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)


    _ElementMap = {
        __DQ_ThematicClassificationCorrectness.name() : __DQ_ThematicClassificationCorrectness
    }
    _AttributeMap = {
        __type.name() : __type,
        __show.name() : __show,
        __actuate.name() : __actuate,
        __href.name() : __href,
        __title.name() : __title,
        __uuidref.name() : __uuidref,
        __arcrole.name() : __arcrole,
        __role.name() : __role,
        __nilReason.name() : __nilReason
    }
_Namespace_gmd.addCategoryObject('typeBinding', u'DQ_ThematicClassificationCorrectness_PropertyType', DQ_ThematicClassificationCorrectness_PropertyType)


# Complex type GeneralConversionPropertyType with content type ELEMENT_ONLY
class GeneralConversionPropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'GeneralConversionPropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.opengis.net/gml/3.2}AbstractGeneralConversion uses Python identifier AbstractGeneralConversion
    __AbstractGeneralConversion = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractGeneralConversion'), 'AbstractGeneralConversion', '__httpwww_opengis_netgml3_2_GeneralConversionPropertyType_httpwww_opengis_netgml3_2AbstractGeneralConversion', False)

    
    AbstractGeneralConversion = property(__AbstractGeneralConversion.value, __AbstractGeneralConversion.set, None, u'gm:AbstractGeneralConversion is an abstract operation on coordinates that does not include any change of datum. The best-known example of a coordinate conversion is a map projection. The parameters describing coordinate conversions are defined rather than empirically derived. Note that some conversions have no parameters. The operationVersion, sourceCRS, and targetCRS elements are omitted in a coordinate conversion.\nThis abstract complex type is expected to be extended for well-known operation methods with many Conversion instances, in GML Application Schemas that define operation-method-specialized element names and contents. This conversion uses an operation method, usually with associated parameter values. However, operation methods and parameter values are directly associated with concrete subtypes, not with this abstract type. All concrete types derived from this type shall extend this type to include a "usesMethod" element that references the "OperationMethod" element. Similarly, all concrete types derived from this type shall extend this type to include zero or more elements each named "uses...Value" that each use the type of an element substitutable for the "AbstractGeneralParameterValue" element.')

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_opengis_netgml3_2_GeneralConversionPropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.opengis.net/gml/3.2}remoteSchema uses Python identifier remoteSchema
    __remoteSchema = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'remoteSchema'), 'remoteSchema', '__httpwww_opengis_netgml3_2_GeneralConversionPropertyType_httpwww_opengis_netgml3_2remoteSchema', pyxb.binding.datatypes.anyURI)
    
    remoteSchema = property(__remoteSchema.value, __remoteSchema.set, None, u'')

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_opengis_netgml3_2_GeneralConversionPropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_opengis_netgml3_2_GeneralConversionPropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'nilReason'), 'nilReason', '__httpwww_opengis_netgml3_2_GeneralConversionPropertyType_nilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_opengis_netgml3_2_GeneralConversionPropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_opengis_netgml3_2_GeneralConversionPropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_opengis_netgml3_2_GeneralConversionPropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_opengis_netgml3_2_GeneralConversionPropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)


    _ElementMap = {
        __AbstractGeneralConversion.name() : __AbstractGeneralConversion
    }
    _AttributeMap = {
        __show.name() : __show,
        __remoteSchema.name() : __remoteSchema,
        __actuate.name() : __actuate,
        __href.name() : __href,
        __nilReason.name() : __nilReason,
        __type.name() : __type,
        __title.name() : __title,
        __arcrole.name() : __arcrole,
        __role.name() : __role
    }
_Namespace_gml.addCategoryObject('typeBinding', u'GeneralConversionPropertyType', GeneralConversionPropertyType)


# Complex type MD_Metadata_PropertyType with content type ELEMENT_ONLY
class MD_Metadata_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_Metadata_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmd}MD_Metadata uses Python identifier MD_Metadata
    __MD_Metadata = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_Metadata'), 'MD_Metadata', '__httpwww_isotc211_org2005gmd_MD_Metadata_PropertyType_httpwww_isotc211_org2005gmdMD_Metadata', False)

    
    MD_Metadata = property(__MD_Metadata.value, __MD_Metadata.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_isotc211_org2005gmd_MD_Metadata_PropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_isotc211_org2005gmd_MD_Metadata_PropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_isotc211_org2005gmd_MD_Metadata_PropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_isotc211_org2005gmd_MD_Metadata_PropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute uuidref uses Python identifier uuidref
    __uuidref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uuidref'), 'uuidref', '__httpwww_isotc211_org2005gmd_MD_Metadata_PropertyType_uuidref', pyxb.binding.datatypes.string)
    
    uuidref = property(__uuidref.value, __uuidref.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_isotc211_org2005gmd_MD_Metadata_PropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_isotc211_org2005gmd_MD_Metadata_PropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmd_MD_Metadata_PropertyType_httpwww_isotc211_org2005gconilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_isotc211_org2005gmd_MD_Metadata_PropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)


    _ElementMap = {
        __MD_Metadata.name() : __MD_Metadata
    }
    _AttributeMap = {
        __type.name() : __type,
        __show.name() : __show,
        __href.name() : __href,
        __actuate.name() : __actuate,
        __uuidref.name() : __uuidref,
        __arcrole.name() : __arcrole,
        __role.name() : __role,
        __nilReason.name() : __nilReason,
        __title.name() : __title
    }
_Namespace_gmd.addCategoryObject('typeBinding', u'MD_Metadata_PropertyType', MD_Metadata_PropertyType)


# Complex type MD_Distribution_Type with content type ELEMENT_ONLY
class MD_Distribution_Type (AbstractObject_Type):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_Distribution_Type')
    # Base type is AbstractObject_Type
    
    # Element {http://www.isotc211.org/2005/gmd}transferOptions uses Python identifier transferOptions
    __transferOptions = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'transferOptions'), 'transferOptions', '__httpwww_isotc211_org2005gmd_MD_Distribution_Type_httpwww_isotc211_org2005gmdtransferOptions', True)

    
    transferOptions = property(__transferOptions.value, __transferOptions.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}distributionFormat uses Python identifier distributionFormat
    __distributionFormat = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'distributionFormat'), 'distributionFormat', '__httpwww_isotc211_org2005gmd_MD_Distribution_Type_httpwww_isotc211_org2005gmddistributionFormat', True)

    
    distributionFormat = property(__distributionFormat.value, __distributionFormat.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}distributor uses Python identifier distributor
    __distributor = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'distributor'), 'distributor', '__httpwww_isotc211_org2005gmd_MD_Distribution_Type_httpwww_isotc211_org2005gmddistributor', True)

    
    distributor = property(__distributor.value, __distributor.set, None, None)

    
    # Attribute id inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type
    
    # Attribute uuid inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type

    _ElementMap = AbstractObject_Type._ElementMap.copy()
    _ElementMap.update({
        __transferOptions.name() : __transferOptions,
        __distributionFormat.name() : __distributionFormat,
        __distributor.name() : __distributor
    })
    _AttributeMap = AbstractObject_Type._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gmd.addCategoryObject('typeBinding', u'MD_Distribution_Type', MD_Distribution_Type)


# Complex type MD_Dimension_Type with content type ELEMENT_ONLY
class MD_Dimension_Type (AbstractObject_Type):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_Dimension_Type')
    # Base type is AbstractObject_Type
    
    # Element {http://www.isotc211.org/2005/gmd}resolution uses Python identifier resolution
    __resolution = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'resolution'), 'resolution', '__httpwww_isotc211_org2005gmd_MD_Dimension_Type_httpwww_isotc211_org2005gmdresolution', False)

    
    resolution = property(__resolution.value, __resolution.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}dimensionName uses Python identifier dimensionName
    __dimensionName = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'dimensionName'), 'dimensionName', '__httpwww_isotc211_org2005gmd_MD_Dimension_Type_httpwww_isotc211_org2005gmddimensionName', False)

    
    dimensionName = property(__dimensionName.value, __dimensionName.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}dimensionSize uses Python identifier dimensionSize
    __dimensionSize = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'dimensionSize'), 'dimensionSize', '__httpwww_isotc211_org2005gmd_MD_Dimension_Type_httpwww_isotc211_org2005gmddimensionSize', False)

    
    dimensionSize = property(__dimensionSize.value, __dimensionSize.set, None, None)

    
    # Attribute id inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type
    
    # Attribute uuid inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type

    _ElementMap = AbstractObject_Type._ElementMap.copy()
    _ElementMap.update({
        __resolution.name() : __resolution,
        __dimensionName.name() : __dimensionName,
        __dimensionSize.name() : __dimensionSize
    })
    _AttributeMap = AbstractObject_Type._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gmd.addCategoryObject('typeBinding', u'MD_Dimension_Type', MD_Dimension_Type)


# Complex type MD_Medium_PropertyType with content type ELEMENT_ONLY
class MD_Medium_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_Medium_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmd}MD_Medium uses Python identifier MD_Medium
    __MD_Medium = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_Medium'), 'MD_Medium', '__httpwww_isotc211_org2005gmd_MD_Medium_PropertyType_httpwww_isotc211_org2005gmdMD_Medium', False)

    
    MD_Medium = property(__MD_Medium.value, __MD_Medium.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_isotc211_org2005gmd_MD_Medium_PropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_isotc211_org2005gmd_MD_Medium_PropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_isotc211_org2005gmd_MD_Medium_PropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmd_MD_Medium_PropertyType_httpwww_isotc211_org2005gconilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_isotc211_org2005gmd_MD_Medium_PropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute uuidref uses Python identifier uuidref
    __uuidref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uuidref'), 'uuidref', '__httpwww_isotc211_org2005gmd_MD_Medium_PropertyType_uuidref', pyxb.binding.datatypes.string)
    
    uuidref = property(__uuidref.value, __uuidref.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_isotc211_org2005gmd_MD_Medium_PropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_isotc211_org2005gmd_MD_Medium_PropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_isotc211_org2005gmd_MD_Medium_PropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")


    _ElementMap = {
        __MD_Medium.name() : __MD_Medium
    }
    _AttributeMap = {
        __type.name() : __type,
        __arcrole.name() : __arcrole,
        __role.name() : __role,
        __nilReason.name() : __nilReason,
        __title.name() : __title,
        __uuidref.name() : __uuidref,
        __show.name() : __show,
        __href.name() : __href,
        __actuate.name() : __actuate
    }
_Namespace_gmd.addCategoryObject('typeBinding', u'MD_Medium_PropertyType', MD_Medium_PropertyType)


# Complex type GeometryPropertyType with content type ELEMENT_ONLY
class GeometryPropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'GeometryPropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.opengis.net/gml/3.2}AbstractGeometry uses Python identifier AbstractGeometry
    __AbstractGeometry = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractGeometry'), 'AbstractGeometry', '__httpwww_opengis_netgml3_2_GeometryPropertyType_httpwww_opengis_netgml3_2AbstractGeometry', False)

    
    AbstractGeometry = property(__AbstractGeometry.value, __AbstractGeometry.set, None, u'The AbstractGeometry element is the abstract head of the substitution group for all geometry elements of GML. This includes pre-defined and user-defined geometry elements. Any geometry element shall be a direct or indirect extension/restriction of AbstractGeometryType and shall be directly or indirectly in the substitution group of AbstractGeometry.')

    
    # Attribute owns uses Python identifier owns
    __owns = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'owns'), 'owns', '__httpwww_opengis_netgml3_2_GeometryPropertyType_owns', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    owns = property(__owns.value, __owns.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_opengis_netgml3_2_GeometryPropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_opengis_netgml3_2_GeometryPropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_opengis_netgml3_2_GeometryPropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_opengis_netgml3_2_GeometryPropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'nilReason'), 'nilReason', '__httpwww_opengis_netgml3_2_GeometryPropertyType_nilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.opengis.net/gml/3.2}remoteSchema uses Python identifier remoteSchema
    __remoteSchema = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'remoteSchema'), 'remoteSchema', '__httpwww_opengis_netgml3_2_GeometryPropertyType_httpwww_opengis_netgml3_2remoteSchema', pyxb.binding.datatypes.anyURI)
    
    remoteSchema = property(__remoteSchema.value, __remoteSchema.set, None, u'')

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_opengis_netgml3_2_GeometryPropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_opengis_netgml3_2_GeometryPropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_opengis_netgml3_2_GeometryPropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)


    _ElementMap = {
        __AbstractGeometry.name() : __AbstractGeometry
    }
    _AttributeMap = {
        __owns.name() : __owns,
        __role.name() : __role,
        __actuate.name() : __actuate,
        __href.name() : __href,
        __title.name() : __title,
        __nilReason.name() : __nilReason,
        __remoteSchema.name() : __remoteSchema,
        __arcrole.name() : __arcrole,
        __show.name() : __show,
        __type.name() : __type
    }
_Namespace_gml.addCategoryObject('typeBinding', u'GeometryPropertyType', GeometryPropertyType)


# Complex type MultiplicityRange_Type with content type ELEMENT_ONLY
class MultiplicityRange_Type (AbstractObject_Type):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gco, u'MultiplicityRange_Type')
    # Base type is AbstractObject_Type
    
    # Element {http://www.isotc211.org/2005/gco}upper uses Python identifier upper
    __upper = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'upper'), 'upper', '__httpwww_isotc211_org2005gco_MultiplicityRange_Type_httpwww_isotc211_org2005gcoupper', False)

    
    upper = property(__upper.value, __upper.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gco}lower uses Python identifier lower
    __lower = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'lower'), 'lower', '__httpwww_isotc211_org2005gco_MultiplicityRange_Type_httpwww_isotc211_org2005gcolower', False)

    
    lower = property(__lower.value, __lower.set, None, None)

    
    # Attribute id inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type
    
    # Attribute uuid inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type

    _ElementMap = AbstractObject_Type._ElementMap.copy()
    _ElementMap.update({
        __upper.name() : __upper,
        __lower.name() : __lower
    })
    _AttributeMap = AbstractObject_Type._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gco.addCategoryObject('typeBinding', u'MultiplicityRange_Type', MultiplicityRange_Type)


# Complex type ObjectReference_PropertyType with content type EMPTY
class ObjectReference_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gco, u'ObjectReference_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_isotc211_org2005gco_ObjectReference_PropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_isotc211_org2005gco_ObjectReference_PropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_isotc211_org2005gco_ObjectReference_PropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_isotc211_org2005gco_ObjectReference_PropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_isotc211_org2005gco_ObjectReference_PropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_isotc211_org2005gco_ObjectReference_PropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute uuidref uses Python identifier uuidref
    __uuidref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uuidref'), 'uuidref', '__httpwww_isotc211_org2005gco_ObjectReference_PropertyType_uuidref', pyxb.binding.datatypes.string)
    
    uuidref = property(__uuidref.value, __uuidref.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gco_ObjectReference_PropertyType_httpwww_isotc211_org2005gconilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_isotc211_org2005gco_ObjectReference_PropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")


    _ElementMap = {
        
    }
    _AttributeMap = {
        __title.name() : __title,
        __type.name() : __type,
        __href.name() : __href,
        __arcrole.name() : __arcrole,
        __actuate.name() : __actuate,
        __role.name() : __role,
        __uuidref.name() : __uuidref,
        __nilReason.name() : __nilReason,
        __show.name() : __show
    }
_Namespace_gco.addCategoryObject('typeBinding', u'ObjectReference_PropertyType', ObjectReference_PropertyType)


# Complex type ResultType with content type ELEMENT_ONLY
class ResultType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'ResultType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute {http://www.opengis.net/gml/3.2}remoteSchema uses Python identifier remoteSchema
    __remoteSchema = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'remoteSchema'), 'remoteSchema', '__httpwww_opengis_netgml3_2_ResultType_httpwww_opengis_netgml3_2remoteSchema', pyxb.binding.datatypes.anyURI)
    
    remoteSchema = property(__remoteSchema.value, __remoteSchema.set, None, u'')

    
    # Attribute owns uses Python identifier owns
    __owns = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'owns'), 'owns', '__httpwww_opengis_netgml3_2_ResultType_owns', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    owns = property(__owns.value, __owns.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_opengis_netgml3_2_ResultType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_opengis_netgml3_2_ResultType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_opengis_netgml3_2_ResultType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_opengis_netgml3_2_ResultType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'nilReason'), 'nilReason', '__httpwww_opengis_netgml3_2_ResultType_nilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_opengis_netgml3_2_ResultType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_opengis_netgml3_2_ResultType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_opengis_netgml3_2_ResultType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    _HasWildcardElement = True

    _ElementMap = {
        
    }
    _AttributeMap = {
        __remoteSchema.name() : __remoteSchema,
        __owns.name() : __owns,
        __arcrole.name() : __arcrole,
        __role.name() : __role,
        __show.name() : __show,
        __title.name() : __title,
        __nilReason.name() : __nilReason,
        __actuate.name() : __actuate,
        __href.name() : __href,
        __type.name() : __type
    }
_Namespace_gml.addCategoryObject('typeBinding', u'ResultType', ResultType)


# Complex type ArrayType with content type ELEMENT_ONLY
class ArrayType (AbstractGMLType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'ArrayType')
    # Base type is AbstractGMLType
    
    # Element {http://www.opengis.net/gml/3.2}members uses Python identifier members
    __members = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'members'), 'members', '__httpwww_opengis_netgml3_2_ArrayType_httpwww_opengis_netgml3_2members', False)

    
    members = property(__members.value, __members.set, None, u'')

    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Attribute id inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType

    _ElementMap = AbstractGMLType._ElementMap.copy()
    _ElementMap.update({
        __members.name() : __members
    })
    _AttributeMap = AbstractGMLType._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gml.addCategoryObject('typeBinding', u'ArrayType', ArrayType)


# Complex type AbstractGeneralOperationParameterPropertyType with content type ELEMENT_ONLY
class AbstractGeneralOperationParameterPropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractGeneralOperationParameterPropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.opengis.net/gml/3.2}AbstractGeneralOperationParameter uses Python identifier AbstractGeneralOperationParameter
    __AbstractGeneralOperationParameter = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractGeneralOperationParameter'), 'AbstractGeneralOperationParameter', '__httpwww_opengis_netgml3_2_AbstractGeneralOperationParameterPropertyType_httpwww_opengis_netgml3_2AbstractGeneralOperationParameter', False)

    
    AbstractGeneralOperationParameter = property(__AbstractGeneralOperationParameter.value, __AbstractGeneralOperationParameter.set, None, u'gml:GeneralOperationParameter is the abstract definition of a parameter or group of parameters used by an operation method.')

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_opengis_netgml3_2_AbstractGeneralOperationParameterPropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_opengis_netgml3_2_AbstractGeneralOperationParameterPropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_opengis_netgml3_2_AbstractGeneralOperationParameterPropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.opengis.net/gml/3.2}remoteSchema uses Python identifier remoteSchema
    __remoteSchema = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'remoteSchema'), 'remoteSchema', '__httpwww_opengis_netgml3_2_AbstractGeneralOperationParameterPropertyType_httpwww_opengis_netgml3_2remoteSchema', pyxb.binding.datatypes.anyURI)
    
    remoteSchema = property(__remoteSchema.value, __remoteSchema.set, None, u'')

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_opengis_netgml3_2_AbstractGeneralOperationParameterPropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'nilReason'), 'nilReason', '__httpwww_opengis_netgml3_2_AbstractGeneralOperationParameterPropertyType_nilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_opengis_netgml3_2_AbstractGeneralOperationParameterPropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_opengis_netgml3_2_AbstractGeneralOperationParameterPropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_opengis_netgml3_2_AbstractGeneralOperationParameterPropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)


    _ElementMap = {
        __AbstractGeneralOperationParameter.name() : __AbstractGeneralOperationParameter
    }
    _AttributeMap = {
        __actuate.name() : __actuate,
        __role.name() : __role,
        __arcrole.name() : __arcrole,
        __remoteSchema.name() : __remoteSchema,
        __show.name() : __show,
        __nilReason.name() : __nilReason,
        __href.name() : __href,
        __type.name() : __type,
        __title.name() : __title
    }
_Namespace_gml.addCategoryObject('typeBinding', u'AbstractGeneralOperationParameterPropertyType', AbstractGeneralOperationParameterPropertyType)


# Complex type RecordType_Type with content type SIMPLE
class RecordType_Type (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = pyxb.binding.datatypes.string
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gco, u'RecordType_Type')
    # Base type is pyxb.binding.datatypes.string
    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_isotc211_org2005gco_RecordType_Type_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_isotc211_org2005gco_RecordType_Type_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_isotc211_org2005gco_RecordType_Type_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_isotc211_org2005gco_RecordType_Type_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_isotc211_org2005gco_RecordType_Type_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_isotc211_org2005gco_RecordType_Type_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_isotc211_org2005gco_RecordType_Type_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")


    _ElementMap = {
        
    }
    _AttributeMap = {
        __arcrole.name() : __arcrole,
        __title.name() : __title,
        __href.name() : __href,
        __show.name() : __show,
        __role.name() : __role,
        __type.name() : __type,
        __actuate.name() : __actuate
    }
_Namespace_gco.addCategoryObject('typeBinding', u'RecordType_Type', RecordType_Type)


# Complex type DynamicFeatureType with content type ELEMENT_ONLY
class DynamicFeatureType (AbstractFeatureType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'DynamicFeatureType')
    # Base type is AbstractFeatureType
    
    # Element {http://www.opengis.net/gml/3.2}validTime uses Python identifier validTime
    __validTime = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'validTime'), 'validTime', '__httpwww_opengis_netgml3_2_DynamicFeatureType_httpwww_opengis_netgml3_2validTime', False)

    
    validTime = property(__validTime.value, __validTime.set, None, u'gml:validTime is a convenience property element.')

    
    # Element {http://www.opengis.net/gml/3.2}history uses Python identifier history
    __history = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'history'), 'history', '__httpwww_opengis_netgml3_2_DynamicFeatureType_httpwww_opengis_netgml3_2history', False)

    
    history = property(__history.value, __history.set, None, u'A generic sequence of events constitute a gml:history of an object.\nThe gml:history element contains a set of elements in the substitution group headed by the abstract element gml:AbstractTimeSlice, representing the time-varying properties of interest. The history property of a dynamic feature associates a feature instance with a sequence of time slices (i.e. change events) that encapsulate the evolution of the feature.')

    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element {http://www.opengis.net/gml/3.2}dataSource uses Python identifier dataSource
    __dataSource = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'dataSource'), 'dataSource', '__httpwww_opengis_netgml3_2_DynamicFeatureType_httpwww_opengis_netgml3_2dataSource', False)

    
    dataSource = property(__dataSource.value, __dataSource.set, None, u'Evidence is represented by a simple gml:dataSource or gml:dataSourceReference property that indicates the source of the temporal data. The remote link attributes of the gml:dataSource element have been deprecated along with its current type.')

    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element {http://www.opengis.net/gml/3.2}dataSourceReference uses Python identifier dataSourceReference
    __dataSourceReference = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'dataSourceReference'), 'dataSourceReference', '__httpwww_opengis_netgml3_2_DynamicFeatureType_httpwww_opengis_netgml3_2dataSourceReference', False)

    
    dataSourceReference = property(__dataSourceReference.value, __dataSourceReference.set, None, u'Evidence is represented by a simple gml:dataSource or gml:dataSourceReference property that indicates the source of the temporal data.')

    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element location ({http://www.opengis.net/gml/3.2}location) inherited from {http://www.opengis.net/gml/3.2}AbstractFeatureType
    
    # Element boundedBy ({http://www.opengis.net/gml/3.2}boundedBy) inherited from {http://www.opengis.net/gml/3.2}AbstractFeatureType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Attribute id inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType

    _ElementMap = AbstractFeatureType._ElementMap.copy()
    _ElementMap.update({
        __validTime.name() : __validTime,
        __history.name() : __history,
        __dataSource.name() : __dataSource,
        __dataSourceReference.name() : __dataSourceReference
    })
    _AttributeMap = AbstractFeatureType._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gml.addCategoryObject('typeBinding', u'DynamicFeatureType', DynamicFeatureType)


# Complex type DS_OtherAggregate_Type with content type ELEMENT_ONLY
class DS_OtherAggregate_Type (AbstractDS_Aggregate_Type):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'DS_OtherAggregate_Type')
    # Base type is AbstractDS_Aggregate_Type
    
    # Element superset ({http://www.isotc211.org/2005/gmd}superset) inherited from {http://www.isotc211.org/2005/gmd}AbstractDS_Aggregate_Type
    
    # Element composedOf ({http://www.isotc211.org/2005/gmd}composedOf) inherited from {http://www.isotc211.org/2005/gmd}AbstractDS_Aggregate_Type
    
    # Element seriesMetadata ({http://www.isotc211.org/2005/gmd}seriesMetadata) inherited from {http://www.isotc211.org/2005/gmd}AbstractDS_Aggregate_Type
    
    # Element subset ({http://www.isotc211.org/2005/gmd}subset) inherited from {http://www.isotc211.org/2005/gmd}AbstractDS_Aggregate_Type
    
    # Attribute id inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type
    
    # Attribute uuid inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type

    _ElementMap = AbstractDS_Aggregate_Type._ElementMap.copy()
    _ElementMap.update({
        
    })
    _AttributeMap = AbstractDS_Aggregate_Type._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gmd.addCategoryObject('typeBinding', u'DS_OtherAggregate_Type', DS_OtherAggregate_Type)


# Complex type CategoryExtentType with content type SIMPLE
class CategoryExtentType (CodeOrNilReasonListType):
    _TypeDefinition = STD_ANON_6
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'CategoryExtentType')
    # Base type is CodeOrNilReasonListType
    
    # Attribute codeSpace inherited from {http://www.opengis.net/gml/3.2}CodeOrNilReasonListType

    _ElementMap = CodeOrNilReasonListType._ElementMap.copy()
    _ElementMap.update({
        
    })
    _AttributeMap = CodeOrNilReasonListType._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gml.addCategoryObject('typeBinding', u'CategoryExtentType', CategoryExtentType)


# Complex type LineStringSegmentArrayPropertyType with content type ELEMENT_ONLY
class LineStringSegmentArrayPropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'LineStringSegmentArrayPropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.opengis.net/gml/3.2}LineStringSegment uses Python identifier LineStringSegment
    __LineStringSegment = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'LineStringSegment'), 'LineStringSegment', '__httpwww_opengis_netgml3_2_LineStringSegmentArrayPropertyType_httpwww_opengis_netgml3_2LineStringSegment', True)

    
    LineStringSegment = property(__LineStringSegment.value, __LineStringSegment.set, None, u'A LineStringSegment is a curve segment that is defined by two or more control points including the start and end point, with linear interpolation between them.\nThe content model follows the general pattern for the encoding of curve segments.')


    _ElementMap = {
        __LineStringSegment.name() : __LineStringSegment
    }
    _AttributeMap = {
        
    }
_Namespace_gml.addCategoryObject('typeBinding', u'LineStringSegmentArrayPropertyType', LineStringSegmentArrayPropertyType)


# Complex type MD_BrowseGraphic_PropertyType with content type ELEMENT_ONLY
class MD_BrowseGraphic_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_BrowseGraphic_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmd}MD_BrowseGraphic uses Python identifier MD_BrowseGraphic
    __MD_BrowseGraphic = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_BrowseGraphic'), 'MD_BrowseGraphic', '__httpwww_isotc211_org2005gmd_MD_BrowseGraphic_PropertyType_httpwww_isotc211_org2005gmdMD_BrowseGraphic', False)

    
    MD_BrowseGraphic = property(__MD_BrowseGraphic.value, __MD_BrowseGraphic.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_isotc211_org2005gmd_MD_BrowseGraphic_PropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_isotc211_org2005gmd_MD_BrowseGraphic_PropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_isotc211_org2005gmd_MD_BrowseGraphic_PropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmd_MD_BrowseGraphic_PropertyType_httpwww_isotc211_org2005gconilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute uuidref uses Python identifier uuidref
    __uuidref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uuidref'), 'uuidref', '__httpwww_isotc211_org2005gmd_MD_BrowseGraphic_PropertyType_uuidref', pyxb.binding.datatypes.string)
    
    uuidref = property(__uuidref.value, __uuidref.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_isotc211_org2005gmd_MD_BrowseGraphic_PropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_isotc211_org2005gmd_MD_BrowseGraphic_PropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_isotc211_org2005gmd_MD_BrowseGraphic_PropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_isotc211_org2005gmd_MD_BrowseGraphic_PropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)


    _ElementMap = {
        __MD_BrowseGraphic.name() : __MD_BrowseGraphic
    }
    _AttributeMap = {
        __type.name() : __type,
        __arcrole.name() : __arcrole,
        __role.name() : __role,
        __nilReason.name() : __nilReason,
        __uuidref.name() : __uuidref,
        __show.name() : __show,
        __href.name() : __href,
        __actuate.name() : __actuate,
        __title.name() : __title
    }
_Namespace_gmd.addCategoryObject('typeBinding', u'MD_BrowseGraphic_PropertyType', MD_BrowseGraphic_PropertyType)


# Complex type MD_CoverageContentTypeCode_PropertyType with content type ELEMENT_ONLY
class MD_CoverageContentTypeCode_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_CoverageContentTypeCode_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmd}MD_CoverageContentTypeCode uses Python identifier MD_CoverageContentTypeCode
    __MD_CoverageContentTypeCode = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_CoverageContentTypeCode'), 'MD_CoverageContentTypeCode', '__httpwww_isotc211_org2005gmd_MD_CoverageContentTypeCode_PropertyType_httpwww_isotc211_org2005gmdMD_CoverageContentTypeCode', False)

    
    MD_CoverageContentTypeCode = property(__MD_CoverageContentTypeCode.value, __MD_CoverageContentTypeCode.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmd_MD_CoverageContentTypeCode_PropertyType_httpwww_isotc211_org2005gconilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)


    _ElementMap = {
        __MD_CoverageContentTypeCode.name() : __MD_CoverageContentTypeCode
    }
    _AttributeMap = {
        __nilReason.name() : __nilReason
    }
_Namespace_gmd.addCategoryObject('typeBinding', u'MD_CoverageContentTypeCode_PropertyType', MD_CoverageContentTypeCode_PropertyType)


# Complex type PrimeMeridianType with content type ELEMENT_ONLY
class PrimeMeridianType (IdentifiedObjectType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'PrimeMeridianType')
    # Base type is IdentifiedObjectType
    
    # Element {http://www.opengis.net/gml/3.2}greenwichLongitude uses Python identifier greenwichLongitude
    __greenwichLongitude = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'greenwichLongitude'), 'greenwichLongitude', '__httpwww_opengis_netgml3_2_PrimeMeridianType_httpwww_opengis_netgml3_2greenwichLongitude', False)

    
    greenwichLongitude = property(__greenwichLongitude.value, __greenwichLongitude.set, None, u'gml:greenwichLongitude is the longitude of the prime meridian measured from the Greenwich meridian, positive eastward. If the value of the prime meridian "name" is "Greenwich" then the value of greenwichLongitude shall be 0 degrees.')

    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element remarks ({http://www.opengis.net/gml/3.2}remarks) inherited from {http://www.opengis.net/gml/3.2}DefinitionType
    
    # Attribute id_ inherited from {http://www.opengis.net/gml/3.2}DefinitionBaseType

    _ElementMap = IdentifiedObjectType._ElementMap.copy()
    _ElementMap.update({
        __greenwichLongitude.name() : __greenwichLongitude
    })
    _AttributeMap = IdentifiedObjectType._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gml.addCategoryObject('typeBinding', u'PrimeMeridianType', PrimeMeridianType)


# Complex type CompositeSurfaceType with content type ELEMENT_ONLY
class CompositeSurfaceType (AbstractSurfaceType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'CompositeSurfaceType')
    # Base type is AbstractSurfaceType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element {http://www.opengis.net/gml/3.2}surfaceMember uses Python identifier surfaceMember
    __surfaceMember = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'surfaceMember'), 'surfaceMember', '__httpwww_opengis_netgml3_2_CompositeSurfaceType_httpwww_opengis_netgml3_2surfaceMember', True)

    
    surfaceMember = property(__surfaceMember.value, __surfaceMember.set, None, u'This property element either references a surface via the XLink-attributes or contains the surface element. A surface element is any element, which is substitutable for gml:AbstractSurface.')

    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Attribute uomLabels inherited from {http://www.opengis.net/gml/3.2}AbstractGeometryType
    
    # Attribute srsName inherited from {http://www.opengis.net/gml/3.2}AbstractGeometryType
    
    # Attribute id inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Attribute srsDimension inherited from {http://www.opengis.net/gml/3.2}AbstractGeometryType
    
    # Attribute aggregationType uses Python identifier aggregationType
    __aggregationType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'aggregationType'), 'aggregationType', '__httpwww_opengis_netgml3_2_CompositeSurfaceType_aggregationType', AggregationType)
    
    aggregationType = property(__aggregationType.value, __aggregationType.set, None, None)

    
    # Attribute axisLabels inherited from {http://www.opengis.net/gml/3.2}AbstractGeometryType

    _ElementMap = AbstractSurfaceType._ElementMap.copy()
    _ElementMap.update({
        __surfaceMember.name() : __surfaceMember
    })
    _AttributeMap = AbstractSurfaceType._AttributeMap.copy()
    _AttributeMap.update({
        __aggregationType.name() : __aggregationType
    })
_Namespace_gml.addCategoryObject('typeBinding', u'CompositeSurfaceType', CompositeSurfaceType)


# Complex type CoordinateSystemPropertyType with content type ELEMENT_ONLY
class CoordinateSystemPropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'CoordinateSystemPropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.opengis.net/gml/3.2}AbstractCoordinateSystem uses Python identifier AbstractCoordinateSystem
    __AbstractCoordinateSystem = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractCoordinateSystem'), 'AbstractCoordinateSystem', '__httpwww_opengis_netgml3_2_CoordinateSystemPropertyType_httpwww_opengis_netgml3_2AbstractCoordinateSystem', False)

    
    AbstractCoordinateSystem = property(__AbstractCoordinateSystem.value, __AbstractCoordinateSystem.set, None, u'gml:AbstractCoordinateSystem is a coordinate system (CS) is the non-repeating sequence of coordinate system axes that spans a given coordinate space. A CS is derived from a set of mathematical rules for specifying how coordinates in a given space are to be assigned to points. The coordinate values in a coordinate tuple shall be recorded in the order in which the coordinate system axes associations are recorded. This abstract complex type shall not be used, extended, or restricted, in an Application Schema, to define a concrete subtype with a meaning equivalent to a concrete subtype specified in this document.')

    
    # Attribute {http://www.opengis.net/gml/3.2}remoteSchema uses Python identifier remoteSchema
    __remoteSchema = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'remoteSchema'), 'remoteSchema', '__httpwww_opengis_netgml3_2_CoordinateSystemPropertyType_httpwww_opengis_netgml3_2remoteSchema', pyxb.binding.datatypes.anyURI)
    
    remoteSchema = property(__remoteSchema.value, __remoteSchema.set, None, u'')

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_opengis_netgml3_2_CoordinateSystemPropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_opengis_netgml3_2_CoordinateSystemPropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_opengis_netgml3_2_CoordinateSystemPropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_opengis_netgml3_2_CoordinateSystemPropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'nilReason'), 'nilReason', '__httpwww_opengis_netgml3_2_CoordinateSystemPropertyType_nilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_opengis_netgml3_2_CoordinateSystemPropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_opengis_netgml3_2_CoordinateSystemPropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_opengis_netgml3_2_CoordinateSystemPropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")


    _ElementMap = {
        __AbstractCoordinateSystem.name() : __AbstractCoordinateSystem
    }
    _AttributeMap = {
        __remoteSchema.name() : __remoteSchema,
        __type.name() : __type,
        __title.name() : __title,
        __role.name() : __role,
        __arcrole.name() : __arcrole,
        __nilReason.name() : __nilReason,
        __actuate.name() : __actuate,
        __href.name() : __href,
        __show.name() : __show
    }
_Namespace_gml.addCategoryObject('typeBinding', u'CoordinateSystemPropertyType', CoordinateSystemPropertyType)


# Complex type TimeOrdinalEraPropertyType with content type ELEMENT_ONLY
class TimeOrdinalEraPropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'TimeOrdinalEraPropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.opengis.net/gml/3.2}TimeOrdinalEra uses Python identifier TimeOrdinalEra
    __TimeOrdinalEra = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'TimeOrdinalEra'), 'TimeOrdinalEra', '__httpwww_opengis_netgml3_2_TimeOrdinalEraPropertyType_httpwww_opengis_netgml3_2TimeOrdinalEra', False)

    
    TimeOrdinalEra = property(__TimeOrdinalEra.value, __TimeOrdinalEra.set, None, u'Its content model follows the pattern of gml:TimeEdge, inheriting standard properties from gml:DefinitionType, and adding gml:start, gml:end and gml:extent properties, a set of gml:member properties which indicate ordered gml:TimeOrdinalEra elements, and a gml:group property which points to the parent era.\nThe recursive inclusion of gml:TimeOrdinalEra elements allow the construction of an arbitrary depth hierarchical ordinal reference schema, such that an ordinal era at a given level of the hierarchy includes a sequence of shorter, coterminous ordinal eras.')

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_opengis_netgml3_2_TimeOrdinalEraPropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute owns uses Python identifier owns
    __owns = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'owns'), 'owns', '__httpwww_opengis_netgml3_2_TimeOrdinalEraPropertyType_owns', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    owns = property(__owns.value, __owns.set, None, None)

    
    # Attribute {http://www.opengis.net/gml/3.2}remoteSchema uses Python identifier remoteSchema
    __remoteSchema = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'remoteSchema'), 'remoteSchema', '__httpwww_opengis_netgml3_2_TimeOrdinalEraPropertyType_httpwww_opengis_netgml3_2remoteSchema', pyxb.binding.datatypes.anyURI)
    
    remoteSchema = property(__remoteSchema.value, __remoteSchema.set, None, u'')

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_opengis_netgml3_2_TimeOrdinalEraPropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'nilReason'), 'nilReason', '__httpwww_opengis_netgml3_2_TimeOrdinalEraPropertyType_nilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_opengis_netgml3_2_TimeOrdinalEraPropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_opengis_netgml3_2_TimeOrdinalEraPropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_opengis_netgml3_2_TimeOrdinalEraPropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_opengis_netgml3_2_TimeOrdinalEraPropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_opengis_netgml3_2_TimeOrdinalEraPropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")


    _ElementMap = {
        __TimeOrdinalEra.name() : __TimeOrdinalEra
    }
    _AttributeMap = {
        __href.name() : __href,
        __owns.name() : __owns,
        __remoteSchema.name() : __remoteSchema,
        __type.name() : __type,
        __nilReason.name() : __nilReason,
        __title.name() : __title,
        __show.name() : __show,
        __role.name() : __role,
        __arcrole.name() : __arcrole,
        __actuate.name() : __actuate
    }
_Namespace_gml.addCategoryObject('typeBinding', u'TimeOrdinalEraPropertyType', TimeOrdinalEraPropertyType)


# Complex type CI_Contact_PropertyType with content type ELEMENT_ONLY
class CI_Contact_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'CI_Contact_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmd}CI_Contact uses Python identifier CI_Contact
    __CI_Contact = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'CI_Contact'), 'CI_Contact', '__httpwww_isotc211_org2005gmd_CI_Contact_PropertyType_httpwww_isotc211_org2005gmdCI_Contact', False)

    
    CI_Contact = property(__CI_Contact.value, __CI_Contact.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_isotc211_org2005gmd_CI_Contact_PropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_isotc211_org2005gmd_CI_Contact_PropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_isotc211_org2005gmd_CI_Contact_PropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_isotc211_org2005gmd_CI_Contact_PropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute uuidref uses Python identifier uuidref
    __uuidref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uuidref'), 'uuidref', '__httpwww_isotc211_org2005gmd_CI_Contact_PropertyType_uuidref', pyxb.binding.datatypes.string)
    
    uuidref = property(__uuidref.value, __uuidref.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_isotc211_org2005gmd_CI_Contact_PropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_isotc211_org2005gmd_CI_Contact_PropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmd_CI_Contact_PropertyType_httpwww_isotc211_org2005gconilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_isotc211_org2005gmd_CI_Contact_PropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)


    _ElementMap = {
        __CI_Contact.name() : __CI_Contact
    }
    _AttributeMap = {
        __type.name() : __type,
        __actuate.name() : __actuate,
        __title.name() : __title,
        __role.name() : __role,
        __uuidref.name() : __uuidref,
        __show.name() : __show,
        __href.name() : __href,
        __nilReason.name() : __nilReason,
        __arcrole.name() : __arcrole
    }
_Namespace_gmd.addCategoryObject('typeBinding', u'CI_Contact_PropertyType', CI_Contact_PropertyType)


# Complex type DS_Sensor_Type with content type ELEMENT_ONLY
class DS_Sensor_Type (DS_Series_Type):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'DS_Sensor_Type')
    # Base type is DS_Series_Type
    
    # Element superset ({http://www.isotc211.org/2005/gmd}superset) inherited from {http://www.isotc211.org/2005/gmd}AbstractDS_Aggregate_Type
    
    # Element composedOf ({http://www.isotc211.org/2005/gmd}composedOf) inherited from {http://www.isotc211.org/2005/gmd}AbstractDS_Aggregate_Type
    
    # Element seriesMetadata ({http://www.isotc211.org/2005/gmd}seriesMetadata) inherited from {http://www.isotc211.org/2005/gmd}AbstractDS_Aggregate_Type
    
    # Element subset ({http://www.isotc211.org/2005/gmd}subset) inherited from {http://www.isotc211.org/2005/gmd}AbstractDS_Aggregate_Type
    
    # Attribute id inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type
    
    # Attribute uuid inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type

    _ElementMap = DS_Series_Type._ElementMap.copy()
    _ElementMap.update({
        
    })
    _AttributeMap = DS_Series_Type._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gmd.addCategoryObject('typeBinding', u'DS_Sensor_Type', DS_Sensor_Type)


# Complex type HistoryPropertyType with content type ELEMENT_ONLY
class HistoryPropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'HistoryPropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.opengis.net/gml/3.2}AbstractTimeSlice uses Python identifier AbstractTimeSlice
    __AbstractTimeSlice = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractTimeSlice'), 'AbstractTimeSlice', '__httpwww_opengis_netgml3_2_HistoryPropertyType_httpwww_opengis_netgml3_2AbstractTimeSlice', True)

    
    AbstractTimeSlice = property(__AbstractTimeSlice.value, __AbstractTimeSlice.set, None, u'To describe an event \u2014 an action that occurs at an instant or over an interval of time \u2014 GML provides the gml:AbtractTimeSlice element. A timeslice encapsulates the time-varying properties of a dynamic feature -- it shall be extended to represent a time stamped projection of a specific feature. The gml:dataSource property describes how the temporal data was acquired.\nA gml:AbstractTimeSlice instance is a GML object that encapsulates updates of the dynamic\u2014or volatile\u2014properties that reflect some change event; it thus includes only those feature properties that have actually changed due to some process.\ngml:AbstractTimeSlice basically provides a facility for attribute-level time stamping, in contrast to the object-level time stamping of dynamic feature instances. \nThe time slice can thus be viewed as event or process-oriented, whereas a snapshot is more state or structure-oriented. A timeslice has richer causality, whereas a snapshot merely portrays the status of the whole. \n')

    
    # Attribute owns uses Python identifier owns
    __owns = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'owns'), 'owns', '__httpwww_opengis_netgml3_2_HistoryPropertyType_owns', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    owns = property(__owns.value, __owns.set, None, None)


    _ElementMap = {
        __AbstractTimeSlice.name() : __AbstractTimeSlice
    }
    _AttributeMap = {
        __owns.name() : __owns
    }
_Namespace_gml.addCategoryObject('typeBinding', u'HistoryPropertyType', HistoryPropertyType)


# Complex type MD_TopicCategoryCode_PropertyType with content type ELEMENT_ONLY
class MD_TopicCategoryCode_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_TopicCategoryCode_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmd}MD_TopicCategoryCode uses Python identifier MD_TopicCategoryCode
    __MD_TopicCategoryCode = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_TopicCategoryCode'), 'MD_TopicCategoryCode', '__httpwww_isotc211_org2005gmd_MD_TopicCategoryCode_PropertyType_httpwww_isotc211_org2005gmdMD_TopicCategoryCode', False)

    
    MD_TopicCategoryCode = property(__MD_TopicCategoryCode.value, __MD_TopicCategoryCode.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmd_MD_TopicCategoryCode_PropertyType_httpwww_isotc211_org2005gconilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)


    _ElementMap = {
        __MD_TopicCategoryCode.name() : __MD_TopicCategoryCode
    }
    _AttributeMap = {
        __nilReason.name() : __nilReason
    }
_Namespace_gmd.addCategoryObject('typeBinding', u'MD_TopicCategoryCode_PropertyType', MD_TopicCategoryCode_PropertyType)


# Complex type BooleanPropertyType with content type ELEMENT_ONLY
class BooleanPropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'BooleanPropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.opengis.net/gml/3.2}Boolean uses Python identifier Boolean
    __Boolean = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'Boolean'), 'Boolean', '__httpwww_opengis_netgml3_2_BooleanPropertyType_httpwww_opengis_netgml3_2Boolean', False)

    
    Boolean = property(__Boolean.value, __Boolean.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_opengis_netgml3_2_BooleanPropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.opengis.net/gml/3.2}remoteSchema uses Python identifier remoteSchema
    __remoteSchema = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'remoteSchema'), 'remoteSchema', '__httpwww_opengis_netgml3_2_BooleanPropertyType_httpwww_opengis_netgml3_2remoteSchema', pyxb.binding.datatypes.anyURI)
    
    remoteSchema = property(__remoteSchema.value, __remoteSchema.set, None, u'')

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_opengis_netgml3_2_BooleanPropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_opengis_netgml3_2_BooleanPropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_opengis_netgml3_2_BooleanPropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'nilReason'), 'nilReason', '__httpwww_opengis_netgml3_2_BooleanPropertyType_nilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_opengis_netgml3_2_BooleanPropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_opengis_netgml3_2_BooleanPropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_opengis_netgml3_2_BooleanPropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")


    _ElementMap = {
        __Boolean.name() : __Boolean
    }
    _AttributeMap = {
        __href.name() : __href,
        __remoteSchema.name() : __remoteSchema,
        __type.name() : __type,
        __arcrole.name() : __arcrole,
        __title.name() : __title,
        __nilReason.name() : __nilReason,
        __role.name() : __role,
        __show.name() : __show,
        __actuate.name() : __actuate
    }
_Namespace_gml.addCategoryObject('typeBinding', u'BooleanPropertyType', BooleanPropertyType)


# Complex type TimeOrdinalEraType with content type ELEMENT_ONLY
class TimeOrdinalEraType (DefinitionType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'TimeOrdinalEraType')
    # Base type is DefinitionType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element {http://www.opengis.net/gml/3.2}extent uses Python identifier extent
    __extent = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'extent'), 'extent', '__httpwww_opengis_netgml3_2_TimeOrdinalEraType_httpwww_opengis_netgml3_2extent', False)

    
    extent = property(__extent.value, __extent.set, None, None)

    
    # Element remarks ({http://www.opengis.net/gml/3.2}remarks) inherited from {http://www.opengis.net/gml/3.2}DefinitionType
    
    # Element {http://www.opengis.net/gml/3.2}member uses Python identifier member
    __member = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'member'), 'member', '__httpwww_opengis_netgml3_2_TimeOrdinalEraType_httpwww_opengis_netgml3_2member', True)

    
    member = property(__member.value, __member.set, None, None)

    
    # Element {http://www.opengis.net/gml/3.2}group uses Python identifier group
    __group = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'group'), 'group', '__httpwww_opengis_netgml3_2_TimeOrdinalEraType_httpwww_opengis_netgml3_2group', False)

    
    group = property(__group.value, __group.set, None, None)

    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element {http://www.opengis.net/gml/3.2}relatedTime uses Python identifier relatedTime
    __relatedTime = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'relatedTime'), 'relatedTime', '__httpwww_opengis_netgml3_2_TimeOrdinalEraType_httpwww_opengis_netgml3_2relatedTime', True)

    
    relatedTime = property(__relatedTime.value, __relatedTime.set, None, None)

    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element {http://www.opengis.net/gml/3.2}start uses Python identifier start
    __start = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'start'), 'start', '__httpwww_opengis_netgml3_2_TimeOrdinalEraType_httpwww_opengis_netgml3_2start', False)

    
    start = property(__start.value, __start.set, None, None)

    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element {http://www.opengis.net/gml/3.2}end uses Python identifier end
    __end = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'end'), 'end', '__httpwww_opengis_netgml3_2_TimeOrdinalEraType_httpwww_opengis_netgml3_2end', False)

    
    end = property(__end.value, __end.set, None, None)

    
    # Attribute id_ inherited from {http://www.opengis.net/gml/3.2}DefinitionBaseType

    _ElementMap = DefinitionType._ElementMap.copy()
    _ElementMap.update({
        __extent.name() : __extent,
        __member.name() : __member,
        __group.name() : __group,
        __relatedTime.name() : __relatedTime,
        __start.name() : __start,
        __end.name() : __end
    })
    _AttributeMap = DefinitionType._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gml.addCategoryObject('typeBinding', u'TimeOrdinalEraType', TimeOrdinalEraType)


# Complex type GM_Object_PropertyType with content type ELEMENT_ONLY
class GM_Object_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gss, u'GM_Object_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.opengis.net/gml/3.2}AbstractGeometry uses Python identifier AbstractGeometry
    __AbstractGeometry = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractGeometry'), 'AbstractGeometry', '__httpwww_isotc211_org2005gss_GM_Object_PropertyType_httpwww_opengis_netgml3_2AbstractGeometry', False)

    
    AbstractGeometry = property(__AbstractGeometry.value, __AbstractGeometry.set, None, u'The AbstractGeometry element is the abstract head of the substitution group for all geometry elements of GML. This includes pre-defined and user-defined geometry elements. Any geometry element shall be a direct or indirect extension/restriction of AbstractGeometryType and shall be directly or indirectly in the substitution group of AbstractGeometry.')

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_isotc211_org2005gss_GM_Object_PropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_isotc211_org2005gss_GM_Object_PropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_isotc211_org2005gss_GM_Object_PropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_isotc211_org2005gss_GM_Object_PropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_isotc211_org2005gss_GM_Object_PropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute uuidref uses Python identifier uuidref
    __uuidref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uuidref'), 'uuidref', '__httpwww_isotc211_org2005gss_GM_Object_PropertyType_uuidref', pyxb.binding.datatypes.string)
    
    uuidref = property(__uuidref.value, __uuidref.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gss_GM_Object_PropertyType_httpwww_isotc211_org2005gconilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_isotc211_org2005gss_GM_Object_PropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_isotc211_org2005gss_GM_Object_PropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")


    _ElementMap = {
        __AbstractGeometry.name() : __AbstractGeometry
    }
    _AttributeMap = {
        __href.name() : __href,
        __type.name() : __type,
        __actuate.name() : __actuate,
        __role.name() : __role,
        __arcrole.name() : __arcrole,
        __uuidref.name() : __uuidref,
        __nilReason.name() : __nilReason,
        __title.name() : __title,
        __show.name() : __show
    }
_Namespace_gss.addCategoryObject('typeBinding', u'GM_Object_PropertyType', GM_Object_PropertyType)


# Complex type EX_VerticalExtent_Type with content type ELEMENT_ONLY
class EX_VerticalExtent_Type (AbstractObject_Type):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'EX_VerticalExtent_Type')
    # Base type is AbstractObject_Type
    
    # Element {http://www.isotc211.org/2005/gmd}verticalCRS uses Python identifier verticalCRS
    __verticalCRS = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'verticalCRS'), 'verticalCRS', '__httpwww_isotc211_org2005gmd_EX_VerticalExtent_Type_httpwww_isotc211_org2005gmdverticalCRS', False)

    
    verticalCRS = property(__verticalCRS.value, __verticalCRS.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}minimumValue uses Python identifier minimumValue
    __minimumValue = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'minimumValue'), 'minimumValue', '__httpwww_isotc211_org2005gmd_EX_VerticalExtent_Type_httpwww_isotc211_org2005gmdminimumValue', False)

    
    minimumValue = property(__minimumValue.value, __minimumValue.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}maximumValue uses Python identifier maximumValue
    __maximumValue = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'maximumValue'), 'maximumValue', '__httpwww_isotc211_org2005gmd_EX_VerticalExtent_Type_httpwww_isotc211_org2005gmdmaximumValue', False)

    
    maximumValue = property(__maximumValue.value, __maximumValue.set, None, None)

    
    # Attribute id inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type
    
    # Attribute uuid inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type

    _ElementMap = AbstractObject_Type._ElementMap.copy()
    _ElementMap.update({
        __verticalCRS.name() : __verticalCRS,
        __minimumValue.name() : __minimumValue,
        __maximumValue.name() : __maximumValue
    })
    _AttributeMap = AbstractObject_Type._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gmd.addCategoryObject('typeBinding', u'EX_VerticalExtent_Type', EX_VerticalExtent_Type)


# Complex type TimeOrdinalReferenceSystemType with content type ELEMENT_ONLY
class TimeOrdinalReferenceSystemType (TimeReferenceSystemType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'TimeOrdinalReferenceSystemType')
    # Base type is TimeReferenceSystemType
    
    # Element {http://www.opengis.net/gml/3.2}component uses Python identifier component
    __component = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'component'), 'component', '__httpwww_opengis_netgml3_2_TimeOrdinalReferenceSystemType_httpwww_opengis_netgml3_2component', True)

    
    component = property(__component.value, __component.set, None, None)

    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element domainOfValidity ({http://www.opengis.net/gml/3.2}domainOfValidity) inherited from {http://www.opengis.net/gml/3.2}TimeReferenceSystemType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element remarks ({http://www.opengis.net/gml/3.2}remarks) inherited from {http://www.opengis.net/gml/3.2}DefinitionType
    
    # Attribute id_ inherited from {http://www.opengis.net/gml/3.2}DefinitionBaseType

    _ElementMap = TimeReferenceSystemType._ElementMap.copy()
    _ElementMap.update({
        __component.name() : __component
    })
    _AttributeMap = TimeReferenceSystemType._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gml.addCategoryObject('typeBinding', u'TimeOrdinalReferenceSystemType', TimeOrdinalReferenceSystemType)


# Complex type CompositeValueType with content type ELEMENT_ONLY
class CompositeValueType (AbstractGMLType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'CompositeValueType')
    # Base type is AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element {http://www.opengis.net/gml/3.2}valueComponents uses Python identifier valueComponents
    __valueComponents = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'valueComponents'), 'valueComponents', '__httpwww_opengis_netgml3_2_CompositeValueType_httpwww_opengis_netgml3_2valueComponents', False)

    
    valueComponents = property(__valueComponents.value, __valueComponents.set, None, u'Property that contains Values.')

    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element {http://www.opengis.net/gml/3.2}valueComponent uses Python identifier valueComponent
    __valueComponent = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'valueComponent'), 'valueComponent', '__httpwww_opengis_netgml3_2_CompositeValueType_httpwww_opengis_netgml3_2valueComponent', True)

    
    valueComponent = property(__valueComponent.value, __valueComponent.set, None, u'Property that refers to, or contains, a Value.')

    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Attribute aggregationType uses Python identifier aggregationType
    __aggregationType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'aggregationType'), 'aggregationType', '__httpwww_opengis_netgml3_2_CompositeValueType_aggregationType', AggregationType)
    
    aggregationType = property(__aggregationType.value, __aggregationType.set, None, None)

    
    # Attribute id inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType

    _ElementMap = AbstractGMLType._ElementMap.copy()
    _ElementMap.update({
        __valueComponents.name() : __valueComponents,
        __valueComponent.name() : __valueComponent
    })
    _AttributeMap = AbstractGMLType._AttributeMap.copy()
    _AttributeMap.update({
        __aggregationType.name() : __aggregationType
    })
_Namespace_gml.addCategoryObject('typeBinding', u'CompositeValueType', CompositeValueType)


# Complex type ValueArrayType with content type ELEMENT_ONLY
class ValueArrayType (CompositeValueType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'ValueArrayType')
    # Base type is CompositeValueType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element valueComponents ({http://www.opengis.net/gml/3.2}valueComponents) inherited from {http://www.opengis.net/gml/3.2}CompositeValueType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element valueComponent ({http://www.opengis.net/gml/3.2}valueComponent) inherited from {http://www.opengis.net/gml/3.2}CompositeValueType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Attribute aggregationType inherited from {http://www.opengis.net/gml/3.2}CompositeValueType
    
    # Attribute id inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Attribute codeSpace uses Python identifier codeSpace
    __codeSpace = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'codeSpace'), 'codeSpace', '__httpwww_opengis_netgml3_2_ValueArrayType_codeSpace', pyxb.binding.datatypes.anyURI)
    
    codeSpace = property(__codeSpace.value, __codeSpace.set, None, None)

    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uom'), 'uom', '__httpwww_opengis_netgml3_2_ValueArrayType_uom', UomIdentifier)
    
    uom = property(__uom.value, __uom.set, None, None)


    _ElementMap = CompositeValueType._ElementMap.copy()
    _ElementMap.update({
        
    })
    _AttributeMap = CompositeValueType._AttributeMap.copy()
    _AttributeMap.update({
        __codeSpace.name() : __codeSpace,
        __uom.name() : __uom
    })
_Namespace_gml.addCategoryObject('typeBinding', u'ValueArrayType', ValueArrayType)


# Complex type EX_Extent_Type with content type ELEMENT_ONLY
class EX_Extent_Type (AbstractObject_Type):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'EX_Extent_Type')
    # Base type is AbstractObject_Type
    
    # Element {http://www.isotc211.org/2005/gmd}verticalElement uses Python identifier verticalElement
    __verticalElement = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'verticalElement'), 'verticalElement', '__httpwww_isotc211_org2005gmd_EX_Extent_Type_httpwww_isotc211_org2005gmdverticalElement', True)

    
    verticalElement = property(__verticalElement.value, __verticalElement.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}description uses Python identifier description
    __description = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'description'), 'description', '__httpwww_isotc211_org2005gmd_EX_Extent_Type_httpwww_isotc211_org2005gmddescription', False)

    
    description = property(__description.value, __description.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}temporalElement uses Python identifier temporalElement
    __temporalElement = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'temporalElement'), 'temporalElement', '__httpwww_isotc211_org2005gmd_EX_Extent_Type_httpwww_isotc211_org2005gmdtemporalElement', True)

    
    temporalElement = property(__temporalElement.value, __temporalElement.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}geographicElement uses Python identifier geographicElement
    __geographicElement = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'geographicElement'), 'geographicElement', '__httpwww_isotc211_org2005gmd_EX_Extent_Type_httpwww_isotc211_org2005gmdgeographicElement', True)

    
    geographicElement = property(__geographicElement.value, __geographicElement.set, None, None)

    
    # Attribute id inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type
    
    # Attribute uuid inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type

    _ElementMap = AbstractObject_Type._ElementMap.copy()
    _ElementMap.update({
        __verticalElement.name() : __verticalElement,
        __description.name() : __description,
        __temporalElement.name() : __temporalElement,
        __geographicElement.name() : __geographicElement
    })
    _AttributeMap = AbstractObject_Type._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gmd.addCategoryObject('typeBinding', u'EX_Extent_Type', EX_Extent_Type)


# Complex type AbstractGeneralParameterValueType with content type EMPTY
class AbstractGeneralParameterValueType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = True
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractGeneralParameterValueType')
    # Base type is pyxb.binding.datatypes.anyType

    _ElementMap = {
        
    }
    _AttributeMap = {
        
    }
_Namespace_gml.addCategoryObject('typeBinding', u'AbstractGeneralParameterValueType', AbstractGeneralParameterValueType)


# Complex type AbstractSolidType with content type ELEMENT_ONLY
class AbstractSolidType (AbstractGeometricPrimitiveType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractSolidType')
    # Base type is AbstractGeometricPrimitiveType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Attribute srsName inherited from {http://www.opengis.net/gml/3.2}AbstractGeometryType
    
    # Attribute axisLabels inherited from {http://www.opengis.net/gml/3.2}AbstractGeometryType
    
    # Attribute id inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Attribute uomLabels inherited from {http://www.opengis.net/gml/3.2}AbstractGeometryType
    
    # Attribute srsDimension inherited from {http://www.opengis.net/gml/3.2}AbstractGeometryType

    _ElementMap = AbstractGeometricPrimitiveType._ElementMap.copy()
    _ElementMap.update({
        
    })
    _AttributeMap = AbstractGeometricPrimitiveType._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gml.addCategoryObject('typeBinding', u'AbstractSolidType', AbstractSolidType)


# Complex type CompositeSolidType with content type ELEMENT_ONLY
class CompositeSolidType (AbstractSolidType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'CompositeSolidType')
    # Base type is AbstractSolidType
    
    # Element {http://www.opengis.net/gml/3.2}solidMember uses Python identifier solidMember
    __solidMember = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'solidMember'), 'solidMember', '__httpwww_opengis_netgml3_2_CompositeSolidType_httpwww_opengis_netgml3_2solidMember', True)

    
    solidMember = property(__solidMember.value, __solidMember.set, None, u'This property element either references a solid via the XLink-attributes or contains the solid element. A solid element is any element, which is substitutable for gml:AbstractSolid.')

    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Attribute uomLabels inherited from {http://www.opengis.net/gml/3.2}AbstractGeometryType
    
    # Attribute aggregationType uses Python identifier aggregationType
    __aggregationType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'aggregationType'), 'aggregationType', '__httpwww_opengis_netgml3_2_CompositeSolidType_aggregationType', AggregationType)
    
    aggregationType = property(__aggregationType.value, __aggregationType.set, None, None)

    
    # Attribute srsName inherited from {http://www.opengis.net/gml/3.2}AbstractGeometryType
    
    # Attribute id inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Attribute srsDimension inherited from {http://www.opengis.net/gml/3.2}AbstractGeometryType
    
    # Attribute axisLabels inherited from {http://www.opengis.net/gml/3.2}AbstractGeometryType

    _ElementMap = AbstractSolidType._ElementMap.copy()
    _ElementMap.update({
        __solidMember.name() : __solidMember
    })
    _AttributeMap = AbstractSolidType._AttributeMap.copy()
    _AttributeMap.update({
        __aggregationType.name() : __aggregationType
    })
_Namespace_gml.addCategoryObject('typeBinding', u'CompositeSolidType', CompositeSolidType)


# Complex type UnitOfMeasureType with content type EMPTY
class UnitOfMeasureType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'UnitOfMeasureType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uom'), 'uom', '__httpwww_opengis_netgml3_2_UnitOfMeasureType_uom', UomIdentifier, required=True)
    
    uom = property(__uom.value, __uom.set, None, None)


    _ElementMap = {
        
    }
    _AttributeMap = {
        __uom.name() : __uom
    }
_Namespace_gml.addCategoryObject('typeBinding', u'UnitOfMeasureType', UnitOfMeasureType)


# Complex type ConversionToPreferredUnitType with content type ELEMENT_ONLY
class ConversionToPreferredUnitType (UnitOfMeasureType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'ConversionToPreferredUnitType')
    # Base type is UnitOfMeasureType
    
    # Element {http://www.opengis.net/gml/3.2}factor uses Python identifier factor
    __factor = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'factor'), 'factor', '__httpwww_opengis_netgml3_2_ConversionToPreferredUnitType_httpwww_opengis_netgml3_2factor', False)

    
    factor = property(__factor.value, __factor.set, None, None)

    
    # Element {http://www.opengis.net/gml/3.2}formula uses Python identifier formula
    __formula = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'formula'), 'formula', '__httpwww_opengis_netgml3_2_ConversionToPreferredUnitType_httpwww_opengis_netgml3_2formula', False)

    
    formula = property(__formula.value, __formula.set, None, None)

    
    # Attribute uom inherited from {http://www.opengis.net/gml/3.2}UnitOfMeasureType

    _ElementMap = UnitOfMeasureType._ElementMap.copy()
    _ElementMap.update({
        __factor.name() : __factor,
        __formula.name() : __formula
    })
    _AttributeMap = UnitOfMeasureType._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gml.addCategoryObject('typeBinding', u'ConversionToPreferredUnitType', ConversionToPreferredUnitType)


# Complex type TimeCalendarPropertyType with content type ELEMENT_ONLY
class TimeCalendarPropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'TimeCalendarPropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.opengis.net/gml/3.2}TimeCalendar uses Python identifier TimeCalendar
    __TimeCalendar = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'TimeCalendar'), 'TimeCalendar', '__httpwww_opengis_netgml3_2_TimeCalendarPropertyType_httpwww_opengis_netgml3_2TimeCalendar', False)

    
    TimeCalendar = property(__TimeCalendar.value, __TimeCalendar.set, None, u'A calendar is a discrete temporal reference system that provides a basis for defining temporal position to a resolution of one day.\ngml:TimeCalendar adds one property to those inherited from gml:TimeReferenceSystem. A gml:referenceFrame provides a link to a gml:TimeCalendarEra that it uses. A  gml:TimeCalendar may reference more than one calendar era. \nThe referenceFrame element follows the standard GML property model, allowing the association to be instantiated either using an inline description using the gml:TimeCalendarEra element, or a link to a gml:TimeCalendarEra which is explicit elsewhere.')

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_opengis_netgml3_2_TimeCalendarPropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute owns uses Python identifier owns
    __owns = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'owns'), 'owns', '__httpwww_opengis_netgml3_2_TimeCalendarPropertyType_owns', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    owns = property(__owns.value, __owns.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_opengis_netgml3_2_TimeCalendarPropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_opengis_netgml3_2_TimeCalendarPropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.opengis.net/gml/3.2}remoteSchema uses Python identifier remoteSchema
    __remoteSchema = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'remoteSchema'), 'remoteSchema', '__httpwww_opengis_netgml3_2_TimeCalendarPropertyType_httpwww_opengis_netgml3_2remoteSchema', pyxb.binding.datatypes.anyURI)
    
    remoteSchema = property(__remoteSchema.value, __remoteSchema.set, None, u'')

    
    # Attribute nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'nilReason'), 'nilReason', '__httpwww_opengis_netgml3_2_TimeCalendarPropertyType_nilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_opengis_netgml3_2_TimeCalendarPropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_opengis_netgml3_2_TimeCalendarPropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_opengis_netgml3_2_TimeCalendarPropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_opengis_netgml3_2_TimeCalendarPropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")


    _ElementMap = {
        __TimeCalendar.name() : __TimeCalendar
    }
    _AttributeMap = {
        __arcrole.name() : __arcrole,
        __owns.name() : __owns,
        __href.name() : __href,
        __type.name() : __type,
        __remoteSchema.name() : __remoteSchema,
        __nilReason.name() : __nilReason,
        __title.name() : __title,
        __role.name() : __role,
        __show.name() : __show,
        __actuate.name() : __actuate
    }
_Namespace_gml.addCategoryObject('typeBinding', u'TimeCalendarPropertyType', TimeCalendarPropertyType)


# Complex type MD_StandardOrderProcess_Type with content type ELEMENT_ONLY
class MD_StandardOrderProcess_Type (AbstractObject_Type):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_StandardOrderProcess_Type')
    # Base type is AbstractObject_Type
    
    # Element {http://www.isotc211.org/2005/gmd}turnaround uses Python identifier turnaround
    __turnaround = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'turnaround'), 'turnaround', '__httpwww_isotc211_org2005gmd_MD_StandardOrderProcess_Type_httpwww_isotc211_org2005gmdturnaround', False)

    
    turnaround = property(__turnaround.value, __turnaround.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}fees uses Python identifier fees
    __fees = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'fees'), 'fees', '__httpwww_isotc211_org2005gmd_MD_StandardOrderProcess_Type_httpwww_isotc211_org2005gmdfees', False)

    
    fees = property(__fees.value, __fees.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}orderingInstructions uses Python identifier orderingInstructions
    __orderingInstructions = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'orderingInstructions'), 'orderingInstructions', '__httpwww_isotc211_org2005gmd_MD_StandardOrderProcess_Type_httpwww_isotc211_org2005gmdorderingInstructions', False)

    
    orderingInstructions = property(__orderingInstructions.value, __orderingInstructions.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}plannedAvailableDateTime uses Python identifier plannedAvailableDateTime
    __plannedAvailableDateTime = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'plannedAvailableDateTime'), 'plannedAvailableDateTime', '__httpwww_isotc211_org2005gmd_MD_StandardOrderProcess_Type_httpwww_isotc211_org2005gmdplannedAvailableDateTime', False)

    
    plannedAvailableDateTime = property(__plannedAvailableDateTime.value, __plannedAvailableDateTime.set, None, None)

    
    # Attribute id inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type
    
    # Attribute uuid inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type

    _ElementMap = AbstractObject_Type._ElementMap.copy()
    _ElementMap.update({
        __turnaround.name() : __turnaround,
        __fees.name() : __fees,
        __orderingInstructions.name() : __orderingInstructions,
        __plannedAvailableDateTime.name() : __plannedAvailableDateTime
    })
    _AttributeMap = AbstractObject_Type._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gmd.addCategoryObject('typeBinding', u'MD_StandardOrderProcess_Type', MD_StandardOrderProcess_Type)


# Complex type TimeEdgePropertyType with content type ELEMENT_ONLY
class TimeEdgePropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'TimeEdgePropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.opengis.net/gml/3.2}TimeEdge uses Python identifier TimeEdge
    __TimeEdge = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'TimeEdge'), 'TimeEdge', '__httpwww_opengis_netgml3_2_TimeEdgePropertyType_httpwww_opengis_netgml3_2TimeEdge', False)

    
    TimeEdge = property(__TimeEdge.value, __TimeEdge.set, None, u'A time edge is a one-dimensional topological primitive. It is an open interval that starts and ends at a node. The edge may be realised as a geometry whose value is a time period.')

    
    # Attribute owns uses Python identifier owns
    __owns = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'owns'), 'owns', '__httpwww_opengis_netgml3_2_TimeEdgePropertyType_owns', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    owns = property(__owns.value, __owns.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_opengis_netgml3_2_TimeEdgePropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_opengis_netgml3_2_TimeEdgePropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.opengis.net/gml/3.2}remoteSchema uses Python identifier remoteSchema
    __remoteSchema = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'remoteSchema'), 'remoteSchema', '__httpwww_opengis_netgml3_2_TimeEdgePropertyType_httpwww_opengis_netgml3_2remoteSchema', pyxb.binding.datatypes.anyURI)
    
    remoteSchema = property(__remoteSchema.value, __remoteSchema.set, None, u'')

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_opengis_netgml3_2_TimeEdgePropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'nilReason'), 'nilReason', '__httpwww_opengis_netgml3_2_TimeEdgePropertyType_nilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_opengis_netgml3_2_TimeEdgePropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_opengis_netgml3_2_TimeEdgePropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_opengis_netgml3_2_TimeEdgePropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_opengis_netgml3_2_TimeEdgePropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)


    _ElementMap = {
        __TimeEdge.name() : __TimeEdge
    }
    _AttributeMap = {
        __owns.name() : __owns,
        __type.name() : __type,
        __arcrole.name() : __arcrole,
        __remoteSchema.name() : __remoteSchema,
        __role.name() : __role,
        __nilReason.name() : __nilReason,
        __show.name() : __show,
        __actuate.name() : __actuate,
        __title.name() : __title,
        __href.name() : __href
    }
_Namespace_gml.addCategoryObject('typeBinding', u'TimeEdgePropertyType', TimeEdgePropertyType)


# Complex type GenericName_PropertyType with content type ELEMENT_ONLY
class GenericName_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gco, u'GenericName_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gco}AbstractGenericName uses Python identifier AbstractGenericName
    __AbstractGenericName = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'AbstractGenericName'), 'AbstractGenericName', '__httpwww_isotc211_org2005gco_GenericName_PropertyType_httpwww_isotc211_org2005gcoAbstractGenericName', False)

    
    AbstractGenericName = property(__AbstractGenericName.value, __AbstractGenericName.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gco_GenericName_PropertyType_httpwww_isotc211_org2005gconilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)


    _ElementMap = {
        __AbstractGenericName.name() : __AbstractGenericName
    }
    _AttributeMap = {
        __nilReason.name() : __nilReason
    }
_Namespace_gco.addCategoryObject('typeBinding', u'GenericName_PropertyType', GenericName_PropertyType)


# Complex type MD_ApplicationSchemaInformation_Type with content type ELEMENT_ONLY
class MD_ApplicationSchemaInformation_Type (AbstractObject_Type):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_ApplicationSchemaInformation_Type')
    # Base type is AbstractObject_Type
    
    # Element {http://www.isotc211.org/2005/gmd}name uses Python identifier name
    __name = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'name'), 'name', '__httpwww_isotc211_org2005gmd_MD_ApplicationSchemaInformation_Type_httpwww_isotc211_org2005gmdname', False)

    
    name = property(__name.value, __name.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}schemaLanguage uses Python identifier schemaLanguage
    __schemaLanguage = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'schemaLanguage'), 'schemaLanguage', '__httpwww_isotc211_org2005gmd_MD_ApplicationSchemaInformation_Type_httpwww_isotc211_org2005gmdschemaLanguage', False)

    
    schemaLanguage = property(__schemaLanguage.value, __schemaLanguage.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}schemaAscii uses Python identifier schemaAscii
    __schemaAscii = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'schemaAscii'), 'schemaAscii', '__httpwww_isotc211_org2005gmd_MD_ApplicationSchemaInformation_Type_httpwww_isotc211_org2005gmdschemaAscii', False)

    
    schemaAscii = property(__schemaAscii.value, __schemaAscii.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}constraintLanguage uses Python identifier constraintLanguage
    __constraintLanguage = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'constraintLanguage'), 'constraintLanguage', '__httpwww_isotc211_org2005gmd_MD_ApplicationSchemaInformation_Type_httpwww_isotc211_org2005gmdconstraintLanguage', False)

    
    constraintLanguage = property(__constraintLanguage.value, __constraintLanguage.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}graphicsFile uses Python identifier graphicsFile
    __graphicsFile = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'graphicsFile'), 'graphicsFile', '__httpwww_isotc211_org2005gmd_MD_ApplicationSchemaInformation_Type_httpwww_isotc211_org2005gmdgraphicsFile', False)

    
    graphicsFile = property(__graphicsFile.value, __graphicsFile.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}softwareDevelopmentFile uses Python identifier softwareDevelopmentFile
    __softwareDevelopmentFile = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'softwareDevelopmentFile'), 'softwareDevelopmentFile', '__httpwww_isotc211_org2005gmd_MD_ApplicationSchemaInformation_Type_httpwww_isotc211_org2005gmdsoftwareDevelopmentFile', False)

    
    softwareDevelopmentFile = property(__softwareDevelopmentFile.value, __softwareDevelopmentFile.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}softwareDevelopmentFileFormat uses Python identifier softwareDevelopmentFileFormat
    __softwareDevelopmentFileFormat = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'softwareDevelopmentFileFormat'), 'softwareDevelopmentFileFormat', '__httpwww_isotc211_org2005gmd_MD_ApplicationSchemaInformation_Type_httpwww_isotc211_org2005gmdsoftwareDevelopmentFileFormat', False)

    
    softwareDevelopmentFileFormat = property(__softwareDevelopmentFileFormat.value, __softwareDevelopmentFileFormat.set, None, None)

    
    # Attribute id inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type
    
    # Attribute uuid inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type

    _ElementMap = AbstractObject_Type._ElementMap.copy()
    _ElementMap.update({
        __name.name() : __name,
        __schemaLanguage.name() : __schemaLanguage,
        __schemaAscii.name() : __schemaAscii,
        __constraintLanguage.name() : __constraintLanguage,
        __graphicsFile.name() : __graphicsFile,
        __softwareDevelopmentFile.name() : __softwareDevelopmentFile,
        __softwareDevelopmentFileFormat.name() : __softwareDevelopmentFileFormat
    })
    _AttributeMap = AbstractObject_Type._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gmd.addCategoryObject('typeBinding', u'MD_ApplicationSchemaInformation_Type', MD_ApplicationSchemaInformation_Type)


# Complex type MD_Distributor_PropertyType with content type ELEMENT_ONLY
class MD_Distributor_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_Distributor_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmd}MD_Distributor uses Python identifier MD_Distributor
    __MD_Distributor = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_Distributor'), 'MD_Distributor', '__httpwww_isotc211_org2005gmd_MD_Distributor_PropertyType_httpwww_isotc211_org2005gmdMD_Distributor', False)

    
    MD_Distributor = property(__MD_Distributor.value, __MD_Distributor.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_isotc211_org2005gmd_MD_Distributor_PropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_isotc211_org2005gmd_MD_Distributor_PropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_isotc211_org2005gmd_MD_Distributor_PropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_isotc211_org2005gmd_MD_Distributor_PropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_isotc211_org2005gmd_MD_Distributor_PropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute uuidref uses Python identifier uuidref
    __uuidref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uuidref'), 'uuidref', '__httpwww_isotc211_org2005gmd_MD_Distributor_PropertyType_uuidref', pyxb.binding.datatypes.string)
    
    uuidref = property(__uuidref.value, __uuidref.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_isotc211_org2005gmd_MD_Distributor_PropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_isotc211_org2005gmd_MD_Distributor_PropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmd_MD_Distributor_PropertyType_httpwww_isotc211_org2005gconilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)


    _ElementMap = {
        __MD_Distributor.name() : __MD_Distributor
    }
    _AttributeMap = {
        __title.name() : __title,
        __type.name() : __type,
        __show.name() : __show,
        __href.name() : __href,
        __actuate.name() : __actuate,
        __uuidref.name() : __uuidref,
        __arcrole.name() : __arcrole,
        __role.name() : __role,
        __nilReason.name() : __nilReason
    }
_Namespace_gmd.addCategoryObject('typeBinding', u'MD_Distributor_PropertyType', MD_Distributor_PropertyType)


# Complex type GeodeticCRSType with content type ELEMENT_ONLY
class GeodeticCRSType (AbstractCRSType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'GeodeticCRSType')
    # Base type is AbstractCRSType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element {http://www.opengis.net/gml/3.2}ellipsoidalCS uses Python identifier ellipsoidalCS
    __ellipsoidalCS = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'ellipsoidalCS'), 'ellipsoidalCS', '__httpwww_opengis_netgml3_2_GeodeticCRSType_httpwww_opengis_netgml3_2ellipsoidalCS', False)

    
    ellipsoidalCS = property(__ellipsoidalCS.value, __ellipsoidalCS.set, None, u'gml:ellipsoidalCS is an association role to the ellipsoidal coordinate system used by this CRS.')

    
    # Element {http://www.opengis.net/gml/3.2}cartesianCS uses Python identifier cartesianCS
    __cartesianCS = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'cartesianCS'), 'cartesianCS', '__httpwww_opengis_netgml3_2_GeodeticCRSType_httpwww_opengis_netgml3_2cartesianCS', False)

    
    cartesianCS = property(__cartesianCS.value, __cartesianCS.set, None, u'gml:cartesianCS is an association role to the Cartesian coordinate system used by this CRS.')

    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element {http://www.opengis.net/gml/3.2}geodeticDatum uses Python identifier geodeticDatum
    __geodeticDatum = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'geodeticDatum'), 'geodeticDatum', '__httpwww_opengis_netgml3_2_GeodeticCRSType_httpwww_opengis_netgml3_2geodeticDatum', False)

    
    geodeticDatum = property(__geodeticDatum.value, __geodeticDatum.set, None, u'gml:geodeticDatum is an association role to the geodetic datum used by this CRS.\n')

    
    # Element {http://www.opengis.net/gml/3.2}sphericalCS uses Python identifier sphericalCS
    __sphericalCS = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'sphericalCS'), 'sphericalCS', '__httpwww_opengis_netgml3_2_GeodeticCRSType_httpwww_opengis_netgml3_2sphericalCS', False)

    
    sphericalCS = property(__sphericalCS.value, __sphericalCS.set, None, u'gml:sphericalCS is an association role to the spherical coordinate system used by this CRS.')

    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element domainOfValidity ({http://www.opengis.net/gml/3.2}domainOfValidity) inherited from {http://www.opengis.net/gml/3.2}AbstractCRSType
    
    # Element scope ({http://www.opengis.net/gml/3.2}scope) inherited from {http://www.opengis.net/gml/3.2}AbstractCRSType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element remarks ({http://www.opengis.net/gml/3.2}remarks) inherited from {http://www.opengis.net/gml/3.2}DefinitionType
    
    # Attribute id_ inherited from {http://www.opengis.net/gml/3.2}DefinitionBaseType

    _ElementMap = AbstractCRSType._ElementMap.copy()
    _ElementMap.update({
        __ellipsoidalCS.name() : __ellipsoidalCS,
        __cartesianCS.name() : __cartesianCS,
        __geodeticDatum.name() : __geodeticDatum,
        __sphericalCS.name() : __sphericalCS
    })
    _AttributeMap = AbstractCRSType._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gml.addCategoryObject('typeBinding', u'GeodeticCRSType', GeodeticCRSType)


# Complex type DQ_AccuracyOfATimeMeasurement_PropertyType with content type ELEMENT_ONLY
class DQ_AccuracyOfATimeMeasurement_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'DQ_AccuracyOfATimeMeasurement_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmd}DQ_AccuracyOfATimeMeasurement uses Python identifier DQ_AccuracyOfATimeMeasurement
    __DQ_AccuracyOfATimeMeasurement = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'DQ_AccuracyOfATimeMeasurement'), 'DQ_AccuracyOfATimeMeasurement', '__httpwww_isotc211_org2005gmd_DQ_AccuracyOfATimeMeasurement_PropertyType_httpwww_isotc211_org2005gmdDQ_AccuracyOfATimeMeasurement', False)

    
    DQ_AccuracyOfATimeMeasurement = property(__DQ_AccuracyOfATimeMeasurement.value, __DQ_AccuracyOfATimeMeasurement.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_isotc211_org2005gmd_DQ_AccuracyOfATimeMeasurement_PropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmd_DQ_AccuracyOfATimeMeasurement_PropertyType_httpwww_isotc211_org2005gconilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_isotc211_org2005gmd_DQ_AccuracyOfATimeMeasurement_PropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute uuidref uses Python identifier uuidref
    __uuidref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uuidref'), 'uuidref', '__httpwww_isotc211_org2005gmd_DQ_AccuracyOfATimeMeasurement_PropertyType_uuidref', pyxb.binding.datatypes.string)
    
    uuidref = property(__uuidref.value, __uuidref.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_isotc211_org2005gmd_DQ_AccuracyOfATimeMeasurement_PropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_isotc211_org2005gmd_DQ_AccuracyOfATimeMeasurement_PropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_isotc211_org2005gmd_DQ_AccuracyOfATimeMeasurement_PropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_isotc211_org2005gmd_DQ_AccuracyOfATimeMeasurement_PropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_isotc211_org2005gmd_DQ_AccuracyOfATimeMeasurement_PropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)


    _ElementMap = {
        __DQ_AccuracyOfATimeMeasurement.name() : __DQ_AccuracyOfATimeMeasurement
    }
    _AttributeMap = {
        __type.name() : __type,
        __nilReason.name() : __nilReason,
        __show.name() : __show,
        __uuidref.name() : __uuidref,
        __actuate.name() : __actuate,
        __href.name() : __href,
        __title.name() : __title,
        __role.name() : __role,
        __arcrole.name() : __arcrole
    }
_Namespace_gmd.addCategoryObject('typeBinding', u'DQ_AccuracyOfATimeMeasurement_PropertyType', DQ_AccuracyOfATimeMeasurement_PropertyType)


# Complex type EngineeringDatumType with content type ELEMENT_ONLY
class EngineeringDatumType (AbstractDatumType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'EngineeringDatumType')
    # Base type is AbstractDatumType
    
    # Element scope ({http://www.opengis.net/gml/3.2}scope) inherited from {http://www.opengis.net/gml/3.2}AbstractDatumType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element anchorDefinition ({http://www.opengis.net/gml/3.2}anchorDefinition) inherited from {http://www.opengis.net/gml/3.2}AbstractDatumType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element realizationEpoch ({http://www.opengis.net/gml/3.2}realizationEpoch) inherited from {http://www.opengis.net/gml/3.2}AbstractDatumType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element domainOfValidity ({http://www.opengis.net/gml/3.2}domainOfValidity) inherited from {http://www.opengis.net/gml/3.2}AbstractDatumType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element remarks ({http://www.opengis.net/gml/3.2}remarks) inherited from {http://www.opengis.net/gml/3.2}DefinitionType
    
    # Attribute id_ inherited from {http://www.opengis.net/gml/3.2}DefinitionBaseType

    _ElementMap = AbstractDatumType._ElementMap.copy()
    _ElementMap.update({
        
    })
    _AttributeMap = AbstractDatumType._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gml.addCategoryObject('typeBinding', u'EngineeringDatumType', EngineeringDatumType)


# Complex type DS_Aggregate_PropertyType with content type ELEMENT_ONLY
class DS_Aggregate_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'DS_Aggregate_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmd}AbstractDS_Aggregate uses Python identifier AbstractDS_Aggregate
    __AbstractDS_Aggregate = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'AbstractDS_Aggregate'), 'AbstractDS_Aggregate', '__httpwww_isotc211_org2005gmd_DS_Aggregate_PropertyType_httpwww_isotc211_org2005gmdAbstractDS_Aggregate', False)

    
    AbstractDS_Aggregate = property(__AbstractDS_Aggregate.value, __AbstractDS_Aggregate.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_isotc211_org2005gmd_DS_Aggregate_PropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_isotc211_org2005gmd_DS_Aggregate_PropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_isotc211_org2005gmd_DS_Aggregate_PropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmd_DS_Aggregate_PropertyType_httpwww_isotc211_org2005gconilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_isotc211_org2005gmd_DS_Aggregate_PropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute uuidref uses Python identifier uuidref
    __uuidref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uuidref'), 'uuidref', '__httpwww_isotc211_org2005gmd_DS_Aggregate_PropertyType_uuidref', pyxb.binding.datatypes.string)
    
    uuidref = property(__uuidref.value, __uuidref.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_isotc211_org2005gmd_DS_Aggregate_PropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_isotc211_org2005gmd_DS_Aggregate_PropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_isotc211_org2005gmd_DS_Aggregate_PropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")


    _ElementMap = {
        __AbstractDS_Aggregate.name() : __AbstractDS_Aggregate
    }
    _AttributeMap = {
        __type.name() : __type,
        __arcrole.name() : __arcrole,
        __role.name() : __role,
        __nilReason.name() : __nilReason,
        __title.name() : __title,
        __uuidref.name() : __uuidref,
        __show.name() : __show,
        __href.name() : __href,
        __actuate.name() : __actuate
    }
_Namespace_gmd.addCategoryObject('typeBinding', u'DS_Aggregate_PropertyType', DS_Aggregate_PropertyType)


# Complex type MD_ScopeDescription_Type with content type ELEMENT_ONLY
class MD_ScopeDescription_Type (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_ScopeDescription_Type')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmd}features uses Python identifier features
    __features = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'features'), 'features', '__httpwww_isotc211_org2005gmd_MD_ScopeDescription_Type_httpwww_isotc211_org2005gmdfeatures', True)

    
    features = property(__features.value, __features.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}attributes uses Python identifier attributes
    __attributes = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'attributes'), 'attributes', '__httpwww_isotc211_org2005gmd_MD_ScopeDescription_Type_httpwww_isotc211_org2005gmdattributes', True)

    
    attributes = property(__attributes.value, __attributes.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}featureInstances uses Python identifier featureInstances
    __featureInstances = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'featureInstances'), 'featureInstances', '__httpwww_isotc211_org2005gmd_MD_ScopeDescription_Type_httpwww_isotc211_org2005gmdfeatureInstances', True)

    
    featureInstances = property(__featureInstances.value, __featureInstances.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}attributeInstances uses Python identifier attributeInstances
    __attributeInstances = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'attributeInstances'), 'attributeInstances', '__httpwww_isotc211_org2005gmd_MD_ScopeDescription_Type_httpwww_isotc211_org2005gmdattributeInstances', True)

    
    attributeInstances = property(__attributeInstances.value, __attributeInstances.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}dataset uses Python identifier dataset
    __dataset = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'dataset'), 'dataset', '__httpwww_isotc211_org2005gmd_MD_ScopeDescription_Type_httpwww_isotc211_org2005gmddataset', False)

    
    dataset = property(__dataset.value, __dataset.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}other uses Python identifier other
    __other = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'other'), 'other', '__httpwww_isotc211_org2005gmd_MD_ScopeDescription_Type_httpwww_isotc211_org2005gmdother', False)

    
    other = property(__other.value, __other.set, None, None)


    _ElementMap = {
        __features.name() : __features,
        __attributes.name() : __attributes,
        __featureInstances.name() : __featureInstances,
        __attributeInstances.name() : __attributeInstances,
        __dataset.name() : __dataset,
        __other.name() : __other
    }
    _AttributeMap = {
        
    }
_Namespace_gmd.addCategoryObject('typeBinding', u'MD_ScopeDescription_Type', MD_ScopeDescription_Type)


# Complex type DQ_CompletenessCommission_PropertyType with content type ELEMENT_ONLY
class DQ_CompletenessCommission_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'DQ_CompletenessCommission_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmd}DQ_CompletenessCommission uses Python identifier DQ_CompletenessCommission
    __DQ_CompletenessCommission = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'DQ_CompletenessCommission'), 'DQ_CompletenessCommission', '__httpwww_isotc211_org2005gmd_DQ_CompletenessCommission_PropertyType_httpwww_isotc211_org2005gmdDQ_CompletenessCommission', False)

    
    DQ_CompletenessCommission = property(__DQ_CompletenessCommission.value, __DQ_CompletenessCommission.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmd_DQ_CompletenessCommission_PropertyType_httpwww_isotc211_org2005gconilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_isotc211_org2005gmd_DQ_CompletenessCommission_PropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_isotc211_org2005gmd_DQ_CompletenessCommission_PropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_isotc211_org2005gmd_DQ_CompletenessCommission_PropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_isotc211_org2005gmd_DQ_CompletenessCommission_PropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_isotc211_org2005gmd_DQ_CompletenessCommission_PropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute uuidref uses Python identifier uuidref
    __uuidref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uuidref'), 'uuidref', '__httpwww_isotc211_org2005gmd_DQ_CompletenessCommission_PropertyType_uuidref', pyxb.binding.datatypes.string)
    
    uuidref = property(__uuidref.value, __uuidref.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_isotc211_org2005gmd_DQ_CompletenessCommission_PropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_isotc211_org2005gmd_DQ_CompletenessCommission_PropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)


    _ElementMap = {
        __DQ_CompletenessCommission.name() : __DQ_CompletenessCommission
    }
    _AttributeMap = {
        __nilReason.name() : __nilReason,
        __type.name() : __type,
        __title.name() : __title,
        __show.name() : __show,
        __href.name() : __href,
        __actuate.name() : __actuate,
        __uuidref.name() : __uuidref,
        __role.name() : __role,
        __arcrole.name() : __arcrole
    }
_Namespace_gmd.addCategoryObject('typeBinding', u'DQ_CompletenessCommission_PropertyType', DQ_CompletenessCommission_PropertyType)


# Complex type DQ_ConceptualConsistency_Type with content type ELEMENT_ONLY
class DQ_ConceptualConsistency_Type (AbstractDQ_LogicalConsistency_Type):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'DQ_ConceptualConsistency_Type')
    # Base type is AbstractDQ_LogicalConsistency_Type
    
    # Element evaluationMethodDescription ({http://www.isotc211.org/2005/gmd}evaluationMethodDescription) inherited from {http://www.isotc211.org/2005/gmd}AbstractDQ_Element_Type
    
    # Element measureDescription ({http://www.isotc211.org/2005/gmd}measureDescription) inherited from {http://www.isotc211.org/2005/gmd}AbstractDQ_Element_Type
    
    # Element evaluationProcedure ({http://www.isotc211.org/2005/gmd}evaluationProcedure) inherited from {http://www.isotc211.org/2005/gmd}AbstractDQ_Element_Type
    
    # Element evaluationMethodType ({http://www.isotc211.org/2005/gmd}evaluationMethodType) inherited from {http://www.isotc211.org/2005/gmd}AbstractDQ_Element_Type
    
    # Element dateTime ({http://www.isotc211.org/2005/gmd}dateTime) inherited from {http://www.isotc211.org/2005/gmd}AbstractDQ_Element_Type
    
    # Element result ({http://www.isotc211.org/2005/gmd}result) inherited from {http://www.isotc211.org/2005/gmd}AbstractDQ_Element_Type
    
    # Element nameOfMeasure ({http://www.isotc211.org/2005/gmd}nameOfMeasure) inherited from {http://www.isotc211.org/2005/gmd}AbstractDQ_Element_Type
    
    # Element measureIdentification ({http://www.isotc211.org/2005/gmd}measureIdentification) inherited from {http://www.isotc211.org/2005/gmd}AbstractDQ_Element_Type
    
    # Attribute id inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type
    
    # Attribute uuid inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type

    _ElementMap = AbstractDQ_LogicalConsistency_Type._ElementMap.copy()
    _ElementMap.update({
        
    })
    _AttributeMap = AbstractDQ_LogicalConsistency_Type._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gmd.addCategoryObject('typeBinding', u'DQ_ConceptualConsistency_Type', DQ_ConceptualConsistency_Type)


# Complex type DataBlockType with content type ELEMENT_ONLY
class DataBlockType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'DataBlockType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.opengis.net/gml/3.2}tupleList uses Python identifier tupleList
    __tupleList = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'tupleList'), 'tupleList', '__httpwww_opengis_netgml3_2_DataBlockType_httpwww_opengis_netgml3_2tupleList', False)

    
    tupleList = property(__tupleList.value, __tupleList.set, None, u'gml:CoordinatesType consists of a list of coordinate tuples, with each coordinate tuple separated by the ts or tuple separator (whitespace), and each coordinate in the tuple by the cs or coordinate separator (comma).\nThe gml:tupleList encoding is effectively "band-interleaved".')

    
    # Element {http://www.opengis.net/gml/3.2}rangeParameters uses Python identifier rangeParameters
    __rangeParameters = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'rangeParameters'), 'rangeParameters', '__httpwww_opengis_netgml3_2_DataBlockType_httpwww_opengis_netgml3_2rangeParameters', False)

    
    rangeParameters = property(__rangeParameters.value, __rangeParameters.set, None, None)

    
    # Element {http://www.opengis.net/gml/3.2}doubleOrNilReasonTupleList uses Python identifier doubleOrNilReasonTupleList
    __doubleOrNilReasonTupleList = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'doubleOrNilReasonTupleList'), 'doubleOrNilReasonTupleList', '__httpwww_opengis_netgml3_2_DataBlockType_httpwww_opengis_netgml3_2doubleOrNilReasonTupleList', False)

    
    doubleOrNilReasonTupleList = property(__doubleOrNilReasonTupleList.value, __doubleOrNilReasonTupleList.set, None, u'gml:doubleOrNilReasonList consists of a list of gml:doubleOrNilReason values, each separated by a whitespace. The gml:doubleOrNilReason values are grouped into tuples where the dimension of each tuple in the list is equal to the number of range parameters.')


    _ElementMap = {
        __tupleList.name() : __tupleList,
        __rangeParameters.name() : __rangeParameters,
        __doubleOrNilReasonTupleList.name() : __doubleOrNilReasonTupleList
    }
    _AttributeMap = {
        
    }
_Namespace_gml.addCategoryObject('typeBinding', u'DataBlockType', DataBlockType)


# Complex type ValueArrayPropertyType with content type ELEMENT_ONLY
class ValueArrayPropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'ValueArrayPropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.opengis.net/gml/3.2}Null uses Python identifier Null
    __Null = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'Null'), 'Null', '__httpwww_opengis_netgml3_2_ValueArrayPropertyType_httpwww_opengis_netgml3_2Null', True)

    
    Null = property(__Null.value, __Null.set, None, u'')

    
    # Element {http://www.opengis.net/gml/3.2}AbstractTimeObject uses Python identifier AbstractTimeObject
    __AbstractTimeObject = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractTimeObject'), 'AbstractTimeObject', '__httpwww_opengis_netgml3_2_ValueArrayPropertyType_httpwww_opengis_netgml3_2AbstractTimeObject', True)

    
    AbstractTimeObject = property(__AbstractTimeObject.value, __AbstractTimeObject.set, None, u'gml:AbstractTimeObject acts as the head of a substitution group for all temporal primitives and complexes.')

    
    # Element {http://www.opengis.net/gml/3.2}AbstractValue uses Python identifier AbstractValue
    __AbstractValue = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractValue'), 'AbstractValue', '__httpwww_opengis_netgml3_2_ValueArrayPropertyType_httpwww_opengis_netgml3_2AbstractValue', True)

    
    AbstractValue = property(__AbstractValue.value, __AbstractValue.set, None, u'gml:AbstractValue is an abstract element which acts as the head of a substitution group which contains gml:AbstractScalarValue, gml:AbstractScalarValueList, gml:CompositeValue and gml:ValueExtent, and (transitively) the elements in their substitution groups.\nThese elements may be used in an application schema as variables, so that in an XML instance document any member of its substitution group may occur.')

    
    # Element {http://www.opengis.net/gml/3.2}AbstractGeometry uses Python identifier AbstractGeometry
    __AbstractGeometry = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractGeometry'), 'AbstractGeometry', '__httpwww_opengis_netgml3_2_ValueArrayPropertyType_httpwww_opengis_netgml3_2AbstractGeometry', True)

    
    AbstractGeometry = property(__AbstractGeometry.value, __AbstractGeometry.set, None, u'The AbstractGeometry element is the abstract head of the substitution group for all geometry elements of GML. This includes pre-defined and user-defined geometry elements. Any geometry element shall be a direct or indirect extension/restriction of AbstractGeometryType and shall be directly or indirectly in the substitution group of AbstractGeometry.')

    
    # Attribute owns uses Python identifier owns
    __owns = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'owns'), 'owns', '__httpwww_opengis_netgml3_2_ValueArrayPropertyType_owns', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    owns = property(__owns.value, __owns.set, None, None)


    _ElementMap = {
        __Null.name() : __Null,
        __AbstractTimeObject.name() : __AbstractTimeObject,
        __AbstractValue.name() : __AbstractValue,
        __AbstractGeometry.name() : __AbstractGeometry
    }
    _AttributeMap = {
        __owns.name() : __owns
    }
_Namespace_gml.addCategoryObject('typeBinding', u'ValueArrayPropertyType', ValueArrayPropertyType)


# Complex type MD_DatatypeCode_PropertyType with content type ELEMENT_ONLY
class MD_DatatypeCode_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_DatatypeCode_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmd}MD_DatatypeCode uses Python identifier MD_DatatypeCode
    __MD_DatatypeCode = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_DatatypeCode'), 'MD_DatatypeCode', '__httpwww_isotc211_org2005gmd_MD_DatatypeCode_PropertyType_httpwww_isotc211_org2005gmdMD_DatatypeCode', False)

    
    MD_DatatypeCode = property(__MD_DatatypeCode.value, __MD_DatatypeCode.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmd_MD_DatatypeCode_PropertyType_httpwww_isotc211_org2005gconilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)


    _ElementMap = {
        __MD_DatatypeCode.name() : __MD_DatatypeCode
    }
    _AttributeMap = {
        __nilReason.name() : __nilReason
    }
_Namespace_gmd.addCategoryObject('typeBinding', u'MD_DatatypeCode_PropertyType', MD_DatatypeCode_PropertyType)


# Complex type UomArea_PropertyType with content type ELEMENT_ONLY
class UomArea_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gco, u'UomArea_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.opengis.net/gml/3.2}UnitDefinition uses Python identifier UnitDefinition
    __UnitDefinition = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'UnitDefinition'), 'UnitDefinition', '__httpwww_isotc211_org2005gco_UomArea_PropertyType_httpwww_opengis_netgml3_2UnitDefinition', False)

    
    UnitDefinition = property(__UnitDefinition.value, __UnitDefinition.set, None, u'A gml:UnitDefinition is a general definition of a unit of measure. This generic element is used only for units for which no relationship with other units or units systems is known.\nThe content model of gml:UnitDefinition adds three additional properties to gml:Definition, gml:quantityType, gml:quantityTypeReference and gml:catalogSymbol.  \nThe gml:catalogSymbol property optionally gives the short symbol used for this unit. This element is usually used when the relationship of this unit to other units or units systems is unknown.')

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_isotc211_org2005gco_UomArea_PropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_isotc211_org2005gco_UomArea_PropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_isotc211_org2005gco_UomArea_PropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_isotc211_org2005gco_UomArea_PropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute uuidref uses Python identifier uuidref
    __uuidref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uuidref'), 'uuidref', '__httpwww_isotc211_org2005gco_UomArea_PropertyType_uuidref', pyxb.binding.datatypes.string)
    
    uuidref = property(__uuidref.value, __uuidref.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gco_UomArea_PropertyType_httpwww_isotc211_org2005gconilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_isotc211_org2005gco_UomArea_PropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_isotc211_org2005gco_UomArea_PropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_isotc211_org2005gco_UomArea_PropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)


    _ElementMap = {
        __UnitDefinition.name() : __UnitDefinition
    }
    _AttributeMap = {
        __actuate.name() : __actuate,
        __type.name() : __type,
        __arcrole.name() : __arcrole,
        __role.name() : __role,
        __uuidref.name() : __uuidref,
        __nilReason.name() : __nilReason,
        __title.name() : __title,
        __show.name() : __show,
        __href.name() : __href
    }
_Namespace_gco.addCategoryObject('typeBinding', u'UomArea_PropertyType', UomArea_PropertyType)


# Complex type EX_GeographicBoundingBox_Type with content type ELEMENT_ONLY
class EX_GeographicBoundingBox_Type (AbstractEX_GeographicExtent_Type):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'EX_GeographicBoundingBox_Type')
    # Base type is AbstractEX_GeographicExtent_Type
    
    # Element {http://www.isotc211.org/2005/gmd}northBoundLatitude uses Python identifier northBoundLatitude
    __northBoundLatitude = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'northBoundLatitude'), 'northBoundLatitude', '__httpwww_isotc211_org2005gmd_EX_GeographicBoundingBox_Type_httpwww_isotc211_org2005gmdnorthBoundLatitude', False)

    
    northBoundLatitude = property(__northBoundLatitude.value, __northBoundLatitude.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}westBoundLongitude uses Python identifier westBoundLongitude
    __westBoundLongitude = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'westBoundLongitude'), 'westBoundLongitude', '__httpwww_isotc211_org2005gmd_EX_GeographicBoundingBox_Type_httpwww_isotc211_org2005gmdwestBoundLongitude', False)

    
    westBoundLongitude = property(__westBoundLongitude.value, __westBoundLongitude.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}eastBoundLongitude uses Python identifier eastBoundLongitude
    __eastBoundLongitude = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'eastBoundLongitude'), 'eastBoundLongitude', '__httpwww_isotc211_org2005gmd_EX_GeographicBoundingBox_Type_httpwww_isotc211_org2005gmdeastBoundLongitude', False)

    
    eastBoundLongitude = property(__eastBoundLongitude.value, __eastBoundLongitude.set, None, None)

    
    # Element extentTypeCode ({http://www.isotc211.org/2005/gmd}extentTypeCode) inherited from {http://www.isotc211.org/2005/gmd}AbstractEX_GeographicExtent_Type
    
    # Element {http://www.isotc211.org/2005/gmd}southBoundLatitude uses Python identifier southBoundLatitude
    __southBoundLatitude = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'southBoundLatitude'), 'southBoundLatitude', '__httpwww_isotc211_org2005gmd_EX_GeographicBoundingBox_Type_httpwww_isotc211_org2005gmdsouthBoundLatitude', False)

    
    southBoundLatitude = property(__southBoundLatitude.value, __southBoundLatitude.set, None, None)

    
    # Attribute id inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type
    
    # Attribute uuid inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type

    _ElementMap = AbstractEX_GeographicExtent_Type._ElementMap.copy()
    _ElementMap.update({
        __northBoundLatitude.name() : __northBoundLatitude,
        __westBoundLongitude.name() : __westBoundLongitude,
        __eastBoundLongitude.name() : __eastBoundLongitude,
        __southBoundLatitude.name() : __southBoundLatitude
    })
    _AttributeMap = AbstractEX_GeographicExtent_Type._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gmd.addCategoryObject('typeBinding', u'EX_GeographicBoundingBox_Type', EX_GeographicBoundingBox_Type)


# Complex type AbstractTimeTopologyPrimitiveType with content type ELEMENT_ONLY
class AbstractTimeTopologyPrimitiveType (AbstractTimePrimitiveType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = True
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractTimeTopologyPrimitiveType')
    # Base type is AbstractTimePrimitiveType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element {http://www.opengis.net/gml/3.2}complex uses Python identifier complex
    __complex = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'complex'), 'complex', '__httpwww_opengis_netgml3_2_AbstractTimeTopologyPrimitiveType_httpwww_opengis_netgml3_2complex', False)

    
    complex = property(__complex.value, __complex.set, None, None)

    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element relatedTime ({http://www.opengis.net/gml/3.2}relatedTime) inherited from {http://www.opengis.net/gml/3.2}AbstractTimePrimitiveType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Attribute id inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType

    _ElementMap = AbstractTimePrimitiveType._ElementMap.copy()
    _ElementMap.update({
        __complex.name() : __complex
    })
    _AttributeMap = AbstractTimePrimitiveType._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gml.addCategoryObject('typeBinding', u'AbstractTimeTopologyPrimitiveType', AbstractTimeTopologyPrimitiveType)


# Complex type TimeNodeType with content type ELEMENT_ONLY
class TimeNodeType (AbstractTimeTopologyPrimitiveType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'TimeNodeType')
    # Base type is AbstractTimeTopologyPrimitiveType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element {http://www.opengis.net/gml/3.2}position uses Python identifier position
    __position = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'position'), 'position', '__httpwww_opengis_netgml3_2_TimeNodeType_httpwww_opengis_netgml3_2position', False)

    
    position = property(__position.value, __position.set, None, None)

    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element {http://www.opengis.net/gml/3.2}nextEdge uses Python identifier nextEdge
    __nextEdge = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'nextEdge'), 'nextEdge', '__httpwww_opengis_netgml3_2_TimeNodeType_httpwww_opengis_netgml3_2nextEdge', True)

    
    nextEdge = property(__nextEdge.value, __nextEdge.set, None, None)

    
    # Element complex ({http://www.opengis.net/gml/3.2}complex) inherited from {http://www.opengis.net/gml/3.2}AbstractTimeTopologyPrimitiveType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element relatedTime ({http://www.opengis.net/gml/3.2}relatedTime) inherited from {http://www.opengis.net/gml/3.2}AbstractTimePrimitiveType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element {http://www.opengis.net/gml/3.2}previousEdge uses Python identifier previousEdge
    __previousEdge = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'previousEdge'), 'previousEdge', '__httpwww_opengis_netgml3_2_TimeNodeType_httpwww_opengis_netgml3_2previousEdge', True)

    
    previousEdge = property(__previousEdge.value, __previousEdge.set, None, None)

    
    # Attribute id inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType

    _ElementMap = AbstractTimeTopologyPrimitiveType._ElementMap.copy()
    _ElementMap.update({
        __position.name() : __position,
        __nextEdge.name() : __nextEdge,
        __previousEdge.name() : __previousEdge
    })
    _AttributeMap = AbstractTimeTopologyPrimitiveType._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gml.addCategoryObject('typeBinding', u'TimeNodeType', TimeNodeType)


# Complex type DS_ProductionSeries_PropertyType with content type ELEMENT_ONLY
class DS_ProductionSeries_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'DS_ProductionSeries_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmd}DS_ProductionSeries uses Python identifier DS_ProductionSeries
    __DS_ProductionSeries = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'DS_ProductionSeries'), 'DS_ProductionSeries', '__httpwww_isotc211_org2005gmd_DS_ProductionSeries_PropertyType_httpwww_isotc211_org2005gmdDS_ProductionSeries', False)

    
    DS_ProductionSeries = property(__DS_ProductionSeries.value, __DS_ProductionSeries.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_isotc211_org2005gmd_DS_ProductionSeries_PropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_isotc211_org2005gmd_DS_ProductionSeries_PropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_isotc211_org2005gmd_DS_ProductionSeries_PropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_isotc211_org2005gmd_DS_ProductionSeries_PropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute uuidref uses Python identifier uuidref
    __uuidref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uuidref'), 'uuidref', '__httpwww_isotc211_org2005gmd_DS_ProductionSeries_PropertyType_uuidref', pyxb.binding.datatypes.string)
    
    uuidref = property(__uuidref.value, __uuidref.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_isotc211_org2005gmd_DS_ProductionSeries_PropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_isotc211_org2005gmd_DS_ProductionSeries_PropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmd_DS_ProductionSeries_PropertyType_httpwww_isotc211_org2005gconilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_isotc211_org2005gmd_DS_ProductionSeries_PropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)


    _ElementMap = {
        __DS_ProductionSeries.name() : __DS_ProductionSeries
    }
    _AttributeMap = {
        __type.name() : __type,
        __show.name() : __show,
        __href.name() : __href,
        __actuate.name() : __actuate,
        __uuidref.name() : __uuidref,
        __arcrole.name() : __arcrole,
        __role.name() : __role,
        __nilReason.name() : __nilReason,
        __title.name() : __title
    }
_Namespace_gmd.addCategoryObject('typeBinding', u'DS_ProductionSeries_PropertyType', DS_ProductionSeries_PropertyType)


# Complex type DomainSetType with content type ELEMENT_ONLY
class DomainSetType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'DomainSetType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.opengis.net/gml/3.2}AbstractGeometry uses Python identifier AbstractGeometry
    __AbstractGeometry = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractGeometry'), 'AbstractGeometry', '__httpwww_opengis_netgml3_2_DomainSetType_httpwww_opengis_netgml3_2AbstractGeometry', False)

    
    AbstractGeometry = property(__AbstractGeometry.value, __AbstractGeometry.set, None, u'The AbstractGeometry element is the abstract head of the substitution group for all geometry elements of GML. This includes pre-defined and user-defined geometry elements. Any geometry element shall be a direct or indirect extension/restriction of AbstractGeometryType and shall be directly or indirectly in the substitution group of AbstractGeometry.')

    
    # Element {http://www.opengis.net/gml/3.2}AbstractTimeObject uses Python identifier AbstractTimeObject
    __AbstractTimeObject = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractTimeObject'), 'AbstractTimeObject', '__httpwww_opengis_netgml3_2_DomainSetType_httpwww_opengis_netgml3_2AbstractTimeObject', False)

    
    AbstractTimeObject = property(__AbstractTimeObject.value, __AbstractTimeObject.set, None, u'gml:AbstractTimeObject acts as the head of a substitution group for all temporal primitives and complexes.')

    
    # Attribute owns uses Python identifier owns
    __owns = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'owns'), 'owns', '__httpwww_opengis_netgml3_2_DomainSetType_owns', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    owns = property(__owns.value, __owns.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_opengis_netgml3_2_DomainSetType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_opengis_netgml3_2_DomainSetType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_opengis_netgml3_2_DomainSetType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'nilReason'), 'nilReason', '__httpwww_opengis_netgml3_2_DomainSetType_nilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_opengis_netgml3_2_DomainSetType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_opengis_netgml3_2_DomainSetType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.opengis.net/gml/3.2}remoteSchema uses Python identifier remoteSchema
    __remoteSchema = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'remoteSchema'), 'remoteSchema', '__httpwww_opengis_netgml3_2_DomainSetType_httpwww_opengis_netgml3_2remoteSchema', pyxb.binding.datatypes.anyURI)
    
    remoteSchema = property(__remoteSchema.value, __remoteSchema.set, None, u'')

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_opengis_netgml3_2_DomainSetType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_opengis_netgml3_2_DomainSetType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)


    _ElementMap = {
        __AbstractGeometry.name() : __AbstractGeometry,
        __AbstractTimeObject.name() : __AbstractTimeObject
    }
    _AttributeMap = {
        __owns.name() : __owns,
        __href.name() : __href,
        __type.name() : __type,
        __arcrole.name() : __arcrole,
        __nilReason.name() : __nilReason,
        __role.name() : __role,
        __show.name() : __show,
        __remoteSchema.name() : __remoteSchema,
        __actuate.name() : __actuate,
        __title.name() : __title
    }
_Namespace_gml.addCategoryObject('typeBinding', u'DomainSetType', DomainSetType)


# Complex type Angle_PropertyType with content type ELEMENT_ONLY
class Angle_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gco, u'Angle_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gco}Angle uses Python identifier Angle
    __Angle = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'Angle'), 'Angle', '__httpwww_isotc211_org2005gco_Angle_PropertyType_httpwww_isotc211_org2005gcoAngle', False)

    
    Angle = property(__Angle.value, __Angle.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gco_Angle_PropertyType_httpwww_isotc211_org2005gconilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)


    _ElementMap = {
        __Angle.name() : __Angle
    }
    _AttributeMap = {
        __nilReason.name() : __nilReason
    }
_Namespace_gco.addCategoryObject('typeBinding', u'Angle_PropertyType', Angle_PropertyType)


# Complex type LI_ProcessStep_Type with content type ELEMENT_ONLY
class LI_ProcessStep_Type (AbstractObject_Type):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'LI_ProcessStep_Type')
    # Base type is AbstractObject_Type
    
    # Element {http://www.isotc211.org/2005/gmd}source uses Python identifier source
    __source = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'source'), 'source', '__httpwww_isotc211_org2005gmd_LI_ProcessStep_Type_httpwww_isotc211_org2005gmdsource', True)

    
    source = property(__source.value, __source.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}description uses Python identifier description
    __description = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'description'), 'description', '__httpwww_isotc211_org2005gmd_LI_ProcessStep_Type_httpwww_isotc211_org2005gmddescription', False)

    
    description = property(__description.value, __description.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}dateTime uses Python identifier dateTime
    __dateTime = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'dateTime'), 'dateTime', '__httpwww_isotc211_org2005gmd_LI_ProcessStep_Type_httpwww_isotc211_org2005gmddateTime', False)

    
    dateTime = property(__dateTime.value, __dateTime.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}processor uses Python identifier processor
    __processor = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'processor'), 'processor', '__httpwww_isotc211_org2005gmd_LI_ProcessStep_Type_httpwww_isotc211_org2005gmdprocessor', True)

    
    processor = property(__processor.value, __processor.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}rationale uses Python identifier rationale
    __rationale = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'rationale'), 'rationale', '__httpwww_isotc211_org2005gmd_LI_ProcessStep_Type_httpwww_isotc211_org2005gmdrationale', False)

    
    rationale = property(__rationale.value, __rationale.set, None, None)

    
    # Attribute id inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type
    
    # Attribute uuid inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type

    _ElementMap = AbstractObject_Type._ElementMap.copy()
    _ElementMap.update({
        __source.name() : __source,
        __description.name() : __description,
        __dateTime.name() : __dateTime,
        __processor.name() : __processor,
        __rationale.name() : __rationale
    })
    _AttributeMap = AbstractObject_Type._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gmd.addCategoryObject('typeBinding', u'LI_ProcessStep_Type', LI_ProcessStep_Type)


# Complex type DS_Association_Type with content type EMPTY
class DS_Association_Type (AbstractObject_Type):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'DS_Association_Type')
    # Base type is AbstractObject_Type
    
    # Attribute id inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type
    
    # Attribute uuid inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type

    _ElementMap = AbstractObject_Type._ElementMap.copy()
    _ElementMap.update({
        
    })
    _AttributeMap = AbstractObject_Type._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gmd.addCategoryObject('typeBinding', u'DS_Association_Type', DS_Association_Type)


# Complex type Distance_PropertyType with content type ELEMENT_ONLY
class Distance_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gco, u'Distance_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gco}Distance uses Python identifier Distance
    __Distance = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'Distance'), 'Distance', '__httpwww_isotc211_org2005gco_Distance_PropertyType_httpwww_isotc211_org2005gcoDistance', False)

    
    Distance = property(__Distance.value, __Distance.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gco_Distance_PropertyType_httpwww_isotc211_org2005gconilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)


    _ElementMap = {
        __Distance.name() : __Distance
    }
    _AttributeMap = {
        __nilReason.name() : __nilReason
    }
_Namespace_gco.addCategoryObject('typeBinding', u'Distance_PropertyType', Distance_PropertyType)


# Complex type CTD_ANON_4 with content type SIMPLE
class CTD_ANON_4 (CodeType):
    _TypeDefinition = pyxb.binding.datatypes.string
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    # Base type is CodeType
    
    # Attribute nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'nilReason'), 'nilReason', '__httpwww_opengis_netgml3_2_CTD_ANON_4_nilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute codeSpace inherited from {http://www.opengis.net/gml/3.2}CodeType

    _ElementMap = CodeType._ElementMap.copy()
    _ElementMap.update({
        
    })
    _AttributeMap = CodeType._AttributeMap.copy()
    _AttributeMap.update({
        __nilReason.name() : __nilReason
    })



# Complex type EX_TemporalExtent_PropertyType with content type ELEMENT_ONLY
class EX_TemporalExtent_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'EX_TemporalExtent_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmd}EX_TemporalExtent uses Python identifier EX_TemporalExtent
    __EX_TemporalExtent = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'EX_TemporalExtent'), 'EX_TemporalExtent', '__httpwww_isotc211_org2005gmd_EX_TemporalExtent_PropertyType_httpwww_isotc211_org2005gmdEX_TemporalExtent', False)

    
    EX_TemporalExtent = property(__EX_TemporalExtent.value, __EX_TemporalExtent.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_isotc211_org2005gmd_EX_TemporalExtent_PropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_isotc211_org2005gmd_EX_TemporalExtent_PropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_isotc211_org2005gmd_EX_TemporalExtent_PropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_isotc211_org2005gmd_EX_TemporalExtent_PropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute uuidref uses Python identifier uuidref
    __uuidref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uuidref'), 'uuidref', '__httpwww_isotc211_org2005gmd_EX_TemporalExtent_PropertyType_uuidref', pyxb.binding.datatypes.string)
    
    uuidref = property(__uuidref.value, __uuidref.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_isotc211_org2005gmd_EX_TemporalExtent_PropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_isotc211_org2005gmd_EX_TemporalExtent_PropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmd_EX_TemporalExtent_PropertyType_httpwww_isotc211_org2005gconilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_isotc211_org2005gmd_EX_TemporalExtent_PropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)


    _ElementMap = {
        __EX_TemporalExtent.name() : __EX_TemporalExtent
    }
    _AttributeMap = {
        __actuate.name() : __actuate,
        __type.name() : __type,
        __show.name() : __show,
        __href.name() : __href,
        __uuidref.name() : __uuidref,
        __arcrole.name() : __arcrole,
        __role.name() : __role,
        __nilReason.name() : __nilReason,
        __title.name() : __title
    }
_Namespace_gmd.addCategoryObject('typeBinding', u'EX_TemporalExtent_PropertyType', EX_TemporalExtent_PropertyType)


# Complex type GeodeticCRSPropertyType with content type ELEMENT_ONLY
class GeodeticCRSPropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'GeodeticCRSPropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.opengis.net/gml/3.2}GeodeticCRS uses Python identifier GeodeticCRS
    __GeodeticCRS = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'GeodeticCRS'), 'GeodeticCRS', '__httpwww_opengis_netgml3_2_GeodeticCRSPropertyType_httpwww_opengis_netgml3_2GeodeticCRS', False)

    
    GeodeticCRS = property(__GeodeticCRS.value, __GeodeticCRS.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_opengis_netgml3_2_GeodeticCRSPropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.opengis.net/gml/3.2}remoteSchema uses Python identifier remoteSchema
    __remoteSchema = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'remoteSchema'), 'remoteSchema', '__httpwww_opengis_netgml3_2_GeodeticCRSPropertyType_httpwww_opengis_netgml3_2remoteSchema', pyxb.binding.datatypes.anyURI)
    
    remoteSchema = property(__remoteSchema.value, __remoteSchema.set, None, u'')

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_opengis_netgml3_2_GeodeticCRSPropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_opengis_netgml3_2_GeodeticCRSPropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_opengis_netgml3_2_GeodeticCRSPropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_opengis_netgml3_2_GeodeticCRSPropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'nilReason'), 'nilReason', '__httpwww_opengis_netgml3_2_GeodeticCRSPropertyType_nilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_opengis_netgml3_2_GeodeticCRSPropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_opengis_netgml3_2_GeodeticCRSPropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)


    _ElementMap = {
        __GeodeticCRS.name() : __GeodeticCRS
    }
    _AttributeMap = {
        __arcrole.name() : __arcrole,
        __remoteSchema.name() : __remoteSchema,
        __role.name() : __role,
        __show.name() : __show,
        __title.name() : __title,
        __actuate.name() : __actuate,
        __nilReason.name() : __nilReason,
        __href.name() : __href,
        __type.name() : __type
    }
_Namespace_gml.addCategoryObject('typeBinding', u'GeodeticCRSPropertyType', GeodeticCRSPropertyType)


# Complex type MD_LegalConstraints_Type with content type ELEMENT_ONLY
class MD_LegalConstraints_Type (MD_Constraints_Type):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_LegalConstraints_Type')
    # Base type is MD_Constraints_Type
    
    # Element {http://www.isotc211.org/2005/gmd}otherConstraints uses Python identifier otherConstraints
    __otherConstraints = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'otherConstraints'), 'otherConstraints', '__httpwww_isotc211_org2005gmd_MD_LegalConstraints_Type_httpwww_isotc211_org2005gmdotherConstraints', True)

    
    otherConstraints = property(__otherConstraints.value, __otherConstraints.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}accessConstraints uses Python identifier accessConstraints
    __accessConstraints = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'accessConstraints'), 'accessConstraints', '__httpwww_isotc211_org2005gmd_MD_LegalConstraints_Type_httpwww_isotc211_org2005gmdaccessConstraints', True)

    
    accessConstraints = property(__accessConstraints.value, __accessConstraints.set, None, None)

    
    # Element useLimitation ({http://www.isotc211.org/2005/gmd}useLimitation) inherited from {http://www.isotc211.org/2005/gmd}MD_Constraints_Type
    
    # Element {http://www.isotc211.org/2005/gmd}useConstraints uses Python identifier useConstraints
    __useConstraints = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'useConstraints'), 'useConstraints', '__httpwww_isotc211_org2005gmd_MD_LegalConstraints_Type_httpwww_isotc211_org2005gmduseConstraints', True)

    
    useConstraints = property(__useConstraints.value, __useConstraints.set, None, None)

    
    # Attribute id inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type
    
    # Attribute uuid inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type

    _ElementMap = MD_Constraints_Type._ElementMap.copy()
    _ElementMap.update({
        __otherConstraints.name() : __otherConstraints,
        __accessConstraints.name() : __accessConstraints,
        __useConstraints.name() : __useConstraints
    })
    _AttributeMap = MD_Constraints_Type._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gmd.addCategoryObject('typeBinding', u'MD_LegalConstraints_Type', MD_LegalConstraints_Type)


# Complex type LineStringSegmentType with content type ELEMENT_ONLY
class LineStringSegmentType (AbstractCurveSegmentType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'LineStringSegmentType')
    # Base type is AbstractCurveSegmentType
    
    # Element {http://www.opengis.net/gml/3.2}pointRep uses Python identifier pointRep
    __pointRep = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'pointRep'), 'pointRep', '__httpwww_opengis_netgml3_2_LineStringSegmentType_httpwww_opengis_netgml3_2pointRep', True)

    
    pointRep = property(__pointRep.value, __pointRep.set, None, u'')

    
    # Element {http://www.opengis.net/gml/3.2}pointProperty uses Python identifier pointProperty
    __pointProperty = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'pointProperty'), 'pointProperty', '__httpwww_opengis_netgml3_2_LineStringSegmentType_httpwww_opengis_netgml3_2pointProperty', True)

    
    pointProperty = property(__pointProperty.value, __pointProperty.set, None, u'This property element either references a point via the XLink-attributes or contains the point element. pointProperty is the predefined property which may be used by GML Application Schemas whenever a GML feature has a property with a value that is substitutable for Point.')

    
    # Element {http://www.opengis.net/gml/3.2}pos uses Python identifier pos
    __pos = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'pos'), 'pos', '__httpwww_opengis_netgml3_2_LineStringSegmentType_httpwww_opengis_netgml3_2pos', True)

    
    pos = property(__pos.value, __pos.set, None, None)

    
    # Element {http://www.opengis.net/gml/3.2}posList uses Python identifier posList
    __posList = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'posList'), 'posList', '__httpwww_opengis_netgml3_2_LineStringSegmentType_httpwww_opengis_netgml3_2posList', False)

    
    posList = property(__posList.value, __posList.set, None, None)

    
    # Element {http://www.opengis.net/gml/3.2}coordinates uses Python identifier coordinates
    __coordinates = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'coordinates'), 'coordinates', '__httpwww_opengis_netgml3_2_LineStringSegmentType_httpwww_opengis_netgml3_2coordinates', False)

    
    coordinates = property(__coordinates.value, __coordinates.set, None, u'')

    
    # Attribute numDerivativesAtEnd inherited from {http://www.opengis.net/gml/3.2}AbstractCurveSegmentType
    
    # Attribute numDerivativesAtStart inherited from {http://www.opengis.net/gml/3.2}AbstractCurveSegmentType
    
    # Attribute interpolation uses Python identifier interpolation
    __interpolation = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'interpolation'), 'interpolation', '__httpwww_opengis_netgml3_2_LineStringSegmentType_interpolation', CurveInterpolationType, fixed=True, unicode_default=u'linear')
    
    interpolation = property(__interpolation.value, __interpolation.set, None, None)

    
    # Attribute numDerivativeInterior inherited from {http://www.opengis.net/gml/3.2}AbstractCurveSegmentType

    _ElementMap = AbstractCurveSegmentType._ElementMap.copy()
    _ElementMap.update({
        __pointRep.name() : __pointRep,
        __pointProperty.name() : __pointProperty,
        __pos.name() : __pos,
        __posList.name() : __posList,
        __coordinates.name() : __coordinates
    })
    _AttributeMap = AbstractCurveSegmentType._AttributeMap.copy()
    _AttributeMap.update({
        __interpolation.name() : __interpolation
    })
_Namespace_gml.addCategoryObject('typeBinding', u'LineStringSegmentType', LineStringSegmentType)


# Complex type TopoSurfacePropertyType with content type ELEMENT_ONLY
class TopoSurfacePropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'TopoSurfacePropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.opengis.net/gml/3.2}TopoSurface uses Python identifier TopoSurface
    __TopoSurface = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'TopoSurface'), 'TopoSurface', '__httpwww_opengis_netgml3_2_TopoSurfacePropertyType_httpwww_opengis_netgml3_2TopoSurface', False)

    
    TopoSurface = property(__TopoSurface.value, __TopoSurface.set, None, u'gml:TopoSurface represents a homogeneous topological expression, a set of directed faces, which if realised are isomorphic to a geometric surface primitive. The intended use of gml:TopoSurface is to appear within a surface feature to express the structural and possibly geometric relationships of this surface feature to other features via the shared face definitions.')

    
    # Attribute owns uses Python identifier owns
    __owns = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'owns'), 'owns', '__httpwww_opengis_netgml3_2_TopoSurfacePropertyType_owns', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    owns = property(__owns.value, __owns.set, None, None)


    _ElementMap = {
        __TopoSurface.name() : __TopoSurface
    }
    _AttributeMap = {
        __owns.name() : __owns
    }
_Namespace_gml.addCategoryObject('typeBinding', u'TopoSurfacePropertyType', TopoSurfacePropertyType)


# Complex type LinearCSType with content type ELEMENT_ONLY
class LinearCSType (AbstractCoordinateSystemType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'LinearCSType')
    # Base type is AbstractCoordinateSystemType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element axis ({http://www.opengis.net/gml/3.2}axis) inherited from {http://www.opengis.net/gml/3.2}AbstractCoordinateSystemType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element remarks ({http://www.opengis.net/gml/3.2}remarks) inherited from {http://www.opengis.net/gml/3.2}DefinitionType
    
    # Attribute aggregationType inherited from {http://www.opengis.net/gml/3.2}AbstractCoordinateSystemType
    
    # Attribute id_ inherited from {http://www.opengis.net/gml/3.2}DefinitionBaseType

    _ElementMap = AbstractCoordinateSystemType._ElementMap.copy()
    _ElementMap.update({
        
    })
    _AttributeMap = AbstractCoordinateSystemType._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gml.addCategoryObject('typeBinding', u'LinearCSType', LinearCSType)


# Complex type DQ_NonQuantitativeAttributeAccuracy_Type with content type ELEMENT_ONLY
class DQ_NonQuantitativeAttributeAccuracy_Type (AbstractDQ_ThematicAccuracy_Type):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'DQ_NonQuantitativeAttributeAccuracy_Type')
    # Base type is AbstractDQ_ThematicAccuracy_Type
    
    # Element evaluationMethodDescription ({http://www.isotc211.org/2005/gmd}evaluationMethodDescription) inherited from {http://www.isotc211.org/2005/gmd}AbstractDQ_Element_Type
    
    # Element measureDescription ({http://www.isotc211.org/2005/gmd}measureDescription) inherited from {http://www.isotc211.org/2005/gmd}AbstractDQ_Element_Type
    
    # Element evaluationProcedure ({http://www.isotc211.org/2005/gmd}evaluationProcedure) inherited from {http://www.isotc211.org/2005/gmd}AbstractDQ_Element_Type
    
    # Element evaluationMethodType ({http://www.isotc211.org/2005/gmd}evaluationMethodType) inherited from {http://www.isotc211.org/2005/gmd}AbstractDQ_Element_Type
    
    # Element dateTime ({http://www.isotc211.org/2005/gmd}dateTime) inherited from {http://www.isotc211.org/2005/gmd}AbstractDQ_Element_Type
    
    # Element result ({http://www.isotc211.org/2005/gmd}result) inherited from {http://www.isotc211.org/2005/gmd}AbstractDQ_Element_Type
    
    # Element nameOfMeasure ({http://www.isotc211.org/2005/gmd}nameOfMeasure) inherited from {http://www.isotc211.org/2005/gmd}AbstractDQ_Element_Type
    
    # Element measureIdentification ({http://www.isotc211.org/2005/gmd}measureIdentification) inherited from {http://www.isotc211.org/2005/gmd}AbstractDQ_Element_Type
    
    # Attribute id inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type
    
    # Attribute uuid inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type

    _ElementMap = AbstractDQ_ThematicAccuracy_Type._ElementMap.copy()
    _ElementMap.update({
        
    })
    _AttributeMap = AbstractDQ_ThematicAccuracy_Type._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gmd.addCategoryObject('typeBinding', u'DQ_NonQuantitativeAttributeAccuracy_Type', DQ_NonQuantitativeAttributeAccuracy_Type)


# Complex type GeographicCRSPropertyType with content type ELEMENT_ONLY
class GeographicCRSPropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'GeographicCRSPropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.opengis.net/gml/3.2}GeographicCRS uses Python identifier GeographicCRS
    __GeographicCRS = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'GeographicCRS'), 'GeographicCRS', '__httpwww_opengis_netgml3_2_GeographicCRSPropertyType_httpwww_opengis_netgml3_2GeographicCRS', False)

    
    GeographicCRS = property(__GeographicCRS.value, __GeographicCRS.set, None, u'')

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_opengis_netgml3_2_GeographicCRSPropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.opengis.net/gml/3.2}remoteSchema uses Python identifier remoteSchema
    __remoteSchema = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'remoteSchema'), 'remoteSchema', '__httpwww_opengis_netgml3_2_GeographicCRSPropertyType_httpwww_opengis_netgml3_2remoteSchema', pyxb.binding.datatypes.anyURI)
    
    remoteSchema = property(__remoteSchema.value, __remoteSchema.set, None, u'')

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_opengis_netgml3_2_GeographicCRSPropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_opengis_netgml3_2_GeographicCRSPropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_opengis_netgml3_2_GeographicCRSPropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'nilReason'), 'nilReason', '__httpwww_opengis_netgml3_2_GeographicCRSPropertyType_nilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_opengis_netgml3_2_GeographicCRSPropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_opengis_netgml3_2_GeographicCRSPropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_opengis_netgml3_2_GeographicCRSPropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)


    _ElementMap = {
        __GeographicCRS.name() : __GeographicCRS
    }
    _AttributeMap = {
        __role.name() : __role,
        __remoteSchema.name() : __remoteSchema,
        __show.name() : __show,
        __actuate.name() : __actuate,
        __href.name() : __href,
        __nilReason.name() : __nilReason,
        __type.name() : __type,
        __title.name() : __title,
        __arcrole.name() : __arcrole
    }
_Namespace_gml.addCategoryObject('typeBinding', u'GeographicCRSPropertyType', GeographicCRSPropertyType)


# Complex type CTD_ANON_5 with content type SIMPLE
class CTD_ANON_5 (MeasureType):
    _TypeDefinition = pyxb.binding.datatypes.double
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    # Base type is MeasureType
    
    # Attribute nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'nilReason'), 'nilReason', '__httpwww_opengis_netgml3_2_CTD_ANON_5_nilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute uom inherited from {http://www.opengis.net/gml/3.2}MeasureType

    _ElementMap = MeasureType._ElementMap.copy()
    _ElementMap.update({
        
    })
    _AttributeMap = MeasureType._AttributeMap.copy()
    _AttributeMap.update({
        __nilReason.name() : __nilReason
    })



# Complex type RecordType_PropertyType with content type ELEMENT_ONLY
class RecordType_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gco, u'RecordType_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gco}RecordType uses Python identifier RecordType
    __RecordType = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'RecordType'), 'RecordType', '__httpwww_isotc211_org2005gco_RecordType_PropertyType_httpwww_isotc211_org2005gcoRecordType', False)

    
    RecordType = property(__RecordType.value, __RecordType.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gco_RecordType_PropertyType_httpwww_isotc211_org2005gconilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)


    _ElementMap = {
        __RecordType.name() : __RecordType
    }
    _AttributeMap = {
        __nilReason.name() : __nilReason
    }
_Namespace_gco.addCategoryObject('typeBinding', u'RecordType_PropertyType', RecordType_PropertyType)


# Complex type CurveType with content type ELEMENT_ONLY
class CurveType (AbstractCurveType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'CurveType')
    # Base type is AbstractCurveType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element {http://www.opengis.net/gml/3.2}segments uses Python identifier segments
    __segments = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'segments'), 'segments', '__httpwww_opengis_netgml3_2_CurveType_httpwww_opengis_netgml3_2segments', False)

    
    segments = property(__segments.value, __segments.set, None, u'This property element contains a list of curve segments. The order of the elements is significant and shall be preserved when processing the array.')

    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Attribute srsName inherited from {http://www.opengis.net/gml/3.2}AbstractGeometryType
    
    # Attribute axisLabels inherited from {http://www.opengis.net/gml/3.2}AbstractGeometryType
    
    # Attribute id inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Attribute uomLabels inherited from {http://www.opengis.net/gml/3.2}AbstractGeometryType
    
    # Attribute srsDimension inherited from {http://www.opengis.net/gml/3.2}AbstractGeometryType

    _ElementMap = AbstractCurveType._ElementMap.copy()
    _ElementMap.update({
        __segments.name() : __segments
    })
    _AttributeMap = AbstractCurveType._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gml.addCategoryObject('typeBinding', u'CurveType', CurveType)


# Complex type TimeClockType with content type ELEMENT_ONLY
class TimeClockType (TimeReferenceSystemType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'TimeClockType')
    # Base type is TimeReferenceSystemType
    
    # Element {http://www.opengis.net/gml/3.2}referenceTime uses Python identifier referenceTime
    __referenceTime = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'referenceTime'), 'referenceTime', '__httpwww_opengis_netgml3_2_TimeClockType_httpwww_opengis_netgml3_2referenceTime', False)

    
    referenceTime = property(__referenceTime.value, __referenceTime.set, None, None)

    
    # Element {http://www.opengis.net/gml/3.2}referenceEvent uses Python identifier referenceEvent
    __referenceEvent = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'referenceEvent'), 'referenceEvent', '__httpwww_opengis_netgml3_2_TimeClockType_httpwww_opengis_netgml3_2referenceEvent', False)

    
    referenceEvent = property(__referenceEvent.value, __referenceEvent.set, None, None)

    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element {http://www.opengis.net/gml/3.2}dateBasis uses Python identifier dateBasis
    __dateBasis = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'dateBasis'), 'dateBasis', '__httpwww_opengis_netgml3_2_TimeClockType_httpwww_opengis_netgml3_2dateBasis', True)

    
    dateBasis = property(__dateBasis.value, __dateBasis.set, None, None)

    
    # Element {http://www.opengis.net/gml/3.2}utcReference uses Python identifier utcReference
    __utcReference = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'utcReference'), 'utcReference', '__httpwww_opengis_netgml3_2_TimeClockType_httpwww_opengis_netgml3_2utcReference', False)

    
    utcReference = property(__utcReference.value, __utcReference.set, None, None)

    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element domainOfValidity ({http://www.opengis.net/gml/3.2}domainOfValidity) inherited from {http://www.opengis.net/gml/3.2}TimeReferenceSystemType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element remarks ({http://www.opengis.net/gml/3.2}remarks) inherited from {http://www.opengis.net/gml/3.2}DefinitionType
    
    # Attribute id_ inherited from {http://www.opengis.net/gml/3.2}DefinitionBaseType

    _ElementMap = TimeReferenceSystemType._ElementMap.copy()
    _ElementMap.update({
        __referenceTime.name() : __referenceTime,
        __referenceEvent.name() : __referenceEvent,
        __dateBasis.name() : __dateBasis,
        __utcReference.name() : __utcReference
    })
    _AttributeMap = TimeReferenceSystemType._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gml.addCategoryObject('typeBinding', u'TimeClockType', TimeClockType)


# Complex type MD_ExtendedElementInformation_Type with content type ELEMENT_ONLY
class MD_ExtendedElementInformation_Type (AbstractObject_Type):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_ExtendedElementInformation_Type')
    # Base type is AbstractObject_Type
    
    # Element {http://www.isotc211.org/2005/gmd}parentEntity uses Python identifier parentEntity
    __parentEntity = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'parentEntity'), 'parentEntity', '__httpwww_isotc211_org2005gmd_MD_ExtendedElementInformation_Type_httpwww_isotc211_org2005gmdparentEntity', True)

    
    parentEntity = property(__parentEntity.value, __parentEntity.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}definition uses Python identifier definition
    __definition = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'definition'), 'definition', '__httpwww_isotc211_org2005gmd_MD_ExtendedElementInformation_Type_httpwww_isotc211_org2005gmddefinition', False)

    
    definition = property(__definition.value, __definition.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}domainCode uses Python identifier domainCode
    __domainCode = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'domainCode'), 'domainCode', '__httpwww_isotc211_org2005gmd_MD_ExtendedElementInformation_Type_httpwww_isotc211_org2005gmddomainCode', False)

    
    domainCode = property(__domainCode.value, __domainCode.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}rationale uses Python identifier rationale
    __rationale = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'rationale'), 'rationale', '__httpwww_isotc211_org2005gmd_MD_ExtendedElementInformation_Type_httpwww_isotc211_org2005gmdrationale', True)

    
    rationale = property(__rationale.value, __rationale.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}name uses Python identifier name
    __name = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'name'), 'name', '__httpwww_isotc211_org2005gmd_MD_ExtendedElementInformation_Type_httpwww_isotc211_org2005gmdname', False)

    
    name = property(__name.value, __name.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}obligation uses Python identifier obligation
    __obligation = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'obligation'), 'obligation', '__httpwww_isotc211_org2005gmd_MD_ExtendedElementInformation_Type_httpwww_isotc211_org2005gmdobligation', False)

    
    obligation = property(__obligation.value, __obligation.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}condition uses Python identifier condition
    __condition = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'condition'), 'condition', '__httpwww_isotc211_org2005gmd_MD_ExtendedElementInformation_Type_httpwww_isotc211_org2005gmdcondition', False)

    
    condition = property(__condition.value, __condition.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}shortName uses Python identifier shortName
    __shortName = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'shortName'), 'shortName', '__httpwww_isotc211_org2005gmd_MD_ExtendedElementInformation_Type_httpwww_isotc211_org2005gmdshortName', False)

    
    shortName = property(__shortName.value, __shortName.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}rule uses Python identifier rule
    __rule = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'rule'), 'rule', '__httpwww_isotc211_org2005gmd_MD_ExtendedElementInformation_Type_httpwww_isotc211_org2005gmdrule', False)

    
    rule = property(__rule.value, __rule.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}dataType uses Python identifier dataType
    __dataType = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'dataType'), 'dataType', '__httpwww_isotc211_org2005gmd_MD_ExtendedElementInformation_Type_httpwww_isotc211_org2005gmddataType', False)

    
    dataType = property(__dataType.value, __dataType.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}maximumOccurrence uses Python identifier maximumOccurrence
    __maximumOccurrence = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'maximumOccurrence'), 'maximumOccurrence', '__httpwww_isotc211_org2005gmd_MD_ExtendedElementInformation_Type_httpwww_isotc211_org2005gmdmaximumOccurrence', False)

    
    maximumOccurrence = property(__maximumOccurrence.value, __maximumOccurrence.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}source uses Python identifier source
    __source = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'source'), 'source', '__httpwww_isotc211_org2005gmd_MD_ExtendedElementInformation_Type_httpwww_isotc211_org2005gmdsource', True)

    
    source = property(__source.value, __source.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}domainValue uses Python identifier domainValue
    __domainValue = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'domainValue'), 'domainValue', '__httpwww_isotc211_org2005gmd_MD_ExtendedElementInformation_Type_httpwww_isotc211_org2005gmddomainValue', False)

    
    domainValue = property(__domainValue.value, __domainValue.set, None, None)

    
    # Attribute id inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type
    
    # Attribute uuid inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type

    _ElementMap = AbstractObject_Type._ElementMap.copy()
    _ElementMap.update({
        __parentEntity.name() : __parentEntity,
        __definition.name() : __definition,
        __domainCode.name() : __domainCode,
        __rationale.name() : __rationale,
        __name.name() : __name,
        __obligation.name() : __obligation,
        __condition.name() : __condition,
        __shortName.name() : __shortName,
        __rule.name() : __rule,
        __dataType.name() : __dataType,
        __maximumOccurrence.name() : __maximumOccurrence,
        __source.name() : __source,
        __domainValue.name() : __domainValue
    })
    _AttributeMap = AbstractObject_Type._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gmd.addCategoryObject('typeBinding', u'MD_ExtendedElementInformation_Type', MD_ExtendedElementInformation_Type)


# Complex type UnlimitedInteger_PropertyType with content type ELEMENT_ONLY
class UnlimitedInteger_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gco, u'UnlimitedInteger_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gco}UnlimitedInteger uses Python identifier UnlimitedInteger
    __UnlimitedInteger = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'UnlimitedInteger'), 'UnlimitedInteger', '__httpwww_isotc211_org2005gco_UnlimitedInteger_PropertyType_httpwww_isotc211_org2005gcoUnlimitedInteger', False)

    
    UnlimitedInteger = property(__UnlimitedInteger.value, __UnlimitedInteger.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gco_UnlimitedInteger_PropertyType_httpwww_isotc211_org2005gconilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)


    _ElementMap = {
        __UnlimitedInteger.name() : __UnlimitedInteger
    }
    _AttributeMap = {
        __nilReason.name() : __nilReason
    }
_Namespace_gco.addCategoryObject('typeBinding', u'UnlimitedInteger_PropertyType', UnlimitedInteger_PropertyType)


# Complex type LengthType with content type SIMPLE
class LengthType (MeasureType):
    _TypeDefinition = pyxb.binding.datatypes.double
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'LengthType')
    # Base type is MeasureType
    
    # Attribute uom inherited from {http://www.opengis.net/gml/3.2}MeasureType

    _ElementMap = MeasureType._ElementMap.copy()
    _ElementMap.update({
        
    })
    _AttributeMap = MeasureType._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gml.addCategoryObject('typeBinding', u'LengthType', LengthType)


# Complex type DQ_LogicalConsistency_PropertyType with content type ELEMENT_ONLY
class DQ_LogicalConsistency_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'DQ_LogicalConsistency_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmd}AbstractDQ_LogicalConsistency uses Python identifier AbstractDQ_LogicalConsistency
    __AbstractDQ_LogicalConsistency = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'AbstractDQ_LogicalConsistency'), 'AbstractDQ_LogicalConsistency', '__httpwww_isotc211_org2005gmd_DQ_LogicalConsistency_PropertyType_httpwww_isotc211_org2005gmdAbstractDQ_LogicalConsistency', False)

    
    AbstractDQ_LogicalConsistency = property(__AbstractDQ_LogicalConsistency.value, __AbstractDQ_LogicalConsistency.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_isotc211_org2005gmd_DQ_LogicalConsistency_PropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_isotc211_org2005gmd_DQ_LogicalConsistency_PropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_isotc211_org2005gmd_DQ_LogicalConsistency_PropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_isotc211_org2005gmd_DQ_LogicalConsistency_PropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_isotc211_org2005gmd_DQ_LogicalConsistency_PropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute uuidref uses Python identifier uuidref
    __uuidref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uuidref'), 'uuidref', '__httpwww_isotc211_org2005gmd_DQ_LogicalConsistency_PropertyType_uuidref', pyxb.binding.datatypes.string)
    
    uuidref = property(__uuidref.value, __uuidref.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmd_DQ_LogicalConsistency_PropertyType_httpwww_isotc211_org2005gconilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_isotc211_org2005gmd_DQ_LogicalConsistency_PropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_isotc211_org2005gmd_DQ_LogicalConsistency_PropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")


    _ElementMap = {
        __AbstractDQ_LogicalConsistency.name() : __AbstractDQ_LogicalConsistency
    }
    _AttributeMap = {
        __href.name() : __href,
        __role.name() : __role,
        __actuate.name() : __actuate,
        __type.name() : __type,
        __arcrole.name() : __arcrole,
        __uuidref.name() : __uuidref,
        __nilReason.name() : __nilReason,
        __title.name() : __title,
        __show.name() : __show
    }
_Namespace_gmd.addCategoryObject('typeBinding', u'DQ_LogicalConsistency_PropertyType', DQ_LogicalConsistency_PropertyType)


# Complex type LocalisedCharacterString_Type with content type SIMPLE
class LocalisedCharacterString_Type (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = pyxb.binding.datatypes.string
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'LocalisedCharacterString_Type')
    # Base type is pyxb.binding.datatypes.string
    
    # Attribute locale uses Python identifier locale
    __locale = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'locale'), 'locale', '__httpwww_isotc211_org2005gmd_LocalisedCharacterString_Type_locale', pyxb.binding.datatypes.anyURI)
    
    locale = property(__locale.value, __locale.set, None, None)

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'id'), 'id', '__httpwww_isotc211_org2005gmd_LocalisedCharacterString_Type_id', pyxb.binding.datatypes.ID)
    
    id = property(__id.value, __id.set, None, None)


    _ElementMap = {
        
    }
    _AttributeMap = {
        __locale.name() : __locale,
        __id.name() : __id
    }
_Namespace_gmd.addCategoryObject('typeBinding', u'LocalisedCharacterString_Type', LocalisedCharacterString_Type)


# Complex type DQ_Element_PropertyType with content type ELEMENT_ONLY
class DQ_Element_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'DQ_Element_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmd}AbstractDQ_Element uses Python identifier AbstractDQ_Element
    __AbstractDQ_Element = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'AbstractDQ_Element'), 'AbstractDQ_Element', '__httpwww_isotc211_org2005gmd_DQ_Element_PropertyType_httpwww_isotc211_org2005gmdAbstractDQ_Element', False)

    
    AbstractDQ_Element = property(__AbstractDQ_Element.value, __AbstractDQ_Element.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_isotc211_org2005gmd_DQ_Element_PropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_isotc211_org2005gmd_DQ_Element_PropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_isotc211_org2005gmd_DQ_Element_PropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_isotc211_org2005gmd_DQ_Element_PropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute uuidref uses Python identifier uuidref
    __uuidref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uuidref'), 'uuidref', '__httpwww_isotc211_org2005gmd_DQ_Element_PropertyType_uuidref', pyxb.binding.datatypes.string)
    
    uuidref = property(__uuidref.value, __uuidref.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmd_DQ_Element_PropertyType_httpwww_isotc211_org2005gconilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_isotc211_org2005gmd_DQ_Element_PropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_isotc211_org2005gmd_DQ_Element_PropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_isotc211_org2005gmd_DQ_Element_PropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)


    _ElementMap = {
        __AbstractDQ_Element.name() : __AbstractDQ_Element
    }
    _AttributeMap = {
        __actuate.name() : __actuate,
        __type.name() : __type,
        __arcrole.name() : __arcrole,
        __role.name() : __role,
        __uuidref.name() : __uuidref,
        __nilReason.name() : __nilReason,
        __title.name() : __title,
        __show.name() : __show,
        __href.name() : __href
    }
_Namespace_gmd.addCategoryObject('typeBinding', u'DQ_Element_PropertyType', DQ_Element_PropertyType)


# Complex type NodeOrEdgePropertyType with content type ELEMENT_ONLY
class NodeOrEdgePropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'NodeOrEdgePropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.opengis.net/gml/3.2}Node uses Python identifier Node
    __Node = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'Node'), 'Node', '__httpwww_opengis_netgml3_2_NodeOrEdgePropertyType_httpwww_opengis_netgml3_2Node', False)

    
    Node = property(__Node.value, __Node.set, None, u'gml:Node represents the 0-dimensional primitive.\nThe optional coboundary of a node (gml:directedEdge) is a sequence of directed edges which are incident on this node. Edges emanating from this node appear in the node coboundary with a negative orientation. \nIf provided, the aggregationType attribute shall have the value "sequence".\nA node may optionally be realised by a 0-dimensional geometric primitive (gml:pointProperty).')

    
    # Element {http://www.opengis.net/gml/3.2}Edge uses Python identifier Edge
    __Edge = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'Edge'), 'Edge', '__httpwww_opengis_netgml3_2_NodeOrEdgePropertyType_httpwww_opengis_netgml3_2Edge', False)

    
    Edge = property(__Edge.value, __Edge.set, None, u'gml:Edge represents the 1-dimensional primitive.\nThe topological boundary of an Edge (gml:directedNode) consists of a negatively directed start Node and a positively directed end Node.   \nThe optional coboundary of an edge (gml:directedFace) is a circular sequence of directed faces which are incident on this edge in document order. In the 2D case, the orientation of the face on the left of the edge is "+"; the orientation of the face on the right on its right is "-". \nIf provided, the aggregationType attribute shall have the value "sequence".\nAn edge may optionally be realised by a 1-dimensional geometric primitive (gml:curveProperty).')

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_opengis_netgml3_2_NodeOrEdgePropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_opengis_netgml3_2_NodeOrEdgePropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute owns uses Python identifier owns
    __owns = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'owns'), 'owns', '__httpwww_opengis_netgml3_2_NodeOrEdgePropertyType_owns', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    owns = property(__owns.value, __owns.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_opengis_netgml3_2_NodeOrEdgePropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_opengis_netgml3_2_NodeOrEdgePropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_opengis_netgml3_2_NodeOrEdgePropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_opengis_netgml3_2_NodeOrEdgePropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'nilReason'), 'nilReason', '__httpwww_opengis_netgml3_2_NodeOrEdgePropertyType_nilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_opengis_netgml3_2_NodeOrEdgePropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.opengis.net/gml/3.2}remoteSchema uses Python identifier remoteSchema
    __remoteSchema = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'remoteSchema'), 'remoteSchema', '__httpwww_opengis_netgml3_2_NodeOrEdgePropertyType_httpwww_opengis_netgml3_2remoteSchema', pyxb.binding.datatypes.anyURI)
    
    remoteSchema = property(__remoteSchema.value, __remoteSchema.set, None, u'')


    _ElementMap = {
        __Node.name() : __Node,
        __Edge.name() : __Edge
    }
    _AttributeMap = {
        __show.name() : __show,
        __role.name() : __role,
        __owns.name() : __owns,
        __arcrole.name() : __arcrole,
        __actuate.name() : __actuate,
        __title.name() : __title,
        __href.name() : __href,
        __nilReason.name() : __nilReason,
        __type.name() : __type,
        __remoteSchema.name() : __remoteSchema
    }
_Namespace_gml.addCategoryObject('typeBinding', u'NodeOrEdgePropertyType', NodeOrEdgePropertyType)


# Complex type MD_GeometricObjectTypeCode_PropertyType with content type ELEMENT_ONLY
class MD_GeometricObjectTypeCode_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_GeometricObjectTypeCode_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmd}MD_GeometricObjectTypeCode uses Python identifier MD_GeometricObjectTypeCode
    __MD_GeometricObjectTypeCode = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_GeometricObjectTypeCode'), 'MD_GeometricObjectTypeCode', '__httpwww_isotc211_org2005gmd_MD_GeometricObjectTypeCode_PropertyType_httpwww_isotc211_org2005gmdMD_GeometricObjectTypeCode', False)

    
    MD_GeometricObjectTypeCode = property(__MD_GeometricObjectTypeCode.value, __MD_GeometricObjectTypeCode.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmd_MD_GeometricObjectTypeCode_PropertyType_httpwww_isotc211_org2005gconilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)


    _ElementMap = {
        __MD_GeometricObjectTypeCode.name() : __MD_GeometricObjectTypeCode
    }
    _AttributeMap = {
        __nilReason.name() : __nilReason
    }
_Namespace_gmd.addCategoryObject('typeBinding', u'MD_GeometricObjectTypeCode_PropertyType', MD_GeometricObjectTypeCode_PropertyType)


# Complex type BagType with content type ELEMENT_ONLY
class BagType (AbstractGMLType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'BagType')
    # Base type is AbstractGMLType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element {http://www.opengis.net/gml/3.2}member uses Python identifier member
    __member = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'member'), 'member', '__httpwww_opengis_netgml3_2_BagType_httpwww_opengis_netgml3_2member', True)

    
    member = property(__member.value, __member.set, None, u'')

    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element {http://www.opengis.net/gml/3.2}members uses Python identifier members
    __members = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'members'), 'members', '__httpwww_opengis_netgml3_2_BagType_httpwww_opengis_netgml3_2members', False)

    
    members = property(__members.value, __members.set, None, u'')

    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Attribute id inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType

    _ElementMap = AbstractGMLType._ElementMap.copy()
    _ElementMap.update({
        __member.name() : __member,
        __members.name() : __members
    })
    _AttributeMap = AbstractGMLType._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gml.addCategoryObject('typeBinding', u'BagType', BagType)


# Complex type MD_RepresentativeFraction_Type with content type ELEMENT_ONLY
class MD_RepresentativeFraction_Type (AbstractObject_Type):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_RepresentativeFraction_Type')
    # Base type is AbstractObject_Type
    
    # Element {http://www.isotc211.org/2005/gmd}denominator uses Python identifier denominator
    __denominator = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'denominator'), 'denominator', '__httpwww_isotc211_org2005gmd_MD_RepresentativeFraction_Type_httpwww_isotc211_org2005gmddenominator', False)

    
    denominator = property(__denominator.value, __denominator.set, None, None)

    
    # Attribute id inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type
    
    # Attribute uuid inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type

    _ElementMap = AbstractObject_Type._ElementMap.copy()
    _ElementMap.update({
        __denominator.name() : __denominator
    })
    _AttributeMap = AbstractObject_Type._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gmd.addCategoryObject('typeBinding', u'MD_RepresentativeFraction_Type', MD_RepresentativeFraction_Type)


# Complex type EX_SpatialTemporalExtent_PropertyType with content type ELEMENT_ONLY
class EX_SpatialTemporalExtent_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'EX_SpatialTemporalExtent_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmd}EX_SpatialTemporalExtent uses Python identifier EX_SpatialTemporalExtent
    __EX_SpatialTemporalExtent = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'EX_SpatialTemporalExtent'), 'EX_SpatialTemporalExtent', '__httpwww_isotc211_org2005gmd_EX_SpatialTemporalExtent_PropertyType_httpwww_isotc211_org2005gmdEX_SpatialTemporalExtent', False)

    
    EX_SpatialTemporalExtent = property(__EX_SpatialTemporalExtent.value, __EX_SpatialTemporalExtent.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_isotc211_org2005gmd_EX_SpatialTemporalExtent_PropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_isotc211_org2005gmd_EX_SpatialTemporalExtent_PropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_isotc211_org2005gmd_EX_SpatialTemporalExtent_PropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_isotc211_org2005gmd_EX_SpatialTemporalExtent_PropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute uuidref uses Python identifier uuidref
    __uuidref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uuidref'), 'uuidref', '__httpwww_isotc211_org2005gmd_EX_SpatialTemporalExtent_PropertyType_uuidref', pyxb.binding.datatypes.string)
    
    uuidref = property(__uuidref.value, __uuidref.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmd_EX_SpatialTemporalExtent_PropertyType_httpwww_isotc211_org2005gconilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_isotc211_org2005gmd_EX_SpatialTemporalExtent_PropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_isotc211_org2005gmd_EX_SpatialTemporalExtent_PropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_isotc211_org2005gmd_EX_SpatialTemporalExtent_PropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)


    _ElementMap = {
        __EX_SpatialTemporalExtent.name() : __EX_SpatialTemporalExtent
    }
    _AttributeMap = {
        __actuate.name() : __actuate,
        __type.name() : __type,
        __arcrole.name() : __arcrole,
        __role.name() : __role,
        __uuidref.name() : __uuidref,
        __nilReason.name() : __nilReason,
        __title.name() : __title,
        __show.name() : __show,
        __href.name() : __href
    }
_Namespace_gmd.addCategoryObject('typeBinding', u'EX_SpatialTemporalExtent_PropertyType', EX_SpatialTemporalExtent_PropertyType)


# Complex type MultiGeometryType with content type ELEMENT_ONLY
class MultiGeometryType (AbstractGeometricAggregateType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'MultiGeometryType')
    # Base type is AbstractGeometricAggregateType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element {http://www.opengis.net/gml/3.2}geometryMember uses Python identifier geometryMember
    __geometryMember = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'geometryMember'), 'geometryMember', '__httpwww_opengis_netgml3_2_MultiGeometryType_httpwww_opengis_netgml3_2geometryMember', True)

    
    geometryMember = property(__geometryMember.value, __geometryMember.set, None, u'This property element either references a geometry element via the XLink-attributes or contains the geometry element.')

    
    # Element {http://www.opengis.net/gml/3.2}geometryMembers uses Python identifier geometryMembers
    __geometryMembers = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'geometryMembers'), 'geometryMembers', '__httpwww_opengis_netgml3_2_MultiGeometryType_httpwww_opengis_netgml3_2geometryMembers', False)

    
    geometryMembers = property(__geometryMembers.value, __geometryMembers.set, None, u'This property element contains a list of geometry elements. The order of the elements is significant and shall be preserved when processing the array.')

    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Attribute uomLabels inherited from {http://www.opengis.net/gml/3.2}AbstractGeometryType
    
    # Attribute aggregationType inherited from {http://www.opengis.net/gml/3.2}AbstractGeometricAggregateType
    
    # Attribute srsName inherited from {http://www.opengis.net/gml/3.2}AbstractGeometryType
    
    # Attribute id inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Attribute srsDimension inherited from {http://www.opengis.net/gml/3.2}AbstractGeometryType
    
    # Attribute axisLabels inherited from {http://www.opengis.net/gml/3.2}AbstractGeometryType

    _ElementMap = AbstractGeometricAggregateType._ElementMap.copy()
    _ElementMap.update({
        __geometryMember.name() : __geometryMember,
        __geometryMembers.name() : __geometryMembers
    })
    _AttributeMap = AbstractGeometricAggregateType._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gml.addCategoryObject('typeBinding', u'MultiGeometryType', MultiGeometryType)


# Complex type CubicSplineType with content type ELEMENT_ONLY
class CubicSplineType (AbstractCurveSegmentType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'CubicSplineType')
    # Base type is AbstractCurveSegmentType
    
    # Element {http://www.opengis.net/gml/3.2}pointRep uses Python identifier pointRep
    __pointRep = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'pointRep'), 'pointRep', '__httpwww_opengis_netgml3_2_CubicSplineType_httpwww_opengis_netgml3_2pointRep', True)

    
    pointRep = property(__pointRep.value, __pointRep.set, None, u'')

    
    # Element {http://www.opengis.net/gml/3.2}posList uses Python identifier posList
    __posList = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'posList'), 'posList', '__httpwww_opengis_netgml3_2_CubicSplineType_httpwww_opengis_netgml3_2posList', False)

    
    posList = property(__posList.value, __posList.set, None, None)

    
    # Element {http://www.opengis.net/gml/3.2}coordinates uses Python identifier coordinates
    __coordinates = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'coordinates'), 'coordinates', '__httpwww_opengis_netgml3_2_CubicSplineType_httpwww_opengis_netgml3_2coordinates', False)

    
    coordinates = property(__coordinates.value, __coordinates.set, None, u'')

    
    # Element {http://www.opengis.net/gml/3.2}pointProperty uses Python identifier pointProperty
    __pointProperty = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'pointProperty'), 'pointProperty', '__httpwww_opengis_netgml3_2_CubicSplineType_httpwww_opengis_netgml3_2pointProperty', True)

    
    pointProperty = property(__pointProperty.value, __pointProperty.set, None, u'This property element either references a point via the XLink-attributes or contains the point element. pointProperty is the predefined property which may be used by GML Application Schemas whenever a GML feature has a property with a value that is substitutable for Point.')

    
    # Element {http://www.opengis.net/gml/3.2}vectorAtEnd uses Python identifier vectorAtEnd
    __vectorAtEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'vectorAtEnd'), 'vectorAtEnd', '__httpwww_opengis_netgml3_2_CubicSplineType_httpwww_opengis_netgml3_2vectorAtEnd', False)

    
    vectorAtEnd = property(__vectorAtEnd.value, __vectorAtEnd.set, None, None)

    
    # Element {http://www.opengis.net/gml/3.2}pos uses Python identifier pos
    __pos = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'pos'), 'pos', '__httpwww_opengis_netgml3_2_CubicSplineType_httpwww_opengis_netgml3_2pos', True)

    
    pos = property(__pos.value, __pos.set, None, None)

    
    # Element {http://www.opengis.net/gml/3.2}vectorAtStart uses Python identifier vectorAtStart
    __vectorAtStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'vectorAtStart'), 'vectorAtStart', '__httpwww_opengis_netgml3_2_CubicSplineType_httpwww_opengis_netgml3_2vectorAtStart', False)

    
    vectorAtStart = property(__vectorAtStart.value, __vectorAtStart.set, None, None)

    
    # Attribute numDerivativesAtEnd inherited from {http://www.opengis.net/gml/3.2}AbstractCurveSegmentType
    
    # Attribute numDerivativesAtStart inherited from {http://www.opengis.net/gml/3.2}AbstractCurveSegmentType
    
    # Attribute interpolation uses Python identifier interpolation
    __interpolation = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'interpolation'), 'interpolation', '__httpwww_opengis_netgml3_2_CubicSplineType_interpolation', CurveInterpolationType, fixed=True, unicode_default=u'cubicSpline')
    
    interpolation = property(__interpolation.value, __interpolation.set, None, None)

    
    # Attribute numDerivativeInterior inherited from {http://www.opengis.net/gml/3.2}AbstractCurveSegmentType
    
    # Attribute degree uses Python identifier degree
    __degree = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'degree'), 'degree', '__httpwww_opengis_netgml3_2_CubicSplineType_degree', pyxb.binding.datatypes.integer, fixed=True, unicode_default=u'3')
    
    degree = property(__degree.value, __degree.set, None, None)


    _ElementMap = AbstractCurveSegmentType._ElementMap.copy()
    _ElementMap.update({
        __pointRep.name() : __pointRep,
        __posList.name() : __posList,
        __coordinates.name() : __coordinates,
        __pointProperty.name() : __pointProperty,
        __vectorAtEnd.name() : __vectorAtEnd,
        __pos.name() : __pos,
        __vectorAtStart.name() : __vectorAtStart
    })
    _AttributeMap = AbstractCurveSegmentType._AttributeMap.copy()
    _AttributeMap.update({
        __interpolation.name() : __interpolation,
        __degree.name() : __degree
    })
_Namespace_gml.addCategoryObject('typeBinding', u'CubicSplineType', CubicSplineType)


# Complex type CTD_ANON_6 with content type SIMPLE
class CTD_ANON_6 (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = pyxb.binding.datatypes.integer
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    # Base type is pyxb.binding.datatypes.integer
    
    # Attribute nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'nilReason'), 'nilReason', '__httpwww_opengis_netgml3_2_CTD_ANON_6_nilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)


    _ElementMap = {
        
    }
    _AttributeMap = {
        __nilReason.name() : __nilReason
    }



# Complex type GM_Point_PropertyType with content type ELEMENT_ONLY
class GM_Point_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gss, u'GM_Point_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.opengis.net/gml/3.2}Point uses Python identifier Point
    __Point = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'Point'), 'Point', '__httpwww_isotc211_org2005gss_GM_Point_PropertyType_httpwww_opengis_netgml3_2Point', False)

    
    Point = property(__Point.value, __Point.set, None, u'A Point is defined by a single coordinate tuple. The direct position of a point is specified by the pos element which is of type DirectPositionType.')

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_isotc211_org2005gss_GM_Point_PropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_isotc211_org2005gss_GM_Point_PropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_isotc211_org2005gss_GM_Point_PropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_isotc211_org2005gss_GM_Point_PropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_isotc211_org2005gss_GM_Point_PropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute uuidref uses Python identifier uuidref
    __uuidref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uuidref'), 'uuidref', '__httpwww_isotc211_org2005gss_GM_Point_PropertyType_uuidref', pyxb.binding.datatypes.string)
    
    uuidref = property(__uuidref.value, __uuidref.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gss_GM_Point_PropertyType_httpwww_isotc211_org2005gconilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_isotc211_org2005gss_GM_Point_PropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_isotc211_org2005gss_GM_Point_PropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")


    _ElementMap = {
        __Point.name() : __Point
    }
    _AttributeMap = {
        __href.name() : __href,
        __type.name() : __type,
        __actuate.name() : __actuate,
        __title.name() : __title,
        __arcrole.name() : __arcrole,
        __uuidref.name() : __uuidref,
        __nilReason.name() : __nilReason,
        __role.name() : __role,
        __show.name() : __show
    }
_Namespace_gss.addCategoryObject('typeBinding', u'GM_Point_PropertyType', GM_Point_PropertyType)


# Complex type MD_ObligationCode_PropertyType with content type ELEMENT_ONLY
class MD_ObligationCode_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_ObligationCode_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmd}MD_ObligationCode uses Python identifier MD_ObligationCode
    __MD_ObligationCode = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_ObligationCode'), 'MD_ObligationCode', '__httpwww_isotc211_org2005gmd_MD_ObligationCode_PropertyType_httpwww_isotc211_org2005gmdMD_ObligationCode', False)

    
    MD_ObligationCode = property(__MD_ObligationCode.value, __MD_ObligationCode.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmd_MD_ObligationCode_PropertyType_httpwww_isotc211_org2005gconilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)


    _ElementMap = {
        __MD_ObligationCode.name() : __MD_ObligationCode
    }
    _AttributeMap = {
        __nilReason.name() : __nilReason
    }
_Namespace_gmd.addCategoryObject('typeBinding', u'MD_ObligationCode_PropertyType', MD_ObligationCode_PropertyType)


# Complex type TimePrimitivePropertyType with content type ELEMENT_ONLY
class TimePrimitivePropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'TimePrimitivePropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.opengis.net/gml/3.2}AbstractTimePrimitive uses Python identifier AbstractTimePrimitive
    __AbstractTimePrimitive = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractTimePrimitive'), 'AbstractTimePrimitive', '__httpwww_opengis_netgml3_2_TimePrimitivePropertyType_httpwww_opengis_netgml3_2AbstractTimePrimitive', False)

    
    AbstractTimePrimitive = property(__AbstractTimePrimitive.value, __AbstractTimePrimitive.set, None, u'gml:AbstractTimePrimitive acts as the head of a substitution group for geometric and topological temporal primitives.')

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_opengis_netgml3_2_TimePrimitivePropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_opengis_netgml3_2_TimePrimitivePropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.opengis.net/gml/3.2}remoteSchema uses Python identifier remoteSchema
    __remoteSchema = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'remoteSchema'), 'remoteSchema', '__httpwww_opengis_netgml3_2_TimePrimitivePropertyType_httpwww_opengis_netgml3_2remoteSchema', pyxb.binding.datatypes.anyURI)
    
    remoteSchema = property(__remoteSchema.value, __remoteSchema.set, None, u'')

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_opengis_netgml3_2_TimePrimitivePropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute owns uses Python identifier owns
    __owns = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'owns'), 'owns', '__httpwww_opengis_netgml3_2_TimePrimitivePropertyType_owns', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    owns = property(__owns.value, __owns.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_opengis_netgml3_2_TimePrimitivePropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'nilReason'), 'nilReason', '__httpwww_opengis_netgml3_2_TimePrimitivePropertyType_nilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_opengis_netgml3_2_TimePrimitivePropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_opengis_netgml3_2_TimePrimitivePropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_opengis_netgml3_2_TimePrimitivePropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)


    _ElementMap = {
        __AbstractTimePrimitive.name() : __AbstractTimePrimitive
    }
    _AttributeMap = {
        __arcrole.name() : __arcrole,
        __role.name() : __role,
        __remoteSchema.name() : __remoteSchema,
        __show.name() : __show,
        __owns.name() : __owns,
        __actuate.name() : __actuate,
        __nilReason.name() : __nilReason,
        __title.name() : __title,
        __href.name() : __href,
        __type.name() : __type
    }
_Namespace_gml.addCategoryObject('typeBinding', u'TimePrimitivePropertyType', TimePrimitivePropertyType)


# Complex type DQ_DomainConsistency_PropertyType with content type ELEMENT_ONLY
class DQ_DomainConsistency_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'DQ_DomainConsistency_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmd}DQ_DomainConsistency uses Python identifier DQ_DomainConsistency
    __DQ_DomainConsistency = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'DQ_DomainConsistency'), 'DQ_DomainConsistency', '__httpwww_isotc211_org2005gmd_DQ_DomainConsistency_PropertyType_httpwww_isotc211_org2005gmdDQ_DomainConsistency', False)

    
    DQ_DomainConsistency = property(__DQ_DomainConsistency.value, __DQ_DomainConsistency.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_isotc211_org2005gmd_DQ_DomainConsistency_PropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_isotc211_org2005gmd_DQ_DomainConsistency_PropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmd_DQ_DomainConsistency_PropertyType_httpwww_isotc211_org2005gconilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_isotc211_org2005gmd_DQ_DomainConsistency_PropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute uuidref uses Python identifier uuidref
    __uuidref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uuidref'), 'uuidref', '__httpwww_isotc211_org2005gmd_DQ_DomainConsistency_PropertyType_uuidref', pyxb.binding.datatypes.string)
    
    uuidref = property(__uuidref.value, __uuidref.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_isotc211_org2005gmd_DQ_DomainConsistency_PropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_isotc211_org2005gmd_DQ_DomainConsistency_PropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_isotc211_org2005gmd_DQ_DomainConsistency_PropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_isotc211_org2005gmd_DQ_DomainConsistency_PropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")


    _ElementMap = {
        __DQ_DomainConsistency.name() : __DQ_DomainConsistency
    }
    _AttributeMap = {
        __type.name() : __type,
        __arcrole.name() : __arcrole,
        __nilReason.name() : __nilReason,
        __title.name() : __title,
        __uuidref.name() : __uuidref,
        __href.name() : __href,
        __actuate.name() : __actuate,
        __role.name() : __role,
        __show.name() : __show
    }
_Namespace_gmd.addCategoryObject('typeBinding', u'DQ_DomainConsistency_PropertyType', DQ_DomainConsistency_PropertyType)


# Complex type Decimal_PropertyType with content type ELEMENT_ONLY
class Decimal_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gco, u'Decimal_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gco}Decimal uses Python identifier Decimal
    __Decimal = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'Decimal'), 'Decimal', '__httpwww_isotc211_org2005gco_Decimal_PropertyType_httpwww_isotc211_org2005gcoDecimal', False)

    
    Decimal = property(__Decimal.value, __Decimal.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gco_Decimal_PropertyType_httpwww_isotc211_org2005gconilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)


    _ElementMap = {
        __Decimal.name() : __Decimal
    }
    _AttributeMap = {
        __nilReason.name() : __nilReason
    }
_Namespace_gco.addCategoryObject('typeBinding', u'Decimal_PropertyType', Decimal_PropertyType)


# Complex type UserDefinedCSPropertyType with content type ELEMENT_ONLY
class UserDefinedCSPropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'UserDefinedCSPropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.opengis.net/gml/3.2}UserDefinedCS uses Python identifier UserDefinedCS
    __UserDefinedCS = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'UserDefinedCS'), 'UserDefinedCS', '__httpwww_opengis_netgml3_2_UserDefinedCSPropertyType_httpwww_opengis_netgml3_2UserDefinedCS', False)

    
    UserDefinedCS = property(__UserDefinedCS.value, __UserDefinedCS.set, None, u'gml:UserDefinedCS is a two- or three-dimensional coordinate system that consists of any combination of coordinate axes not covered by any other coordinate system type. A UserDefinedCS shall have two or three gml:axis property elements; the number of property elements shall equal the dimension of the CS.')

    
    # Attribute {http://www.opengis.net/gml/3.2}remoteSchema uses Python identifier remoteSchema
    __remoteSchema = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'remoteSchema'), 'remoteSchema', '__httpwww_opengis_netgml3_2_UserDefinedCSPropertyType_httpwww_opengis_netgml3_2remoteSchema', pyxb.binding.datatypes.anyURI)
    
    remoteSchema = property(__remoteSchema.value, __remoteSchema.set, None, u'')

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_opengis_netgml3_2_UserDefinedCSPropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_opengis_netgml3_2_UserDefinedCSPropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_opengis_netgml3_2_UserDefinedCSPropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'nilReason'), 'nilReason', '__httpwww_opengis_netgml3_2_UserDefinedCSPropertyType_nilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_opengis_netgml3_2_UserDefinedCSPropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_opengis_netgml3_2_UserDefinedCSPropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_opengis_netgml3_2_UserDefinedCSPropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_opengis_netgml3_2_UserDefinedCSPropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)


    _ElementMap = {
        __UserDefinedCS.name() : __UserDefinedCS
    }
    _AttributeMap = {
        __remoteSchema.name() : __remoteSchema,
        __role.name() : __role,
        __actuate.name() : __actuate,
        __href.name() : __href,
        __nilReason.name() : __nilReason,
        __type.name() : __type,
        __show.name() : __show,
        __arcrole.name() : __arcrole,
        __title.name() : __title
    }
_Namespace_gml.addCategoryObject('typeBinding', u'UserDefinedCSPropertyType', UserDefinedCSPropertyType)


# Complex type GeodesicStringType with content type ELEMENT_ONLY
class GeodesicStringType (AbstractCurveSegmentType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'GeodesicStringType')
    # Base type is AbstractCurveSegmentType
    
    # Element {http://www.opengis.net/gml/3.2}posList uses Python identifier posList
    __posList = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'posList'), 'posList', '__httpwww_opengis_netgml3_2_GeodesicStringType_httpwww_opengis_netgml3_2posList', False)

    
    posList = property(__posList.value, __posList.set, None, None)

    
    # Element {http://www.opengis.net/gml/3.2}pointProperty uses Python identifier pointProperty
    __pointProperty = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'pointProperty'), 'pointProperty', '__httpwww_opengis_netgml3_2_GeodesicStringType_httpwww_opengis_netgml3_2pointProperty', True)

    
    pointProperty = property(__pointProperty.value, __pointProperty.set, None, u'This property element either references a point via the XLink-attributes or contains the point element. pointProperty is the predefined property which may be used by GML Application Schemas whenever a GML feature has a property with a value that is substitutable for Point.')

    
    # Element {http://www.opengis.net/gml/3.2}pos uses Python identifier pos
    __pos = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'pos'), 'pos', '__httpwww_opengis_netgml3_2_GeodesicStringType_httpwww_opengis_netgml3_2pos', True)

    
    pos = property(__pos.value, __pos.set, None, None)

    
    # Attribute numDerivativesAtEnd inherited from {http://www.opengis.net/gml/3.2}AbstractCurveSegmentType
    
    # Attribute numDerivativesAtStart inherited from {http://www.opengis.net/gml/3.2}AbstractCurveSegmentType
    
    # Attribute interpolation uses Python identifier interpolation
    __interpolation = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'interpolation'), 'interpolation', '__httpwww_opengis_netgml3_2_GeodesicStringType_interpolation', CurveInterpolationType, fixed=True, unicode_default=u'geodesic')
    
    interpolation = property(__interpolation.value, __interpolation.set, None, None)

    
    # Attribute numDerivativeInterior inherited from {http://www.opengis.net/gml/3.2}AbstractCurveSegmentType

    _ElementMap = AbstractCurveSegmentType._ElementMap.copy()
    _ElementMap.update({
        __posList.name() : __posList,
        __pointProperty.name() : __pointProperty,
        __pos.name() : __pos
    })
    _AttributeMap = AbstractCurveSegmentType._AttributeMap.copy()
    _AttributeMap.update({
        __interpolation.name() : __interpolation
    })
_Namespace_gml.addCategoryObject('typeBinding', u'GeodesicStringType', GeodesicStringType)


# Complex type GeodesicType with content type ELEMENT_ONLY
class GeodesicType (GeodesicStringType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'GeodesicType')
    # Base type is GeodesicStringType
    
    # Element posList ({http://www.opengis.net/gml/3.2}posList) inherited from {http://www.opengis.net/gml/3.2}GeodesicStringType
    
    # Element pointProperty ({http://www.opengis.net/gml/3.2}pointProperty) inherited from {http://www.opengis.net/gml/3.2}GeodesicStringType
    
    # Element pos ({http://www.opengis.net/gml/3.2}pos) inherited from {http://www.opengis.net/gml/3.2}GeodesicStringType
    
    # Attribute numDerivativesAtEnd inherited from {http://www.opengis.net/gml/3.2}AbstractCurveSegmentType
    
    # Attribute numDerivativeInterior inherited from {http://www.opengis.net/gml/3.2}AbstractCurveSegmentType
    
    # Attribute interpolation inherited from {http://www.opengis.net/gml/3.2}GeodesicStringType
    
    # Attribute numDerivativesAtStart inherited from {http://www.opengis.net/gml/3.2}AbstractCurveSegmentType

    _ElementMap = GeodesicStringType._ElementMap.copy()
    _ElementMap.update({
        
    })
    _AttributeMap = GeodesicStringType._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gml.addCategoryObject('typeBinding', u'GeodesicType', GeodesicType)


# Complex type TopoComplexPropertyType with content type ELEMENT_ONLY
class TopoComplexPropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'TopoComplexPropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.opengis.net/gml/3.2}TopoComplex uses Python identifier TopoComplex
    __TopoComplex = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'TopoComplex'), 'TopoComplex', '__httpwww_opengis_netgml3_2_TopoComplexPropertyType_httpwww_opengis_netgml3_2TopoComplex', False)

    
    TopoComplex = property(__TopoComplex.value, __TopoComplex.set, None, u'gml:TopoComplex is a collection of topological primitives.\nEach complex holds a reference to its maximal complex (gml:maximalComplex) and optionally to sub- or super-complexes (gml:subComplex, gml:superComplex). \nA topology complex contains its primitive and sub-complex members.\n')

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_opengis_netgml3_2_TopoComplexPropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_opengis_netgml3_2_TopoComplexPropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_opengis_netgml3_2_TopoComplexPropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_opengis_netgml3_2_TopoComplexPropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.opengis.net/gml/3.2}remoteSchema uses Python identifier remoteSchema
    __remoteSchema = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'remoteSchema'), 'remoteSchema', '__httpwww_opengis_netgml3_2_TopoComplexPropertyType_httpwww_opengis_netgml3_2remoteSchema', pyxb.binding.datatypes.anyURI)
    
    remoteSchema = property(__remoteSchema.value, __remoteSchema.set, None, u'')

    
    # Attribute nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'nilReason'), 'nilReason', '__httpwww_opengis_netgml3_2_TopoComplexPropertyType_nilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_opengis_netgml3_2_TopoComplexPropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_opengis_netgml3_2_TopoComplexPropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_opengis_netgml3_2_TopoComplexPropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)


    _ElementMap = {
        __TopoComplex.name() : __TopoComplex
    }
    _AttributeMap = {
        __show.name() : __show,
        __role.name() : __role,
        __actuate.name() : __actuate,
        __href.name() : __href,
        __remoteSchema.name() : __remoteSchema,
        __nilReason.name() : __nilReason,
        __type.name() : __type,
        __arcrole.name() : __arcrole,
        __title.name() : __title
    }
_Namespace_gml.addCategoryObject('typeBinding', u'TopoComplexPropertyType', TopoComplexPropertyType)


# Complex type TimeCSType with content type ELEMENT_ONLY
class TimeCSType (AbstractCoordinateSystemType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'TimeCSType')
    # Base type is AbstractCoordinateSystemType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element axis ({http://www.opengis.net/gml/3.2}axis) inherited from {http://www.opengis.net/gml/3.2}AbstractCoordinateSystemType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element remarks ({http://www.opengis.net/gml/3.2}remarks) inherited from {http://www.opengis.net/gml/3.2}DefinitionType
    
    # Attribute aggregationType inherited from {http://www.opengis.net/gml/3.2}AbstractCoordinateSystemType
    
    # Attribute id_ inherited from {http://www.opengis.net/gml/3.2}DefinitionBaseType

    _ElementMap = AbstractCoordinateSystemType._ElementMap.copy()
    _ElementMap.update({
        
    })
    _AttributeMap = AbstractCoordinateSystemType._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gml.addCategoryObject('typeBinding', u'TimeCSType', TimeCSType)


# Complex type ParameterValueGroupType with content type ELEMENT_ONLY
class ParameterValueGroupType (AbstractGeneralParameterValueType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'ParameterValueGroupType')
    # Base type is AbstractGeneralParameterValueType
    
    # Element {http://www.opengis.net/gml/3.2}group uses Python identifier group
    __group = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'group'), 'group', '__httpwww_opengis_netgml3_2_ParameterValueGroupType_httpwww_opengis_netgml3_2group', False)

    
    group = property(__group.value, __group.set, None, u'gml:group is an association role to the operation parameter group for which this element provides parameter values.')

    
    # Element {http://www.opengis.net/gml/3.2}parameterValue uses Python identifier parameterValue
    __parameterValue = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'parameterValue'), 'parameterValue', '__httpwww_opengis_netgml3_2_ParameterValueGroupType_httpwww_opengis_netgml3_2parameterValue', True)

    
    parameterValue = property(__parameterValue.value, __parameterValue.set, None, u'gml:parameterValue is a composition association to a parameter value or group of parameter values used by a coordinate operation.')


    _ElementMap = AbstractGeneralParameterValueType._ElementMap.copy()
    _ElementMap.update({
        __group.name() : __group,
        __parameterValue.name() : __parameterValue
    })
    _AttributeMap = AbstractGeneralParameterValueType._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gml.addCategoryObject('typeBinding', u'ParameterValueGroupType', ParameterValueGroupType)


# Complex type RingType with content type ELEMENT_ONLY
class RingType (AbstractRingType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'RingType')
    # Base type is AbstractRingType
    
    # Element {http://www.opengis.net/gml/3.2}curveMember uses Python identifier curveMember
    __curveMember = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'curveMember'), 'curveMember', '__httpwww_opengis_netgml3_2_RingType_httpwww_opengis_netgml3_2curveMember', True)

    
    curveMember = property(__curveMember.value, __curveMember.set, None, None)

    
    # Attribute aggregationType uses Python identifier aggregationType
    __aggregationType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'aggregationType'), 'aggregationType', '__httpwww_opengis_netgml3_2_RingType_aggregationType', AggregationType)
    
    aggregationType = property(__aggregationType.value, __aggregationType.set, None, None)


    _ElementMap = AbstractRingType._ElementMap.copy()
    _ElementMap.update({
        __curveMember.name() : __curveMember
    })
    _AttributeMap = AbstractRingType._AttributeMap.copy()
    _AttributeMap.update({
        __aggregationType.name() : __aggregationType
    })
_Namespace_gml.addCategoryObject('typeBinding', u'RingType', RingType)


# Complex type MD_SpatialRepresentationTypeCode_PropertyType with content type ELEMENT_ONLY
class MD_SpatialRepresentationTypeCode_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_SpatialRepresentationTypeCode_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmd}MD_SpatialRepresentationTypeCode uses Python identifier MD_SpatialRepresentationTypeCode
    __MD_SpatialRepresentationTypeCode = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_SpatialRepresentationTypeCode'), 'MD_SpatialRepresentationTypeCode', '__httpwww_isotc211_org2005gmd_MD_SpatialRepresentationTypeCode_PropertyType_httpwww_isotc211_org2005gmdMD_SpatialRepresentationTypeCode', False)

    
    MD_SpatialRepresentationTypeCode = property(__MD_SpatialRepresentationTypeCode.value, __MD_SpatialRepresentationTypeCode.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmd_MD_SpatialRepresentationTypeCode_PropertyType_httpwww_isotc211_org2005gconilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)


    _ElementMap = {
        __MD_SpatialRepresentationTypeCode.name() : __MD_SpatialRepresentationTypeCode
    }
    _AttributeMap = {
        __nilReason.name() : __nilReason
    }
_Namespace_gmd.addCategoryObject('typeBinding', u'MD_SpatialRepresentationTypeCode_PropertyType', MD_SpatialRepresentationTypeCode_PropertyType)


# Complex type TopoPrimitiveArrayAssociationType with content type ELEMENT_ONLY
class TopoPrimitiveArrayAssociationType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'TopoPrimitiveArrayAssociationType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.opengis.net/gml/3.2}AbstractTopoPrimitive uses Python identifier AbstractTopoPrimitive
    __AbstractTopoPrimitive = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractTopoPrimitive'), 'AbstractTopoPrimitive', '__httpwww_opengis_netgml3_2_TopoPrimitiveArrayAssociationType_httpwww_opengis_netgml3_2AbstractTopoPrimitive', True)

    
    AbstractTopoPrimitive = property(__AbstractTopoPrimitive.value, __AbstractTopoPrimitive.set, None, u'gml:AbstractTopoPrimitive acts as the base type for all topological primitives. Topology primitives are the atomic (smallest possible) units of a topology complex. \nEach topology primitive may contain references to other topology primitives of codimension 2 or more (gml:isolated). Conversely, nodes may have faces as containers and nodes and edges may have solids as containers (gml:container).')

    
    # Attribute owns uses Python identifier owns
    __owns = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'owns'), 'owns', '__httpwww_opengis_netgml3_2_TopoPrimitiveArrayAssociationType_owns', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    owns = property(__owns.value, __owns.set, None, None)


    _ElementMap = {
        __AbstractTopoPrimitive.name() : __AbstractTopoPrimitive
    }
    _AttributeMap = {
        __owns.name() : __owns
    }
_Namespace_gml.addCategoryObject('typeBinding', u'TopoPrimitiveArrayAssociationType', TopoPrimitiveArrayAssociationType)


# Complex type DS_Initiative_PropertyType with content type ELEMENT_ONLY
class DS_Initiative_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'DS_Initiative_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmd}DS_Initiative uses Python identifier DS_Initiative
    __DS_Initiative = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'DS_Initiative'), 'DS_Initiative', '__httpwww_isotc211_org2005gmd_DS_Initiative_PropertyType_httpwww_isotc211_org2005gmdDS_Initiative', False)

    
    DS_Initiative = property(__DS_Initiative.value, __DS_Initiative.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_isotc211_org2005gmd_DS_Initiative_PropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_isotc211_org2005gmd_DS_Initiative_PropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_isotc211_org2005gmd_DS_Initiative_PropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmd_DS_Initiative_PropertyType_httpwww_isotc211_org2005gconilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_isotc211_org2005gmd_DS_Initiative_PropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute uuidref uses Python identifier uuidref
    __uuidref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uuidref'), 'uuidref', '__httpwww_isotc211_org2005gmd_DS_Initiative_PropertyType_uuidref', pyxb.binding.datatypes.string)
    
    uuidref = property(__uuidref.value, __uuidref.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_isotc211_org2005gmd_DS_Initiative_PropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_isotc211_org2005gmd_DS_Initiative_PropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_isotc211_org2005gmd_DS_Initiative_PropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")


    _ElementMap = {
        __DS_Initiative.name() : __DS_Initiative
    }
    _AttributeMap = {
        __type.name() : __type,
        __arcrole.name() : __arcrole,
        __role.name() : __role,
        __nilReason.name() : __nilReason,
        __title.name() : __title,
        __uuidref.name() : __uuidref,
        __href.name() : __href,
        __actuate.name() : __actuate,
        __show.name() : __show
    }
_Namespace_gmd.addCategoryObject('typeBinding', u'DS_Initiative_PropertyType', DS_Initiative_PropertyType)


# Complex type MD_FeatureCatalogueDescription_Type with content type ELEMENT_ONLY
class MD_FeatureCatalogueDescription_Type (AbstractMD_ContentInformation_Type):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_FeatureCatalogueDescription_Type')
    # Base type is AbstractMD_ContentInformation_Type
    
    # Element {http://www.isotc211.org/2005/gmd}featureCatalogueCitation uses Python identifier featureCatalogueCitation
    __featureCatalogueCitation = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'featureCatalogueCitation'), 'featureCatalogueCitation', '__httpwww_isotc211_org2005gmd_MD_FeatureCatalogueDescription_Type_httpwww_isotc211_org2005gmdfeatureCatalogueCitation', True)

    
    featureCatalogueCitation = property(__featureCatalogueCitation.value, __featureCatalogueCitation.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}complianceCode uses Python identifier complianceCode
    __complianceCode = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'complianceCode'), 'complianceCode', '__httpwww_isotc211_org2005gmd_MD_FeatureCatalogueDescription_Type_httpwww_isotc211_org2005gmdcomplianceCode', False)

    
    complianceCode = property(__complianceCode.value, __complianceCode.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}includedWithDataset uses Python identifier includedWithDataset
    __includedWithDataset = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'includedWithDataset'), 'includedWithDataset', '__httpwww_isotc211_org2005gmd_MD_FeatureCatalogueDescription_Type_httpwww_isotc211_org2005gmdincludedWithDataset', False)

    
    includedWithDataset = property(__includedWithDataset.value, __includedWithDataset.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}language uses Python identifier language
    __language = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'language'), 'language', '__httpwww_isotc211_org2005gmd_MD_FeatureCatalogueDescription_Type_httpwww_isotc211_org2005gmdlanguage', True)

    
    language = property(__language.value, __language.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}featureTypes uses Python identifier featureTypes
    __featureTypes = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'featureTypes'), 'featureTypes', '__httpwww_isotc211_org2005gmd_MD_FeatureCatalogueDescription_Type_httpwww_isotc211_org2005gmdfeatureTypes', True)

    
    featureTypes = property(__featureTypes.value, __featureTypes.set, None, None)

    
    # Attribute id inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type
    
    # Attribute uuid inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type

    _ElementMap = AbstractMD_ContentInformation_Type._ElementMap.copy()
    _ElementMap.update({
        __featureCatalogueCitation.name() : __featureCatalogueCitation,
        __complianceCode.name() : __complianceCode,
        __includedWithDataset.name() : __includedWithDataset,
        __language.name() : __language,
        __featureTypes.name() : __featureTypes
    })
    _AttributeMap = AbstractMD_ContentInformation_Type._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gmd.addCategoryObject('typeBinding', u'MD_FeatureCatalogueDescription_Type', MD_FeatureCatalogueDescription_Type)


# Complex type DQ_Result_PropertyType with content type ELEMENT_ONLY
class DQ_Result_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'DQ_Result_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmd}AbstractDQ_Result uses Python identifier AbstractDQ_Result
    __AbstractDQ_Result = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'AbstractDQ_Result'), 'AbstractDQ_Result', '__httpwww_isotc211_org2005gmd_DQ_Result_PropertyType_httpwww_isotc211_org2005gmdAbstractDQ_Result', False)

    
    AbstractDQ_Result = property(__AbstractDQ_Result.value, __AbstractDQ_Result.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_isotc211_org2005gmd_DQ_Result_PropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_isotc211_org2005gmd_DQ_Result_PropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_isotc211_org2005gmd_DQ_Result_PropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_isotc211_org2005gmd_DQ_Result_PropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_isotc211_org2005gmd_DQ_Result_PropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmd_DQ_Result_PropertyType_httpwww_isotc211_org2005gconilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute uuidref uses Python identifier uuidref
    __uuidref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uuidref'), 'uuidref', '__httpwww_isotc211_org2005gmd_DQ_Result_PropertyType_uuidref', pyxb.binding.datatypes.string)
    
    uuidref = property(__uuidref.value, __uuidref.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_isotc211_org2005gmd_DQ_Result_PropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_isotc211_org2005gmd_DQ_Result_PropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)


    _ElementMap = {
        __AbstractDQ_Result.name() : __AbstractDQ_Result
    }
    _AttributeMap = {
        __type.name() : __type,
        __actuate.name() : __actuate,
        __arcrole.name() : __arcrole,
        __title.name() : __title,
        __role.name() : __role,
        __nilReason.name() : __nilReason,
        __uuidref.name() : __uuidref,
        __show.name() : __show,
        __href.name() : __href
    }
_Namespace_gmd.addCategoryObject('typeBinding', u'DQ_Result_PropertyType', DQ_Result_PropertyType)


# Complex type TemporalCSType with content type ELEMENT_ONLY
class TemporalCSType (AbstractCoordinateSystemType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'TemporalCSType')
    # Base type is AbstractCoordinateSystemType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element axis ({http://www.opengis.net/gml/3.2}axis) inherited from {http://www.opengis.net/gml/3.2}AbstractCoordinateSystemType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element remarks ({http://www.opengis.net/gml/3.2}remarks) inherited from {http://www.opengis.net/gml/3.2}DefinitionType
    
    # Attribute aggregationType inherited from {http://www.opengis.net/gml/3.2}AbstractCoordinateSystemType
    
    # Attribute id_ inherited from {http://www.opengis.net/gml/3.2}DefinitionBaseType

    _ElementMap = AbstractCoordinateSystemType._ElementMap.copy()
    _ElementMap.update({
        
    })
    _AttributeMap = AbstractCoordinateSystemType._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gml.addCategoryObject('typeBinding', u'TemporalCSType', TemporalCSType)


# Complex type MD_ImageDescription_PropertyType with content type ELEMENT_ONLY
class MD_ImageDescription_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_ImageDescription_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmd}MD_ImageDescription uses Python identifier MD_ImageDescription
    __MD_ImageDescription = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_ImageDescription'), 'MD_ImageDescription', '__httpwww_isotc211_org2005gmd_MD_ImageDescription_PropertyType_httpwww_isotc211_org2005gmdMD_ImageDescription', False)

    
    MD_ImageDescription = property(__MD_ImageDescription.value, __MD_ImageDescription.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_isotc211_org2005gmd_MD_ImageDescription_PropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_isotc211_org2005gmd_MD_ImageDescription_PropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_isotc211_org2005gmd_MD_ImageDescription_PropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_isotc211_org2005gmd_MD_ImageDescription_PropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_isotc211_org2005gmd_MD_ImageDescription_PropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute uuidref uses Python identifier uuidref
    __uuidref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uuidref'), 'uuidref', '__httpwww_isotc211_org2005gmd_MD_ImageDescription_PropertyType_uuidref', pyxb.binding.datatypes.string)
    
    uuidref = property(__uuidref.value, __uuidref.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_isotc211_org2005gmd_MD_ImageDescription_PropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_isotc211_org2005gmd_MD_ImageDescription_PropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmd_MD_ImageDescription_PropertyType_httpwww_isotc211_org2005gconilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)


    _ElementMap = {
        __MD_ImageDescription.name() : __MD_ImageDescription
    }
    _AttributeMap = {
        __title.name() : __title,
        __type.name() : __type,
        __show.name() : __show,
        __href.name() : __href,
        __actuate.name() : __actuate,
        __uuidref.name() : __uuidref,
        __role.name() : __role,
        __arcrole.name() : __arcrole,
        __nilReason.name() : __nilReason
    }
_Namespace_gmd.addCategoryObject('typeBinding', u'MD_ImageDescription_PropertyType', MD_ImageDescription_PropertyType)


# Complex type GeometryArrayPropertyType with content type ELEMENT_ONLY
class GeometryArrayPropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'GeometryArrayPropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.opengis.net/gml/3.2}AbstractGeometry uses Python identifier AbstractGeometry
    __AbstractGeometry = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractGeometry'), 'AbstractGeometry', '__httpwww_opengis_netgml3_2_GeometryArrayPropertyType_httpwww_opengis_netgml3_2AbstractGeometry', True)

    
    AbstractGeometry = property(__AbstractGeometry.value, __AbstractGeometry.set, None, u'The AbstractGeometry element is the abstract head of the substitution group for all geometry elements of GML. This includes pre-defined and user-defined geometry elements. Any geometry element shall be a direct or indirect extension/restriction of AbstractGeometryType and shall be directly or indirectly in the substitution group of AbstractGeometry.')

    
    # Attribute owns uses Python identifier owns
    __owns = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'owns'), 'owns', '__httpwww_opengis_netgml3_2_GeometryArrayPropertyType_owns', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    owns = property(__owns.value, __owns.set, None, None)


    _ElementMap = {
        __AbstractGeometry.name() : __AbstractGeometry
    }
    _AttributeMap = {
        __owns.name() : __owns
    }
_Namespace_gml.addCategoryObject('typeBinding', u'GeometryArrayPropertyType', GeometryArrayPropertyType)


# Complex type DQ_QuantitativeResult_PropertyType with content type ELEMENT_ONLY
class DQ_QuantitativeResult_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'DQ_QuantitativeResult_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmd}DQ_QuantitativeResult uses Python identifier DQ_QuantitativeResult
    __DQ_QuantitativeResult = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'DQ_QuantitativeResult'), 'DQ_QuantitativeResult', '__httpwww_isotc211_org2005gmd_DQ_QuantitativeResult_PropertyType_httpwww_isotc211_org2005gmdDQ_QuantitativeResult', False)

    
    DQ_QuantitativeResult = property(__DQ_QuantitativeResult.value, __DQ_QuantitativeResult.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_isotc211_org2005gmd_DQ_QuantitativeResult_PropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_isotc211_org2005gmd_DQ_QuantitativeResult_PropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_isotc211_org2005gmd_DQ_QuantitativeResult_PropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute uuidref uses Python identifier uuidref
    __uuidref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uuidref'), 'uuidref', '__httpwww_isotc211_org2005gmd_DQ_QuantitativeResult_PropertyType_uuidref', pyxb.binding.datatypes.string)
    
    uuidref = property(__uuidref.value, __uuidref.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_isotc211_org2005gmd_DQ_QuantitativeResult_PropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmd_DQ_QuantitativeResult_PropertyType_httpwww_isotc211_org2005gconilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_isotc211_org2005gmd_DQ_QuantitativeResult_PropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_isotc211_org2005gmd_DQ_QuantitativeResult_PropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_isotc211_org2005gmd_DQ_QuantitativeResult_PropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")


    _ElementMap = {
        __DQ_QuantitativeResult.name() : __DQ_QuantitativeResult
    }
    _AttributeMap = {
        __type.name() : __type,
        __role.name() : __role,
        __arcrole.name() : __arcrole,
        __uuidref.name() : __uuidref,
        __title.name() : __title,
        __nilReason.name() : __nilReason,
        __show.name() : __show,
        __href.name() : __href,
        __actuate.name() : __actuate
    }
_Namespace_gmd.addCategoryObject('typeBinding', u'DQ_QuantitativeResult_PropertyType', DQ_QuantitativeResult_PropertyType)


# Complex type MD_MediumNameCode_PropertyType with content type ELEMENT_ONLY
class MD_MediumNameCode_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_MediumNameCode_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmd}MD_MediumNameCode uses Python identifier MD_MediumNameCode
    __MD_MediumNameCode = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_MediumNameCode'), 'MD_MediumNameCode', '__httpwww_isotc211_org2005gmd_MD_MediumNameCode_PropertyType_httpwww_isotc211_org2005gmdMD_MediumNameCode', False)

    
    MD_MediumNameCode = property(__MD_MediumNameCode.value, __MD_MediumNameCode.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmd_MD_MediumNameCode_PropertyType_httpwww_isotc211_org2005gconilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)


    _ElementMap = {
        __MD_MediumNameCode.name() : __MD_MediumNameCode
    }
    _AttributeMap = {
        __nilReason.name() : __nilReason
    }
_Namespace_gmd.addCategoryObject('typeBinding', u'MD_MediumNameCode_PropertyType', MD_MediumNameCode_PropertyType)


# Complex type MD_GridSpatialRepresentation_PropertyType with content type ELEMENT_ONLY
class MD_GridSpatialRepresentation_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_GridSpatialRepresentation_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmd}MD_GridSpatialRepresentation uses Python identifier MD_GridSpatialRepresentation
    __MD_GridSpatialRepresentation = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_GridSpatialRepresentation'), 'MD_GridSpatialRepresentation', '__httpwww_isotc211_org2005gmd_MD_GridSpatialRepresentation_PropertyType_httpwww_isotc211_org2005gmdMD_GridSpatialRepresentation', False)

    
    MD_GridSpatialRepresentation = property(__MD_GridSpatialRepresentation.value, __MD_GridSpatialRepresentation.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_isotc211_org2005gmd_MD_GridSpatialRepresentation_PropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_isotc211_org2005gmd_MD_GridSpatialRepresentation_PropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_isotc211_org2005gmd_MD_GridSpatialRepresentation_PropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_isotc211_org2005gmd_MD_GridSpatialRepresentation_PropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmd_MD_GridSpatialRepresentation_PropertyType_httpwww_isotc211_org2005gconilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_isotc211_org2005gmd_MD_GridSpatialRepresentation_PropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute uuidref uses Python identifier uuidref
    __uuidref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uuidref'), 'uuidref', '__httpwww_isotc211_org2005gmd_MD_GridSpatialRepresentation_PropertyType_uuidref', pyxb.binding.datatypes.string)
    
    uuidref = property(__uuidref.value, __uuidref.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_isotc211_org2005gmd_MD_GridSpatialRepresentation_PropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_isotc211_org2005gmd_MD_GridSpatialRepresentation_PropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")


    _ElementMap = {
        __MD_GridSpatialRepresentation.name() : __MD_GridSpatialRepresentation
    }
    _AttributeMap = {
        __type.name() : __type,
        __arcrole.name() : __arcrole,
        __show.name() : __show,
        __role.name() : __role,
        __nilReason.name() : __nilReason,
        __title.name() : __title,
        __uuidref.name() : __uuidref,
        __href.name() : __href,
        __actuate.name() : __actuate
    }
_Namespace_gmd.addCategoryObject('typeBinding', u'MD_GridSpatialRepresentation_PropertyType', MD_GridSpatialRepresentation_PropertyType)


# Complex type MD_RestrictionCode_PropertyType with content type ELEMENT_ONLY
class MD_RestrictionCode_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_RestrictionCode_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmd}MD_RestrictionCode uses Python identifier MD_RestrictionCode
    __MD_RestrictionCode = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_RestrictionCode'), 'MD_RestrictionCode', '__httpwww_isotc211_org2005gmd_MD_RestrictionCode_PropertyType_httpwww_isotc211_org2005gmdMD_RestrictionCode', False)

    
    MD_RestrictionCode = property(__MD_RestrictionCode.value, __MD_RestrictionCode.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmd_MD_RestrictionCode_PropertyType_httpwww_isotc211_org2005gconilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)


    _ElementMap = {
        __MD_RestrictionCode.name() : __MD_RestrictionCode
    }
    _AttributeMap = {
        __nilReason.name() : __nilReason
    }
_Namespace_gmd.addCategoryObject('typeBinding', u'MD_RestrictionCode_PropertyType', MD_RestrictionCode_PropertyType)


# Complex type MD_ReferenceSystem_Type with content type ELEMENT_ONLY
class MD_ReferenceSystem_Type (AbstractObject_Type):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_ReferenceSystem_Type')
    # Base type is AbstractObject_Type
    
    # Element {http://www.isotc211.org/2005/gmd}referenceSystemIdentifier uses Python identifier referenceSystemIdentifier
    __referenceSystemIdentifier = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'referenceSystemIdentifier'), 'referenceSystemIdentifier', '__httpwww_isotc211_org2005gmd_MD_ReferenceSystem_Type_httpwww_isotc211_org2005gmdreferenceSystemIdentifier', False)

    
    referenceSystemIdentifier = property(__referenceSystemIdentifier.value, __referenceSystemIdentifier.set, None, None)

    
    # Attribute id inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type
    
    # Attribute uuid inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type

    _ElementMap = AbstractObject_Type._ElementMap.copy()
    _ElementMap.update({
        __referenceSystemIdentifier.name() : __referenceSystemIdentifier
    })
    _AttributeMap = AbstractObject_Type._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gmd.addCategoryObject('typeBinding', u'MD_ReferenceSystem_Type', MD_ReferenceSystem_Type)


# Complex type DerivedUnitType with content type ELEMENT_ONLY
class DerivedUnitType (UnitDefinitionType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'DerivedUnitType')
    # Base type is UnitDefinitionType
    
    # Element quantityTypeReference ({http://www.opengis.net/gml/3.2}quantityTypeReference) inherited from {http://www.opengis.net/gml/3.2}UnitDefinitionType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element catalogSymbol ({http://www.opengis.net/gml/3.2}catalogSymbol) inherited from {http://www.opengis.net/gml/3.2}UnitDefinitionType
    
    # Element quantityType ({http://www.opengis.net/gml/3.2}quantityType) inherited from {http://www.opengis.net/gml/3.2}UnitDefinitionType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element {http://www.opengis.net/gml/3.2}derivationUnitTerm uses Python identifier derivationUnitTerm
    __derivationUnitTerm = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'derivationUnitTerm'), 'derivationUnitTerm', '__httpwww_opengis_netgml3_2_DerivedUnitType_httpwww_opengis_netgml3_2derivationUnitTerm', True)

    
    derivationUnitTerm = property(__derivationUnitTerm.value, __derivationUnitTerm.set, None, u'A set of gml:derivationUnitTerm elements describes a derived unit of measure.  Each element carries an integer exponent.  The terms are combined by raising each referenced unit to the power of its exponent and forming the product.\nThis unit term references another unit of measure (uom) and provides an integer exponent applied to that unit in defining the compound unit. The exponent may be positive or negative, but not zero.')

    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element remarks ({http://www.opengis.net/gml/3.2}remarks) inherited from {http://www.opengis.net/gml/3.2}DefinitionType
    
    # Attribute id_ inherited from {http://www.opengis.net/gml/3.2}DefinitionBaseType

    _ElementMap = UnitDefinitionType._ElementMap.copy()
    _ElementMap.update({
        __derivationUnitTerm.name() : __derivationUnitTerm
    })
    _AttributeMap = UnitDefinitionType._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gml.addCategoryObject('typeBinding', u'DerivedUnitType', DerivedUnitType)


# Complex type DQ_QuantitativeAttributeAccuracy_Type with content type ELEMENT_ONLY
class DQ_QuantitativeAttributeAccuracy_Type (AbstractDQ_ThematicAccuracy_Type):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'DQ_QuantitativeAttributeAccuracy_Type')
    # Base type is AbstractDQ_ThematicAccuracy_Type
    
    # Element evaluationMethodDescription ({http://www.isotc211.org/2005/gmd}evaluationMethodDescription) inherited from {http://www.isotc211.org/2005/gmd}AbstractDQ_Element_Type
    
    # Element measureDescription ({http://www.isotc211.org/2005/gmd}measureDescription) inherited from {http://www.isotc211.org/2005/gmd}AbstractDQ_Element_Type
    
    # Element evaluationProcedure ({http://www.isotc211.org/2005/gmd}evaluationProcedure) inherited from {http://www.isotc211.org/2005/gmd}AbstractDQ_Element_Type
    
    # Element evaluationMethodType ({http://www.isotc211.org/2005/gmd}evaluationMethodType) inherited from {http://www.isotc211.org/2005/gmd}AbstractDQ_Element_Type
    
    # Element dateTime ({http://www.isotc211.org/2005/gmd}dateTime) inherited from {http://www.isotc211.org/2005/gmd}AbstractDQ_Element_Type
    
    # Element result ({http://www.isotc211.org/2005/gmd}result) inherited from {http://www.isotc211.org/2005/gmd}AbstractDQ_Element_Type
    
    # Element nameOfMeasure ({http://www.isotc211.org/2005/gmd}nameOfMeasure) inherited from {http://www.isotc211.org/2005/gmd}AbstractDQ_Element_Type
    
    # Element measureIdentification ({http://www.isotc211.org/2005/gmd}measureIdentification) inherited from {http://www.isotc211.org/2005/gmd}AbstractDQ_Element_Type
    
    # Attribute id inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type
    
    # Attribute uuid inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type

    _ElementMap = AbstractDQ_ThematicAccuracy_Type._ElementMap.copy()
    _ElementMap.update({
        
    })
    _AttributeMap = AbstractDQ_ThematicAccuracy_Type._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gmd.addCategoryObject('typeBinding', u'DQ_QuantitativeAttributeAccuracy_Type', DQ_QuantitativeAttributeAccuracy_Type)


# Complex type PrimeMeridianPropertyType with content type ELEMENT_ONLY
class PrimeMeridianPropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'PrimeMeridianPropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.opengis.net/gml/3.2}PrimeMeridian uses Python identifier PrimeMeridian
    __PrimeMeridian = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'PrimeMeridian'), 'PrimeMeridian', '__httpwww_opengis_netgml3_2_PrimeMeridianPropertyType_httpwww_opengis_netgml3_2PrimeMeridian', False)

    
    PrimeMeridian = property(__PrimeMeridian.value, __PrimeMeridian.set, None, u'A gml:PrimeMeridian defines the origin from which longitude values are determined. The default value for the prime meridian gml:identifier value is "Greenwich".')

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_opengis_netgml3_2_PrimeMeridianPropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.opengis.net/gml/3.2}remoteSchema uses Python identifier remoteSchema
    __remoteSchema = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'remoteSchema'), 'remoteSchema', '__httpwww_opengis_netgml3_2_PrimeMeridianPropertyType_httpwww_opengis_netgml3_2remoteSchema', pyxb.binding.datatypes.anyURI)
    
    remoteSchema = property(__remoteSchema.value, __remoteSchema.set, None, u'')

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_opengis_netgml3_2_PrimeMeridianPropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_opengis_netgml3_2_PrimeMeridianPropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'nilReason'), 'nilReason', '__httpwww_opengis_netgml3_2_PrimeMeridianPropertyType_nilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_opengis_netgml3_2_PrimeMeridianPropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_opengis_netgml3_2_PrimeMeridianPropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_opengis_netgml3_2_PrimeMeridianPropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_opengis_netgml3_2_PrimeMeridianPropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)


    _ElementMap = {
        __PrimeMeridian.name() : __PrimeMeridian
    }
    _AttributeMap = {
        __show.name() : __show,
        __remoteSchema.name() : __remoteSchema,
        __actuate.name() : __actuate,
        __href.name() : __href,
        __nilReason.name() : __nilReason,
        __type.name() : __type,
        __title.name() : __title,
        __arcrole.name() : __arcrole,
        __role.name() : __role
    }
_Namespace_gml.addCategoryObject('typeBinding', u'PrimeMeridianPropertyType', PrimeMeridianPropertyType)


# Complex type CI_Address_PropertyType with content type ELEMENT_ONLY
class CI_Address_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'CI_Address_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmd}CI_Address uses Python identifier CI_Address
    __CI_Address = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'CI_Address'), 'CI_Address', '__httpwww_isotc211_org2005gmd_CI_Address_PropertyType_httpwww_isotc211_org2005gmdCI_Address', False)

    
    CI_Address = property(__CI_Address.value, __CI_Address.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmd_CI_Address_PropertyType_httpwww_isotc211_org2005gconilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_isotc211_org2005gmd_CI_Address_PropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_isotc211_org2005gmd_CI_Address_PropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_isotc211_org2005gmd_CI_Address_PropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_isotc211_org2005gmd_CI_Address_PropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_isotc211_org2005gmd_CI_Address_PropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute uuidref uses Python identifier uuidref
    __uuidref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uuidref'), 'uuidref', '__httpwww_isotc211_org2005gmd_CI_Address_PropertyType_uuidref', pyxb.binding.datatypes.string)
    
    uuidref = property(__uuidref.value, __uuidref.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_isotc211_org2005gmd_CI_Address_PropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_isotc211_org2005gmd_CI_Address_PropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)


    _ElementMap = {
        __CI_Address.name() : __CI_Address
    }
    _AttributeMap = {
        __nilReason.name() : __nilReason,
        __type.name() : __type,
        __title.name() : __title,
        __show.name() : __show,
        __href.name() : __href,
        __actuate.name() : __actuate,
        __uuidref.name() : __uuidref,
        __arcrole.name() : __arcrole,
        __role.name() : __role
    }
_Namespace_gmd.addCategoryObject('typeBinding', u'CI_Address_PropertyType', CI_Address_PropertyType)


# Complex type VerticalDatumPropertyType with content type ELEMENT_ONLY
class VerticalDatumPropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'VerticalDatumPropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.opengis.net/gml/3.2}VerticalDatum uses Python identifier VerticalDatum
    __VerticalDatum = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'VerticalDatum'), 'VerticalDatum', '__httpwww_opengis_netgml3_2_VerticalDatumPropertyType_httpwww_opengis_netgml3_2VerticalDatum', False)

    
    VerticalDatum = property(__VerticalDatum.value, __VerticalDatum.set, None, u'gml:VerticalDatum is a textual description and/or a set of parameters identifying a particular reference level surface used as a zero-height surface, including its position with respect to the Earth for any of the height types recognized by this International Standard.')

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_opengis_netgml3_2_VerticalDatumPropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.opengis.net/gml/3.2}remoteSchema uses Python identifier remoteSchema
    __remoteSchema = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'remoteSchema'), 'remoteSchema', '__httpwww_opengis_netgml3_2_VerticalDatumPropertyType_httpwww_opengis_netgml3_2remoteSchema', pyxb.binding.datatypes.anyURI)
    
    remoteSchema = property(__remoteSchema.value, __remoteSchema.set, None, u'')

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_opengis_netgml3_2_VerticalDatumPropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_opengis_netgml3_2_VerticalDatumPropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'nilReason'), 'nilReason', '__httpwww_opengis_netgml3_2_VerticalDatumPropertyType_nilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_opengis_netgml3_2_VerticalDatumPropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_opengis_netgml3_2_VerticalDatumPropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_opengis_netgml3_2_VerticalDatumPropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_opengis_netgml3_2_VerticalDatumPropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)


    _ElementMap = {
        __VerticalDatum.name() : __VerticalDatum
    }
    _AttributeMap = {
        __show.name() : __show,
        __remoteSchema.name() : __remoteSchema,
        __actuate.name() : __actuate,
        __href.name() : __href,
        __nilReason.name() : __nilReason,
        __type.name() : __type,
        __title.name() : __title,
        __arcrole.name() : __arcrole,
        __role.name() : __role
    }
_Namespace_gml.addCategoryObject('typeBinding', u'VerticalDatumPropertyType', VerticalDatumPropertyType)


# Complex type MD_ExtendedElementInformation_PropertyType with content type ELEMENT_ONLY
class MD_ExtendedElementInformation_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_ExtendedElementInformation_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmd}MD_ExtendedElementInformation uses Python identifier MD_ExtendedElementInformation
    __MD_ExtendedElementInformation = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_ExtendedElementInformation'), 'MD_ExtendedElementInformation', '__httpwww_isotc211_org2005gmd_MD_ExtendedElementInformation_PropertyType_httpwww_isotc211_org2005gmdMD_ExtendedElementInformation', False)

    
    MD_ExtendedElementInformation = property(__MD_ExtendedElementInformation.value, __MD_ExtendedElementInformation.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_isotc211_org2005gmd_MD_ExtendedElementInformation_PropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_isotc211_org2005gmd_MD_ExtendedElementInformation_PropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmd_MD_ExtendedElementInformation_PropertyType_httpwww_isotc211_org2005gconilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_isotc211_org2005gmd_MD_ExtendedElementInformation_PropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_isotc211_org2005gmd_MD_ExtendedElementInformation_PropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute uuidref uses Python identifier uuidref
    __uuidref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uuidref'), 'uuidref', '__httpwww_isotc211_org2005gmd_MD_ExtendedElementInformation_PropertyType_uuidref', pyxb.binding.datatypes.string)
    
    uuidref = property(__uuidref.value, __uuidref.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_isotc211_org2005gmd_MD_ExtendedElementInformation_PropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_isotc211_org2005gmd_MD_ExtendedElementInformation_PropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_isotc211_org2005gmd_MD_ExtendedElementInformation_PropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)


    _ElementMap = {
        __MD_ExtendedElementInformation.name() : __MD_ExtendedElementInformation
    }
    _AttributeMap = {
        __arcrole.name() : __arcrole,
        __role.name() : __role,
        __nilReason.name() : __nilReason,
        __title.name() : __title,
        __show.name() : __show,
        __uuidref.name() : __uuidref,
        __href.name() : __href,
        __actuate.name() : __actuate,
        __type.name() : __type
    }
_Namespace_gmd.addCategoryObject('typeBinding', u'MD_ExtendedElementInformation_PropertyType', MD_ExtendedElementInformation_PropertyType)


# Complex type GeometricComplexType with content type ELEMENT_ONLY
class GeometricComplexType (AbstractGeometryType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'GeometricComplexType')
    # Base type is AbstractGeometryType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element {http://www.opengis.net/gml/3.2}element uses Python identifier element
    __element = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'element'), 'element', '__httpwww_opengis_netgml3_2_GeometricComplexType_httpwww_opengis_netgml3_2element', True)

    
    element = property(__element.value, __element.set, None, None)

    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Attribute uomLabels inherited from {http://www.opengis.net/gml/3.2}AbstractGeometryType
    
    # Attribute aggregationType uses Python identifier aggregationType
    __aggregationType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'aggregationType'), 'aggregationType', '__httpwww_opengis_netgml3_2_GeometricComplexType_aggregationType', AggregationType)
    
    aggregationType = property(__aggregationType.value, __aggregationType.set, None, None)

    
    # Attribute srsName inherited from {http://www.opengis.net/gml/3.2}AbstractGeometryType
    
    # Attribute id inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Attribute srsDimension inherited from {http://www.opengis.net/gml/3.2}AbstractGeometryType
    
    # Attribute axisLabels inherited from {http://www.opengis.net/gml/3.2}AbstractGeometryType

    _ElementMap = AbstractGeometryType._ElementMap.copy()
    _ElementMap.update({
        __element.name() : __element
    })
    _AttributeMap = AbstractGeometryType._AttributeMap.copy()
    _AttributeMap.update({
        __aggregationType.name() : __aggregationType
    })
_Namespace_gml.addCategoryObject('typeBinding', u'GeometricComplexType', GeometricComplexType)


# Complex type TimeCalendarType with content type ELEMENT_ONLY
class TimeCalendarType (TimeReferenceSystemType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'TimeCalendarType')
    # Base type is TimeReferenceSystemType
    
    # Element {http://www.opengis.net/gml/3.2}referenceFrame uses Python identifier referenceFrame
    __referenceFrame = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'referenceFrame'), 'referenceFrame', '__httpwww_opengis_netgml3_2_TimeCalendarType_httpwww_opengis_netgml3_2referenceFrame', True)

    
    referenceFrame = property(__referenceFrame.value, __referenceFrame.set, None, None)

    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element domainOfValidity ({http://www.opengis.net/gml/3.2}domainOfValidity) inherited from {http://www.opengis.net/gml/3.2}TimeReferenceSystemType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element remarks ({http://www.opengis.net/gml/3.2}remarks) inherited from {http://www.opengis.net/gml/3.2}DefinitionType
    
    # Attribute id_ inherited from {http://www.opengis.net/gml/3.2}DefinitionBaseType

    _ElementMap = TimeReferenceSystemType._ElementMap.copy()
    _ElementMap.update({
        __referenceFrame.name() : __referenceFrame
    })
    _AttributeMap = TimeReferenceSystemType._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gml.addCategoryObject('typeBinding', u'TimeCalendarType', TimeCalendarType)


# Complex type TimePeriodType with content type ELEMENT_ONLY
class TimePeriodType (AbstractTimeGeometricPrimitiveType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'TimePeriodType')
    # Base type is AbstractTimeGeometricPrimitiveType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element {http://www.opengis.net/gml/3.2}timeInterval uses Python identifier timeInterval
    __timeInterval = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'timeInterval'), 'timeInterval', '__httpwww_opengis_netgml3_2_TimePeriodType_httpwww_opengis_netgml3_2timeInterval', False)

    
    timeInterval = property(__timeInterval.value, __timeInterval.set, None, u' gml:timeInterval conforms to ISO 11404 which is based on floating point values for temporal length.\nISO 11404 syntax specifies the use of a positiveInteger together with appropriate values for radix and factor. The resolution of the time interval is to one radix ^(-factor) of the specified time unit.\nThe value of the unit is either selected from the units for time intervals from ISO 31-1:1992, or is another suitable unit.  The encoding is defined for GML in gml:TimeUnitType. The second component of this union type provides a method for indicating time units other than the six standard units given in the enumeration.')

    
    # Element {http://www.opengis.net/gml/3.2}beginPosition uses Python identifier beginPosition
    __beginPosition = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'beginPosition'), 'beginPosition', '__httpwww_opengis_netgml3_2_TimePeriodType_httpwww_opengis_netgml3_2beginPosition', False)

    
    beginPosition = property(__beginPosition.value, __beginPosition.set, None, None)

    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element {http://www.opengis.net/gml/3.2}begin uses Python identifier begin
    __begin = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'begin'), 'begin', '__httpwww_opengis_netgml3_2_TimePeriodType_httpwww_opengis_netgml3_2begin', False)

    
    begin = property(__begin.value, __begin.set, None, None)

    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element {http://www.opengis.net/gml/3.2}endPosition uses Python identifier endPosition
    __endPosition = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'endPosition'), 'endPosition', '__httpwww_opengis_netgml3_2_TimePeriodType_httpwww_opengis_netgml3_2endPosition', False)

    
    endPosition = property(__endPosition.value, __endPosition.set, None, None)

    
    # Element relatedTime ({http://www.opengis.net/gml/3.2}relatedTime) inherited from {http://www.opengis.net/gml/3.2}AbstractTimePrimitiveType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element {http://www.opengis.net/gml/3.2}end uses Python identifier end
    __end = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'end'), 'end', '__httpwww_opengis_netgml3_2_TimePeriodType_httpwww_opengis_netgml3_2end', False)

    
    end = property(__end.value, __end.set, None, None)

    
    # Element {http://www.opengis.net/gml/3.2}duration uses Python identifier duration
    __duration = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'duration'), 'duration', '__httpwww_opengis_netgml3_2_TimePeriodType_httpwww_opengis_netgml3_2duration', False)

    
    duration = property(__duration.value, __duration.set, None, u'gml:duration conforms to the ISO 8601 syntax for temporal length as implemented by the XML Schema duration type.')

    
    # Attribute frame inherited from {http://www.opengis.net/gml/3.2}AbstractTimeGeometricPrimitiveType
    
    # Attribute id inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType

    _ElementMap = AbstractTimeGeometricPrimitiveType._ElementMap.copy()
    _ElementMap.update({
        __timeInterval.name() : __timeInterval,
        __beginPosition.name() : __beginPosition,
        __begin.name() : __begin,
        __endPosition.name() : __endPosition,
        __end.name() : __end,
        __duration.name() : __duration
    })
    _AttributeMap = AbstractTimeGeometricPrimitiveType._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gml.addCategoryObject('typeBinding', u'TimePeriodType', TimePeriodType)


# Complex type MD_CoverageDescription_PropertyType with content type ELEMENT_ONLY
class MD_CoverageDescription_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_CoverageDescription_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmd}MD_CoverageDescription uses Python identifier MD_CoverageDescription
    __MD_CoverageDescription = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_CoverageDescription'), 'MD_CoverageDescription', '__httpwww_isotc211_org2005gmd_MD_CoverageDescription_PropertyType_httpwww_isotc211_org2005gmdMD_CoverageDescription', False)

    
    MD_CoverageDescription = property(__MD_CoverageDescription.value, __MD_CoverageDescription.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmd_MD_CoverageDescription_PropertyType_httpwww_isotc211_org2005gconilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_isotc211_org2005gmd_MD_CoverageDescription_PropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_isotc211_org2005gmd_MD_CoverageDescription_PropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_isotc211_org2005gmd_MD_CoverageDescription_PropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute uuidref uses Python identifier uuidref
    __uuidref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uuidref'), 'uuidref', '__httpwww_isotc211_org2005gmd_MD_CoverageDescription_PropertyType_uuidref', pyxb.binding.datatypes.string)
    
    uuidref = property(__uuidref.value, __uuidref.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_isotc211_org2005gmd_MD_CoverageDescription_PropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_isotc211_org2005gmd_MD_CoverageDescription_PropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_isotc211_org2005gmd_MD_CoverageDescription_PropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_isotc211_org2005gmd_MD_CoverageDescription_PropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")


    _ElementMap = {
        __MD_CoverageDescription.name() : __MD_CoverageDescription
    }
    _AttributeMap = {
        __nilReason.name() : __nilReason,
        __role.name() : __role,
        __show.name() : __show,
        __href.name() : __href,
        __uuidref.name() : __uuidref,
        __type.name() : __type,
        __title.name() : __title,
        __arcrole.name() : __arcrole,
        __actuate.name() : __actuate
    }
_Namespace_gmd.addCategoryObject('typeBinding', u'MD_CoverageDescription_PropertyType', MD_CoverageDescription_PropertyType)


# Complex type PolygonType with content type ELEMENT_ONLY
class PolygonType (AbstractSurfaceType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'PolygonType')
    # Base type is AbstractSurfaceType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element {http://www.opengis.net/gml/3.2}exterior uses Python identifier exterior
    __exterior = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'exterior'), 'exterior', '__httpwww_opengis_netgml3_2_PolygonType_httpwww_opengis_netgml3_2exterior', False)

    
    exterior = property(__exterior.value, __exterior.set, None, u'A boundary of a surface consists of a number of rings. In the normal 2D case, one of these rings is distinguished as being the exterior boundary. In a general manifold this is not always possible, in which case all boundaries shall be listed as interior boundaries, and the exterior will be empty.')

    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element {http://www.opengis.net/gml/3.2}interior uses Python identifier interior
    __interior = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'interior'), 'interior', '__httpwww_opengis_netgml3_2_PolygonType_httpwww_opengis_netgml3_2interior', True)

    
    interior = property(__interior.value, __interior.set, None, u'A boundary of a surface consists of a number of rings. The "interior" rings separate the surface / surface patch from the area enclosed by the rings.')

    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Attribute srsName inherited from {http://www.opengis.net/gml/3.2}AbstractGeometryType
    
    # Attribute axisLabels inherited from {http://www.opengis.net/gml/3.2}AbstractGeometryType
    
    # Attribute id inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Attribute uomLabels inherited from {http://www.opengis.net/gml/3.2}AbstractGeometryType
    
    # Attribute srsDimension inherited from {http://www.opengis.net/gml/3.2}AbstractGeometryType

    _ElementMap = AbstractSurfaceType._ElementMap.copy()
    _ElementMap.update({
        __exterior.name() : __exterior,
        __interior.name() : __interior
    })
    _AttributeMap = AbstractSurfaceType._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gml.addCategoryObject('typeBinding', u'PolygonType', PolygonType)


# Complex type MD_PortrayalCatalogueReference_PropertyType with content type ELEMENT_ONLY
class MD_PortrayalCatalogueReference_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_PortrayalCatalogueReference_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmd}MD_PortrayalCatalogueReference uses Python identifier MD_PortrayalCatalogueReference
    __MD_PortrayalCatalogueReference = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_PortrayalCatalogueReference'), 'MD_PortrayalCatalogueReference', '__httpwww_isotc211_org2005gmd_MD_PortrayalCatalogueReference_PropertyType_httpwww_isotc211_org2005gmdMD_PortrayalCatalogueReference', False)

    
    MD_PortrayalCatalogueReference = property(__MD_PortrayalCatalogueReference.value, __MD_PortrayalCatalogueReference.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_isotc211_org2005gmd_MD_PortrayalCatalogueReference_PropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_isotc211_org2005gmd_MD_PortrayalCatalogueReference_PropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_isotc211_org2005gmd_MD_PortrayalCatalogueReference_PropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_isotc211_org2005gmd_MD_PortrayalCatalogueReference_PropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_isotc211_org2005gmd_MD_PortrayalCatalogueReference_PropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute uuidref uses Python identifier uuidref
    __uuidref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uuidref'), 'uuidref', '__httpwww_isotc211_org2005gmd_MD_PortrayalCatalogueReference_PropertyType_uuidref', pyxb.binding.datatypes.string)
    
    uuidref = property(__uuidref.value, __uuidref.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmd_MD_PortrayalCatalogueReference_PropertyType_httpwww_isotc211_org2005gconilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_isotc211_org2005gmd_MD_PortrayalCatalogueReference_PropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_isotc211_org2005gmd_MD_PortrayalCatalogueReference_PropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")


    _ElementMap = {
        __MD_PortrayalCatalogueReference.name() : __MD_PortrayalCatalogueReference
    }
    _AttributeMap = {
        __href.name() : __href,
        __type.name() : __type,
        __actuate.name() : __actuate,
        __role.name() : __role,
        __arcrole.name() : __arcrole,
        __uuidref.name() : __uuidref,
        __nilReason.name() : __nilReason,
        __title.name() : __title,
        __show.name() : __show
    }
_Namespace_gmd.addCategoryObject('typeBinding', u'MD_PortrayalCatalogueReference_PropertyType', MD_PortrayalCatalogueReference_PropertyType)


# Complex type MD_SecurityConstraints_Type with content type ELEMENT_ONLY
class MD_SecurityConstraints_Type (MD_Constraints_Type):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_SecurityConstraints_Type')
    # Base type is MD_Constraints_Type
    
    # Element {http://www.isotc211.org/2005/gmd}handlingDescription uses Python identifier handlingDescription
    __handlingDescription = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'handlingDescription'), 'handlingDescription', '__httpwww_isotc211_org2005gmd_MD_SecurityConstraints_Type_httpwww_isotc211_org2005gmdhandlingDescription', False)

    
    handlingDescription = property(__handlingDescription.value, __handlingDescription.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}classification uses Python identifier classification
    __classification = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'classification'), 'classification', '__httpwww_isotc211_org2005gmd_MD_SecurityConstraints_Type_httpwww_isotc211_org2005gmdclassification', False)

    
    classification = property(__classification.value, __classification.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}classificationSystem uses Python identifier classificationSystem
    __classificationSystem = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'classificationSystem'), 'classificationSystem', '__httpwww_isotc211_org2005gmd_MD_SecurityConstraints_Type_httpwww_isotc211_org2005gmdclassificationSystem', False)

    
    classificationSystem = property(__classificationSystem.value, __classificationSystem.set, None, None)

    
    # Element useLimitation ({http://www.isotc211.org/2005/gmd}useLimitation) inherited from {http://www.isotc211.org/2005/gmd}MD_Constraints_Type
    
    # Element {http://www.isotc211.org/2005/gmd}userNote uses Python identifier userNote
    __userNote = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'userNote'), 'userNote', '__httpwww_isotc211_org2005gmd_MD_SecurityConstraints_Type_httpwww_isotc211_org2005gmduserNote', False)

    
    userNote = property(__userNote.value, __userNote.set, None, None)

    
    # Attribute id inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type
    
    # Attribute uuid inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type

    _ElementMap = MD_Constraints_Type._ElementMap.copy()
    _ElementMap.update({
        __handlingDescription.name() : __handlingDescription,
        __classification.name() : __classification,
        __classificationSystem.name() : __classificationSystem,
        __userNote.name() : __userNote
    })
    _AttributeMap = MD_Constraints_Type._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gmd.addCategoryObject('typeBinding', u'MD_SecurityConstraints_Type', MD_SecurityConstraints_Type)


# Complex type DQ_CompletenessOmission_Type with content type ELEMENT_ONLY
class DQ_CompletenessOmission_Type (AbstractDQ_Completeness_Type):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'DQ_CompletenessOmission_Type')
    # Base type is AbstractDQ_Completeness_Type
    
    # Element evaluationMethodDescription ({http://www.isotc211.org/2005/gmd}evaluationMethodDescription) inherited from {http://www.isotc211.org/2005/gmd}AbstractDQ_Element_Type
    
    # Element measureDescription ({http://www.isotc211.org/2005/gmd}measureDescription) inherited from {http://www.isotc211.org/2005/gmd}AbstractDQ_Element_Type
    
    # Element evaluationProcedure ({http://www.isotc211.org/2005/gmd}evaluationProcedure) inherited from {http://www.isotc211.org/2005/gmd}AbstractDQ_Element_Type
    
    # Element evaluationMethodType ({http://www.isotc211.org/2005/gmd}evaluationMethodType) inherited from {http://www.isotc211.org/2005/gmd}AbstractDQ_Element_Type
    
    # Element dateTime ({http://www.isotc211.org/2005/gmd}dateTime) inherited from {http://www.isotc211.org/2005/gmd}AbstractDQ_Element_Type
    
    # Element result ({http://www.isotc211.org/2005/gmd}result) inherited from {http://www.isotc211.org/2005/gmd}AbstractDQ_Element_Type
    
    # Element nameOfMeasure ({http://www.isotc211.org/2005/gmd}nameOfMeasure) inherited from {http://www.isotc211.org/2005/gmd}AbstractDQ_Element_Type
    
    # Element measureIdentification ({http://www.isotc211.org/2005/gmd}measureIdentification) inherited from {http://www.isotc211.org/2005/gmd}AbstractDQ_Element_Type
    
    # Attribute id inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type
    
    # Attribute uuid inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type

    _ElementMap = AbstractDQ_Completeness_Type._ElementMap.copy()
    _ElementMap.update({
        
    })
    _AttributeMap = AbstractDQ_Completeness_Type._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gmd.addCategoryObject('typeBinding', u'DQ_CompletenessOmission_Type', DQ_CompletenessOmission_Type)


# Complex type MemberName_Type with content type ELEMENT_ONLY
class MemberName_Type (AbstractObject_Type):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gco, u'MemberName_Type')
    # Base type is AbstractObject_Type
    
    # Element {http://www.isotc211.org/2005/gco}attributeType uses Python identifier attributeType
    __attributeType = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'attributeType'), 'attributeType', '__httpwww_isotc211_org2005gco_MemberName_Type_httpwww_isotc211_org2005gcoattributeType', False)

    
    attributeType = property(__attributeType.value, __attributeType.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gco}aName uses Python identifier aName
    __aName = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'aName'), 'aName', '__httpwww_isotc211_org2005gco_MemberName_Type_httpwww_isotc211_org2005gcoaName', False)

    
    aName = property(__aName.value, __aName.set, None, None)

    
    # Attribute id inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type
    
    # Attribute uuid inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type

    _ElementMap = AbstractObject_Type._ElementMap.copy()
    _ElementMap.update({
        __attributeType.name() : __attributeType,
        __aName.name() : __aName
    })
    _AttributeMap = AbstractObject_Type._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gco.addCategoryObject('typeBinding', u'MemberName_Type', MemberName_Type)


# Complex type MD_Dimension_PropertyType with content type ELEMENT_ONLY
class MD_Dimension_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_Dimension_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmd}MD_Dimension uses Python identifier MD_Dimension
    __MD_Dimension = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_Dimension'), 'MD_Dimension', '__httpwww_isotc211_org2005gmd_MD_Dimension_PropertyType_httpwww_isotc211_org2005gmdMD_Dimension', False)

    
    MD_Dimension = property(__MD_Dimension.value, __MD_Dimension.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_isotc211_org2005gmd_MD_Dimension_PropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_isotc211_org2005gmd_MD_Dimension_PropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_isotc211_org2005gmd_MD_Dimension_PropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmd_MD_Dimension_PropertyType_httpwww_isotc211_org2005gconilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_isotc211_org2005gmd_MD_Dimension_PropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute uuidref uses Python identifier uuidref
    __uuidref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uuidref'), 'uuidref', '__httpwww_isotc211_org2005gmd_MD_Dimension_PropertyType_uuidref', pyxb.binding.datatypes.string)
    
    uuidref = property(__uuidref.value, __uuidref.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_isotc211_org2005gmd_MD_Dimension_PropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_isotc211_org2005gmd_MD_Dimension_PropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_isotc211_org2005gmd_MD_Dimension_PropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")


    _ElementMap = {
        __MD_Dimension.name() : __MD_Dimension
    }
    _AttributeMap = {
        __type.name() : __type,
        __arcrole.name() : __arcrole,
        __role.name() : __role,
        __nilReason.name() : __nilReason,
        __title.name() : __title,
        __uuidref.name() : __uuidref,
        __show.name() : __show,
        __href.name() : __href,
        __actuate.name() : __actuate
    }
_Namespace_gmd.addCategoryObject('typeBinding', u'MD_Dimension_PropertyType', MD_Dimension_PropertyType)


# Complex type DirectionDescriptionType with content type ELEMENT_ONLY
class DirectionDescriptionType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'DirectionDescriptionType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.opengis.net/gml/3.2}compassPoint uses Python identifier compassPoint
    __compassPoint = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'compassPoint'), 'compassPoint', '__httpwww_opengis_netgml3_2_DirectionDescriptionType_httpwww_opengis_netgml3_2compassPoint', False)

    
    compassPoint = property(__compassPoint.value, __compassPoint.set, None, None)

    
    # Element {http://www.opengis.net/gml/3.2}keyword uses Python identifier keyword
    __keyword = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'keyword'), 'keyword', '__httpwww_opengis_netgml3_2_DirectionDescriptionType_httpwww_opengis_netgml3_2keyword', False)

    
    keyword = property(__keyword.value, __keyword.set, None, None)

    
    # Element {http://www.opengis.net/gml/3.2}reference uses Python identifier reference
    __reference = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'reference'), 'reference', '__httpwww_opengis_netgml3_2_DirectionDescriptionType_httpwww_opengis_netgml3_2reference', False)

    
    reference = property(__reference.value, __reference.set, None, None)

    
    # Element {http://www.opengis.net/gml/3.2}description uses Python identifier description
    __description = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'description'), 'description', '__httpwww_opengis_netgml3_2_DirectionDescriptionType_httpwww_opengis_netgml3_2description', False)

    
    description = property(__description.value, __description.set, None, None)


    _ElementMap = {
        __compassPoint.name() : __compassPoint,
        __keyword.name() : __keyword,
        __reference.name() : __reference,
        __description.name() : __description
    }
    _AttributeMap = {
        
    }
_Namespace_gml.addCategoryObject('typeBinding', u'DirectionDescriptionType', DirectionDescriptionType)


# Complex type MeasureOrNilReasonListType with content type SIMPLE
class MeasureOrNilReasonListType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = doubleOrNilReasonList
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'MeasureOrNilReasonListType')
    # Base type is doubleOrNilReasonList
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uom'), 'uom', '__httpwww_opengis_netgml3_2_MeasureOrNilReasonListType_uom', UomIdentifier, required=True)
    
    uom = property(__uom.value, __uom.set, None, None)


    _ElementMap = {
        
    }
    _AttributeMap = {
        __uom.name() : __uom
    }
_Namespace_gml.addCategoryObject('typeBinding', u'MeasureOrNilReasonListType', MeasureOrNilReasonListType)


# Complex type QuantityExtentType with content type SIMPLE
class QuantityExtentType (MeasureOrNilReasonListType):
    _TypeDefinition = STD_ANON_4
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'QuantityExtentType')
    # Base type is MeasureOrNilReasonListType
    
    # Attribute uom inherited from {http://www.opengis.net/gml/3.2}MeasureOrNilReasonListType

    _ElementMap = MeasureOrNilReasonListType._ElementMap.copy()
    _ElementMap.update({
        
    })
    _AttributeMap = MeasureOrNilReasonListType._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gml.addCategoryObject('typeBinding', u'QuantityExtentType', QuantityExtentType)


# Complex type CI_Date_Type with content type ELEMENT_ONLY
class CI_Date_Type (AbstractObject_Type):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'CI_Date_Type')
    # Base type is AbstractObject_Type
    
    # Element {http://www.isotc211.org/2005/gmd}dateType uses Python identifier dateType
    __dateType = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'dateType'), 'dateType', '__httpwww_isotc211_org2005gmd_CI_Date_Type_httpwww_isotc211_org2005gmddateType', False)

    
    dateType = property(__dateType.value, __dateType.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}date uses Python identifier date
    __date = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'date'), 'date', '__httpwww_isotc211_org2005gmd_CI_Date_Type_httpwww_isotc211_org2005gmddate', False)

    
    date = property(__date.value, __date.set, None, None)

    
    # Attribute id inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type
    
    # Attribute uuid inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type

    _ElementMap = AbstractObject_Type._ElementMap.copy()
    _ElementMap.update({
        __dateType.name() : __dateType,
        __date.name() : __date
    })
    _AttributeMap = AbstractObject_Type._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gmd.addCategoryObject('typeBinding', u'CI_Date_Type', CI_Date_Type)


# Complex type DS_ProductionSeries_Type with content type ELEMENT_ONLY
class DS_ProductionSeries_Type (DS_Series_Type):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'DS_ProductionSeries_Type')
    # Base type is DS_Series_Type
    
    # Element superset ({http://www.isotc211.org/2005/gmd}superset) inherited from {http://www.isotc211.org/2005/gmd}AbstractDS_Aggregate_Type
    
    # Element composedOf ({http://www.isotc211.org/2005/gmd}composedOf) inherited from {http://www.isotc211.org/2005/gmd}AbstractDS_Aggregate_Type
    
    # Element seriesMetadata ({http://www.isotc211.org/2005/gmd}seriesMetadata) inherited from {http://www.isotc211.org/2005/gmd}AbstractDS_Aggregate_Type
    
    # Element subset ({http://www.isotc211.org/2005/gmd}subset) inherited from {http://www.isotc211.org/2005/gmd}AbstractDS_Aggregate_Type
    
    # Attribute id inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type
    
    # Attribute uuid inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type

    _ElementMap = DS_Series_Type._ElementMap.copy()
    _ElementMap.update({
        
    })
    _AttributeMap = DS_Series_Type._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gmd.addCategoryObject('typeBinding', u'DS_ProductionSeries_Type', DS_ProductionSeries_Type)


# Complex type MappingRuleType with content type ELEMENT_ONLY
class MappingRuleType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'MappingRuleType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.opengis.net/gml/3.2}ruleDefinition uses Python identifier ruleDefinition
    __ruleDefinition = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'ruleDefinition'), 'ruleDefinition', '__httpwww_opengis_netgml3_2_MappingRuleType_httpwww_opengis_netgml3_2ruleDefinition', False)

    
    ruleDefinition = property(__ruleDefinition.value, __ruleDefinition.set, None, None)

    
    # Element {http://www.opengis.net/gml/3.2}ruleReference uses Python identifier ruleReference
    __ruleReference = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'ruleReference'), 'ruleReference', '__httpwww_opengis_netgml3_2_MappingRuleType_httpwww_opengis_netgml3_2ruleReference', False)

    
    ruleReference = property(__ruleReference.value, __ruleReference.set, None, None)


    _ElementMap = {
        __ruleDefinition.name() : __ruleDefinition,
        __ruleReference.name() : __ruleReference
    }
    _AttributeMap = {
        
    }
_Namespace_gml.addCategoryObject('typeBinding', u'MappingRuleType', MappingRuleType)


# Complex type VerticalCSPropertyType with content type ELEMENT_ONLY
class VerticalCSPropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'VerticalCSPropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.opengis.net/gml/3.2}VerticalCS uses Python identifier VerticalCS
    __VerticalCS = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'VerticalCS'), 'VerticalCS', '__httpwww_opengis_netgml3_2_VerticalCSPropertyType_httpwww_opengis_netgml3_2VerticalCS', False)

    
    VerticalCS = property(__VerticalCS.value, __VerticalCS.set, None, u"gml:VerticalCS is a one-dimensional coordinate system used to record the heights or depths of points. Such a coordinate system is usually dependent on the Earth's gravity field, perhaps loosely as when atmospheric pressure is the basis for the vertical coordinate system axis. A VerticalCS shall have one gml:axis property element.")

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_opengis_netgml3_2_VerticalCSPropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute {http://www.opengis.net/gml/3.2}remoteSchema uses Python identifier remoteSchema
    __remoteSchema = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'remoteSchema'), 'remoteSchema', '__httpwww_opengis_netgml3_2_VerticalCSPropertyType_httpwww_opengis_netgml3_2remoteSchema', pyxb.binding.datatypes.anyURI)
    
    remoteSchema = property(__remoteSchema.value, __remoteSchema.set, None, u'')

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_opengis_netgml3_2_VerticalCSPropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_opengis_netgml3_2_VerticalCSPropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_opengis_netgml3_2_VerticalCSPropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'nilReason'), 'nilReason', '__httpwww_opengis_netgml3_2_VerticalCSPropertyType_nilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_opengis_netgml3_2_VerticalCSPropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_opengis_netgml3_2_VerticalCSPropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_opengis_netgml3_2_VerticalCSPropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")


    _ElementMap = {
        __VerticalCS.name() : __VerticalCS
    }
    _AttributeMap = {
        __actuate.name() : __actuate,
        __remoteSchema.name() : __remoteSchema,
        __href.name() : __href,
        __type.name() : __type,
        __title.name() : __title,
        __nilReason.name() : __nilReason,
        __arcrole.name() : __arcrole,
        __role.name() : __role,
        __show.name() : __show
    }
_Namespace_gml.addCategoryObject('typeBinding', u'VerticalCSPropertyType', VerticalCSPropertyType)


# Complex type TimeClockPropertyType with content type ELEMENT_ONLY
class TimeClockPropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'TimeClockPropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.opengis.net/gml/3.2}TimeClock uses Python identifier TimeClock
    __TimeClock = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'TimeClock'), 'TimeClock', '__httpwww_opengis_netgml3_2_TimeClockPropertyType_httpwww_opengis_netgml3_2TimeClock', False)

    
    TimeClock = property(__TimeClock.value, __TimeClock.set, None, u'A clock provides a basis for defining temporal position within a day. A clock shall be used with a calendar in order to provide a complete description of a temporal position within a specific day.\ngml:TimeClock adds the following properties to those inherited from gml:TimeReferenceSystemType:\n-\tgml:referenceEvent is the name or description of an event, such as solar noon or sunrise, which fixes the position of the base scale of the clock.\n-\tgml:referenceTime specifies the time of day associated with the reference event expressed as a time of day in the given clock. The reference time is usually the origin of the clock scale. \n-\tgml:utcReference specifies the 24 hour local or UTC time that corresponds to the reference time.\n-\tgml:dateBasis contains or references the calendars that use this clock.')

    
    # Attribute owns uses Python identifier owns
    __owns = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'owns'), 'owns', '__httpwww_opengis_netgml3_2_TimeClockPropertyType_owns', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    owns = property(__owns.value, __owns.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_opengis_netgml3_2_TimeClockPropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_opengis_netgml3_2_TimeClockPropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_opengis_netgml3_2_TimeClockPropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.opengis.net/gml/3.2}remoteSchema uses Python identifier remoteSchema
    __remoteSchema = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'remoteSchema'), 'remoteSchema', '__httpwww_opengis_netgml3_2_TimeClockPropertyType_httpwww_opengis_netgml3_2remoteSchema', pyxb.binding.datatypes.anyURI)
    
    remoteSchema = property(__remoteSchema.value, __remoteSchema.set, None, u'')

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_opengis_netgml3_2_TimeClockPropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'nilReason'), 'nilReason', '__httpwww_opengis_netgml3_2_TimeClockPropertyType_nilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_opengis_netgml3_2_TimeClockPropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_opengis_netgml3_2_TimeClockPropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_opengis_netgml3_2_TimeClockPropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)


    _ElementMap = {
        __TimeClock.name() : __TimeClock
    }
    _AttributeMap = {
        __owns.name() : __owns,
        __arcrole.name() : __arcrole,
        __title.name() : __title,
        __role.name() : __role,
        __remoteSchema.name() : __remoteSchema,
        __show.name() : __show,
        __nilReason.name() : __nilReason,
        __actuate.name() : __actuate,
        __href.name() : __href,
        __type.name() : __type
    }
_Namespace_gml.addCategoryObject('typeBinding', u'TimeClockPropertyType', TimeClockPropertyType)


# Complex type SequenceRuleType with content type SIMPLE
class SequenceRuleType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = SequenceRuleEnumeration
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'SequenceRuleType')
    # Base type is SequenceRuleEnumeration
    
    # Attribute axisOrder uses Python identifier axisOrder
    __axisOrder = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'axisOrder'), 'axisOrder', '__httpwww_opengis_netgml3_2_SequenceRuleType_axisOrder', AxisDirectionList)
    
    axisOrder = property(__axisOrder.value, __axisOrder.set, None, None)

    
    # Attribute order uses Python identifier order
    __order = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'order'), 'order', '__httpwww_opengis_netgml3_2_SequenceRuleType_order', IncrementOrder)
    
    order = property(__order.value, __order.set, None, u'')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __axisOrder.name() : __axisOrder,
        __order.name() : __order
    }
_Namespace_gml.addCategoryObject('typeBinding', u'SequenceRuleType', SequenceRuleType)


# Complex type MetaDataPropertyType with content type ELEMENT_ONLY
class MetaDataPropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'MetaDataPropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.opengis.net/gml/3.2}AbstractMetaData uses Python identifier AbstractMetaData
    __AbstractMetaData = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractMetaData'), 'AbstractMetaData', '__httpwww_opengis_netgml3_2_MetaDataPropertyType_httpwww_opengis_netgml3_2AbstractMetaData', False)

    
    AbstractMetaData = property(__AbstractMetaData.value, __AbstractMetaData.set, None, u'')

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_opengis_netgml3_2_MetaDataPropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute about uses Python identifier about
    __about = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'about'), 'about', '__httpwww_opengis_netgml3_2_MetaDataPropertyType_about', pyxb.binding.datatypes.anyURI)
    
    about = property(__about.value, __about.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_opengis_netgml3_2_MetaDataPropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_opengis_netgml3_2_MetaDataPropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_opengis_netgml3_2_MetaDataPropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_opengis_netgml3_2_MetaDataPropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'nilReason'), 'nilReason', '__httpwww_opengis_netgml3_2_MetaDataPropertyType_nilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_opengis_netgml3_2_MetaDataPropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_opengis_netgml3_2_MetaDataPropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.opengis.net/gml/3.2}remoteSchema uses Python identifier remoteSchema
    __remoteSchema = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'remoteSchema'), 'remoteSchema', '__httpwww_opengis_netgml3_2_MetaDataPropertyType_httpwww_opengis_netgml3_2remoteSchema', pyxb.binding.datatypes.anyURI)
    
    remoteSchema = property(__remoteSchema.value, __remoteSchema.set, None, u'')


    _ElementMap = {
        __AbstractMetaData.name() : __AbstractMetaData
    }
    _AttributeMap = {
        __show.name() : __show,
        __about.name() : __about,
        __role.name() : __role,
        __actuate.name() : __actuate,
        __title.name() : __title,
        __href.name() : __href,
        __nilReason.name() : __nilReason,
        __type.name() : __type,
        __arcrole.name() : __arcrole,
        __remoteSchema.name() : __remoteSchema
    }
_Namespace_gml.addCategoryObject('typeBinding', u'MetaDataPropertyType', MetaDataPropertyType)


# Complex type EngineeringCRSType with content type ELEMENT_ONLY
class EngineeringCRSType (AbstractCRSType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'EngineeringCRSType')
    # Base type is AbstractCRSType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element {http://www.opengis.net/gml/3.2}sphericalCS uses Python identifier sphericalCS
    __sphericalCS = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'sphericalCS'), 'sphericalCS', '__httpwww_opengis_netgml3_2_EngineeringCRSType_httpwww_opengis_netgml3_2sphericalCS', False)

    
    sphericalCS = property(__sphericalCS.value, __sphericalCS.set, None, u'gml:sphericalCS is an association role to the spherical coordinate system used by this CRS.')

    
    # Element {http://www.opengis.net/gml/3.2}cylindricalCS uses Python identifier cylindricalCS
    __cylindricalCS = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'cylindricalCS'), 'cylindricalCS', '__httpwww_opengis_netgml3_2_EngineeringCRSType_httpwww_opengis_netgml3_2cylindricalCS', False)

    
    cylindricalCS = property(__cylindricalCS.value, __cylindricalCS.set, None, u'gml:cylindricalCS is an association role to the cylindrical coordinate system used by this CRS.')

    
    # Element {http://www.opengis.net/gml/3.2}affineCS uses Python identifier affineCS
    __affineCS = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'affineCS'), 'affineCS', '__httpwww_opengis_netgml3_2_EngineeringCRSType_httpwww_opengis_netgml3_2affineCS', False)

    
    affineCS = property(__affineCS.value, __affineCS.set, None, u'gml:affineCS is an association role to the affine coordinate system used by this CRS.')

    
    # Element {http://www.opengis.net/gml/3.2}linearCS uses Python identifier linearCS
    __linearCS = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'linearCS'), 'linearCS', '__httpwww_opengis_netgml3_2_EngineeringCRSType_httpwww_opengis_netgml3_2linearCS', False)

    
    linearCS = property(__linearCS.value, __linearCS.set, None, u'gml:linearCS is an association role to the linear coordinate system used by this CRS.')

    
    # Element {http://www.opengis.net/gml/3.2}userDefinedCS uses Python identifier userDefinedCS
    __userDefinedCS = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'userDefinedCS'), 'userDefinedCS', '__httpwww_opengis_netgml3_2_EngineeringCRSType_httpwww_opengis_netgml3_2userDefinedCS', False)

    
    userDefinedCS = property(__userDefinedCS.value, __userDefinedCS.set, None, u'gml:userDefinedCS is an association role to the user defined coordinate system used by this CRS.')

    
    # Element {http://www.opengis.net/gml/3.2}cartesianCS uses Python identifier cartesianCS
    __cartesianCS = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'cartesianCS'), 'cartesianCS', '__httpwww_opengis_netgml3_2_EngineeringCRSType_httpwww_opengis_netgml3_2cartesianCS', False)

    
    cartesianCS = property(__cartesianCS.value, __cartesianCS.set, None, u'gml:cartesianCS is an association role to the Cartesian coordinate system used by this CRS.')

    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element {http://www.opengis.net/gml/3.2}engineeringDatum uses Python identifier engineeringDatum
    __engineeringDatum = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'engineeringDatum'), 'engineeringDatum', '__httpwww_opengis_netgml3_2_EngineeringCRSType_httpwww_opengis_netgml3_2engineeringDatum', False)

    
    engineeringDatum = property(__engineeringDatum.value, __engineeringDatum.set, None, u'gml:engineeringDatum is an association role to the engineering datum used by this CRS.')

    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element domainOfValidity ({http://www.opengis.net/gml/3.2}domainOfValidity) inherited from {http://www.opengis.net/gml/3.2}AbstractCRSType
    
    # Element scope ({http://www.opengis.net/gml/3.2}scope) inherited from {http://www.opengis.net/gml/3.2}AbstractCRSType
    
    # Element {http://www.opengis.net/gml/3.2}coordinateSystem uses Python identifier coordinateSystem
    __coordinateSystem = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'coordinateSystem'), 'coordinateSystem', '__httpwww_opengis_netgml3_2_EngineeringCRSType_httpwww_opengis_netgml3_2coordinateSystem', False)

    
    coordinateSystem = property(__coordinateSystem.value, __coordinateSystem.set, None, u'An association role to the coordinate system used by this CRS.')

    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element remarks ({http://www.opengis.net/gml/3.2}remarks) inherited from {http://www.opengis.net/gml/3.2}DefinitionType
    
    # Element {http://www.opengis.net/gml/3.2}polarCS uses Python identifier polarCS
    __polarCS = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'polarCS'), 'polarCS', '__httpwww_opengis_netgml3_2_EngineeringCRSType_httpwww_opengis_netgml3_2polarCS', False)

    
    polarCS = property(__polarCS.value, __polarCS.set, None, u'gml:polarCS is an association role to the polar coordinate system used by this CRS.')

    
    # Attribute id_ inherited from {http://www.opengis.net/gml/3.2}DefinitionBaseType

    _ElementMap = AbstractCRSType._ElementMap.copy()
    _ElementMap.update({
        __sphericalCS.name() : __sphericalCS,
        __cylindricalCS.name() : __cylindricalCS,
        __affineCS.name() : __affineCS,
        __linearCS.name() : __linearCS,
        __userDefinedCS.name() : __userDefinedCS,
        __cartesianCS.name() : __cartesianCS,
        __engineeringDatum.name() : __engineeringDatum,
        __coordinateSystem.name() : __coordinateSystem,
        __polarCS.name() : __polarCS
    })
    _AttributeMap = AbstractCRSType._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gml.addCategoryObject('typeBinding', u'EngineeringCRSType', EngineeringCRSType)


# Complex type TopoSolidType with content type ELEMENT_ONLY
class TopoSolidType (AbstractTopoPrimitiveType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'TopoSolidType')
    # Base type is AbstractTopoPrimitiveType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element {http://www.opengis.net/gml/3.2}isolated uses Python identifier isolated
    __isolated = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'isolated'), 'isolated', '__httpwww_opengis_netgml3_2_TopoSolidType_httpwww_opengis_netgml3_2isolated', True)

    
    isolated = property(__isolated.value, __isolated.set, None, None)

    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element {http://www.opengis.net/gml/3.2}directedFace uses Python identifier directedFace
    __directedFace = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'directedFace'), 'directedFace', '__httpwww_opengis_netgml3_2_TopoSolidType_httpwww_opengis_netgml3_2directedFace', True)

    
    directedFace = property(__directedFace.value, __directedFace.set, None, u'The gml:directedFace property element describes the boundary of topology solids, in the coBoundary of topology edges and is used in the support of surface features via the gml:TopoSurface expression, see below. The orientation attribute of type gml:SignType expresses the sense in which the included face is used i.e. inward or outward with respect to the surface normal in any geometric realisation.')

    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element {http://www.opengis.net/gml/3.2}solidProperty uses Python identifier solidProperty
    __solidProperty = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'solidProperty'), 'solidProperty', '__httpwww_opengis_netgml3_2_TopoSolidType_httpwww_opengis_netgml3_2solidProperty', False)

    
    solidProperty = property(__solidProperty.value, __solidProperty.set, None, u'This property element either references a solid via the XLink-attributes or contains the solid element. solidProperty is the predefined property which may be used by GML Application Schemas whenever a GML feature has a property with a value that is substitutable for AbstractSolid.')

    
    # Attribute aggregationType uses Python identifier aggregationType
    __aggregationType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'aggregationType'), 'aggregationType', '__httpwww_opengis_netgml3_2_TopoSolidType_aggregationType', AggregationType)
    
    aggregationType = property(__aggregationType.value, __aggregationType.set, None, None)

    
    # Attribute universal uses Python identifier universal
    __universal = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'universal'), 'universal', '__httpwww_opengis_netgml3_2_TopoSolidType_universal', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    universal = property(__universal.value, __universal.set, None, u'A gml:TopoSolid must indicate whether it is a universal topo-solid or not, to ensure a lossless topology representation as defined by Kuijpers, et. al. (see OGC 05-102 Topology IPR). The optional universal attribute of type boolean is used to indicate this and the default is fault. NOTE The universal topo-solid is normally not part of any feature, and is used to represent the unbounded portion of the data set. Its interior boundary (it has no exterior boundary) would normally be considered the exterior boundary of the data set.')

    
    # Attribute id inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType

    _ElementMap = AbstractTopoPrimitiveType._ElementMap.copy()
    _ElementMap.update({
        __isolated.name() : __isolated,
        __directedFace.name() : __directedFace,
        __solidProperty.name() : __solidProperty
    })
    _AttributeMap = AbstractTopoPrimitiveType._AttributeMap.copy()
    _AttributeMap.update({
        __aggregationType.name() : __aggregationType,
        __universal.name() : __universal
    })
_Namespace_gml.addCategoryObject('typeBinding', u'TopoSolidType', TopoSolidType)


# Complex type DQ_TopologicalConsistency_Type with content type ELEMENT_ONLY
class DQ_TopologicalConsistency_Type (AbstractDQ_LogicalConsistency_Type):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'DQ_TopologicalConsistency_Type')
    # Base type is AbstractDQ_LogicalConsistency_Type
    
    # Element evaluationMethodDescription ({http://www.isotc211.org/2005/gmd}evaluationMethodDescription) inherited from {http://www.isotc211.org/2005/gmd}AbstractDQ_Element_Type
    
    # Element measureDescription ({http://www.isotc211.org/2005/gmd}measureDescription) inherited from {http://www.isotc211.org/2005/gmd}AbstractDQ_Element_Type
    
    # Element evaluationProcedure ({http://www.isotc211.org/2005/gmd}evaluationProcedure) inherited from {http://www.isotc211.org/2005/gmd}AbstractDQ_Element_Type
    
    # Element evaluationMethodType ({http://www.isotc211.org/2005/gmd}evaluationMethodType) inherited from {http://www.isotc211.org/2005/gmd}AbstractDQ_Element_Type
    
    # Element dateTime ({http://www.isotc211.org/2005/gmd}dateTime) inherited from {http://www.isotc211.org/2005/gmd}AbstractDQ_Element_Type
    
    # Element result ({http://www.isotc211.org/2005/gmd}result) inherited from {http://www.isotc211.org/2005/gmd}AbstractDQ_Element_Type
    
    # Element nameOfMeasure ({http://www.isotc211.org/2005/gmd}nameOfMeasure) inherited from {http://www.isotc211.org/2005/gmd}AbstractDQ_Element_Type
    
    # Element measureIdentification ({http://www.isotc211.org/2005/gmd}measureIdentification) inherited from {http://www.isotc211.org/2005/gmd}AbstractDQ_Element_Type
    
    # Attribute id inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type
    
    # Attribute uuid inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type

    _ElementMap = AbstractDQ_LogicalConsistency_Type._ElementMap.copy()
    _ElementMap.update({
        
    })
    _AttributeMap = AbstractDQ_LogicalConsistency_Type._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gmd.addCategoryObject('typeBinding', u'DQ_TopologicalConsistency_Type', DQ_TopologicalConsistency_Type)


# Complex type UnitOfMeasure_PropertyType with content type ELEMENT_ONLY
class UnitOfMeasure_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gco, u'UnitOfMeasure_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.opengis.net/gml/3.2}UnitDefinition uses Python identifier UnitDefinition
    __UnitDefinition = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'UnitDefinition'), 'UnitDefinition', '__httpwww_isotc211_org2005gco_UnitOfMeasure_PropertyType_httpwww_opengis_netgml3_2UnitDefinition', False)

    
    UnitDefinition = property(__UnitDefinition.value, __UnitDefinition.set, None, u'A gml:UnitDefinition is a general definition of a unit of measure. This generic element is used only for units for which no relationship with other units or units systems is known.\nThe content model of gml:UnitDefinition adds three additional properties to gml:Definition, gml:quantityType, gml:quantityTypeReference and gml:catalogSymbol.  \nThe gml:catalogSymbol property optionally gives the short symbol used for this unit. This element is usually used when the relationship of this unit to other units or units systems is unknown.')

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gco_UnitOfMeasure_PropertyType_httpwww_isotc211_org2005gconilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_isotc211_org2005gco_UnitOfMeasure_PropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_isotc211_org2005gco_UnitOfMeasure_PropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_isotc211_org2005gco_UnitOfMeasure_PropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute uuidref uses Python identifier uuidref
    __uuidref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uuidref'), 'uuidref', '__httpwww_isotc211_org2005gco_UnitOfMeasure_PropertyType_uuidref', pyxb.binding.datatypes.string)
    
    uuidref = property(__uuidref.value, __uuidref.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_isotc211_org2005gco_UnitOfMeasure_PropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_isotc211_org2005gco_UnitOfMeasure_PropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_isotc211_org2005gco_UnitOfMeasure_PropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_isotc211_org2005gco_UnitOfMeasure_PropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")


    _ElementMap = {
        __UnitDefinition.name() : __UnitDefinition
    }
    _AttributeMap = {
        __nilReason.name() : __nilReason,
        __type.name() : __type,
        __role.name() : __role,
        __arcrole.name() : __arcrole,
        __uuidref.name() : __uuidref,
        __title.name() : __title,
        __show.name() : __show,
        __href.name() : __href,
        __actuate.name() : __actuate
    }
_Namespace_gco.addCategoryObject('typeBinding', u'UnitOfMeasure_PropertyType', UnitOfMeasure_PropertyType)


# Complex type ConventionalUnitType with content type ELEMENT_ONLY
class ConventionalUnitType (UnitDefinitionType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'ConventionalUnitType')
    # Base type is UnitDefinitionType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element catalogSymbol ({http://www.opengis.net/gml/3.2}catalogSymbol) inherited from {http://www.opengis.net/gml/3.2}UnitDefinitionType
    
    # Element {http://www.opengis.net/gml/3.2}roughConversionToPreferredUnit uses Python identifier roughConversionToPreferredUnit
    __roughConversionToPreferredUnit = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'roughConversionToPreferredUnit'), 'roughConversionToPreferredUnit', '__httpwww_opengis_netgml3_2_ConventionalUnitType_httpwww_opengis_netgml3_2roughConversionToPreferredUnit', False)

    
    roughConversionToPreferredUnit = property(__roughConversionToPreferredUnit.value, __roughConversionToPreferredUnit.set, None, u'The elements gml:conversionToPreferredUnit and gml:roughConversionToPreferredUnit represent parameters used to convert conventional units to preferred units for this physical quantity type.  A preferred unit is either a Base Unit or a Derived Unit that is selected for all values of one physical quantity type.')

    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element {http://www.opengis.net/gml/3.2}conversionToPreferredUnit uses Python identifier conversionToPreferredUnit
    __conversionToPreferredUnit = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'conversionToPreferredUnit'), 'conversionToPreferredUnit', '__httpwww_opengis_netgml3_2_ConventionalUnitType_httpwww_opengis_netgml3_2conversionToPreferredUnit', False)

    
    conversionToPreferredUnit = property(__conversionToPreferredUnit.value, __conversionToPreferredUnit.set, None, u'The elements gml:conversionToPreferredUnit and gml:roughConversionToPreferredUnit represent parameters used to convert conventional units to preferred units for this physical quantity type.  A preferred unit is either a Base Unit or a Derived Unit that is selected for all values of one physical quantity type.')

    
    # Element {http://www.opengis.net/gml/3.2}derivationUnitTerm uses Python identifier derivationUnitTerm
    __derivationUnitTerm = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'derivationUnitTerm'), 'derivationUnitTerm', '__httpwww_opengis_netgml3_2_ConventionalUnitType_httpwww_opengis_netgml3_2derivationUnitTerm', True)

    
    derivationUnitTerm = property(__derivationUnitTerm.value, __derivationUnitTerm.set, None, u'A set of gml:derivationUnitTerm elements describes a derived unit of measure.  Each element carries an integer exponent.  The terms are combined by raising each referenced unit to the power of its exponent and forming the product.\nThis unit term references another unit of measure (uom) and provides an integer exponent applied to that unit in defining the compound unit. The exponent may be positive or negative, but not zero.')

    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element quantityType ({http://www.opengis.net/gml/3.2}quantityType) inherited from {http://www.opengis.net/gml/3.2}UnitDefinitionType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element quantityTypeReference ({http://www.opengis.net/gml/3.2}quantityTypeReference) inherited from {http://www.opengis.net/gml/3.2}UnitDefinitionType
    
    # Element remarks ({http://www.opengis.net/gml/3.2}remarks) inherited from {http://www.opengis.net/gml/3.2}DefinitionType
    
    # Attribute id_ inherited from {http://www.opengis.net/gml/3.2}DefinitionBaseType

    _ElementMap = UnitDefinitionType._ElementMap.copy()
    _ElementMap.update({
        __roughConversionToPreferredUnit.name() : __roughConversionToPreferredUnit,
        __conversionToPreferredUnit.name() : __conversionToPreferredUnit,
        __derivationUnitTerm.name() : __derivationUnitTerm
    })
    _AttributeMap = UnitDefinitionType._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gml.addCategoryObject('typeBinding', u'ConventionalUnitType', ConventionalUnitType)


# Complex type DQ_AbsoluteExternalPositionalAccuracy_PropertyType with content type ELEMENT_ONLY
class DQ_AbsoluteExternalPositionalAccuracy_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'DQ_AbsoluteExternalPositionalAccuracy_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmd}DQ_AbsoluteExternalPositionalAccuracy uses Python identifier DQ_AbsoluteExternalPositionalAccuracy
    __DQ_AbsoluteExternalPositionalAccuracy = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'DQ_AbsoluteExternalPositionalAccuracy'), 'DQ_AbsoluteExternalPositionalAccuracy', '__httpwww_isotc211_org2005gmd_DQ_AbsoluteExternalPositionalAccuracy_PropertyType_httpwww_isotc211_org2005gmdDQ_AbsoluteExternalPositionalAccuracy', False)

    
    DQ_AbsoluteExternalPositionalAccuracy = property(__DQ_AbsoluteExternalPositionalAccuracy.value, __DQ_AbsoluteExternalPositionalAccuracy.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_isotc211_org2005gmd_DQ_AbsoluteExternalPositionalAccuracy_PropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_isotc211_org2005gmd_DQ_AbsoluteExternalPositionalAccuracy_PropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_isotc211_org2005gmd_DQ_AbsoluteExternalPositionalAccuracy_PropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_isotc211_org2005gmd_DQ_AbsoluteExternalPositionalAccuracy_PropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_isotc211_org2005gmd_DQ_AbsoluteExternalPositionalAccuracy_PropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute uuidref uses Python identifier uuidref
    __uuidref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uuidref'), 'uuidref', '__httpwww_isotc211_org2005gmd_DQ_AbsoluteExternalPositionalAccuracy_PropertyType_uuidref', pyxb.binding.datatypes.string)
    
    uuidref = property(__uuidref.value, __uuidref.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmd_DQ_AbsoluteExternalPositionalAccuracy_PropertyType_httpwww_isotc211_org2005gconilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_isotc211_org2005gmd_DQ_AbsoluteExternalPositionalAccuracy_PropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_isotc211_org2005gmd_DQ_AbsoluteExternalPositionalAccuracy_PropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)


    _ElementMap = {
        __DQ_AbsoluteExternalPositionalAccuracy.name() : __DQ_AbsoluteExternalPositionalAccuracy
    }
    _AttributeMap = {
        __actuate.name() : __actuate,
        __type.name() : __type,
        __role.name() : __role,
        __title.name() : __title,
        __arcrole.name() : __arcrole,
        __uuidref.name() : __uuidref,
        __nilReason.name() : __nilReason,
        __show.name() : __show,
        __href.name() : __href
    }
_Namespace_gmd.addCategoryObject('typeBinding', u'DQ_AbsoluteExternalPositionalAccuracy_PropertyType', DQ_AbsoluteExternalPositionalAccuracy_PropertyType)


# Complex type MultiSolidPropertyType with content type ELEMENT_ONLY
class MultiSolidPropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'MultiSolidPropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.opengis.net/gml/3.2}MultiSolid uses Python identifier MultiSolid
    __MultiSolid = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'MultiSolid'), 'MultiSolid', '__httpwww_opengis_netgml3_2_MultiSolidPropertyType_httpwww_opengis_netgml3_2MultiSolid', False)

    
    MultiSolid = property(__MultiSolid.value, __MultiSolid.set, None, u'A gml:MultiSolid is defined by one or more gml:AbstractSolids.\nThe members of the geometric aggregate may be specified either using the "standard" property (gml:solidMember) or the array property (gml:solidMembers). It is also valid to use both the "standard" and the array properties in the same collection.')

    
    # Attribute owns uses Python identifier owns
    __owns = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'owns'), 'owns', '__httpwww_opengis_netgml3_2_MultiSolidPropertyType_owns', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    owns = property(__owns.value, __owns.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_opengis_netgml3_2_MultiSolidPropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_opengis_netgml3_2_MultiSolidPropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_opengis_netgml3_2_MultiSolidPropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_opengis_netgml3_2_MultiSolidPropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_opengis_netgml3_2_MultiSolidPropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'nilReason'), 'nilReason', '__httpwww_opengis_netgml3_2_MultiSolidPropertyType_nilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_opengis_netgml3_2_MultiSolidPropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.opengis.net/gml/3.2}remoteSchema uses Python identifier remoteSchema
    __remoteSchema = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'remoteSchema'), 'remoteSchema', '__httpwww_opengis_netgml3_2_MultiSolidPropertyType_httpwww_opengis_netgml3_2remoteSchema', pyxb.binding.datatypes.anyURI)
    
    remoteSchema = property(__remoteSchema.value, __remoteSchema.set, None, u'')

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_opengis_netgml3_2_MultiSolidPropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")


    _ElementMap = {
        __MultiSolid.name() : __MultiSolid
    }
    _AttributeMap = {
        __owns.name() : __owns,
        __role.name() : __role,
        __actuate.name() : __actuate,
        __title.name() : __title,
        __href.name() : __href,
        __type.name() : __type,
        __nilReason.name() : __nilReason,
        __arcrole.name() : __arcrole,
        __remoteSchema.name() : __remoteSchema,
        __show.name() : __show
    }
_Namespace_gml.addCategoryObject('typeBinding', u'MultiSolidPropertyType', MultiSolidPropertyType)


# Complex type DMSAngleType with content type ELEMENT_ONLY
class DMSAngleType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'DMSAngleType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.opengis.net/gml/3.2}decimalMinutes uses Python identifier decimalMinutes
    __decimalMinutes = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'decimalMinutes'), 'decimalMinutes', '__httpwww_opengis_netgml3_2_DMSAngleType_httpwww_opengis_netgml3_2decimalMinutes', False)

    
    decimalMinutes = property(__decimalMinutes.value, __decimalMinutes.set, None, u'')

    
    # Element {http://www.opengis.net/gml/3.2}degrees uses Python identifier degrees
    __degrees = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'degrees'), 'degrees', '__httpwww_opengis_netgml3_2_DMSAngleType_httpwww_opengis_netgml3_2degrees', False)

    
    degrees = property(__degrees.value, __degrees.set, None, u'')

    
    # Element {http://www.opengis.net/gml/3.2}seconds uses Python identifier seconds
    __seconds = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'seconds'), 'seconds', '__httpwww_opengis_netgml3_2_DMSAngleType_httpwww_opengis_netgml3_2seconds', False)

    
    seconds = property(__seconds.value, __seconds.set, None, u'')

    
    # Element {http://www.opengis.net/gml/3.2}minutes uses Python identifier minutes
    __minutes = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'minutes'), 'minutes', '__httpwww_opengis_netgml3_2_DMSAngleType_httpwww_opengis_netgml3_2minutes', False)

    
    minutes = property(__minutes.value, __minutes.set, None, u'')


    _ElementMap = {
        __decimalMinutes.name() : __decimalMinutes,
        __degrees.name() : __degrees,
        __seconds.name() : __seconds,
        __minutes.name() : __minutes
    }
    _AttributeMap = {
        
    }
_Namespace_gml.addCategoryObject('typeBinding', u'DMSAngleType', DMSAngleType)


# Complex type ProcedurePropertyType with content type ELEMENT_ONLY
class ProcedurePropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'ProcedurePropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.opengis.net/gml/3.2}AbstractFeature uses Python identifier AbstractFeature
    __AbstractFeature = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractFeature'), 'AbstractFeature', '__httpwww_opengis_netgml3_2_ProcedurePropertyType_httpwww_opengis_netgml3_2AbstractFeature', False)

    
    AbstractFeature = property(__AbstractFeature.value, __AbstractFeature.set, None, u'This abstract element serves as the head of a substitution group which may contain any elements whose content model is derived from gml:AbstractFeatureType.  This may be used as a variable in the construction of content models.  \ngml:AbstractFeature may be thought of as "anything that is a GML feature" and may be used to define variables or templates in which the value of a GML property is "any feature". This occurs in particular in a GML feature collection where the feature member properties contain one or multiple copies of gml:AbstractFeature respectively.')

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_opengis_netgml3_2_ProcedurePropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_opengis_netgml3_2_ProcedurePropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute owns uses Python identifier owns
    __owns = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'owns'), 'owns', '__httpwww_opengis_netgml3_2_ProcedurePropertyType_owns', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    owns = property(__owns.value, __owns.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_opengis_netgml3_2_ProcedurePropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'nilReason'), 'nilReason', '__httpwww_opengis_netgml3_2_ProcedurePropertyType_nilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_opengis_netgml3_2_ProcedurePropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_opengis_netgml3_2_ProcedurePropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.opengis.net/gml/3.2}remoteSchema uses Python identifier remoteSchema
    __remoteSchema = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'remoteSchema'), 'remoteSchema', '__httpwww_opengis_netgml3_2_ProcedurePropertyType_httpwww_opengis_netgml3_2remoteSchema', pyxb.binding.datatypes.anyURI)
    
    remoteSchema = property(__remoteSchema.value, __remoteSchema.set, None, u'')

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_opengis_netgml3_2_ProcedurePropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_opengis_netgml3_2_ProcedurePropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)


    _ElementMap = {
        __AbstractFeature.name() : __AbstractFeature
    }
    _AttributeMap = {
        __role.name() : __role,
        __show.name() : __show,
        __owns.name() : __owns,
        __actuate.name() : __actuate,
        __nilReason.name() : __nilReason,
        __href.name() : __href,
        __type.name() : __type,
        __remoteSchema.name() : __remoteSchema,
        __arcrole.name() : __arcrole,
        __title.name() : __title
    }
_Namespace_gml.addCategoryObject('typeBinding', u'ProcedurePropertyType', ProcedurePropertyType)


# Complex type MD_VectorSpatialRepresentation_Type with content type ELEMENT_ONLY
class MD_VectorSpatialRepresentation_Type (AbstractMD_SpatialRepresentation_Type):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_VectorSpatialRepresentation_Type')
    # Base type is AbstractMD_SpatialRepresentation_Type
    
    # Element {http://www.isotc211.org/2005/gmd}geometricObjects uses Python identifier geometricObjects
    __geometricObjects = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'geometricObjects'), 'geometricObjects', '__httpwww_isotc211_org2005gmd_MD_VectorSpatialRepresentation_Type_httpwww_isotc211_org2005gmdgeometricObjects', True)

    
    geometricObjects = property(__geometricObjects.value, __geometricObjects.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}topologyLevel uses Python identifier topologyLevel
    __topologyLevel = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'topologyLevel'), 'topologyLevel', '__httpwww_isotc211_org2005gmd_MD_VectorSpatialRepresentation_Type_httpwww_isotc211_org2005gmdtopologyLevel', False)

    
    topologyLevel = property(__topologyLevel.value, __topologyLevel.set, None, None)

    
    # Attribute id inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type
    
    # Attribute uuid inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type

    _ElementMap = AbstractMD_SpatialRepresentation_Type._ElementMap.copy()
    _ElementMap.update({
        __geometricObjects.name() : __geometricObjects,
        __topologyLevel.name() : __topologyLevel
    })
    _AttributeMap = AbstractMD_SpatialRepresentation_Type._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gmd.addCategoryObject('typeBinding', u'MD_VectorSpatialRepresentation_Type', MD_VectorSpatialRepresentation_Type)


# Complex type TinType with content type ELEMENT_ONLY
class TinType (SurfaceType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'TinType')
    # Base type is SurfaceType
    
    # Element {http://www.opengis.net/gml/3.2}controlPoint uses Python identifier controlPoint
    __controlPoint = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'controlPoint'), 'controlPoint', '__httpwww_opengis_netgml3_2_TinType_httpwww_opengis_netgml3_2controlPoint', False)

    
    controlPoint = property(__controlPoint.value, __controlPoint.set, None, None)

    
    # Element {http://www.opengis.net/gml/3.2}stopLines uses Python identifier stopLines
    __stopLines = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'stopLines'), 'stopLines', '__httpwww_opengis_netgml3_2_TinType_httpwww_opengis_netgml3_2stopLines', True)

    
    stopLines = property(__stopLines.value, __stopLines.set, None, None)

    
    # Element {http://www.opengis.net/gml/3.2}breakLines uses Python identifier breakLines
    __breakLines = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'breakLines'), 'breakLines', '__httpwww_opengis_netgml3_2_TinType_httpwww_opengis_netgml3_2breakLines', True)

    
    breakLines = property(__breakLines.value, __breakLines.set, None, None)

    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element {http://www.opengis.net/gml/3.2}maxLength uses Python identifier maxLength
    __maxLength = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'maxLength'), 'maxLength', '__httpwww_opengis_netgml3_2_TinType_httpwww_opengis_netgml3_2maxLength', False)

    
    maxLength = property(__maxLength.value, __maxLength.set, None, None)

    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element patches ({http://www.opengis.net/gml/3.2}patches) inherited from {http://www.opengis.net/gml/3.2}SurfaceType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Attribute srsName inherited from {http://www.opengis.net/gml/3.2}AbstractGeometryType
    
    # Attribute axisLabels inherited from {http://www.opengis.net/gml/3.2}AbstractGeometryType
    
    # Attribute id inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Attribute uomLabels inherited from {http://www.opengis.net/gml/3.2}AbstractGeometryType
    
    # Attribute srsDimension inherited from {http://www.opengis.net/gml/3.2}AbstractGeometryType

    _ElementMap = SurfaceType._ElementMap.copy()
    _ElementMap.update({
        __controlPoint.name() : __controlPoint,
        __stopLines.name() : __stopLines,
        __breakLines.name() : __breakLines,
        __maxLength.name() : __maxLength
    })
    _AttributeMap = SurfaceType._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gml.addCategoryObject('typeBinding', u'TinType', TinType)


# Complex type ScaleType with content type SIMPLE
class ScaleType (MeasureType):
    _TypeDefinition = pyxb.binding.datatypes.double
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'ScaleType')
    # Base type is MeasureType
    
    # Attribute uom inherited from {http://www.opengis.net/gml/3.2}MeasureType

    _ElementMap = MeasureType._ElementMap.copy()
    _ElementMap.update({
        
    })
    _AttributeMap = MeasureType._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gml.addCategoryObject('typeBinding', u'ScaleType', ScaleType)


# Complex type SC_CRS_PropertyType with content type ELEMENT_ONLY
class SC_CRS_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gsr, u'SC_CRS_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.opengis.net/gml/3.2}AbstractCRS uses Python identifier AbstractCRS
    __AbstractCRS = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractCRS'), 'AbstractCRS', '__httpwww_isotc211_org2005gsr_SC_CRS_PropertyType_httpwww_opengis_netgml3_2AbstractCRS', False)

    
    AbstractCRS = property(__AbstractCRS.value, __AbstractCRS.set, None, u'gml:AbstractCRS specifies a coordinate reference system which is usually single but may be compound. This abstract complex type shall not be used, extended, or restricted, in a GML Application Schema, to define a concrete subtype with a meaning equivalent to a concrete subtype specified in this document.')

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_isotc211_org2005gsr_SC_CRS_PropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_isotc211_org2005gsr_SC_CRS_PropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_isotc211_org2005gsr_SC_CRS_PropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gsr_SC_CRS_PropertyType_httpwww_isotc211_org2005gconilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_isotc211_org2005gsr_SC_CRS_PropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_isotc211_org2005gsr_SC_CRS_PropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute uuidref uses Python identifier uuidref
    __uuidref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uuidref'), 'uuidref', '__httpwww_isotc211_org2005gsr_SC_CRS_PropertyType_uuidref', pyxb.binding.datatypes.string)
    
    uuidref = property(__uuidref.value, __uuidref.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_isotc211_org2005gsr_SC_CRS_PropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_isotc211_org2005gsr_SC_CRS_PropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")


    _ElementMap = {
        __AbstractCRS.name() : __AbstractCRS
    }
    _AttributeMap = {
        __type.name() : __type,
        __arcrole.name() : __arcrole,
        __role.name() : __role,
        __nilReason.name() : __nilReason,
        __title.name() : __title,
        __show.name() : __show,
        __uuidref.name() : __uuidref,
        __href.name() : __href,
        __actuate.name() : __actuate
    }
_Namespace_gsr.addCategoryObject('typeBinding', u'SC_CRS_PropertyType', SC_CRS_PropertyType)


# Complex type SpeedType with content type SIMPLE
class SpeedType (MeasureType):
    _TypeDefinition = pyxb.binding.datatypes.double
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'SpeedType')
    # Base type is MeasureType
    
    # Attribute uom inherited from {http://www.opengis.net/gml/3.2}MeasureType

    _ElementMap = MeasureType._ElementMap.copy()
    _ElementMap.update({
        
    })
    _AttributeMap = MeasureType._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gml.addCategoryObject('typeBinding', u'SpeedType', SpeedType)


# Complex type PointArrayPropertyType with content type ELEMENT_ONLY
class PointArrayPropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'PointArrayPropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.opengis.net/gml/3.2}Point uses Python identifier Point
    __Point = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'Point'), 'Point', '__httpwww_opengis_netgml3_2_PointArrayPropertyType_httpwww_opengis_netgml3_2Point', True)

    
    Point = property(__Point.value, __Point.set, None, u'A Point is defined by a single coordinate tuple. The direct position of a point is specified by the pos element which is of type DirectPositionType.')

    
    # Attribute owns uses Python identifier owns
    __owns = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'owns'), 'owns', '__httpwww_opengis_netgml3_2_PointArrayPropertyType_owns', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    owns = property(__owns.value, __owns.set, None, None)


    _ElementMap = {
        __Point.name() : __Point
    }
    _AttributeMap = {
        __owns.name() : __owns
    }
_Namespace_gml.addCategoryObject('typeBinding', u'PointArrayPropertyType', PointArrayPropertyType)


# Complex type DynamicFeatureCollectionType with content type ELEMENT_ONLY
class DynamicFeatureCollectionType (DynamicFeatureType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'DynamicFeatureCollectionType')
    # Base type is DynamicFeatureType
    
    # Element validTime ({http://www.opengis.net/gml/3.2}validTime) inherited from {http://www.opengis.net/gml/3.2}DynamicFeatureType
    
    # Element history ({http://www.opengis.net/gml/3.2}history) inherited from {http://www.opengis.net/gml/3.2}DynamicFeatureType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element {http://www.opengis.net/gml/3.2}dynamicMembers uses Python identifier dynamicMembers
    __dynamicMembers = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'dynamicMembers'), 'dynamicMembers', '__httpwww_opengis_netgml3_2_DynamicFeatureCollectionType_httpwww_opengis_netgml3_2dynamicMembers', False)

    
    dynamicMembers = property(__dynamicMembers.value, __dynamicMembers.set, None, None)

    
    # Element dataSource ({http://www.opengis.net/gml/3.2}dataSource) inherited from {http://www.opengis.net/gml/3.2}DynamicFeatureType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element dataSourceReference ({http://www.opengis.net/gml/3.2}dataSourceReference) inherited from {http://www.opengis.net/gml/3.2}DynamicFeatureType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element location ({http://www.opengis.net/gml/3.2}location) inherited from {http://www.opengis.net/gml/3.2}AbstractFeatureType
    
    # Element boundedBy ({http://www.opengis.net/gml/3.2}boundedBy) inherited from {http://www.opengis.net/gml/3.2}AbstractFeatureType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Attribute id inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType

    _ElementMap = DynamicFeatureType._ElementMap.copy()
    _ElementMap.update({
        __dynamicMembers.name() : __dynamicMembers
    })
    _AttributeMap = DynamicFeatureType._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gml.addCategoryObject('typeBinding', u'DynamicFeatureCollectionType', DynamicFeatureCollectionType)


# Complex type MD_PortrayalCatalogueReference_Type with content type ELEMENT_ONLY
class MD_PortrayalCatalogueReference_Type (AbstractObject_Type):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_PortrayalCatalogueReference_Type')
    # Base type is AbstractObject_Type
    
    # Element {http://www.isotc211.org/2005/gmd}portrayalCatalogueCitation uses Python identifier portrayalCatalogueCitation
    __portrayalCatalogueCitation = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'portrayalCatalogueCitation'), 'portrayalCatalogueCitation', '__httpwww_isotc211_org2005gmd_MD_PortrayalCatalogueReference_Type_httpwww_isotc211_org2005gmdportrayalCatalogueCitation', True)

    
    portrayalCatalogueCitation = property(__portrayalCatalogueCitation.value, __portrayalCatalogueCitation.set, None, None)

    
    # Attribute id inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type
    
    # Attribute uuid inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type

    _ElementMap = AbstractObject_Type._ElementMap.copy()
    _ElementMap.update({
        __portrayalCatalogueCitation.name() : __portrayalCatalogueCitation
    })
    _AttributeMap = AbstractObject_Type._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gmd.addCategoryObject('typeBinding', u'MD_PortrayalCatalogueReference_Type', MD_PortrayalCatalogueReference_Type)


# Complex type MD_Distributor_Type with content type ELEMENT_ONLY
class MD_Distributor_Type (AbstractObject_Type):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_Distributor_Type')
    # Base type is AbstractObject_Type
    
    # Element {http://www.isotc211.org/2005/gmd}distributorTransferOptions uses Python identifier distributorTransferOptions
    __distributorTransferOptions = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'distributorTransferOptions'), 'distributorTransferOptions', '__httpwww_isotc211_org2005gmd_MD_Distributor_Type_httpwww_isotc211_org2005gmddistributorTransferOptions', True)

    
    distributorTransferOptions = property(__distributorTransferOptions.value, __distributorTransferOptions.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}distributorContact uses Python identifier distributorContact
    __distributorContact = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'distributorContact'), 'distributorContact', '__httpwww_isotc211_org2005gmd_MD_Distributor_Type_httpwww_isotc211_org2005gmddistributorContact', False)

    
    distributorContact = property(__distributorContact.value, __distributorContact.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}distributionOrderProcess uses Python identifier distributionOrderProcess
    __distributionOrderProcess = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'distributionOrderProcess'), 'distributionOrderProcess', '__httpwww_isotc211_org2005gmd_MD_Distributor_Type_httpwww_isotc211_org2005gmddistributionOrderProcess', True)

    
    distributionOrderProcess = property(__distributionOrderProcess.value, __distributionOrderProcess.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}distributorFormat uses Python identifier distributorFormat
    __distributorFormat = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'distributorFormat'), 'distributorFormat', '__httpwww_isotc211_org2005gmd_MD_Distributor_Type_httpwww_isotc211_org2005gmddistributorFormat', True)

    
    distributorFormat = property(__distributorFormat.value, __distributorFormat.set, None, None)

    
    # Attribute id inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type
    
    # Attribute uuid inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type

    _ElementMap = AbstractObject_Type._ElementMap.copy()
    _ElementMap.update({
        __distributorTransferOptions.name() : __distributorTransferOptions,
        __distributorContact.name() : __distributorContact,
        __distributionOrderProcess.name() : __distributionOrderProcess,
        __distributorFormat.name() : __distributorFormat
    })
    _AttributeMap = AbstractObject_Type._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gmd.addCategoryObject('typeBinding', u'MD_Distributor_Type', MD_Distributor_Type)


# Complex type ShellType with content type ELEMENT_ONLY
class ShellType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'ShellType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.opengis.net/gml/3.2}surfaceMember uses Python identifier surfaceMember
    __surfaceMember = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'surfaceMember'), 'surfaceMember', '__httpwww_opengis_netgml3_2_ShellType_httpwww_opengis_netgml3_2surfaceMember', True)

    
    surfaceMember = property(__surfaceMember.value, __surfaceMember.set, None, u'This property element either references a surface via the XLink-attributes or contains the surface element. A surface element is any element, which is substitutable for gml:AbstractSurface.')

    
    # Attribute aggregationType uses Python identifier aggregationType
    __aggregationType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'aggregationType'), 'aggregationType', '__httpwww_opengis_netgml3_2_ShellType_aggregationType', AggregationType)
    
    aggregationType = property(__aggregationType.value, __aggregationType.set, None, None)


    _ElementMap = {
        __surfaceMember.name() : __surfaceMember
    }
    _AttributeMap = {
        __aggregationType.name() : __aggregationType
    }
_Namespace_gml.addCategoryObject('typeBinding', u'ShellType', ShellType)


# Complex type MD_Keywords_Type with content type ELEMENT_ONLY
class MD_Keywords_Type (AbstractObject_Type):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_Keywords_Type')
    # Base type is AbstractObject_Type
    
    # Element {http://www.isotc211.org/2005/gmd}thesaurusName uses Python identifier thesaurusName
    __thesaurusName = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'thesaurusName'), 'thesaurusName', '__httpwww_isotc211_org2005gmd_MD_Keywords_Type_httpwww_isotc211_org2005gmdthesaurusName', False)

    
    thesaurusName = property(__thesaurusName.value, __thesaurusName.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}keyword uses Python identifier keyword
    __keyword = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'keyword'), 'keyword', '__httpwww_isotc211_org2005gmd_MD_Keywords_Type_httpwww_isotc211_org2005gmdkeyword', True)

    
    keyword = property(__keyword.value, __keyword.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}type uses Python identifier type
    __type = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'type'), 'type', '__httpwww_isotc211_org2005gmd_MD_Keywords_Type_httpwww_isotc211_org2005gmdtype', False)

    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute id inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type
    
    # Attribute uuid inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type

    _ElementMap = AbstractObject_Type._ElementMap.copy()
    _ElementMap.update({
        __thesaurusName.name() : __thesaurusName,
        __keyword.name() : __keyword,
        __type.name() : __type
    })
    _AttributeMap = AbstractObject_Type._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gmd.addCategoryObject('typeBinding', u'MD_Keywords_Type', MD_Keywords_Type)


# Complex type MD_ImagingConditionCode_PropertyType with content type ELEMENT_ONLY
class MD_ImagingConditionCode_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_ImagingConditionCode_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmd}MD_ImagingConditionCode uses Python identifier MD_ImagingConditionCode
    __MD_ImagingConditionCode = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_ImagingConditionCode'), 'MD_ImagingConditionCode', '__httpwww_isotc211_org2005gmd_MD_ImagingConditionCode_PropertyType_httpwww_isotc211_org2005gmdMD_ImagingConditionCode', False)

    
    MD_ImagingConditionCode = property(__MD_ImagingConditionCode.value, __MD_ImagingConditionCode.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmd_MD_ImagingConditionCode_PropertyType_httpwww_isotc211_org2005gconilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)


    _ElementMap = {
        __MD_ImagingConditionCode.name() : __MD_ImagingConditionCode
    }
    _AttributeMap = {
        __nilReason.name() : __nilReason
    }
_Namespace_gmd.addCategoryObject('typeBinding', u'MD_ImagingConditionCode_PropertyType', MD_ImagingConditionCode_PropertyType)


# Complex type OperationParameterType with content type ELEMENT_ONLY
class OperationParameterType (AbstractGeneralOperationParameterType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'OperationParameterType')
    # Base type is AbstractGeneralOperationParameterType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element minimumOccurs ({http://www.opengis.net/gml/3.2}minimumOccurs) inherited from {http://www.opengis.net/gml/3.2}AbstractGeneralOperationParameterType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element remarks ({http://www.opengis.net/gml/3.2}remarks) inherited from {http://www.opengis.net/gml/3.2}DefinitionType
    
    # Attribute id_ inherited from {http://www.opengis.net/gml/3.2}DefinitionBaseType

    _ElementMap = AbstractGeneralOperationParameterType._ElementMap.copy()
    _ElementMap.update({
        
    })
    _AttributeMap = AbstractGeneralOperationParameterType._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gml.addCategoryObject('typeBinding', u'OperationParameterType', OperationParameterType)


# Complex type AbstractGeneralConversionType with content type ELEMENT_ONLY
class AbstractGeneralConversionType (AbstractCoordinateOperationType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = True
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractGeneralConversionType')
    # Base type is AbstractCoordinateOperationType
    
    # Element domainOfValidity ({http://www.opengis.net/gml/3.2}domainOfValidity) inherited from {http://www.opengis.net/gml/3.2}AbstractCoordinateOperationType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element scope ({http://www.opengis.net/gml/3.2}scope) inherited from {http://www.opengis.net/gml/3.2}AbstractCoordinateOperationType
    
    # Element coordinateOperationAccuracy ({http://www.opengis.net/gml/3.2}coordinateOperationAccuracy) inherited from {http://www.opengis.net/gml/3.2}AbstractCoordinateOperationType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element remarks ({http://www.opengis.net/gml/3.2}remarks) inherited from {http://www.opengis.net/gml/3.2}DefinitionType
    
    # Attribute id_ is restricted from parent
    
    # Attribute {http://www.opengis.net/gml/3.2}id uses Python identifier id_
    __id_ = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'id'), 'id_', '__httpwww_opengis_netgml3_2_DefinitionBaseType_httpwww_opengis_netgml3_2id', pyxb.binding.datatypes.ID, required=True)
    
    id_ = property(__id_.value, __id_.set, None, u'The attribute gml:id supports provision of a handle for the XML element representing a GML Object. Its use is mandatory for all GML objects. It is of XML type ID, so is constrained to be unique in the XML document within which it occurs.')


    _ElementMap = AbstractCoordinateOperationType._ElementMap.copy()
    _ElementMap.update({
        
    })
    _AttributeMap = AbstractCoordinateOperationType._AttributeMap.copy()
    _AttributeMap.update({
        __id_.name() : __id_
    })
_Namespace_gml.addCategoryObject('typeBinding', u'AbstractGeneralConversionType', AbstractGeneralConversionType)


# Complex type ConversionType with content type ELEMENT_ONLY
class ConversionType (AbstractGeneralConversionType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'ConversionType')
    # Base type is AbstractGeneralConversionType
    
    # Element {http://www.opengis.net/gml/3.2}method uses Python identifier method
    __method = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'method'), 'method', '__httpwww_opengis_netgml3_2_ConversionType_httpwww_opengis_netgml3_2method', False)

    
    method = property(__method.value, __method.set, None, u'gml:method is an association role to the operation method used by a coordinate operation.')

    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element domainOfValidity ({http://www.opengis.net/gml/3.2}domainOfValidity) inherited from {http://www.opengis.net/gml/3.2}AbstractCoordinateOperationType
    
    # Element remarks ({http://www.opengis.net/gml/3.2}remarks) inherited from {http://www.opengis.net/gml/3.2}DefinitionType
    
    # Element scope ({http://www.opengis.net/gml/3.2}scope) inherited from {http://www.opengis.net/gml/3.2}AbstractCoordinateOperationType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element coordinateOperationAccuracy ({http://www.opengis.net/gml/3.2}coordinateOperationAccuracy) inherited from {http://www.opengis.net/gml/3.2}AbstractCoordinateOperationType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element {http://www.opengis.net/gml/3.2}parameterValue uses Python identifier parameterValue
    __parameterValue = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'parameterValue'), 'parameterValue', '__httpwww_opengis_netgml3_2_ConversionType_httpwww_opengis_netgml3_2parameterValue', True)

    
    parameterValue = property(__parameterValue.value, __parameterValue.set, None, u'gml:parameterValue is a composition association to a parameter value or group of parameter values used by a coordinate operation.')

    
    # Attribute id_2 inherited from {http://www.opengis.net/gml/3.2}AbstractGeneralConversionType

    _ElementMap = AbstractGeneralConversionType._ElementMap.copy()
    _ElementMap.update({
        __method.name() : __method,
        __parameterValue.name() : __parameterValue
    })
    _AttributeMap = AbstractGeneralConversionType._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gml.addCategoryObject('typeBinding', u'ConversionType', ConversionType)


# Complex type TimeTopologyPrimitivePropertyType with content type ELEMENT_ONLY
class TimeTopologyPrimitivePropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'TimeTopologyPrimitivePropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.opengis.net/gml/3.2}AbstractTimeTopologyPrimitive uses Python identifier AbstractTimeTopologyPrimitive
    __AbstractTimeTopologyPrimitive = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractTimeTopologyPrimitive'), 'AbstractTimeTopologyPrimitive', '__httpwww_opengis_netgml3_2_TimeTopologyPrimitivePropertyType_httpwww_opengis_netgml3_2AbstractTimeTopologyPrimitive', False)

    
    AbstractTimeTopologyPrimitive = property(__AbstractTimeTopologyPrimitive.value, __AbstractTimeTopologyPrimitive.set, None, u'gml:TimeTopologyPrimitive acts as the head of a substitution group for topological temporal primitives.\nTemporal topology primitives shall imply the ordering information between features or feature properties. The temporal connection of features can be examined if they have temporal topology primitives as values of their properties. Usually, an instantaneous feature associates with a time node, and a static feature associates with a time edge.  A feature with both modes associates with the temporal topology primitive: a supertype of time nodes and time edges.\nA topological primitive is always connected to one or more other topological primitives, and is, therefore, always a member of a topological complex. In a GML instance, this will often be indicated by the primitives being described by elements that are descendents of an element describing a complex. However, in order to support the case where a temporal topological primitive is described in another context, the optional complex property is provided, which carries a reference to the parent temporal topological complex.')

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_opengis_netgml3_2_TimeTopologyPrimitivePropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_opengis_netgml3_2_TimeTopologyPrimitivePropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute owns uses Python identifier owns
    __owns = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'owns'), 'owns', '__httpwww_opengis_netgml3_2_TimeTopologyPrimitivePropertyType_owns', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    owns = property(__owns.value, __owns.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_opengis_netgml3_2_TimeTopologyPrimitivePropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_opengis_netgml3_2_TimeTopologyPrimitivePropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'nilReason'), 'nilReason', '__httpwww_opengis_netgml3_2_TimeTopologyPrimitivePropertyType_nilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_opengis_netgml3_2_TimeTopologyPrimitivePropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.opengis.net/gml/3.2}remoteSchema uses Python identifier remoteSchema
    __remoteSchema = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'remoteSchema'), 'remoteSchema', '__httpwww_opengis_netgml3_2_TimeTopologyPrimitivePropertyType_httpwww_opengis_netgml3_2remoteSchema', pyxb.binding.datatypes.anyURI)
    
    remoteSchema = property(__remoteSchema.value, __remoteSchema.set, None, u'')

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_opengis_netgml3_2_TimeTopologyPrimitivePropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_opengis_netgml3_2_TimeTopologyPrimitivePropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)


    _ElementMap = {
        __AbstractTimeTopologyPrimitive.name() : __AbstractTimeTopologyPrimitive
    }
    _AttributeMap = {
        __show.name() : __show,
        __role.name() : __role,
        __owns.name() : __owns,
        __actuate.name() : __actuate,
        __href.name() : __href,
        __nilReason.name() : __nilReason,
        __type.name() : __type,
        __remoteSchema.name() : __remoteSchema,
        __title.name() : __title,
        __arcrole.name() : __arcrole
    }
_Namespace_gml.addCategoryObject('typeBinding', u'TimeTopologyPrimitivePropertyType', TimeTopologyPrimitivePropertyType)


# Complex type MD_Usage_Type with content type ELEMENT_ONLY
class MD_Usage_Type (AbstractObject_Type):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_Usage_Type')
    # Base type is AbstractObject_Type
    
    # Element {http://www.isotc211.org/2005/gmd}userContactInfo uses Python identifier userContactInfo
    __userContactInfo = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'userContactInfo'), 'userContactInfo', '__httpwww_isotc211_org2005gmd_MD_Usage_Type_httpwww_isotc211_org2005gmduserContactInfo', True)

    
    userContactInfo = property(__userContactInfo.value, __userContactInfo.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}specificUsage uses Python identifier specificUsage
    __specificUsage = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'specificUsage'), 'specificUsage', '__httpwww_isotc211_org2005gmd_MD_Usage_Type_httpwww_isotc211_org2005gmdspecificUsage', False)

    
    specificUsage = property(__specificUsage.value, __specificUsage.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}usageDateTime uses Python identifier usageDateTime
    __usageDateTime = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'usageDateTime'), 'usageDateTime', '__httpwww_isotc211_org2005gmd_MD_Usage_Type_httpwww_isotc211_org2005gmdusageDateTime', False)

    
    usageDateTime = property(__usageDateTime.value, __usageDateTime.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}userDeterminedLimitations uses Python identifier userDeterminedLimitations
    __userDeterminedLimitations = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'userDeterminedLimitations'), 'userDeterminedLimitations', '__httpwww_isotc211_org2005gmd_MD_Usage_Type_httpwww_isotc211_org2005gmduserDeterminedLimitations', False)

    
    userDeterminedLimitations = property(__userDeterminedLimitations.value, __userDeterminedLimitations.set, None, None)

    
    # Attribute id inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type
    
    # Attribute uuid inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type

    _ElementMap = AbstractObject_Type._ElementMap.copy()
    _ElementMap.update({
        __userContactInfo.name() : __userContactInfo,
        __specificUsage.name() : __specificUsage,
        __usageDateTime.name() : __usageDateTime,
        __userDeterminedLimitations.name() : __userDeterminedLimitations
    })
    _AttributeMap = AbstractObject_Type._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gmd.addCategoryObject('typeBinding', u'MD_Usage_Type', MD_Usage_Type)


# Complex type TemporalCSPropertyType with content type ELEMENT_ONLY
class TemporalCSPropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'TemporalCSPropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.opengis.net/gml/3.2}TemporalCS uses Python identifier TemporalCS
    __TemporalCS = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'TemporalCS'), 'TemporalCS', '__httpwww_opengis_netgml3_2_TemporalCSPropertyType_httpwww_opengis_netgml3_2TemporalCS', False)

    
    TemporalCS = property(__TemporalCS.value, __TemporalCS.set, None, u'')

    
    # Attribute {http://www.opengis.net/gml/3.2}remoteSchema uses Python identifier remoteSchema
    __remoteSchema = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'remoteSchema'), 'remoteSchema', '__httpwww_opengis_netgml3_2_TemporalCSPropertyType_httpwww_opengis_netgml3_2remoteSchema', pyxb.binding.datatypes.anyURI)
    
    remoteSchema = property(__remoteSchema.value, __remoteSchema.set, None, u'')

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_opengis_netgml3_2_TemporalCSPropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_opengis_netgml3_2_TemporalCSPropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_opengis_netgml3_2_TemporalCSPropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'nilReason'), 'nilReason', '__httpwww_opengis_netgml3_2_TemporalCSPropertyType_nilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_opengis_netgml3_2_TemporalCSPropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_opengis_netgml3_2_TemporalCSPropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_opengis_netgml3_2_TemporalCSPropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_opengis_netgml3_2_TemporalCSPropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)


    _ElementMap = {
        __TemporalCS.name() : __TemporalCS
    }
    _AttributeMap = {
        __remoteSchema.name() : __remoteSchema,
        __arcrole.name() : __arcrole,
        __role.name() : __role,
        __show.name() : __show,
        __nilReason.name() : __nilReason,
        __href.name() : __href,
        __actuate.name() : __actuate,
        __type.name() : __type,
        __title.name() : __title
    }
_Namespace_gml.addCategoryObject('typeBinding', u'TemporalCSPropertyType', TemporalCSPropertyType)


# Complex type Multiplicity_PropertyType with content type ELEMENT_ONLY
class Multiplicity_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gco, u'Multiplicity_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gco}Multiplicity uses Python identifier Multiplicity
    __Multiplicity = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'Multiplicity'), 'Multiplicity', '__httpwww_isotc211_org2005gco_Multiplicity_PropertyType_httpwww_isotc211_org2005gcoMultiplicity', False)

    
    Multiplicity = property(__Multiplicity.value, __Multiplicity.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gco_Multiplicity_PropertyType_httpwww_isotc211_org2005gconilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_isotc211_org2005gco_Multiplicity_PropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_isotc211_org2005gco_Multiplicity_PropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_isotc211_org2005gco_Multiplicity_PropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_isotc211_org2005gco_Multiplicity_PropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_isotc211_org2005gco_Multiplicity_PropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute uuidref uses Python identifier uuidref
    __uuidref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uuidref'), 'uuidref', '__httpwww_isotc211_org2005gco_Multiplicity_PropertyType_uuidref', pyxb.binding.datatypes.string)
    
    uuidref = property(__uuidref.value, __uuidref.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_isotc211_org2005gco_Multiplicity_PropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_isotc211_org2005gco_Multiplicity_PropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)


    _ElementMap = {
        __Multiplicity.name() : __Multiplicity
    }
    _AttributeMap = {
        __nilReason.name() : __nilReason,
        __type.name() : __type,
        __show.name() : __show,
        __title.name() : __title,
        __href.name() : __href,
        __actuate.name() : __actuate,
        __uuidref.name() : __uuidref,
        __role.name() : __role,
        __arcrole.name() : __arcrole
    }
_Namespace_gco.addCategoryObject('typeBinding', u'Multiplicity_PropertyType', Multiplicity_PropertyType)


# Complex type MD_MetadataExtensionInformation_Type with content type ELEMENT_ONLY
class MD_MetadataExtensionInformation_Type (AbstractObject_Type):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_MetadataExtensionInformation_Type')
    # Base type is AbstractObject_Type
    
    # Element {http://www.isotc211.org/2005/gmd}extendedElementInformation uses Python identifier extendedElementInformation
    __extendedElementInformation = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'extendedElementInformation'), 'extendedElementInformation', '__httpwww_isotc211_org2005gmd_MD_MetadataExtensionInformation_Type_httpwww_isotc211_org2005gmdextendedElementInformation', True)

    
    extendedElementInformation = property(__extendedElementInformation.value, __extendedElementInformation.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}extensionOnLineResource uses Python identifier extensionOnLineResource
    __extensionOnLineResource = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'extensionOnLineResource'), 'extensionOnLineResource', '__httpwww_isotc211_org2005gmd_MD_MetadataExtensionInformation_Type_httpwww_isotc211_org2005gmdextensionOnLineResource', False)

    
    extensionOnLineResource = property(__extensionOnLineResource.value, __extensionOnLineResource.set, None, None)

    
    # Attribute id inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type
    
    # Attribute uuid inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type

    _ElementMap = AbstractObject_Type._ElementMap.copy()
    _ElementMap.update({
        __extendedElementInformation.name() : __extendedElementInformation,
        __extensionOnLineResource.name() : __extensionOnLineResource
    })
    _AttributeMap = AbstractObject_Type._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gmd.addCategoryObject('typeBinding', u'MD_MetadataExtensionInformation_Type', MD_MetadataExtensionInformation_Type)


# Complex type OperationMethodType with content type ELEMENT_ONLY
class OperationMethodType (IdentifiedObjectType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'OperationMethodType')
    # Base type is IdentifiedObjectType
    
    # Element {http://www.opengis.net/gml/3.2}targetDimensions uses Python identifier targetDimensions
    __targetDimensions = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'targetDimensions'), 'targetDimensions', '__httpwww_opengis_netgml3_2_OperationMethodType_httpwww_opengis_netgml3_2targetDimensions', False)

    
    targetDimensions = property(__targetDimensions.value, __targetDimensions.set, None, u'gml:targetDimensions is the number of dimensions in the target CRS of this operation method.')

    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element {http://www.opengis.net/gml/3.2}formula uses Python identifier formula
    __formula = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'formula'), 'formula', '__httpwww_opengis_netgml3_2_OperationMethodType_httpwww_opengis_netgml3_2formula', False)

    
    formula = property(__formula.value, __formula.set, None, u'gml:formula Formula(s) or procedure used by an operation method. The use of the codespace attribite has been deprecated. The property value shall be a character string.')

    
    # Element {http://www.opengis.net/gml/3.2}parameter uses Python identifier parameter
    __parameter = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'parameter'), 'parameter', '__httpwww_opengis_netgml3_2_OperationMethodType_httpwww_opengis_netgml3_2parameter', True)

    
    parameter = property(__parameter.value, __parameter.set, None, u'gml:parameter is an association to an operation parameter or parameter group.')

    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element {http://www.opengis.net/gml/3.2}formulaCitation uses Python identifier formulaCitation
    __formulaCitation = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'formulaCitation'), 'formulaCitation', '__httpwww_opengis_netgml3_2_OperationMethodType_httpwww_opengis_netgml3_2formulaCitation', False)

    
    formulaCitation = property(__formulaCitation.value, __formulaCitation.set, None, u'gml:formulaCitation provides a reference to a publication giving the formula(s) or procedure used by an coordinate operation method.')

    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element {http://www.opengis.net/gml/3.2}sourceDimensions uses Python identifier sourceDimensions
    __sourceDimensions = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'sourceDimensions'), 'sourceDimensions', '__httpwww_opengis_netgml3_2_OperationMethodType_httpwww_opengis_netgml3_2sourceDimensions', False)

    
    sourceDimensions = property(__sourceDimensions.value, __sourceDimensions.set, None, u'gml:sourceDimensions is the number of dimensions in the source CRS of this operation method.')

    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element remarks ({http://www.opengis.net/gml/3.2}remarks) inherited from {http://www.opengis.net/gml/3.2}DefinitionType
    
    # Attribute id_ inherited from {http://www.opengis.net/gml/3.2}DefinitionBaseType

    _ElementMap = IdentifiedObjectType._ElementMap.copy()
    _ElementMap.update({
        __targetDimensions.name() : __targetDimensions,
        __formula.name() : __formula,
        __parameter.name() : __parameter,
        __formulaCitation.name() : __formulaCitation,
        __sourceDimensions.name() : __sourceDimensions
    })
    _AttributeMap = IdentifiedObjectType._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gml.addCategoryObject('typeBinding', u'OperationMethodType', OperationMethodType)


# Complex type PT_LocaleContainer_PropertyType with content type ELEMENT_ONLY
class PT_LocaleContainer_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'PT_LocaleContainer_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmd}PT_LocaleContainer uses Python identifier PT_LocaleContainer
    __PT_LocaleContainer = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'PT_LocaleContainer'), 'PT_LocaleContainer', '__httpwww_isotc211_org2005gmd_PT_LocaleContainer_PropertyType_httpwww_isotc211_org2005gmdPT_LocaleContainer', False)

    
    PT_LocaleContainer = property(__PT_LocaleContainer.value, __PT_LocaleContainer.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_isotc211_org2005gmd_PT_LocaleContainer_PropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmd_PT_LocaleContainer_PropertyType_httpwww_isotc211_org2005gconilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_isotc211_org2005gmd_PT_LocaleContainer_PropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute uuidref uses Python identifier uuidref
    __uuidref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uuidref'), 'uuidref', '__httpwww_isotc211_org2005gmd_PT_LocaleContainer_PropertyType_uuidref', pyxb.binding.datatypes.string)
    
    uuidref = property(__uuidref.value, __uuidref.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_isotc211_org2005gmd_PT_LocaleContainer_PropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_isotc211_org2005gmd_PT_LocaleContainer_PropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_isotc211_org2005gmd_PT_LocaleContainer_PropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_isotc211_org2005gmd_PT_LocaleContainer_PropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_isotc211_org2005gmd_PT_LocaleContainer_PropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)


    _ElementMap = {
        __PT_LocaleContainer.name() : __PT_LocaleContainer
    }
    _AttributeMap = {
        __type.name() : __type,
        __nilReason.name() : __nilReason,
        __arcrole.name() : __arcrole,
        __uuidref.name() : __uuidref,
        __actuate.name() : __actuate,
        __role.name() : __role,
        __show.name() : __show,
        __title.name() : __title,
        __href.name() : __href
    }
_Namespace_gmd.addCategoryObject('typeBinding', u'PT_LocaleContainer_PropertyType', PT_LocaleContainer_PropertyType)


# Complex type GeocentricCRSPropertyType with content type ELEMENT_ONLY
class GeocentricCRSPropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'GeocentricCRSPropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.opengis.net/gml/3.2}GeocentricCRS uses Python identifier GeocentricCRS
    __GeocentricCRS = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'GeocentricCRS'), 'GeocentricCRS', '__httpwww_opengis_netgml3_2_GeocentricCRSPropertyType_httpwww_opengis_netgml3_2GeocentricCRS', False)

    
    GeocentricCRS = property(__GeocentricCRS.value, __GeocentricCRS.set, None, u'')

    
    # Attribute {http://www.opengis.net/gml/3.2}remoteSchema uses Python identifier remoteSchema
    __remoteSchema = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'remoteSchema'), 'remoteSchema', '__httpwww_opengis_netgml3_2_GeocentricCRSPropertyType_httpwww_opengis_netgml3_2remoteSchema', pyxb.binding.datatypes.anyURI)
    
    remoteSchema = property(__remoteSchema.value, __remoteSchema.set, None, u'')

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_opengis_netgml3_2_GeocentricCRSPropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_opengis_netgml3_2_GeocentricCRSPropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_opengis_netgml3_2_GeocentricCRSPropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_opengis_netgml3_2_GeocentricCRSPropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'nilReason'), 'nilReason', '__httpwww_opengis_netgml3_2_GeocentricCRSPropertyType_nilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_opengis_netgml3_2_GeocentricCRSPropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_opengis_netgml3_2_GeocentricCRSPropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_opengis_netgml3_2_GeocentricCRSPropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")


    _ElementMap = {
        __GeocentricCRS.name() : __GeocentricCRS
    }
    _AttributeMap = {
        __remoteSchema.name() : __remoteSchema,
        __href.name() : __href,
        __type.name() : __type,
        __title.name() : __title,
        __arcrole.name() : __arcrole,
        __nilReason.name() : __nilReason,
        __role.name() : __role,
        __show.name() : __show,
        __actuate.name() : __actuate
    }
_Namespace_gml.addCategoryObject('typeBinding', u'GeocentricCRSPropertyType', GeocentricCRSPropertyType)


# Complex type DirectedEdgePropertyType with content type ELEMENT_ONLY
class DirectedEdgePropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'DirectedEdgePropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.opengis.net/gml/3.2}Edge uses Python identifier Edge
    __Edge = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'Edge'), 'Edge', '__httpwww_opengis_netgml3_2_DirectedEdgePropertyType_httpwww_opengis_netgml3_2Edge', False)

    
    Edge = property(__Edge.value, __Edge.set, None, u'gml:Edge represents the 1-dimensional primitive.\nThe topological boundary of an Edge (gml:directedNode) consists of a negatively directed start Node and a positively directed end Node.   \nThe optional coboundary of an edge (gml:directedFace) is a circular sequence of directed faces which are incident on this edge in document order. In the 2D case, the orientation of the face on the left of the edge is "+"; the orientation of the face on the right on its right is "-". \nIf provided, the aggregationType attribute shall have the value "sequence".\nAn edge may optionally be realised by a 1-dimensional geometric primitive (gml:curveProperty).')

    
    # Attribute {http://www.opengis.net/gml/3.2}remoteSchema uses Python identifier remoteSchema
    __remoteSchema = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'remoteSchema'), 'remoteSchema', '__httpwww_opengis_netgml3_2_DirectedEdgePropertyType_httpwww_opengis_netgml3_2remoteSchema', pyxb.binding.datatypes.anyURI)
    
    remoteSchema = property(__remoteSchema.value, __remoteSchema.set, None, u'')

    
    # Attribute orientation uses Python identifier orientation
    __orientation = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'orientation'), 'orientation', '__httpwww_opengis_netgml3_2_DirectedEdgePropertyType_orientation', SignType, unicode_default=u'+')
    
    orientation = property(__orientation.value, __orientation.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_opengis_netgml3_2_DirectedEdgePropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_opengis_netgml3_2_DirectedEdgePropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_opengis_netgml3_2_DirectedEdgePropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute owns uses Python identifier owns
    __owns = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'owns'), 'owns', '__httpwww_opengis_netgml3_2_DirectedEdgePropertyType_owns', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    owns = property(__owns.value, __owns.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_opengis_netgml3_2_DirectedEdgePropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_opengis_netgml3_2_DirectedEdgePropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'nilReason'), 'nilReason', '__httpwww_opengis_netgml3_2_DirectedEdgePropertyType_nilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_opengis_netgml3_2_DirectedEdgePropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_opengis_netgml3_2_DirectedEdgePropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)


    _ElementMap = {
        __Edge.name() : __Edge
    }
    _AttributeMap = {
        __remoteSchema.name() : __remoteSchema,
        __orientation.name() : __orientation,
        __title.name() : __title,
        __arcrole.name() : __arcrole,
        __show.name() : __show,
        __owns.name() : __owns,
        __type.name() : __type,
        __actuate.name() : __actuate,
        __nilReason.name() : __nilReason,
        __href.name() : __href,
        __role.name() : __role
    }
_Namespace_gml.addCategoryObject('typeBinding', u'DirectedEdgePropertyType', DirectedEdgePropertyType)


# Complex type MD_MaintenanceInformation_Type with content type ELEMENT_ONLY
class MD_MaintenanceInformation_Type (AbstractObject_Type):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_MaintenanceInformation_Type')
    # Base type is AbstractObject_Type
    
    # Element {http://www.isotc211.org/2005/gmd}userDefinedMaintenanceFrequency uses Python identifier userDefinedMaintenanceFrequency
    __userDefinedMaintenanceFrequency = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'userDefinedMaintenanceFrequency'), 'userDefinedMaintenanceFrequency', '__httpwww_isotc211_org2005gmd_MD_MaintenanceInformation_Type_httpwww_isotc211_org2005gmduserDefinedMaintenanceFrequency', False)

    
    userDefinedMaintenanceFrequency = property(__userDefinedMaintenanceFrequency.value, __userDefinedMaintenanceFrequency.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}updateScope uses Python identifier updateScope
    __updateScope = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'updateScope'), 'updateScope', '__httpwww_isotc211_org2005gmd_MD_MaintenanceInformation_Type_httpwww_isotc211_org2005gmdupdateScope', True)

    
    updateScope = property(__updateScope.value, __updateScope.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}maintenanceNote uses Python identifier maintenanceNote
    __maintenanceNote = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'maintenanceNote'), 'maintenanceNote', '__httpwww_isotc211_org2005gmd_MD_MaintenanceInformation_Type_httpwww_isotc211_org2005gmdmaintenanceNote', True)

    
    maintenanceNote = property(__maintenanceNote.value, __maintenanceNote.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}updateScopeDescription uses Python identifier updateScopeDescription
    __updateScopeDescription = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'updateScopeDescription'), 'updateScopeDescription', '__httpwww_isotc211_org2005gmd_MD_MaintenanceInformation_Type_httpwww_isotc211_org2005gmdupdateScopeDescription', True)

    
    updateScopeDescription = property(__updateScopeDescription.value, __updateScopeDescription.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}contact uses Python identifier contact
    __contact = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'contact'), 'contact', '__httpwww_isotc211_org2005gmd_MD_MaintenanceInformation_Type_httpwww_isotc211_org2005gmdcontact', True)

    
    contact = property(__contact.value, __contact.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}maintenanceAndUpdateFrequency uses Python identifier maintenanceAndUpdateFrequency
    __maintenanceAndUpdateFrequency = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'maintenanceAndUpdateFrequency'), 'maintenanceAndUpdateFrequency', '__httpwww_isotc211_org2005gmd_MD_MaintenanceInformation_Type_httpwww_isotc211_org2005gmdmaintenanceAndUpdateFrequency', False)

    
    maintenanceAndUpdateFrequency = property(__maintenanceAndUpdateFrequency.value, __maintenanceAndUpdateFrequency.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}dateOfNextUpdate uses Python identifier dateOfNextUpdate
    __dateOfNextUpdate = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'dateOfNextUpdate'), 'dateOfNextUpdate', '__httpwww_isotc211_org2005gmd_MD_MaintenanceInformation_Type_httpwww_isotc211_org2005gmddateOfNextUpdate', False)

    
    dateOfNextUpdate = property(__dateOfNextUpdate.value, __dateOfNextUpdate.set, None, None)

    
    # Attribute id inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type
    
    # Attribute uuid inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type

    _ElementMap = AbstractObject_Type._ElementMap.copy()
    _ElementMap.update({
        __userDefinedMaintenanceFrequency.name() : __userDefinedMaintenanceFrequency,
        __updateScope.name() : __updateScope,
        __maintenanceNote.name() : __maintenanceNote,
        __updateScopeDescription.name() : __updateScopeDescription,
        __contact.name() : __contact,
        __maintenanceAndUpdateFrequency.name() : __maintenanceAndUpdateFrequency,
        __dateOfNextUpdate.name() : __dateOfNextUpdate
    })
    _AttributeMap = AbstractObject_Type._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gmd.addCategoryObject('typeBinding', u'MD_MaintenanceInformation_Type', MD_MaintenanceInformation_Type)


# Complex type TimeEdgeType with content type ELEMENT_ONLY
class TimeEdgeType (AbstractTimeTopologyPrimitiveType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'TimeEdgeType')
    # Base type is AbstractTimeTopologyPrimitiveType
    
    # Element {http://www.opengis.net/gml/3.2}start uses Python identifier start
    __start = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'start'), 'start', '__httpwww_opengis_netgml3_2_TimeEdgeType_httpwww_opengis_netgml3_2start', False)

    
    start = property(__start.value, __start.set, None, None)

    
    # Element {http://www.opengis.net/gml/3.2}end uses Python identifier end
    __end = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'end'), 'end', '__httpwww_opengis_netgml3_2_TimeEdgeType_httpwww_opengis_netgml3_2end', False)

    
    end = property(__end.value, __end.set, None, None)

    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element {http://www.opengis.net/gml/3.2}extent uses Python identifier extent
    __extent = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'extent'), 'extent', '__httpwww_opengis_netgml3_2_TimeEdgeType_httpwww_opengis_netgml3_2extent', False)

    
    extent = property(__extent.value, __extent.set, None, None)

    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element complex ({http://www.opengis.net/gml/3.2}complex) inherited from {http://www.opengis.net/gml/3.2}AbstractTimeTopologyPrimitiveType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element relatedTime ({http://www.opengis.net/gml/3.2}relatedTime) inherited from {http://www.opengis.net/gml/3.2}AbstractTimePrimitiveType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Attribute id inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType

    _ElementMap = AbstractTimeTopologyPrimitiveType._ElementMap.copy()
    _ElementMap.update({
        __start.name() : __start,
        __end.name() : __end,
        __extent.name() : __extent
    })
    _AttributeMap = AbstractTimeTopologyPrimitiveType._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gml.addCategoryObject('typeBinding', u'TimeEdgeType', TimeEdgeType)


# Complex type FormulaType with content type ELEMENT_ONLY
class FormulaType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'FormulaType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.opengis.net/gml/3.2}d uses Python identifier d
    __d = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'd'), 'd', '__httpwww_opengis_netgml3_2_FormulaType_httpwww_opengis_netgml3_2d', False)

    
    d = property(__d.value, __d.set, None, None)

    
    # Element {http://www.opengis.net/gml/3.2}a uses Python identifier a
    __a = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'a'), 'a', '__httpwww_opengis_netgml3_2_FormulaType_httpwww_opengis_netgml3_2a', False)

    
    a = property(__a.value, __a.set, None, None)

    
    # Element {http://www.opengis.net/gml/3.2}c uses Python identifier c
    __c = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'c'), 'c', '__httpwww_opengis_netgml3_2_FormulaType_httpwww_opengis_netgml3_2c', False)

    
    c = property(__c.value, __c.set, None, None)

    
    # Element {http://www.opengis.net/gml/3.2}b uses Python identifier b
    __b = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'b'), 'b', '__httpwww_opengis_netgml3_2_FormulaType_httpwww_opengis_netgml3_2b', False)

    
    b = property(__b.value, __b.set, None, None)


    _ElementMap = {
        __d.name() : __d,
        __a.name() : __a,
        __c.name() : __c,
        __b.name() : __b
    }
    _AttributeMap = {
        
    }
_Namespace_gml.addCategoryObject('typeBinding', u'FormulaType', FormulaType)


# Complex type AbstractMemberType with content type EMPTY
class AbstractMemberType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = True
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractMemberType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute owns uses Python identifier owns
    __owns = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'owns'), 'owns', '__httpwww_opengis_netgml3_2_AbstractMemberType_owns', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    owns = property(__owns.value, __owns.set, None, None)


    _ElementMap = {
        
    }
    _AttributeMap = {
        __owns.name() : __owns
    }
_Namespace_gml.addCategoryObject('typeBinding', u'AbstractMemberType', AbstractMemberType)


# Complex type DictionaryEntryType with content type ELEMENT_ONLY
class DictionaryEntryType (AbstractMemberType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'DictionaryEntryType')
    # Base type is AbstractMemberType
    
    # Element {http://www.opengis.net/gml/3.2}Definition uses Python identifier Definition
    __Definition = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'Definition'), 'Definition', '__httpwww_opengis_netgml3_2_DictionaryEntryType_httpwww_opengis_netgml3_2Definition', False)

    
    Definition = property(__Definition.value, __Definition.set, None, u'The basic gml:Definition element specifies a definition, which can be included in or referenced by a dictionary. \nThe content model for a generic definition is a derivation from gml:AbstractGMLType.  \nThe gml:description property element shall hold the definition if this can be captured in a simple text string, or the gml:descriptionReference property element may carry a link to a description elsewhere.\nThe gml:identifier element shall provide one identifier identifying this definition. The identifier shall be unique within the dictionaries using this definition. \nThe gml:name elements shall provide zero or more terms and synonyms for which this is the definition.\nThe gml:remarks element shall be used to hold additional textual information that is not conceptually part of the definition but is useful in understanding the definition.')

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_opengis_netgml3_2_DictionaryEntryType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_opengis_netgml3_2_DictionaryEntryType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_opengis_netgml3_2_DictionaryEntryType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_opengis_netgml3_2_DictionaryEntryType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_opengis_netgml3_2_DictionaryEntryType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.opengis.net/gml/3.2}remoteSchema uses Python identifier remoteSchema
    __remoteSchema = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'remoteSchema'), 'remoteSchema', '__httpwww_opengis_netgml3_2_DictionaryEntryType_httpwww_opengis_netgml3_2remoteSchema', pyxb.binding.datatypes.anyURI)
    
    remoteSchema = property(__remoteSchema.value, __remoteSchema.set, None, u'')

    
    # Attribute nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'nilReason'), 'nilReason', '__httpwww_opengis_netgml3_2_DictionaryEntryType_nilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute owns inherited from {http://www.opengis.net/gml/3.2}AbstractMemberType
    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_opengis_netgml3_2_DictionaryEntryType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_opengis_netgml3_2_DictionaryEntryType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")


    _ElementMap = AbstractMemberType._ElementMap.copy()
    _ElementMap.update({
        __Definition.name() : __Definition
    })
    _AttributeMap = AbstractMemberType._AttributeMap.copy()
    _AttributeMap.update({
        __role.name() : __role,
        __href.name() : __href,
        __type.name() : __type,
        __title.name() : __title,
        __arcrole.name() : __arcrole,
        __remoteSchema.name() : __remoteSchema,
        __nilReason.name() : __nilReason,
        __show.name() : __show,
        __actuate.name() : __actuate
    })
_Namespace_gml.addCategoryObject('typeBinding', u'DictionaryEntryType', DictionaryEntryType)


# Complex type OperationParameterGroupPropertyType with content type ELEMENT_ONLY
class OperationParameterGroupPropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'OperationParameterGroupPropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.opengis.net/gml/3.2}OperationParameterGroup uses Python identifier OperationParameterGroup
    __OperationParameterGroup = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'OperationParameterGroup'), 'OperationParameterGroup', '__httpwww_opengis_netgml3_2_OperationParameterGroupPropertyType_httpwww_opengis_netgml3_2OperationParameterGroup', False)

    
    OperationParameterGroup = property(__OperationParameterGroup.value, __OperationParameterGroup.set, None, u'gml:OperationParameterGroup is the definition of a group of parameters used by an operation method. This complex type is expected to be used or extended for all applicable operation methods, without defining operation-method-specialized element names.\nThe generalOperationParameter elements are an unordered list of associations to the set of operation parameters that are members of this group.')

    
    # Attribute {http://www.opengis.net/gml/3.2}remoteSchema uses Python identifier remoteSchema
    __remoteSchema = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'remoteSchema'), 'remoteSchema', '__httpwww_opengis_netgml3_2_OperationParameterGroupPropertyType_httpwww_opengis_netgml3_2remoteSchema', pyxb.binding.datatypes.anyURI)
    
    remoteSchema = property(__remoteSchema.value, __remoteSchema.set, None, u'')

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_opengis_netgml3_2_OperationParameterGroupPropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_opengis_netgml3_2_OperationParameterGroupPropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'nilReason'), 'nilReason', '__httpwww_opengis_netgml3_2_OperationParameterGroupPropertyType_nilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_opengis_netgml3_2_OperationParameterGroupPropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_opengis_netgml3_2_OperationParameterGroupPropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_opengis_netgml3_2_OperationParameterGroupPropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_opengis_netgml3_2_OperationParameterGroupPropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_opengis_netgml3_2_OperationParameterGroupPropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")


    _ElementMap = {
        __OperationParameterGroup.name() : __OperationParameterGroup
    }
    _AttributeMap = {
        __remoteSchema.name() : __remoteSchema,
        __actuate.name() : __actuate,
        __href.name() : __href,
        __nilReason.name() : __nilReason,
        __title.name() : __title,
        __arcrole.name() : __arcrole,
        __type.name() : __type,
        __role.name() : __role,
        __show.name() : __show
    }
_Namespace_gml.addCategoryObject('typeBinding', u'OperationParameterGroupPropertyType', OperationParameterGroupPropertyType)


# Complex type MD_AggregateInformation_PropertyType with content type ELEMENT_ONLY
class MD_AggregateInformation_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_AggregateInformation_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmd}MD_AggregateInformation uses Python identifier MD_AggregateInformation
    __MD_AggregateInformation = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_AggregateInformation'), 'MD_AggregateInformation', '__httpwww_isotc211_org2005gmd_MD_AggregateInformation_PropertyType_httpwww_isotc211_org2005gmdMD_AggregateInformation', False)

    
    MD_AggregateInformation = property(__MD_AggregateInformation.value, __MD_AggregateInformation.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_isotc211_org2005gmd_MD_AggregateInformation_PropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_isotc211_org2005gmd_MD_AggregateInformation_PropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_isotc211_org2005gmd_MD_AggregateInformation_PropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_isotc211_org2005gmd_MD_AggregateInformation_PropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_isotc211_org2005gmd_MD_AggregateInformation_PropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute uuidref uses Python identifier uuidref
    __uuidref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uuidref'), 'uuidref', '__httpwww_isotc211_org2005gmd_MD_AggregateInformation_PropertyType_uuidref', pyxb.binding.datatypes.string)
    
    uuidref = property(__uuidref.value, __uuidref.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_isotc211_org2005gmd_MD_AggregateInformation_PropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmd_MD_AggregateInformation_PropertyType_httpwww_isotc211_org2005gconilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_isotc211_org2005gmd_MD_AggregateInformation_PropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)


    _ElementMap = {
        __MD_AggregateInformation.name() : __MD_AggregateInformation
    }
    _AttributeMap = {
        __show.name() : __show,
        __role.name() : __role,
        __href.name() : __href,
        __actuate.name() : __actuate,
        __type.name() : __type,
        __uuidref.name() : __uuidref,
        __arcrole.name() : __arcrole,
        __nilReason.name() : __nilReason,
        __title.name() : __title
    }
_Namespace_gmd.addCategoryObject('typeBinding', u'MD_AggregateInformation_PropertyType', MD_AggregateInformation_PropertyType)


# Complex type DQ_GriddedDataPositionalAccuracy_PropertyType with content type ELEMENT_ONLY
class DQ_GriddedDataPositionalAccuracy_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'DQ_GriddedDataPositionalAccuracy_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmd}DQ_GriddedDataPositionalAccuracy uses Python identifier DQ_GriddedDataPositionalAccuracy
    __DQ_GriddedDataPositionalAccuracy = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'DQ_GriddedDataPositionalAccuracy'), 'DQ_GriddedDataPositionalAccuracy', '__httpwww_isotc211_org2005gmd_DQ_GriddedDataPositionalAccuracy_PropertyType_httpwww_isotc211_org2005gmdDQ_GriddedDataPositionalAccuracy', False)

    
    DQ_GriddedDataPositionalAccuracy = property(__DQ_GriddedDataPositionalAccuracy.value, __DQ_GriddedDataPositionalAccuracy.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_isotc211_org2005gmd_DQ_GriddedDataPositionalAccuracy_PropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_isotc211_org2005gmd_DQ_GriddedDataPositionalAccuracy_PropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_isotc211_org2005gmd_DQ_GriddedDataPositionalAccuracy_PropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmd_DQ_GriddedDataPositionalAccuracy_PropertyType_httpwww_isotc211_org2005gconilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_isotc211_org2005gmd_DQ_GriddedDataPositionalAccuracy_PropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute uuidref uses Python identifier uuidref
    __uuidref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uuidref'), 'uuidref', '__httpwww_isotc211_org2005gmd_DQ_GriddedDataPositionalAccuracy_PropertyType_uuidref', pyxb.binding.datatypes.string)
    
    uuidref = property(__uuidref.value, __uuidref.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_isotc211_org2005gmd_DQ_GriddedDataPositionalAccuracy_PropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_isotc211_org2005gmd_DQ_GriddedDataPositionalAccuracy_PropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_isotc211_org2005gmd_DQ_GriddedDataPositionalAccuracy_PropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")


    _ElementMap = {
        __DQ_GriddedDataPositionalAccuracy.name() : __DQ_GriddedDataPositionalAccuracy
    }
    _AttributeMap = {
        __href.name() : __href,
        __type.name() : __type,
        __actuate.name() : __actuate,
        __nilReason.name() : __nilReason,
        __arcrole.name() : __arcrole,
        __uuidref.name() : __uuidref,
        __role.name() : __role,
        __title.name() : __title,
        __show.name() : __show
    }
_Namespace_gmd.addCategoryObject('typeBinding', u'DQ_GriddedDataPositionalAccuracy_PropertyType', DQ_GriddedDataPositionalAccuracy_PropertyType)


# Complex type EllipsoidalCSType with content type ELEMENT_ONLY
class EllipsoidalCSType (AbstractCoordinateSystemType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'EllipsoidalCSType')
    # Base type is AbstractCoordinateSystemType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element axis ({http://www.opengis.net/gml/3.2}axis) inherited from {http://www.opengis.net/gml/3.2}AbstractCoordinateSystemType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element remarks ({http://www.opengis.net/gml/3.2}remarks) inherited from {http://www.opengis.net/gml/3.2}DefinitionType
    
    # Attribute aggregationType inherited from {http://www.opengis.net/gml/3.2}AbstractCoordinateSystemType
    
    # Attribute id_ inherited from {http://www.opengis.net/gml/3.2}DefinitionBaseType

    _ElementMap = AbstractCoordinateSystemType._ElementMap.copy()
    _ElementMap.update({
        
    })
    _AttributeMap = AbstractCoordinateSystemType._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gml.addCategoryObject('typeBinding', u'EllipsoidalCSType', EllipsoidalCSType)


# Complex type AffineCSPropertyType with content type ELEMENT_ONLY
class AffineCSPropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'AffineCSPropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.opengis.net/gml/3.2}AffineCS uses Python identifier AffineCS
    __AffineCS = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'AffineCS'), 'AffineCS', '__httpwww_opengis_netgml3_2_AffineCSPropertyType_httpwww_opengis_netgml3_2AffineCS', False)

    
    AffineCS = property(__AffineCS.value, __AffineCS.set, None, u'gml:AffineCS is a two- or three-dimensional coordinate system with straight axes that are not necessarily orthogonal. An AffineCS shall have two or three gml:axis property elements; the number of property elements shall equal the dimension of the CS.')

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_opengis_netgml3_2_AffineCSPropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute {http://www.opengis.net/gml/3.2}remoteSchema uses Python identifier remoteSchema
    __remoteSchema = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'remoteSchema'), 'remoteSchema', '__httpwww_opengis_netgml3_2_AffineCSPropertyType_httpwww_opengis_netgml3_2remoteSchema', pyxb.binding.datatypes.anyURI)
    
    remoteSchema = property(__remoteSchema.value, __remoteSchema.set, None, u'')

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_opengis_netgml3_2_AffineCSPropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_opengis_netgml3_2_AffineCSPropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_opengis_netgml3_2_AffineCSPropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'nilReason'), 'nilReason', '__httpwww_opengis_netgml3_2_AffineCSPropertyType_nilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_opengis_netgml3_2_AffineCSPropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_opengis_netgml3_2_AffineCSPropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_opengis_netgml3_2_AffineCSPropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")


    _ElementMap = {
        __AffineCS.name() : __AffineCS
    }
    _AttributeMap = {
        __actuate.name() : __actuate,
        __remoteSchema.name() : __remoteSchema,
        __href.name() : __href,
        __type.name() : __type,
        __title.name() : __title,
        __nilReason.name() : __nilReason,
        __arcrole.name() : __arcrole,
        __role.name() : __role,
        __show.name() : __show
    }
_Namespace_gml.addCategoryObject('typeBinding', u'AffineCSPropertyType', AffineCSPropertyType)


# Complex type DQ_EvaluationMethodTypeCode_PropertyType with content type ELEMENT_ONLY
class DQ_EvaluationMethodTypeCode_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'DQ_EvaluationMethodTypeCode_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmd}DQ_EvaluationMethodTypeCode uses Python identifier DQ_EvaluationMethodTypeCode
    __DQ_EvaluationMethodTypeCode = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'DQ_EvaluationMethodTypeCode'), 'DQ_EvaluationMethodTypeCode', '__httpwww_isotc211_org2005gmd_DQ_EvaluationMethodTypeCode_PropertyType_httpwww_isotc211_org2005gmdDQ_EvaluationMethodTypeCode', False)

    
    DQ_EvaluationMethodTypeCode = property(__DQ_EvaluationMethodTypeCode.value, __DQ_EvaluationMethodTypeCode.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmd_DQ_EvaluationMethodTypeCode_PropertyType_httpwww_isotc211_org2005gconilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)


    _ElementMap = {
        __DQ_EvaluationMethodTypeCode.name() : __DQ_EvaluationMethodTypeCode
    }
    _AttributeMap = {
        __nilReason.name() : __nilReason
    }
_Namespace_gmd.addCategoryObject('typeBinding', u'DQ_EvaluationMethodTypeCode_PropertyType', DQ_EvaluationMethodTypeCode_PropertyType)


# Complex type MD_AggregateInformation_Type with content type ELEMENT_ONLY
class MD_AggregateInformation_Type (AbstractObject_Type):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_AggregateInformation_Type')
    # Base type is AbstractObject_Type
    
    # Element {http://www.isotc211.org/2005/gmd}initiativeType uses Python identifier initiativeType
    __initiativeType = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'initiativeType'), 'initiativeType', '__httpwww_isotc211_org2005gmd_MD_AggregateInformation_Type_httpwww_isotc211_org2005gmdinitiativeType', False)

    
    initiativeType = property(__initiativeType.value, __initiativeType.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}aggregateDataSetName uses Python identifier aggregateDataSetName
    __aggregateDataSetName = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'aggregateDataSetName'), 'aggregateDataSetName', '__httpwww_isotc211_org2005gmd_MD_AggregateInformation_Type_httpwww_isotc211_org2005gmdaggregateDataSetName', False)

    
    aggregateDataSetName = property(__aggregateDataSetName.value, __aggregateDataSetName.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}aggregateDataSetIdentifier uses Python identifier aggregateDataSetIdentifier
    __aggregateDataSetIdentifier = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'aggregateDataSetIdentifier'), 'aggregateDataSetIdentifier', '__httpwww_isotc211_org2005gmd_MD_AggregateInformation_Type_httpwww_isotc211_org2005gmdaggregateDataSetIdentifier', False)

    
    aggregateDataSetIdentifier = property(__aggregateDataSetIdentifier.value, __aggregateDataSetIdentifier.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}associationType uses Python identifier associationType
    __associationType = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'associationType'), 'associationType', '__httpwww_isotc211_org2005gmd_MD_AggregateInformation_Type_httpwww_isotc211_org2005gmdassociationType', False)

    
    associationType = property(__associationType.value, __associationType.set, None, None)

    
    # Attribute id inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type
    
    # Attribute uuid inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type

    _ElementMap = AbstractObject_Type._ElementMap.copy()
    _ElementMap.update({
        __initiativeType.name() : __initiativeType,
        __aggregateDataSetName.name() : __aggregateDataSetName,
        __aggregateDataSetIdentifier.name() : __aggregateDataSetIdentifier,
        __associationType.name() : __associationType
    })
    _AttributeMap = AbstractObject_Type._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gmd.addCategoryObject('typeBinding', u'MD_AggregateInformation_Type', MD_AggregateInformation_Type)


# Complex type EX_BoundingPolygon_Type with content type ELEMENT_ONLY
class EX_BoundingPolygon_Type (AbstractEX_GeographicExtent_Type):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'EX_BoundingPolygon_Type')
    # Base type is AbstractEX_GeographicExtent_Type
    
    # Element {http://www.isotc211.org/2005/gmd}polygon uses Python identifier polygon
    __polygon = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'polygon'), 'polygon', '__httpwww_isotc211_org2005gmd_EX_BoundingPolygon_Type_httpwww_isotc211_org2005gmdpolygon', True)

    
    polygon = property(__polygon.value, __polygon.set, None, None)

    
    # Element extentTypeCode ({http://www.isotc211.org/2005/gmd}extentTypeCode) inherited from {http://www.isotc211.org/2005/gmd}AbstractEX_GeographicExtent_Type
    
    # Attribute id inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type
    
    # Attribute uuid inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type

    _ElementMap = AbstractEX_GeographicExtent_Type._ElementMap.copy()
    _ElementMap.update({
        __polygon.name() : __polygon
    })
    _AttributeMap = AbstractEX_GeographicExtent_Type._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gmd.addCategoryObject('typeBinding', u'EX_BoundingPolygon_Type', EX_BoundingPolygon_Type)


# Complex type ArcByBulgeType with content type ELEMENT_ONLY
class ArcByBulgeType (ArcStringByBulgeType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'ArcByBulgeType')
    # Base type is ArcStringByBulgeType
    
    # Element pointRep ({http://www.opengis.net/gml/3.2}pointRep) inherited from {http://www.opengis.net/gml/3.2}ArcStringByBulgeType
    
    # Element posList ({http://www.opengis.net/gml/3.2}posList) inherited from {http://www.opengis.net/gml/3.2}ArcStringByBulgeType
    
    # Element coordinates ({http://www.opengis.net/gml/3.2}coordinates) inherited from {http://www.opengis.net/gml/3.2}ArcStringByBulgeType
    
    # Element normal ({http://www.opengis.net/gml/3.2}normal) inherited from {http://www.opengis.net/gml/3.2}ArcStringByBulgeType
    
    # Element bulge ({http://www.opengis.net/gml/3.2}bulge) inherited from {http://www.opengis.net/gml/3.2}ArcStringByBulgeType
    
    # Element pos ({http://www.opengis.net/gml/3.2}pos) inherited from {http://www.opengis.net/gml/3.2}ArcStringByBulgeType
    
    # Element pointProperty ({http://www.opengis.net/gml/3.2}pointProperty) inherited from {http://www.opengis.net/gml/3.2}ArcStringByBulgeType
    
    # Attribute numDerivativeInterior inherited from {http://www.opengis.net/gml/3.2}AbstractCurveSegmentType
    
    # Attribute numDerivativesAtEnd inherited from {http://www.opengis.net/gml/3.2}AbstractCurveSegmentType
    
    # Attribute numArc is restricted from parent
    
    # Attribute numArc uses Python identifier numArc
    __numArc = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'numArc'), 'numArc', '__httpwww_opengis_netgml3_2_ArcStringByBulgeType_numArc', pyxb.binding.datatypes.integer, fixed=True, unicode_default=u'1')
    
    numArc = property(__numArc.value, __numArc.set, None, None)

    
    # Attribute numDerivativesAtStart inherited from {http://www.opengis.net/gml/3.2}AbstractCurveSegmentType
    
    # Attribute interpolation inherited from {http://www.opengis.net/gml/3.2}ArcStringByBulgeType

    _ElementMap = ArcStringByBulgeType._ElementMap.copy()
    _ElementMap.update({
        
    })
    _AttributeMap = ArcStringByBulgeType._AttributeMap.copy()
    _AttributeMap.update({
        __numArc.name() : __numArc
    })
_Namespace_gml.addCategoryObject('typeBinding', u'ArcByBulgeType', ArcByBulgeType)


# Complex type MultiPointType with content type ELEMENT_ONLY
class MultiPointType (AbstractGeometricAggregateType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'MultiPointType')
    # Base type is AbstractGeometricAggregateType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element {http://www.opengis.net/gml/3.2}pointMembers uses Python identifier pointMembers
    __pointMembers = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'pointMembers'), 'pointMembers', '__httpwww_opengis_netgml3_2_MultiPointType_httpwww_opengis_netgml3_2pointMembers', False)

    
    pointMembers = property(__pointMembers.value, __pointMembers.set, None, u'This property element contains a list of points. The order of the elements is significant and shall be preserved when processing the array.')

    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element {http://www.opengis.net/gml/3.2}pointMember uses Python identifier pointMember
    __pointMember = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'pointMember'), 'pointMember', '__httpwww_opengis_netgml3_2_MultiPointType_httpwww_opengis_netgml3_2pointMember', True)

    
    pointMember = property(__pointMember.value, __pointMember.set, None, u'This property element either references a Point via the XLink-attributes or contains the Point element.')

    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Attribute uomLabels inherited from {http://www.opengis.net/gml/3.2}AbstractGeometryType
    
    # Attribute aggregationType inherited from {http://www.opengis.net/gml/3.2}AbstractGeometricAggregateType
    
    # Attribute srsName inherited from {http://www.opengis.net/gml/3.2}AbstractGeometryType
    
    # Attribute id inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Attribute srsDimension inherited from {http://www.opengis.net/gml/3.2}AbstractGeometryType
    
    # Attribute axisLabels inherited from {http://www.opengis.net/gml/3.2}AbstractGeometryType

    _ElementMap = AbstractGeometricAggregateType._ElementMap.copy()
    _ElementMap.update({
        __pointMembers.name() : __pointMembers,
        __pointMember.name() : __pointMember
    })
    _AttributeMap = AbstractGeometricAggregateType._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gml.addCategoryObject('typeBinding', u'MultiPointType', MultiPointType)


# Complex type TopoCurvePropertyType with content type ELEMENT_ONLY
class TopoCurvePropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'TopoCurvePropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.opengis.net/gml/3.2}TopoCurve uses Python identifier TopoCurve
    __TopoCurve = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'TopoCurve'), 'TopoCurve', '__httpwww_opengis_netgml3_2_TopoCurvePropertyType_httpwww_opengis_netgml3_2TopoCurve', False)

    
    TopoCurve = property(__TopoCurve.value, __TopoCurve.set, None, u'gml:TopoCurve represents a homogeneous topological expression, a sequence of directed edges, which if realised are isomorphic to a geometric curve primitive. The intended use of gml:TopoCurve is to appear within a line feature to express the structural and geometric relationships of this feature to other features via the shared edge definitions.\nIf provided, the aggregationType attribute shall have the value "sequence".')

    
    # Attribute owns uses Python identifier owns
    __owns = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'owns'), 'owns', '__httpwww_opengis_netgml3_2_TopoCurvePropertyType_owns', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    owns = property(__owns.value, __owns.set, None, None)


    _ElementMap = {
        __TopoCurve.name() : __TopoCurve
    }
    _AttributeMap = {
        __owns.name() : __owns
    }
_Namespace_gml.addCategoryObject('typeBinding', u'TopoCurvePropertyType', TopoCurvePropertyType)


# Complex type DS_Association_PropertyType with content type ELEMENT_ONLY
class DS_Association_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'DS_Association_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmd}DS_Association uses Python identifier DS_Association
    __DS_Association = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'DS_Association'), 'DS_Association', '__httpwww_isotc211_org2005gmd_DS_Association_PropertyType_httpwww_isotc211_org2005gmdDS_Association', False)

    
    DS_Association = property(__DS_Association.value, __DS_Association.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_isotc211_org2005gmd_DS_Association_PropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_isotc211_org2005gmd_DS_Association_PropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_isotc211_org2005gmd_DS_Association_PropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmd_DS_Association_PropertyType_httpwww_isotc211_org2005gconilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute uuidref uses Python identifier uuidref
    __uuidref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uuidref'), 'uuidref', '__httpwww_isotc211_org2005gmd_DS_Association_PropertyType_uuidref', pyxb.binding.datatypes.string)
    
    uuidref = property(__uuidref.value, __uuidref.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_isotc211_org2005gmd_DS_Association_PropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_isotc211_org2005gmd_DS_Association_PropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_isotc211_org2005gmd_DS_Association_PropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_isotc211_org2005gmd_DS_Association_PropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)


    _ElementMap = {
        __DS_Association.name() : __DS_Association
    }
    _AttributeMap = {
        __type.name() : __type,
        __arcrole.name() : __arcrole,
        __show.name() : __show,
        __nilReason.name() : __nilReason,
        __uuidref.name() : __uuidref,
        __href.name() : __href,
        __actuate.name() : __actuate,
        __title.name() : __title,
        __role.name() : __role
    }
_Namespace_gmd.addCategoryObject('typeBinding', u'DS_Association_PropertyType', DS_Association_PropertyType)


# Complex type DefinitionProxyType with content type ELEMENT_ONLY
class DefinitionProxyType (DefinitionType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'DefinitionProxyType')
    # Base type is DefinitionType
    
    # Element {http://www.opengis.net/gml/3.2}definitionRef uses Python identifier definitionRef
    __definitionRef = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'definitionRef'), 'definitionRef', '__httpwww_opengis_netgml3_2_DefinitionProxyType_httpwww_opengis_netgml3_2definitionRef', False)

    
    definitionRef = property(__definitionRef.value, __definitionRef.set, None, u'')

    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element remarks ({http://www.opengis.net/gml/3.2}remarks) inherited from {http://www.opengis.net/gml/3.2}DefinitionType
    
    # Attribute id_ inherited from {http://www.opengis.net/gml/3.2}DefinitionBaseType

    _ElementMap = DefinitionType._ElementMap.copy()
    _ElementMap.update({
        __definitionRef.name() : __definitionRef
    })
    _AttributeMap = DefinitionType._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gml.addCategoryObject('typeBinding', u'DefinitionProxyType', DefinitionProxyType)


# Complex type TemporalDatumPropertyType with content type ELEMENT_ONLY
class TemporalDatumPropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'TemporalDatumPropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.opengis.net/gml/3.2}TemporalDatum uses Python identifier TemporalDatum
    __TemporalDatum = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'TemporalDatum'), 'TemporalDatum', '__httpwww_opengis_netgml3_2_TemporalDatumPropertyType_httpwww_opengis_netgml3_2TemporalDatum', False)

    
    TemporalDatum = property(__TemporalDatum.value, __TemporalDatum.set, None, u'A gml:TemporalDatum defines the origin of a Temporal Reference System. This type omits the "anchorDefinition" and "realizationEpoch" elements and adds the "origin" element with the dateTime type.')

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_opengis_netgml3_2_TemporalDatumPropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.opengis.net/gml/3.2}remoteSchema uses Python identifier remoteSchema
    __remoteSchema = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'remoteSchema'), 'remoteSchema', '__httpwww_opengis_netgml3_2_TemporalDatumPropertyType_httpwww_opengis_netgml3_2remoteSchema', pyxb.binding.datatypes.anyURI)
    
    remoteSchema = property(__remoteSchema.value, __remoteSchema.set, None, u'')

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_opengis_netgml3_2_TemporalDatumPropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_opengis_netgml3_2_TemporalDatumPropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_opengis_netgml3_2_TemporalDatumPropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'nilReason'), 'nilReason', '__httpwww_opengis_netgml3_2_TemporalDatumPropertyType_nilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_opengis_netgml3_2_TemporalDatumPropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_opengis_netgml3_2_TemporalDatumPropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_opengis_netgml3_2_TemporalDatumPropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)


    _ElementMap = {
        __TemporalDatum.name() : __TemporalDatum
    }
    _AttributeMap = {
        __arcrole.name() : __arcrole,
        __remoteSchema.name() : __remoteSchema,
        __role.name() : __role,
        __show.name() : __show,
        __actuate.name() : __actuate,
        __nilReason.name() : __nilReason,
        __href.name() : __href,
        __type.name() : __type,
        __title.name() : __title
    }
_Namespace_gml.addCategoryObject('typeBinding', u'TemporalDatumPropertyType', TemporalDatumPropertyType)


# Complex type CTD_ANON_7 with content type ELEMENT_ONLY
class CTD_ANON_7 (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmd}CI_Citation uses Python identifier CI_Citation
    __CI_Citation = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'CI_Citation'), 'CI_Citation', '__httpwww_opengis_netgml3_2_CTD_ANON_7_httpwww_isotc211_org2005gmdCI_Citation', False)

    
    CI_Citation = property(__CI_Citation.value, __CI_Citation.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_opengis_netgml3_2_CTD_ANON_7_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute {http://www.opengis.net/gml/3.2}remoteSchema uses Python identifier remoteSchema
    __remoteSchema = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'remoteSchema'), 'remoteSchema', '__httpwww_opengis_netgml3_2_CTD_ANON_7_httpwww_opengis_netgml3_2remoteSchema', pyxb.binding.datatypes.anyURI)
    
    remoteSchema = property(__remoteSchema.value, __remoteSchema.set, None, u'')

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_opengis_netgml3_2_CTD_ANON_7_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_opengis_netgml3_2_CTD_ANON_7_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_opengis_netgml3_2_CTD_ANON_7_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'nilReason'), 'nilReason', '__httpwww_opengis_netgml3_2_CTD_ANON_7_nilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_opengis_netgml3_2_CTD_ANON_7_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_opengis_netgml3_2_CTD_ANON_7_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_opengis_netgml3_2_CTD_ANON_7_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")


    _ElementMap = {
        __CI_Citation.name() : __CI_Citation
    }
    _AttributeMap = {
        __actuate.name() : __actuate,
        __remoteSchema.name() : __remoteSchema,
        __href.name() : __href,
        __type.name() : __type,
        __title.name() : __title,
        __nilReason.name() : __nilReason,
        __arcrole.name() : __arcrole,
        __role.name() : __role,
        __show.name() : __show
    }



# Complex type MD_MediumFormatCode_PropertyType with content type ELEMENT_ONLY
class MD_MediumFormatCode_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_MediumFormatCode_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmd}MD_MediumFormatCode uses Python identifier MD_MediumFormatCode
    __MD_MediumFormatCode = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_MediumFormatCode'), 'MD_MediumFormatCode', '__httpwww_isotc211_org2005gmd_MD_MediumFormatCode_PropertyType_httpwww_isotc211_org2005gmdMD_MediumFormatCode', False)

    
    MD_MediumFormatCode = property(__MD_MediumFormatCode.value, __MD_MediumFormatCode.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmd_MD_MediumFormatCode_PropertyType_httpwww_isotc211_org2005gconilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)


    _ElementMap = {
        __MD_MediumFormatCode.name() : __MD_MediumFormatCode
    }
    _AttributeMap = {
        __nilReason.name() : __nilReason
    }
_Namespace_gmd.addCategoryObject('typeBinding', u'MD_MediumFormatCode_PropertyType', MD_MediumFormatCode_PropertyType)


# Complex type MD_Identification_PropertyType with content type ELEMENT_ONLY
class MD_Identification_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_Identification_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmd}AbstractMD_Identification uses Python identifier AbstractMD_Identification
    __AbstractMD_Identification = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'AbstractMD_Identification'), 'AbstractMD_Identification', '__httpwww_isotc211_org2005gmd_MD_Identification_PropertyType_httpwww_isotc211_org2005gmdAbstractMD_Identification', False)

    
    AbstractMD_Identification = property(__AbstractMD_Identification.value, __AbstractMD_Identification.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_isotc211_org2005gmd_MD_Identification_PropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmd_MD_Identification_PropertyType_httpwww_isotc211_org2005gconilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_isotc211_org2005gmd_MD_Identification_PropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_isotc211_org2005gmd_MD_Identification_PropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_isotc211_org2005gmd_MD_Identification_PropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute uuidref uses Python identifier uuidref
    __uuidref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uuidref'), 'uuidref', '__httpwww_isotc211_org2005gmd_MD_Identification_PropertyType_uuidref', pyxb.binding.datatypes.string)
    
    uuidref = property(__uuidref.value, __uuidref.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_isotc211_org2005gmd_MD_Identification_PropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_isotc211_org2005gmd_MD_Identification_PropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_isotc211_org2005gmd_MD_Identification_PropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")


    _ElementMap = {
        __AbstractMD_Identification.name() : __AbstractMD_Identification
    }
    _AttributeMap = {
        __type.name() : __type,
        __nilReason.name() : __nilReason,
        __title.name() : __title,
        __show.name() : __show,
        __href.name() : __href,
        __uuidref.name() : __uuidref,
        __arcrole.name() : __arcrole,
        __role.name() : __role,
        __actuate.name() : __actuate
    }
_Namespace_gmd.addCategoryObject('typeBinding', u'MD_Identification_PropertyType', MD_Identification_PropertyType)


# Complex type SurfacePatchArrayPropertyType with content type ELEMENT_ONLY
class SurfacePatchArrayPropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'SurfacePatchArrayPropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.opengis.net/gml/3.2}AbstractSurfacePatch uses Python identifier AbstractSurfacePatch
    __AbstractSurfacePatch = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractSurfacePatch'), 'AbstractSurfacePatch', '__httpwww_opengis_netgml3_2_SurfacePatchArrayPropertyType_httpwww_opengis_netgml3_2AbstractSurfacePatch', True)

    
    AbstractSurfacePatch = property(__AbstractSurfacePatch.value, __AbstractSurfacePatch.set, None, u'A surface patch defines a homogenuous portion of a surface. \nThe AbstractSurfacePatch element is the abstract head of the substituition group for all surface patch elements describing a continuous portion of a surface.\nAll surface patches shall have an attribute interpolation (declared in the types derived from gml:AbstractSurfacePatchType) specifying the interpolation mechanism used for the patch using gml:SurfaceInterpolationType.')


    _ElementMap = {
        __AbstractSurfacePatch.name() : __AbstractSurfacePatch
    }
    _AttributeMap = {
        
    }
_Namespace_gml.addCategoryObject('typeBinding', u'SurfacePatchArrayPropertyType', SurfacePatchArrayPropertyType)


# Complex type EX_GeographicBoundingBox_PropertyType with content type ELEMENT_ONLY
class EX_GeographicBoundingBox_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'EX_GeographicBoundingBox_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmd}EX_GeographicBoundingBox uses Python identifier EX_GeographicBoundingBox
    __EX_GeographicBoundingBox = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'EX_GeographicBoundingBox'), 'EX_GeographicBoundingBox', '__httpwww_isotc211_org2005gmd_EX_GeographicBoundingBox_PropertyType_httpwww_isotc211_org2005gmdEX_GeographicBoundingBox', False)

    
    EX_GeographicBoundingBox = property(__EX_GeographicBoundingBox.value, __EX_GeographicBoundingBox.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_isotc211_org2005gmd_EX_GeographicBoundingBox_PropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_isotc211_org2005gmd_EX_GeographicBoundingBox_PropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_isotc211_org2005gmd_EX_GeographicBoundingBox_PropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_isotc211_org2005gmd_EX_GeographicBoundingBox_PropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute uuidref uses Python identifier uuidref
    __uuidref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uuidref'), 'uuidref', '__httpwww_isotc211_org2005gmd_EX_GeographicBoundingBox_PropertyType_uuidref', pyxb.binding.datatypes.string)
    
    uuidref = property(__uuidref.value, __uuidref.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_isotc211_org2005gmd_EX_GeographicBoundingBox_PropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_isotc211_org2005gmd_EX_GeographicBoundingBox_PropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmd_EX_GeographicBoundingBox_PropertyType_httpwww_isotc211_org2005gconilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_isotc211_org2005gmd_EX_GeographicBoundingBox_PropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)


    _ElementMap = {
        __EX_GeographicBoundingBox.name() : __EX_GeographicBoundingBox
    }
    _AttributeMap = {
        __type.name() : __type,
        __actuate.name() : __actuate,
        __show.name() : __show,
        __href.name() : __href,
        __uuidref.name() : __uuidref,
        __arcrole.name() : __arcrole,
        __role.name() : __role,
        __nilReason.name() : __nilReason,
        __title.name() : __title
    }
_Namespace_gmd.addCategoryObject('typeBinding', u'EX_GeographicBoundingBox_PropertyType', EX_GeographicBoundingBox_PropertyType)


# Complex type FeatureCollectionType with content type ELEMENT_ONLY
class FeatureCollectionType (AbstractFeatureCollectionType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'FeatureCollectionType')
    # Base type is AbstractFeatureCollectionType
    
    # Element featureMember ({http://www.opengis.net/gml/3.2}featureMember) inherited from {http://www.opengis.net/gml/3.2}AbstractFeatureCollectionType
    
    # Element featureMembers ({http://www.opengis.net/gml/3.2}featureMembers) inherited from {http://www.opengis.net/gml/3.2}AbstractFeatureCollectionType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element location ({http://www.opengis.net/gml/3.2}location) inherited from {http://www.opengis.net/gml/3.2}AbstractFeatureType
    
    # Element boundedBy ({http://www.opengis.net/gml/3.2}boundedBy) inherited from {http://www.opengis.net/gml/3.2}AbstractFeatureType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Attribute id inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType

    _ElementMap = AbstractFeatureCollectionType._ElementMap.copy()
    _ElementMap.update({
        
    })
    _AttributeMap = AbstractFeatureCollectionType._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gml.addCategoryObject('typeBinding', u'FeatureCollectionType', FeatureCollectionType)


# Complex type MemberName_PropertyType with content type ELEMENT_ONLY
class MemberName_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gco, u'MemberName_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gco}MemberName uses Python identifier MemberName
    __MemberName = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'MemberName'), 'MemberName', '__httpwww_isotc211_org2005gco_MemberName_PropertyType_httpwww_isotc211_org2005gcoMemberName', False)

    
    MemberName = property(__MemberName.value, __MemberName.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_isotc211_org2005gco_MemberName_PropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_isotc211_org2005gco_MemberName_PropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_isotc211_org2005gco_MemberName_PropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_isotc211_org2005gco_MemberName_PropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_isotc211_org2005gco_MemberName_PropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute uuidref uses Python identifier uuidref
    __uuidref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uuidref'), 'uuidref', '__httpwww_isotc211_org2005gco_MemberName_PropertyType_uuidref', pyxb.binding.datatypes.string)
    
    uuidref = property(__uuidref.value, __uuidref.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_isotc211_org2005gco_MemberName_PropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_isotc211_org2005gco_MemberName_PropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gco_MemberName_PropertyType_httpwww_isotc211_org2005gconilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)


    _ElementMap = {
        __MemberName.name() : __MemberName
    }
    _AttributeMap = {
        __title.name() : __title,
        __type.name() : __type,
        __show.name() : __show,
        __href.name() : __href,
        __actuate.name() : __actuate,
        __uuidref.name() : __uuidref,
        __arcrole.name() : __arcrole,
        __role.name() : __role,
        __nilReason.name() : __nilReason
    }
_Namespace_gco.addCategoryObject('typeBinding', u'MemberName_PropertyType', MemberName_PropertyType)


# Complex type MD_Usage_PropertyType with content type ELEMENT_ONLY
class MD_Usage_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_Usage_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmd}MD_Usage uses Python identifier MD_Usage
    __MD_Usage = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_Usage'), 'MD_Usage', '__httpwww_isotc211_org2005gmd_MD_Usage_PropertyType_httpwww_isotc211_org2005gmdMD_Usage', False)

    
    MD_Usage = property(__MD_Usage.value, __MD_Usage.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_isotc211_org2005gmd_MD_Usage_PropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_isotc211_org2005gmd_MD_Usage_PropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_isotc211_org2005gmd_MD_Usage_PropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_isotc211_org2005gmd_MD_Usage_PropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_isotc211_org2005gmd_MD_Usage_PropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute uuidref uses Python identifier uuidref
    __uuidref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uuidref'), 'uuidref', '__httpwww_isotc211_org2005gmd_MD_Usage_PropertyType_uuidref', pyxb.binding.datatypes.string)
    
    uuidref = property(__uuidref.value, __uuidref.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_isotc211_org2005gmd_MD_Usage_PropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_isotc211_org2005gmd_MD_Usage_PropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmd_MD_Usage_PropertyType_httpwww_isotc211_org2005gconilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)


    _ElementMap = {
        __MD_Usage.name() : __MD_Usage
    }
    _AttributeMap = {
        __type.name() : __type,
        __title.name() : __title,
        __show.name() : __show,
        __href.name() : __href,
        __actuate.name() : __actuate,
        __uuidref.name() : __uuidref,
        __arcrole.name() : __arcrole,
        __role.name() : __role,
        __nilReason.name() : __nilReason
    }
_Namespace_gmd.addCategoryObject('typeBinding', u'MD_Usage_PropertyType', MD_Usage_PropertyType)


# Complex type FeatureArrayPropertyType with content type ELEMENT_ONLY
class FeatureArrayPropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'FeatureArrayPropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.opengis.net/gml/3.2}AbstractFeature uses Python identifier AbstractFeature
    __AbstractFeature = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractFeature'), 'AbstractFeature', '__httpwww_opengis_netgml3_2_FeatureArrayPropertyType_httpwww_opengis_netgml3_2AbstractFeature', True)

    
    AbstractFeature = property(__AbstractFeature.value, __AbstractFeature.set, None, u'This abstract element serves as the head of a substitution group which may contain any elements whose content model is derived from gml:AbstractFeatureType.  This may be used as a variable in the construction of content models.  \ngml:AbstractFeature may be thought of as "anything that is a GML feature" and may be used to define variables or templates in which the value of a GML property is "any feature". This occurs in particular in a GML feature collection where the feature member properties contain one or multiple copies of gml:AbstractFeature respectively.')


    _ElementMap = {
        __AbstractFeature.name() : __AbstractFeature
    }
    _AttributeMap = {
        
    }
_Namespace_gml.addCategoryObject('typeBinding', u'FeatureArrayPropertyType', FeatureArrayPropertyType)


# Complex type ClothoidType with content type ELEMENT_ONLY
class ClothoidType (AbstractCurveSegmentType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'ClothoidType')
    # Base type is AbstractCurveSegmentType
    
    # Element {http://www.opengis.net/gml/3.2}endParameter uses Python identifier endParameter
    __endParameter = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'endParameter'), 'endParameter', '__httpwww_opengis_netgml3_2_ClothoidType_httpwww_opengis_netgml3_2endParameter', False)

    
    endParameter = property(__endParameter.value, __endParameter.set, None, None)

    
    # Element {http://www.opengis.net/gml/3.2}refLocation uses Python identifier refLocation
    __refLocation = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'refLocation'), 'refLocation', '__httpwww_opengis_netgml3_2_ClothoidType_httpwww_opengis_netgml3_2refLocation', False)

    
    refLocation = property(__refLocation.value, __refLocation.set, None, None)

    
    # Element {http://www.opengis.net/gml/3.2}scaleFactor uses Python identifier scaleFactor
    __scaleFactor = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'scaleFactor'), 'scaleFactor', '__httpwww_opengis_netgml3_2_ClothoidType_httpwww_opengis_netgml3_2scaleFactor', False)

    
    scaleFactor = property(__scaleFactor.value, __scaleFactor.set, None, None)

    
    # Element {http://www.opengis.net/gml/3.2}startParameter uses Python identifier startParameter
    __startParameter = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'startParameter'), 'startParameter', '__httpwww_opengis_netgml3_2_ClothoidType_httpwww_opengis_netgml3_2startParameter', False)

    
    startParameter = property(__startParameter.value, __startParameter.set, None, None)

    
    # Attribute numDerivativesAtEnd inherited from {http://www.opengis.net/gml/3.2}AbstractCurveSegmentType
    
    # Attribute numDerivativesAtStart inherited from {http://www.opengis.net/gml/3.2}AbstractCurveSegmentType
    
    # Attribute numDerivativeInterior inherited from {http://www.opengis.net/gml/3.2}AbstractCurveSegmentType
    
    # Attribute interpolation uses Python identifier interpolation
    __interpolation = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'interpolation'), 'interpolation', '__httpwww_opengis_netgml3_2_ClothoidType_interpolation', CurveInterpolationType, fixed=True, unicode_default=u'clothoid')
    
    interpolation = property(__interpolation.value, __interpolation.set, None, None)


    _ElementMap = AbstractCurveSegmentType._ElementMap.copy()
    _ElementMap.update({
        __endParameter.name() : __endParameter,
        __refLocation.name() : __refLocation,
        __scaleFactor.name() : __scaleFactor,
        __startParameter.name() : __startParameter
    })
    _AttributeMap = AbstractCurveSegmentType._AttributeMap.copy()
    _AttributeMap.update({
        __interpolation.name() : __interpolation
    })
_Namespace_gml.addCategoryObject('typeBinding', u'ClothoidType', ClothoidType)


# Complex type TimeCalendarEraPropertyType with content type ELEMENT_ONLY
class TimeCalendarEraPropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'TimeCalendarEraPropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.opengis.net/gml/3.2}TimeCalendarEra uses Python identifier TimeCalendarEra
    __TimeCalendarEra = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'TimeCalendarEra'), 'TimeCalendarEra', '__httpwww_opengis_netgml3_2_TimeCalendarEraPropertyType_httpwww_opengis_netgml3_2TimeCalendarEra', False)

    
    TimeCalendarEra = property(__TimeCalendarEra.value, __TimeCalendarEra.set, None, u'gml:TimeCalendarEra inherits basic properties from gml:DefinitionType and has the following additional properties:\n-\tgml:referenceEvent is the name or description of a mythical or historic event which fixes the position of the base scale of the calendar era.  This is given as text or using a link to description held elsewhere.\n-\tgml:referenceDate specifies the date of the referenceEvent expressed as a date in the given calendar.  In most calendars, this date is the origin (i.e., the first day) of the scale, but this is not always true.\n-\tgml:julianReference specifies the Julian date that corresponds to the reference date.  The Julian day number is an integer value; the Julian date is a decimal value that allows greater resolution.  Transforming calendar dates to and from Julian dates provides a relatively simple basis for transforming dates from one calendar to another.\n-\tgml:epochOfUse is the period for which the calendar era was used as a basis for dating.')

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_opengis_netgml3_2_TimeCalendarEraPropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute owns uses Python identifier owns
    __owns = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'owns'), 'owns', '__httpwww_opengis_netgml3_2_TimeCalendarEraPropertyType_owns', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    owns = property(__owns.value, __owns.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_opengis_netgml3_2_TimeCalendarEraPropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_opengis_netgml3_2_TimeCalendarEraPropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_opengis_netgml3_2_TimeCalendarEraPropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_opengis_netgml3_2_TimeCalendarEraPropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'nilReason'), 'nilReason', '__httpwww_opengis_netgml3_2_TimeCalendarEraPropertyType_nilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_opengis_netgml3_2_TimeCalendarEraPropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.opengis.net/gml/3.2}remoteSchema uses Python identifier remoteSchema
    __remoteSchema = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'remoteSchema'), 'remoteSchema', '__httpwww_opengis_netgml3_2_TimeCalendarEraPropertyType_httpwww_opengis_netgml3_2remoteSchema', pyxb.binding.datatypes.anyURI)
    
    remoteSchema = property(__remoteSchema.value, __remoteSchema.set, None, u'')

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_opengis_netgml3_2_TimeCalendarEraPropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")


    _ElementMap = {
        __TimeCalendarEra.name() : __TimeCalendarEra
    }
    _AttributeMap = {
        __role.name() : __role,
        __owns.name() : __owns,
        __actuate.name() : __actuate,
        __title.name() : __title,
        __href.name() : __href,
        __type.name() : __type,
        __nilReason.name() : __nilReason,
        __arcrole.name() : __arcrole,
        __remoteSchema.name() : __remoteSchema,
        __show.name() : __show
    }
_Namespace_gml.addCategoryObject('typeBinding', u'TimeCalendarEraPropertyType', TimeCalendarEraPropertyType)


# Complex type MD_RangeDimension_Type with content type ELEMENT_ONLY
class MD_RangeDimension_Type (AbstractObject_Type):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_RangeDimension_Type')
    # Base type is AbstractObject_Type
    
    # Element {http://www.isotc211.org/2005/gmd}descriptor uses Python identifier descriptor
    __descriptor = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'descriptor'), 'descriptor', '__httpwww_isotc211_org2005gmd_MD_RangeDimension_Type_httpwww_isotc211_org2005gmddescriptor', False)

    
    descriptor = property(__descriptor.value, __descriptor.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}sequenceIdentifier uses Python identifier sequenceIdentifier
    __sequenceIdentifier = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'sequenceIdentifier'), 'sequenceIdentifier', '__httpwww_isotc211_org2005gmd_MD_RangeDimension_Type_httpwww_isotc211_org2005gmdsequenceIdentifier', False)

    
    sequenceIdentifier = property(__sequenceIdentifier.value, __sequenceIdentifier.set, None, None)

    
    # Attribute id inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type
    
    # Attribute uuid inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type

    _ElementMap = AbstractObject_Type._ElementMap.copy()
    _ElementMap.update({
        __descriptor.name() : __descriptor,
        __sequenceIdentifier.name() : __sequenceIdentifier
    })
    _AttributeMap = AbstractObject_Type._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gmd.addCategoryObject('typeBinding', u'MD_RangeDimension_Type', MD_RangeDimension_Type)


# Complex type ImageCRSPropertyType with content type ELEMENT_ONLY
class ImageCRSPropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'ImageCRSPropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.opengis.net/gml/3.2}ImageCRS uses Python identifier ImageCRS
    __ImageCRS = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'ImageCRS'), 'ImageCRS', '__httpwww_opengis_netgml3_2_ImageCRSPropertyType_httpwww_opengis_netgml3_2ImageCRS', False)

    
    ImageCRS = property(__ImageCRS.value, __ImageCRS.set, None, u'gml:ImageCRS is an engineering coordinate reference system applied to locations in images. Image coordinate reference systems are treated as a separate sub-type because the definition of the associated image datum contains two attributes not relevant to other engineering datums.')

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_opengis_netgml3_2_ImageCRSPropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.opengis.net/gml/3.2}remoteSchema uses Python identifier remoteSchema
    __remoteSchema = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'remoteSchema'), 'remoteSchema', '__httpwww_opengis_netgml3_2_ImageCRSPropertyType_httpwww_opengis_netgml3_2remoteSchema', pyxb.binding.datatypes.anyURI)
    
    remoteSchema = property(__remoteSchema.value, __remoteSchema.set, None, u'')

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_opengis_netgml3_2_ImageCRSPropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_opengis_netgml3_2_ImageCRSPropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_opengis_netgml3_2_ImageCRSPropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'nilReason'), 'nilReason', '__httpwww_opengis_netgml3_2_ImageCRSPropertyType_nilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_opengis_netgml3_2_ImageCRSPropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_opengis_netgml3_2_ImageCRSPropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_opengis_netgml3_2_ImageCRSPropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)


    _ElementMap = {
        __ImageCRS.name() : __ImageCRS
    }
    _AttributeMap = {
        __role.name() : __role,
        __remoteSchema.name() : __remoteSchema,
        __show.name() : __show,
        __actuate.name() : __actuate,
        __href.name() : __href,
        __nilReason.name() : __nilReason,
        __type.name() : __type,
        __title.name() : __title,
        __arcrole.name() : __arcrole
    }
_Namespace_gml.addCategoryObject('typeBinding', u'ImageCRSPropertyType', ImageCRSPropertyType)


# Complex type MultiSurfaceType with content type ELEMENT_ONLY
class MultiSurfaceType (AbstractGeometricAggregateType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'MultiSurfaceType')
    # Base type is AbstractGeometricAggregateType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element {http://www.opengis.net/gml/3.2}surfaceMember uses Python identifier surfaceMember
    __surfaceMember = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'surfaceMember'), 'surfaceMember', '__httpwww_opengis_netgml3_2_MultiSurfaceType_httpwww_opengis_netgml3_2surfaceMember', True)

    
    surfaceMember = property(__surfaceMember.value, __surfaceMember.set, None, u'This property element either references a surface via the XLink-attributes or contains the surface element. A surface element is any element, which is substitutable for gml:AbstractSurface.')

    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element {http://www.opengis.net/gml/3.2}surfaceMembers uses Python identifier surfaceMembers
    __surfaceMembers = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'surfaceMembers'), 'surfaceMembers', '__httpwww_opengis_netgml3_2_MultiSurfaceType_httpwww_opengis_netgml3_2surfaceMembers', False)

    
    surfaceMembers = property(__surfaceMembers.value, __surfaceMembers.set, None, u'This property element contains a list of surfaces. The order of the elements is significant and shall be preserved when processing the array.')

    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Attribute uomLabels inherited from {http://www.opengis.net/gml/3.2}AbstractGeometryType
    
    # Attribute aggregationType inherited from {http://www.opengis.net/gml/3.2}AbstractGeometricAggregateType
    
    # Attribute srsName inherited from {http://www.opengis.net/gml/3.2}AbstractGeometryType
    
    # Attribute id inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Attribute srsDimension inherited from {http://www.opengis.net/gml/3.2}AbstractGeometryType
    
    # Attribute axisLabels inherited from {http://www.opengis.net/gml/3.2}AbstractGeometryType

    _ElementMap = AbstractGeometricAggregateType._ElementMap.copy()
    _ElementMap.update({
        __surfaceMember.name() : __surfaceMember,
        __surfaceMembers.name() : __surfaceMembers
    })
    _AttributeMap = AbstractGeometricAggregateType._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gml.addCategoryObject('typeBinding', u'MultiSurfaceType', MultiSurfaceType)


# Complex type MD_LegalConstraints_PropertyType with content type ELEMENT_ONLY
class MD_LegalConstraints_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_LegalConstraints_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmd}MD_LegalConstraints uses Python identifier MD_LegalConstraints
    __MD_LegalConstraints = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_LegalConstraints'), 'MD_LegalConstraints', '__httpwww_isotc211_org2005gmd_MD_LegalConstraints_PropertyType_httpwww_isotc211_org2005gmdMD_LegalConstraints', False)

    
    MD_LegalConstraints = property(__MD_LegalConstraints.value, __MD_LegalConstraints.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_isotc211_org2005gmd_MD_LegalConstraints_PropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_isotc211_org2005gmd_MD_LegalConstraints_PropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_isotc211_org2005gmd_MD_LegalConstraints_PropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_isotc211_org2005gmd_MD_LegalConstraints_PropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute uuidref uses Python identifier uuidref
    __uuidref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uuidref'), 'uuidref', '__httpwww_isotc211_org2005gmd_MD_LegalConstraints_PropertyType_uuidref', pyxb.binding.datatypes.string)
    
    uuidref = property(__uuidref.value, __uuidref.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_isotc211_org2005gmd_MD_LegalConstraints_PropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmd_MD_LegalConstraints_PropertyType_httpwww_isotc211_org2005gconilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_isotc211_org2005gmd_MD_LegalConstraints_PropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_isotc211_org2005gmd_MD_LegalConstraints_PropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")


    _ElementMap = {
        __MD_LegalConstraints.name() : __MD_LegalConstraints
    }
    _AttributeMap = {
        __type.name() : __type,
        __href.name() : __href,
        __actuate.name() : __actuate,
        __title.name() : __title,
        __uuidref.name() : __uuidref,
        __role.name() : __role,
        __nilReason.name() : __nilReason,
        __arcrole.name() : __arcrole,
        __show.name() : __show
    }
_Namespace_gmd.addCategoryObject('typeBinding', u'MD_LegalConstraints_PropertyType', MD_LegalConstraints_PropertyType)


# Complex type DQ_TemporalValidity_PropertyType with content type ELEMENT_ONLY
class DQ_TemporalValidity_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'DQ_TemporalValidity_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmd}DQ_TemporalValidity uses Python identifier DQ_TemporalValidity
    __DQ_TemporalValidity = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'DQ_TemporalValidity'), 'DQ_TemporalValidity', '__httpwww_isotc211_org2005gmd_DQ_TemporalValidity_PropertyType_httpwww_isotc211_org2005gmdDQ_TemporalValidity', False)

    
    DQ_TemporalValidity = property(__DQ_TemporalValidity.value, __DQ_TemporalValidity.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_isotc211_org2005gmd_DQ_TemporalValidity_PropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_isotc211_org2005gmd_DQ_TemporalValidity_PropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_isotc211_org2005gmd_DQ_TemporalValidity_PropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_isotc211_org2005gmd_DQ_TemporalValidity_PropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmd_DQ_TemporalValidity_PropertyType_httpwww_isotc211_org2005gconilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute uuidref uses Python identifier uuidref
    __uuidref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uuidref'), 'uuidref', '__httpwww_isotc211_org2005gmd_DQ_TemporalValidity_PropertyType_uuidref', pyxb.binding.datatypes.string)
    
    uuidref = property(__uuidref.value, __uuidref.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_isotc211_org2005gmd_DQ_TemporalValidity_PropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_isotc211_org2005gmd_DQ_TemporalValidity_PropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_isotc211_org2005gmd_DQ_TemporalValidity_PropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")


    _ElementMap = {
        __DQ_TemporalValidity.name() : __DQ_TemporalValidity
    }
    _AttributeMap = {
        __role.name() : __role,
        __type.name() : __type,
        __arcrole.name() : __arcrole,
        __title.name() : __title,
        __nilReason.name() : __nilReason,
        __uuidref.name() : __uuidref,
        __show.name() : __show,
        __href.name() : __href,
        __actuate.name() : __actuate
    }
_Namespace_gmd.addCategoryObject('typeBinding', u'DQ_TemporalValidity_PropertyType', DQ_TemporalValidity_PropertyType)


# Complex type BSplineType with content type ELEMENT_ONLY
class BSplineType (AbstractCurveSegmentType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'BSplineType')
    # Base type is AbstractCurveSegmentType
    
    # Element {http://www.opengis.net/gml/3.2}coordinates uses Python identifier coordinates
    __coordinates = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'coordinates'), 'coordinates', '__httpwww_opengis_netgml3_2_BSplineType_httpwww_opengis_netgml3_2coordinates', False)

    
    coordinates = property(__coordinates.value, __coordinates.set, None, u'')

    
    # Element {http://www.opengis.net/gml/3.2}pointRep uses Python identifier pointRep
    __pointRep = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'pointRep'), 'pointRep', '__httpwww_opengis_netgml3_2_BSplineType_httpwww_opengis_netgml3_2pointRep', True)

    
    pointRep = property(__pointRep.value, __pointRep.set, None, u'')

    
    # Element {http://www.opengis.net/gml/3.2}degree uses Python identifier degree
    __degree = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'degree'), 'degree', '__httpwww_opengis_netgml3_2_BSplineType_httpwww_opengis_netgml3_2degree', False)

    
    degree = property(__degree.value, __degree.set, None, None)

    
    # Element {http://www.opengis.net/gml/3.2}pos uses Python identifier pos
    __pos = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'pos'), 'pos', '__httpwww_opengis_netgml3_2_BSplineType_httpwww_opengis_netgml3_2pos', True)

    
    pos = property(__pos.value, __pos.set, None, None)

    
    # Element {http://www.opengis.net/gml/3.2}knot uses Python identifier knot
    __knot = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'knot'), 'knot', '__httpwww_opengis_netgml3_2_BSplineType_httpwww_opengis_netgml3_2knot', True)

    
    knot = property(__knot.value, __knot.set, None, None)

    
    # Element {http://www.opengis.net/gml/3.2}posList uses Python identifier posList
    __posList = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'posList'), 'posList', '__httpwww_opengis_netgml3_2_BSplineType_httpwww_opengis_netgml3_2posList', False)

    
    posList = property(__posList.value, __posList.set, None, None)

    
    # Element {http://www.opengis.net/gml/3.2}pointProperty uses Python identifier pointProperty
    __pointProperty = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'pointProperty'), 'pointProperty', '__httpwww_opengis_netgml3_2_BSplineType_httpwww_opengis_netgml3_2pointProperty', True)

    
    pointProperty = property(__pointProperty.value, __pointProperty.set, None, u'This property element either references a point via the XLink-attributes or contains the point element. pointProperty is the predefined property which may be used by GML Application Schemas whenever a GML feature has a property with a value that is substitutable for Point.')

    
    # Attribute knotType uses Python identifier knotType
    __knotType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'knotType'), 'knotType', '__httpwww_opengis_netgml3_2_BSplineType_knotType', KnotTypesType)
    
    knotType = property(__knotType.value, __knotType.set, None, None)

    
    # Attribute numDerivativesAtEnd inherited from {http://www.opengis.net/gml/3.2}AbstractCurveSegmentType
    
    # Attribute numDerivativeInterior inherited from {http://www.opengis.net/gml/3.2}AbstractCurveSegmentType
    
    # Attribute numDerivativesAtStart inherited from {http://www.opengis.net/gml/3.2}AbstractCurveSegmentType
    
    # Attribute isPolynomial uses Python identifier isPolynomial
    __isPolynomial = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'isPolynomial'), 'isPolynomial', '__httpwww_opengis_netgml3_2_BSplineType_isPolynomial', pyxb.binding.datatypes.boolean)
    
    isPolynomial = property(__isPolynomial.value, __isPolynomial.set, None, None)

    
    # Attribute interpolation uses Python identifier interpolation
    __interpolation = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'interpolation'), 'interpolation', '__httpwww_opengis_netgml3_2_BSplineType_interpolation', CurveInterpolationType, unicode_default=u'polynomialSpline')
    
    interpolation = property(__interpolation.value, __interpolation.set, None, None)


    _ElementMap = AbstractCurveSegmentType._ElementMap.copy()
    _ElementMap.update({
        __coordinates.name() : __coordinates,
        __pointRep.name() : __pointRep,
        __degree.name() : __degree,
        __pos.name() : __pos,
        __knot.name() : __knot,
        __posList.name() : __posList,
        __pointProperty.name() : __pointProperty
    })
    _AttributeMap = AbstractCurveSegmentType._AttributeMap.copy()
    _AttributeMap.update({
        __knotType.name() : __knotType,
        __isPolynomial.name() : __isPolynomial,
        __interpolation.name() : __interpolation
    })
_Namespace_gml.addCategoryObject('typeBinding', u'BSplineType', BSplineType)


# Complex type DS_AssociationTypeCode_PropertyType with content type ELEMENT_ONLY
class DS_AssociationTypeCode_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'DS_AssociationTypeCode_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmd}DS_AssociationTypeCode uses Python identifier DS_AssociationTypeCode
    __DS_AssociationTypeCode = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'DS_AssociationTypeCode'), 'DS_AssociationTypeCode', '__httpwww_isotc211_org2005gmd_DS_AssociationTypeCode_PropertyType_httpwww_isotc211_org2005gmdDS_AssociationTypeCode', False)

    
    DS_AssociationTypeCode = property(__DS_AssociationTypeCode.value, __DS_AssociationTypeCode.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmd_DS_AssociationTypeCode_PropertyType_httpwww_isotc211_org2005gconilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)


    _ElementMap = {
        __DS_AssociationTypeCode.name() : __DS_AssociationTypeCode
    }
    _AttributeMap = {
        __nilReason.name() : __nilReason
    }
_Namespace_gmd.addCategoryObject('typeBinding', u'DS_AssociationTypeCode_PropertyType', DS_AssociationTypeCode_PropertyType)


# Complex type DQ_NonQuantitativeAttributeAccuracy_PropertyType with content type ELEMENT_ONLY
class DQ_NonQuantitativeAttributeAccuracy_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'DQ_NonQuantitativeAttributeAccuracy_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmd}DQ_NonQuantitativeAttributeAccuracy uses Python identifier DQ_NonQuantitativeAttributeAccuracy
    __DQ_NonQuantitativeAttributeAccuracy = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'DQ_NonQuantitativeAttributeAccuracy'), 'DQ_NonQuantitativeAttributeAccuracy', '__httpwww_isotc211_org2005gmd_DQ_NonQuantitativeAttributeAccuracy_PropertyType_httpwww_isotc211_org2005gmdDQ_NonQuantitativeAttributeAccuracy', False)

    
    DQ_NonQuantitativeAttributeAccuracy = property(__DQ_NonQuantitativeAttributeAccuracy.value, __DQ_NonQuantitativeAttributeAccuracy.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_isotc211_org2005gmd_DQ_NonQuantitativeAttributeAccuracy_PropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_isotc211_org2005gmd_DQ_NonQuantitativeAttributeAccuracy_PropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_isotc211_org2005gmd_DQ_NonQuantitativeAttributeAccuracy_PropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_isotc211_org2005gmd_DQ_NonQuantitativeAttributeAccuracy_PropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute uuidref uses Python identifier uuidref
    __uuidref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uuidref'), 'uuidref', '__httpwww_isotc211_org2005gmd_DQ_NonQuantitativeAttributeAccuracy_PropertyType_uuidref', pyxb.binding.datatypes.string)
    
    uuidref = property(__uuidref.value, __uuidref.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_isotc211_org2005gmd_DQ_NonQuantitativeAttributeAccuracy_PropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_isotc211_org2005gmd_DQ_NonQuantitativeAttributeAccuracy_PropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_isotc211_org2005gmd_DQ_NonQuantitativeAttributeAccuracy_PropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmd_DQ_NonQuantitativeAttributeAccuracy_PropertyType_httpwww_isotc211_org2005gconilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)


    _ElementMap = {
        __DQ_NonQuantitativeAttributeAccuracy.name() : __DQ_NonQuantitativeAttributeAccuracy
    }
    _AttributeMap = {
        __type.name() : __type,
        __show.name() : __show,
        __href.name() : __href,
        __actuate.name() : __actuate,
        __uuidref.name() : __uuidref,
        __arcrole.name() : __arcrole,
        __title.name() : __title,
        __role.name() : __role,
        __nilReason.name() : __nilReason
    }
_Namespace_gmd.addCategoryObject('typeBinding', u'DQ_NonQuantitativeAttributeAccuracy_PropertyType', DQ_NonQuantitativeAttributeAccuracy_PropertyType)


# Complex type CI_OnlineResource_Type with content type ELEMENT_ONLY
class CI_OnlineResource_Type (AbstractObject_Type):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'CI_OnlineResource_Type')
    # Base type is AbstractObject_Type
    
    # Element {http://www.isotc211.org/2005/gmd}description uses Python identifier description
    __description = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'description'), 'description', '__httpwww_isotc211_org2005gmd_CI_OnlineResource_Type_httpwww_isotc211_org2005gmddescription', False)

    
    description = property(__description.value, __description.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}function uses Python identifier function
    __function = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'function'), 'function', '__httpwww_isotc211_org2005gmd_CI_OnlineResource_Type_httpwww_isotc211_org2005gmdfunction', False)

    
    function = property(__function.value, __function.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}name uses Python identifier name
    __name = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'name'), 'name', '__httpwww_isotc211_org2005gmd_CI_OnlineResource_Type_httpwww_isotc211_org2005gmdname', False)

    
    name = property(__name.value, __name.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}linkage uses Python identifier linkage
    __linkage = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'linkage'), 'linkage', '__httpwww_isotc211_org2005gmd_CI_OnlineResource_Type_httpwww_isotc211_org2005gmdlinkage', False)

    
    linkage = property(__linkage.value, __linkage.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}protocol uses Python identifier protocol
    __protocol = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'protocol'), 'protocol', '__httpwww_isotc211_org2005gmd_CI_OnlineResource_Type_httpwww_isotc211_org2005gmdprotocol', False)

    
    protocol = property(__protocol.value, __protocol.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}applicationProfile uses Python identifier applicationProfile
    __applicationProfile = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'applicationProfile'), 'applicationProfile', '__httpwww_isotc211_org2005gmd_CI_OnlineResource_Type_httpwww_isotc211_org2005gmdapplicationProfile', False)

    
    applicationProfile = property(__applicationProfile.value, __applicationProfile.set, None, None)

    
    # Attribute id inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type
    
    # Attribute uuid inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type

    _ElementMap = AbstractObject_Type._ElementMap.copy()
    _ElementMap.update({
        __description.name() : __description,
        __function.name() : __function,
        __name.name() : __name,
        __linkage.name() : __linkage,
        __protocol.name() : __protocol,
        __applicationProfile.name() : __applicationProfile
    })
    _AttributeMap = AbstractObject_Type._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gmd.addCategoryObject('typeBinding', u'CI_OnlineResource_Type', CI_OnlineResource_Type)


# Complex type DQ_ThematicAccuracy_PropertyType with content type ELEMENT_ONLY
class DQ_ThematicAccuracy_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'DQ_ThematicAccuracy_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmd}AbstractDQ_ThematicAccuracy uses Python identifier AbstractDQ_ThematicAccuracy
    __AbstractDQ_ThematicAccuracy = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'AbstractDQ_ThematicAccuracy'), 'AbstractDQ_ThematicAccuracy', '__httpwww_isotc211_org2005gmd_DQ_ThematicAccuracy_PropertyType_httpwww_isotc211_org2005gmdAbstractDQ_ThematicAccuracy', False)

    
    AbstractDQ_ThematicAccuracy = property(__AbstractDQ_ThematicAccuracy.value, __AbstractDQ_ThematicAccuracy.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_isotc211_org2005gmd_DQ_ThematicAccuracy_PropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_isotc211_org2005gmd_DQ_ThematicAccuracy_PropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_isotc211_org2005gmd_DQ_ThematicAccuracy_PropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_isotc211_org2005gmd_DQ_ThematicAccuracy_PropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_isotc211_org2005gmd_DQ_ThematicAccuracy_PropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_isotc211_org2005gmd_DQ_ThematicAccuracy_PropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute uuidref uses Python identifier uuidref
    __uuidref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uuidref'), 'uuidref', '__httpwww_isotc211_org2005gmd_DQ_ThematicAccuracy_PropertyType_uuidref', pyxb.binding.datatypes.string)
    
    uuidref = property(__uuidref.value, __uuidref.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_isotc211_org2005gmd_DQ_ThematicAccuracy_PropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmd_DQ_ThematicAccuracy_PropertyType_httpwww_isotc211_org2005gconilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)


    _ElementMap = {
        __AbstractDQ_ThematicAccuracy.name() : __AbstractDQ_ThematicAccuracy
    }
    _AttributeMap = {
        __show.name() : __show,
        __type.name() : __type,
        __role.name() : __role,
        __href.name() : __href,
        __actuate.name() : __actuate,
        __title.name() : __title,
        __uuidref.name() : __uuidref,
        __arcrole.name() : __arcrole,
        __nilReason.name() : __nilReason
    }
_Namespace_gmd.addCategoryObject('typeBinding', u'DQ_ThematicAccuracy_PropertyType', DQ_ThematicAccuracy_PropertyType)


# Complex type DS_Initiative_Type with content type ELEMENT_ONLY
class DS_Initiative_Type (AbstractDS_Aggregate_Type):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'DS_Initiative_Type')
    # Base type is AbstractDS_Aggregate_Type
    
    # Element superset ({http://www.isotc211.org/2005/gmd}superset) inherited from {http://www.isotc211.org/2005/gmd}AbstractDS_Aggregate_Type
    
    # Element composedOf ({http://www.isotc211.org/2005/gmd}composedOf) inherited from {http://www.isotc211.org/2005/gmd}AbstractDS_Aggregate_Type
    
    # Element seriesMetadata ({http://www.isotc211.org/2005/gmd}seriesMetadata) inherited from {http://www.isotc211.org/2005/gmd}AbstractDS_Aggregate_Type
    
    # Element subset ({http://www.isotc211.org/2005/gmd}subset) inherited from {http://www.isotc211.org/2005/gmd}AbstractDS_Aggregate_Type
    
    # Attribute id inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type
    
    # Attribute uuid inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type

    _ElementMap = AbstractDS_Aggregate_Type._ElementMap.copy()
    _ElementMap.update({
        
    })
    _AttributeMap = AbstractDS_Aggregate_Type._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gmd.addCategoryObject('typeBinding', u'DS_Initiative_Type', DS_Initiative_Type)


# Complex type TopoComplexType with content type ELEMENT_ONLY
class TopoComplexType (AbstractTopologyType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'TopoComplexType')
    # Base type is AbstractTopologyType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element {http://www.opengis.net/gml/3.2}superComplex uses Python identifier superComplex
    __superComplex = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'superComplex'), 'superComplex', '__httpwww_opengis_netgml3_2_TopoComplexType_httpwww_opengis_netgml3_2superComplex', True)

    
    superComplex = property(__superComplex.value, __superComplex.set, None, u'The property elements gml:subComplex, gml:superComplex and gml:maximalComplex provide an encoding for relationships between topology complexes as described for gml:TopoComplex above.')

    
    # Element {http://www.opengis.net/gml/3.2}topoPrimitiveMembers uses Python identifier topoPrimitiveMembers
    __topoPrimitiveMembers = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'topoPrimitiveMembers'), 'topoPrimitiveMembers', '__httpwww_opengis_netgml3_2_TopoComplexType_httpwww_opengis_netgml3_2topoPrimitiveMembers', False)

    
    topoPrimitiveMembers = property(__topoPrimitiveMembers.value, __topoPrimitiveMembers.set, None, u'The gml:topoPrimitiveMembers property element encodes the relationship between a topology complex and an arbitrary number of topology primitives.')

    
    # Element {http://www.opengis.net/gml/3.2}maximalComplex uses Python identifier maximalComplex
    __maximalComplex = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'maximalComplex'), 'maximalComplex', '__httpwww_opengis_netgml3_2_TopoComplexType_httpwww_opengis_netgml3_2maximalComplex', False)

    
    maximalComplex = property(__maximalComplex.value, __maximalComplex.set, None, u'The property elements gml:subComplex, gml:superComplex and gml:maximalComplex provide an encoding for relationships between topology complexes as described for gml:TopoComplex above.')

    
    # Element {http://www.opengis.net/gml/3.2}subComplex uses Python identifier subComplex
    __subComplex = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'subComplex'), 'subComplex', '__httpwww_opengis_netgml3_2_TopoComplexType_httpwww_opengis_netgml3_2subComplex', True)

    
    subComplex = property(__subComplex.value, __subComplex.set, None, u'The property elements gml:subComplex, gml:superComplex and gml:maximalComplex provide an encoding for relationships between topology complexes as described for gml:TopoComplex above.')

    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element {http://www.opengis.net/gml/3.2}topoPrimitiveMember uses Python identifier topoPrimitiveMember
    __topoPrimitiveMember = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'topoPrimitiveMember'), 'topoPrimitiveMember', '__httpwww_opengis_netgml3_2_TopoComplexType_httpwww_opengis_netgml3_2topoPrimitiveMember', True)

    
    topoPrimitiveMember = property(__topoPrimitiveMember.value, __topoPrimitiveMember.set, None, u'The gml:topoPrimitiveMember property element encodes for the relationship between a topology complex and a single topology primitive.')

    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Attribute aggregationType uses Python identifier aggregationType
    __aggregationType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'aggregationType'), 'aggregationType', '__httpwww_opengis_netgml3_2_TopoComplexType_aggregationType', AggregationType)
    
    aggregationType = property(__aggregationType.value, __aggregationType.set, None, None)

    
    # Attribute id inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Attribute isMaximal uses Python identifier isMaximal
    __isMaximal = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'isMaximal'), 'isMaximal', '__httpwww_opengis_netgml3_2_TopoComplexType_isMaximal', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    isMaximal = property(__isMaximal.value, __isMaximal.set, None, None)


    _ElementMap = AbstractTopologyType._ElementMap.copy()
    _ElementMap.update({
        __superComplex.name() : __superComplex,
        __topoPrimitiveMembers.name() : __topoPrimitiveMembers,
        __maximalComplex.name() : __maximalComplex,
        __subComplex.name() : __subComplex,
        __topoPrimitiveMember.name() : __topoPrimitiveMember
    })
    _AttributeMap = AbstractTopologyType._AttributeMap.copy()
    _AttributeMap.update({
        __aggregationType.name() : __aggregationType,
        __isMaximal.name() : __isMaximal
    })
_Namespace_gml.addCategoryObject('typeBinding', u'TopoComplexType', TopoComplexType)


# Complex type MultiCurveType with content type ELEMENT_ONLY
class MultiCurveType (AbstractGeometricAggregateType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'MultiCurveType')
    # Base type is AbstractGeometricAggregateType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element {http://www.opengis.net/gml/3.2}curveMember uses Python identifier curveMember
    __curveMember = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'curveMember'), 'curveMember', '__httpwww_opengis_netgml3_2_MultiCurveType_httpwww_opengis_netgml3_2curveMember', True)

    
    curveMember = property(__curveMember.value, __curveMember.set, None, None)

    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element {http://www.opengis.net/gml/3.2}curveMembers uses Python identifier curveMembers
    __curveMembers = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'curveMembers'), 'curveMembers', '__httpwww_opengis_netgml3_2_MultiCurveType_httpwww_opengis_netgml3_2curveMembers', False)

    
    curveMembers = property(__curveMembers.value, __curveMembers.set, None, u'This property element contains a list of curves. The order of the elements is significant and shall be preserved when processing the array.')

    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Attribute uomLabels inherited from {http://www.opengis.net/gml/3.2}AbstractGeometryType
    
    # Attribute aggregationType inherited from {http://www.opengis.net/gml/3.2}AbstractGeometricAggregateType
    
    # Attribute srsName inherited from {http://www.opengis.net/gml/3.2}AbstractGeometryType
    
    # Attribute id inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Attribute srsDimension inherited from {http://www.opengis.net/gml/3.2}AbstractGeometryType
    
    # Attribute axisLabels inherited from {http://www.opengis.net/gml/3.2}AbstractGeometryType

    _ElementMap = AbstractGeometricAggregateType._ElementMap.copy()
    _ElementMap.update({
        __curveMember.name() : __curveMember,
        __curveMembers.name() : __curveMembers
    })
    _AttributeMap = AbstractGeometricAggregateType._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gml.addCategoryObject('typeBinding', u'MultiCurveType', MultiCurveType)


# Complex type VerticalCSType with content type ELEMENT_ONLY
class VerticalCSType (AbstractCoordinateSystemType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'VerticalCSType')
    # Base type is AbstractCoordinateSystemType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element axis ({http://www.opengis.net/gml/3.2}axis) inherited from {http://www.opengis.net/gml/3.2}AbstractCoordinateSystemType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element remarks ({http://www.opengis.net/gml/3.2}remarks) inherited from {http://www.opengis.net/gml/3.2}DefinitionType
    
    # Attribute aggregationType inherited from {http://www.opengis.net/gml/3.2}AbstractCoordinateSystemType
    
    # Attribute id_ inherited from {http://www.opengis.net/gml/3.2}DefinitionBaseType

    _ElementMap = AbstractCoordinateSystemType._ElementMap.copy()
    _ElementMap.update({
        
    })
    _AttributeMap = AbstractCoordinateSystemType._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gml.addCategoryObject('typeBinding', u'VerticalCSType', VerticalCSType)


# Complex type GridType with content type ELEMENT_ONLY
class GridType (AbstractGeometryType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'GridType')
    # Base type is AbstractGeometryType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element {http://www.opengis.net/gml/3.2}limits uses Python identifier limits
    __limits = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'limits'), 'limits', '__httpwww_opengis_netgml3_2_GridType_httpwww_opengis_netgml3_2limits', False)

    
    limits = property(__limits.value, __limits.set, None, None)

    
    # Element {http://www.opengis.net/gml/3.2}axisLabels uses Python identifier axisLabels_
    __axisLabels_ = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'axisLabels'), 'axisLabels_', '__httpwww_opengis_netgml3_2_GridType_httpwww_opengis_netgml3_2axisLabels', False)

    
    axisLabels_ = property(__axisLabels_.value, __axisLabels_.set, None, None)

    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element {http://www.opengis.net/gml/3.2}axisName uses Python identifier axisName
    __axisName = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'axisName'), 'axisName', '__httpwww_opengis_netgml3_2_GridType_httpwww_opengis_netgml3_2axisName', True)

    
    axisName = property(__axisName.value, __axisName.set, None, None)

    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Attribute uomLabels inherited from {http://www.opengis.net/gml/3.2}AbstractGeometryType
    
    # Attribute srsName inherited from {http://www.opengis.net/gml/3.2}AbstractGeometryType
    
    # Attribute id inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Attribute srsDimension inherited from {http://www.opengis.net/gml/3.2}AbstractGeometryType
    
    # Attribute dimension uses Python identifier dimension
    __dimension = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'dimension'), 'dimension', '__httpwww_opengis_netgml3_2_GridType_dimension', pyxb.binding.datatypes.positiveInteger, required=True)
    
    dimension = property(__dimension.value, __dimension.set, None, None)

    
    # Attribute axisLabels inherited from {http://www.opengis.net/gml/3.2}AbstractGeometryType

    _ElementMap = AbstractGeometryType._ElementMap.copy()
    _ElementMap.update({
        __limits.name() : __limits,
        __axisLabels_.name() : __axisLabels_,
        __axisName.name() : __axisName
    })
    _AttributeMap = AbstractGeometryType._AttributeMap.copy()
    _AttributeMap.update({
        __dimension.name() : __dimension
    })
_Namespace_gml.addCategoryObject('typeBinding', u'GridType', GridType)


# Complex type CompoundCRSPropertyType with content type ELEMENT_ONLY
class CompoundCRSPropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'CompoundCRSPropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.opengis.net/gml/3.2}CompoundCRS uses Python identifier CompoundCRS
    __CompoundCRS = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'CompoundCRS'), 'CompoundCRS', '__httpwww_opengis_netgml3_2_CompoundCRSPropertyType_httpwww_opengis_netgml3_2CompoundCRS', False)

    
    CompoundCRS = property(__CompoundCRS.value, __CompoundCRS.set, None, u'gml:CompundCRS is a coordinate reference system describing the position of points through two or more independent coordinate reference systems. It is associated with a non-repeating sequence of two or more instances of SingleCRS.')

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_opengis_netgml3_2_CompoundCRSPropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.opengis.net/gml/3.2}remoteSchema uses Python identifier remoteSchema
    __remoteSchema = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'remoteSchema'), 'remoteSchema', '__httpwww_opengis_netgml3_2_CompoundCRSPropertyType_httpwww_opengis_netgml3_2remoteSchema', pyxb.binding.datatypes.anyURI)
    
    remoteSchema = property(__remoteSchema.value, __remoteSchema.set, None, u'')

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_opengis_netgml3_2_CompoundCRSPropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_opengis_netgml3_2_CompoundCRSPropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_opengis_netgml3_2_CompoundCRSPropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'nilReason'), 'nilReason', '__httpwww_opengis_netgml3_2_CompoundCRSPropertyType_nilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_opengis_netgml3_2_CompoundCRSPropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_opengis_netgml3_2_CompoundCRSPropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_opengis_netgml3_2_CompoundCRSPropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)


    _ElementMap = {
        __CompoundCRS.name() : __CompoundCRS
    }
    _AttributeMap = {
        __title.name() : __title,
        __remoteSchema.name() : __remoteSchema,
        __arcrole.name() : __arcrole,
        __show.name() : __show,
        __role.name() : __role,
        __nilReason.name() : __nilReason,
        __actuate.name() : __actuate,
        __href.name() : __href,
        __type.name() : __type
    }
_Namespace_gml.addCategoryObject('typeBinding', u'CompoundCRSPropertyType', CompoundCRSPropertyType)


# Complex type DerivationUnitTermType with content type EMPTY
class DerivationUnitTermType (UnitOfMeasureType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'DerivationUnitTermType')
    # Base type is UnitOfMeasureType
    
    # Attribute exponent uses Python identifier exponent
    __exponent = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'exponent'), 'exponent', '__httpwww_opengis_netgml3_2_DerivationUnitTermType_exponent', pyxb.binding.datatypes.integer)
    
    exponent = property(__exponent.value, __exponent.set, None, None)

    
    # Attribute uom inherited from {http://www.opengis.net/gml/3.2}UnitOfMeasureType

    _ElementMap = UnitOfMeasureType._ElementMap.copy()
    _ElementMap.update({
        
    })
    _AttributeMap = UnitOfMeasureType._AttributeMap.copy()
    _AttributeMap.update({
        __exponent.name() : __exponent
    })
_Namespace_gml.addCategoryObject('typeBinding', u'DerivationUnitTermType', DerivationUnitTermType)


# Complex type RelatedTimeType with content type ELEMENT_ONLY
class RelatedTimeType (TimePrimitivePropertyType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'RelatedTimeType')
    # Base type is TimePrimitivePropertyType
    
    # Element AbstractTimePrimitive ({http://www.opengis.net/gml/3.2}AbstractTimePrimitive) inherited from {http://www.opengis.net/gml/3.2}TimePrimitivePropertyType
    
    # Attribute arcrole inherited from {http://www.opengis.net/gml/3.2}TimePrimitivePropertyType
    
    # Attribute relativePosition uses Python identifier relativePosition
    __relativePosition = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'relativePosition'), 'relativePosition', '__httpwww_opengis_netgml3_2_RelatedTimeType_relativePosition', STD_ANON_7)
    
    relativePosition = property(__relativePosition.value, __relativePosition.set, None, None)

    
    # Attribute remoteSchema inherited from {http://www.opengis.net/gml/3.2}TimePrimitivePropertyType
    
    # Attribute role inherited from {http://www.opengis.net/gml/3.2}TimePrimitivePropertyType
    
    # Attribute show inherited from {http://www.opengis.net/gml/3.2}TimePrimitivePropertyType
    
    # Attribute owns inherited from {http://www.opengis.net/gml/3.2}TimePrimitivePropertyType
    
    # Attribute actuate inherited from {http://www.opengis.net/gml/3.2}TimePrimitivePropertyType
    
    # Attribute nilReason inherited from {http://www.opengis.net/gml/3.2}TimePrimitivePropertyType
    
    # Attribute title inherited from {http://www.opengis.net/gml/3.2}TimePrimitivePropertyType
    
    # Attribute href inherited from {http://www.opengis.net/gml/3.2}TimePrimitivePropertyType
    
    # Attribute type inherited from {http://www.opengis.net/gml/3.2}TimePrimitivePropertyType

    _ElementMap = TimePrimitivePropertyType._ElementMap.copy()
    _ElementMap.update({
        
    })
    _AttributeMap = TimePrimitivePropertyType._AttributeMap.copy()
    _AttributeMap.update({
        __relativePosition.name() : __relativePosition
    })
_Namespace_gml.addCategoryObject('typeBinding', u'RelatedTimeType', RelatedTimeType)


# Complex type DS_StereoMate_Type with content type ELEMENT_ONLY
class DS_StereoMate_Type (DS_OtherAggregate_Type):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'DS_StereoMate_Type')
    # Base type is DS_OtherAggregate_Type
    
    # Element superset ({http://www.isotc211.org/2005/gmd}superset) inherited from {http://www.isotc211.org/2005/gmd}AbstractDS_Aggregate_Type
    
    # Element composedOf ({http://www.isotc211.org/2005/gmd}composedOf) inherited from {http://www.isotc211.org/2005/gmd}AbstractDS_Aggregate_Type
    
    # Element seriesMetadata ({http://www.isotc211.org/2005/gmd}seriesMetadata) inherited from {http://www.isotc211.org/2005/gmd}AbstractDS_Aggregate_Type
    
    # Element subset ({http://www.isotc211.org/2005/gmd}subset) inherited from {http://www.isotc211.org/2005/gmd}AbstractDS_Aggregate_Type
    
    # Attribute id inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type
    
    # Attribute uuid inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type

    _ElementMap = DS_OtherAggregate_Type._ElementMap.copy()
    _ElementMap.update({
        
    })
    _AttributeMap = DS_OtherAggregate_Type._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gmd.addCategoryObject('typeBinding', u'DS_StereoMate_Type', DS_StereoMate_Type)


# Complex type SolidType with content type ELEMENT_ONLY
class SolidType (AbstractSolidType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'SolidType')
    # Base type is AbstractSolidType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element {http://www.opengis.net/gml/3.2}interior uses Python identifier interior
    __interior = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'interior'), 'interior', '__httpwww_opengis_netgml3_2_SolidType_httpwww_opengis_netgml3_2interior', True)

    
    interior = property(__interior.value, __interior.set, None, None)

    
    # Element {http://www.opengis.net/gml/3.2}exterior uses Python identifier exterior
    __exterior = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'exterior'), 'exterior', '__httpwww_opengis_netgml3_2_SolidType_httpwww_opengis_netgml3_2exterior', False)

    
    exterior = property(__exterior.value, __exterior.set, None, None)

    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Attribute srsName inherited from {http://www.opengis.net/gml/3.2}AbstractGeometryType
    
    # Attribute axisLabels inherited from {http://www.opengis.net/gml/3.2}AbstractGeometryType
    
    # Attribute id inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Attribute uomLabels inherited from {http://www.opengis.net/gml/3.2}AbstractGeometryType
    
    # Attribute srsDimension inherited from {http://www.opengis.net/gml/3.2}AbstractGeometryType

    _ElementMap = AbstractSolidType._ElementMap.copy()
    _ElementMap.update({
        __interior.name() : __interior,
        __exterior.name() : __exterior
    })
    _AttributeMap = AbstractSolidType._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gml.addCategoryObject('typeBinding', u'SolidType', SolidType)


# Complex type CI_Series_PropertyType with content type ELEMENT_ONLY
class CI_Series_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'CI_Series_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmd}CI_Series uses Python identifier CI_Series
    __CI_Series = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'CI_Series'), 'CI_Series', '__httpwww_isotc211_org2005gmd_CI_Series_PropertyType_httpwww_isotc211_org2005gmdCI_Series', False)

    
    CI_Series = property(__CI_Series.value, __CI_Series.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_isotc211_org2005gmd_CI_Series_PropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_isotc211_org2005gmd_CI_Series_PropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_isotc211_org2005gmd_CI_Series_PropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmd_CI_Series_PropertyType_httpwww_isotc211_org2005gconilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute uuidref uses Python identifier uuidref
    __uuidref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uuidref'), 'uuidref', '__httpwww_isotc211_org2005gmd_CI_Series_PropertyType_uuidref', pyxb.binding.datatypes.string)
    
    uuidref = property(__uuidref.value, __uuidref.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_isotc211_org2005gmd_CI_Series_PropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_isotc211_org2005gmd_CI_Series_PropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_isotc211_org2005gmd_CI_Series_PropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_isotc211_org2005gmd_CI_Series_PropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")


    _ElementMap = {
        __CI_Series.name() : __CI_Series
    }
    _AttributeMap = {
        __type.name() : __type,
        __arcrole.name() : __arcrole,
        __role.name() : __role,
        __nilReason.name() : __nilReason,
        __uuidref.name() : __uuidref,
        __title.name() : __title,
        __show.name() : __show,
        __href.name() : __href,
        __actuate.name() : __actuate
    }
_Namespace_gmd.addCategoryObject('typeBinding', u'CI_Series_PropertyType', CI_Series_PropertyType)


# Complex type LineStringType with content type ELEMENT_ONLY
class LineStringType (AbstractCurveType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'LineStringType')
    # Base type is AbstractCurveType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element {http://www.opengis.net/gml/3.2}posList uses Python identifier posList
    __posList = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'posList'), 'posList', '__httpwww_opengis_netgml3_2_LineStringType_httpwww_opengis_netgml3_2posList', False)

    
    posList = property(__posList.value, __posList.set, None, None)

    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element {http://www.opengis.net/gml/3.2}coordinates uses Python identifier coordinates
    __coordinates = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'coordinates'), 'coordinates', '__httpwww_opengis_netgml3_2_LineStringType_httpwww_opengis_netgml3_2coordinates', False)

    
    coordinates = property(__coordinates.value, __coordinates.set, None, u'')

    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element {http://www.opengis.net/gml/3.2}pointRep uses Python identifier pointRep
    __pointRep = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'pointRep'), 'pointRep', '__httpwww_opengis_netgml3_2_LineStringType_httpwww_opengis_netgml3_2pointRep', True)

    
    pointRep = property(__pointRep.value, __pointRep.set, None, u'')

    
    # Element {http://www.opengis.net/gml/3.2}pos uses Python identifier pos
    __pos = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'pos'), 'pos', '__httpwww_opengis_netgml3_2_LineStringType_httpwww_opengis_netgml3_2pos', True)

    
    pos = property(__pos.value, __pos.set, None, None)

    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element {http://www.opengis.net/gml/3.2}pointProperty uses Python identifier pointProperty
    __pointProperty = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'pointProperty'), 'pointProperty', '__httpwww_opengis_netgml3_2_LineStringType_httpwww_opengis_netgml3_2pointProperty', True)

    
    pointProperty = property(__pointProperty.value, __pointProperty.set, None, u'This property element either references a point via the XLink-attributes or contains the point element. pointProperty is the predefined property which may be used by GML Application Schemas whenever a GML feature has a property with a value that is substitutable for Point.')

    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Attribute srsName inherited from {http://www.opengis.net/gml/3.2}AbstractGeometryType
    
    # Attribute axisLabels inherited from {http://www.opengis.net/gml/3.2}AbstractGeometryType
    
    # Attribute id inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Attribute uomLabels inherited from {http://www.opengis.net/gml/3.2}AbstractGeometryType
    
    # Attribute srsDimension inherited from {http://www.opengis.net/gml/3.2}AbstractGeometryType

    _ElementMap = AbstractCurveType._ElementMap.copy()
    _ElementMap.update({
        __posList.name() : __posList,
        __coordinates.name() : __coordinates,
        __pointRep.name() : __pointRep,
        __pos.name() : __pos,
        __pointProperty.name() : __pointProperty
    })
    _AttributeMap = AbstractCurveType._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gml.addCategoryObject('typeBinding', u'LineStringType', LineStringType)


# Complex type MD_Distribution_PropertyType with content type ELEMENT_ONLY
class MD_Distribution_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_Distribution_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmd}MD_Distribution uses Python identifier MD_Distribution
    __MD_Distribution = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_Distribution'), 'MD_Distribution', '__httpwww_isotc211_org2005gmd_MD_Distribution_PropertyType_httpwww_isotc211_org2005gmdMD_Distribution', False)

    
    MD_Distribution = property(__MD_Distribution.value, __MD_Distribution.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_isotc211_org2005gmd_MD_Distribution_PropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_isotc211_org2005gmd_MD_Distribution_PropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_isotc211_org2005gmd_MD_Distribution_PropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmd_MD_Distribution_PropertyType_httpwww_isotc211_org2005gconilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_isotc211_org2005gmd_MD_Distribution_PropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute uuidref uses Python identifier uuidref
    __uuidref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uuidref'), 'uuidref', '__httpwww_isotc211_org2005gmd_MD_Distribution_PropertyType_uuidref', pyxb.binding.datatypes.string)
    
    uuidref = property(__uuidref.value, __uuidref.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_isotc211_org2005gmd_MD_Distribution_PropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_isotc211_org2005gmd_MD_Distribution_PropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_isotc211_org2005gmd_MD_Distribution_PropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")


    _ElementMap = {
        __MD_Distribution.name() : __MD_Distribution
    }
    _AttributeMap = {
        __type.name() : __type,
        __arcrole.name() : __arcrole,
        __role.name() : __role,
        __nilReason.name() : __nilReason,
        __title.name() : __title,
        __uuidref.name() : __uuidref,
        __show.name() : __show,
        __href.name() : __href,
        __actuate.name() : __actuate
    }
_Namespace_gmd.addCategoryObject('typeBinding', u'MD_Distribution_PropertyType', MD_Distribution_PropertyType)


# Complex type Number_PropertyType with content type ELEMENT_ONLY
class Number_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gco, u'Number_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gco}Real uses Python identifier Real
    __Real = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'Real'), 'Real', '__httpwww_isotc211_org2005gco_Number_PropertyType_httpwww_isotc211_org2005gcoReal', False)

    
    Real = property(__Real.value, __Real.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gco}Decimal uses Python identifier Decimal
    __Decimal = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'Decimal'), 'Decimal', '__httpwww_isotc211_org2005gco_Number_PropertyType_httpwww_isotc211_org2005gcoDecimal', False)

    
    Decimal = property(__Decimal.value, __Decimal.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gco}Integer uses Python identifier Integer
    __Integer = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'Integer'), 'Integer', '__httpwww_isotc211_org2005gco_Number_PropertyType_httpwww_isotc211_org2005gcoInteger', False)

    
    Integer = property(__Integer.value, __Integer.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gco_Number_PropertyType_httpwww_isotc211_org2005gconilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)


    _ElementMap = {
        __Real.name() : __Real,
        __Decimal.name() : __Decimal,
        __Integer.name() : __Integer
    }
    _AttributeMap = {
        __nilReason.name() : __nilReason
    }
_Namespace_gco.addCategoryObject('typeBinding', u'Number_PropertyType', Number_PropertyType)


# Complex type UomAngle_PropertyType with content type ELEMENT_ONLY
class UomAngle_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gco, u'UomAngle_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.opengis.net/gml/3.2}UnitDefinition uses Python identifier UnitDefinition
    __UnitDefinition = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'UnitDefinition'), 'UnitDefinition', '__httpwww_isotc211_org2005gco_UomAngle_PropertyType_httpwww_opengis_netgml3_2UnitDefinition', False)

    
    UnitDefinition = property(__UnitDefinition.value, __UnitDefinition.set, None, u'A gml:UnitDefinition is a general definition of a unit of measure. This generic element is used only for units for which no relationship with other units or units systems is known.\nThe content model of gml:UnitDefinition adds three additional properties to gml:Definition, gml:quantityType, gml:quantityTypeReference and gml:catalogSymbol.  \nThe gml:catalogSymbol property optionally gives the short symbol used for this unit. This element is usually used when the relationship of this unit to other units or units systems is unknown.')

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_isotc211_org2005gco_UomAngle_PropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_isotc211_org2005gco_UomAngle_PropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_isotc211_org2005gco_UomAngle_PropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_isotc211_org2005gco_UomAngle_PropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gco_UomAngle_PropertyType_httpwww_isotc211_org2005gconilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute uuidref uses Python identifier uuidref
    __uuidref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uuidref'), 'uuidref', '__httpwww_isotc211_org2005gco_UomAngle_PropertyType_uuidref', pyxb.binding.datatypes.string)
    
    uuidref = property(__uuidref.value, __uuidref.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_isotc211_org2005gco_UomAngle_PropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_isotc211_org2005gco_UomAngle_PropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_isotc211_org2005gco_UomAngle_PropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")


    _ElementMap = {
        __UnitDefinition.name() : __UnitDefinition
    }
    _AttributeMap = {
        __type.name() : __type,
        __arcrole.name() : __arcrole,
        __role.name() : __role,
        __title.name() : __title,
        __nilReason.name() : __nilReason,
        __uuidref.name() : __uuidref,
        __show.name() : __show,
        __href.name() : __href,
        __actuate.name() : __actuate
    }
_Namespace_gco.addCategoryObject('typeBinding', u'UomAngle_PropertyType', UomAngle_PropertyType)


# Complex type LinearCSPropertyType with content type ELEMENT_ONLY
class LinearCSPropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'LinearCSPropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.opengis.net/gml/3.2}LinearCS uses Python identifier LinearCS
    __LinearCS = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'LinearCS'), 'LinearCS', '__httpwww_opengis_netgml3_2_LinearCSPropertyType_httpwww_opengis_netgml3_2LinearCS', False)

    
    LinearCS = property(__LinearCS.value, __LinearCS.set, None, u'gml:LinearCS is a one-dimensional coordinate system that consists of the points that lie on the single axis described. The associated coordinate is the distance \u2013 with or without offset \u2013 from the specified datum to the point along the axis. A LinearCS shall have one gml:axis property element.')

    
    # Attribute {http://www.opengis.net/gml/3.2}remoteSchema uses Python identifier remoteSchema
    __remoteSchema = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'remoteSchema'), 'remoteSchema', '__httpwww_opengis_netgml3_2_LinearCSPropertyType_httpwww_opengis_netgml3_2remoteSchema', pyxb.binding.datatypes.anyURI)
    
    remoteSchema = property(__remoteSchema.value, __remoteSchema.set, None, u'')

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_opengis_netgml3_2_LinearCSPropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_opengis_netgml3_2_LinearCSPropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_opengis_netgml3_2_LinearCSPropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_opengis_netgml3_2_LinearCSPropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'nilReason'), 'nilReason', '__httpwww_opengis_netgml3_2_LinearCSPropertyType_nilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_opengis_netgml3_2_LinearCSPropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_opengis_netgml3_2_LinearCSPropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_opengis_netgml3_2_LinearCSPropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")


    _ElementMap = {
        __LinearCS.name() : __LinearCS
    }
    _AttributeMap = {
        __remoteSchema.name() : __remoteSchema,
        __href.name() : __href,
        __type.name() : __type,
        __title.name() : __title,
        __arcrole.name() : __arcrole,
        __nilReason.name() : __nilReason,
        __role.name() : __role,
        __show.name() : __show,
        __actuate.name() : __actuate
    }
_Namespace_gml.addCategoryObject('typeBinding', u'LinearCSPropertyType', LinearCSPropertyType)


# Complex type DQ_RelativeInternalPositionalAccuracy_Type with content type ELEMENT_ONLY
class DQ_RelativeInternalPositionalAccuracy_Type (AbstractDQ_PositionalAccuracy_Type):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'DQ_RelativeInternalPositionalAccuracy_Type')
    # Base type is AbstractDQ_PositionalAccuracy_Type
    
    # Element evaluationMethodDescription ({http://www.isotc211.org/2005/gmd}evaluationMethodDescription) inherited from {http://www.isotc211.org/2005/gmd}AbstractDQ_Element_Type
    
    # Element measureDescription ({http://www.isotc211.org/2005/gmd}measureDescription) inherited from {http://www.isotc211.org/2005/gmd}AbstractDQ_Element_Type
    
    # Element evaluationProcedure ({http://www.isotc211.org/2005/gmd}evaluationProcedure) inherited from {http://www.isotc211.org/2005/gmd}AbstractDQ_Element_Type
    
    # Element evaluationMethodType ({http://www.isotc211.org/2005/gmd}evaluationMethodType) inherited from {http://www.isotc211.org/2005/gmd}AbstractDQ_Element_Type
    
    # Element dateTime ({http://www.isotc211.org/2005/gmd}dateTime) inherited from {http://www.isotc211.org/2005/gmd}AbstractDQ_Element_Type
    
    # Element result ({http://www.isotc211.org/2005/gmd}result) inherited from {http://www.isotc211.org/2005/gmd}AbstractDQ_Element_Type
    
    # Element nameOfMeasure ({http://www.isotc211.org/2005/gmd}nameOfMeasure) inherited from {http://www.isotc211.org/2005/gmd}AbstractDQ_Element_Type
    
    # Element measureIdentification ({http://www.isotc211.org/2005/gmd}measureIdentification) inherited from {http://www.isotc211.org/2005/gmd}AbstractDQ_Element_Type
    
    # Attribute id inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type
    
    # Attribute uuid inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type

    _ElementMap = AbstractDQ_PositionalAccuracy_Type._ElementMap.copy()
    _ElementMap.update({
        
    })
    _AttributeMap = AbstractDQ_PositionalAccuracy_Type._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gmd.addCategoryObject('typeBinding', u'DQ_RelativeInternalPositionalAccuracy_Type', DQ_RelativeInternalPositionalAccuracy_Type)


# Complex type DQ_Completeness_PropertyType with content type ELEMENT_ONLY
class DQ_Completeness_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'DQ_Completeness_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmd}AbstractDQ_Completeness uses Python identifier AbstractDQ_Completeness
    __AbstractDQ_Completeness = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'AbstractDQ_Completeness'), 'AbstractDQ_Completeness', '__httpwww_isotc211_org2005gmd_DQ_Completeness_PropertyType_httpwww_isotc211_org2005gmdAbstractDQ_Completeness', False)

    
    AbstractDQ_Completeness = property(__AbstractDQ_Completeness.value, __AbstractDQ_Completeness.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_isotc211_org2005gmd_DQ_Completeness_PropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_isotc211_org2005gmd_DQ_Completeness_PropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_isotc211_org2005gmd_DQ_Completeness_PropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute uuidref uses Python identifier uuidref
    __uuidref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uuidref'), 'uuidref', '__httpwww_isotc211_org2005gmd_DQ_Completeness_PropertyType_uuidref', pyxb.binding.datatypes.string)
    
    uuidref = property(__uuidref.value, __uuidref.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_isotc211_org2005gmd_DQ_Completeness_PropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_isotc211_org2005gmd_DQ_Completeness_PropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_isotc211_org2005gmd_DQ_Completeness_PropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_isotc211_org2005gmd_DQ_Completeness_PropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmd_DQ_Completeness_PropertyType_httpwww_isotc211_org2005gconilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)


    _ElementMap = {
        __AbstractDQ_Completeness.name() : __AbstractDQ_Completeness
    }
    _AttributeMap = {
        __type.name() : __type,
        __role.name() : __role,
        __arcrole.name() : __arcrole,
        __uuidref.name() : __uuidref,
        __title.name() : __title,
        __show.name() : __show,
        __href.name() : __href,
        __actuate.name() : __actuate,
        __nilReason.name() : __nilReason
    }
_Namespace_gmd.addCategoryObject('typeBinding', u'DQ_Completeness_PropertyType', DQ_Completeness_PropertyType)


# Complex type GeocentricCRSType with content type ELEMENT_ONLY
class GeocentricCRSType (AbstractCRSType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'GeocentricCRSType')
    # Base type is AbstractCRSType
    
    # Element {http://www.opengis.net/gml/3.2}usesGeodeticDatum uses Python identifier usesGeodeticDatum
    __usesGeodeticDatum = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'usesGeodeticDatum'), 'usesGeodeticDatum', '__httpwww_opengis_netgml3_2_GeocentricCRSType_httpwww_opengis_netgml3_2usesGeodeticDatum', False)

    
    usesGeodeticDatum = property(__usesGeodeticDatum.value, __usesGeodeticDatum.set, None, u'')

    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element domainOfValidity ({http://www.opengis.net/gml/3.2}domainOfValidity) inherited from {http://www.opengis.net/gml/3.2}AbstractCRSType
    
    # Element scope ({http://www.opengis.net/gml/3.2}scope) inherited from {http://www.opengis.net/gml/3.2}AbstractCRSType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element {http://www.opengis.net/gml/3.2}usesCartesianCS uses Python identifier usesCartesianCS
    __usesCartesianCS = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'usesCartesianCS'), 'usesCartesianCS', '__httpwww_opengis_netgml3_2_GeocentricCRSType_httpwww_opengis_netgml3_2usesCartesianCS', False)

    
    usesCartesianCS = property(__usesCartesianCS.value, __usesCartesianCS.set, None, u'')

    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element remarks ({http://www.opengis.net/gml/3.2}remarks) inherited from {http://www.opengis.net/gml/3.2}DefinitionType
    
    # Element {http://www.opengis.net/gml/3.2}usesSphericalCS uses Python identifier usesSphericalCS
    __usesSphericalCS = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'usesSphericalCS'), 'usesSphericalCS', '__httpwww_opengis_netgml3_2_GeocentricCRSType_httpwww_opengis_netgml3_2usesSphericalCS', False)

    
    usesSphericalCS = property(__usesSphericalCS.value, __usesSphericalCS.set, None, u'')

    
    # Attribute id_ inherited from {http://www.opengis.net/gml/3.2}DefinitionBaseType

    _ElementMap = AbstractCRSType._ElementMap.copy()
    _ElementMap.update({
        __usesGeodeticDatum.name() : __usesGeodeticDatum,
        __usesCartesianCS.name() : __usesCartesianCS,
        __usesSphericalCS.name() : __usesSphericalCS
    })
    _AttributeMap = AbstractCRSType._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gml.addCategoryObject('typeBinding', u'GeocentricCRSType', GeocentricCRSType)


# Complex type MD_Metadata_Type with content type ELEMENT_ONLY
class MD_Metadata_Type (AbstractObject_Type):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_Metadata_Type')
    # Base type is AbstractObject_Type
    
    # Element {http://www.isotc211.org/2005/gmd}referenceSystemInfo uses Python identifier referenceSystemInfo
    __referenceSystemInfo = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'referenceSystemInfo'), 'referenceSystemInfo', '__httpwww_isotc211_org2005gmd_MD_Metadata_Type_httpwww_isotc211_org2005gmdreferenceSystemInfo', True)

    
    referenceSystemInfo = property(__referenceSystemInfo.value, __referenceSystemInfo.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}metadataExtensionInfo uses Python identifier metadataExtensionInfo
    __metadataExtensionInfo = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'metadataExtensionInfo'), 'metadataExtensionInfo', '__httpwww_isotc211_org2005gmd_MD_Metadata_Type_httpwww_isotc211_org2005gmdmetadataExtensionInfo', True)

    
    metadataExtensionInfo = property(__metadataExtensionInfo.value, __metadataExtensionInfo.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}contentInfo uses Python identifier contentInfo
    __contentInfo = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'contentInfo'), 'contentInfo', '__httpwww_isotc211_org2005gmd_MD_Metadata_Type_httpwww_isotc211_org2005gmdcontentInfo', True)

    
    contentInfo = property(__contentInfo.value, __contentInfo.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}characterSet uses Python identifier characterSet
    __characterSet = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'characterSet'), 'characterSet', '__httpwww_isotc211_org2005gmd_MD_Metadata_Type_httpwww_isotc211_org2005gmdcharacterSet', False)

    
    characterSet = property(__characterSet.value, __characterSet.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}dataQualityInfo uses Python identifier dataQualityInfo
    __dataQualityInfo = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'dataQualityInfo'), 'dataQualityInfo', '__httpwww_isotc211_org2005gmd_MD_Metadata_Type_httpwww_isotc211_org2005gmddataQualityInfo', True)

    
    dataQualityInfo = property(__dataQualityInfo.value, __dataQualityInfo.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}portrayalCatalogueInfo uses Python identifier portrayalCatalogueInfo
    __portrayalCatalogueInfo = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'portrayalCatalogueInfo'), 'portrayalCatalogueInfo', '__httpwww_isotc211_org2005gmd_MD_Metadata_Type_httpwww_isotc211_org2005gmdportrayalCatalogueInfo', True)

    
    portrayalCatalogueInfo = property(__portrayalCatalogueInfo.value, __portrayalCatalogueInfo.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}metadataConstraints uses Python identifier metadataConstraints
    __metadataConstraints = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'metadataConstraints'), 'metadataConstraints', '__httpwww_isotc211_org2005gmd_MD_Metadata_Type_httpwww_isotc211_org2005gmdmetadataConstraints', True)

    
    metadataConstraints = property(__metadataConstraints.value, __metadataConstraints.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}metadataMaintenance uses Python identifier metadataMaintenance
    __metadataMaintenance = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'metadataMaintenance'), 'metadataMaintenance', '__httpwww_isotc211_org2005gmd_MD_Metadata_Type_httpwww_isotc211_org2005gmdmetadataMaintenance', False)

    
    metadataMaintenance = property(__metadataMaintenance.value, __metadataMaintenance.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}series uses Python identifier series
    __series = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'series'), 'series', '__httpwww_isotc211_org2005gmd_MD_Metadata_Type_httpwww_isotc211_org2005gmdseries', True)

    
    series = property(__series.value, __series.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}describes uses Python identifier describes
    __describes = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'describes'), 'describes', '__httpwww_isotc211_org2005gmd_MD_Metadata_Type_httpwww_isotc211_org2005gmddescribes', True)

    
    describes = property(__describes.value, __describes.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}propertyType uses Python identifier propertyType
    __propertyType = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'propertyType'), 'propertyType', '__httpwww_isotc211_org2005gmd_MD_Metadata_Type_httpwww_isotc211_org2005gmdpropertyType', True)

    
    propertyType = property(__propertyType.value, __propertyType.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}featureType uses Python identifier featureType
    __featureType = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'featureType'), 'featureType', '__httpwww_isotc211_org2005gmd_MD_Metadata_Type_httpwww_isotc211_org2005gmdfeatureType', True)

    
    featureType = property(__featureType.value, __featureType.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}featureAttribute uses Python identifier featureAttribute
    __featureAttribute = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'featureAttribute'), 'featureAttribute', '__httpwww_isotc211_org2005gmd_MD_Metadata_Type_httpwww_isotc211_org2005gmdfeatureAttribute', True)

    
    featureAttribute = property(__featureAttribute.value, __featureAttribute.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}fileIdentifier uses Python identifier fileIdentifier
    __fileIdentifier = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'fileIdentifier'), 'fileIdentifier', '__httpwww_isotc211_org2005gmd_MD_Metadata_Type_httpwww_isotc211_org2005gmdfileIdentifier', False)

    
    fileIdentifier = property(__fileIdentifier.value, __fileIdentifier.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}language uses Python identifier language
    __language = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'language'), 'language', '__httpwww_isotc211_org2005gmd_MD_Metadata_Type_httpwww_isotc211_org2005gmdlanguage', False)

    
    language = property(__language.value, __language.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}applicationSchemaInfo uses Python identifier applicationSchemaInfo
    __applicationSchemaInfo = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'applicationSchemaInfo'), 'applicationSchemaInfo', '__httpwww_isotc211_org2005gmd_MD_Metadata_Type_httpwww_isotc211_org2005gmdapplicationSchemaInfo', True)

    
    applicationSchemaInfo = property(__applicationSchemaInfo.value, __applicationSchemaInfo.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}distributionInfo uses Python identifier distributionInfo
    __distributionInfo = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'distributionInfo'), 'distributionInfo', '__httpwww_isotc211_org2005gmd_MD_Metadata_Type_httpwww_isotc211_org2005gmddistributionInfo', False)

    
    distributionInfo = property(__distributionInfo.value, __distributionInfo.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}parentIdentifier uses Python identifier parentIdentifier
    __parentIdentifier = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'parentIdentifier'), 'parentIdentifier', '__httpwww_isotc211_org2005gmd_MD_Metadata_Type_httpwww_isotc211_org2005gmdparentIdentifier', False)

    
    parentIdentifier = property(__parentIdentifier.value, __parentIdentifier.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}hierarchyLevel uses Python identifier hierarchyLevel
    __hierarchyLevel = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'hierarchyLevel'), 'hierarchyLevel', '__httpwww_isotc211_org2005gmd_MD_Metadata_Type_httpwww_isotc211_org2005gmdhierarchyLevel', True)

    
    hierarchyLevel = property(__hierarchyLevel.value, __hierarchyLevel.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}hierarchyLevelName uses Python identifier hierarchyLevelName
    __hierarchyLevelName = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'hierarchyLevelName'), 'hierarchyLevelName', '__httpwww_isotc211_org2005gmd_MD_Metadata_Type_httpwww_isotc211_org2005gmdhierarchyLevelName', True)

    
    hierarchyLevelName = property(__hierarchyLevelName.value, __hierarchyLevelName.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}identificationInfo uses Python identifier identificationInfo
    __identificationInfo = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'identificationInfo'), 'identificationInfo', '__httpwww_isotc211_org2005gmd_MD_Metadata_Type_httpwww_isotc211_org2005gmdidentificationInfo', True)

    
    identificationInfo = property(__identificationInfo.value, __identificationInfo.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}contact uses Python identifier contact
    __contact = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'contact'), 'contact', '__httpwww_isotc211_org2005gmd_MD_Metadata_Type_httpwww_isotc211_org2005gmdcontact', True)

    
    contact = property(__contact.value, __contact.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}dateStamp uses Python identifier dateStamp
    __dateStamp = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'dateStamp'), 'dateStamp', '__httpwww_isotc211_org2005gmd_MD_Metadata_Type_httpwww_isotc211_org2005gmddateStamp', False)

    
    dateStamp = property(__dateStamp.value, __dateStamp.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}metadataStandardName uses Python identifier metadataStandardName
    __metadataStandardName = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'metadataStandardName'), 'metadataStandardName', '__httpwww_isotc211_org2005gmd_MD_Metadata_Type_httpwww_isotc211_org2005gmdmetadataStandardName', False)

    
    metadataStandardName = property(__metadataStandardName.value, __metadataStandardName.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}metadataStandardVersion uses Python identifier metadataStandardVersion
    __metadataStandardVersion = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'metadataStandardVersion'), 'metadataStandardVersion', '__httpwww_isotc211_org2005gmd_MD_Metadata_Type_httpwww_isotc211_org2005gmdmetadataStandardVersion', False)

    
    metadataStandardVersion = property(__metadataStandardVersion.value, __metadataStandardVersion.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}dataSetURI uses Python identifier dataSetURI
    __dataSetURI = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'dataSetURI'), 'dataSetURI', '__httpwww_isotc211_org2005gmd_MD_Metadata_Type_httpwww_isotc211_org2005gmddataSetURI', False)

    
    dataSetURI = property(__dataSetURI.value, __dataSetURI.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}locale uses Python identifier locale
    __locale = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'locale'), 'locale', '__httpwww_isotc211_org2005gmd_MD_Metadata_Type_httpwww_isotc211_org2005gmdlocale', True)

    
    locale = property(__locale.value, __locale.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}spatialRepresentationInfo uses Python identifier spatialRepresentationInfo
    __spatialRepresentationInfo = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'spatialRepresentationInfo'), 'spatialRepresentationInfo', '__httpwww_isotc211_org2005gmd_MD_Metadata_Type_httpwww_isotc211_org2005gmdspatialRepresentationInfo', True)

    
    spatialRepresentationInfo = property(__spatialRepresentationInfo.value, __spatialRepresentationInfo.set, None, None)

    
    # Attribute id inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type
    
    # Attribute uuid inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type

    _ElementMap = AbstractObject_Type._ElementMap.copy()
    _ElementMap.update({
        __referenceSystemInfo.name() : __referenceSystemInfo,
        __metadataExtensionInfo.name() : __metadataExtensionInfo,
        __contentInfo.name() : __contentInfo,
        __characterSet.name() : __characterSet,
        __dataQualityInfo.name() : __dataQualityInfo,
        __portrayalCatalogueInfo.name() : __portrayalCatalogueInfo,
        __metadataConstraints.name() : __metadataConstraints,
        __metadataMaintenance.name() : __metadataMaintenance,
        __series.name() : __series,
        __describes.name() : __describes,
        __propertyType.name() : __propertyType,
        __featureType.name() : __featureType,
        __featureAttribute.name() : __featureAttribute,
        __fileIdentifier.name() : __fileIdentifier,
        __language.name() : __language,
        __applicationSchemaInfo.name() : __applicationSchemaInfo,
        __distributionInfo.name() : __distributionInfo,
        __parentIdentifier.name() : __parentIdentifier,
        __hierarchyLevel.name() : __hierarchyLevel,
        __hierarchyLevelName.name() : __hierarchyLevelName,
        __identificationInfo.name() : __identificationInfo,
        __contact.name() : __contact,
        __dateStamp.name() : __dateStamp,
        __metadataStandardName.name() : __metadataStandardName,
        __metadataStandardVersion.name() : __metadataStandardVersion,
        __dataSetURI.name() : __dataSetURI,
        __locale.name() : __locale,
        __spatialRepresentationInfo.name() : __spatialRepresentationInfo
    })
    _AttributeMap = AbstractObject_Type._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gmd.addCategoryObject('typeBinding', u'MD_Metadata_Type', MD_Metadata_Type)


# Complex type LocalisedCharacterString_PropertyType with content type ELEMENT_ONLY
class LocalisedCharacterString_PropertyType (ObjectReference_PropertyType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'LocalisedCharacterString_PropertyType')
    # Base type is ObjectReference_PropertyType
    
    # Element {http://www.isotc211.org/2005/gmd}LocalisedCharacterString uses Python identifier LocalisedCharacterString
    __LocalisedCharacterString = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'LocalisedCharacterString'), 'LocalisedCharacterString', '__httpwww_isotc211_org2005gmd_LocalisedCharacterString_PropertyType_httpwww_isotc211_org2005gmdLocalisedCharacterString', False)

    
    LocalisedCharacterString = property(__LocalisedCharacterString.value, __LocalisedCharacterString.set, None, None)

    
    # Attribute title inherited from {http://www.isotc211.org/2005/gco}ObjectReference_PropertyType
    
    # Attribute type inherited from {http://www.isotc211.org/2005/gco}ObjectReference_PropertyType
    
    # Attribute href inherited from {http://www.isotc211.org/2005/gco}ObjectReference_PropertyType
    
    # Attribute arcrole inherited from {http://www.isotc211.org/2005/gco}ObjectReference_PropertyType
    
    # Attribute actuate inherited from {http://www.isotc211.org/2005/gco}ObjectReference_PropertyType
    
    # Attribute role inherited from {http://www.isotc211.org/2005/gco}ObjectReference_PropertyType
    
    # Attribute uuidref inherited from {http://www.isotc211.org/2005/gco}ObjectReference_PropertyType
    
    # Attribute nilReason inherited from {http://www.isotc211.org/2005/gco}ObjectReference_PropertyType
    
    # Attribute show inherited from {http://www.isotc211.org/2005/gco}ObjectReference_PropertyType

    _ElementMap = ObjectReference_PropertyType._ElementMap.copy()
    _ElementMap.update({
        __LocalisedCharacterString.name() : __LocalisedCharacterString
    })
    _AttributeMap = ObjectReference_PropertyType._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gmd.addCategoryObject('typeBinding', u'LocalisedCharacterString_PropertyType', LocalisedCharacterString_PropertyType)


# Complex type GeometricComplexPropertyType with content type ELEMENT_ONLY
class GeometricComplexPropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'GeometricComplexPropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.opengis.net/gml/3.2}GeometricComplex uses Python identifier GeometricComplex
    __GeometricComplex = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'GeometricComplex'), 'GeometricComplex', '__httpwww_opengis_netgml3_2_GeometricComplexPropertyType_httpwww_opengis_netgml3_2GeometricComplex', False)

    
    GeometricComplex = property(__GeometricComplex.value, __GeometricComplex.set, None, None)

    
    # Element {http://www.opengis.net/gml/3.2}CompositeCurve uses Python identifier CompositeCurve
    __CompositeCurve = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'CompositeCurve'), 'CompositeCurve', '__httpwww_opengis_netgml3_2_GeometricComplexPropertyType_httpwww_opengis_netgml3_2CompositeCurve', False)

    
    CompositeCurve = property(__CompositeCurve.value, __CompositeCurve.set, None, u'A gml:CompositeCurve is represented by a sequence of (orientable) curves such that each curve in the sequence terminates at the start point of the subsequent curve in the list. \ncurveMember references or contains inline one curve in the composite curve. \nThe curves are contiguous, the collection of curves is ordered. Therefore, if provided, the aggregationType attribute shall have the value "sequence".')

    
    # Element {http://www.opengis.net/gml/3.2}CompositeSolid uses Python identifier CompositeSolid
    __CompositeSolid = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'CompositeSolid'), 'CompositeSolid', '__httpwww_opengis_netgml3_2_GeometricComplexPropertyType_httpwww_opengis_netgml3_2CompositeSolid', False)

    
    CompositeSolid = property(__CompositeSolid.value, __CompositeSolid.set, None, u'gml:CompositeSolid implements ISO 19107 GM_CompositeSolid (see ISO 19107:2003, 6.6.7) as specified in D.2.3.6. \nA gml:CompositeSolid is represented by a set of orientable surfaces. It is a geometry type with all the geometric properties of a (primitive) solid. Essentially, a composite solid is a collection of solids that join in pairs on common boundary surfaces and which, when considered as a whole, form a single solid. \nsolidMember references or contains one solid in the composite solid. The solids are contiguous.')

    
    # Element {http://www.opengis.net/gml/3.2}CompositeSurface uses Python identifier CompositeSurface
    __CompositeSurface = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'CompositeSurface'), 'CompositeSurface', '__httpwww_opengis_netgml3_2_GeometricComplexPropertyType_httpwww_opengis_netgml3_2CompositeSurface', False)

    
    CompositeSurface = property(__CompositeSurface.value, __CompositeSurface.set, None, u'A gml:CompositeSurface is represented by a set of orientable surfaces. It is geometry type with all the geometric properties of a (primitive) surface. Essentially, a composite surface is a collection of surfaces that join in pairs on common boundary curves and which, when considered as a whole, form a single surface.\nsurfaceMember references or contains inline one surface in the composite surface. \nThe surfaces are contiguous.')

    
    # Attribute owns uses Python identifier owns
    __owns = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'owns'), 'owns', '__httpwww_opengis_netgml3_2_GeometricComplexPropertyType_owns', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    owns = property(__owns.value, __owns.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_opengis_netgml3_2_GeometricComplexPropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_opengis_netgml3_2_GeometricComplexPropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_opengis_netgml3_2_GeometricComplexPropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_opengis_netgml3_2_GeometricComplexPropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'nilReason'), 'nilReason', '__httpwww_opengis_netgml3_2_GeometricComplexPropertyType_nilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_opengis_netgml3_2_GeometricComplexPropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_opengis_netgml3_2_GeometricComplexPropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.opengis.net/gml/3.2}remoteSchema uses Python identifier remoteSchema
    __remoteSchema = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'remoteSchema'), 'remoteSchema', '__httpwww_opengis_netgml3_2_GeometricComplexPropertyType_httpwww_opengis_netgml3_2remoteSchema', pyxb.binding.datatypes.anyURI)
    
    remoteSchema = property(__remoteSchema.value, __remoteSchema.set, None, u'')

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_opengis_netgml3_2_GeometricComplexPropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")


    _ElementMap = {
        __GeometricComplex.name() : __GeometricComplex,
        __CompositeCurve.name() : __CompositeCurve,
        __CompositeSolid.name() : __CompositeSolid,
        __CompositeSurface.name() : __CompositeSurface
    }
    _AttributeMap = {
        __owns.name() : __owns,
        __role.name() : __role,
        __actuate.name() : __actuate,
        __href.name() : __href,
        __type.name() : __type,
        __nilReason.name() : __nilReason,
        __arcrole.name() : __arcrole,
        __title.name() : __title,
        __remoteSchema.name() : __remoteSchema,
        __show.name() : __show
    }
_Namespace_gml.addCategoryObject('typeBinding', u'GeometricComplexPropertyType', GeometricComplexPropertyType)


# Complex type MD_Band_PropertyType with content type ELEMENT_ONLY
class MD_Band_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_Band_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmd}MD_Band uses Python identifier MD_Band
    __MD_Band = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_Band'), 'MD_Band', '__httpwww_isotc211_org2005gmd_MD_Band_PropertyType_httpwww_isotc211_org2005gmdMD_Band', False)

    
    MD_Band = property(__MD_Band.value, __MD_Band.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_isotc211_org2005gmd_MD_Band_PropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_isotc211_org2005gmd_MD_Band_PropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_isotc211_org2005gmd_MD_Band_PropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_isotc211_org2005gmd_MD_Band_PropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute uuidref uses Python identifier uuidref
    __uuidref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uuidref'), 'uuidref', '__httpwww_isotc211_org2005gmd_MD_Band_PropertyType_uuidref', pyxb.binding.datatypes.string)
    
    uuidref = property(__uuidref.value, __uuidref.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_isotc211_org2005gmd_MD_Band_PropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_isotc211_org2005gmd_MD_Band_PropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmd_MD_Band_PropertyType_httpwww_isotc211_org2005gconilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_isotc211_org2005gmd_MD_Band_PropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)


    _ElementMap = {
        __MD_Band.name() : __MD_Band
    }
    _AttributeMap = {
        __type.name() : __type,
        __show.name() : __show,
        __href.name() : __href,
        __actuate.name() : __actuate,
        __uuidref.name() : __uuidref,
        __arcrole.name() : __arcrole,
        __role.name() : __role,
        __nilReason.name() : __nilReason,
        __title.name() : __title
    }
_Namespace_gmd.addCategoryObject('typeBinding', u'MD_Band_PropertyType', MD_Band_PropertyType)


# Complex type DQ_TemporalConsistency_PropertyType with content type ELEMENT_ONLY
class DQ_TemporalConsistency_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'DQ_TemporalConsistency_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmd}DQ_TemporalConsistency uses Python identifier DQ_TemporalConsistency
    __DQ_TemporalConsistency = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'DQ_TemporalConsistency'), 'DQ_TemporalConsistency', '__httpwww_isotc211_org2005gmd_DQ_TemporalConsistency_PropertyType_httpwww_isotc211_org2005gmdDQ_TemporalConsistency', False)

    
    DQ_TemporalConsistency = property(__DQ_TemporalConsistency.value, __DQ_TemporalConsistency.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_isotc211_org2005gmd_DQ_TemporalConsistency_PropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_isotc211_org2005gmd_DQ_TemporalConsistency_PropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_isotc211_org2005gmd_DQ_TemporalConsistency_PropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmd_DQ_TemporalConsistency_PropertyType_httpwww_isotc211_org2005gconilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_isotc211_org2005gmd_DQ_TemporalConsistency_PropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute uuidref uses Python identifier uuidref
    __uuidref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uuidref'), 'uuidref', '__httpwww_isotc211_org2005gmd_DQ_TemporalConsistency_PropertyType_uuidref', pyxb.binding.datatypes.string)
    
    uuidref = property(__uuidref.value, __uuidref.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_isotc211_org2005gmd_DQ_TemporalConsistency_PropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_isotc211_org2005gmd_DQ_TemporalConsistency_PropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_isotc211_org2005gmd_DQ_TemporalConsistency_PropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)


    _ElementMap = {
        __DQ_TemporalConsistency.name() : __DQ_TemporalConsistency
    }
    _AttributeMap = {
        __arcrole.name() : __arcrole,
        __type.name() : __type,
        __role.name() : __role,
        __nilReason.name() : __nilReason,
        __show.name() : __show,
        __uuidref.name() : __uuidref,
        __href.name() : __href,
        __actuate.name() : __actuate,
        __title.name() : __title
    }
_Namespace_gmd.addCategoryObject('typeBinding', u'DQ_TemporalConsistency_PropertyType', DQ_TemporalConsistency_PropertyType)


# Complex type ConcatenatedOperationPropertyType with content type ELEMENT_ONLY
class ConcatenatedOperationPropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'ConcatenatedOperationPropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.opengis.net/gml/3.2}ConcatenatedOperation uses Python identifier ConcatenatedOperation
    __ConcatenatedOperation = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'ConcatenatedOperation'), 'ConcatenatedOperation', '__httpwww_opengis_netgml3_2_ConcatenatedOperationPropertyType_httpwww_opengis_netgml3_2ConcatenatedOperation', False)

    
    ConcatenatedOperation = property(__ConcatenatedOperation.value, __ConcatenatedOperation.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_opengis_netgml3_2_ConcatenatedOperationPropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_opengis_netgml3_2_ConcatenatedOperationPropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_opengis_netgml3_2_ConcatenatedOperationPropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_opengis_netgml3_2_ConcatenatedOperationPropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.opengis.net/gml/3.2}remoteSchema uses Python identifier remoteSchema
    __remoteSchema = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'remoteSchema'), 'remoteSchema', '__httpwww_opengis_netgml3_2_ConcatenatedOperationPropertyType_httpwww_opengis_netgml3_2remoteSchema', pyxb.binding.datatypes.anyURI)
    
    remoteSchema = property(__remoteSchema.value, __remoteSchema.set, None, u'')

    
    # Attribute nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'nilReason'), 'nilReason', '__httpwww_opengis_netgml3_2_ConcatenatedOperationPropertyType_nilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_opengis_netgml3_2_ConcatenatedOperationPropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_opengis_netgml3_2_ConcatenatedOperationPropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_opengis_netgml3_2_ConcatenatedOperationPropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)


    _ElementMap = {
        __ConcatenatedOperation.name() : __ConcatenatedOperation
    }
    _AttributeMap = {
        __role.name() : __role,
        __type.name() : __type,
        __title.name() : __title,
        __arcrole.name() : __arcrole,
        __remoteSchema.name() : __remoteSchema,
        __nilReason.name() : __nilReason,
        __show.name() : __show,
        __actuate.name() : __actuate,
        __href.name() : __href
    }
_Namespace_gml.addCategoryObject('typeBinding', u'ConcatenatedOperationPropertyType', ConcatenatedOperationPropertyType)


# Complex type KnotPropertyType with content type ELEMENT_ONLY
class KnotPropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'KnotPropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.opengis.net/gml/3.2}Knot uses Python identifier Knot
    __Knot = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'Knot'), 'Knot', '__httpwww_opengis_netgml3_2_KnotPropertyType_httpwww_opengis_netgml3_2Knot', False)

    
    Knot = property(__Knot.value, __Knot.set, None, u'A knot is a breakpoint on a piecewise spline curve.\nvalue is the value of the parameter at the knot of the spline (see ISO 19107:2003, 6.4.24.2).\nmultiplicity is the multiplicity of this knot used in the definition of the spline (with the same weight).\nweight is the value of the averaging weight used for this knot of the spline.')


    _ElementMap = {
        __Knot.name() : __Knot
    }
    _AttributeMap = {
        
    }
_Namespace_gml.addCategoryObject('typeBinding', u'KnotPropertyType', KnotPropertyType)


# Complex type TimePositionType with content type SIMPLE
class TimePositionType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = TimePositionUnion
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'TimePositionType')
    # Base type is TimePositionUnion
    
    # Attribute frame uses Python identifier frame
    __frame = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'frame'), 'frame', '__httpwww_opengis_netgml3_2_TimePositionType_frame', pyxb.binding.datatypes.anyURI, unicode_default=u'#ISO-8601')
    
    frame = property(__frame.value, __frame.set, None, None)

    
    # Attribute indeterminatePosition uses Python identifier indeterminatePosition
    __indeterminatePosition = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'indeterminatePosition'), 'indeterminatePosition', '__httpwww_opengis_netgml3_2_TimePositionType_indeterminatePosition', TimeIndeterminateValueType)
    
    indeterminatePosition = property(__indeterminatePosition.value, __indeterminatePosition.set, None, None)

    
    # Attribute calendarEraName uses Python identifier calendarEraName
    __calendarEraName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'calendarEraName'), 'calendarEraName', '__httpwww_opengis_netgml3_2_TimePositionType_calendarEraName', pyxb.binding.datatypes.string)
    
    calendarEraName = property(__calendarEraName.value, __calendarEraName.set, None, None)


    _ElementMap = {
        
    }
    _AttributeMap = {
        __frame.name() : __frame,
        __indeterminatePosition.name() : __indeterminatePosition,
        __calendarEraName.name() : __calendarEraName
    }
_Namespace_gml.addCategoryObject('typeBinding', u'TimePositionType', TimePositionType)


# Complex type DQ_CompletenessOmission_PropertyType with content type ELEMENT_ONLY
class DQ_CompletenessOmission_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'DQ_CompletenessOmission_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmd}DQ_CompletenessOmission uses Python identifier DQ_CompletenessOmission
    __DQ_CompletenessOmission = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'DQ_CompletenessOmission'), 'DQ_CompletenessOmission', '__httpwww_isotc211_org2005gmd_DQ_CompletenessOmission_PropertyType_httpwww_isotc211_org2005gmdDQ_CompletenessOmission', False)

    
    DQ_CompletenessOmission = property(__DQ_CompletenessOmission.value, __DQ_CompletenessOmission.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_isotc211_org2005gmd_DQ_CompletenessOmission_PropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmd_DQ_CompletenessOmission_PropertyType_httpwww_isotc211_org2005gconilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_isotc211_org2005gmd_DQ_CompletenessOmission_PropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_isotc211_org2005gmd_DQ_CompletenessOmission_PropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_isotc211_org2005gmd_DQ_CompletenessOmission_PropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute uuidref uses Python identifier uuidref
    __uuidref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uuidref'), 'uuidref', '__httpwww_isotc211_org2005gmd_DQ_CompletenessOmission_PropertyType_uuidref', pyxb.binding.datatypes.string)
    
    uuidref = property(__uuidref.value, __uuidref.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_isotc211_org2005gmd_DQ_CompletenessOmission_PropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_isotc211_org2005gmd_DQ_CompletenessOmission_PropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_isotc211_org2005gmd_DQ_CompletenessOmission_PropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)


    _ElementMap = {
        __DQ_CompletenessOmission.name() : __DQ_CompletenessOmission
    }
    _AttributeMap = {
        __type.name() : __type,
        __nilReason.name() : __nilReason,
        __title.name() : __title,
        __show.name() : __show,
        __href.name() : __href,
        __uuidref.name() : __uuidref,
        __actuate.name() : __actuate,
        __role.name() : __role,
        __arcrole.name() : __arcrole
    }
_Namespace_gmd.addCategoryObject('typeBinding', u'DQ_CompletenessOmission_PropertyType', DQ_CompletenessOmission_PropertyType)


# Complex type TopoVolumeType with content type ELEMENT_ONLY
class TopoVolumeType (AbstractTopologyType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'TopoVolumeType')
    # Base type is AbstractTopologyType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element {http://www.opengis.net/gml/3.2}directedTopoSolid uses Python identifier directedTopoSolid
    __directedTopoSolid = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'directedTopoSolid'), 'directedTopoSolid', '__httpwww_opengis_netgml3_2_TopoVolumeType_httpwww_opengis_netgml3_2directedTopoSolid', True)

    
    directedTopoSolid = property(__directedTopoSolid.value, __directedTopoSolid.set, None, u'The gml:directedSolid property element describes the coBoundary of topology faces and is used in the support of volume features via the gml:TopoVolume expression, see below. The orientation attribute of type gml:SignType expresses the sense in which the included solid appears in the face coboundary. In the context of a gml:TopoVolume the orientation attribute has no meaning.')

    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Attribute aggregationType uses Python identifier aggregationType
    __aggregationType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'aggregationType'), 'aggregationType', '__httpwww_opengis_netgml3_2_TopoVolumeType_aggregationType', AggregationType)
    
    aggregationType = property(__aggregationType.value, __aggregationType.set, None, None)

    
    # Attribute id inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType

    _ElementMap = AbstractTopologyType._ElementMap.copy()
    _ElementMap.update({
        __directedTopoSolid.name() : __directedTopoSolid
    })
    _AttributeMap = AbstractTopologyType._AttributeMap.copy()
    _AttributeMap.update({
        __aggregationType.name() : __aggregationType
    })
_Namespace_gml.addCategoryObject('typeBinding', u'TopoVolumeType', TopoVolumeType)


# Complex type RectifiedGridType with content type ELEMENT_ONLY
class RectifiedGridType (GridType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'RectifiedGridType')
    # Base type is GridType
    
    # Element limits ({http://www.opengis.net/gml/3.2}limits) inherited from {http://www.opengis.net/gml/3.2}GridType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element axisLabels_ ({http://www.opengis.net/gml/3.2}axisLabels) inherited from {http://www.opengis.net/gml/3.2}GridType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element axisName ({http://www.opengis.net/gml/3.2}axisName) inherited from {http://www.opengis.net/gml/3.2}GridType
    
    # Element {http://www.opengis.net/gml/3.2}origin uses Python identifier origin
    __origin = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'origin'), 'origin', '__httpwww_opengis_netgml3_2_RectifiedGridType_httpwww_opengis_netgml3_2origin', False)

    
    origin = property(__origin.value, __origin.set, None, None)

    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element {http://www.opengis.net/gml/3.2}offsetVector uses Python identifier offsetVector
    __offsetVector = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'offsetVector'), 'offsetVector', '__httpwww_opengis_netgml3_2_RectifiedGridType_httpwww_opengis_netgml3_2offsetVector', True)

    
    offsetVector = property(__offsetVector.value, __offsetVector.set, None, None)

    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Attribute uomLabels inherited from {http://www.opengis.net/gml/3.2}AbstractGeometryType
    
    # Attribute srsName inherited from {http://www.opengis.net/gml/3.2}AbstractGeometryType
    
    # Attribute id inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Attribute srsDimension inherited from {http://www.opengis.net/gml/3.2}AbstractGeometryType
    
    # Attribute dimension inherited from {http://www.opengis.net/gml/3.2}GridType
    
    # Attribute axisLabels inherited from {http://www.opengis.net/gml/3.2}AbstractGeometryType

    _ElementMap = GridType._ElementMap.copy()
    _ElementMap.update({
        __origin.name() : __origin,
        __offsetVector.name() : __offsetVector
    })
    _AttributeMap = GridType._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gml.addCategoryObject('typeBinding', u'RectifiedGridType', RectifiedGridType)


# Complex type MD_FeatureCatalogueDescription_PropertyType with content type ELEMENT_ONLY
class MD_FeatureCatalogueDescription_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_FeatureCatalogueDescription_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmd}MD_FeatureCatalogueDescription uses Python identifier MD_FeatureCatalogueDescription
    __MD_FeatureCatalogueDescription = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_FeatureCatalogueDescription'), 'MD_FeatureCatalogueDescription', '__httpwww_isotc211_org2005gmd_MD_FeatureCatalogueDescription_PropertyType_httpwww_isotc211_org2005gmdMD_FeatureCatalogueDescription', False)

    
    MD_FeatureCatalogueDescription = property(__MD_FeatureCatalogueDescription.value, __MD_FeatureCatalogueDescription.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_isotc211_org2005gmd_MD_FeatureCatalogueDescription_PropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_isotc211_org2005gmd_MD_FeatureCatalogueDescription_PropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmd_MD_FeatureCatalogueDescription_PropertyType_httpwww_isotc211_org2005gconilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_isotc211_org2005gmd_MD_FeatureCatalogueDescription_PropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_isotc211_org2005gmd_MD_FeatureCatalogueDescription_PropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute uuidref uses Python identifier uuidref
    __uuidref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uuidref'), 'uuidref', '__httpwww_isotc211_org2005gmd_MD_FeatureCatalogueDescription_PropertyType_uuidref', pyxb.binding.datatypes.string)
    
    uuidref = property(__uuidref.value, __uuidref.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_isotc211_org2005gmd_MD_FeatureCatalogueDescription_PropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_isotc211_org2005gmd_MD_FeatureCatalogueDescription_PropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_isotc211_org2005gmd_MD_FeatureCatalogueDescription_PropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)


    _ElementMap = {
        __MD_FeatureCatalogueDescription.name() : __MD_FeatureCatalogueDescription
    }
    _AttributeMap = {
        __role.name() : __role,
        __type.name() : __type,
        __nilReason.name() : __nilReason,
        __title.name() : __title,
        __show.name() : __show,
        __uuidref.name() : __uuidref,
        __actuate.name() : __actuate,
        __href.name() : __href,
        __arcrole.name() : __arcrole
    }
_Namespace_gmd.addCategoryObject('typeBinding', u'MD_FeatureCatalogueDescription_PropertyType', MD_FeatureCatalogueDescription_PropertyType)


# Complex type LI_Source_Type with content type ELEMENT_ONLY
class LI_Source_Type (AbstractObject_Type):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'LI_Source_Type')
    # Base type is AbstractObject_Type
    
    # Element {http://www.isotc211.org/2005/gmd}description uses Python identifier description
    __description = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'description'), 'description', '__httpwww_isotc211_org2005gmd_LI_Source_Type_httpwww_isotc211_org2005gmddescription', False)

    
    description = property(__description.value, __description.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}sourceReferenceSystem uses Python identifier sourceReferenceSystem
    __sourceReferenceSystem = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'sourceReferenceSystem'), 'sourceReferenceSystem', '__httpwww_isotc211_org2005gmd_LI_Source_Type_httpwww_isotc211_org2005gmdsourceReferenceSystem', False)

    
    sourceReferenceSystem = property(__sourceReferenceSystem.value, __sourceReferenceSystem.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}sourceCitation uses Python identifier sourceCitation
    __sourceCitation = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'sourceCitation'), 'sourceCitation', '__httpwww_isotc211_org2005gmd_LI_Source_Type_httpwww_isotc211_org2005gmdsourceCitation', False)

    
    sourceCitation = property(__sourceCitation.value, __sourceCitation.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}scaleDenominator uses Python identifier scaleDenominator
    __scaleDenominator = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'scaleDenominator'), 'scaleDenominator', '__httpwww_isotc211_org2005gmd_LI_Source_Type_httpwww_isotc211_org2005gmdscaleDenominator', False)

    
    scaleDenominator = property(__scaleDenominator.value, __scaleDenominator.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}sourceExtent uses Python identifier sourceExtent
    __sourceExtent = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'sourceExtent'), 'sourceExtent', '__httpwww_isotc211_org2005gmd_LI_Source_Type_httpwww_isotc211_org2005gmdsourceExtent', True)

    
    sourceExtent = property(__sourceExtent.value, __sourceExtent.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}sourceStep uses Python identifier sourceStep
    __sourceStep = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'sourceStep'), 'sourceStep', '__httpwww_isotc211_org2005gmd_LI_Source_Type_httpwww_isotc211_org2005gmdsourceStep', True)

    
    sourceStep = property(__sourceStep.value, __sourceStep.set, None, None)

    
    # Attribute id inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type
    
    # Attribute uuid inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type

    _ElementMap = AbstractObject_Type._ElementMap.copy()
    _ElementMap.update({
        __description.name() : __description,
        __sourceReferenceSystem.name() : __sourceReferenceSystem,
        __sourceCitation.name() : __sourceCitation,
        __scaleDenominator.name() : __scaleDenominator,
        __sourceExtent.name() : __sourceExtent,
        __sourceStep.name() : __sourceStep
    })
    _AttributeMap = AbstractObject_Type._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gmd.addCategoryObject('typeBinding', u'LI_Source_Type', LI_Source_Type)


# Complex type ArcStringType with content type ELEMENT_ONLY
class ArcStringType (AbstractCurveSegmentType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'ArcStringType')
    # Base type is AbstractCurveSegmentType
    
    # Element {http://www.opengis.net/gml/3.2}pointRep uses Python identifier pointRep
    __pointRep = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'pointRep'), 'pointRep', '__httpwww_opengis_netgml3_2_ArcStringType_httpwww_opengis_netgml3_2pointRep', True)

    
    pointRep = property(__pointRep.value, __pointRep.set, None, u'')

    
    # Element {http://www.opengis.net/gml/3.2}pointProperty uses Python identifier pointProperty
    __pointProperty = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'pointProperty'), 'pointProperty', '__httpwww_opengis_netgml3_2_ArcStringType_httpwww_opengis_netgml3_2pointProperty', True)

    
    pointProperty = property(__pointProperty.value, __pointProperty.set, None, u'This property element either references a point via the XLink-attributes or contains the point element. pointProperty is the predefined property which may be used by GML Application Schemas whenever a GML feature has a property with a value that is substitutable for Point.')

    
    # Element {http://www.opengis.net/gml/3.2}posList uses Python identifier posList
    __posList = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'posList'), 'posList', '__httpwww_opengis_netgml3_2_ArcStringType_httpwww_opengis_netgml3_2posList', False)

    
    posList = property(__posList.value, __posList.set, None, None)

    
    # Element {http://www.opengis.net/gml/3.2}pos uses Python identifier pos
    __pos = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'pos'), 'pos', '__httpwww_opengis_netgml3_2_ArcStringType_httpwww_opengis_netgml3_2pos', True)

    
    pos = property(__pos.value, __pos.set, None, None)

    
    # Element {http://www.opengis.net/gml/3.2}coordinates uses Python identifier coordinates
    __coordinates = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'coordinates'), 'coordinates', '__httpwww_opengis_netgml3_2_ArcStringType_httpwww_opengis_netgml3_2coordinates', False)

    
    coordinates = property(__coordinates.value, __coordinates.set, None, u'')

    
    # Attribute numDerivativesAtEnd inherited from {http://www.opengis.net/gml/3.2}AbstractCurveSegmentType
    
    # Attribute numDerivativesAtStart inherited from {http://www.opengis.net/gml/3.2}AbstractCurveSegmentType
    
    # Attribute numDerivativeInterior inherited from {http://www.opengis.net/gml/3.2}AbstractCurveSegmentType
    
    # Attribute interpolation uses Python identifier interpolation
    __interpolation = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'interpolation'), 'interpolation', '__httpwww_opengis_netgml3_2_ArcStringType_interpolation', CurveInterpolationType, fixed=True, unicode_default=u'circularArc3Points')
    
    interpolation = property(__interpolation.value, __interpolation.set, None, None)

    
    # Attribute numArc uses Python identifier numArc
    __numArc = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'numArc'), 'numArc', '__httpwww_opengis_netgml3_2_ArcStringType_numArc', pyxb.binding.datatypes.integer)
    
    numArc = property(__numArc.value, __numArc.set, None, None)


    _ElementMap = AbstractCurveSegmentType._ElementMap.copy()
    _ElementMap.update({
        __pointRep.name() : __pointRep,
        __pointProperty.name() : __pointProperty,
        __posList.name() : __posList,
        __pos.name() : __pos,
        __coordinates.name() : __coordinates
    })
    _AttributeMap = AbstractCurveSegmentType._AttributeMap.copy()
    _AttributeMap.update({
        __interpolation.name() : __interpolation,
        __numArc.name() : __numArc
    })
_Namespace_gml.addCategoryObject('typeBinding', u'ArcStringType', ArcStringType)


# Complex type ArcType with content type ELEMENT_ONLY
class ArcType (ArcStringType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'ArcType')
    # Base type is ArcStringType
    
    # Element pointRep ({http://www.opengis.net/gml/3.2}pointRep) inherited from {http://www.opengis.net/gml/3.2}ArcStringType
    
    # Element pointProperty ({http://www.opengis.net/gml/3.2}pointProperty) inherited from {http://www.opengis.net/gml/3.2}ArcStringType
    
    # Element posList ({http://www.opengis.net/gml/3.2}posList) inherited from {http://www.opengis.net/gml/3.2}ArcStringType
    
    # Element pos ({http://www.opengis.net/gml/3.2}pos) inherited from {http://www.opengis.net/gml/3.2}ArcStringType
    
    # Element coordinates ({http://www.opengis.net/gml/3.2}coordinates) inherited from {http://www.opengis.net/gml/3.2}ArcStringType
    
    # Attribute numDerivativeInterior inherited from {http://www.opengis.net/gml/3.2}AbstractCurveSegmentType
    
    # Attribute numDerivativesAtEnd inherited from {http://www.opengis.net/gml/3.2}AbstractCurveSegmentType
    
    # Attribute numDerivativesAtStart inherited from {http://www.opengis.net/gml/3.2}AbstractCurveSegmentType
    
    # Attribute interpolation inherited from {http://www.opengis.net/gml/3.2}ArcStringType
    
    # Attribute numArc is restricted from parent
    
    # Attribute numArc uses Python identifier numArc
    __numArc = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'numArc'), 'numArc', '__httpwww_opengis_netgml3_2_ArcStringType_numArc', pyxb.binding.datatypes.integer, fixed=True, unicode_default=u'1')
    
    numArc = property(__numArc.value, __numArc.set, None, None)


    _ElementMap = ArcStringType._ElementMap.copy()
    _ElementMap.update({
        
    })
    _AttributeMap = ArcStringType._AttributeMap.copy()
    _AttributeMap.update({
        __numArc.name() : __numArc
    })
_Namespace_gml.addCategoryObject('typeBinding', u'ArcType', ArcType)


# Complex type CircleType with content type ELEMENT_ONLY
class CircleType (ArcType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'CircleType')
    # Base type is ArcType
    
    # Element pointRep ({http://www.opengis.net/gml/3.2}pointRep) inherited from {http://www.opengis.net/gml/3.2}ArcStringType
    
    # Element pointProperty ({http://www.opengis.net/gml/3.2}pointProperty) inherited from {http://www.opengis.net/gml/3.2}ArcStringType
    
    # Element posList ({http://www.opengis.net/gml/3.2}posList) inherited from {http://www.opengis.net/gml/3.2}ArcStringType
    
    # Element pos ({http://www.opengis.net/gml/3.2}pos) inherited from {http://www.opengis.net/gml/3.2}ArcStringType
    
    # Element coordinates ({http://www.opengis.net/gml/3.2}coordinates) inherited from {http://www.opengis.net/gml/3.2}ArcStringType
    
    # Attribute numArc_ inherited from {http://www.opengis.net/gml/3.2}ArcType
    
    # Attribute numDerivativesAtEnd inherited from {http://www.opengis.net/gml/3.2}AbstractCurveSegmentType
    
    # Attribute numDerivativesAtStart inherited from {http://www.opengis.net/gml/3.2}AbstractCurveSegmentType
    
    # Attribute interpolation inherited from {http://www.opengis.net/gml/3.2}ArcStringType
    
    # Attribute numDerivativeInterior inherited from {http://www.opengis.net/gml/3.2}AbstractCurveSegmentType

    _ElementMap = ArcType._ElementMap.copy()
    _ElementMap.update({
        
    })
    _AttributeMap = ArcType._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gml.addCategoryObject('typeBinding', u'CircleType', CircleType)


# Complex type MD_RepresentativeFraction_PropertyType with content type ELEMENT_ONLY
class MD_RepresentativeFraction_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_RepresentativeFraction_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmd}MD_RepresentativeFraction uses Python identifier MD_RepresentativeFraction
    __MD_RepresentativeFraction = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_RepresentativeFraction'), 'MD_RepresentativeFraction', '__httpwww_isotc211_org2005gmd_MD_RepresentativeFraction_PropertyType_httpwww_isotc211_org2005gmdMD_RepresentativeFraction', False)

    
    MD_RepresentativeFraction = property(__MD_RepresentativeFraction.value, __MD_RepresentativeFraction.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_isotc211_org2005gmd_MD_RepresentativeFraction_PropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_isotc211_org2005gmd_MD_RepresentativeFraction_PropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_isotc211_org2005gmd_MD_RepresentativeFraction_PropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmd_MD_RepresentativeFraction_PropertyType_httpwww_isotc211_org2005gconilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_isotc211_org2005gmd_MD_RepresentativeFraction_PropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute uuidref uses Python identifier uuidref
    __uuidref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uuidref'), 'uuidref', '__httpwww_isotc211_org2005gmd_MD_RepresentativeFraction_PropertyType_uuidref', pyxb.binding.datatypes.string)
    
    uuidref = property(__uuidref.value, __uuidref.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_isotc211_org2005gmd_MD_RepresentativeFraction_PropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_isotc211_org2005gmd_MD_RepresentativeFraction_PropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_isotc211_org2005gmd_MD_RepresentativeFraction_PropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")


    _ElementMap = {
        __MD_RepresentativeFraction.name() : __MD_RepresentativeFraction
    }
    _AttributeMap = {
        __role.name() : __role,
        __type.name() : __type,
        __arcrole.name() : __arcrole,
        __nilReason.name() : __nilReason,
        __title.name() : __title,
        __uuidref.name() : __uuidref,
        __show.name() : __show,
        __href.name() : __href,
        __actuate.name() : __actuate
    }
_Namespace_gmd.addCategoryObject('typeBinding', u'MD_RepresentativeFraction_PropertyType', MD_RepresentativeFraction_PropertyType)


# Complex type VolumeType with content type SIMPLE
class VolumeType (MeasureType):
    _TypeDefinition = pyxb.binding.datatypes.double
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'VolumeType')
    # Base type is MeasureType
    
    # Attribute uom inherited from {http://www.opengis.net/gml/3.2}MeasureType

    _ElementMap = MeasureType._ElementMap.copy()
    _ElementMap.update({
        
    })
    _AttributeMap = MeasureType._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gml.addCategoryObject('typeBinding', u'VolumeType', VolumeType)


# Complex type MD_VectorSpatialRepresentation_PropertyType with content type ELEMENT_ONLY
class MD_VectorSpatialRepresentation_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_VectorSpatialRepresentation_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmd}MD_VectorSpatialRepresentation uses Python identifier MD_VectorSpatialRepresentation
    __MD_VectorSpatialRepresentation = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_VectorSpatialRepresentation'), 'MD_VectorSpatialRepresentation', '__httpwww_isotc211_org2005gmd_MD_VectorSpatialRepresentation_PropertyType_httpwww_isotc211_org2005gmdMD_VectorSpatialRepresentation', False)

    
    MD_VectorSpatialRepresentation = property(__MD_VectorSpatialRepresentation.value, __MD_VectorSpatialRepresentation.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_isotc211_org2005gmd_MD_VectorSpatialRepresentation_PropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_isotc211_org2005gmd_MD_VectorSpatialRepresentation_PropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmd_MD_VectorSpatialRepresentation_PropertyType_httpwww_isotc211_org2005gconilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_isotc211_org2005gmd_MD_VectorSpatialRepresentation_PropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_isotc211_org2005gmd_MD_VectorSpatialRepresentation_PropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute uuidref uses Python identifier uuidref
    __uuidref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uuidref'), 'uuidref', '__httpwww_isotc211_org2005gmd_MD_VectorSpatialRepresentation_PropertyType_uuidref', pyxb.binding.datatypes.string)
    
    uuidref = property(__uuidref.value, __uuidref.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_isotc211_org2005gmd_MD_VectorSpatialRepresentation_PropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_isotc211_org2005gmd_MD_VectorSpatialRepresentation_PropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_isotc211_org2005gmd_MD_VectorSpatialRepresentation_PropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)


    _ElementMap = {
        __MD_VectorSpatialRepresentation.name() : __MD_VectorSpatialRepresentation
    }
    _AttributeMap = {
        __arcrole.name() : __arcrole,
        __role.name() : __role,
        __nilReason.name() : __nilReason,
        __title.name() : __title,
        __show.name() : __show,
        __uuidref.name() : __uuidref,
        __href.name() : __href,
        __actuate.name() : __actuate,
        __type.name() : __type
    }
_Namespace_gmd.addCategoryObject('typeBinding', u'MD_VectorSpatialRepresentation_PropertyType', MD_VectorSpatialRepresentation_PropertyType)


# Complex type UomLength_PropertyType with content type ELEMENT_ONLY
class UomLength_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gco, u'UomLength_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.opengis.net/gml/3.2}UnitDefinition uses Python identifier UnitDefinition
    __UnitDefinition = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'UnitDefinition'), 'UnitDefinition', '__httpwww_isotc211_org2005gco_UomLength_PropertyType_httpwww_opengis_netgml3_2UnitDefinition', False)

    
    UnitDefinition = property(__UnitDefinition.value, __UnitDefinition.set, None, u'A gml:UnitDefinition is a general definition of a unit of measure. This generic element is used only for units for which no relationship with other units or units systems is known.\nThe content model of gml:UnitDefinition adds three additional properties to gml:Definition, gml:quantityType, gml:quantityTypeReference and gml:catalogSymbol.  \nThe gml:catalogSymbol property optionally gives the short symbol used for this unit. This element is usually used when the relationship of this unit to other units or units systems is unknown.')

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_isotc211_org2005gco_UomLength_PropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_isotc211_org2005gco_UomLength_PropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_isotc211_org2005gco_UomLength_PropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gco_UomLength_PropertyType_httpwww_isotc211_org2005gconilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_isotc211_org2005gco_UomLength_PropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute uuidref uses Python identifier uuidref
    __uuidref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uuidref'), 'uuidref', '__httpwww_isotc211_org2005gco_UomLength_PropertyType_uuidref', pyxb.binding.datatypes.string)
    
    uuidref = property(__uuidref.value, __uuidref.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_isotc211_org2005gco_UomLength_PropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_isotc211_org2005gco_UomLength_PropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_isotc211_org2005gco_UomLength_PropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")


    _ElementMap = {
        __UnitDefinition.name() : __UnitDefinition
    }
    _AttributeMap = {
        __role.name() : __role,
        __type.name() : __type,
        __arcrole.name() : __arcrole,
        __nilReason.name() : __nilReason,
        __title.name() : __title,
        __uuidref.name() : __uuidref,
        __show.name() : __show,
        __href.name() : __href,
        __actuate.name() : __actuate
    }
_Namespace_gco.addCategoryObject('typeBinding', u'UomLength_PropertyType', UomLength_PropertyType)


# Complex type TopoPrimitiveMemberType with content type ELEMENT_ONLY
class TopoPrimitiveMemberType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'TopoPrimitiveMemberType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.opengis.net/gml/3.2}AbstractTopoPrimitive uses Python identifier AbstractTopoPrimitive
    __AbstractTopoPrimitive = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractTopoPrimitive'), 'AbstractTopoPrimitive', '__httpwww_opengis_netgml3_2_TopoPrimitiveMemberType_httpwww_opengis_netgml3_2AbstractTopoPrimitive', False)

    
    AbstractTopoPrimitive = property(__AbstractTopoPrimitive.value, __AbstractTopoPrimitive.set, None, u'gml:AbstractTopoPrimitive acts as the base type for all topological primitives. Topology primitives are the atomic (smallest possible) units of a topology complex. \nEach topology primitive may contain references to other topology primitives of codimension 2 or more (gml:isolated). Conversely, nodes may have faces as containers and nodes and edges may have solids as containers (gml:container).')

    
    # Attribute owns uses Python identifier owns
    __owns = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'owns'), 'owns', '__httpwww_opengis_netgml3_2_TopoPrimitiveMemberType_owns', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    owns = property(__owns.value, __owns.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_opengis_netgml3_2_TopoPrimitiveMemberType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_opengis_netgml3_2_TopoPrimitiveMemberType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_opengis_netgml3_2_TopoPrimitiveMemberType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_opengis_netgml3_2_TopoPrimitiveMemberType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'nilReason'), 'nilReason', '__httpwww_opengis_netgml3_2_TopoPrimitiveMemberType_nilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_opengis_netgml3_2_TopoPrimitiveMemberType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_opengis_netgml3_2_TopoPrimitiveMemberType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.opengis.net/gml/3.2}remoteSchema uses Python identifier remoteSchema
    __remoteSchema = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'remoteSchema'), 'remoteSchema', '__httpwww_opengis_netgml3_2_TopoPrimitiveMemberType_httpwww_opengis_netgml3_2remoteSchema', pyxb.binding.datatypes.anyURI)
    
    remoteSchema = property(__remoteSchema.value, __remoteSchema.set, None, u'')

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_opengis_netgml3_2_TopoPrimitiveMemberType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")


    _ElementMap = {
        __AbstractTopoPrimitive.name() : __AbstractTopoPrimitive
    }
    _AttributeMap = {
        __owns.name() : __owns,
        __role.name() : __role,
        __actuate.name() : __actuate,
        __href.name() : __href,
        __type.name() : __type,
        __nilReason.name() : __nilReason,
        __title.name() : __title,
        __arcrole.name() : __arcrole,
        __remoteSchema.name() : __remoteSchema,
        __show.name() : __show
    }
_Namespace_gml.addCategoryObject('typeBinding', u'TopoPrimitiveMemberType', TopoPrimitiveMemberType)


# Complex type MD_MaintenanceInformation_PropertyType with content type ELEMENT_ONLY
class MD_MaintenanceInformation_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_MaintenanceInformation_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmd}MD_MaintenanceInformation uses Python identifier MD_MaintenanceInformation
    __MD_MaintenanceInformation = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_MaintenanceInformation'), 'MD_MaintenanceInformation', '__httpwww_isotc211_org2005gmd_MD_MaintenanceInformation_PropertyType_httpwww_isotc211_org2005gmdMD_MaintenanceInformation', False)

    
    MD_MaintenanceInformation = property(__MD_MaintenanceInformation.value, __MD_MaintenanceInformation.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_isotc211_org2005gmd_MD_MaintenanceInformation_PropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_isotc211_org2005gmd_MD_MaintenanceInformation_PropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_isotc211_org2005gmd_MD_MaintenanceInformation_PropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmd_MD_MaintenanceInformation_PropertyType_httpwww_isotc211_org2005gconilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_isotc211_org2005gmd_MD_MaintenanceInformation_PropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_isotc211_org2005gmd_MD_MaintenanceInformation_PropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_isotc211_org2005gmd_MD_MaintenanceInformation_PropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute uuidref uses Python identifier uuidref
    __uuidref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uuidref'), 'uuidref', '__httpwww_isotc211_org2005gmd_MD_MaintenanceInformation_PropertyType_uuidref', pyxb.binding.datatypes.string)
    
    uuidref = property(__uuidref.value, __uuidref.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_isotc211_org2005gmd_MD_MaintenanceInformation_PropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)


    _ElementMap = {
        __MD_MaintenanceInformation.name() : __MD_MaintenanceInformation
    }
    _AttributeMap = {
        __arcrole.name() : __arcrole,
        __type.name() : __type,
        __role.name() : __role,
        __nilReason.name() : __nilReason,
        __title.name() : __title,
        __actuate.name() : __actuate,
        __show.name() : __show,
        __uuidref.name() : __uuidref,
        __href.name() : __href
    }
_Namespace_gmd.addCategoryObject('typeBinding', u'MD_MaintenanceInformation_PropertyType', MD_MaintenanceInformation_PropertyType)


# Complex type Scale_PropertyType with content type ELEMENT_ONLY
class Scale_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gco, u'Scale_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gco}Scale uses Python identifier Scale
    __Scale = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'Scale'), 'Scale', '__httpwww_isotc211_org2005gco_Scale_PropertyType_httpwww_isotc211_org2005gcoScale', False)

    
    Scale = property(__Scale.value, __Scale.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gco_Scale_PropertyType_httpwww_isotc211_org2005gconilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)


    _ElementMap = {
        __Scale.name() : __Scale
    }
    _AttributeMap = {
        __nilReason.name() : __nilReason
    }
_Namespace_gco.addCategoryObject('typeBinding', u'Scale_PropertyType', Scale_PropertyType)


# Complex type EngineeringCRSPropertyType with content type ELEMENT_ONLY
class EngineeringCRSPropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'EngineeringCRSPropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.opengis.net/gml/3.2}EngineeringCRS uses Python identifier EngineeringCRS
    __EngineeringCRS = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'EngineeringCRS'), 'EngineeringCRS', '__httpwww_opengis_netgml3_2_EngineeringCRSPropertyType_httpwww_opengis_netgml3_2EngineeringCRS', False)

    
    EngineeringCRS = property(__EngineeringCRS.value, __EngineeringCRS.set, None, u'gml:EngineeringCRS is a contextually local coordinate reference system which can be divided into two broad categories:\n-\tearth-fixed systems applied to engineering activities on or near the surface of the earth;\n-\tCRSs on moving platforms such as road vehicles, vessels, aircraft, or spacecraft, see ISO 19111 8.3.')

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_opengis_netgml3_2_EngineeringCRSPropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.opengis.net/gml/3.2}remoteSchema uses Python identifier remoteSchema
    __remoteSchema = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'remoteSchema'), 'remoteSchema', '__httpwww_opengis_netgml3_2_EngineeringCRSPropertyType_httpwww_opengis_netgml3_2remoteSchema', pyxb.binding.datatypes.anyURI)
    
    remoteSchema = property(__remoteSchema.value, __remoteSchema.set, None, u'')

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_opengis_netgml3_2_EngineeringCRSPropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_opengis_netgml3_2_EngineeringCRSPropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_opengis_netgml3_2_EngineeringCRSPropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'nilReason'), 'nilReason', '__httpwww_opengis_netgml3_2_EngineeringCRSPropertyType_nilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_opengis_netgml3_2_EngineeringCRSPropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_opengis_netgml3_2_EngineeringCRSPropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_opengis_netgml3_2_EngineeringCRSPropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)


    _ElementMap = {
        __EngineeringCRS.name() : __EngineeringCRS
    }
    _AttributeMap = {
        __arcrole.name() : __arcrole,
        __remoteSchema.name() : __remoteSchema,
        __role.name() : __role,
        __show.name() : __show,
        __actuate.name() : __actuate,
        __nilReason.name() : __nilReason,
        __href.name() : __href,
        __title.name() : __title,
        __type.name() : __type
    }
_Namespace_gml.addCategoryObject('typeBinding', u'EngineeringCRSPropertyType', EngineeringCRSPropertyType)


# Complex type CTD_ANON_8 with content type ELEMENT_ONLY
class CTD_ANON_8 (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.opengis.net/gml/3.2}SecondDefiningParameter uses Python identifier SecondDefiningParameter
    __SecondDefiningParameter = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'SecondDefiningParameter'), 'SecondDefiningParameter', '__httpwww_opengis_netgml3_2_CTD_ANON_8_httpwww_opengis_netgml3_2SecondDefiningParameter', False)

    
    SecondDefiningParameter = property(__SecondDefiningParameter.value, __SecondDefiningParameter.set, None, None)


    _ElementMap = {
        __SecondDefiningParameter.name() : __SecondDefiningParameter
    }
    _AttributeMap = {
        
    }



# Complex type DirectionVectorType with content type ELEMENT_ONLY
class DirectionVectorType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'DirectionVectorType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.opengis.net/gml/3.2}vector uses Python identifier vector
    __vector = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'vector'), 'vector', '__httpwww_opengis_netgml3_2_DirectionVectorType_httpwww_opengis_netgml3_2vector', False)

    
    vector = property(__vector.value, __vector.set, None, None)

    
    # Element {http://www.opengis.net/gml/3.2}verticalAngle uses Python identifier verticalAngle
    __verticalAngle = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'verticalAngle'), 'verticalAngle', '__httpwww_opengis_netgml3_2_DirectionVectorType_httpwww_opengis_netgml3_2verticalAngle', False)

    
    verticalAngle = property(__verticalAngle.value, __verticalAngle.set, None, None)

    
    # Element {http://www.opengis.net/gml/3.2}horizontalAngle uses Python identifier horizontalAngle
    __horizontalAngle = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'horizontalAngle'), 'horizontalAngle', '__httpwww_opengis_netgml3_2_DirectionVectorType_httpwww_opengis_netgml3_2horizontalAngle', False)

    
    horizontalAngle = property(__horizontalAngle.value, __horizontalAngle.set, None, None)


    _ElementMap = {
        __vector.name() : __vector,
        __verticalAngle.name() : __verticalAngle,
        __horizontalAngle.name() : __horizontalAngle
    }
    _AttributeMap = {
        
    }
_Namespace_gml.addCategoryObject('typeBinding', u'DirectionVectorType', DirectionVectorType)


# Complex type OrientableCurveType with content type ELEMENT_ONLY
class OrientableCurveType (AbstractCurveType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'OrientableCurveType')
    # Base type is AbstractCurveType
    
    # Element {http://www.opengis.net/gml/3.2}baseCurve uses Python identifier baseCurve
    __baseCurve = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'baseCurve'), 'baseCurve', '__httpwww_opengis_netgml3_2_OrientableCurveType_httpwww_opengis_netgml3_2baseCurve', False)

    
    baseCurve = property(__baseCurve.value, __baseCurve.set, None, u'The property baseCurve references or contains the base curve, i.e. it either references the base curve via the XLink-attributes or contains the curve element. A curve element is any element which is substitutable for AbstractCurve. The base curve has positive orientation.')

    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Attribute orientation uses Python identifier orientation
    __orientation = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'orientation'), 'orientation', '__httpwww_opengis_netgml3_2_OrientableCurveType_orientation', SignType, unicode_default=u'+')
    
    orientation = property(__orientation.value, __orientation.set, None, None)

    
    # Attribute uomLabels inherited from {http://www.opengis.net/gml/3.2}AbstractGeometryType
    
    # Attribute srsName inherited from {http://www.opengis.net/gml/3.2}AbstractGeometryType
    
    # Attribute id inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Attribute srsDimension inherited from {http://www.opengis.net/gml/3.2}AbstractGeometryType
    
    # Attribute axisLabels inherited from {http://www.opengis.net/gml/3.2}AbstractGeometryType

    _ElementMap = AbstractCurveType._ElementMap.copy()
    _ElementMap.update({
        __baseCurve.name() : __baseCurve
    })
    _AttributeMap = AbstractCurveType._AttributeMap.copy()
    _AttributeMap.update({
        __orientation.name() : __orientation
    })
_Namespace_gml.addCategoryObject('typeBinding', u'OrientableCurveType', OrientableCurveType)


# Complex type TM_Primitive_PropertyType with content type ELEMENT_ONLY
class TM_Primitive_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gts, u'TM_Primitive_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.opengis.net/gml/3.2}AbstractTimePrimitive uses Python identifier AbstractTimePrimitive
    __AbstractTimePrimitive = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractTimePrimitive'), 'AbstractTimePrimitive', '__httpwww_isotc211_org2005gts_TM_Primitive_PropertyType_httpwww_opengis_netgml3_2AbstractTimePrimitive', False)

    
    AbstractTimePrimitive = property(__AbstractTimePrimitive.value, __AbstractTimePrimitive.set, None, u'gml:AbstractTimePrimitive acts as the head of a substitution group for geometric and topological temporal primitives.')

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_isotc211_org2005gts_TM_Primitive_PropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_isotc211_org2005gts_TM_Primitive_PropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_isotc211_org2005gts_TM_Primitive_PropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gts_TM_Primitive_PropertyType_httpwww_isotc211_org2005gconilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_isotc211_org2005gts_TM_Primitive_PropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute uuidref uses Python identifier uuidref
    __uuidref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uuidref'), 'uuidref', '__httpwww_isotc211_org2005gts_TM_Primitive_PropertyType_uuidref', pyxb.binding.datatypes.string)
    
    uuidref = property(__uuidref.value, __uuidref.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_isotc211_org2005gts_TM_Primitive_PropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_isotc211_org2005gts_TM_Primitive_PropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_isotc211_org2005gts_TM_Primitive_PropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)


    _ElementMap = {
        __AbstractTimePrimitive.name() : __AbstractTimePrimitive
    }
    _AttributeMap = {
        __type.name() : __type,
        __arcrole.name() : __arcrole,
        __show.name() : __show,
        __nilReason.name() : __nilReason,
        __title.name() : __title,
        __uuidref.name() : __uuidref,
        __href.name() : __href,
        __actuate.name() : __actuate,
        __role.name() : __role
    }
_Namespace_gts.addCategoryObject('typeBinding', u'TM_Primitive_PropertyType', TM_Primitive_PropertyType)


# Complex type LocalName_PropertyType with content type ELEMENT_ONLY
class LocalName_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gco, u'LocalName_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gco}LocalName uses Python identifier LocalName
    __LocalName = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'LocalName'), 'LocalName', '__httpwww_isotc211_org2005gco_LocalName_PropertyType_httpwww_isotc211_org2005gcoLocalName', False)

    
    LocalName = property(__LocalName.value, __LocalName.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gco_LocalName_PropertyType_httpwww_isotc211_org2005gconilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)


    _ElementMap = {
        __LocalName.name() : __LocalName
    }
    _AttributeMap = {
        __nilReason.name() : __nilReason
    }
_Namespace_gco.addCategoryObject('typeBinding', u'LocalName_PropertyType', LocalName_PropertyType)


# Complex type EX_GeographicDescription_Type with content type ELEMENT_ONLY
class EX_GeographicDescription_Type (AbstractEX_GeographicExtent_Type):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'EX_GeographicDescription_Type')
    # Base type is AbstractEX_GeographicExtent_Type
    
    # Element {http://www.isotc211.org/2005/gmd}geographicIdentifier uses Python identifier geographicIdentifier
    __geographicIdentifier = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'geographicIdentifier'), 'geographicIdentifier', '__httpwww_isotc211_org2005gmd_EX_GeographicDescription_Type_httpwww_isotc211_org2005gmdgeographicIdentifier', False)

    
    geographicIdentifier = property(__geographicIdentifier.value, __geographicIdentifier.set, None, None)

    
    # Element extentTypeCode ({http://www.isotc211.org/2005/gmd}extentTypeCode) inherited from {http://www.isotc211.org/2005/gmd}AbstractEX_GeographicExtent_Type
    
    # Attribute id inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type
    
    # Attribute uuid inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type

    _ElementMap = AbstractEX_GeographicExtent_Type._ElementMap.copy()
    _ElementMap.update({
        __geographicIdentifier.name() : __geographicIdentifier
    })
    _AttributeMap = AbstractEX_GeographicExtent_Type._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gmd.addCategoryObject('typeBinding', u'EX_GeographicDescription_Type', EX_GeographicDescription_Type)


# Complex type EX_GeographicExtent_PropertyType with content type ELEMENT_ONLY
class EX_GeographicExtent_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'EX_GeographicExtent_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmd}AbstractEX_GeographicExtent uses Python identifier AbstractEX_GeographicExtent
    __AbstractEX_GeographicExtent = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'AbstractEX_GeographicExtent'), 'AbstractEX_GeographicExtent', '__httpwww_isotc211_org2005gmd_EX_GeographicExtent_PropertyType_httpwww_isotc211_org2005gmdAbstractEX_GeographicExtent', False)

    
    AbstractEX_GeographicExtent = property(__AbstractEX_GeographicExtent.value, __AbstractEX_GeographicExtent.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_isotc211_org2005gmd_EX_GeographicExtent_PropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_isotc211_org2005gmd_EX_GeographicExtent_PropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_isotc211_org2005gmd_EX_GeographicExtent_PropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_isotc211_org2005gmd_EX_GeographicExtent_PropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute uuidref uses Python identifier uuidref
    __uuidref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uuidref'), 'uuidref', '__httpwww_isotc211_org2005gmd_EX_GeographicExtent_PropertyType_uuidref', pyxb.binding.datatypes.string)
    
    uuidref = property(__uuidref.value, __uuidref.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_isotc211_org2005gmd_EX_GeographicExtent_PropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_isotc211_org2005gmd_EX_GeographicExtent_PropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmd_EX_GeographicExtent_PropertyType_httpwww_isotc211_org2005gconilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_isotc211_org2005gmd_EX_GeographicExtent_PropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")


    _ElementMap = {
        __AbstractEX_GeographicExtent.name() : __AbstractEX_GeographicExtent
    }
    _AttributeMap = {
        __type.name() : __type,
        __show.name() : __show,
        __href.name() : __href,
        __role.name() : __role,
        __uuidref.name() : __uuidref,
        __arcrole.name() : __arcrole,
        __title.name() : __title,
        __nilReason.name() : __nilReason,
        __actuate.name() : __actuate
    }
_Namespace_gmd.addCategoryObject('typeBinding', u'EX_GeographicExtent_PropertyType', EX_GeographicExtent_PropertyType)


# Complex type DQ_PositionalAccuracy_PropertyType with content type ELEMENT_ONLY
class DQ_PositionalAccuracy_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'DQ_PositionalAccuracy_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmd}AbstractDQ_PositionalAccuracy uses Python identifier AbstractDQ_PositionalAccuracy
    __AbstractDQ_PositionalAccuracy = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'AbstractDQ_PositionalAccuracy'), 'AbstractDQ_PositionalAccuracy', '__httpwww_isotc211_org2005gmd_DQ_PositionalAccuracy_PropertyType_httpwww_isotc211_org2005gmdAbstractDQ_PositionalAccuracy', False)

    
    AbstractDQ_PositionalAccuracy = property(__AbstractDQ_PositionalAccuracy.value, __AbstractDQ_PositionalAccuracy.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_isotc211_org2005gmd_DQ_PositionalAccuracy_PropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_isotc211_org2005gmd_DQ_PositionalAccuracy_PropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_isotc211_org2005gmd_DQ_PositionalAccuracy_PropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_isotc211_org2005gmd_DQ_PositionalAccuracy_PropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute uuidref uses Python identifier uuidref
    __uuidref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uuidref'), 'uuidref', '__httpwww_isotc211_org2005gmd_DQ_PositionalAccuracy_PropertyType_uuidref', pyxb.binding.datatypes.string)
    
    uuidref = property(__uuidref.value, __uuidref.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_isotc211_org2005gmd_DQ_PositionalAccuracy_PropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_isotc211_org2005gmd_DQ_PositionalAccuracy_PropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmd_DQ_PositionalAccuracy_PropertyType_httpwww_isotc211_org2005gconilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_isotc211_org2005gmd_DQ_PositionalAccuracy_PropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")


    _ElementMap = {
        __AbstractDQ_PositionalAccuracy.name() : __AbstractDQ_PositionalAccuracy
    }
    _AttributeMap = {
        __type.name() : __type,
        __href.name() : __href,
        __actuate.name() : __actuate,
        __role.name() : __role,
        __uuidref.name() : __uuidref,
        __arcrole.name() : __arcrole,
        __title.name() : __title,
        __nilReason.name() : __nilReason,
        __show.name() : __show
    }
_Namespace_gmd.addCategoryObject('typeBinding', u'DQ_PositionalAccuracy_PropertyType', DQ_PositionalAccuracy_PropertyType)


# Complex type TopoPointPropertyType with content type ELEMENT_ONLY
class TopoPointPropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'TopoPointPropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.opengis.net/gml/3.2}TopoPoint uses Python identifier TopoPoint
    __TopoPoint = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'TopoPoint'), 'TopoPoint', '__httpwww_opengis_netgml3_2_TopoPointPropertyType_httpwww_opengis_netgml3_2TopoPoint', False)

    
    TopoPoint = property(__TopoPoint.value, __TopoPoint.set, None, u'The intended use of gml:TopoPoint is to appear within a point feature to express the structural and possibly geometric relationships of this feature to other features via shared node definitions.')

    
    # Attribute owns uses Python identifier owns
    __owns = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'owns'), 'owns', '__httpwww_opengis_netgml3_2_TopoPointPropertyType_owns', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    owns = property(__owns.value, __owns.set, None, None)


    _ElementMap = {
        __TopoPoint.name() : __TopoPoint
    }
    _AttributeMap = {
        __owns.name() : __owns
    }
_Namespace_gml.addCategoryObject('typeBinding', u'TopoPointPropertyType', TopoPointPropertyType)


# Complex type MD_KeywordTypeCode_PropertyType with content type ELEMENT_ONLY
class MD_KeywordTypeCode_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_KeywordTypeCode_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmd}MD_KeywordTypeCode uses Python identifier MD_KeywordTypeCode
    __MD_KeywordTypeCode = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_KeywordTypeCode'), 'MD_KeywordTypeCode', '__httpwww_isotc211_org2005gmd_MD_KeywordTypeCode_PropertyType_httpwww_isotc211_org2005gmdMD_KeywordTypeCode', False)

    
    MD_KeywordTypeCode = property(__MD_KeywordTypeCode.value, __MD_KeywordTypeCode.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmd_MD_KeywordTypeCode_PropertyType_httpwww_isotc211_org2005gconilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)


    _ElementMap = {
        __MD_KeywordTypeCode.name() : __MD_KeywordTypeCode
    }
    _AttributeMap = {
        __nilReason.name() : __nilReason
    }
_Namespace_gmd.addCategoryObject('typeBinding', u'MD_KeywordTypeCode_PropertyType', MD_KeywordTypeCode_PropertyType)


# Complex type MD_RangeDimension_PropertyType with content type ELEMENT_ONLY
class MD_RangeDimension_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_RangeDimension_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmd}MD_RangeDimension uses Python identifier MD_RangeDimension
    __MD_RangeDimension = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_RangeDimension'), 'MD_RangeDimension', '__httpwww_isotc211_org2005gmd_MD_RangeDimension_PropertyType_httpwww_isotc211_org2005gmdMD_RangeDimension', False)

    
    MD_RangeDimension = property(__MD_RangeDimension.value, __MD_RangeDimension.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_isotc211_org2005gmd_MD_RangeDimension_PropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_isotc211_org2005gmd_MD_RangeDimension_PropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmd_MD_RangeDimension_PropertyType_httpwww_isotc211_org2005gconilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_isotc211_org2005gmd_MD_RangeDimension_PropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_isotc211_org2005gmd_MD_RangeDimension_PropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute uuidref uses Python identifier uuidref
    __uuidref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uuidref'), 'uuidref', '__httpwww_isotc211_org2005gmd_MD_RangeDimension_PropertyType_uuidref', pyxb.binding.datatypes.string)
    
    uuidref = property(__uuidref.value, __uuidref.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_isotc211_org2005gmd_MD_RangeDimension_PropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_isotc211_org2005gmd_MD_RangeDimension_PropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_isotc211_org2005gmd_MD_RangeDimension_PropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)


    _ElementMap = {
        __MD_RangeDimension.name() : __MD_RangeDimension
    }
    _AttributeMap = {
        __role.name() : __role,
        __type.name() : __type,
        __nilReason.name() : __nilReason,
        __title.name() : __title,
        __show.name() : __show,
        __uuidref.name() : __uuidref,
        __actuate.name() : __actuate,
        __href.name() : __href,
        __arcrole.name() : __arcrole
    }
_Namespace_gmd.addCategoryObject('typeBinding', u'MD_RangeDimension_PropertyType', MD_RangeDimension_PropertyType)


# Complex type CountPropertyType with content type ELEMENT_ONLY
class CountPropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'CountPropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.opengis.net/gml/3.2}Count uses Python identifier Count
    __Count = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'Count'), 'Count', '__httpwww_opengis_netgml3_2_CountPropertyType_httpwww_opengis_netgml3_2Count', False)

    
    Count = property(__Count.value, __Count.set, None, None)

    
    # Attribute {http://www.opengis.net/gml/3.2}remoteSchema uses Python identifier remoteSchema
    __remoteSchema = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'remoteSchema'), 'remoteSchema', '__httpwww_opengis_netgml3_2_CountPropertyType_httpwww_opengis_netgml3_2remoteSchema', pyxb.binding.datatypes.anyURI)
    
    remoteSchema = property(__remoteSchema.value, __remoteSchema.set, None, u'')

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_opengis_netgml3_2_CountPropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_opengis_netgml3_2_CountPropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_opengis_netgml3_2_CountPropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_opengis_netgml3_2_CountPropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'nilReason'), 'nilReason', '__httpwww_opengis_netgml3_2_CountPropertyType_nilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_opengis_netgml3_2_CountPropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_opengis_netgml3_2_CountPropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_opengis_netgml3_2_CountPropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)


    _ElementMap = {
        __Count.name() : __Count
    }
    _AttributeMap = {
        __remoteSchema.name() : __remoteSchema,
        __arcrole.name() : __arcrole,
        __title.name() : __title,
        __role.name() : __role,
        __show.name() : __show,
        __nilReason.name() : __nilReason,
        __actuate.name() : __actuate,
        __href.name() : __href,
        __type.name() : __type
    }
_Namespace_gml.addCategoryObject('typeBinding', u'CountPropertyType', CountPropertyType)


# Complex type CTD_ANON_9 with content type ELEMENT_ONLY
class CTD_ANON_9 (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.opengis.net/gml/3.2}inverseFlattening uses Python identifier inverseFlattening
    __inverseFlattening = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'inverseFlattening'), 'inverseFlattening', '__httpwww_opengis_netgml3_2_CTD_ANON_9_httpwww_opengis_netgml3_2inverseFlattening', False)

    
    inverseFlattening = property(__inverseFlattening.value, __inverseFlattening.set, None, None)

    
    # Element {http://www.opengis.net/gml/3.2}semiMinorAxis uses Python identifier semiMinorAxis
    __semiMinorAxis = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'semiMinorAxis'), 'semiMinorAxis', '__httpwww_opengis_netgml3_2_CTD_ANON_9_httpwww_opengis_netgml3_2semiMinorAxis', False)

    
    semiMinorAxis = property(__semiMinorAxis.value, __semiMinorAxis.set, None, None)

    
    # Element {http://www.opengis.net/gml/3.2}isSphere uses Python identifier isSphere
    __isSphere = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'isSphere'), 'isSphere', '__httpwww_opengis_netgml3_2_CTD_ANON_9_httpwww_opengis_netgml3_2isSphere', False)

    
    isSphere = property(__isSphere.value, __isSphere.set, None, None)


    _ElementMap = {
        __inverseFlattening.name() : __inverseFlattening,
        __semiMinorAxis.name() : __semiMinorAxis,
        __isSphere.name() : __isSphere
    }
    _AttributeMap = {
        
    }



# Complex type DQ_FormatConsistency_PropertyType with content type ELEMENT_ONLY
class DQ_FormatConsistency_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'DQ_FormatConsistency_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmd}DQ_FormatConsistency uses Python identifier DQ_FormatConsistency
    __DQ_FormatConsistency = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'DQ_FormatConsistency'), 'DQ_FormatConsistency', '__httpwww_isotc211_org2005gmd_DQ_FormatConsistency_PropertyType_httpwww_isotc211_org2005gmdDQ_FormatConsistency', False)

    
    DQ_FormatConsistency = property(__DQ_FormatConsistency.value, __DQ_FormatConsistency.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_isotc211_org2005gmd_DQ_FormatConsistency_PropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_isotc211_org2005gmd_DQ_FormatConsistency_PropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_isotc211_org2005gmd_DQ_FormatConsistency_PropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmd_DQ_FormatConsistency_PropertyType_httpwww_isotc211_org2005gconilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_isotc211_org2005gmd_DQ_FormatConsistency_PropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute uuidref uses Python identifier uuidref
    __uuidref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uuidref'), 'uuidref', '__httpwww_isotc211_org2005gmd_DQ_FormatConsistency_PropertyType_uuidref', pyxb.binding.datatypes.string)
    
    uuidref = property(__uuidref.value, __uuidref.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_isotc211_org2005gmd_DQ_FormatConsistency_PropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_isotc211_org2005gmd_DQ_FormatConsistency_PropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_isotc211_org2005gmd_DQ_FormatConsistency_PropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")


    _ElementMap = {
        __DQ_FormatConsistency.name() : __DQ_FormatConsistency
    }
    _AttributeMap = {
        __type.name() : __type,
        __role.name() : __role,
        __arcrole.name() : __arcrole,
        __nilReason.name() : __nilReason,
        __title.name() : __title,
        __uuidref.name() : __uuidref,
        __show.name() : __show,
        __href.name() : __href,
        __actuate.name() : __actuate
    }
_Namespace_gmd.addCategoryObject('typeBinding', u'DQ_FormatConsistency_PropertyType', DQ_FormatConsistency_PropertyType)


# Complex type DQ_Scope_Type with content type ELEMENT_ONLY
class DQ_Scope_Type (AbstractObject_Type):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'DQ_Scope_Type')
    # Base type is AbstractObject_Type
    
    # Element {http://www.isotc211.org/2005/gmd}levelDescription uses Python identifier levelDescription
    __levelDescription = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'levelDescription'), 'levelDescription', '__httpwww_isotc211_org2005gmd_DQ_Scope_Type_httpwww_isotc211_org2005gmdlevelDescription', True)

    
    levelDescription = property(__levelDescription.value, __levelDescription.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}level uses Python identifier level
    __level = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'level'), 'level', '__httpwww_isotc211_org2005gmd_DQ_Scope_Type_httpwww_isotc211_org2005gmdlevel', False)

    
    level = property(__level.value, __level.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}extent uses Python identifier extent
    __extent = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'extent'), 'extent', '__httpwww_isotc211_org2005gmd_DQ_Scope_Type_httpwww_isotc211_org2005gmdextent', False)

    
    extent = property(__extent.value, __extent.set, None, None)

    
    # Attribute id inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type
    
    # Attribute uuid inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type

    _ElementMap = AbstractObject_Type._ElementMap.copy()
    _ElementMap.update({
        __levelDescription.name() : __levelDescription,
        __level.name() : __level,
        __extent.name() : __extent
    })
    _AttributeMap = AbstractObject_Type._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gmd.addCategoryObject('typeBinding', u'DQ_Scope_Type', DQ_Scope_Type)


# Complex type CartesianCSType with content type ELEMENT_ONLY
class CartesianCSType (AbstractCoordinateSystemType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'CartesianCSType')
    # Base type is AbstractCoordinateSystemType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element axis ({http://www.opengis.net/gml/3.2}axis) inherited from {http://www.opengis.net/gml/3.2}AbstractCoordinateSystemType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element remarks ({http://www.opengis.net/gml/3.2}remarks) inherited from {http://www.opengis.net/gml/3.2}DefinitionType
    
    # Attribute aggregationType inherited from {http://www.opengis.net/gml/3.2}AbstractCoordinateSystemType
    
    # Attribute id_ inherited from {http://www.opengis.net/gml/3.2}DefinitionBaseType

    _ElementMap = AbstractCoordinateSystemType._ElementMap.copy()
    _ElementMap.update({
        
    })
    _AttributeMap = AbstractCoordinateSystemType._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gml.addCategoryObject('typeBinding', u'CartesianCSType', CartesianCSType)


# Complex type MD_Resolution_PropertyType with content type ELEMENT_ONLY
class MD_Resolution_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_Resolution_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmd}MD_Resolution uses Python identifier MD_Resolution
    __MD_Resolution = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_Resolution'), 'MD_Resolution', '__httpwww_isotc211_org2005gmd_MD_Resolution_PropertyType_httpwww_isotc211_org2005gmdMD_Resolution', False)

    
    MD_Resolution = property(__MD_Resolution.value, __MD_Resolution.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmd_MD_Resolution_PropertyType_httpwww_isotc211_org2005gconilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)


    _ElementMap = {
        __MD_Resolution.name() : __MD_Resolution
    }
    _AttributeMap = {
        __nilReason.name() : __nilReason
    }
_Namespace_gmd.addCategoryObject('typeBinding', u'MD_Resolution_PropertyType', MD_Resolution_PropertyType)


# Complex type ShellPropertyType with content type ELEMENT_ONLY
class ShellPropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'ShellPropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.opengis.net/gml/3.2}Shell uses Python identifier Shell
    __Shell = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'Shell'), 'Shell', '__httpwww_opengis_netgml3_2_ShellPropertyType_httpwww_opengis_netgml3_2Shell', False)

    
    Shell = property(__Shell.value, __Shell.set, None, u'A shell is used to represent a single connected component of a solid boundary as specified in ISO 19107:2003, 6.3.8.\nEvery gml:surfaceMember references or contains one surface, i.e. any element which is substitutable for gml:AbstractSurface. In the context of a shell, the surfaces describe the boundary of the solid. \nIf provided, the aggregationType attribute shall have the value "set".\n')


    _ElementMap = {
        __Shell.name() : __Shell
    }
    _AttributeMap = {
        
    }
_Namespace_gml.addCategoryObject('typeBinding', u'ShellPropertyType', ShellPropertyType)


# Complex type PT_FreeText_Type with content type ELEMENT_ONLY
class PT_FreeText_Type (AbstractObject_Type):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'PT_FreeText_Type')
    # Base type is AbstractObject_Type
    
    # Element {http://www.isotc211.org/2005/gmd}textGroup uses Python identifier textGroup
    __textGroup = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'textGroup'), 'textGroup', '__httpwww_isotc211_org2005gmd_PT_FreeText_Type_httpwww_isotc211_org2005gmdtextGroup', True)

    
    textGroup = property(__textGroup.value, __textGroup.set, None, None)

    
    # Attribute id inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type
    
    # Attribute uuid inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type

    _ElementMap = AbstractObject_Type._ElementMap.copy()
    _ElementMap.update({
        __textGroup.name() : __textGroup
    })
    _AttributeMap = AbstractObject_Type._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gmd.addCategoryObject('typeBinding', u'PT_FreeText_Type', PT_FreeText_Type)


# Complex type AbstractRS_ReferenceSystem_Type with content type ELEMENT_ONLY
class AbstractRS_ReferenceSystem_Type (AbstractObject_Type):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = True
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'AbstractRS_ReferenceSystem_Type')
    # Base type is AbstractObject_Type
    
    # Element {http://www.isotc211.org/2005/gmd}domainOfValidity uses Python identifier domainOfValidity
    __domainOfValidity = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'domainOfValidity'), 'domainOfValidity', '__httpwww_isotc211_org2005gmd_AbstractRS_ReferenceSystem_Type_httpwww_isotc211_org2005gmddomainOfValidity', True)

    
    domainOfValidity = property(__domainOfValidity.value, __domainOfValidity.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}name uses Python identifier name
    __name = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'name'), 'name', '__httpwww_isotc211_org2005gmd_AbstractRS_ReferenceSystem_Type_httpwww_isotc211_org2005gmdname', False)

    
    name = property(__name.value, __name.set, None, None)

    
    # Attribute id inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type
    
    # Attribute uuid inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type

    _ElementMap = AbstractObject_Type._ElementMap.copy()
    _ElementMap.update({
        __domainOfValidity.name() : __domainOfValidity,
        __name.name() : __name
    })
    _AttributeMap = AbstractObject_Type._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gmd.addCategoryObject('typeBinding', u'AbstractRS_ReferenceSystem_Type', AbstractRS_ReferenceSystem_Type)


# Complex type MD_StandardOrderProcess_PropertyType with content type ELEMENT_ONLY
class MD_StandardOrderProcess_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_StandardOrderProcess_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmd}MD_StandardOrderProcess uses Python identifier MD_StandardOrderProcess
    __MD_StandardOrderProcess = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_StandardOrderProcess'), 'MD_StandardOrderProcess', '__httpwww_isotc211_org2005gmd_MD_StandardOrderProcess_PropertyType_httpwww_isotc211_org2005gmdMD_StandardOrderProcess', False)

    
    MD_StandardOrderProcess = property(__MD_StandardOrderProcess.value, __MD_StandardOrderProcess.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_isotc211_org2005gmd_MD_StandardOrderProcess_PropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmd_MD_StandardOrderProcess_PropertyType_httpwww_isotc211_org2005gconilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_isotc211_org2005gmd_MD_StandardOrderProcess_PropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_isotc211_org2005gmd_MD_StandardOrderProcess_PropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_isotc211_org2005gmd_MD_StandardOrderProcess_PropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute uuidref uses Python identifier uuidref
    __uuidref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uuidref'), 'uuidref', '__httpwww_isotc211_org2005gmd_MD_StandardOrderProcess_PropertyType_uuidref', pyxb.binding.datatypes.string)
    
    uuidref = property(__uuidref.value, __uuidref.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_isotc211_org2005gmd_MD_StandardOrderProcess_PropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_isotc211_org2005gmd_MD_StandardOrderProcess_PropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_isotc211_org2005gmd_MD_StandardOrderProcess_PropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)


    _ElementMap = {
        __MD_StandardOrderProcess.name() : __MD_StandardOrderProcess
    }
    _AttributeMap = {
        __type.name() : __type,
        __nilReason.name() : __nilReason,
        __arcrole.name() : __arcrole,
        __role.name() : __role,
        __title.name() : __title,
        __uuidref.name() : __uuidref,
        __actuate.name() : __actuate,
        __show.name() : __show,
        __href.name() : __href
    }
_Namespace_gmd.addCategoryObject('typeBinding', u'MD_StandardOrderProcess_PropertyType', MD_StandardOrderProcess_PropertyType)


# Complex type TemporalCRSPropertyType with content type ELEMENT_ONLY
class TemporalCRSPropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'TemporalCRSPropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.opengis.net/gml/3.2}TemporalCRS uses Python identifier TemporalCRS
    __TemporalCRS = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'TemporalCRS'), 'TemporalCRS', '__httpwww_opengis_netgml3_2_TemporalCRSPropertyType_httpwww_opengis_netgml3_2TemporalCRS', False)

    
    TemporalCRS = property(__TemporalCRS.value, __TemporalCRS.set, None, u'gml:TemporalCRS is a 1D coordinate reference system used for the recording of time.')

    
    # Attribute {http://www.opengis.net/gml/3.2}remoteSchema uses Python identifier remoteSchema
    __remoteSchema = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'remoteSchema'), 'remoteSchema', '__httpwww_opengis_netgml3_2_TemporalCRSPropertyType_httpwww_opengis_netgml3_2remoteSchema', pyxb.binding.datatypes.anyURI)
    
    remoteSchema = property(__remoteSchema.value, __remoteSchema.set, None, u'')

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_opengis_netgml3_2_TemporalCRSPropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_opengis_netgml3_2_TemporalCRSPropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_opengis_netgml3_2_TemporalCRSPropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_opengis_netgml3_2_TemporalCRSPropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'nilReason'), 'nilReason', '__httpwww_opengis_netgml3_2_TemporalCRSPropertyType_nilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_opengis_netgml3_2_TemporalCRSPropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_opengis_netgml3_2_TemporalCRSPropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_opengis_netgml3_2_TemporalCRSPropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")


    _ElementMap = {
        __TemporalCRS.name() : __TemporalCRS
    }
    _AttributeMap = {
        __remoteSchema.name() : __remoteSchema,
        __href.name() : __href,
        __type.name() : __type,
        __title.name() : __title,
        __arcrole.name() : __arcrole,
        __nilReason.name() : __nilReason,
        __role.name() : __role,
        __show.name() : __show,
        __actuate.name() : __actuate
    }
_Namespace_gml.addCategoryObject('typeBinding', u'TemporalCRSPropertyType', TemporalCRSPropertyType)


# Complex type MeasureListType with content type SIMPLE
class MeasureListType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = doubleList
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'MeasureListType')
    # Base type is doubleList
    
    # Attribute uom uses Python identifier uom
    __uom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uom'), 'uom', '__httpwww_opengis_netgml3_2_MeasureListType_uom', UomIdentifier, required=True)
    
    uom = property(__uom.value, __uom.set, None, None)


    _ElementMap = {
        
    }
    _AttributeMap = {
        __uom.name() : __uom
    }
_Namespace_gml.addCategoryObject('typeBinding', u'MeasureListType', MeasureListType)


# Complex type TypeName_Type with content type ELEMENT_ONLY
class TypeName_Type (AbstractObject_Type):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gco, u'TypeName_Type')
    # Base type is AbstractObject_Type
    
    # Element {http://www.isotc211.org/2005/gco}aName uses Python identifier aName
    __aName = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'aName'), 'aName', '__httpwww_isotc211_org2005gco_TypeName_Type_httpwww_isotc211_org2005gcoaName', False)

    
    aName = property(__aName.value, __aName.set, None, None)

    
    # Attribute id inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type
    
    # Attribute uuid inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type

    _ElementMap = AbstractObject_Type._ElementMap.copy()
    _ElementMap.update({
        __aName.name() : __aName
    })
    _AttributeMap = AbstractObject_Type._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gco.addCategoryObject('typeBinding', u'TypeName_Type', TypeName_Type)


# Complex type DS_Series_PropertyType with content type ELEMENT_ONLY
class DS_Series_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'DS_Series_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmd}DS_Series uses Python identifier DS_Series
    __DS_Series = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'DS_Series'), 'DS_Series', '__httpwww_isotc211_org2005gmd_DS_Series_PropertyType_httpwww_isotc211_org2005gmdDS_Series', False)

    
    DS_Series = property(__DS_Series.value, __DS_Series.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_isotc211_org2005gmd_DS_Series_PropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_isotc211_org2005gmd_DS_Series_PropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_isotc211_org2005gmd_DS_Series_PropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute uuidref uses Python identifier uuidref
    __uuidref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uuidref'), 'uuidref', '__httpwww_isotc211_org2005gmd_DS_Series_PropertyType_uuidref', pyxb.binding.datatypes.string)
    
    uuidref = property(__uuidref.value, __uuidref.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_isotc211_org2005gmd_DS_Series_PropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_isotc211_org2005gmd_DS_Series_PropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_isotc211_org2005gmd_DS_Series_PropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmd_DS_Series_PropertyType_httpwww_isotc211_org2005gconilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_isotc211_org2005gmd_DS_Series_PropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")


    _ElementMap = {
        __DS_Series.name() : __DS_Series
    }
    _AttributeMap = {
        __type.name() : __type,
        __href.name() : __href,
        __actuate.name() : __actuate,
        __uuidref.name() : __uuidref,
        __arcrole.name() : __arcrole,
        __title.name() : __title,
        __role.name() : __role,
        __nilReason.name() : __nilReason,
        __show.name() : __show
    }
_Namespace_gmd.addCategoryObject('typeBinding', u'DS_Series_PropertyType', DS_Series_PropertyType)


# Complex type MD_ProgressCode_PropertyType with content type ELEMENT_ONLY
class MD_ProgressCode_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_ProgressCode_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmd}MD_ProgressCode uses Python identifier MD_ProgressCode
    __MD_ProgressCode = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_ProgressCode'), 'MD_ProgressCode', '__httpwww_isotc211_org2005gmd_MD_ProgressCode_PropertyType_httpwww_isotc211_org2005gmdMD_ProgressCode', False)

    
    MD_ProgressCode = property(__MD_ProgressCode.value, __MD_ProgressCode.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmd_MD_ProgressCode_PropertyType_httpwww_isotc211_org2005gconilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)


    _ElementMap = {
        __MD_ProgressCode.name() : __MD_ProgressCode
    }
    _AttributeMap = {
        __nilReason.name() : __nilReason
    }
_Namespace_gmd.addCategoryObject('typeBinding', u'MD_ProgressCode_PropertyType', MD_ProgressCode_PropertyType)


# Complex type DQ_ThematicClassificationCorrectness_Type with content type ELEMENT_ONLY
class DQ_ThematicClassificationCorrectness_Type (AbstractDQ_ThematicAccuracy_Type):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'DQ_ThematicClassificationCorrectness_Type')
    # Base type is AbstractDQ_ThematicAccuracy_Type
    
    # Element evaluationMethodDescription ({http://www.isotc211.org/2005/gmd}evaluationMethodDescription) inherited from {http://www.isotc211.org/2005/gmd}AbstractDQ_Element_Type
    
    # Element measureDescription ({http://www.isotc211.org/2005/gmd}measureDescription) inherited from {http://www.isotc211.org/2005/gmd}AbstractDQ_Element_Type
    
    # Element evaluationProcedure ({http://www.isotc211.org/2005/gmd}evaluationProcedure) inherited from {http://www.isotc211.org/2005/gmd}AbstractDQ_Element_Type
    
    # Element evaluationMethodType ({http://www.isotc211.org/2005/gmd}evaluationMethodType) inherited from {http://www.isotc211.org/2005/gmd}AbstractDQ_Element_Type
    
    # Element dateTime ({http://www.isotc211.org/2005/gmd}dateTime) inherited from {http://www.isotc211.org/2005/gmd}AbstractDQ_Element_Type
    
    # Element result ({http://www.isotc211.org/2005/gmd}result) inherited from {http://www.isotc211.org/2005/gmd}AbstractDQ_Element_Type
    
    # Element nameOfMeasure ({http://www.isotc211.org/2005/gmd}nameOfMeasure) inherited from {http://www.isotc211.org/2005/gmd}AbstractDQ_Element_Type
    
    # Element measureIdentification ({http://www.isotc211.org/2005/gmd}measureIdentification) inherited from {http://www.isotc211.org/2005/gmd}AbstractDQ_Element_Type
    
    # Attribute id inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type
    
    # Attribute uuid inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type

    _ElementMap = AbstractDQ_ThematicAccuracy_Type._ElementMap.copy()
    _ElementMap.update({
        
    })
    _AttributeMap = AbstractDQ_ThematicAccuracy_Type._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gmd.addCategoryObject('typeBinding', u'DQ_ThematicClassificationCorrectness_Type', DQ_ThematicClassificationCorrectness_Type)


# Complex type DerivedCRSPropertyType with content type ELEMENT_ONLY
class DerivedCRSPropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'DerivedCRSPropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.opengis.net/gml/3.2}DerivedCRS uses Python identifier DerivedCRS
    __DerivedCRS = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'DerivedCRS'), 'DerivedCRS', '__httpwww_opengis_netgml3_2_DerivedCRSPropertyType_httpwww_opengis_netgml3_2DerivedCRS', False)

    
    DerivedCRS = property(__DerivedCRS.value, __DerivedCRS.set, None, u'gml:DerivedCRS is a single coordinate reference system that is defined by its coordinate conversion from another single coordinate reference system known as the base CRS. The base CRS can be a projected coordinate reference system, if this DerivedCRS is used for a georectified grid coverage as described in ISO 19123, Clause 8.')

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_opengis_netgml3_2_DerivedCRSPropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_opengis_netgml3_2_DerivedCRSPropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_opengis_netgml3_2_DerivedCRSPropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_opengis_netgml3_2_DerivedCRSPropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.opengis.net/gml/3.2}remoteSchema uses Python identifier remoteSchema
    __remoteSchema = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'remoteSchema'), 'remoteSchema', '__httpwww_opengis_netgml3_2_DerivedCRSPropertyType_httpwww_opengis_netgml3_2remoteSchema', pyxb.binding.datatypes.anyURI)
    
    remoteSchema = property(__remoteSchema.value, __remoteSchema.set, None, u'')

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_opengis_netgml3_2_DerivedCRSPropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'nilReason'), 'nilReason', '__httpwww_opengis_netgml3_2_DerivedCRSPropertyType_nilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_opengis_netgml3_2_DerivedCRSPropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_opengis_netgml3_2_DerivedCRSPropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)


    _ElementMap = {
        __DerivedCRS.name() : __DerivedCRS
    }
    _AttributeMap = {
        __type.name() : __type,
        __role.name() : __role,
        __title.name() : __title,
        __arcrole.name() : __arcrole,
        __remoteSchema.name() : __remoteSchema,
        __show.name() : __show,
        __nilReason.name() : __nilReason,
        __actuate.name() : __actuate,
        __href.name() : __href
    }
_Namespace_gml.addCategoryObject('typeBinding', u'DerivedCRSPropertyType', DerivedCRSPropertyType)


# Complex type MD_DigitalTransferOptions_PropertyType with content type ELEMENT_ONLY
class MD_DigitalTransferOptions_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_DigitalTransferOptions_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmd}MD_DigitalTransferOptions uses Python identifier MD_DigitalTransferOptions
    __MD_DigitalTransferOptions = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_DigitalTransferOptions'), 'MD_DigitalTransferOptions', '__httpwww_isotc211_org2005gmd_MD_DigitalTransferOptions_PropertyType_httpwww_isotc211_org2005gmdMD_DigitalTransferOptions', False)

    
    MD_DigitalTransferOptions = property(__MD_DigitalTransferOptions.value, __MD_DigitalTransferOptions.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_isotc211_org2005gmd_MD_DigitalTransferOptions_PropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_isotc211_org2005gmd_MD_DigitalTransferOptions_PropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_isotc211_org2005gmd_MD_DigitalTransferOptions_PropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_isotc211_org2005gmd_MD_DigitalTransferOptions_PropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute uuidref uses Python identifier uuidref
    __uuidref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uuidref'), 'uuidref', '__httpwww_isotc211_org2005gmd_MD_DigitalTransferOptions_PropertyType_uuidref', pyxb.binding.datatypes.string)
    
    uuidref = property(__uuidref.value, __uuidref.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_isotc211_org2005gmd_MD_DigitalTransferOptions_PropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_isotc211_org2005gmd_MD_DigitalTransferOptions_PropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmd_MD_DigitalTransferOptions_PropertyType_httpwww_isotc211_org2005gconilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_isotc211_org2005gmd_MD_DigitalTransferOptions_PropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)


    _ElementMap = {
        __MD_DigitalTransferOptions.name() : __MD_DigitalTransferOptions
    }
    _AttributeMap = {
        __type.name() : __type,
        __show.name() : __show,
        __href.name() : __href,
        __actuate.name() : __actuate,
        __uuidref.name() : __uuidref,
        __arcrole.name() : __arcrole,
        __role.name() : __role,
        __nilReason.name() : __nilReason,
        __title.name() : __title
    }
_Namespace_gmd.addCategoryObject('typeBinding', u'MD_DigitalTransferOptions_PropertyType', MD_DigitalTransferOptions_PropertyType)


# Complex type TimeType with content type SIMPLE
class TimeType (MeasureType):
    _TypeDefinition = pyxb.binding.datatypes.double
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'TimeType')
    # Base type is MeasureType
    
    # Attribute uom inherited from {http://www.opengis.net/gml/3.2}MeasureType

    _ElementMap = MeasureType._ElementMap.copy()
    _ElementMap.update({
        
    })
    _AttributeMap = MeasureType._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gml.addCategoryObject('typeBinding', u'TimeType', TimeType)


# Complex type MD_Band_Type with content type ELEMENT_ONLY
class MD_Band_Type (MD_RangeDimension_Type):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_Band_Type')
    # Base type is MD_RangeDimension_Type
    
    # Element {http://www.isotc211.org/2005/gmd}toneGradation uses Python identifier toneGradation
    __toneGradation = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'toneGradation'), 'toneGradation', '__httpwww_isotc211_org2005gmd_MD_Band_Type_httpwww_isotc211_org2005gmdtoneGradation', False)

    
    toneGradation = property(__toneGradation.value, __toneGradation.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}offset uses Python identifier offset
    __offset = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'offset'), 'offset', '__httpwww_isotc211_org2005gmd_MD_Band_Type_httpwww_isotc211_org2005gmdoffset', False)

    
    offset = property(__offset.value, __offset.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}maxValue uses Python identifier maxValue
    __maxValue = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'maxValue'), 'maxValue', '__httpwww_isotc211_org2005gmd_MD_Band_Type_httpwww_isotc211_org2005gmdmaxValue', False)

    
    maxValue = property(__maxValue.value, __maxValue.set, None, None)

    
    # Element sequenceIdentifier ({http://www.isotc211.org/2005/gmd}sequenceIdentifier) inherited from {http://www.isotc211.org/2005/gmd}MD_RangeDimension_Type
    
    # Element {http://www.isotc211.org/2005/gmd}minValue uses Python identifier minValue
    __minValue = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'minValue'), 'minValue', '__httpwww_isotc211_org2005gmd_MD_Band_Type_httpwww_isotc211_org2005gmdminValue', False)

    
    minValue = property(__minValue.value, __minValue.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}scaleFactor uses Python identifier scaleFactor
    __scaleFactor = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'scaleFactor'), 'scaleFactor', '__httpwww_isotc211_org2005gmd_MD_Band_Type_httpwww_isotc211_org2005gmdscaleFactor', False)

    
    scaleFactor = property(__scaleFactor.value, __scaleFactor.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}units uses Python identifier units
    __units = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'units'), 'units', '__httpwww_isotc211_org2005gmd_MD_Band_Type_httpwww_isotc211_org2005gmdunits', False)

    
    units = property(__units.value, __units.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}peakResponse uses Python identifier peakResponse
    __peakResponse = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'peakResponse'), 'peakResponse', '__httpwww_isotc211_org2005gmd_MD_Band_Type_httpwww_isotc211_org2005gmdpeakResponse', False)

    
    peakResponse = property(__peakResponse.value, __peakResponse.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}bitsPerValue uses Python identifier bitsPerValue
    __bitsPerValue = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'bitsPerValue'), 'bitsPerValue', '__httpwww_isotc211_org2005gmd_MD_Band_Type_httpwww_isotc211_org2005gmdbitsPerValue', False)

    
    bitsPerValue = property(__bitsPerValue.value, __bitsPerValue.set, None, None)

    
    # Element descriptor ({http://www.isotc211.org/2005/gmd}descriptor) inherited from {http://www.isotc211.org/2005/gmd}MD_RangeDimension_Type
    
    # Attribute id inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type
    
    # Attribute uuid inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type

    _ElementMap = MD_RangeDimension_Type._ElementMap.copy()
    _ElementMap.update({
        __toneGradation.name() : __toneGradation,
        __offset.name() : __offset,
        __maxValue.name() : __maxValue,
        __minValue.name() : __minValue,
        __scaleFactor.name() : __scaleFactor,
        __units.name() : __units,
        __peakResponse.name() : __peakResponse,
        __bitsPerValue.name() : __bitsPerValue
    })
    _AttributeMap = MD_RangeDimension_Type._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gmd.addCategoryObject('typeBinding', u'MD_Band_Type', MD_Band_Type)


# Complex type DS_DataSet_PropertyType with content type ELEMENT_ONLY
class DS_DataSet_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'DS_DataSet_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmd}DS_DataSet uses Python identifier DS_DataSet
    __DS_DataSet = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'DS_DataSet'), 'DS_DataSet', '__httpwww_isotc211_org2005gmd_DS_DataSet_PropertyType_httpwww_isotc211_org2005gmdDS_DataSet', False)

    
    DS_DataSet = property(__DS_DataSet.value, __DS_DataSet.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_isotc211_org2005gmd_DS_DataSet_PropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_isotc211_org2005gmd_DS_DataSet_PropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_isotc211_org2005gmd_DS_DataSet_PropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_isotc211_org2005gmd_DS_DataSet_PropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute uuidref uses Python identifier uuidref
    __uuidref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uuidref'), 'uuidref', '__httpwww_isotc211_org2005gmd_DS_DataSet_PropertyType_uuidref', pyxb.binding.datatypes.string)
    
    uuidref = property(__uuidref.value, __uuidref.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmd_DS_DataSet_PropertyType_httpwww_isotc211_org2005gconilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_isotc211_org2005gmd_DS_DataSet_PropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_isotc211_org2005gmd_DS_DataSet_PropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_isotc211_org2005gmd_DS_DataSet_PropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")


    _ElementMap = {
        __DS_DataSet.name() : __DS_DataSet
    }
    _AttributeMap = {
        __href.name() : __href,
        __type.name() : __type,
        __actuate.name() : __actuate,
        __arcrole.name() : __arcrole,
        __uuidref.name() : __uuidref,
        __nilReason.name() : __nilReason,
        __title.name() : __title,
        __role.name() : __role,
        __show.name() : __show
    }
_Namespace_gmd.addCategoryObject('typeBinding', u'DS_DataSet_PropertyType', DS_DataSet_PropertyType)


# Complex type MultiplicityRange_PropertyType with content type ELEMENT_ONLY
class MultiplicityRange_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gco, u'MultiplicityRange_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gco}MultiplicityRange uses Python identifier MultiplicityRange
    __MultiplicityRange = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'MultiplicityRange'), 'MultiplicityRange', '__httpwww_isotc211_org2005gco_MultiplicityRange_PropertyType_httpwww_isotc211_org2005gcoMultiplicityRange', False)

    
    MultiplicityRange = property(__MultiplicityRange.value, __MultiplicityRange.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gco_MultiplicityRange_PropertyType_httpwww_isotc211_org2005gconilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_isotc211_org2005gco_MultiplicityRange_PropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_isotc211_org2005gco_MultiplicityRange_PropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_isotc211_org2005gco_MultiplicityRange_PropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_isotc211_org2005gco_MultiplicityRange_PropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_isotc211_org2005gco_MultiplicityRange_PropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute uuidref uses Python identifier uuidref
    __uuidref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uuidref'), 'uuidref', '__httpwww_isotc211_org2005gco_MultiplicityRange_PropertyType_uuidref', pyxb.binding.datatypes.string)
    
    uuidref = property(__uuidref.value, __uuidref.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_isotc211_org2005gco_MultiplicityRange_PropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_isotc211_org2005gco_MultiplicityRange_PropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)


    _ElementMap = {
        __MultiplicityRange.name() : __MultiplicityRange
    }
    _AttributeMap = {
        __nilReason.name() : __nilReason,
        __type.name() : __type,
        __title.name() : __title,
        __show.name() : __show,
        __href.name() : __href,
        __actuate.name() : __actuate,
        __uuidref.name() : __uuidref,
        __role.name() : __role,
        __arcrole.name() : __arcrole
    }
_Namespace_gco.addCategoryObject('typeBinding', u'MultiplicityRange_PropertyType', MultiplicityRange_PropertyType)


# Complex type URL_PropertyType with content type ELEMENT_ONLY
class URL_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'URL_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmd}URL uses Python identifier URL
    __URL = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'URL'), 'URL', '__httpwww_isotc211_org2005gmd_URL_PropertyType_httpwww_isotc211_org2005gmdURL', False)

    
    URL = property(__URL.value, __URL.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmd_URL_PropertyType_httpwww_isotc211_org2005gconilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)


    _ElementMap = {
        __URL.name() : __URL
    }
    _AttributeMap = {
        __nilReason.name() : __nilReason
    }
_Namespace_gmd.addCategoryObject('typeBinding', u'URL_PropertyType', URL_PropertyType)


# Complex type DQ_TemporalValidity_Type with content type ELEMENT_ONLY
class DQ_TemporalValidity_Type (AbstractDQ_TemporalAccuracy_Type):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'DQ_TemporalValidity_Type')
    # Base type is AbstractDQ_TemporalAccuracy_Type
    
    # Element evaluationMethodDescription ({http://www.isotc211.org/2005/gmd}evaluationMethodDescription) inherited from {http://www.isotc211.org/2005/gmd}AbstractDQ_Element_Type
    
    # Element measureDescription ({http://www.isotc211.org/2005/gmd}measureDescription) inherited from {http://www.isotc211.org/2005/gmd}AbstractDQ_Element_Type
    
    # Element evaluationProcedure ({http://www.isotc211.org/2005/gmd}evaluationProcedure) inherited from {http://www.isotc211.org/2005/gmd}AbstractDQ_Element_Type
    
    # Element evaluationMethodType ({http://www.isotc211.org/2005/gmd}evaluationMethodType) inherited from {http://www.isotc211.org/2005/gmd}AbstractDQ_Element_Type
    
    # Element dateTime ({http://www.isotc211.org/2005/gmd}dateTime) inherited from {http://www.isotc211.org/2005/gmd}AbstractDQ_Element_Type
    
    # Element result ({http://www.isotc211.org/2005/gmd}result) inherited from {http://www.isotc211.org/2005/gmd}AbstractDQ_Element_Type
    
    # Element nameOfMeasure ({http://www.isotc211.org/2005/gmd}nameOfMeasure) inherited from {http://www.isotc211.org/2005/gmd}AbstractDQ_Element_Type
    
    # Element measureIdentification ({http://www.isotc211.org/2005/gmd}measureIdentification) inherited from {http://www.isotc211.org/2005/gmd}AbstractDQ_Element_Type
    
    # Attribute id inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type
    
    # Attribute uuid inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type

    _ElementMap = AbstractDQ_TemporalAccuracy_Type._ElementMap.copy()
    _ElementMap.update({
        
    })
    _AttributeMap = AbstractDQ_TemporalAccuracy_Type._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gmd.addCategoryObject('typeBinding', u'DQ_TemporalValidity_Type', DQ_TemporalValidity_Type)


# Complex type QuantityPropertyType with content type ELEMENT_ONLY
class QuantityPropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'QuantityPropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.opengis.net/gml/3.2}Quantity uses Python identifier Quantity
    __Quantity = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'Quantity'), 'Quantity', '__httpwww_opengis_netgml3_2_QuantityPropertyType_httpwww_opengis_netgml3_2Quantity', False)

    
    Quantity = property(__Quantity.value, __Quantity.set, None, u'An XML attribute uom ("unit of measure") is required, whose value is a URI which identifies the definition of a ratio scale or units by which the numeric value shall be multiplied, or an interval or position scale on which the value occurs.')

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_opengis_netgml3_2_QuantityPropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_opengis_netgml3_2_QuantityPropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.opengis.net/gml/3.2}remoteSchema uses Python identifier remoteSchema
    __remoteSchema = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'remoteSchema'), 'remoteSchema', '__httpwww_opengis_netgml3_2_QuantityPropertyType_httpwww_opengis_netgml3_2remoteSchema', pyxb.binding.datatypes.anyURI)
    
    remoteSchema = property(__remoteSchema.value, __remoteSchema.set, None, u'')

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_opengis_netgml3_2_QuantityPropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_opengis_netgml3_2_QuantityPropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'nilReason'), 'nilReason', '__httpwww_opengis_netgml3_2_QuantityPropertyType_nilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_opengis_netgml3_2_QuantityPropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_opengis_netgml3_2_QuantityPropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_opengis_netgml3_2_QuantityPropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)


    _ElementMap = {
        __Quantity.name() : __Quantity
    }
    _AttributeMap = {
        __title.name() : __title,
        __role.name() : __role,
        __remoteSchema.name() : __remoteSchema,
        __arcrole.name() : __arcrole,
        __show.name() : __show,
        __nilReason.name() : __nilReason,
        __actuate.name() : __actuate,
        __href.name() : __href,
        __type.name() : __type
    }
_Namespace_gml.addCategoryObject('typeBinding', u'QuantityPropertyType', QuantityPropertyType)


# Complex type CI_Series_Type with content type ELEMENT_ONLY
class CI_Series_Type (AbstractObject_Type):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'CI_Series_Type')
    # Base type is AbstractObject_Type
    
    # Element {http://www.isotc211.org/2005/gmd}page uses Python identifier page
    __page = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'page'), 'page', '__httpwww_isotc211_org2005gmd_CI_Series_Type_httpwww_isotc211_org2005gmdpage', False)

    
    page = property(__page.value, __page.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}name uses Python identifier name
    __name = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'name'), 'name', '__httpwww_isotc211_org2005gmd_CI_Series_Type_httpwww_isotc211_org2005gmdname', False)

    
    name = property(__name.value, __name.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}issueIdentification uses Python identifier issueIdentification
    __issueIdentification = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'issueIdentification'), 'issueIdentification', '__httpwww_isotc211_org2005gmd_CI_Series_Type_httpwww_isotc211_org2005gmdissueIdentification', False)

    
    issueIdentification = property(__issueIdentification.value, __issueIdentification.set, None, None)

    
    # Attribute id inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type
    
    # Attribute uuid inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type

    _ElementMap = AbstractObject_Type._ElementMap.copy()
    _ElementMap.update({
        __page.name() : __page,
        __name.name() : __name,
        __issueIdentification.name() : __issueIdentification
    })
    _AttributeMap = AbstractObject_Type._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gmd.addCategoryObject('typeBinding', u'CI_Series_Type', CI_Series_Type)


# Complex type MD_ServiceIdentification_Type with content type ELEMENT_ONLY
class MD_ServiceIdentification_Type (AbstractMD_Identification_Type):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_ServiceIdentification_Type')
    # Base type is AbstractMD_Identification_Type
    
    # Element resourceMaintenance ({http://www.isotc211.org/2005/gmd}resourceMaintenance) inherited from {http://www.isotc211.org/2005/gmd}AbstractMD_Identification_Type
    
    # Element pointOfContact ({http://www.isotc211.org/2005/gmd}pointOfContact) inherited from {http://www.isotc211.org/2005/gmd}AbstractMD_Identification_Type
    
    # Element purpose ({http://www.isotc211.org/2005/gmd}purpose) inherited from {http://www.isotc211.org/2005/gmd}AbstractMD_Identification_Type
    
    # Element resourceFormat ({http://www.isotc211.org/2005/gmd}resourceFormat) inherited from {http://www.isotc211.org/2005/gmd}AbstractMD_Identification_Type
    
    # Element graphicOverview ({http://www.isotc211.org/2005/gmd}graphicOverview) inherited from {http://www.isotc211.org/2005/gmd}AbstractMD_Identification_Type
    
    # Element citation ({http://www.isotc211.org/2005/gmd}citation) inherited from {http://www.isotc211.org/2005/gmd}AbstractMD_Identification_Type
    
    # Element resourceConstraints ({http://www.isotc211.org/2005/gmd}resourceConstraints) inherited from {http://www.isotc211.org/2005/gmd}AbstractMD_Identification_Type
    
    # Element abstract ({http://www.isotc211.org/2005/gmd}abstract) inherited from {http://www.isotc211.org/2005/gmd}AbstractMD_Identification_Type
    
    # Element resourceSpecificUsage ({http://www.isotc211.org/2005/gmd}resourceSpecificUsage) inherited from {http://www.isotc211.org/2005/gmd}AbstractMD_Identification_Type
    
    # Element aggregationInfo ({http://www.isotc211.org/2005/gmd}aggregationInfo) inherited from {http://www.isotc211.org/2005/gmd}AbstractMD_Identification_Type
    
    # Element credit ({http://www.isotc211.org/2005/gmd}credit) inherited from {http://www.isotc211.org/2005/gmd}AbstractMD_Identification_Type
    
    # Element descriptiveKeywords ({http://www.isotc211.org/2005/gmd}descriptiveKeywords) inherited from {http://www.isotc211.org/2005/gmd}AbstractMD_Identification_Type
    
    # Element status ({http://www.isotc211.org/2005/gmd}status) inherited from {http://www.isotc211.org/2005/gmd}AbstractMD_Identification_Type
    
    # Attribute id inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type
    
    # Attribute uuid inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type

    _ElementMap = AbstractMD_Identification_Type._ElementMap.copy()
    _ElementMap.update({
        
    })
    _AttributeMap = AbstractMD_Identification_Type._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gmd.addCategoryObject('typeBinding', u'MD_ServiceIdentification_Type', MD_ServiceIdentification_Type)


# Complex type TopoSurfaceType with content type ELEMENT_ONLY
class TopoSurfaceType (AbstractTopologyType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'TopoSurfaceType')
    # Base type is AbstractTopologyType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element {http://www.opengis.net/gml/3.2}directedFace uses Python identifier directedFace
    __directedFace = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'directedFace'), 'directedFace', '__httpwww_opengis_netgml3_2_TopoSurfaceType_httpwww_opengis_netgml3_2directedFace', True)

    
    directedFace = property(__directedFace.value, __directedFace.set, None, u'The gml:directedFace property element describes the boundary of topology solids, in the coBoundary of topology edges and is used in the support of surface features via the gml:TopoSurface expression, see below. The orientation attribute of type gml:SignType expresses the sense in which the included face is used i.e. inward or outward with respect to the surface normal in any geometric realisation.')

    
    # Attribute aggregationType uses Python identifier aggregationType
    __aggregationType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'aggregationType'), 'aggregationType', '__httpwww_opengis_netgml3_2_TopoSurfaceType_aggregationType', AggregationType)
    
    aggregationType = property(__aggregationType.value, __aggregationType.set, None, None)

    
    # Attribute id inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType

    _ElementMap = AbstractTopologyType._ElementMap.copy()
    _ElementMap.update({
        __directedFace.name() : __directedFace
    })
    _AttributeMap = AbstractTopologyType._AttributeMap.copy()
    _AttributeMap.update({
        __aggregationType.name() : __aggregationType
    })
_Namespace_gml.addCategoryObject('typeBinding', u'TopoSurfaceType', TopoSurfaceType)


# Complex type GridEnvelopeType with content type ELEMENT_ONLY
class GridEnvelopeType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'GridEnvelopeType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.opengis.net/gml/3.2}high uses Python identifier high
    __high = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'high'), 'high', '__httpwww_opengis_netgml3_2_GridEnvelopeType_httpwww_opengis_netgml3_2high', False)

    
    high = property(__high.value, __high.set, None, None)

    
    # Element {http://www.opengis.net/gml/3.2}low uses Python identifier low
    __low = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'low'), 'low', '__httpwww_opengis_netgml3_2_GridEnvelopeType_httpwww_opengis_netgml3_2low', False)

    
    low = property(__low.value, __low.set, None, None)


    _ElementMap = {
        __high.name() : __high,
        __low.name() : __low
    }
    _AttributeMap = {
        
    }
_Namespace_gml.addCategoryObject('typeBinding', u'GridEnvelopeType', GridEnvelopeType)


# Complex type MultiGeometryPropertyType with content type ELEMENT_ONLY
class MultiGeometryPropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'MultiGeometryPropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.opengis.net/gml/3.2}AbstractGeometricAggregate uses Python identifier AbstractGeometricAggregate
    __AbstractGeometricAggregate = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractGeometricAggregate'), 'AbstractGeometricAggregate', '__httpwww_opengis_netgml3_2_MultiGeometryPropertyType_httpwww_opengis_netgml3_2AbstractGeometricAggregate', False)

    
    AbstractGeometricAggregate = property(__AbstractGeometricAggregate.value, __AbstractGeometricAggregate.set, None, u'gml:AbstractGeometricAggregate is the abstract head of the substitution group for all geometric aggregates.')

    
    # Attribute owns uses Python identifier owns
    __owns = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'owns'), 'owns', '__httpwww_opengis_netgml3_2_MultiGeometryPropertyType_owns', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    owns = property(__owns.value, __owns.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_opengis_netgml3_2_MultiGeometryPropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_opengis_netgml3_2_MultiGeometryPropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_opengis_netgml3_2_MultiGeometryPropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_opengis_netgml3_2_MultiGeometryPropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'nilReason'), 'nilReason', '__httpwww_opengis_netgml3_2_MultiGeometryPropertyType_nilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_opengis_netgml3_2_MultiGeometryPropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.opengis.net/gml/3.2}remoteSchema uses Python identifier remoteSchema
    __remoteSchema = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'remoteSchema'), 'remoteSchema', '__httpwww_opengis_netgml3_2_MultiGeometryPropertyType_httpwww_opengis_netgml3_2remoteSchema', pyxb.binding.datatypes.anyURI)
    
    remoteSchema = property(__remoteSchema.value, __remoteSchema.set, None, u'')

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_opengis_netgml3_2_MultiGeometryPropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_opengis_netgml3_2_MultiGeometryPropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)


    _ElementMap = {
        __AbstractGeometricAggregate.name() : __AbstractGeometricAggregate
    }
    _AttributeMap = {
        __owns.name() : __owns,
        __role.name() : __role,
        __actuate.name() : __actuate,
        __href.name() : __href,
        __type.name() : __type,
        __nilReason.name() : __nilReason,
        __arcrole.name() : __arcrole,
        __remoteSchema.name() : __remoteSchema,
        __show.name() : __show,
        __title.name() : __title
    }
_Namespace_gml.addCategoryObject('typeBinding', u'MultiGeometryPropertyType', MultiGeometryPropertyType)


# Complex type DatumPropertyType with content type ELEMENT_ONLY
class DatumPropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'DatumPropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.opengis.net/gml/3.2}AbstractDatum uses Python identifier AbstractDatum
    __AbstractDatum = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractDatum'), 'AbstractDatum', '__httpwww_opengis_netgml3_2_DatumPropertyType_httpwww_opengis_netgml3_2AbstractDatum', False)

    
    AbstractDatum = property(__AbstractDatum.value, __AbstractDatum.set, None, u'A gml:AbstractDatum specifies the relationship of a coordinate system to the earth, thus creating a coordinate reference system. A datum uses a parameter or set of parameters that determine the location of the origin of the coordinate reference system. Each datum subtype may be associated with only specific types of coordinate systems. This abstract complex type shall not be used, extended, or restricted, in a GML Application Schema, to define a concrete subtype with a meaning equivalent to a concrete subtype specified in this document.')

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_opengis_netgml3_2_DatumPropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.opengis.net/gml/3.2}remoteSchema uses Python identifier remoteSchema
    __remoteSchema = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'remoteSchema'), 'remoteSchema', '__httpwww_opengis_netgml3_2_DatumPropertyType_httpwww_opengis_netgml3_2remoteSchema', pyxb.binding.datatypes.anyURI)
    
    remoteSchema = property(__remoteSchema.value, __remoteSchema.set, None, u'')

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_opengis_netgml3_2_DatumPropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_opengis_netgml3_2_DatumPropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'nilReason'), 'nilReason', '__httpwww_opengis_netgml3_2_DatumPropertyType_nilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_opengis_netgml3_2_DatumPropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_opengis_netgml3_2_DatumPropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_opengis_netgml3_2_DatumPropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_opengis_netgml3_2_DatumPropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)


    _ElementMap = {
        __AbstractDatum.name() : __AbstractDatum
    }
    _AttributeMap = {
        __show.name() : __show,
        __remoteSchema.name() : __remoteSchema,
        __actuate.name() : __actuate,
        __href.name() : __href,
        __nilReason.name() : __nilReason,
        __type.name() : __type,
        __title.name() : __title,
        __arcrole.name() : __arcrole,
        __role.name() : __role
    }
_Namespace_gml.addCategoryObject('typeBinding', u'DatumPropertyType', DatumPropertyType)


# Complex type FaceOrTopoSolidPropertyType with content type ELEMENT_ONLY
class FaceOrTopoSolidPropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'FaceOrTopoSolidPropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.opengis.net/gml/3.2}Face uses Python identifier Face
    __Face = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'Face'), 'Face', '__httpwww_opengis_netgml3_2_FaceOrTopoSolidPropertyType_httpwww_opengis_netgml3_2Face', False)

    
    Face = property(__Face.value, __Face.set, None, u'gml:Face represents the 2-dimensional topology primitive.\nThe topological boundary of a face (gml:directedEdge) consists of a sequence of directed edges. If provided, the aggregationType attribute shall have the value "sequence".\nThe optional coboundary of a face (gml:directedTopoSolid) is a pair of directed solids which are bounded by this face. A positively directed solid corresponds to a solid which lies in the direction of the negatively directed normal to the face in any geometric realisation. \nA face may optionally be realised by a 2-dimensional geometric primitive (gml:surfaceProperty).')

    
    # Element {http://www.opengis.net/gml/3.2}TopoSolid uses Python identifier TopoSolid
    __TopoSolid = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'TopoSolid'), 'TopoSolid', '__httpwww_opengis_netgml3_2_FaceOrTopoSolidPropertyType_httpwww_opengis_netgml3_2TopoSolid', False)

    
    TopoSolid = property(__TopoSolid.value, __TopoSolid.set, None, u'gml:TopoSolid represents the 3-dimensional topology primitive. \nThe topological boundary of a solid (gml:directedFace) consists of a set of directed faces.\nA solid may optionally be realised by a 3-dimensional geometric primitive (gml:solidProperty).')

    
    # Attribute owns uses Python identifier owns
    __owns = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'owns'), 'owns', '__httpwww_opengis_netgml3_2_FaceOrTopoSolidPropertyType_owns', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    owns = property(__owns.value, __owns.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_opengis_netgml3_2_FaceOrTopoSolidPropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_opengis_netgml3_2_FaceOrTopoSolidPropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_opengis_netgml3_2_FaceOrTopoSolidPropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.opengis.net/gml/3.2}remoteSchema uses Python identifier remoteSchema
    __remoteSchema = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'remoteSchema'), 'remoteSchema', '__httpwww_opengis_netgml3_2_FaceOrTopoSolidPropertyType_httpwww_opengis_netgml3_2remoteSchema', pyxb.binding.datatypes.anyURI)
    
    remoteSchema = property(__remoteSchema.value, __remoteSchema.set, None, u'')

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_opengis_netgml3_2_FaceOrTopoSolidPropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'nilReason'), 'nilReason', '__httpwww_opengis_netgml3_2_FaceOrTopoSolidPropertyType_nilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_opengis_netgml3_2_FaceOrTopoSolidPropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_opengis_netgml3_2_FaceOrTopoSolidPropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_opengis_netgml3_2_FaceOrTopoSolidPropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")


    _ElementMap = {
        __Face.name() : __Face,
        __TopoSolid.name() : __TopoSolid
    }
    _AttributeMap = {
        __owns.name() : __owns,
        __href.name() : __href,
        __title.name() : __title,
        __type.name() : __type,
        __remoteSchema.name() : __remoteSchema,
        __arcrole.name() : __arcrole,
        __nilReason.name() : __nilReason,
        __role.name() : __role,
        __show.name() : __show,
        __actuate.name() : __actuate
    }
_Namespace_gml.addCategoryObject('typeBinding', u'FaceOrTopoSolidPropertyType', FaceOrTopoSolidPropertyType)


# Complex type MD_SecurityConstraints_PropertyType with content type ELEMENT_ONLY
class MD_SecurityConstraints_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_SecurityConstraints_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmd}MD_SecurityConstraints uses Python identifier MD_SecurityConstraints
    __MD_SecurityConstraints = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_SecurityConstraints'), 'MD_SecurityConstraints', '__httpwww_isotc211_org2005gmd_MD_SecurityConstraints_PropertyType_httpwww_isotc211_org2005gmdMD_SecurityConstraints', False)

    
    MD_SecurityConstraints = property(__MD_SecurityConstraints.value, __MD_SecurityConstraints.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_isotc211_org2005gmd_MD_SecurityConstraints_PropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_isotc211_org2005gmd_MD_SecurityConstraints_PropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_isotc211_org2005gmd_MD_SecurityConstraints_PropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_isotc211_org2005gmd_MD_SecurityConstraints_PropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_isotc211_org2005gmd_MD_SecurityConstraints_PropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute uuidref uses Python identifier uuidref
    __uuidref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uuidref'), 'uuidref', '__httpwww_isotc211_org2005gmd_MD_SecurityConstraints_PropertyType_uuidref', pyxb.binding.datatypes.string)
    
    uuidref = property(__uuidref.value, __uuidref.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_isotc211_org2005gmd_MD_SecurityConstraints_PropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmd_MD_SecurityConstraints_PropertyType_httpwww_isotc211_org2005gconilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_isotc211_org2005gmd_MD_SecurityConstraints_PropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)


    _ElementMap = {
        __MD_SecurityConstraints.name() : __MD_SecurityConstraints
    }
    _AttributeMap = {
        __show.name() : __show,
        __role.name() : __role,
        __href.name() : __href,
        __actuate.name() : __actuate,
        __type.name() : __type,
        __uuidref.name() : __uuidref,
        __arcrole.name() : __arcrole,
        __nilReason.name() : __nilReason,
        __title.name() : __title
    }
_Namespace_gmd.addCategoryObject('typeBinding', u'MD_SecurityConstraints_PropertyType', MD_SecurityConstraints_PropertyType)


# Complex type TimeCalendarEraType with content type ELEMENT_ONLY
class TimeCalendarEraType (DefinitionType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'TimeCalendarEraType')
    # Base type is DefinitionType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element {http://www.opengis.net/gml/3.2}epochOfUse uses Python identifier epochOfUse
    __epochOfUse = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'epochOfUse'), 'epochOfUse', '__httpwww_opengis_netgml3_2_TimeCalendarEraType_httpwww_opengis_netgml3_2epochOfUse', False)

    
    epochOfUse = property(__epochOfUse.value, __epochOfUse.set, None, None)

    
    # Element {http://www.opengis.net/gml/3.2}referenceEvent uses Python identifier referenceEvent
    __referenceEvent = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'referenceEvent'), 'referenceEvent', '__httpwww_opengis_netgml3_2_TimeCalendarEraType_httpwww_opengis_netgml3_2referenceEvent', False)

    
    referenceEvent = property(__referenceEvent.value, __referenceEvent.set, None, None)

    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element {http://www.opengis.net/gml/3.2}referenceDate uses Python identifier referenceDate
    __referenceDate = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'referenceDate'), 'referenceDate', '__httpwww_opengis_netgml3_2_TimeCalendarEraType_httpwww_opengis_netgml3_2referenceDate', False)

    
    referenceDate = property(__referenceDate.value, __referenceDate.set, None, None)

    
    # Element {http://www.opengis.net/gml/3.2}julianReference uses Python identifier julianReference
    __julianReference = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'julianReference'), 'julianReference', '__httpwww_opengis_netgml3_2_TimeCalendarEraType_httpwww_opengis_netgml3_2julianReference', False)

    
    julianReference = property(__julianReference.value, __julianReference.set, None, None)

    
    # Element remarks ({http://www.opengis.net/gml/3.2}remarks) inherited from {http://www.opengis.net/gml/3.2}DefinitionType
    
    # Attribute id_ inherited from {http://www.opengis.net/gml/3.2}DefinitionBaseType

    _ElementMap = DefinitionType._ElementMap.copy()
    _ElementMap.update({
        __epochOfUse.name() : __epochOfUse,
        __referenceEvent.name() : __referenceEvent,
        __referenceDate.name() : __referenceDate,
        __julianReference.name() : __julianReference
    })
    _AttributeMap = DefinitionType._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gml.addCategoryObject('typeBinding', u'TimeCalendarEraType', TimeCalendarEraType)


# Complex type UomTime_PropertyType with content type ELEMENT_ONLY
class UomTime_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gco, u'UomTime_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.opengis.net/gml/3.2}UnitDefinition uses Python identifier UnitDefinition
    __UnitDefinition = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'UnitDefinition'), 'UnitDefinition', '__httpwww_isotc211_org2005gco_UomTime_PropertyType_httpwww_opengis_netgml3_2UnitDefinition', False)

    
    UnitDefinition = property(__UnitDefinition.value, __UnitDefinition.set, None, u'A gml:UnitDefinition is a general definition of a unit of measure. This generic element is used only for units for which no relationship with other units or units systems is known.\nThe content model of gml:UnitDefinition adds three additional properties to gml:Definition, gml:quantityType, gml:quantityTypeReference and gml:catalogSymbol.  \nThe gml:catalogSymbol property optionally gives the short symbol used for this unit. This element is usually used when the relationship of this unit to other units or units systems is unknown.')

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_isotc211_org2005gco_UomTime_PropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_isotc211_org2005gco_UomTime_PropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_isotc211_org2005gco_UomTime_PropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_isotc211_org2005gco_UomTime_PropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_isotc211_org2005gco_UomTime_PropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute uuidref uses Python identifier uuidref
    __uuidref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uuidref'), 'uuidref', '__httpwww_isotc211_org2005gco_UomTime_PropertyType_uuidref', pyxb.binding.datatypes.string)
    
    uuidref = property(__uuidref.value, __uuidref.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gco_UomTime_PropertyType_httpwww_isotc211_org2005gconilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_isotc211_org2005gco_UomTime_PropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_isotc211_org2005gco_UomTime_PropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")


    _ElementMap = {
        __UnitDefinition.name() : __UnitDefinition
    }
    _AttributeMap = {
        __href.name() : __href,
        __type.name() : __type,
        __actuate.name() : __actuate,
        __role.name() : __role,
        __arcrole.name() : __arcrole,
        __uuidref.name() : __uuidref,
        __nilReason.name() : __nilReason,
        __title.name() : __title,
        __show.name() : __show
    }
_Namespace_gco.addCategoryObject('typeBinding', u'UomTime_PropertyType', UomTime_PropertyType)


# Complex type EX_VerticalExtent_PropertyType with content type ELEMENT_ONLY
class EX_VerticalExtent_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'EX_VerticalExtent_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmd}EX_VerticalExtent uses Python identifier EX_VerticalExtent
    __EX_VerticalExtent = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'EX_VerticalExtent'), 'EX_VerticalExtent', '__httpwww_isotc211_org2005gmd_EX_VerticalExtent_PropertyType_httpwww_isotc211_org2005gmdEX_VerticalExtent', False)

    
    EX_VerticalExtent = property(__EX_VerticalExtent.value, __EX_VerticalExtent.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_isotc211_org2005gmd_EX_VerticalExtent_PropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_isotc211_org2005gmd_EX_VerticalExtent_PropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_isotc211_org2005gmd_EX_VerticalExtent_PropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmd_EX_VerticalExtent_PropertyType_httpwww_isotc211_org2005gconilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_isotc211_org2005gmd_EX_VerticalExtent_PropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute uuidref uses Python identifier uuidref
    __uuidref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uuidref'), 'uuidref', '__httpwww_isotc211_org2005gmd_EX_VerticalExtent_PropertyType_uuidref', pyxb.binding.datatypes.string)
    
    uuidref = property(__uuidref.value, __uuidref.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_isotc211_org2005gmd_EX_VerticalExtent_PropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_isotc211_org2005gmd_EX_VerticalExtent_PropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_isotc211_org2005gmd_EX_VerticalExtent_PropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")


    _ElementMap = {
        __EX_VerticalExtent.name() : __EX_VerticalExtent
    }
    _AttributeMap = {
        __type.name() : __type,
        __arcrole.name() : __arcrole,
        __role.name() : __role,
        __nilReason.name() : __nilReason,
        __title.name() : __title,
        __uuidref.name() : __uuidref,
        __href.name() : __href,
        __actuate.name() : __actuate,
        __show.name() : __show
    }
_Namespace_gmd.addCategoryObject('typeBinding', u'EX_VerticalExtent_PropertyType', EX_VerticalExtent_PropertyType)


# Complex type ProjectedCRSPropertyType with content type ELEMENT_ONLY
class ProjectedCRSPropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'ProjectedCRSPropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.opengis.net/gml/3.2}ProjectedCRS uses Python identifier ProjectedCRS
    __ProjectedCRS = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'ProjectedCRS'), 'ProjectedCRS', '__httpwww_opengis_netgml3_2_ProjectedCRSPropertyType_httpwww_opengis_netgml3_2ProjectedCRS', False)

    
    ProjectedCRS = property(__ProjectedCRS.value, __ProjectedCRS.set, None, u'gml:ProjectedCRS is a 2D coordinate reference system used to approximate the shape of the earth on a planar surface, but in such a way that the distortion that is inherent to the approximation is carefully controlled and known. Distortion correction is commonly applied to calculated bearings and distances to produce values that are a close match to actual field values.')

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_opengis_netgml3_2_ProjectedCRSPropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_opengis_netgml3_2_ProjectedCRSPropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_opengis_netgml3_2_ProjectedCRSPropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_opengis_netgml3_2_ProjectedCRSPropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.opengis.net/gml/3.2}remoteSchema uses Python identifier remoteSchema
    __remoteSchema = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'remoteSchema'), 'remoteSchema', '__httpwww_opengis_netgml3_2_ProjectedCRSPropertyType_httpwww_opengis_netgml3_2remoteSchema', pyxb.binding.datatypes.anyURI)
    
    remoteSchema = property(__remoteSchema.value, __remoteSchema.set, None, u'')

    
    # Attribute nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'nilReason'), 'nilReason', '__httpwww_opengis_netgml3_2_ProjectedCRSPropertyType_nilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_opengis_netgml3_2_ProjectedCRSPropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_opengis_netgml3_2_ProjectedCRSPropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_opengis_netgml3_2_ProjectedCRSPropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)


    _ElementMap = {
        __ProjectedCRS.name() : __ProjectedCRS
    }
    _AttributeMap = {
        __role.name() : __role,
        __type.name() : __type,
        __title.name() : __title,
        __arcrole.name() : __arcrole,
        __remoteSchema.name() : __remoteSchema,
        __nilReason.name() : __nilReason,
        __show.name() : __show,
        __actuate.name() : __actuate,
        __href.name() : __href
    }
_Namespace_gml.addCategoryObject('typeBinding', u'ProjectedCRSPropertyType', ProjectedCRSPropertyType)


# Complex type ArrayAssociationType with content type ELEMENT_ONLY
class ArrayAssociationType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'ArrayAssociationType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.opengis.net/gml/3.2}AbstractObject uses Python identifier AbstractObject
    __AbstractObject = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractObject'), 'AbstractObject', '__httpwww_opengis_netgml3_2_ArrayAssociationType_httpwww_opengis_netgml3_2AbstractObject', True)

    
    AbstractObject = property(__AbstractObject.value, __AbstractObject.set, None, u'This element has no type defined, and is therefore implicitly (according to the rules of W3C XML Schema) an XML Schema anyType. It is used as the head of an XML Schema substitution group which unifies complex content and certain simple content elements used for datatypes in GML, including the gml:AbstractGML substitution group.')

    
    # Attribute owns uses Python identifier owns
    __owns = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'owns'), 'owns', '__httpwww_opengis_netgml3_2_ArrayAssociationType_owns', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    owns = property(__owns.value, __owns.set, None, None)


    _ElementMap = {
        __AbstractObject.name() : __AbstractObject
    }
    _AttributeMap = {
        __owns.name() : __owns
    }
_Namespace_gml.addCategoryObject('typeBinding', u'ArrayAssociationType', ArrayAssociationType)


# Complex type InlinePropertyType with content type ELEMENT_ONLY
class InlinePropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'InlinePropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute owns uses Python identifier owns
    __owns = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'owns'), 'owns', '__httpwww_opengis_netgml3_2_InlinePropertyType_owns', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    owns = property(__owns.value, __owns.set, None, None)

    _HasWildcardElement = True

    _ElementMap = {
        
    }
    _AttributeMap = {
        __owns.name() : __owns
    }
_Namespace_gml.addCategoryObject('typeBinding', u'InlinePropertyType', InlinePropertyType)


# Complex type CTD_ANON_10 with content type ELEMENT_ONLY
class CTD_ANON_10 (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.opengis.net/gml/3.2}posList uses Python identifier posList
    __posList = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'posList'), 'posList', '__httpwww_opengis_netgml3_2_CTD_ANON_10_httpwww_opengis_netgml3_2posList', False)

    
    posList = property(__posList.value, __posList.set, None, None)

    
    # Element {http://www.opengis.net/gml/3.2}pointProperty uses Python identifier pointProperty
    __pointProperty = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'pointProperty'), 'pointProperty', '__httpwww_opengis_netgml3_2_CTD_ANON_10_httpwww_opengis_netgml3_2pointProperty', True)

    
    pointProperty = property(__pointProperty.value, __pointProperty.set, None, u'This property element either references a point via the XLink-attributes or contains the point element. pointProperty is the predefined property which may be used by GML Application Schemas whenever a GML feature has a property with a value that is substitutable for Point.')

    
    # Element {http://www.opengis.net/gml/3.2}pos uses Python identifier pos
    __pos = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'pos'), 'pos', '__httpwww_opengis_netgml3_2_CTD_ANON_10_httpwww_opengis_netgml3_2pos', True)

    
    pos = property(__pos.value, __pos.set, None, None)


    _ElementMap = {
        __posList.name() : __posList,
        __pointProperty.name() : __pointProperty,
        __pos.name() : __pos
    }
    _AttributeMap = {
        
    }



# Complex type KnotType with content type ELEMENT_ONLY
class KnotType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'KnotType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.opengis.net/gml/3.2}weight uses Python identifier weight
    __weight = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'weight'), 'weight', '__httpwww_opengis_netgml3_2_KnotType_httpwww_opengis_netgml3_2weight', False)

    
    weight = property(__weight.value, __weight.set, None, None)

    
    # Element {http://www.opengis.net/gml/3.2}value uses Python identifier value_
    __value = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'value'), 'value_', '__httpwww_opengis_netgml3_2_KnotType_httpwww_opengis_netgml3_2value', False)

    
    value_ = property(__value.value, __value.set, None, None)

    
    # Element {http://www.opengis.net/gml/3.2}multiplicity uses Python identifier multiplicity
    __multiplicity = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'multiplicity'), 'multiplicity', '__httpwww_opengis_netgml3_2_KnotType_httpwww_opengis_netgml3_2multiplicity', False)

    
    multiplicity = property(__multiplicity.value, __multiplicity.set, None, None)


    _ElementMap = {
        __weight.name() : __weight,
        __value.name() : __value,
        __multiplicity.name() : __multiplicity
    }
    _AttributeMap = {
        
    }
_Namespace_gml.addCategoryObject('typeBinding', u'KnotType', KnotType)


# Complex type UomVolume_PropertyType with content type ELEMENT_ONLY
class UomVolume_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gco, u'UomVolume_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.opengis.net/gml/3.2}UnitDefinition uses Python identifier UnitDefinition
    __UnitDefinition = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'UnitDefinition'), 'UnitDefinition', '__httpwww_isotc211_org2005gco_UomVolume_PropertyType_httpwww_opengis_netgml3_2UnitDefinition', False)

    
    UnitDefinition = property(__UnitDefinition.value, __UnitDefinition.set, None, u'A gml:UnitDefinition is a general definition of a unit of measure. This generic element is used only for units for which no relationship with other units or units systems is known.\nThe content model of gml:UnitDefinition adds three additional properties to gml:Definition, gml:quantityType, gml:quantityTypeReference and gml:catalogSymbol.  \nThe gml:catalogSymbol property optionally gives the short symbol used for this unit. This element is usually used when the relationship of this unit to other units or units systems is unknown.')

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_isotc211_org2005gco_UomVolume_PropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_isotc211_org2005gco_UomVolume_PropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_isotc211_org2005gco_UomVolume_PropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_isotc211_org2005gco_UomVolume_PropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_isotc211_org2005gco_UomVolume_PropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute uuidref uses Python identifier uuidref
    __uuidref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uuidref'), 'uuidref', '__httpwww_isotc211_org2005gco_UomVolume_PropertyType_uuidref', pyxb.binding.datatypes.string)
    
    uuidref = property(__uuidref.value, __uuidref.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gco_UomVolume_PropertyType_httpwww_isotc211_org2005gconilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_isotc211_org2005gco_UomVolume_PropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_isotc211_org2005gco_UomVolume_PropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")


    _ElementMap = {
        __UnitDefinition.name() : __UnitDefinition
    }
    _AttributeMap = {
        __href.name() : __href,
        __type.name() : __type,
        __actuate.name() : __actuate,
        __role.name() : __role,
        __arcrole.name() : __arcrole,
        __uuidref.name() : __uuidref,
        __nilReason.name() : __nilReason,
        __title.name() : __title,
        __show.name() : __show
    }
_Namespace_gco.addCategoryObject('typeBinding', u'UomVolume_PropertyType', UomVolume_PropertyType)


# Complex type CategoryPropertyType with content type ELEMENT_ONLY
class CategoryPropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'CategoryPropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.opengis.net/gml/3.2}Category uses Python identifier Category
    __Category = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'Category'), 'Category', '__httpwww_opengis_netgml3_2_CategoryPropertyType_httpwww_opengis_netgml3_2Category', False)

    
    Category = property(__Category.value, __Category.set, None, u'A gml:Category has an optional XML attribute codeSpace, whose value is a URI which identifies a dictionary, codelist or authority for the term.')

    
    # Attribute {http://www.opengis.net/gml/3.2}remoteSchema uses Python identifier remoteSchema
    __remoteSchema = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'remoteSchema'), 'remoteSchema', '__httpwww_opengis_netgml3_2_CategoryPropertyType_httpwww_opengis_netgml3_2remoteSchema', pyxb.binding.datatypes.anyURI)
    
    remoteSchema = property(__remoteSchema.value, __remoteSchema.set, None, u'')

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_opengis_netgml3_2_CategoryPropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_opengis_netgml3_2_CategoryPropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_opengis_netgml3_2_CategoryPropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_opengis_netgml3_2_CategoryPropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'nilReason'), 'nilReason', '__httpwww_opengis_netgml3_2_CategoryPropertyType_nilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_opengis_netgml3_2_CategoryPropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_opengis_netgml3_2_CategoryPropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_opengis_netgml3_2_CategoryPropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)


    _ElementMap = {
        __Category.name() : __Category
    }
    _AttributeMap = {
        __remoteSchema.name() : __remoteSchema,
        __type.name() : __type,
        __title.name() : __title,
        __arcrole.name() : __arcrole,
        __role.name() : __role,
        __nilReason.name() : __nilReason,
        __show.name() : __show,
        __actuate.name() : __actuate,
        __href.name() : __href
    }
_Namespace_gml.addCategoryObject('typeBinding', u'CategoryPropertyType', CategoryPropertyType)


# Complex type ParameterValueType with content type ELEMENT_ONLY
class ParameterValueType (AbstractGeneralParameterValueType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'ParameterValueType')
    # Base type is AbstractGeneralParameterValueType
    
    # Element {http://www.opengis.net/gml/3.2}value uses Python identifier value_
    __value = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'value'), 'value_', '__httpwww_opengis_netgml3_2_ParameterValueType_httpwww_opengis_netgml3_2value', False)

    
    value_ = property(__value.value, __value.set, None, u'gml:value is a numeric value of an operation parameter, with its associated unit of measure.')

    
    # Element {http://www.opengis.net/gml/3.2}integerValue uses Python identifier integerValue
    __integerValue = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'integerValue'), 'integerValue', '__httpwww_opengis_netgml3_2_ParameterValueType_httpwww_opengis_netgml3_2integerValue', False)

    
    integerValue = property(__integerValue.value, __integerValue.set, None, u'gml:integerValue is a positive integer value of an operation parameter, usually used for a count. An integer value does not have an associated unit of measure.')

    
    # Element {http://www.opengis.net/gml/3.2}booleanValue uses Python identifier booleanValue
    __booleanValue = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'booleanValue'), 'booleanValue', '__httpwww_opengis_netgml3_2_ParameterValueType_httpwww_opengis_netgml3_2booleanValue', False)

    
    booleanValue = property(__booleanValue.value, __booleanValue.set, None, u'gml:booleanValue is a boolean value of an operation parameter. A Boolean value does not have an associated unit of measure.')

    
    # Element {http://www.opengis.net/gml/3.2}valueList uses Python identifier valueList
    __valueList = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'valueList'), 'valueList', '__httpwww_opengis_netgml3_2_ParameterValueType_httpwww_opengis_netgml3_2valueList', False)

    
    valueList = property(__valueList.value, __valueList.set, None, u'gml:valueList is an ordered sequence of two or more numeric values of an operation parameter list, where each value has the same associated unit of measure. An element of this type contains a space-separated sequence of double values.')

    
    # Element {http://www.opengis.net/gml/3.2}operationParameter uses Python identifier operationParameter
    __operationParameter = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'operationParameter'), 'operationParameter', '__httpwww_opengis_netgml3_2_ParameterValueType_httpwww_opengis_netgml3_2operationParameter', False)

    
    operationParameter = property(__operationParameter.value, __operationParameter.set, None, u'gml:operationParameter is an association role to the operation parameter of which this is a value.')

    
    # Element {http://www.opengis.net/gml/3.2}integerValueList uses Python identifier integerValueList
    __integerValueList = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'integerValueList'), 'integerValueList', '__httpwww_opengis_netgml3_2_ParameterValueType_httpwww_opengis_netgml3_2integerValueList', False)

    
    integerValueList = property(__integerValueList.value, __integerValueList.set, None, u'gml:integerValueList is an ordered sequence of two or more integer values of an operation parameter list, usually used for counts. These integer values do not have an associated unit of measure. An element of this type contains a space-separated sequence of integer values.')

    
    # Element {http://www.opengis.net/gml/3.2}dmsAngleValue uses Python identifier dmsAngleValue
    __dmsAngleValue = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'dmsAngleValue'), 'dmsAngleValue', '__httpwww_opengis_netgml3_2_ParameterValueType_httpwww_opengis_netgml3_2dmsAngleValue', False)

    
    dmsAngleValue = property(__dmsAngleValue.value, __dmsAngleValue.set, None, u'')

    
    # Element {http://www.opengis.net/gml/3.2}valueFile uses Python identifier valueFile
    __valueFile = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'valueFile'), 'valueFile', '__httpwww_opengis_netgml3_2_ParameterValueType_httpwww_opengis_netgml3_2valueFile', False)

    
    valueFile = property(__valueFile.value, __valueFile.set, None, u'gml:valueFile is a reference to a file or a part of a file containing one or more parameter values, each numeric value with its associated unit of measure. When referencing a part of a file, that file shall contain multiple identified parts, such as an XML encoded document. Furthermore, the referenced file or part of a file may reference another part of the same or different files, as allowed in XML documents.')

    
    # Element {http://www.opengis.net/gml/3.2}stringValue uses Python identifier stringValue
    __stringValue = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'stringValue'), 'stringValue', '__httpwww_opengis_netgml3_2_ParameterValueType_httpwww_opengis_netgml3_2stringValue', False)

    
    stringValue = property(__stringValue.value, __stringValue.set, None, u'gml:stringValue is a character string value of an operation parameter. A string value does not have an associated unit of measure.')


    _ElementMap = AbstractGeneralParameterValueType._ElementMap.copy()
    _ElementMap.update({
        __value.name() : __value,
        __integerValue.name() : __integerValue,
        __booleanValue.name() : __booleanValue,
        __valueList.name() : __valueList,
        __operationParameter.name() : __operationParameter,
        __integerValueList.name() : __integerValueList,
        __dmsAngleValue.name() : __dmsAngleValue,
        __valueFile.name() : __valueFile,
        __stringValue.name() : __stringValue
    })
    _AttributeMap = AbstractGeneralParameterValueType._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gml.addCategoryObject('typeBinding', u'ParameterValueType', ParameterValueType)


# Complex type BezierType with content type ELEMENT_ONLY
class BezierType (BSplineType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'BezierType')
    # Base type is BSplineType
    
    # Element coordinates ({http://www.opengis.net/gml/3.2}coordinates) inherited from {http://www.opengis.net/gml/3.2}BSplineType
    
    # Element pointRep ({http://www.opengis.net/gml/3.2}pointRep) inherited from {http://www.opengis.net/gml/3.2}BSplineType
    
    # Element degree ({http://www.opengis.net/gml/3.2}degree) inherited from {http://www.opengis.net/gml/3.2}BSplineType
    
    # Element pos ({http://www.opengis.net/gml/3.2}pos) inherited from {http://www.opengis.net/gml/3.2}BSplineType
    
    # Element knot ({http://www.opengis.net/gml/3.2}knot) inherited from {http://www.opengis.net/gml/3.2}BSplineType
    
    # Element posList ({http://www.opengis.net/gml/3.2}posList) inherited from {http://www.opengis.net/gml/3.2}BSplineType
    
    # Element pointProperty ({http://www.opengis.net/gml/3.2}pointProperty) inherited from {http://www.opengis.net/gml/3.2}BSplineType
    
    # Attribute isPolynomial is restricted from parent
    
    # Attribute isPolynomial uses Python identifier isPolynomial
    __isPolynomial = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'isPolynomial'), 'isPolynomial', '__httpwww_opengis_netgml3_2_BSplineType_isPolynomial', pyxb.binding.datatypes.boolean, fixed=True, unicode_default=u'true')
    
    isPolynomial = property(__isPolynomial.value, __isPolynomial.set, None, None)

    
    # Attribute knotType is restricted from parent
    
    # Attribute knotType uses Python identifier knotType
    __knotType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'knotType'), 'knotType', '__httpwww_opengis_netgml3_2_BSplineType_knotType', KnotTypesType, prohibited=True)
    
    knotType = property()

    
    # Attribute numDerivativesAtEnd inherited from {http://www.opengis.net/gml/3.2}AbstractCurveSegmentType
    
    # Attribute numDerivativeInterior inherited from {http://www.opengis.net/gml/3.2}AbstractCurveSegmentType
    
    # Attribute numDerivativesAtStart inherited from {http://www.opengis.net/gml/3.2}AbstractCurveSegmentType
    
    # Attribute interpolation is restricted from parent
    
    # Attribute interpolation uses Python identifier interpolation
    __interpolation = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'interpolation'), 'interpolation', '__httpwww_opengis_netgml3_2_BSplineType_interpolation', CurveInterpolationType, fixed=True, unicode_default=u'polynomialSpline')
    
    interpolation = property(__interpolation.value, __interpolation.set, None, None)


    _ElementMap = BSplineType._ElementMap.copy()
    _ElementMap.update({
        
    })
    _AttributeMap = BSplineType._AttributeMap.copy()
    _AttributeMap.update({
        __isPolynomial.name() : __isPolynomial,
        __knotType.name() : __knotType,
        __interpolation.name() : __interpolation
    })
_Namespace_gml.addCategoryObject('typeBinding', u'BezierType', BezierType)


# Complex type CTD_ANON_11 with content type ELEMENT_ONLY
class CTD_ANON_11 (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.opengis.net/gml/3.2}posList uses Python identifier posList
    __posList = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'posList'), 'posList', '__httpwww_opengis_netgml3_2_CTD_ANON_11_httpwww_opengis_netgml3_2posList', False)

    
    posList = property(__posList.value, __posList.set, None, None)

    
    # Element {http://www.opengis.net/gml/3.2}pointProperty uses Python identifier pointProperty
    __pointProperty = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'pointProperty'), 'pointProperty', '__httpwww_opengis_netgml3_2_CTD_ANON_11_httpwww_opengis_netgml3_2pointProperty', True)

    
    pointProperty = property(__pointProperty.value, __pointProperty.set, None, u'This property element either references a point via the XLink-attributes or contains the point element. pointProperty is the predefined property which may be used by GML Application Schemas whenever a GML feature has a property with a value that is substitutable for Point.')

    
    # Element {http://www.opengis.net/gml/3.2}pos uses Python identifier pos
    __pos = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'pos'), 'pos', '__httpwww_opengis_netgml3_2_CTD_ANON_11_httpwww_opengis_netgml3_2pos', True)

    
    pos = property(__pos.value, __pos.set, None, None)


    _ElementMap = {
        __posList.name() : __posList,
        __pointProperty.name() : __pointProperty,
        __pos.name() : __pos
    }
    _AttributeMap = {
        
    }



# Complex type TopoPointType with content type ELEMENT_ONLY
class TopoPointType (AbstractTopologyType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'TopoPointType')
    # Base type is AbstractTopologyType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element {http://www.opengis.net/gml/3.2}directedNode uses Python identifier directedNode
    __directedNode = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'directedNode'), 'directedNode', '__httpwww_opengis_netgml3_2_TopoPointType_httpwww_opengis_netgml3_2directedNode', False)

    
    directedNode = property(__directedNode.value, __directedNode.set, None, u'A gml:directedNode property element describes the boundary of topology edges and is used in the support of topological point features via the gml:TopoPoint expression, see below. The orientation attribute of type gml:SignType expresses the sense in which the included node is used: start ("-") or end ("+") node.')

    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Attribute id inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType

    _ElementMap = AbstractTopologyType._ElementMap.copy()
    _ElementMap.update({
        __directedNode.name() : __directedNode
    })
    _AttributeMap = AbstractTopologyType._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gml.addCategoryObject('typeBinding', u'TopoPointType', TopoPointType)


# Complex type ImageDatumType with content type ELEMENT_ONLY
class ImageDatumType (AbstractDatumType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'ImageDatumType')
    # Base type is AbstractDatumType
    
    # Element scope ({http://www.opengis.net/gml/3.2}scope) inherited from {http://www.opengis.net/gml/3.2}AbstractDatumType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element anchorDefinition ({http://www.opengis.net/gml/3.2}anchorDefinition) inherited from {http://www.opengis.net/gml/3.2}AbstractDatumType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element realizationEpoch ({http://www.opengis.net/gml/3.2}realizationEpoch) inherited from {http://www.opengis.net/gml/3.2}AbstractDatumType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element domainOfValidity ({http://www.opengis.net/gml/3.2}domainOfValidity) inherited from {http://www.opengis.net/gml/3.2}AbstractDatumType
    
    # Element {http://www.opengis.net/gml/3.2}pixelInCell uses Python identifier pixelInCell
    __pixelInCell = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'pixelInCell'), 'pixelInCell', '__httpwww_opengis_netgml3_2_ImageDatumType_httpwww_opengis_netgml3_2pixelInCell', False)

    
    pixelInCell = property(__pixelInCell.value, __pixelInCell.set, None, u'gml:pixelInCell is a specification of the way an image grid is associated with the image data attributes. The required codeSpace attribute shall reference a source of information specifying the values and meanings of all the allowed string values for this property.')

    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element remarks ({http://www.opengis.net/gml/3.2}remarks) inherited from {http://www.opengis.net/gml/3.2}DefinitionType
    
    # Attribute id_ inherited from {http://www.opengis.net/gml/3.2}DefinitionBaseType

    _ElementMap = AbstractDatumType._ElementMap.copy()
    _ElementMap.update({
        __pixelInCell.name() : __pixelInCell
    })
    _AttributeMap = AbstractDatumType._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gml.addCategoryObject('typeBinding', u'ImageDatumType', ImageDatumType)


# Complex type DQ_RelativeInternalPositionalAccuracy_PropertyType with content type ELEMENT_ONLY
class DQ_RelativeInternalPositionalAccuracy_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'DQ_RelativeInternalPositionalAccuracy_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmd}DQ_RelativeInternalPositionalAccuracy uses Python identifier DQ_RelativeInternalPositionalAccuracy
    __DQ_RelativeInternalPositionalAccuracy = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'DQ_RelativeInternalPositionalAccuracy'), 'DQ_RelativeInternalPositionalAccuracy', '__httpwww_isotc211_org2005gmd_DQ_RelativeInternalPositionalAccuracy_PropertyType_httpwww_isotc211_org2005gmdDQ_RelativeInternalPositionalAccuracy', False)

    
    DQ_RelativeInternalPositionalAccuracy = property(__DQ_RelativeInternalPositionalAccuracy.value, __DQ_RelativeInternalPositionalAccuracy.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_isotc211_org2005gmd_DQ_RelativeInternalPositionalAccuracy_PropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_isotc211_org2005gmd_DQ_RelativeInternalPositionalAccuracy_PropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_isotc211_org2005gmd_DQ_RelativeInternalPositionalAccuracy_PropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_isotc211_org2005gmd_DQ_RelativeInternalPositionalAccuracy_PropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_isotc211_org2005gmd_DQ_RelativeInternalPositionalAccuracy_PropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute uuidref uses Python identifier uuidref
    __uuidref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uuidref'), 'uuidref', '__httpwww_isotc211_org2005gmd_DQ_RelativeInternalPositionalAccuracy_PropertyType_uuidref', pyxb.binding.datatypes.string)
    
    uuidref = property(__uuidref.value, __uuidref.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_isotc211_org2005gmd_DQ_RelativeInternalPositionalAccuracy_PropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmd_DQ_RelativeInternalPositionalAccuracy_PropertyType_httpwww_isotc211_org2005gconilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_isotc211_org2005gmd_DQ_RelativeInternalPositionalAccuracy_PropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)


    _ElementMap = {
        __DQ_RelativeInternalPositionalAccuracy.name() : __DQ_RelativeInternalPositionalAccuracy
    }
    _AttributeMap = {
        __show.name() : __show,
        __role.name() : __role,
        __href.name() : __href,
        __actuate.name() : __actuate,
        __type.name() : __type,
        __uuidref.name() : __uuidref,
        __title.name() : __title,
        __nilReason.name() : __nilReason,
        __arcrole.name() : __arcrole
    }
_Namespace_gmd.addCategoryObject('typeBinding', u'DQ_RelativeInternalPositionalAccuracy_PropertyType', DQ_RelativeInternalPositionalAccuracy_PropertyType)


# Complex type FileType with content type ELEMENT_ONLY
class FileType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'FileType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.opengis.net/gml/3.2}rangeParameters uses Python identifier rangeParameters
    __rangeParameters = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'rangeParameters'), 'rangeParameters', '__httpwww_opengis_netgml3_2_FileType_httpwww_opengis_netgml3_2rangeParameters', False)

    
    rangeParameters = property(__rangeParameters.value, __rangeParameters.set, None, None)

    
    # Element {http://www.opengis.net/gml/3.2}fileStructure uses Python identifier fileStructure
    __fileStructure = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'fileStructure'), 'fileStructure', '__httpwww_opengis_netgml3_2_FileType_httpwww_opengis_netgml3_2fileStructure', False)

    
    fileStructure = property(__fileStructure.value, __fileStructure.set, None, None)

    
    # Element {http://www.opengis.net/gml/3.2}mimeType uses Python identifier mimeType
    __mimeType = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'mimeType'), 'mimeType', '__httpwww_opengis_netgml3_2_FileType_httpwww_opengis_netgml3_2mimeType', False)

    
    mimeType = property(__mimeType.value, __mimeType.set, None, None)

    
    # Element {http://www.opengis.net/gml/3.2}compression uses Python identifier compression
    __compression = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'compression'), 'compression', '__httpwww_opengis_netgml3_2_FileType_httpwww_opengis_netgml3_2compression', False)

    
    compression = property(__compression.value, __compression.set, None, None)

    
    # Element {http://www.opengis.net/gml/3.2}fileName uses Python identifier fileName
    __fileName = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'fileName'), 'fileName', '__httpwww_opengis_netgml3_2_FileType_httpwww_opengis_netgml3_2fileName', False)

    
    fileName = property(__fileName.value, __fileName.set, None, u'')

    
    # Element {http://www.opengis.net/gml/3.2}fileReference uses Python identifier fileReference
    __fileReference = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'fileReference'), 'fileReference', '__httpwww_opengis_netgml3_2_FileType_httpwww_opengis_netgml3_2fileReference', False)

    
    fileReference = property(__fileReference.value, __fileReference.set, None, None)


    _ElementMap = {
        __rangeParameters.name() : __rangeParameters,
        __fileStructure.name() : __fileStructure,
        __mimeType.name() : __mimeType,
        __compression.name() : __compression,
        __fileName.name() : __fileName,
        __fileReference.name() : __fileReference
    }
    _AttributeMap = {
        
    }
_Namespace_gml.addCategoryObject('typeBinding', u'FileType', FileType)


# Complex type Length_PropertyType with content type ELEMENT_ONLY
class Length_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gco, u'Length_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gco}Length uses Python identifier Length
    __Length = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'Length'), 'Length', '__httpwww_isotc211_org2005gco_Length_PropertyType_httpwww_isotc211_org2005gcoLength', False)

    
    Length = property(__Length.value, __Length.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gco_Length_PropertyType_httpwww_isotc211_org2005gconilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)


    _ElementMap = {
        __Length.name() : __Length
    }
    _AttributeMap = {
        __nilReason.name() : __nilReason
    }
_Namespace_gco.addCategoryObject('typeBinding', u'Length_PropertyType', Length_PropertyType)


# Complex type VerticalCRSPropertyType with content type ELEMENT_ONLY
class VerticalCRSPropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'VerticalCRSPropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.opengis.net/gml/3.2}VerticalCRS uses Python identifier VerticalCRS
    __VerticalCRS = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'VerticalCRS'), 'VerticalCRS', '__httpwww_opengis_netgml3_2_VerticalCRSPropertyType_httpwww_opengis_netgml3_2VerticalCRS', False)

    
    VerticalCRS = property(__VerticalCRS.value, __VerticalCRS.set, None, u'gml:VerticalCRS is a 1D coordinate reference system used for recording heights or depths. Vertical CRSs make use of the direction of gravity to define the concept of height or depth, but the relationship with gravity may not be straightforward. By implication, ellipsoidal heights (h) cannot be captured in a vertical coordinate reference system. Ellipsoidal heights cannot exist independently, but only as an inseparable part of a 3D coordinate tuple defined in a geographic 3D coordinate reference system.')

    
    # Attribute {http://www.opengis.net/gml/3.2}remoteSchema uses Python identifier remoteSchema
    __remoteSchema = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'remoteSchema'), 'remoteSchema', '__httpwww_opengis_netgml3_2_VerticalCRSPropertyType_httpwww_opengis_netgml3_2remoteSchema', pyxb.binding.datatypes.anyURI)
    
    remoteSchema = property(__remoteSchema.value, __remoteSchema.set, None, u'')

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_opengis_netgml3_2_VerticalCRSPropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_opengis_netgml3_2_VerticalCRSPropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_opengis_netgml3_2_VerticalCRSPropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'nilReason'), 'nilReason', '__httpwww_opengis_netgml3_2_VerticalCRSPropertyType_nilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_opengis_netgml3_2_VerticalCRSPropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_opengis_netgml3_2_VerticalCRSPropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_opengis_netgml3_2_VerticalCRSPropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_opengis_netgml3_2_VerticalCRSPropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)


    _ElementMap = {
        __VerticalCRS.name() : __VerticalCRS
    }
    _AttributeMap = {
        __remoteSchema.name() : __remoteSchema,
        __role.name() : __role,
        __type.name() : __type,
        __arcrole.name() : __arcrole,
        __nilReason.name() : __nilReason,
        __show.name() : __show,
        __actuate.name() : __actuate,
        __href.name() : __href,
        __title.name() : __title
    }
_Namespace_gml.addCategoryObject('typeBinding', u'VerticalCRSPropertyType', VerticalCRSPropertyType)


# Complex type RectangleType with content type ELEMENT_ONLY
class RectangleType (AbstractSurfacePatchType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'RectangleType')
    # Base type is AbstractSurfacePatchType
    
    # Element {http://www.opengis.net/gml/3.2}exterior uses Python identifier exterior
    __exterior = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'exterior'), 'exterior', '__httpwww_opengis_netgml3_2_RectangleType_httpwww_opengis_netgml3_2exterior', False)

    
    exterior = property(__exterior.value, __exterior.set, None, u'A boundary of a surface consists of a number of rings. In the normal 2D case, one of these rings is distinguished as being the exterior boundary. In a general manifold this is not always possible, in which case all boundaries shall be listed as interior boundaries, and the exterior will be empty.')

    
    # Attribute interpolation uses Python identifier interpolation
    __interpolation = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'interpolation'), 'interpolation', '__httpwww_opengis_netgml3_2_RectangleType_interpolation', SurfaceInterpolationType, fixed=True, unicode_default=u'planar')
    
    interpolation = property(__interpolation.value, __interpolation.set, None, None)


    _ElementMap = AbstractSurfacePatchType._ElementMap.copy()
    _ElementMap.update({
        __exterior.name() : __exterior
    })
    _AttributeMap = AbstractSurfacePatchType._AttributeMap.copy()
    _AttributeMap.update({
        __interpolation.name() : __interpolation
    })
_Namespace_gml.addCategoryObject('typeBinding', u'RectangleType', RectangleType)


# Complex type PassThroughOperationPropertyType with content type ELEMENT_ONLY
class PassThroughOperationPropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'PassThroughOperationPropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.opengis.net/gml/3.2}PassThroughOperation uses Python identifier PassThroughOperation
    __PassThroughOperation = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'PassThroughOperation'), 'PassThroughOperation', '__httpwww_opengis_netgml3_2_PassThroughOperationPropertyType_httpwww_opengis_netgml3_2PassThroughOperation', False)

    
    PassThroughOperation = property(__PassThroughOperation.value, __PassThroughOperation.set, None, u'gml:PassThroughOperation is a pass-through operation specifies that a subset of a coordinate tuple is subject to a specific coordinate operation.\nThe modifiedCoordinate property elements are an ordered sequence of positive integers defining the positions in a coordinate tuple of the coordinates affected by this pass-through operation. The AggregationAttributeGroup should be used to specify that the modifiedCoordinate elements are ordered.')

    
    # Attribute {http://www.opengis.net/gml/3.2}remoteSchema uses Python identifier remoteSchema
    __remoteSchema = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'remoteSchema'), 'remoteSchema', '__httpwww_opengis_netgml3_2_PassThroughOperationPropertyType_httpwww_opengis_netgml3_2remoteSchema', pyxb.binding.datatypes.anyURI)
    
    remoteSchema = property(__remoteSchema.value, __remoteSchema.set, None, u'')

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_opengis_netgml3_2_PassThroughOperationPropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_opengis_netgml3_2_PassThroughOperationPropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_opengis_netgml3_2_PassThroughOperationPropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'nilReason'), 'nilReason', '__httpwww_opengis_netgml3_2_PassThroughOperationPropertyType_nilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_opengis_netgml3_2_PassThroughOperationPropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_opengis_netgml3_2_PassThroughOperationPropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_opengis_netgml3_2_PassThroughOperationPropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_opengis_netgml3_2_PassThroughOperationPropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)


    _ElementMap = {
        __PassThroughOperation.name() : __PassThroughOperation
    }
    _AttributeMap = {
        __remoteSchema.name() : __remoteSchema,
        __type.name() : __type,
        __title.name() : __title,
        __arcrole.name() : __arcrole,
        __nilReason.name() : __nilReason,
        __show.name() : __show,
        __href.name() : __href,
        __actuate.name() : __actuate,
        __role.name() : __role
    }
_Namespace_gml.addCategoryObject('typeBinding', u'PassThroughOperationPropertyType', PassThroughOperationPropertyType)


# Complex type MD_CellGeometryCode_PropertyType with content type ELEMENT_ONLY
class MD_CellGeometryCode_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_CellGeometryCode_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmd}MD_CellGeometryCode uses Python identifier MD_CellGeometryCode
    __MD_CellGeometryCode = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_CellGeometryCode'), 'MD_CellGeometryCode', '__httpwww_isotc211_org2005gmd_MD_CellGeometryCode_PropertyType_httpwww_isotc211_org2005gmdMD_CellGeometryCode', False)

    
    MD_CellGeometryCode = property(__MD_CellGeometryCode.value, __MD_CellGeometryCode.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmd_MD_CellGeometryCode_PropertyType_httpwww_isotc211_org2005gconilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)


    _ElementMap = {
        __MD_CellGeometryCode.name() : __MD_CellGeometryCode
    }
    _AttributeMap = {
        __nilReason.name() : __nilReason
    }
_Namespace_gmd.addCategoryObject('typeBinding', u'MD_CellGeometryCode_PropertyType', MD_CellGeometryCode_PropertyType)


# Complex type EllipsoidType with content type ELEMENT_ONLY
class EllipsoidType (IdentifiedObjectType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'EllipsoidType')
    # Base type is IdentifiedObjectType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element {http://www.opengis.net/gml/3.2}semiMajorAxis uses Python identifier semiMajorAxis
    __semiMajorAxis = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'semiMajorAxis'), 'semiMajorAxis', '__httpwww_opengis_netgml3_2_EllipsoidType_httpwww_opengis_netgml3_2semiMajorAxis', False)

    
    semiMajorAxis = property(__semiMajorAxis.value, __semiMajorAxis.set, None, u'gml:semiMajorAxis specifies the length of the semi-major axis of the ellipsoid, with its units. Uses the MeasureType with the restriction that the unit of measure referenced by uom must be suitable for a length, such as metres or feet.')

    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element {http://www.opengis.net/gml/3.2}secondDefiningParameter uses Python identifier secondDefiningParameter
    __secondDefiningParameter = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'secondDefiningParameter'), 'secondDefiningParameter', '__httpwww_opengis_netgml3_2_EllipsoidType_httpwww_opengis_netgml3_2secondDefiningParameter', False)

    
    secondDefiningParameter = property(__secondDefiningParameter.value, __secondDefiningParameter.set, None, u'gml:secondDefiningParameter is a property containing the definition of the second parameter that defines the shape of an ellipsoid. An ellipsoid requires two defining parameters: semi-major axis and inverse flattening or semi-major axis and semi-minor axis. When the reference body is a sphere rather than an ellipsoid, only a single defining parameter is required, namely the radius of the sphere; in that case, the semi-major axis "degenerates" into the radius of the sphere.\nThe inverseFlattening element contains the inverse flattening value of the ellipsoid. This value is a scale factor (or ratio). It uses gml:LengthType with the restriction that the unit of measure referenced by the uom attribute must be suitable for a scale factor, such as percent, permil, or parts-per-million.\nThe semiMinorAxis element contains the length of the semi-minor axis of the ellipsoid. When the isSphere element is included, the ellipsoid is degenerate and is actually a sphere. The sphere is completely defined by the semi-major axis, which is the radius of the sphere.')

    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element remarks ({http://www.opengis.net/gml/3.2}remarks) inherited from {http://www.opengis.net/gml/3.2}DefinitionType
    
    # Attribute id_ inherited from {http://www.opengis.net/gml/3.2}DefinitionBaseType

    _ElementMap = IdentifiedObjectType._ElementMap.copy()
    _ElementMap.update({
        __semiMajorAxis.name() : __semiMajorAxis,
        __secondDefiningParameter.name() : __secondDefiningParameter
    })
    _AttributeMap = IdentifiedObjectType._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gml.addCategoryObject('typeBinding', u'EllipsoidType', EllipsoidType)


# Complex type LI_Lineage_PropertyType with content type ELEMENT_ONLY
class LI_Lineage_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'LI_Lineage_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmd}LI_Lineage uses Python identifier LI_Lineage
    __LI_Lineage = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'LI_Lineage'), 'LI_Lineage', '__httpwww_isotc211_org2005gmd_LI_Lineage_PropertyType_httpwww_isotc211_org2005gmdLI_Lineage', False)

    
    LI_Lineage = property(__LI_Lineage.value, __LI_Lineage.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_isotc211_org2005gmd_LI_Lineage_PropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_isotc211_org2005gmd_LI_Lineage_PropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_isotc211_org2005gmd_LI_Lineage_PropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_isotc211_org2005gmd_LI_Lineage_PropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute uuidref uses Python identifier uuidref
    __uuidref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uuidref'), 'uuidref', '__httpwww_isotc211_org2005gmd_LI_Lineage_PropertyType_uuidref', pyxb.binding.datatypes.string)
    
    uuidref = property(__uuidref.value, __uuidref.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_isotc211_org2005gmd_LI_Lineage_PropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmd_LI_Lineage_PropertyType_httpwww_isotc211_org2005gconilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_isotc211_org2005gmd_LI_Lineage_PropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_isotc211_org2005gmd_LI_Lineage_PropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")


    _ElementMap = {
        __LI_Lineage.name() : __LI_Lineage
    }
    _AttributeMap = {
        __type.name() : __type,
        __href.name() : __href,
        __arcrole.name() : __arcrole,
        __actuate.name() : __actuate,
        __uuidref.name() : __uuidref,
        __role.name() : __role,
        __nilReason.name() : __nilReason,
        __title.name() : __title,
        __show.name() : __show
    }
_Namespace_gmd.addCategoryObject('typeBinding', u'LI_Lineage_PropertyType', LI_Lineage_PropertyType)


# Complex type ConeType with content type ELEMENT_ONLY
class ConeType (AbstractGriddedSurfaceType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'ConeType')
    # Base type is AbstractGriddedSurfaceType
    
    # Element rows ({http://www.opengis.net/gml/3.2}rows) inherited from {http://www.opengis.net/gml/3.2}AbstractGriddedSurfaceType
    
    # Attribute aggregationType inherited from {http://www.opengis.net/gml/3.2}AbstractParametricCurveSurfaceType
    
    # Attribute horizontalCurveType uses Python identifier horizontalCurveType
    __horizontalCurveType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'horizontalCurveType'), 'horizontalCurveType', '__httpwww_opengis_netgml3_2_ConeType_horizontalCurveType', CurveInterpolationType, fixed=True, unicode_default=u'circularArc3Points')
    
    horizontalCurveType = property(__horizontalCurveType.value, __horizontalCurveType.set, None, None)

    
    # Attribute columns inherited from {http://www.opengis.net/gml/3.2}AbstractGriddedSurfaceType
    
    # Attribute verticalCurveType uses Python identifier verticalCurveType
    __verticalCurveType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'verticalCurveType'), 'verticalCurveType', '__httpwww_opengis_netgml3_2_ConeType_verticalCurveType', CurveInterpolationType, fixed=True, unicode_default=u'linear')
    
    verticalCurveType = property(__verticalCurveType.value, __verticalCurveType.set, None, None)

    
    # Attribute rows_ inherited from {http://www.opengis.net/gml/3.2}AbstractGriddedSurfaceType

    _ElementMap = AbstractGriddedSurfaceType._ElementMap.copy()
    _ElementMap.update({
        
    })
    _AttributeMap = AbstractGriddedSurfaceType._AttributeMap.copy()
    _AttributeMap.update({
        __horizontalCurveType.name() : __horizontalCurveType,
        __verticalCurveType.name() : __verticalCurveType
    })
_Namespace_gml.addCategoryObject('typeBinding', u'ConeType', ConeType)


# Complex type TimeIntervalLengthType with content type SIMPLE
class TimeIntervalLengthType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = pyxb.binding.datatypes.decimal
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'TimeIntervalLengthType')
    # Base type is pyxb.binding.datatypes.decimal
    
    # Attribute radix uses Python identifier radix
    __radix = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'radix'), 'radix', '__httpwww_opengis_netgml3_2_TimeIntervalLengthType_radix', pyxb.binding.datatypes.positiveInteger)
    
    radix = property(__radix.value, __radix.set, None, None)

    
    # Attribute unit uses Python identifier unit
    __unit = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'unit'), 'unit', '__httpwww_opengis_netgml3_2_TimeIntervalLengthType_unit', TimeUnitType, required=True)
    
    unit = property(__unit.value, __unit.set, None, None)

    
    # Attribute factor uses Python identifier factor
    __factor = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'factor'), 'factor', '__httpwww_opengis_netgml3_2_TimeIntervalLengthType_factor', pyxb.binding.datatypes.integer)
    
    factor = property(__factor.value, __factor.set, None, None)


    _ElementMap = {
        
    }
    _AttributeMap = {
        __radix.name() : __radix,
        __unit.name() : __unit,
        __factor.name() : __factor
    }
_Namespace_gml.addCategoryObject('typeBinding', u'TimeIntervalLengthType', TimeIntervalLengthType)


# Complex type LinearRingPropertyType with content type ELEMENT_ONLY
class LinearRingPropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'LinearRingPropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.opengis.net/gml/3.2}LinearRing uses Python identifier LinearRing
    __LinearRing = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'LinearRing'), 'LinearRing', '__httpwww_opengis_netgml3_2_LinearRingPropertyType_httpwww_opengis_netgml3_2LinearRing', False)

    
    LinearRing = property(__LinearRing.value, __LinearRing.set, None, u'A LinearRing is defined by four or more coordinate tuples, with linear interpolation between them; the first and last coordinates shall be coincident. The number of direct positions in the list shall be at least four.')


    _ElementMap = {
        __LinearRing.name() : __LinearRing
    }
    _AttributeMap = {
        
    }
_Namespace_gml.addCategoryObject('typeBinding', u'LinearRingPropertyType', LinearRingPropertyType)


# Complex type DQ_QuantitativeAttributeAccuracy_PropertyType with content type ELEMENT_ONLY
class DQ_QuantitativeAttributeAccuracy_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'DQ_QuantitativeAttributeAccuracy_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmd}DQ_QuantitativeAttributeAccuracy uses Python identifier DQ_QuantitativeAttributeAccuracy
    __DQ_QuantitativeAttributeAccuracy = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'DQ_QuantitativeAttributeAccuracy'), 'DQ_QuantitativeAttributeAccuracy', '__httpwww_isotc211_org2005gmd_DQ_QuantitativeAttributeAccuracy_PropertyType_httpwww_isotc211_org2005gmdDQ_QuantitativeAttributeAccuracy', False)

    
    DQ_QuantitativeAttributeAccuracy = property(__DQ_QuantitativeAttributeAccuracy.value, __DQ_QuantitativeAttributeAccuracy.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmd_DQ_QuantitativeAttributeAccuracy_PropertyType_httpwww_isotc211_org2005gconilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_isotc211_org2005gmd_DQ_QuantitativeAttributeAccuracy_PropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_isotc211_org2005gmd_DQ_QuantitativeAttributeAccuracy_PropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_isotc211_org2005gmd_DQ_QuantitativeAttributeAccuracy_PropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_isotc211_org2005gmd_DQ_QuantitativeAttributeAccuracy_PropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute uuidref uses Python identifier uuidref
    __uuidref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uuidref'), 'uuidref', '__httpwww_isotc211_org2005gmd_DQ_QuantitativeAttributeAccuracy_PropertyType_uuidref', pyxb.binding.datatypes.string)
    
    uuidref = property(__uuidref.value, __uuidref.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_isotc211_org2005gmd_DQ_QuantitativeAttributeAccuracy_PropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_isotc211_org2005gmd_DQ_QuantitativeAttributeAccuracy_PropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_isotc211_org2005gmd_DQ_QuantitativeAttributeAccuracy_PropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")


    _ElementMap = {
        __DQ_QuantitativeAttributeAccuracy.name() : __DQ_QuantitativeAttributeAccuracy
    }
    _AttributeMap = {
        __nilReason.name() : __nilReason,
        __type.name() : __type,
        __title.name() : __title,
        __show.name() : __show,
        __href.name() : __href,
        __uuidref.name() : __uuidref,
        __role.name() : __role,
        __arcrole.name() : __arcrole,
        __actuate.name() : __actuate
    }
_Namespace_gmd.addCategoryObject('typeBinding', u'DQ_QuantitativeAttributeAccuracy_PropertyType', DQ_QuantitativeAttributeAccuracy_PropertyType)


# Complex type UomVelocity_PropertyType with content type ELEMENT_ONLY
class UomVelocity_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gco, u'UomVelocity_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.opengis.net/gml/3.2}UnitDefinition uses Python identifier UnitDefinition
    __UnitDefinition = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'UnitDefinition'), 'UnitDefinition', '__httpwww_isotc211_org2005gco_UomVelocity_PropertyType_httpwww_opengis_netgml3_2UnitDefinition', False)

    
    UnitDefinition = property(__UnitDefinition.value, __UnitDefinition.set, None, u'A gml:UnitDefinition is a general definition of a unit of measure. This generic element is used only for units for which no relationship with other units or units systems is known.\nThe content model of gml:UnitDefinition adds three additional properties to gml:Definition, gml:quantityType, gml:quantityTypeReference and gml:catalogSymbol.  \nThe gml:catalogSymbol property optionally gives the short symbol used for this unit. This element is usually used when the relationship of this unit to other units or units systems is unknown.')

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_isotc211_org2005gco_UomVelocity_PropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_isotc211_org2005gco_UomVelocity_PropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_isotc211_org2005gco_UomVelocity_PropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_isotc211_org2005gco_UomVelocity_PropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute uuidref uses Python identifier uuidref
    __uuidref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uuidref'), 'uuidref', '__httpwww_isotc211_org2005gco_UomVelocity_PropertyType_uuidref', pyxb.binding.datatypes.string)
    
    uuidref = property(__uuidref.value, __uuidref.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gco_UomVelocity_PropertyType_httpwww_isotc211_org2005gconilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_isotc211_org2005gco_UomVelocity_PropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_isotc211_org2005gco_UomVelocity_PropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_isotc211_org2005gco_UomVelocity_PropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)


    _ElementMap = {
        __UnitDefinition.name() : __UnitDefinition
    }
    _AttributeMap = {
        __arcrole.name() : __arcrole,
        __type.name() : __type,
        __actuate.name() : __actuate,
        __role.name() : __role,
        __uuidref.name() : __uuidref,
        __nilReason.name() : __nilReason,
        __title.name() : __title,
        __show.name() : __show,
        __href.name() : __href
    }
_Namespace_gco.addCategoryObject('typeBinding', u'UomVelocity_PropertyType', UomVelocity_PropertyType)


# Complex type MD_Medium_Type with content type ELEMENT_ONLY
class MD_Medium_Type (AbstractObject_Type):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_Medium_Type')
    # Base type is AbstractObject_Type
    
    # Element {http://www.isotc211.org/2005/gmd}name uses Python identifier name
    __name = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'name'), 'name', '__httpwww_isotc211_org2005gmd_MD_Medium_Type_httpwww_isotc211_org2005gmdname', False)

    
    name = property(__name.value, __name.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}densityUnits uses Python identifier densityUnits
    __densityUnits = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'densityUnits'), 'densityUnits', '__httpwww_isotc211_org2005gmd_MD_Medium_Type_httpwww_isotc211_org2005gmddensityUnits', False)

    
    densityUnits = property(__densityUnits.value, __densityUnits.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}volumes uses Python identifier volumes
    __volumes = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'volumes'), 'volumes', '__httpwww_isotc211_org2005gmd_MD_Medium_Type_httpwww_isotc211_org2005gmdvolumes', False)

    
    volumes = property(__volumes.value, __volumes.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}density uses Python identifier density
    __density = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'density'), 'density', '__httpwww_isotc211_org2005gmd_MD_Medium_Type_httpwww_isotc211_org2005gmddensity', True)

    
    density = property(__density.value, __density.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}mediumFormat uses Python identifier mediumFormat
    __mediumFormat = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'mediumFormat'), 'mediumFormat', '__httpwww_isotc211_org2005gmd_MD_Medium_Type_httpwww_isotc211_org2005gmdmediumFormat', True)

    
    mediumFormat = property(__mediumFormat.value, __mediumFormat.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}mediumNote uses Python identifier mediumNote
    __mediumNote = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'mediumNote'), 'mediumNote', '__httpwww_isotc211_org2005gmd_MD_Medium_Type_httpwww_isotc211_org2005gmdmediumNote', False)

    
    mediumNote = property(__mediumNote.value, __mediumNote.set, None, None)

    
    # Attribute id inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type
    
    # Attribute uuid inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type

    _ElementMap = AbstractObject_Type._ElementMap.copy()
    _ElementMap.update({
        __name.name() : __name,
        __densityUnits.name() : __densityUnits,
        __volumes.name() : __volumes,
        __density.name() : __density,
        __mediumFormat.name() : __mediumFormat,
        __mediumNote.name() : __mediumNote
    })
    _AttributeMap = AbstractObject_Type._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_gmd.addCategoryObject('typeBinding', u'MD_Medium_Type', MD_Medium_Type)


# Complex type DQ_TemporalAccuracy_PropertyType with content type ELEMENT_ONLY
class DQ_TemporalAccuracy_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'DQ_TemporalAccuracy_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmd}AbstractDQ_TemporalAccuracy uses Python identifier AbstractDQ_TemporalAccuracy
    __AbstractDQ_TemporalAccuracy = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'AbstractDQ_TemporalAccuracy'), 'AbstractDQ_TemporalAccuracy', '__httpwww_isotc211_org2005gmd_DQ_TemporalAccuracy_PropertyType_httpwww_isotc211_org2005gmdAbstractDQ_TemporalAccuracy', False)

    
    AbstractDQ_TemporalAccuracy = property(__AbstractDQ_TemporalAccuracy.value, __AbstractDQ_TemporalAccuracy.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_isotc211_org2005gmd_DQ_TemporalAccuracy_PropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_isotc211_org2005gmd_DQ_TemporalAccuracy_PropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_isotc211_org2005gmd_DQ_TemporalAccuracy_PropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_isotc211_org2005gmd_DQ_TemporalAccuracy_PropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute uuidref uses Python identifier uuidref
    __uuidref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uuidref'), 'uuidref', '__httpwww_isotc211_org2005gmd_DQ_TemporalAccuracy_PropertyType_uuidref', pyxb.binding.datatypes.string)
    
    uuidref = property(__uuidref.value, __uuidref.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_isotc211_org2005gmd_DQ_TemporalAccuracy_PropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_isotc211_org2005gmd_DQ_TemporalAccuracy_PropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmd_DQ_TemporalAccuracy_PropertyType_httpwww_isotc211_org2005gconilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_isotc211_org2005gmd_DQ_TemporalAccuracy_PropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)


    _ElementMap = {
        __AbstractDQ_TemporalAccuracy.name() : __AbstractDQ_TemporalAccuracy
    }
    _AttributeMap = {
        __type.name() : __type,
        __show.name() : __show,
        __href.name() : __href,
        __actuate.name() : __actuate,
        __uuidref.name() : __uuidref,
        __role.name() : __role,
        __title.name() : __title,
        __nilReason.name() : __nilReason,
        __arcrole.name() : __arcrole
    }
_Namespace_gmd.addCategoryObject('typeBinding', u'DQ_TemporalAccuracy_PropertyType', DQ_TemporalAccuracy_PropertyType)


# Complex type EX_GeographicDescription_PropertyType with content type ELEMENT_ONLY
class EX_GeographicDescription_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'EX_GeographicDescription_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmd}EX_GeographicDescription uses Python identifier EX_GeographicDescription
    __EX_GeographicDescription = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'EX_GeographicDescription'), 'EX_GeographicDescription', '__httpwww_isotc211_org2005gmd_EX_GeographicDescription_PropertyType_httpwww_isotc211_org2005gmdEX_GeographicDescription', False)

    
    EX_GeographicDescription = property(__EX_GeographicDescription.value, __EX_GeographicDescription.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_isotc211_org2005gmd_EX_GeographicDescription_PropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_isotc211_org2005gmd_EX_GeographicDescription_PropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_isotc211_org2005gmd_EX_GeographicDescription_PropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmd_EX_GeographicDescription_PropertyType_httpwww_isotc211_org2005gconilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_isotc211_org2005gmd_EX_GeographicDescription_PropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute uuidref uses Python identifier uuidref
    __uuidref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uuidref'), 'uuidref', '__httpwww_isotc211_org2005gmd_EX_GeographicDescription_PropertyType_uuidref', pyxb.binding.datatypes.string)
    
    uuidref = property(__uuidref.value, __uuidref.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_isotc211_org2005gmd_EX_GeographicDescription_PropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_isotc211_org2005gmd_EX_GeographicDescription_PropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_isotc211_org2005gmd_EX_GeographicDescription_PropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")


    _ElementMap = {
        __EX_GeographicDescription.name() : __EX_GeographicDescription
    }
    _AttributeMap = {
        __type.name() : __type,
        __arcrole.name() : __arcrole,
        __title.name() : __title,
        __nilReason.name() : __nilReason,
        __role.name() : __role,
        __uuidref.name() : __uuidref,
        __href.name() : __href,
        __actuate.name() : __actuate,
        __show.name() : __show
    }
_Namespace_gmd.addCategoryObject('typeBinding', u'EX_GeographicDescription_PropertyType', EX_GeographicDescription_PropertyType)


# Complex type DQ_DataQuality_PropertyType with content type ELEMENT_ONLY
class DQ_DataQuality_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'DQ_DataQuality_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmd}DQ_DataQuality uses Python identifier DQ_DataQuality
    __DQ_DataQuality = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'DQ_DataQuality'), 'DQ_DataQuality', '__httpwww_isotc211_org2005gmd_DQ_DataQuality_PropertyType_httpwww_isotc211_org2005gmdDQ_DataQuality', False)

    
    DQ_DataQuality = property(__DQ_DataQuality.value, __DQ_DataQuality.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_isotc211_org2005gmd_DQ_DataQuality_PropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_isotc211_org2005gmd_DQ_DataQuality_PropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_isotc211_org2005gmd_DQ_DataQuality_PropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_isotc211_org2005gmd_DQ_DataQuality_PropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute uuidref uses Python identifier uuidref
    __uuidref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uuidref'), 'uuidref', '__httpwww_isotc211_org2005gmd_DQ_DataQuality_PropertyType_uuidref', pyxb.binding.datatypes.string)
    
    uuidref = property(__uuidref.value, __uuidref.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_isotc211_org2005gmd_DQ_DataQuality_PropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_isotc211_org2005gmd_DQ_DataQuality_PropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_isotc211_org2005gmd_DQ_DataQuality_PropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmd_DQ_DataQuality_PropertyType_httpwww_isotc211_org2005gconilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)


    _ElementMap = {
        __DQ_DataQuality.name() : __DQ_DataQuality
    }
    _AttributeMap = {
        __title.name() : __title,
        __type.name() : __type,
        __show.name() : __show,
        __href.name() : __href,
        __uuidref.name() : __uuidref,
        __arcrole.name() : __arcrole,
        __role.name() : __role,
        __actuate.name() : __actuate,
        __nilReason.name() : __nilReason
    }
_Namespace_gmd.addCategoryObject('typeBinding', u'DQ_DataQuality_PropertyType', DQ_DataQuality_PropertyType)


# Complex type MD_ApplicationSchemaInformation_PropertyType with content type ELEMENT_ONLY
class MD_ApplicationSchemaInformation_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_ApplicationSchemaInformation_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmd}MD_ApplicationSchemaInformation uses Python identifier MD_ApplicationSchemaInformation
    __MD_ApplicationSchemaInformation = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_ApplicationSchemaInformation'), 'MD_ApplicationSchemaInformation', '__httpwww_isotc211_org2005gmd_MD_ApplicationSchemaInformation_PropertyType_httpwww_isotc211_org2005gmdMD_ApplicationSchemaInformation', False)

    
    MD_ApplicationSchemaInformation = property(__MD_ApplicationSchemaInformation.value, __MD_ApplicationSchemaInformation.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_isotc211_org2005gmd_MD_ApplicationSchemaInformation_PropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmd_MD_ApplicationSchemaInformation_PropertyType_httpwww_isotc211_org2005gconilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_isotc211_org2005gmd_MD_ApplicationSchemaInformation_PropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_isotc211_org2005gmd_MD_ApplicationSchemaInformation_PropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute uuidref uses Python identifier uuidref
    __uuidref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uuidref'), 'uuidref', '__httpwww_isotc211_org2005gmd_MD_ApplicationSchemaInformation_PropertyType_uuidref', pyxb.binding.datatypes.string)
    
    uuidref = property(__uuidref.value, __uuidref.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_isotc211_org2005gmd_MD_ApplicationSchemaInformation_PropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_isotc211_org2005gmd_MD_ApplicationSchemaInformation_PropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_isotc211_org2005gmd_MD_ApplicationSchemaInformation_PropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_isotc211_org2005gmd_MD_ApplicationSchemaInformation_PropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")


    _ElementMap = {
        __MD_ApplicationSchemaInformation.name() : __MD_ApplicationSchemaInformation
    }
    _AttributeMap = {
        __type.name() : __type,
        __nilReason.name() : __nilReason,
        __arcrole.name() : __arcrole,
        __role.name() : __role,
        __uuidref.name() : __uuidref,
        __title.name() : __title,
        __show.name() : __show,
        __href.name() : __href,
        __actuate.name() : __actuate
    }
_Namespace_gmd.addCategoryObject('typeBinding', u'MD_ApplicationSchemaInformation_PropertyType', MD_ApplicationSchemaInformation_PropertyType)


# Complex type SingleOperationPropertyType with content type ELEMENT_ONLY
class SingleOperationPropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'SingleOperationPropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.opengis.net/gml/3.2}AbstractSingleOperation uses Python identifier AbstractSingleOperation
    __AbstractSingleOperation = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractSingleOperation'), 'AbstractSingleOperation', '__httpwww_opengis_netgml3_2_SingleOperationPropertyType_httpwww_opengis_netgml3_2AbstractSingleOperation', False)

    
    AbstractSingleOperation = property(__AbstractSingleOperation.value, __AbstractSingleOperation.set, None, u'gml:AbstractSingleOperation is a single (not concatenated) coordinate operation.')

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_opengis_netgml3_2_SingleOperationPropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.opengis.net/gml/3.2}remoteSchema uses Python identifier remoteSchema
    __remoteSchema = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'remoteSchema'), 'remoteSchema', '__httpwww_opengis_netgml3_2_SingleOperationPropertyType_httpwww_opengis_netgml3_2remoteSchema', pyxb.binding.datatypes.anyURI)
    
    remoteSchema = property(__remoteSchema.value, __remoteSchema.set, None, u'')

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_opengis_netgml3_2_SingleOperationPropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_opengis_netgml3_2_SingleOperationPropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_opengis_netgml3_2_SingleOperationPropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'nilReason'), 'nilReason', '__httpwww_opengis_netgml3_2_SingleOperationPropertyType_nilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_opengis_netgml3_2_SingleOperationPropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_opengis_netgml3_2_SingleOperationPropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_opengis_netgml3_2_SingleOperationPropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")


    _ElementMap = {
        __AbstractSingleOperation.name() : __AbstractSingleOperation
    }
    _AttributeMap = {
        __href.name() : __href,
        __remoteSchema.name() : __remoteSchema,
        __type.name() : __type,
        __arcrole.name() : __arcrole,
        __title.name() : __title,
        __nilReason.name() : __nilReason,
        __role.name() : __role,
        __show.name() : __show,
        __actuate.name() : __actuate
    }
_Namespace_gml.addCategoryObject('typeBinding', u'SingleOperationPropertyType', SingleOperationPropertyType)


# Complex type TypeName_PropertyType with content type ELEMENT_ONLY
class TypeName_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gco, u'TypeName_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gco}TypeName uses Python identifier TypeName
    __TypeName = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'TypeName'), 'TypeName', '__httpwww_isotc211_org2005gco_TypeName_PropertyType_httpwww_isotc211_org2005gcoTypeName', False)

    
    TypeName = property(__TypeName.value, __TypeName.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_isotc211_org2005gco_TypeName_PropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_isotc211_org2005gco_TypeName_PropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_isotc211_org2005gco_TypeName_PropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_isotc211_org2005gco_TypeName_PropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_isotc211_org2005gco_TypeName_PropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute uuidref uses Python identifier uuidref
    __uuidref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uuidref'), 'uuidref', '__httpwww_isotc211_org2005gco_TypeName_PropertyType_uuidref', pyxb.binding.datatypes.string)
    
    uuidref = property(__uuidref.value, __uuidref.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_isotc211_org2005gco_TypeName_PropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_isotc211_org2005gco_TypeName_PropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gco_TypeName_PropertyType_httpwww_isotc211_org2005gconilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)


    _ElementMap = {
        __TypeName.name() : __TypeName
    }
    _AttributeMap = {
        __href.name() : __href,
        __role.name() : __role,
        __show.name() : __show,
        __title.name() : __title,
        __actuate.name() : __actuate,
        __uuidref.name() : __uuidref,
        __type.name() : __type,
        __arcrole.name() : __arcrole,
        __nilReason.name() : __nilReason
    }
_Namespace_gco.addCategoryObject('typeBinding', u'TypeName_PropertyType', TypeName_PropertyType)


# Complex type CTD_ANON_12 with content type ELEMENT_ONLY
class CTD_ANON_12 (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.opengis.net/gml/3.2}Row uses Python identifier Row
    __Row = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'Row'), 'Row', '__httpwww_opengis_netgml3_2_CTD_ANON_12_httpwww_opengis_netgml3_2Row', True)

    
    Row = property(__Row.value, __Row.set, None, None)


    _ElementMap = {
        __Row.name() : __Row
    }
    _AttributeMap = {
        
    }



# Complex type DS_StereoMate_PropertyType with content type ELEMENT_ONLY
class DS_StereoMate_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'DS_StereoMate_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmd}DS_StereoMate uses Python identifier DS_StereoMate
    __DS_StereoMate = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'DS_StereoMate'), 'DS_StereoMate', '__httpwww_isotc211_org2005gmd_DS_StereoMate_PropertyType_httpwww_isotc211_org2005gmdDS_StereoMate', False)

    
    DS_StereoMate = property(__DS_StereoMate.value, __DS_StereoMate.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_isotc211_org2005gmd_DS_StereoMate_PropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_isotc211_org2005gmd_DS_StereoMate_PropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_isotc211_org2005gmd_DS_StereoMate_PropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmd_DS_StereoMate_PropertyType_httpwww_isotc211_org2005gconilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute uuidref uses Python identifier uuidref
    __uuidref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uuidref'), 'uuidref', '__httpwww_isotc211_org2005gmd_DS_StereoMate_PropertyType_uuidref', pyxb.binding.datatypes.string)
    
    uuidref = property(__uuidref.value, __uuidref.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_isotc211_org2005gmd_DS_StereoMate_PropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_isotc211_org2005gmd_DS_StereoMate_PropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_isotc211_org2005gmd_DS_StereoMate_PropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_isotc211_org2005gmd_DS_StereoMate_PropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")


    _ElementMap = {
        __DS_StereoMate.name() : __DS_StereoMate
    }
    _AttributeMap = {
        __type.name() : __type,
        __arcrole.name() : __arcrole,
        __role.name() : __role,
        __nilReason.name() : __nilReason,
        __uuidref.name() : __uuidref,
        __title.name() : __title,
        __show.name() : __show,
        __href.name() : __href,
        __actuate.name() : __actuate
    }
_Namespace_gmd.addCategoryObject('typeBinding', u'DS_StereoMate_PropertyType', DS_StereoMate_PropertyType)


# Complex type UomScale_PropertyType with content type ELEMENT_ONLY
class UomScale_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gco, u'UomScale_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.opengis.net/gml/3.2}UnitDefinition uses Python identifier UnitDefinition
    __UnitDefinition = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'UnitDefinition'), 'UnitDefinition', '__httpwww_isotc211_org2005gco_UomScale_PropertyType_httpwww_opengis_netgml3_2UnitDefinition', False)

    
    UnitDefinition = property(__UnitDefinition.value, __UnitDefinition.set, None, u'A gml:UnitDefinition is a general definition of a unit of measure. This generic element is used only for units for which no relationship with other units or units systems is known.\nThe content model of gml:UnitDefinition adds three additional properties to gml:Definition, gml:quantityType, gml:quantityTypeReference and gml:catalogSymbol.  \nThe gml:catalogSymbol property optionally gives the short symbol used for this unit. This element is usually used when the relationship of this unit to other units or units systems is unknown.')

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_isotc211_org2005gco_UomScale_PropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_isotc211_org2005gco_UomScale_PropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_isotc211_org2005gco_UomScale_PropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_isotc211_org2005gco_UomScale_PropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute uuidref uses Python identifier uuidref
    __uuidref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uuidref'), 'uuidref', '__httpwww_isotc211_org2005gco_UomScale_PropertyType_uuidref', pyxb.binding.datatypes.string)
    
    uuidref = property(__uuidref.value, __uuidref.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_isotc211_org2005gco_UomScale_PropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_isotc211_org2005gco_UomScale_PropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_isotc211_org2005gco_UomScale_PropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gco_UomScale_PropertyType_httpwww_isotc211_org2005gconilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)


    _ElementMap = {
        __UnitDefinition.name() : __UnitDefinition
    }
    _AttributeMap = {
        __type.name() : __type,
        __actuate.name() : __actuate,
        __arcrole.name() : __arcrole,
        __role.name() : __role,
        __uuidref.name() : __uuidref,
        __title.name() : __title,
        __show.name() : __show,
        __href.name() : __href,
        __nilReason.name() : __nilReason
    }
_Namespace_gco.addCategoryObject('typeBinding', u'UomScale_PropertyType', UomScale_PropertyType)


# Complex type RS_ReferenceSystem_PropertyType with content type ELEMENT_ONLY
class RS_ReferenceSystem_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'RS_ReferenceSystem_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmd}AbstractRS_ReferenceSystem uses Python identifier AbstractRS_ReferenceSystem
    __AbstractRS_ReferenceSystem = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'AbstractRS_ReferenceSystem'), 'AbstractRS_ReferenceSystem', '__httpwww_isotc211_org2005gmd_RS_ReferenceSystem_PropertyType_httpwww_isotc211_org2005gmdAbstractRS_ReferenceSystem', False)

    
    AbstractRS_ReferenceSystem = property(__AbstractRS_ReferenceSystem.value, __AbstractRS_ReferenceSystem.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_isotc211_org2005gmd_RS_ReferenceSystem_PropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_isotc211_org2005gmd_RS_ReferenceSystem_PropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_isotc211_org2005gmd_RS_ReferenceSystem_PropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_isotc211_org2005gmd_RS_ReferenceSystem_PropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute uuidref uses Python identifier uuidref
    __uuidref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uuidref'), 'uuidref', '__httpwww_isotc211_org2005gmd_RS_ReferenceSystem_PropertyType_uuidref', pyxb.binding.datatypes.string)
    
    uuidref = property(__uuidref.value, __uuidref.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_isotc211_org2005gmd_RS_ReferenceSystem_PropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_isotc211_org2005gmd_RS_ReferenceSystem_PropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmd_RS_ReferenceSystem_PropertyType_httpwww_isotc211_org2005gconilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_isotc211_org2005gmd_RS_ReferenceSystem_PropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)


    _ElementMap = {
        __AbstractRS_ReferenceSystem.name() : __AbstractRS_ReferenceSystem
    }
    _AttributeMap = {
        __type.name() : __type,
        __show.name() : __show,
        __href.name() : __href,
        __actuate.name() : __actuate,
        __uuidref.name() : __uuidref,
        __arcrole.name() : __arcrole,
        __role.name() : __role,
        __nilReason.name() : __nilReason,
        __title.name() : __title
    }
_Namespace_gmd.addCategoryObject('typeBinding', u'RS_ReferenceSystem_PropertyType', RS_ReferenceSystem_PropertyType)


# Complex type DQ_Scope_PropertyType with content type ELEMENT_ONLY
class DQ_Scope_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'DQ_Scope_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmd}DQ_Scope uses Python identifier DQ_Scope
    __DQ_Scope = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'DQ_Scope'), 'DQ_Scope', '__httpwww_isotc211_org2005gmd_DQ_Scope_PropertyType_httpwww_isotc211_org2005gmdDQ_Scope', False)

    
    DQ_Scope = property(__DQ_Scope.value, __DQ_Scope.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_isotc211_org2005gmd_DQ_Scope_PropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_isotc211_org2005gmd_DQ_Scope_PropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_isotc211_org2005gmd_DQ_Scope_PropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmd_DQ_Scope_PropertyType_httpwww_isotc211_org2005gconilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_isotc211_org2005gmd_DQ_Scope_PropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute uuidref uses Python identifier uuidref
    __uuidref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uuidref'), 'uuidref', '__httpwww_isotc211_org2005gmd_DQ_Scope_PropertyType_uuidref', pyxb.binding.datatypes.string)
    
    uuidref = property(__uuidref.value, __uuidref.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_isotc211_org2005gmd_DQ_Scope_PropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_isotc211_org2005gmd_DQ_Scope_PropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_isotc211_org2005gmd_DQ_Scope_PropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")


    _ElementMap = {
        __DQ_Scope.name() : __DQ_Scope
    }
    _AttributeMap = {
        __type.name() : __type,
        __arcrole.name() : __arcrole,
        __role.name() : __role,
        __nilReason.name() : __nilReason,
        __title.name() : __title,
        __uuidref.name() : __uuidref,
        __show.name() : __show,
        __href.name() : __href,
        __actuate.name() : __actuate
    }
_Namespace_gmd.addCategoryObject('typeBinding', u'DQ_Scope_PropertyType', DQ_Scope_PropertyType)


# Complex type TransformationPropertyType with content type ELEMENT_ONLY
class TransformationPropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'TransformationPropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.opengis.net/gml/3.2}Transformation uses Python identifier Transformation
    __Transformation = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'Transformation'), 'Transformation', '__httpwww_opengis_netgml3_2_TransformationPropertyType_httpwww_opengis_netgml3_2Transformation', False)

    
    Transformation = property(__Transformation.value, __Transformation.set, None, u'gml:Transformation is a concrete object element derived from gml:GeneralTransformation (13.6.2.13).\nThis concrete object can be used for all operation methods, without using a GML Application Schema that defines operation-method-specialized element names and contents, especially for methods with only one Transformation instance.\nThe parameterValue elements are an unordered list of composition associations to the set of parameter values used by this conversion operation.')

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_opengis_netgml3_2_TransformationPropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute {http://www.opengis.net/gml/3.2}remoteSchema uses Python identifier remoteSchema
    __remoteSchema = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'remoteSchema'), 'remoteSchema', '__httpwww_opengis_netgml3_2_TransformationPropertyType_httpwww_opengis_netgml3_2remoteSchema', pyxb.binding.datatypes.anyURI)
    
    remoteSchema = property(__remoteSchema.value, __remoteSchema.set, None, u'')

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_opengis_netgml3_2_TransformationPropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_opengis_netgml3_2_TransformationPropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_opengis_netgml3_2_TransformationPropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'nilReason'), 'nilReason', '__httpwww_opengis_netgml3_2_TransformationPropertyType_nilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_opengis_netgml3_2_TransformationPropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_opengis_netgml3_2_TransformationPropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_opengis_netgml3_2_TransformationPropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")


    _ElementMap = {
        __Transformation.name() : __Transformation
    }
    _AttributeMap = {
        __actuate.name() : __actuate,
        __remoteSchema.name() : __remoteSchema,
        __href.name() : __href,
        __type.name() : __type,
        __title.name() : __title,
        __nilReason.name() : __nilReason,
        __arcrole.name() : __arcrole,
        __role.name() : __role,
        __show.name() : __show
    }
_Namespace_gml.addCategoryObject('typeBinding', u'TransformationPropertyType', TransformationPropertyType)


# Complex type MD_GeometricObjects_PropertyType with content type ELEMENT_ONLY
class MD_GeometricObjects_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_GeometricObjects_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmd}MD_GeometricObjects uses Python identifier MD_GeometricObjects
    __MD_GeometricObjects = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_GeometricObjects'), 'MD_GeometricObjects', '__httpwww_isotc211_org2005gmd_MD_GeometricObjects_PropertyType_httpwww_isotc211_org2005gmdMD_GeometricObjects', False)

    
    MD_GeometricObjects = property(__MD_GeometricObjects.value, __MD_GeometricObjects.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'actuate'), 'actuate', '__httpwww_isotc211_org2005gmd_MD_GeometricObjects_PropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON_2)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'type'), 'type', '__httpwww_isotc211_org2005gmd_MD_GeometricObjects_PropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'arcrole'), 'arcrole', '__httpwww_isotc211_org2005gmd_MD_GeometricObjects_PropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'role'), 'role', '__httpwww_isotc211_org2005gmd_MD_GeometricObjects_PropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute uuidref uses Python identifier uuidref
    __uuidref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uuidref'), 'uuidref', '__httpwww_isotc211_org2005gmd_MD_GeometricObjects_PropertyType_uuidref', pyxb.binding.datatypes.string)
    
    uuidref = property(__uuidref.value, __uuidref.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmd_MD_GeometricObjects_PropertyType_httpwww_isotc211_org2005gconilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'title'), 'title', '__httpwww_isotc211_org2005gmd_MD_GeometricObjects_PropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'show'), 'show', '__httpwww_isotc211_org2005gmd_MD_GeometricObjects_PropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_1)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_xlink, u'href'), 'href', '__httpwww_isotc211_org2005gmd_MD_GeometricObjects_PropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)


    _ElementMap = {
        __MD_GeometricObjects.name() : __MD_GeometricObjects
    }
    _AttributeMap = {
        __actuate.name() : __actuate,
        __type.name() : __type,
        __arcrole.name() : __arcrole,
        __role.name() : __role,
        __uuidref.name() : __uuidref,
        __nilReason.name() : __nilReason,
        __title.name() : __title,
        __show.name() : __show,
        __href.name() : __href
    }
_Namespace_gmd.addCategoryObject('typeBinding', u'MD_GeometricObjects_PropertyType', MD_GeometricObjects_PropertyType)


# Complex type RingPropertyType with content type ELEMENT_ONLY
class RingPropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'RingPropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.opengis.net/gml/3.2}Ring uses Python identifier Ring
    __Ring = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'Ring'), 'Ring', '__httpwww_opengis_netgml3_2_RingPropertyType_httpwww_opengis_netgml3_2Ring', False)

    
    Ring = property(__Ring.value, __Ring.set, None, u'A ring is used to represent a single connected component of a surface boundary as specified in ISO 19107:2003, 6.3.6.\nEvery gml:curveMember references or contains one curve, i.e. any element which is substitutable for gml:AbstractCurve. In the context of a ring, the curves describe the boundary of the surface. The sequence of curves shall be contiguous and connected in a cycle.\nIf provided, the aggregationType attribute shall have the value "sequence".')


    _ElementMap = {
        __Ring.name() : __Ring
    }
    _AttributeMap = {
        
    }
_Namespace_gml.addCategoryObject('typeBinding', u'RingPropertyType', RingPropertyType)


# Complex type CylinderType with content type ELEMENT_ONLY
class CylinderType (AbstractGriddedSurfaceType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gml, u'CylinderType')
    # Base type is AbstractGriddedSurfaceType
    
    # Element rows ({http://www.opengis.net/gml/3.2}rows) inherited from {http://www.opengis.net/gml/3.2}AbstractGriddedSurfaceType
    
    # Attribute aggregationType inherited from {http://www.opengis.net/gml/3.2}AbstractParametricCurveSurfaceType
    
    # Attribute horizontalCurveType uses Python identifier horizontalCurveType
    __horizontalCurveType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'horizontalCurveType'), 'horizontalCurveType', '__httpwww_opengis_netgml3_2_CylinderType_horizontalCurveType', CurveInterpolationType, fixed=True, unicode_default=u'circularArc3Points')
    
    horizontalCurveType = property(__horizontalCurveType.value, __horizontalCurveType.set, None, None)

    
    # Attribute columns inherited from {http://www.opengis.net/gml/3.2}AbstractGriddedSurfaceType
    
    # Attribute verticalCurveType uses Python identifier verticalCurveType
    __verticalCurveType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'verticalCurveType'), 'verticalCurveType', '__httpwww_opengis_netgml3_2_CylinderType_verticalCurveType', CurveInterpolationType, fixed=True, unicode_default=u'linear')
    
    verticalCurveType = property(__verticalCurveType.value, __verticalCurveType.set, None, None)

    
    # Attribute rows_ inherited from {http://www.opengis.net/gml/3.2}AbstractGriddedSurfaceType

    _ElementMap = AbstractGriddedSurfaceType._ElementMap.copy()
    _ElementMap.update({
        
    })
    _AttributeMap = AbstractGriddedSurfaceType._AttributeMap.copy()
    _AttributeMap.update({
        __horizontalCurveType.name() : __horizontalCurveType,
        __verticalCurveType.name() : __verticalCurveType
    })
_Namespace_gml.addCategoryObject('typeBinding', u'CylinderType', CylinderType)


# Complex type CTD_ANON_13 with content type ELEMENT_ONLY
class CTD_ANON_13 (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.opengis.net/gml/3.2}AffinePlacement uses Python identifier AffinePlacement
    __AffinePlacement = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gml, u'AffinePlacement'), 'AffinePlacement', '__httpwww_opengis_netgml3_2_CTD_ANON_13_httpwww_opengis_netgml3_2AffinePlacement', False)

    
    AffinePlacement = property(__AffinePlacement.value, __AffinePlacement.set, None, u'location, refDirection, inDimension and outDimension have the same meaning as specified in ISO 19107:2003, 6.4.21.')


    _ElementMap = {
        __AffinePlacement.name() : __AffinePlacement
    }
    _AttributeMap = {
        
    }



# Complex type LanguageCode_PropertyType with content type ELEMENT_ONLY
class LanguageCode_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_gmd, u'LanguageCode_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmd}LanguageCode uses Python identifier LanguageCode
    __LanguageCode = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_gmd, u'LanguageCode'), 'LanguageCode', '__httpwww_isotc211_org2005gmd_LanguageCode_PropertyType_httpwww_isotc211_org2005gmdLanguageCode', False)

    
    LanguageCode = property(__LanguageCode.value, __LanguageCode.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gco, u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmd_LanguageCode_PropertyType_httpwww_isotc211_org2005gconilReason', NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)


    _ElementMap = {
        __LanguageCode.name() : __LanguageCode
    }
    _AttributeMap = {
        __nilReason.name() : __nilReason
    }
_Namespace_gmd.addCategoryObject('typeBinding', u'LanguageCode_PropertyType', LanguageCode_PropertyType)


Triangle = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'Triangle'), TriangleType, documentation=u'gml:Triangle represents a triangle as a surface patch with an outer boundary consisting of a linear ring. Note that this is a polygon (subtype) with no inner boundaries. The number of points in the linear ring shall be four.\nThe ring (element exterior) shall be a gml:LinearRing and shall form a triangle, the first and the last position shall be coincident.\ninterpolation is fixed to "planar", i.e. an interpolation shall return points on a single plane. The boundary of the patch shall be contained within that plane.')
_Namespace_gml.addCategoryObject('elementBinding', Triangle.name().localName(), Triangle)

DateTime = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gco, u'DateTime'), pyxb.binding.datatypes.dateTime)
_Namespace_gco.addCategoryObject('elementBinding', DateTime.name().localName(), DateTime)

generalTransformationRef = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'generalTransformationRef'), GeneralTransformationPropertyType, documentation=u'')
_Namespace_gml.addCategoryObject('elementBinding', generalTransformationRef.name().localName(), generalTransformationRef)

directedNode = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'directedNode'), DirectedNodePropertyType, documentation=u'A gml:directedNode property element describes the boundary of topology edges and is used in the support of topological point features via the gml:TopoPoint expression, see below. The orientation attribute of type gml:SignType expresses the sense in which the included node is used: start ("-") or end ("+") node.')
_Namespace_gml.addCategoryObject('elementBinding', directedNode.name().localName(), directedNode)

Face = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'Face'), FaceType, documentation=u'gml:Face represents the 2-dimensional topology primitive.\nThe topological boundary of a face (gml:directedEdge) consists of a sequence of directed edges. If provided, the aggregationType attribute shall have the value "sequence".\nThe optional coboundary of a face (gml:directedTopoSolid) is a pair of directed solids which are bounded by this face. A positively directed solid corresponds to a solid which lies in the direction of the negatively directed normal to the face in any geometric realisation. \nA face may optionally be realised by a 2-dimensional geometric primitive (gml:surfaceProperty).')
_Namespace_gml.addCategoryObject('elementBinding', Face.name().localName(), Face)

usesAxis = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'usesAxis'), CoordinateSystemAxisPropertyType, documentation=u'')
_Namespace_gml.addCategoryObject('elementBinding', usesAxis.name().localName(), usesAxis)

AbstractTopoPrimitive = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractTopoPrimitive'), AbstractTopoPrimitiveType, abstract=pyxb.binding.datatypes.boolean(1), documentation=u'gml:AbstractTopoPrimitive acts as the base type for all topological primitives. Topology primitives are the atomic (smallest possible) units of a topology complex. \nEach topology primitive may contain references to other topology primitives of codimension 2 or more (gml:isolated). Conversely, nodes may have faces as containers and nodes and edges may have solids as containers (gml:container).')
_Namespace_gml.addCategoryObject('elementBinding', AbstractTopoPrimitive.name().localName(), AbstractTopoPrimitive)

ImageCRS = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'ImageCRS'), ImageCRSType, documentation=u'gml:ImageCRS is an engineering coordinate reference system applied to locations in images. Image coordinate reference systems are treated as a separate sub-type because the definition of the associated image datum contains two attributes not relevant to other engineering datums.')
_Namespace_gml.addCategoryObject('elementBinding', ImageCRS.name().localName(), ImageCRS)

conversionRef = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'conversionRef'), ConversionPropertyType, documentation=u'')
_Namespace_gml.addCategoryObject('elementBinding', conversionRef.name().localName(), conversionRef)

usesTimeCS = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'usesTimeCS'), TimeCSPropertyType, documentation=u'')
_Namespace_gml.addCategoryObject('elementBinding', usesTimeCS.name().localName(), usesTimeCS)

AbstractTimeSlice = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractTimeSlice'), AbstractTimeSliceType, abstract=pyxb.binding.datatypes.boolean(1), documentation=u'To describe an event \u2014 an action that occurs at an instant or over an interval of time \u2014 GML provides the gml:AbtractTimeSlice element. A timeslice encapsulates the time-varying properties of a dynamic feature -- it shall be extended to represent a time stamped projection of a specific feature. The gml:dataSource property describes how the temporal data was acquired.\nA gml:AbstractTimeSlice instance is a GML object that encapsulates updates of the dynamic\u2014or volatile\u2014properties that reflect some change event; it thus includes only those feature properties that have actually changed due to some process.\ngml:AbstractTimeSlice basically provides a facility for attribute-level time stamping, in contrast to the object-level time stamping of dynamic feature instances. \nThe time slice can thus be viewed as event or process-oriented, whereas a snapshot is more state or structure-oriented. A timeslice has richer causality, whereas a snapshot merely portrays the status of the whole. \n')
_Namespace_gml.addCategoryObject('elementBinding', AbstractTimeSlice.name().localName(), AbstractTimeSlice)

usesValue = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'usesValue'), AbstractGeneralParameterValuePropertyType, documentation=u'')
_Namespace_gml.addCategoryObject('elementBinding', usesValue.name().localName(), usesValue)

coverageFunction = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'coverageFunction'), CoverageFunctionType, documentation=u'The gml:coverageFunction property describes the mapping function from the domain to the range of the coverage.\nThe value of the CoverageFunction is one of gml:CoverageMappingRule and gml:GridFunction.\nIf the gml:coverageFunction property is omitted for a gridded coverage (including rectified gridded coverages) the gml:startPoint is assumed to be the value of the gml:low property in the gml:Grid geometry, and the gml:sequenceRule is assumed to be linear and the gml:axisOrder property is assumed to be "+1 +2".')
_Namespace_gml.addCategoryObject('elementBinding', coverageFunction.name().localName(), coverageFunction)

CategoryList = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'CategoryList'), CodeOrNilReasonListType)
_Namespace_gml.addCategoryObject('elementBinding', CategoryList.name().localName(), CategoryList)

AffineCS = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'AffineCS'), AffineCSType, documentation=u'gml:AffineCS is a two- or three-dimensional coordinate system with straight axes that are not necessarily orthogonal. An AffineCS shall have two or three gml:axis property elements; the number of property elements shall equal the dimension of the CS.')
_Namespace_gml.addCategoryObject('elementBinding', AffineCS.name().localName(), AffineCS)

PolarCS = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'PolarCS'), PolarCSType, documentation=u'gml:PolarCS ia s two-dimensional coordinate system in which position is specified by the distance from the origin and the angle between the line from the origin to a point and a reference direction. A PolarCS shall have two gml:axis property elements.')
_Namespace_gml.addCategoryObject('elementBinding', PolarCS.name().localName(), PolarCS)

priorityLocation = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'priorityLocation'), PriorityLocationPropertyType, documentation=u'')
_Namespace_gml.addCategoryObject('elementBinding', priorityLocation.name().localName(), priorityLocation)

interior = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'interior'), AbstractRingPropertyType, documentation=u'A boundary of a surface consists of a number of rings. The "interior" rings separate the surface / surface patch from the area enclosed by the rings.')
_Namespace_gml.addCategoryObject('elementBinding', interior.name().localName(), interior)

multiSurfaceProperty = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'multiSurfaceProperty'), MultiSurfacePropertyType, documentation=u'')
_Namespace_gml.addCategoryObject('elementBinding', multiSurfaceProperty.name().localName(), multiSurfaceProperty)

multiExtentOf = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'multiExtentOf'), MultiSurfacePropertyType, documentation=u'')
_Namespace_gml.addCategoryObject('elementBinding', multiExtentOf.name().localName(), multiExtentOf)

OffsetCurve = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'OffsetCurve'), OffsetCurveType, documentation=u'An offset curve is a curve at a constant distance from the basis curve. offsetBase is the base curve from which this curve is defined as an offset. distance and refDirection have the same meaning as specified in ISO 19107:2003, 6.4.23.\nThe content model follows the general pattern for the encoding of curve segments.')
_Namespace_gml.addCategoryObject('elementBinding', OffsetCurve.name().localName(), OffsetCurve)

AbstractContinuousCoverage = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractContinuousCoverage'), AbstractContinuousCoverageType, abstract=pyxb.binding.datatypes.boolean(1), documentation=u'A continuous coverage as defined in ISO 19123 is a coverage that can return different values for the same feature attribute at different direct positions within a single spatiotemporal object in its spatiotemporal domain. The base type for continuous coverages is AbstractContinuousCoverageType.\nThe coverageFunction element describes the mapping function. \nThe abstract element gml:AbstractContinuousCoverage serves as the head of a substitution group which may contain any continuous coverage whose type is derived from gml:AbstractContinuousCoverageType.')
_Namespace_gml.addCategoryObject('elementBinding', AbstractContinuousCoverage.name().localName(), AbstractContinuousCoverage)

DQ_AccuracyOfATimeMeasurement = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'DQ_AccuracyOfATimeMeasurement'), DQ_AccuracyOfATimeMeasurement_Type)
_Namespace_gmd.addCategoryObject('elementBinding', DQ_AccuracyOfATimeMeasurement.name().localName(), DQ_AccuracyOfATimeMeasurement)

usesEllipsoidalCS = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'usesEllipsoidalCS'), EllipsoidalCSPropertyType, documentation=u'')
_Namespace_gml.addCategoryObject('elementBinding', usesEllipsoidalCS.name().localName(), usesEllipsoidalCS)

MD_GeometricObjects = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_GeometricObjects'), MD_GeometricObjects_Type)
_Namespace_gmd.addCategoryObject('elementBinding', MD_GeometricObjects.name().localName(), MD_GeometricObjects)

timeCS = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'timeCS'), TimeCSPropertyType, documentation=u'gml:timeCS is an association role to the time coordinate system used by this CRS.')
_Namespace_gml.addCategoryObject('elementBinding', timeCS.name().localName(), timeCS)

DirectedObservationAtDistance = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'DirectedObservationAtDistance'), DirectedObservationAtDistanceType, documentation=u'gml:DirectedObservationAtDistance adds an additional distance property. This is the distance from the observer to the subject of the observation. Clearly this applies only to certain types of observations such as visual observations by people, or observations obtained from terrestrial cameras.')
_Namespace_gml.addCategoryObject('elementBinding', DirectedObservationAtDistance.name().localName(), DirectedObservationAtDistance)

TimeTopologyComplex = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'TimeTopologyComplex'), TimeTopologyComplexType, documentation=u'A temporal topology complex shall be the connected acyclic directed graph composed of temporal topological primitives, i.e. time nodes and time edges. Because a time edge may not exist without two time nodes on its boundaries, static features have time edges from a temporal topology complex as the values of their temporal properties, regardless of explicit declarations.\nA temporal topology complex expresses a linear or a non-linear graph. A temporal linear graph, composed of a sequence of time edges, provides a lineage described only by "substitution" of feature instances or feature element values. A time node as the start or the end of the graph connects with at least one time edge. A time node other than the start and the end shall connect to at least two time edges: one of starting from the node, and another ending at the node.\nA temporal topological complex is a set of connected temporal topological primitives. The member primtives are indicated, either by reference or by value, using the primitive property.')
_Namespace_gml.addCategoryObject('elementBinding', TimeTopologyComplex.name().localName(), TimeTopologyComplex)

DQ_CompletenessCommission = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'DQ_CompletenessCommission'), DQ_CompletenessCommission_Type)
_Namespace_gmd.addCategoryObject('elementBinding', DQ_CompletenessCommission.name().localName(), DQ_CompletenessCommission)

operationRef = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'operationRef'), OperationPropertyType, documentation=u'')
_Namespace_gml.addCategoryObject('elementBinding', operationRef.name().localName(), operationRef)

engineeringDatum = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'engineeringDatum'), EngineeringDatumPropertyType, documentation=u'gml:engineeringDatum is an association role to the engineering datum used by this CRS.')
_Namespace_gml.addCategoryObject('elementBinding', engineeringDatum.name().localName(), engineeringDatum)

MovingObjectStatus = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'MovingObjectStatus'), MovingObjectStatusType, documentation=u'')
_Namespace_gml.addCategoryObject('elementBinding', MovingObjectStatus.name().localName(), MovingObjectStatus)

domainOfValidity = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'domainOfValidity'), CTD_ANON_1, documentation=u'The gml:domainOfValidity property implements an association role to an EX_Extent object as encoded in ISO/TS 19139, either referencing or containing the definition of that extent.')
_Namespace_gml.addCategoryObject('elementBinding', domainOfValidity.name().localName(), domainOfValidity)

imageDatum = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'imageDatum'), ImageDatumPropertyType, documentation=u'gml:imageDatum is an association role to the image datum used by this CRS.')
_Namespace_gml.addCategoryObject('elementBinding', imageDatum.name().localName(), imageDatum)

curveMembers = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'curveMembers'), CurveArrayPropertyType, documentation=u'This property element contains a list of curves. The order of the elements is significant and shall be preserved when processing the array.')
_Namespace_gml.addCategoryObject('elementBinding', curveMembers.name().localName(), curveMembers)

AbstractSingleOperation = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractSingleOperation'), AbstractCoordinateOperationType, abstract=pyxb.binding.datatypes.boolean(1), documentation=u'gml:AbstractSingleOperation is a single (not concatenated) coordinate operation.')
_Namespace_gml.addCategoryObject('elementBinding', AbstractSingleOperation.name().localName(), AbstractSingleOperation)

imageDatumRef = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'imageDatumRef'), ImageDatumPropertyType, documentation=u'')
_Namespace_gml.addCategoryObject('elementBinding', imageDatumRef.name().localName(), imageDatumRef)

ellipsoidalCS = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'ellipsoidalCS'), EllipsoidalCSPropertyType, documentation=u'gml:ellipsoidalCS is an association role to the ellipsoidal coordinate system used by this CRS.')
_Namespace_gml.addCategoryObject('elementBinding', ellipsoidalCS.name().localName(), ellipsoidalCS)

MD_ImagingConditionCode = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_ImagingConditionCode'), CodeListValue_Type)
_Namespace_gmd.addCategoryObject('elementBinding', MD_ImagingConditionCode.name().localName(), MD_ImagingConditionCode)

AbstractFeatureCollection = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractFeatureCollection'), AbstractFeatureCollectionType, abstract=pyxb.binding.datatypes.boolean(1), documentation=u'')
_Namespace_gml.addCategoryObject('elementBinding', AbstractFeatureCollection.name().localName(), AbstractFeatureCollection)

AbstractScalarValueList = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractScalarValueList'), pyxb.binding.datatypes.anyType, abstract=pyxb.binding.datatypes.boolean(1), documentation=u'gml:AbstractScalarValueList is an abstract element which acts as the head of a substitution group which contains gml:BooleanList, gml:CategoryList, gml:CountList and gml:QuantityList, and (transitively) the elements in their substitution groups.')
_Namespace_gml.addCategoryObject('elementBinding', AbstractScalarValueList.name().localName(), AbstractScalarValueList)

Edge = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'Edge'), EdgeType, documentation=u'gml:Edge represents the 1-dimensional primitive.\nThe topological boundary of an Edge (gml:directedNode) consists of a negatively directed start Node and a positively directed end Node.   \nThe optional coboundary of an edge (gml:directedFace) is a circular sequence of directed faces which are incident on this edge in document order. In the 2D case, the orientation of the face on the left of the edge is "+"; the orientation of the face on the right on its right is "-". \nIf provided, the aggregationType attribute shall have the value "sequence".\nAn edge may optionally be realised by a 1-dimensional geometric primitive (gml:curveProperty).')
_Namespace_gml.addCategoryObject('elementBinding', Edge.name().localName(), Edge)

operationVersion = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'operationVersion'), pyxb.binding.datatypes.string, documentation=u'gml:operationVersion is the version of the coordinate transformation (i.e., instantiation due to the stochastic nature of the parameters). Mandatory when describing a transformation, and should not be supplied for a conversion.')
_Namespace_gml.addCategoryObject('elementBinding', operationVersion.name().localName(), operationVersion)

GridCoverage = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'GridCoverage'), DiscreteCoverageType, documentation=u'A gml:GriddedCoverage is a discrete point coverage in which the domain set is a geometric grid of points.\nNote that this is the same as the gml:MultiPointCoverage except that we have a gml:Grid to describe the domain.\nThe simple gridded coverage is not geometrically referenced and hence no geometric positions are assignable to the points in the grid. Such geometric positioning is introduced in the gml:RectifiedGridCoverage.')
_Namespace_gml.addCategoryObject('elementBinding', GridCoverage.name().localName(), GridCoverage)

AbstractEX_GeographicExtent = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'AbstractEX_GeographicExtent'), AbstractEX_GeographicExtent_Type, abstract=pyxb.binding.datatypes.boolean(1))
_Namespace_gmd.addCategoryObject('elementBinding', AbstractEX_GeographicExtent.name().localName(), AbstractEX_GeographicExtent)

rangeParameters = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'rangeParameters'), AssociationRoleType)
_Namespace_gml.addCategoryObject('elementBinding', rangeParameters.name().localName(), rangeParameters)

SphericalCS = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'SphericalCS'), SphericalCSType, documentation=u'gml:SphericalCS is a three-dimensional coordinate system with one distance measured from the origin and two angular coordinates. A SphericalCS shall have three gml:axis property elements.')
_Namespace_gml.addCategoryObject('elementBinding', SphericalCS.name().localName(), SphericalCS)

usesObliqueCartesianCS = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'usesObliqueCartesianCS'), ObliqueCartesianCSPropertyType, documentation=u'')
_Namespace_gml.addCategoryObject('elementBinding', usesObliqueCartesianCS.name().localName(), usesObliqueCartesianCS)

EnvelopeWithTimePeriod = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'EnvelopeWithTimePeriod'), EnvelopeWithTimePeriodType, documentation=u'gml:EnvelopeWithTimePeriod is provided for envelopes that include a temporal extent. It adds two time position properties, gml:beginPosition and gml:endPosition, which describe the extent of a time-envelope.  \nSince gml:EnvelopeWithTimePeriod is assigned to the substitution group headed by gml:Envelope, it may be used whenever gml:Envelope is valid.')
_Namespace_gml.addCategoryObject('elementBinding', EnvelopeWithTimePeriod.name().localName(), EnvelopeWithTimePeriod)

TemporalDatum = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'TemporalDatum'), TemporalDatumType, documentation=u'A gml:TemporalDatum defines the origin of a Temporal Reference System. This type omits the "anchorDefinition" and "realizationEpoch" elements and adds the "origin" element with the dateTime type.')
_Namespace_gml.addCategoryObject('elementBinding', TemporalDatum.name().localName(), TemporalDatum)

UnlimitedInteger = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gco, u'UnlimitedInteger'), UnlimitedInteger_Type, nillable=pyxb.binding.datatypes.boolean(1))
_Namespace_gco.addCategoryObject('elementBinding', UnlimitedInteger.name().localName(), UnlimitedInteger)

LocationString = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'LocationString'), StringOrRefType, documentation=u'')
_Namespace_gml.addCategoryObject('elementBinding', LocationString.name().localName(), LocationString)

AffinePlacement = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'AffinePlacement'), AffinePlacementType, documentation=u'location, refDirection, inDimension and outDimension have the same meaning as specified in ISO 19107:2003, 6.4.21.')
_Namespace_gml.addCategoryObject('elementBinding', AffinePlacement.name().localName(), AffinePlacement)

TimeCoordinateSystem = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'TimeCoordinateSystem'), TimeCoordinateSystemType, documentation=u'A temporal coordinate system shall be based on a continuous interval scale defined in terms of a single time interval.\nThe differences to ISO 19108 TM_CoordinateSystem are:\n-\tthe origin is specified either using the property gml:originPosition whose value is a direct time position, or using the property gml:origin whose model is gml:TimeInstantPropertyType; this permits more flexibility in representation and also supports referring to a value fixed elsewhere;\n-\tthe interval uses gml:TimeIntervalLengthType.\n')
_Namespace_gml.addCategoryObject('elementBinding', TimeCoordinateSystem.name().localName(), TimeCoordinateSystem)

multiPointProperty = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'multiPointProperty'), MultiPointPropertyType, documentation=u'')
_Namespace_gml.addCategoryObject('elementBinding', multiPointProperty.name().localName(), multiPointProperty)

multiEdgeOf = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'multiEdgeOf'), MultiCurvePropertyType, documentation=u'')
_Namespace_gml.addCategoryObject('elementBinding', multiEdgeOf.name().localName(), multiEdgeOf)

AbstractImplicitGeometry = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractImplicitGeometry'), AbstractGeometryType, abstract=pyxb.binding.datatypes.boolean(1))
_Namespace_gml.addCategoryObject('elementBinding', AbstractImplicitGeometry.name().localName(), AbstractImplicitGeometry)

solidMembers = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'solidMembers'), SolidArrayPropertyType, documentation=u'This property element contains a list of solids. The order of the elements is significant and shall be preserved when processing the array.')
_Namespace_gml.addCategoryObject('elementBinding', solidMembers.name().localName(), solidMembers)

method = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'method'), OperationMethodPropertyType, documentation=u'gml:method is an association role to the operation method used by a coordinate operation.')
_Namespace_gml.addCategoryObject('elementBinding', method.name().localName(), method)

BaseUnit = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'BaseUnit'), BaseUnitType, documentation=u'A base unit is a unit of measure that cannot be derived by combination of other base units within a particular system of units.  For example, in the SI system of units, the base units are metre, kilogram, second, Ampere, Kelvin, mole, and candela, for the physical quantity types length, mass, time interval, electric current, thermodynamic temperature, amount of substance and luminous intensity, respectively.\ngml:BaseUnit extends generic gml:UnitDefinition with the property gml:unitsSystem, which carries a reference to the units system to which this base unit is asserted to belong.  ')
_Namespace_gml.addCategoryObject('elementBinding', BaseUnit.name().localName(), BaseUnit)

CI_Address = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'CI_Address'), CI_Address_Type)
_Namespace_gmd.addCategoryObject('elementBinding', CI_Address.name().localName(), CI_Address)

geodeticDatum = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'geodeticDatum'), GeodeticDatumPropertyType, documentation=u'gml:geodeticDatum is an association role to the geodetic datum used by this CRS.\n')
_Namespace_gml.addCategoryObject('elementBinding', geodeticDatum.name().localName(), geodeticDatum)

featureMember = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'featureMember'), FeaturePropertyType, documentation=u'')
_Namespace_gml.addCategoryObject('elementBinding', featureMember.name().localName(), featureMember)

AbstractDQ_LogicalConsistency = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'AbstractDQ_LogicalConsistency'), AbstractDQ_LogicalConsistency_Type, abstract=pyxb.binding.datatypes.boolean(1))
_Namespace_gmd.addCategoryObject('elementBinding', AbstractDQ_LogicalConsistency.name().localName(), AbstractDQ_LogicalConsistency)

CoordinateSystemAxis = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'CoordinateSystemAxis'), CoordinateSystemAxisType, documentation=u'gml:CoordinateSystemAxis is a definition of a coordinate system axis.')
_Namespace_gml.addCategoryObject('elementBinding', CoordinateSystemAxis.name().localName(), CoordinateSystemAxis)

TopoCurve = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'TopoCurve'), TopoCurveType, documentation=u'gml:TopoCurve represents a homogeneous topological expression, a sequence of directed edges, which if realised are isomorphic to a geometric curve primitive. The intended use of gml:TopoCurve is to appear within a line feature to express the structural and geometric relationships of this feature to other features via the shared edge definitions.\nIf provided, the aggregationType attribute shall have the value "sequence".')
_Namespace_gml.addCategoryObject('elementBinding', TopoCurve.name().localName(), TopoCurve)

includesSingleCRS = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'includesSingleCRS'), SingleCRSPropertyType, documentation=u'')
_Namespace_gml.addCategoryObject('elementBinding', includesSingleCRS.name().localName(), includesSingleCRS)

DQ_FormatConsistency = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'DQ_FormatConsistency'), DQ_FormatConsistency_Type)
_Namespace_gmd.addCategoryObject('elementBinding', DQ_FormatConsistency.name().localName(), DQ_FormatConsistency)

PolygonPatch = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'PolygonPatch'), PolygonPatchType, documentation=u'A gml:PolygonPatch is a surface patch that is defined by a set of boundary curves and an underlying surface to which these curves adhere. The curves shall be coplanar and the polygon uses planar interpolation in its interior. \ninterpolation is fixed to "planar", i.e. an interpolation shall return points on a single plane. The boundary of the patch shall be contained within that plane.')
_Namespace_gml.addCategoryObject('elementBinding', PolygonPatch.name().localName(), PolygonPatch)

AbstractGeometricAggregate = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractGeometricAggregate'), AbstractGeometricAggregateType, abstract=pyxb.binding.datatypes.boolean(1), documentation=u'gml:AbstractGeometricAggregate is the abstract head of the substitution group for all geometric aggregates.')
_Namespace_gml.addCategoryObject('elementBinding', AbstractGeometricAggregate.name().localName(), AbstractGeometricAggregate)

abstractAssociationRole = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'abstractAssociationRole'), AssociationRoleType, abstract=pyxb.binding.datatypes.boolean(1), documentation=u'Applying this pattern shall restrict the multiplicity of objects in a property element using this content model to exactly one. An instance of this type shall contain an element representing an object, or serve as a pointer to a remote object.\nApplying the pattern to define an application schema specific property type allows to restrict\n-\tthe inline object to specified object types, \n-\tthe encoding to "by-reference only" (see 7.2.3.7),\n-\tthe encoding to "inline only" (see 7.2.3.8).')
_Namespace_gml.addCategoryObject('elementBinding', abstractAssociationRole.name().localName(), abstractAssociationRole)

EX_SpatialTemporalExtent = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'EX_SpatialTemporalExtent'), EX_SpatialTemporalExtent_Type)
_Namespace_gmd.addCategoryObject('elementBinding', EX_SpatialTemporalExtent.name().localName(), EX_SpatialTemporalExtent)

polarCS = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'polarCS'), PolarCSPropertyType, documentation=u'gml:polarCS is an association role to the polar coordinate system used by this CRS.')
_Namespace_gml.addCategoryObject('elementBinding', polarCS.name().localName(), polarCS)

AbstractDQ_Result = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'AbstractDQ_Result'), AbstractDQ_Result_Type, abstract=pyxb.binding.datatypes.boolean(1))
_Namespace_gmd.addCategoryObject('elementBinding', AbstractDQ_Result.name().localName(), AbstractDQ_Result)

cylindricalCSRef = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'cylindricalCSRef'), CylindricalCSPropertyType, documentation=u'')
_Namespace_gml.addCategoryObject('elementBinding', cylindricalCSRef.name().localName(), cylindricalCSRef)

AbstractCoverage = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractCoverage'), AbstractCoverageType, abstract=pyxb.binding.datatypes.boolean(1), documentation=u'This element serves as the head of a substitution group which may contain any coverage whose type is derived from gml:AbstractCoverageType.  It may act as a variable in the definition of content models where it is required to permit any coverage to be valid.')
_Namespace_gml.addCategoryObject('elementBinding', AbstractCoverage.name().localName(), AbstractCoverage)

ConcatenatedOperation = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'ConcatenatedOperation'), ConcatenatedOperationType)
_Namespace_gml.addCategoryObject('elementBinding', ConcatenatedOperation.name().localName(), ConcatenatedOperation)

DQ_DomainConsistency = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'DQ_DomainConsistency'), DQ_DomainConsistency_Type)
_Namespace_gmd.addCategoryObject('elementBinding', DQ_DomainConsistency.name().localName(), DQ_DomainConsistency)

operationParameterGroupRef = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'operationParameterGroupRef'), OperationParameterPropertyType, documentation=u'')
_Namespace_gml.addCategoryObject('elementBinding', operationParameterGroupRef.name().localName(), operationParameterGroupRef)

MD_Georectified = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_Georectified'), MD_Georectified_Type)
_Namespace_gmd.addCategoryObject('elementBinding', MD_Georectified.name().localName(), MD_Georectified)

DQ_DataQuality = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'DQ_DataQuality'), DQ_DataQuality_Type)
_Namespace_gmd.addCategoryObject('elementBinding', DQ_DataQuality.name().localName(), DQ_DataQuality)

MD_CharacterSetCode = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_CharacterSetCode'), CodeListValue_Type)
_Namespace_gmd.addCategoryObject('elementBinding', MD_CharacterSetCode.name().localName(), MD_CharacterSetCode)

DirectedObservation = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'DirectedObservation'), DirectedObservationType, documentation=u'A gml:DirectedObservation is the same as an observation except that it adds an additional gml:direction property. This is the direction in which the observation was acquired. Clearly this applies only to certain types of observations such as visual observations by people, or observations obtained from terrestrial cameras.')
_Namespace_gml.addCategoryObject('elementBinding', DirectedObservation.name().localName(), DirectedObservation)

DQ_EvaluationMethodTypeCode = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'DQ_EvaluationMethodTypeCode'), CodeListValue_Type)
_Namespace_gmd.addCategoryObject('elementBinding', DQ_EvaluationMethodTypeCode.name().localName(), DQ_EvaluationMethodTypeCode)

GeodeticDatum = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'GeodeticDatum'), GeodeticDatumType, documentation=u'gml:GeodeticDatum is a geodetic datum defines the precise location and orientation in 3-dimensional space of a defined ellipsoid (or sphere), or of a Cartesian coordinate system centered in this ellipsoid (or sphere).')
_Namespace_gml.addCategoryObject('elementBinding', GeodeticDatum.name().localName(), GeodeticDatum)

topoVolumeProperty = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'topoVolumeProperty'), TopoVolumePropertyType, documentation=u'The gml:topoVolumeProperty element may be used in features to express their relationship to the referenced topology volume.')
_Namespace_gml.addCategoryObject('elementBinding', topoVolumeProperty.name().localName(), topoVolumeProperty)

curveProperty = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'curveProperty'), CurvePropertyType, documentation=u'This property element either references a curve via the XLink-attributes or contains the curve element. curveProperty is the predefined property which may be used by GML Application Schemas whenever a GML feature has a property with a value that is substitutable for AbstractCurve.')
_Namespace_gml.addCategoryObject('elementBinding', curveProperty.name().localName(), curveProperty)

MD_ImageDescription = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_ImageDescription'), MD_ImageDescription_Type)
_Namespace_gmd.addCategoryObject('elementBinding', MD_ImageDescription.name().localName(), MD_ImageDescription)

DQ_QuantitativeResult = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'DQ_QuantitativeResult'), DQ_QuantitativeResult_Type)
_Namespace_gmd.addCategoryObject('elementBinding', DQ_QuantitativeResult.name().localName(), DQ_QuantitativeResult)

GenericMetaData = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'GenericMetaData'), GenericMetaDataType, documentation=u'')
_Namespace_gml.addCategoryObject('elementBinding', GenericMetaData.name().localName(), GenericMetaData)

PT_Locale = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'PT_Locale'), PT_Locale_Type)
_Namespace_gmd.addCategoryObject('elementBinding', PT_Locale.name().localName(), PT_Locale)

CylindricalCS = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'CylindricalCS'), CylindricalCSType, documentation=u'gml:CylindricalCS is a three-dimensional coordinate system consisting of a polar coordinate system extended by a straight coordinate axis perpendicular to the plane spanned by the polar coordinate system. A CylindricalCS shall have three gml:axis property elements.')
_Namespace_gml.addCategoryObject('elementBinding', CylindricalCS.name().localName(), CylindricalCS)

MD_GridSpatialRepresentation = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_GridSpatialRepresentation'), MD_GridSpatialRepresentation_Type)
_Namespace_gmd.addCategoryObject('elementBinding', MD_GridSpatialRepresentation.name().localName(), MD_GridSpatialRepresentation)

Sphere = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'Sphere'), SphereType)
_Namespace_gml.addCategoryObject('elementBinding', Sphere.name().localName(), Sphere)

EX_TemporalExtent = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'EX_TemporalExtent'), EX_TemporalExtent_Type)
_Namespace_gmd.addCategoryObject('elementBinding', EX_TemporalExtent.name().localName(), EX_TemporalExtent)

statusReference = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'statusReference'), ReferenceType, documentation=u'')
_Namespace_gml.addCategoryObject('elementBinding', statusReference.name().localName(), statusReference)

multiPosition = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'multiPosition'), MultiPointPropertyType, documentation=u'')
_Namespace_gml.addCategoryObject('elementBinding', multiPosition.name().localName(), multiPosition)

MultiSolid = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'MultiSolid'), MultiSolidType, documentation=u'A gml:MultiSolid is defined by one or more gml:AbstractSolids.\nThe members of the geometric aggregate may be specified either using the "standard" property (gml:solidMember) or the array property (gml:solidMembers). It is also valid to use both the "standard" and the array properties in the same collection.')
_Namespace_gml.addCategoryObject('elementBinding', MultiSolid.name().localName(), MultiSolid)

ArcStringByBulge = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'ArcStringByBulge'), ArcStringByBulgeType, documentation=u'This variant of the arc computes the mid points of the arcs instead of storing the coordinates directly. The control point sequence consists of the start and end points of each arc plus the bulge (see ISO 19107:2003, 6.4.17.2). The normal is a vector normal (perpendicular) to the chord of the arc (see ISO 19107:2003, 6.4.17.4).\nThe interpolation is fixed as "circularArc2PointWithBulge".\nThe number of arcs in the arc string may be explicitly stated in the attribute numArc. The number of control points in the arc string shall be numArc + 1.\nThe content model follows the general pattern for the encoding of curve segments.')
_Namespace_gml.addCategoryObject('elementBinding', ArcStringByBulge.name().localName(), ArcStringByBulge)

Dictionary = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'Dictionary'), DictionaryType, documentation=u'Sets of definitions may be collected into dictionaries or collections.\nA gml:Dictionary is a non-abstract collection of definitions.\nThe gml:Dictionary content model adds a list of gml:dictionaryEntry properties that contain or reference gml:Definition objects.  A database handle (gml:id attribute) is required, in order that this collection may be referred to. The standard gml:identifier, gml:description, gml:descriptionReference and gml:name properties are available to reference or contain more information about this dictionary. The gml:description and gml:descriptionReference property elements may be used for a description of this dictionary. The derived gml:name element may be used for the name(s) of this dictionary. for remote definiton references gml:dictionaryEntry shall be used. If a Definition object contained within a Dictionary uses the descriptionReference property to refer to a remote definition, then this enables the inclusion of a remote definition in a local dictionary, giving a handle and identifier in the context of the local dictionary.')
_Namespace_gml.addCategoryObject('elementBinding', Dictionary.name().localName(), Dictionary)

directedTopoSolid = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'directedTopoSolid'), DirectedTopoSolidPropertyType, documentation=u'The gml:directedSolid property element describes the coBoundary of topology faces and is used in the support of volume features via the gml:TopoVolume expression, see below. The orientation attribute of type gml:SignType expresses the sense in which the included solid appears in the face coboundary. In the context of a gml:TopoVolume the orientation attribute has no meaning.')
_Namespace_gml.addCategoryObject('elementBinding', directedTopoSolid.name().localName(), directedTopoSolid)

degrees = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'degrees'), DegreesType, documentation=u'')
_Namespace_gml.addCategoryObject('elementBinding', degrees.name().localName(), degrees)

MD_CoverageDescription = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_CoverageDescription'), MD_CoverageDescription_Type)
_Namespace_gmd.addCategoryObject('elementBinding', MD_CoverageDescription.name().localName(), MD_CoverageDescription)

LI_Lineage = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'LI_Lineage'), LI_Lineage_Type)
_Namespace_gmd.addCategoryObject('elementBinding', LI_Lineage.name().localName(), LI_Lineage)

PassThroughOperation = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'PassThroughOperation'), PassThroughOperationType, documentation=u'gml:PassThroughOperation is a pass-through operation specifies that a subset of a coordinate tuple is subject to a specific coordinate operation.\nThe modifiedCoordinate property elements are an ordered sequence of positive integers defining the positions in a coordinate tuple of the coordinates affected by this pass-through operation. The AggregationAttributeGroup should be used to specify that the modifiedCoordinate elements are ordered.')
_Namespace_gml.addCategoryObject('elementBinding', PassThroughOperation.name().localName(), PassThroughOperation)

defaultCodeSpace = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'defaultCodeSpace'), pyxb.binding.datatypes.anyURI)
_Namespace_gml.addCategoryObject('elementBinding', defaultCodeSpace.name().localName(), defaultCodeSpace)

AbstractTimePrimitive = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractTimePrimitive'), AbstractTimePrimitiveType, abstract=pyxb.binding.datatypes.boolean(1), documentation=u'gml:AbstractTimePrimitive acts as the head of a substitution group for geometric and topological temporal primitives.')
_Namespace_gml.addCategoryObject('elementBinding', AbstractTimePrimitive.name().localName(), AbstractTimePrimitive)

pos = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'pos'), DirectPositionType)
_Namespace_gml.addCategoryObject('elementBinding', pos.name().localName(), pos)

cylindricalCS = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'cylindricalCS'), CylindricalCSPropertyType, documentation=u'gml:cylindricalCS is an association role to the cylindrical coordinate system used by this CRS.')
_Namespace_gml.addCategoryObject('elementBinding', cylindricalCS.name().localName(), cylindricalCS)

boundedBy = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'boundedBy'), BoundingShapeType, nillable=pyxb.binding.datatypes.boolean(1), documentation=u'This property describes the minimum bounding box or rectangle that encloses the entire feature.')
_Namespace_gml.addCategoryObject('elementBinding', boundedBy.name().localName(), boundedBy)

indirectEntry = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'indirectEntry'), IndirectEntryType, documentation=u'')
_Namespace_gml.addCategoryObject('elementBinding', indirectEntry.name().localName(), indirectEntry)

OrientableSurface = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'OrientableSurface'), OrientableSurfaceType, documentation=u'OrientableSurface consists of a surface and an orientation. If the orientation is "+", then the OrientableSurface is identical to the baseSurface. If the orientation is "-", then the OrientableSurface is a reference to a gml:AbstractSurface with an up-normal that reverses the direction for this OrientableSurface, the sense of "the top of the surface".')
_Namespace_gml.addCategoryObject('elementBinding', OrientableSurface.name().localName(), OrientableSurface)

name = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'), CodeType, documentation=u'The gml:name property provides a label or identifier for the object, commonly a descriptive name. An object may have several names, typically assigned by different authorities. gml:name uses the gml:CodeType content model.  The authority for a name is indicated by the value of its (optional) codeSpace attribute.  The name may or may not be unique, as determined by the rules of the organization responsible for the codeSpace.  In common usage there will be one name per authority, so a processing application may select the name from its preferred codeSpace.')
_Namespace_gml.addCategoryObject('elementBinding', name.name().localName(), name)

geodeticDatumRef = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'geodeticDatumRef'), GeodeticDatumPropertyType, documentation=u'')
_Namespace_gml.addCategoryObject('elementBinding', geodeticDatumRef.name().localName(), geodeticDatumRef)

valueProperty = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'valueProperty'), ValuePropertyType, documentation=u'Property that refers to, or contains, a Value. Convenience element for general use.')
_Namespace_gml.addCategoryObject('elementBinding', valueProperty.name().localName(), valueProperty)

DS_InitiativeTypeCode = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'DS_InitiativeTypeCode'), CodeListValue_Type)
_Namespace_gmd.addCategoryObject('elementBinding', DS_InitiativeTypeCode.name().localName(), DS_InitiativeTypeCode)

TriangulatedSurface = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'TriangulatedSurface'), SurfaceType, documentation=u'A triangulated surface is a polyhedral surface that is composed only of triangles. There is no restriction on how the triangulation is derived.\ntrianglePatches encapsulates the triangles of the triangulated surface.')
_Namespace_gml.addCategoryObject('elementBinding', TriangulatedSurface.name().localName(), TriangulatedSurface)

CircleByCenterPoint = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'CircleByCenterPoint'), CircleByCenterPointType, documentation=u'A gml:CircleByCenterPoint is an gml:ArcByCenterPoint with identical start and end angle to form a full circle. Again, this representation can be used only in 2D.')
_Namespace_gml.addCategoryObject('elementBinding', CircleByCenterPoint.name().localName(), CircleByCenterPoint)

MD_MediumFormatCode = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_MediumFormatCode'), CodeListValue_Type)
_Namespace_gmd.addCategoryObject('elementBinding', MD_MediumFormatCode.name().localName(), MD_MediumFormatCode)

LinearRing = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'LinearRing'), LinearRingType, documentation=u'A LinearRing is defined by four or more coordinate tuples, with linear interpolation between them; the first and last coordinates shall be coincident. The number of direct positions in the list shall be at least four.')
_Namespace_gml.addCategoryObject('elementBinding', LinearRing.name().localName(), LinearRing)

DQ_AbsoluteExternalPositionalAccuracy = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'DQ_AbsoluteExternalPositionalAccuracy'), DQ_AbsoluteExternalPositionalAccuracy_Type)
_Namespace_gmd.addCategoryObject('elementBinding', DQ_AbsoluteExternalPositionalAccuracy.name().localName(), DQ_AbsoluteExternalPositionalAccuracy)

GeographicCRS = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'GeographicCRS'), GeographicCRSType, documentation=u'')
_Namespace_gml.addCategoryObject('elementBinding', GeographicCRS.name().localName(), GeographicCRS)

ScopedName = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gco, u'ScopedName'), CodeType)
_Namespace_gco.addCategoryObject('elementBinding', ScopedName.name().localName(), ScopedName)

CompositeCurve = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'CompositeCurve'), CompositeCurveType, documentation=u'A gml:CompositeCurve is represented by a sequence of (orientable) curves such that each curve in the sequence terminates at the start point of the subsequent curve in the list. \ncurveMember references or contains inline one curve in the composite curve. \nThe curves are contiguous, the collection of curves is ordered. Therefore, if provided, the aggregationType attribute shall have the value "sequence".')
_Namespace_gml.addCategoryObject('elementBinding', CompositeCurve.name().localName(), CompositeCurve)

CountList = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'CountList'), integerOrNilReasonList)
_Namespace_gml.addCategoryObject('elementBinding', CountList.name().localName(), CountList)

usesSphericalCS = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'usesSphericalCS'), SphericalCSPropertyType, documentation=u'')
_Namespace_gml.addCategoryObject('elementBinding', usesSphericalCS.name().localName(), usesSphericalCS)

URL = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'URL'), pyxb.binding.datatypes.anyURI)
_Namespace_gmd.addCategoryObject('elementBinding', URL.name().localName(), URL)

UserDefinedCS = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'UserDefinedCS'), UserDefinedCSType, documentation=u'gml:UserDefinedCS is a two- or three-dimensional coordinate system that consists of any combination of coordinate axes not covered by any other coordinate system type. A UserDefinedCS shall have two or three gml:axis property elements; the number of property elements shall equal the dimension of the CS.')
_Namespace_gml.addCategoryObject('elementBinding', UserDefinedCS.name().localName(), UserDefinedCS)

usesEngineeringDatum = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'usesEngineeringDatum'), EngineeringDatumPropertyType, documentation=u'')
_Namespace_gml.addCategoryObject('elementBinding', usesEngineeringDatum.name().localName(), usesEngineeringDatum)

realizationEpoch = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'realizationEpoch'), pyxb.binding.datatypes.date, documentation=u'gml:realizationEpoch is the time after which this datum definition is valid. See ISO 19111 Table 32 for details.')
_Namespace_gml.addCategoryObject('elementBinding', realizationEpoch.name().localName(), realizationEpoch)

MD_MaintenanceFrequencyCode = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_MaintenanceFrequencyCode'), CodeListValue_Type)
_Namespace_gmd.addCategoryObject('elementBinding', MD_MaintenanceFrequencyCode.name().localName(), MD_MaintenanceFrequencyCode)

AbstractTimeObject = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractTimeObject'), AbstractTimeObjectType, abstract=pyxb.binding.datatypes.boolean(1), documentation=u'gml:AbstractTimeObject acts as the head of a substitution group for all temporal primitives and complexes.')
_Namespace_gml.addCategoryObject('elementBinding', AbstractTimeObject.name().localName(), AbstractTimeObject)

baseCurve = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'baseCurve'), CurvePropertyType, documentation=u'The property baseCurve references or contains the base curve, i.e. it either references the base curve via the XLink-attributes or contains the curve element. A curve element is any element which is substitutable for AbstractCurve. The base curve has positive orientation.')
_Namespace_gml.addCategoryObject('elementBinding', baseCurve.name().localName(), baseCurve)

DS_DataSet = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'DS_DataSet'), DS_DataSet_Type)
_Namespace_gmd.addCategoryObject('elementBinding', DS_DataSet.name().localName(), DS_DataSet)

Measure = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gco, u'Measure'), MeasureType)
_Namespace_gco.addCategoryObject('elementBinding', Measure.name().localName(), Measure)

MD_Distribution = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_Distribution'), MD_Distribution_Type)
_Namespace_gmd.addCategoryObject('elementBinding', MD_Distribution.name().localName(), MD_Distribution)

crsRef = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'crsRef'), CRSPropertyType, documentation=u'')
_Namespace_gml.addCategoryObject('elementBinding', crsRef.name().localName(), crsRef)

centerOf = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'centerOf'), PointPropertyType, documentation=u'')
_Namespace_gml.addCategoryObject('elementBinding', centerOf.name().localName(), centerOf)

geometryMember = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'geometryMember'), GeometryPropertyType, documentation=u'This property element either references a geometry element via the XLink-attributes or contains the geometry element.')
_Namespace_gml.addCategoryObject('elementBinding', geometryMember.name().localName(), geometryMember)

MD_Georeferenceable = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_Georeferenceable'), MD_Georeferenceable_Type)
_Namespace_gmd.addCategoryObject('elementBinding', MD_Georeferenceable.name().localName(), MD_Georeferenceable)

multiLocation = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'multiLocation'), MultiPointPropertyType, documentation=u'')
_Namespace_gml.addCategoryObject('elementBinding', multiLocation.name().localName(), multiLocation)

Array = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'Array'), ArrayType, documentation=u'')
_Namespace_gml.addCategoryObject('elementBinding', Array.name().localName(), Array)

abstractGeneralOperationParameterRef = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'abstractGeneralOperationParameterRef'), AbstractGeneralOperationParameterPropertyType, documentation=u'')
_Namespace_gml.addCategoryObject('elementBinding', abstractGeneralOperationParameterRef.name().localName(), abstractGeneralOperationParameterRef)

RecordType = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gco, u'RecordType'), RecordType_Type)
_Namespace_gco.addCategoryObject('elementBinding', RecordType.name().localName(), RecordType)

CategoryExtent = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'CategoryExtent'), CategoryExtentType)
_Namespace_gml.addCategoryObject('elementBinding', CategoryExtent.name().localName(), CategoryExtent)

Multiplicity = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gco, u'Multiplicity'), Multiplicity_Type)
_Namespace_gco.addCategoryObject('elementBinding', Multiplicity.name().localName(), Multiplicity)

ObliqueCartesianCS = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'ObliqueCartesianCS'), ObliqueCartesianCSType, documentation=u'')
_Namespace_gml.addCategoryObject('elementBinding', ObliqueCartesianCS.name().localName(), ObliqueCartesianCS)

MD_DatatypeCode = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_DatatypeCode'), CodeListValue_Type)
_Namespace_gmd.addCategoryObject('elementBinding', MD_DatatypeCode.name().localName(), MD_DatatypeCode)

PrimeMeridian = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'PrimeMeridian'), PrimeMeridianType, documentation=u'A gml:PrimeMeridian defines the origin from which longitude values are determined. The default value for the prime meridian gml:identifier value is "Greenwich".')
_Namespace_gml.addCategoryObject('elementBinding', PrimeMeridian.name().localName(), PrimeMeridian)

resultOf = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'resultOf'), ResultType)
_Namespace_gml.addCategoryObject('elementBinding', resultOf.name().localName(), resultOf)

sphericalCSRef = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'sphericalCSRef'), SphericalCSPropertyType, documentation=u'')
_Namespace_gml.addCategoryObject('elementBinding', sphericalCSRef.name().localName(), sphericalCSRef)

CI_Telephone = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'CI_Telephone'), CI_Telephone_Type)
_Namespace_gmd.addCategoryObject('elementBinding', CI_Telephone.name().localName(), CI_Telephone)

Decimal = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gco, u'Decimal'), pyxb.binding.datatypes.decimal)
_Namespace_gco.addCategoryObject('elementBinding', Decimal.name().localName(), Decimal)

TimeOrdinalEra = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'TimeOrdinalEra'), TimeOrdinalEraType, documentation=u'Its content model follows the pattern of gml:TimeEdge, inheriting standard properties from gml:DefinitionType, and adding gml:start, gml:end and gml:extent properties, a set of gml:member properties which indicate ordered gml:TimeOrdinalEra elements, and a gml:group property which points to the parent era.\nThe recursive inclusion of gml:TimeOrdinalEra elements allow the construction of an arbitrary depth hierarchical ordinal reference schema, such that an ordinal era at a given level of the hierarchy includes a sequence of shorter, coterminous ordinal eras.')
_Namespace_gml.addCategoryObject('elementBinding', TimeOrdinalEra.name().localName(), TimeOrdinalEra)

operationParameter = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'operationParameter'), OperationParameterPropertyType, documentation=u'gml:operationParameter is an association role to the operation parameter of which this is a value.')
_Namespace_gml.addCategoryObject('elementBinding', operationParameter.name().localName(), operationParameter)

DQ_GriddedDataPositionalAccuracy = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'DQ_GriddedDataPositionalAccuracy'), DQ_GriddedDataPositionalAccuracy_Type)
_Namespace_gmd.addCategoryObject('elementBinding', DQ_GriddedDataPositionalAccuracy.name().localName(), DQ_GriddedDataPositionalAccuracy)

TimeOrdinalReferenceSystem = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'TimeOrdinalReferenceSystem'), TimeOrdinalReferenceSystemType, documentation=u'In some applications of geographic information \u2014 such as geology and archaeology \u2014 relative position in time is known more precisely than absolute time or duration. The order of events in time can be well established, but the magnitude of the intervals between them cannot be accurately determined; in such cases, the use of an ordinal temporal reference system is appropriate. An ordinal temporal reference system is composed of a sequence of named coterminous eras, which may in turn be composed of sequences of member eras at a finer scale, giving the whole a hierarchical structure of eras of verying resolution. \nAn ordinal temporal reference system whose component eras are not further subdivided is effectively a temporal topological complex constrained to be a linear graph. An ordinal temporal reference system some or all of whose component eras are subdivided is effectively a temporal topological complex with the constraint that parallel branches may only be constructed in pairs where one is a single temporal ordinal era and the other is a sequence of temporal ordinal eras that are called "members" of the "group". This constraint means that within a single temporal ordinal reference system, the relative position of all temporal ordinal eras is unambiguous.  \nThe positions of the beginning and end of a given era may calibrate the relative time scale.\ngml:TimeOrdinalReferenceSystem adds one or more gml:component properties to the generic temporal reference system model.')
_Namespace_gml.addCategoryObject('elementBinding', TimeOrdinalReferenceSystem.name().localName(), TimeOrdinalReferenceSystem)

ValueArray = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'ValueArray'), ValueArrayType, documentation=u'A Value Array is used for homogeneous arrays of primitive and aggregate values.  \nThe member values may be scalars, composites, arrays or lists.\nValueArray has the same content model as CompositeValue, but the member values shall be homogeneous.  The element declaration contains a Schematron constraint which expresses this restriction precisely.  Since the members are homogeneous, the gml:referenceSystem (uom, codeSpace) may be specified on the gml:ValueArray itself and inherited by all the members if desired.')
_Namespace_gml.addCategoryObject('elementBinding', ValueArray.name().localName(), ValueArray)

EX_Extent = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'EX_Extent'), EX_Extent_Type)
_Namespace_gmd.addCategoryObject('elementBinding', EX_Extent.name().localName(), EX_Extent)

usesCS = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'usesCS'), CoordinateSystemPropertyType, documentation=u'')
_Namespace_gml.addCategoryObject('elementBinding', usesCS.name().localName(), usesCS)

Observation = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'Observation'), ObservationType, documentation=u'The content model is a straightforward extension of gml:AbstractFeatureType; it automatically has the gml:identifier, gml:description, gml:descriptionReference, gml:name, and gml:boundedBy properties. \nThe gml:validTime element describes the time of the observation. Note that this may be a time instant or a time period.\nThe gml:using property contains or references a description of a sensor, instrument or procedure used for the observation.\nThe gml:target property contains or references the specimen, region or station which is the object of the observation. This property is particularly useful for remote observations, such as photographs, where a generic location property might apply to the location of the camera or the location of the field of view, and thus may be ambiguous.  \nThe gml:subject element is provided as a convenient synonym for gml:target. This is the term commonly used in phtotography.  \nThe gml:resultOf property indicates the result of the observation.  The value may be inline, or a reference to a value elsewhere.\n')
_Namespace_gml.addCategoryObject('elementBinding', Observation.name().localName(), Observation)

multiCurveProperty = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'multiCurveProperty'), MultiCurvePropertyType, documentation=u'')
_Namespace_gml.addCategoryObject('elementBinding', multiCurveProperty.name().localName(), multiCurveProperty)

ellipsoidRef = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'ellipsoidRef'), EllipsoidPropertyType, documentation=u'')
_Namespace_gml.addCategoryObject('elementBinding', ellipsoidRef.name().localName(), ellipsoidRef)

decimalMinutes = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'decimalMinutes'), DecimalMinutesType, documentation=u'')
_Namespace_gml.addCategoryObject('elementBinding', decimalMinutes.name().localName(), decimalMinutes)

location = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'location'), LocationPropertyType, documentation=u'')
_Namespace_gml.addCategoryObject('elementBinding', location.name().localName(), location)

MD_ApplicationSchemaInformation = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_ApplicationSchemaInformation'), MD_ApplicationSchemaInformation_Type)
_Namespace_gmd.addCategoryObject('elementBinding', MD_ApplicationSchemaInformation.name().localName(), MD_ApplicationSchemaInformation)

surfaceProperty = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'surfaceProperty'), SurfacePropertyType, documentation=u'This property element either references a surface via the XLink-attributes or contains the surface element. surfaceProperty is the predefined property which may be used by GML Application Schemas whenever a GML feature has a property with a value that is substitutable for AbstractSurface.')
_Namespace_gml.addCategoryObject('elementBinding', surfaceProperty.name().localName(), surfaceProperty)

sphericalCS = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'sphericalCS'), SphericalCSPropertyType, documentation=u'gml:sphericalCS is an association role to the spherical coordinate system used by this CRS.')
_Namespace_gml.addCategoryObject('elementBinding', sphericalCS.name().localName(), sphericalCS)

GeodeticCRS = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'GeodeticCRS'), GeodeticCRSType)
_Namespace_gml.addCategoryObject('elementBinding', GeodeticCRS.name().localName(), GeodeticCRS)

EngineeringDatum = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'EngineeringDatum'), EngineeringDatumType, documentation=u'gml:EngineeringDatum defines the origin of an engineering coordinate reference system, and is used in a region around that origin. This origin may be fixed with respect to the earth (such as a defined point at a construction site), or be a defined point on a moving vehicle (such as on a ship or satellite).')
_Namespace_gml.addCategoryObject('elementBinding', EngineeringDatum.name().localName(), EngineeringDatum)

anchorDefinition = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'anchorDefinition'), CodeType, documentation=u'gml:anchorDefinition is a description, possibly including coordinates, of the definition used to anchor the datum to the Earth. Also known as the "origin", especially for engineering and image datums. The codeSpace attribute may be used to reference a source of more detailed on this point or surface, or on a set of such descriptions.\n-\tFor a geodetic datum, this point is also known as the fundamental point, which is traditionally the point where the relationship between geoid and ellipsoid is defined. In some cases, the "fundamental point" may consist of a number of points. In those cases, the parameters defining the geoid/ellipsoid relationship have been averaged for these points, and the averages adopted as the datum definition.\n-\tFor an engineering datum, the anchor definition may be a physical point, or it may be a point with defined coordinates in another CRS.may\n-\tFor an image datum, the anchor definition is usually either the centre of the image or the corner of the image.\n-\tFor a temporal datum, this attribute is not defined. Instead of the anchor definition, a temporal datum carries a separate time origin of type DateTime.')
_Namespace_gml.addCategoryObject('elementBinding', anchorDefinition.name().localName(), anchorDefinition)

RectifiedGridCoverage = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'RectifiedGridCoverage'), DiscreteCoverageType, documentation=u'The gml:RectifiedGridCoverage is a discrete point coverage based on a rectified grid. It is similar to the grid coverage except that the points of the grid are geometrically referenced. The rectified grid coverage has a domain that is a gml:RectifiedGrid geometry.')
_Namespace_gml.addCategoryObject('elementBinding', RectifiedGridCoverage.name().localName(), RectifiedGridCoverage)

MD_Constraints = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_Constraints'), MD_Constraints_Type)
_Namespace_gmd.addCategoryObject('elementBinding', MD_Constraints.name().localName(), MD_Constraints)

usesSingleOperation = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'usesSingleOperation'), CoordinateOperationPropertyType, documentation=u'')
_Namespace_gml.addCategoryObject('elementBinding', usesSingleOperation.name().localName(), usesSingleOperation)

targetDimensions = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'targetDimensions'), pyxb.binding.datatypes.positiveInteger, documentation=u'gml:targetDimensions is the number of dimensions in the target CRS of this operation method.')
_Namespace_gml.addCategoryObject('elementBinding', targetDimensions.name().localName(), targetDimensions)

integerValue = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'integerValue'), pyxb.binding.datatypes.positiveInteger, documentation=u'gml:integerValue is a positive integer value of an operation parameter, usually used for a count. An integer value does not have an associated unit of measure.')
_Namespace_gml.addCategoryObject('elementBinding', integerValue.name().localName(), integerValue)

member = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'member'), AssociationRoleType, documentation=u'')
_Namespace_gml.addCategoryObject('elementBinding', member.name().localName(), member)

valueComponents = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'valueComponents'), ValueArrayPropertyType, documentation=u'Property that contains Values.')
_Namespace_gml.addCategoryObject('elementBinding', valueComponents.name().localName(), valueComponents)

EX_GeographicBoundingBox = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'EX_GeographicBoundingBox'), EX_GeographicBoundingBox_Type)
_Namespace_gmd.addCategoryObject('elementBinding', EX_GeographicBoundingBox.name().localName(), EX_GeographicBoundingBox)

AbstractTimeTopologyPrimitive = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractTimeTopologyPrimitive'), AbstractTimeTopologyPrimitiveType, abstract=pyxb.binding.datatypes.boolean(1), documentation=u'gml:TimeTopologyPrimitive acts as the head of a substitution group for topological temporal primitives.\nTemporal topology primitives shall imply the ordering information between features or feature properties. The temporal connection of features can be examined if they have temporal topology primitives as values of their properties. Usually, an instantaneous feature associates with a time node, and a static feature associates with a time edge.  A feature with both modes associates with the temporal topology primitive: a supertype of time nodes and time edges.\nA topological primitive is always connected to one or more other topological primitives, and is, therefore, always a member of a topological complex. In a GML instance, this will often be indicated by the primitives being described by elements that are descendents of an element describing a complex. However, in order to support the case where a temporal topological primitive is described in another context, the optional complex property is provided, which carries a reference to the parent temporal topological complex.')
_Namespace_gml.addCategoryObject('elementBinding', AbstractTimeTopologyPrimitive.name().localName(), AbstractTimeTopologyPrimitive)

TM_PeriodDuration = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gts, u'TM_PeriodDuration'), pyxb.binding.datatypes.duration)
_Namespace_gts.addCategoryObject('elementBinding', TM_PeriodDuration.name().localName(), TM_PeriodDuration)

AbstractDatum = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractDatum'), AbstractDatumType, abstract=pyxb.binding.datatypes.boolean(1), documentation=u'A gml:AbstractDatum specifies the relationship of a coordinate system to the earth, thus creating a coordinate reference system. A datum uses a parameter or set of parameters that determine the location of the origin of the coordinate reference system. Each datum subtype may be associated with only specific types of coordinate systems. This abstract complex type shall not be used, extended, or restricted, in a GML Application Schema, to define a concrete subtype with a meaning equivalent to a concrete subtype specified in this document.')
_Namespace_gml.addCategoryObject('elementBinding', AbstractDatum.name().localName(), AbstractDatum)

pointMember = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'pointMember'), PointPropertyType, documentation=u'This property element either references a Point via the XLink-attributes or contains the Point element.')
_Namespace_gml.addCategoryObject('elementBinding', pointMember.name().localName(), pointMember)

solidProperty = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'solidProperty'), SolidPropertyType, documentation=u'This property element either references a solid via the XLink-attributes or contains the solid element. solidProperty is the predefined property which may be used by GML Application Schemas whenever a GML feature has a property with a value that is substitutable for AbstractSolid.')
_Namespace_gml.addCategoryObject('elementBinding', solidProperty.name().localName(), solidProperty)

methodFormula = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'methodFormula'), CodeType, documentation=u'')
_Namespace_gml.addCategoryObject('elementBinding', methodFormula.name().localName(), methodFormula)

AbstractValue = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractValue'), pyxb.binding.datatypes.anyType, abstract=pyxb.binding.datatypes.boolean(1), documentation=u'gml:AbstractValue is an abstract element which acts as the head of a substitution group which contains gml:AbstractScalarValue, gml:AbstractScalarValueList, gml:CompositeValue and gml:ValueExtent, and (transitively) the elements in their substitution groups.\nThese elements may be used in an application schema as variables, so that in an XML instance document any member of its substitution group may occur.')
_Namespace_gml.addCategoryObject('elementBinding', AbstractValue.name().localName(), AbstractValue)

AbstractMD_SpatialRepresentation = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'AbstractMD_SpatialRepresentation'), AbstractMD_SpatialRepresentation_Type, abstract=pyxb.binding.datatypes.boolean(1))
_Namespace_gmd.addCategoryObject('elementBinding', AbstractMD_SpatialRepresentation.name().localName(), AbstractMD_SpatialRepresentation)

derivedCRSType = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'derivedCRSType'), CodeWithAuthorityType, documentation=u'The gml:derivedCRSType property describes the type of a derived coordinate reference system. The required codeSpace attribute shall reference a source of information specifying the values and meanings of all the allowed string values for this property.')
_Namespace_gml.addCategoryObject('elementBinding', derivedCRSType.name().localName(), derivedCRSType)

catalogSymbol = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'catalogSymbol'), CodeType, documentation=u'The catalogSymbol is the preferred lexical symbol used for this unit of measure.\nThe codeSpace attribute in gml:CodeType identifies a namespace for the catalog symbol value, and might reference the external catalog. The string value in gml:CodeType contains the value of a symbol that should be unique within this catalog namespace. This symbol often appears explicitly in the catalog, but it could be a combination of symbols using a specified algebra of units.')
_Namespace_gml.addCategoryObject('elementBinding', catalogSymbol.name().localName(), catalogSymbol)

integerValueList = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'integerValueList'), integerList, documentation=u'gml:integerValueList is an ordered sequence of two or more integer values of an operation parameter list, usually used for counts. These integer values do not have an associated unit of measure. An element of this type contains a space-separated sequence of integer values.')
_Namespace_gml.addCategoryObject('elementBinding', integerValueList.name().localName(), integerValueList)

tupleList = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'tupleList'), CoordinatesType, documentation=u'gml:CoordinatesType consists of a list of coordinate tuples, with each coordinate tuple separated by the ts or tuple separator (whitespace), and each coordinate in the tuple by the cs or coordinate separator (comma).\nThe gml:tupleList encoding is effectively "band-interleaved".')
_Namespace_gml.addCategoryObject('elementBinding', tupleList.name().localName(), tupleList)

AbstractCurve = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractCurve'), AbstractCurveType, abstract=pyxb.binding.datatypes.boolean(1), documentation=u'The AbstractCurve element is the abstract head of the substitution group for all (continuous) curve elements.')
_Namespace_gml.addCategoryObject('elementBinding', AbstractCurve.name().localName(), AbstractCurve)

gridDomain = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'gridDomain'), DomainSetType, documentation=u'')
_Namespace_gml.addCategoryObject('elementBinding', gridDomain.name().localName(), gridDomain)

Category = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'Category'), CTD_ANON_4, nillable=pyxb.binding.datatypes.boolean(1), documentation=u'A gml:Category has an optional XML attribute codeSpace, whose value is a URI which identifies a dictionary, codelist or authority for the term.')
_Namespace_gml.addCategoryObject('elementBinding', Category.name().localName(), Category)

baseGeodeticCRS = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'baseGeodeticCRS'), GeodeticCRSPropertyType, documentation=u'gml:baseGeodeticCRS is an association role to the geodetic coordinate reference system used by this projected CRS.')
_Namespace_gml.addCategoryObject('elementBinding', baseGeodeticCRS.name().localName(), baseGeodeticCRS)

edgeOf = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'edgeOf'), CurvePropertyType, documentation=u'')
_Namespace_gml.addCategoryObject('elementBinding', edgeOf.name().localName(), edgeOf)

MD_LegalConstraints = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_LegalConstraints'), MD_LegalConstraints_Type)
_Namespace_gmd.addCategoryObject('elementBinding', MD_LegalConstraints.name().localName(), MD_LegalConstraints)

topoSurfaceProperty = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'topoSurfaceProperty'), TopoSurfacePropertyType, documentation=u'The gml:topoSurfaceProperty property element may be used in features to express their relationship to the referenced topology faces.')
_Namespace_gml.addCategoryObject('elementBinding', topoSurfaceProperty.name().localName(), topoSurfaceProperty)

LinearCS = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'LinearCS'), LinearCSType, documentation=u'gml:LinearCS is a one-dimensional coordinate system that consists of the points that lie on the single axis described. The associated coordinate is the distance \u2013 with or without offset \u2013 from the specified datum to the point along the axis. A LinearCS shall have one gml:axis property element.')
_Namespace_gml.addCategoryObject('elementBinding', LinearCS.name().localName(), LinearCS)

DQ_NonQuantitativeAttributeAccuracy = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'DQ_NonQuantitativeAttributeAccuracy'), DQ_NonQuantitativeAttributeAccuracy_Type)
_Namespace_gmd.addCategoryObject('elementBinding', DQ_NonQuantitativeAttributeAccuracy.name().localName(), DQ_NonQuantitativeAttributeAccuracy)

baseGeographicCRS = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'baseGeographicCRS'), GeographicCRSPropertyType, documentation=u'')
_Namespace_gml.addCategoryObject('elementBinding', baseGeographicCRS.name().localName(), baseGeographicCRS)

DynamicFeature = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'DynamicFeature'), DynamicFeatureType, documentation=u"States are captured by time-stamped instances of a feature. The content model extends the standard gml:AbstractFeatureType with the gml:dynamicProperties model group.\nEach time-stamped instance represents a 'snapshot' of a feature. The dynamic feature classes will normally be extended to suit particular applications.  A dynamic feature bears either a time stamp or a history.")
_Namespace_gml.addCategoryObject('elementBinding', DynamicFeature.name().localName(), DynamicFeature)

maximumValue = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'maximumValue'), pyxb.binding.datatypes.double, documentation=u'The gml:minimumValue and gml:maximumValue properties allow the specification of minimum and maximum value normally allowed for this axis, in the unit of measure for the axis. For a continuous angular axis such as longitude, the values wrap-around at this value. Also, values beyond this minimum/maximum can be used for specified purposes, such as in a bounding box. A value of minus infinity shall be allowed for the gml:minimumValue element, a value of plus infiniy for the gml:maximumValue element. If these elements are omitted, the value is unspecified.')
_Namespace_gml.addCategoryObject('elementBinding', maximumValue.name().localName(), maximumValue)

rectifiedGridDomain = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'rectifiedGridDomain'), DomainSetType, documentation=u'')
_Namespace_gml.addCategoryObject('elementBinding', rectifiedGridDomain.name().localName(), rectifiedGridDomain)

OperationParameterGroup = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'OperationParameterGroup'), OperationParameterGroupType, documentation=u'gml:OperationParameterGroup is the definition of a group of parameters used by an operation method. This complex type is expected to be used or extended for all applicable operation methods, without defining operation-method-specialized element names.\nThe generalOperationParameter elements are an unordered list of associations to the set of operation parameters that are members of this group.')
_Namespace_gml.addCategoryObject('elementBinding', OperationParameterGroup.name().localName(), OperationParameterGroup)

Quantity = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'Quantity'), CTD_ANON_5, nillable=pyxb.binding.datatypes.boolean(1), documentation=u'An XML attribute uom ("unit of measure") is required, whose value is a URI which identifies the definition of a ratio scale or units by which the numeric value shall be multiplied, or an interval or position scale on which the value occurs.')
_Namespace_gml.addCategoryObject('elementBinding', Quantity.name().localName(), Quantity)

AbstractDQ_ThematicAccuracy = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'AbstractDQ_ThematicAccuracy'), AbstractDQ_ThematicAccuracy_Type, abstract=pyxb.binding.datatypes.boolean(1))
_Namespace_gmd.addCategoryObject('elementBinding', AbstractDQ_ThematicAccuracy.name().localName(), AbstractDQ_ThematicAccuracy)

Curve = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'Curve'), CurveType, documentation=u'A curve is a 1-dimensional primitive. Curves are continuous, connected, and have a measurable length in terms of the coordinate system. \nA curve is composed of one or more curve segments. Each curve segment within a curve may be defined using a different interpolation method. The curve segments are connected to one another, with the end point of each segment except the last being the start point of the next segment in the segment list.\nThe orientation of the curve is positive.\nThe element segments encapsulates the segments of the curve.')
_Namespace_gml.addCategoryObject('elementBinding', Curve.name().localName(), Curve)

quantityType = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'quantityType'), StringOrRefType, documentation=u'The gml:quantityType property indicates the phenomenon to which the units apply. This element contains an informal description of the phenomenon or type of physical quantity that is measured or observed. When the physical quantity is the result of an observation or measurement, this term is known as observable type or measurand.\nThe use of gml:quantityType for references to remote values is deprecated.')
_Namespace_gml.addCategoryObject('elementBinding', quantityType.name().localName(), quantityType)

position = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'position'), PointPropertyType, documentation=u'')
_Namespace_gml.addCategoryObject('elementBinding', position.name().localName(), position)

surfaceMembers = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'surfaceMembers'), SurfaceArrayPropertyType, documentation=u'This property element contains a list of surfaces. The order of the elements is significant and shall be preserved when processing the array.')
_Namespace_gml.addCategoryObject('elementBinding', surfaceMembers.name().localName(), surfaceMembers)

Bag = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'Bag'), BagType, documentation=u'')
_Namespace_gml.addCategoryObject('elementBinding', Bag.name().localName(), Bag)

locationName = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'locationName'), CodeType, documentation=u'The gml:locationName property element is a convenience property where the text value describes the location of the feature. If the location names are selected from a controlled list, then the list shall be identified in the codeSpace attribute.')
_Namespace_gml.addCategoryObject('elementBinding', locationName.name().localName(), locationName)

MD_RepresentativeFraction = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_RepresentativeFraction'), MD_RepresentativeFraction_Type)
_Namespace_gmd.addCategoryObject('elementBinding', MD_RepresentativeFraction.name().localName(), MD_RepresentativeFraction)

posList = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'posList'), DirectPositionListType)
_Namespace_gml.addCategoryObject('elementBinding', posList.name().localName(), posList)

MultiSolidCoverage = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'MultiSolidCoverage'), DiscreteCoverageType, documentation=u'In a gml:MultiSolidCoverage the domain is partioned into a collection of solids comprising a gml:MultiSolid.  The coverage function than maps each solid in the collection to a value in the range set.\nThe content model is identical with gml:DiscreteCoverageType, but that gml:domainSet shall have values gml:MultiSolid.\nIn a gml:MultiSolidCoverage the mapping from the domain to the range is straightforward.\n-\tFor gml:DataBlock encodings the solids of the gml:MultiSolid are mapped in document order to the tuples of the data block.\n-\tFor gml:CompositeValue encodings the solids of the gml:MultiSolid are mapped to the members of the composite value in document order.\n-\tFor gml:File encodings the solids of the gml:MultiSolid are mapped to the records of the file in sequential order.\n')
_Namespace_gml.addCategoryObject('elementBinding', MultiSolidCoverage.name().localName(), MultiSolidCoverage)

MultiGeometry = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'MultiGeometry'), MultiGeometryType, documentation=u'gml:MultiGeometry is a collection of one or more GML geometry objects of arbitrary type. \nThe members of the geometric aggregate may be specified either using the "standard" property (gml:geometryMember) or the array property (gml:geometryMembers). It is also valid to use both the "standard" and the array properties in the same collection.')
_Namespace_gml.addCategoryObject('elementBinding', MultiGeometry.name().localName(), MultiGeometry)

CubicSpline = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'CubicSpline'), CubicSplineType, documentation=u'The number of control points shall be at least three.\nvectorAtStart is the unit tangent vector at the start point of the spline. vectorAtEnd is the unit tangent vector at the end point of the spline. Only the direction of the vectors shall be used to determine the shape of the cubic spline, not their length.\ninterpolation is fixed as "cubicSpline".\ndegree shall be the degree of the polynomial used for the interpolation in this spline. Therefore the degree for a cubic spline is fixed to "3".\nThe content model follows the general pattern for the encoding of curve segments.')
_Namespace_gml.addCategoryObject('elementBinding', CubicSpline.name().localName(), CubicSpline)

AbstractGeneralDerivedCRS = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractGeneralDerivedCRS'), AbstractGeneralDerivedCRSType, abstract=pyxb.binding.datatypes.boolean(1), documentation=u'gml:AbstractGeneralDerivedCRS is a coordinate reference system that is defined by its coordinate conversion from another coordinate reference system. This abstract complex type shall not be used, extended, or restricted, in a GML Application Schema, to define a concrete subtype with a meaning equivalent to a concrete subtype specified in this document.')
_Namespace_gml.addCategoryObject('elementBinding', AbstractGeneralDerivedCRS.name().localName(), AbstractGeneralDerivedCRS)

MD_ProgressCode = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_ProgressCode'), CodeListValue_Type)
_Namespace_gmd.addCategoryObject('elementBinding', MD_ProgressCode.name().localName(), MD_ProgressCode)

validTime = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'validTime'), TimePrimitivePropertyType, documentation=u'gml:validTime is a convenience property element.')
_Namespace_gml.addCategoryObject('elementBinding', validTime.name().localName(), validTime)

multiCenterOf = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'multiCenterOf'), MultiPointPropertyType, documentation=u'')
_Namespace_gml.addCategoryObject('elementBinding', multiCenterOf.name().localName(), multiCenterOf)

MD_RestrictionCode = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_RestrictionCode'), CodeListValue_Type)
_Namespace_gmd.addCategoryObject('elementBinding', MD_RestrictionCode.name().localName(), MD_RestrictionCode)

Geodesic = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'Geodesic'), GeodesicType)
_Namespace_gml.addCategoryObject('elementBinding', Geodesic.name().localName(), Geodesic)

maximalComplex = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'maximalComplex'), TopoComplexPropertyType, documentation=u'The property elements gml:subComplex, gml:superComplex and gml:maximalComplex provide an encoding for relationships between topology complexes as described for gml:TopoComplex above.')
_Namespace_gml.addCategoryObject('elementBinding', maximalComplex.name().localName(), maximalComplex)

AbstractParametricCurveSurface = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractParametricCurveSurface'), AbstractParametricCurveSurfaceType, abstract=pyxb.binding.datatypes.boolean(1), documentation=u'The element provides a substitution group head for the surface patches based on parametric curves. All properties are specified in the derived subtypes. All derived subtypes shall conform to the constraints specified in ISO 19107:2003, 6.4.40.\nIf provided, the aggregationType attribute shall have the value "set".')
_Namespace_gml.addCategoryObject('elementBinding', AbstractParametricCurveSurface.name().localName(), AbstractParametricCurveSurface)

TimeClock = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'TimeClock'), TimeClockType, documentation=u'A clock provides a basis for defining temporal position within a day. A clock shall be used with a calendar in order to provide a complete description of a temporal position within a specific day.\ngml:TimeClock adds the following properties to those inherited from gml:TimeReferenceSystemType:\n-\tgml:referenceEvent is the name or description of an event, such as solar noon or sunrise, which fixes the position of the base scale of the clock.\n-\tgml:referenceTime specifies the time of day associated with the reference event expressed as a time of day in the given clock. The reference time is usually the origin of the clock scale. \n-\tgml:utcReference specifies the 24 hour local or UTC time that corresponds to the reference time.\n-\tgml:dateBasis contains or references the calendars that use this clock.')
_Namespace_gml.addCategoryObject('elementBinding', TimeClock.name().localName(), TimeClock)

ParameterValueGroup = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'ParameterValueGroup'), ParameterValueGroupType, documentation=u'gml:ParameterValueGroup is a group of related parameter values. The same group can be repeated more than once in a Conversion, Transformation, or higher level ParameterValueGroup, if those instances contain different values of one or more parameterValues which suitably distinquish among those groups. This concrete complex type can be used for operation methods without using an Application Schema that defines operation-method-specialized element names and contents. This complex type may be used, extended, or restricted for well-known operation methods, especially for methods with only one instance.\nThe parameterValue elements are an unordered set of composition association roles to the parameter values and groups of values included in this group.')
_Namespace_gml.addCategoryObject('elementBinding', ParameterValueGroup.name().localName(), ParameterValueGroup)

includesValue = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'includesValue'), AbstractGeneralParameterValuePropertyType, documentation=u'')
_Namespace_gml.addCategoryObject('elementBinding', includesValue.name().localName(), includesValue)

Ring = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'Ring'), RingType, documentation=u'A ring is used to represent a single connected component of a surface boundary as specified in ISO 19107:2003, 6.3.6.\nEvery gml:curveMember references or contains one curve, i.e. any element which is substitutable for gml:AbstractCurve. In the context of a ring, the curves describe the boundary of the surface. The sequence of curves shall be contiguous and connected in a cycle.\nIf provided, the aggregationType attribute shall have the value "sequence".')
_Namespace_gml.addCategoryObject('elementBinding', Ring.name().localName(), Ring)

Node = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'Node'), NodeType, documentation=u'gml:Node represents the 0-dimensional primitive.\nThe optional coboundary of a node (gml:directedEdge) is a sequence of directed edges which are incident on this node. Edges emanating from this node appear in the node coboundary with a negative orientation. \nIf provided, the aggregationType attribute shall have the value "sequence".\nA node may optionally be realised by a 0-dimensional geometric primitive (gml:pointProperty).')
_Namespace_gml.addCategoryObject('elementBinding', Node.name().localName(), Node)

MD_FeatureCatalogueDescription = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_FeatureCatalogueDescription'), MD_FeatureCatalogueDescription_Type)
_Namespace_gmd.addCategoryObject('elementBinding', MD_FeatureCatalogueDescription.name().localName(), MD_FeatureCatalogueDescription)

booleanValue = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'booleanValue'), pyxb.binding.datatypes.boolean, documentation=u'gml:booleanValue is a boolean value of an operation parameter. A Boolean value does not have an associated unit of measure.')
_Namespace_gml.addCategoryObject('elementBinding', booleanValue.name().localName(), booleanValue)

MD_Format = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_Format'), MD_Format_Type)
_Namespace_gmd.addCategoryObject('elementBinding', MD_Format.name().localName(), MD_Format)

surfaceArrayProperty = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'surfaceArrayProperty'), SurfaceArrayPropertyType, documentation=u'')
_Namespace_gml.addCategoryObject('elementBinding', surfaceArrayProperty.name().localName(), surfaceArrayProperty)

geometryMembers = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'geometryMembers'), GeometryArrayPropertyType, documentation=u'This property element contains a list of geometry elements. The order of the elements is significant and shall be preserved when processing the array.')
_Namespace_gml.addCategoryObject('elementBinding', geometryMembers.name().localName(), geometryMembers)

LineStringSegment = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'LineStringSegment'), LineStringSegmentType, documentation=u'A LineStringSegment is a curve segment that is defined by two or more control points including the start and end point, with linear interpolation between them.\nThe content model follows the general pattern for the encoding of curve segments.')
_Namespace_gml.addCategoryObject('elementBinding', LineStringSegment.name().localName(), LineStringSegment)

multiSurfaceDomain = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'multiSurfaceDomain'), DomainSetType, documentation=u'')
_Namespace_gml.addCategoryObject('elementBinding', multiSurfaceDomain.name().localName(), multiSurfaceDomain)

Boolean = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'Boolean'), CTD_ANON_3, nillable=pyxb.binding.datatypes.boolean(1))
_Namespace_gml.addCategoryObject('elementBinding', Boolean.name().localName(), Boolean)

LI_ProcessStep = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'LI_ProcessStep'), LI_ProcessStep_Type)
_Namespace_gmd.addCategoryObject('elementBinding', LI_ProcessStep.name().localName(), LI_ProcessStep)

MD_ReferenceSystem = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_ReferenceSystem'), MD_ReferenceSystem_Type)
_Namespace_gmd.addCategoryObject('elementBinding', MD_ReferenceSystem.name().localName(), MD_ReferenceSystem)

DerivedUnit = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'DerivedUnit'), DerivedUnitType, documentation=u'Derived units are defined by combination of other units.  Derived units are used for quantities other than those corresponding to the base units, such as hertz (s-1) for frequency, Newton (kg.m/s2) for force.  Derived units based directly on base units are usually preferred for quantities other than the fundamental quantities within a system. If a derived unit is not the preferred unit, the gml:ConventionalUnit element should be used instead.\nThe gml:DerivedUnit extends gml:UnitDefinition with the property gml:derivationUnitTerms.')
_Namespace_gml.addCategoryObject('elementBinding', DerivedUnit.name().localName(), DerivedUnit)

usesVerticalDatum = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'usesVerticalDatum'), VerticalDatumPropertyType, documentation=u'')
_Namespace_gml.addCategoryObject('elementBinding', usesVerticalDatum.name().localName(), usesVerticalDatum)

axisDirection = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'axisDirection'), CodeWithAuthorityType, documentation=u'gml:axisDirection is the direction of this coordinate system axis (or in the case of Cartesian projected coordinates, the direction of this coordinate system axis at the origin).\nWithin any set of coordinate system axes, only one of each pair of terms may be used. For earth-fixed CRSs, this direction is often approximate and intended to provide a human interpretable meaning to the axis. When a geodetic datum is used, the precise directions of the axes may therefore vary slightly from this approximate direction.\nThe codeSpace attribute shall reference a source of information specifying the values and meanings of all the allowed string values for this property.')
_Namespace_gml.addCategoryObject('elementBinding', axisDirection.name().localName(), axisDirection)

MD_KeywordTypeCode = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_KeywordTypeCode'), CodeListValue_Type)
_Namespace_gmd.addCategoryObject('elementBinding', MD_KeywordTypeCode.name().localName(), MD_KeywordTypeCode)

AbstractGeneralTransformation = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractGeneralTransformation'), AbstractGeneralTransformationType, abstract=pyxb.binding.datatypes.boolean(1), documentation=u'gml:AbstractGeneralTransformation is an abstract operation on coordinates that usually includes a change of Datum. The parameters of a coordinate transformation are empirically derived from data containing the coordinates of a series of points in both coordinate reference systems. This computational process is usually "over-determined", allowing derivation of error (or accuracy) estimates for the transformation. Also, the stochastic nature of the parameters may result in multiple (different) versions of the same coordinate transformation. The operationVersion, sourceCRS, and targetCRS proeprty elements are mandatory in a coordinate transformation.\nThis abstract complex type is expected to be extended for well-known operation methods with many Transformation instances, in Application Schemas that define operation-method-specialized value element names and contents. This transformation uses an operation method with associated parameter values. However, operation methods and parameter values are directly associated with concrete subtypes, not with this abstract type. All concrete types derived from this type shall extend this type to include a "usesMethod" element that references one "OperationMethod" element. Similarly, all concrete types derived from this type shall extend this type to include one or more elements each named "uses...Value" that each use the type of an element substitutable for the "AbstractGeneralParameterValue" element.')
_Namespace_gml.addCategoryObject('elementBinding', AbstractGeneralTransformation.name().localName(), AbstractGeneralTransformation)

GeometricComplex = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'GeometricComplex'), GeometricComplexType)
_Namespace_gml.addCategoryObject('elementBinding', GeometricComplex.name().localName(), GeometricComplex)

usesOperation = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'usesOperation'), CoordinateOperationPropertyType, documentation=u'')
_Namespace_gml.addCategoryObject('elementBinding', usesOperation.name().localName(), usesOperation)

coordOperation = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'coordOperation'), CoordinateOperationPropertyType, documentation=u'gml:coordOperation is an association role to a coordinate operation.')
_Namespace_gml.addCategoryObject('elementBinding', coordOperation.name().localName(), coordOperation)

TimeCalendar = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'TimeCalendar'), TimeCalendarType, documentation=u'A calendar is a discrete temporal reference system that provides a basis for defining temporal position to a resolution of one day.\ngml:TimeCalendar adds one property to those inherited from gml:TimeReferenceSystem. A gml:referenceFrame provides a link to a gml:TimeCalendarEra that it uses. A  gml:TimeCalendar may reference more than one calendar era. \nThe referenceFrame element follows the standard GML property model, allowing the association to be instantiated either using an inline description using the gml:TimeCalendarEra element, or a link to a gml:TimeCalendarEra which is explicit elsewhere.')
_Namespace_gml.addCategoryObject('elementBinding', TimeCalendar.name().localName(), TimeCalendar)

ellipsoid = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'ellipsoid'), EllipsoidPropertyType, documentation=u'gml:ellipsoid is an association role to the ellipsoid used by this geodetic datum.')
_Namespace_gml.addCategoryObject('elementBinding', ellipsoid.name().localName(), ellipsoid)

TimePeriod = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'TimePeriod'), TimePeriodType, documentation=u'gml:TimePeriod acts as a one-dimensional geometric primitive that represents an identifiable extent in time.\nThe location in of a gml:TimePeriod is described by the temporal positions of the instants at which it begins and ends. The length of the period is equal to the temporal distance between the two bounding temporal positions. \nBoth beginning and end may be described in terms of their direct position using gml:TimePositionType which is an XML Schema simple content type, or by reference to an indentifiable time instant using gml:TimeInstantPropertyType.\nAlternatively a limit of a gml:TimePeriod may use the conventional GML property model to make a reference to a time instant described elsewhere, or a limit may be indicated as a direct position.')
_Namespace_gml.addCategoryObject('elementBinding', TimePeriod.name().localName(), TimePeriod)

DQ_TemporalConsistency = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'DQ_TemporalConsistency'), DQ_TemporalConsistency_Type)
_Namespace_gmd.addCategoryObject('elementBinding', DQ_TemporalConsistency.name().localName(), DQ_TemporalConsistency)

Polygon = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'Polygon'), PolygonType, documentation=u'A Polygon is a special surface that is defined by a single surface patch (see D.3.6). The boundary of this patch is coplanar and the polygon uses planar interpolation in its interior. \nThe elements exterior and interior describe the surface boundary of the polygon.')
_Namespace_gml.addCategoryObject('elementBinding', Polygon.name().localName(), Polygon)

AbstractGeneralOperationParameter = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractGeneralOperationParameter'), AbstractGeneralOperationParameterType, abstract=pyxb.binding.datatypes.boolean(1), documentation=u'gml:GeneralOperationParameter is the abstract definition of a parameter or group of parameters used by an operation method.')
_Namespace_gml.addCategoryObject('elementBinding', AbstractGeneralOperationParameter.name().localName(), AbstractGeneralOperationParameter)

DQ_CompletenessOmission = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'DQ_CompletenessOmission'), DQ_CompletenessOmission_Type)
_Namespace_gmd.addCategoryObject('elementBinding', DQ_CompletenessOmission.name().localName(), DQ_CompletenessOmission)

AbstractOperation = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractOperation'), AbstractCoordinateOperationType, abstract=pyxb.binding.datatypes.boolean(1), documentation=u'')
_Namespace_gml.addCategoryObject('elementBinding', AbstractOperation.name().localName(), AbstractOperation)

MultiCurveCoverage = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'MultiCurveCoverage'), DiscreteCoverageType, documentation=u'In a gml:MultiCurveCoverage the domain is partioned into a collection of curves comprising a gml:MultiCurve.  The coverage function then maps each curve in the collection to a value in the range set.\nThe content model is identical with gml:DiscreteCoverageType, but that gml:domainSet shall have values gml:MultiCurve.\nIn a gml:MultiCurveCoverage the mapping from the domain to the range is straightforward.\n-\tFor gml:DataBlock encodings the curves of the gml:MultiCurve are mapped in document order to the tuples of the data block.\n-\tFor gml:CompositeValue encodings the curves of the gml:MultiCurve are mapped to the members of the composite value in document order.\n-\tFor gml:File encodings the curves of the gml:MultiCurve are mapped to the records of the file in sequential order.\n')
_Namespace_gml.addCategoryObject('elementBinding', MultiCurveCoverage.name().localName(), MultiCurveCoverage)

cartesianCS = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'cartesianCS'), CartesianCSPropertyType, documentation=u'gml:cartesianCS is an association role to the Cartesian coordinate system used by this CRS.')
_Namespace_gml.addCategoryObject('elementBinding', cartesianCS.name().localName(), cartesianCS)

MemberName = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gco, u'MemberName'), MemberName_Type)
_Namespace_gco.addCategoryObject('elementBinding', MemberName.name().localName(), MemberName)

AbstractMetaData = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractMetaData'), AbstractMetaDataType, abstract=pyxb.binding.datatypes.boolean(1), documentation=u'')
_Namespace_gml.addCategoryObject('elementBinding', AbstractMetaData.name().localName(), AbstractMetaData)

description = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'description'), StringOrRefType, documentation=u'The value of this property is a text description of the object. gml:description uses gml:StringOrRefType as its content model, so it may contain a simple text string content, or carry a reference to an external description. The use of gml:description to reference an external description has been deprecated and replaced by the gml:descriptionReference property.')
_Namespace_gml.addCategoryObject('elementBinding', description.name().localName(), description)

QuantityExtent = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'QuantityExtent'), QuantityExtentType)
_Namespace_gml.addCategoryObject('elementBinding', QuantityExtent.name().localName(), QuantityExtent)

AbstractCRS = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractCRS'), AbstractCRSType, abstract=pyxb.binding.datatypes.boolean(1), documentation=u'gml:AbstractCRS specifies a coordinate reference system which is usually single but may be compound. This abstract complex type shall not be used, extended, or restricted, in a GML Application Schema, to define a concrete subtype with a meaning equivalent to a concrete subtype specified in this document.')
_Namespace_gml.addCategoryObject('elementBinding', AbstractCRS.name().localName(), AbstractCRS)

EngineeringCRS = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'EngineeringCRS'), EngineeringCRSType, documentation=u'gml:EngineeringCRS is a contextually local coordinate reference system which can be divided into two broad categories:\n-\tearth-fixed systems applied to engineering activities on or near the surface of the earth;\n-\tCRSs on moving platforms such as road vehicles, vessels, aircraft, or spacecraft, see ISO 19111 8.3.')
_Namespace_gml.addCategoryObject('elementBinding', EngineeringCRS.name().localName(), EngineeringCRS)

CI_OnLineFunctionCode = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'CI_OnLineFunctionCode'), CodeListValue_Type)
_Namespace_gmd.addCategoryObject('elementBinding', CI_OnLineFunctionCode.name().localName(), CI_OnLineFunctionCode)

DS_Sensor = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'DS_Sensor'), DS_Sensor_Type)
_Namespace_gmd.addCategoryObject('elementBinding', DS_Sensor.name().localName(), DS_Sensor)

subComplex = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'subComplex'), TopoComplexPropertyType, documentation=u'The property elements gml:subComplex, gml:superComplex and gml:maximalComplex provide an encoding for relationships between topology complexes as described for gml:TopoComplex above.')
_Namespace_gml.addCategoryObject('elementBinding', subComplex.name().localName(), subComplex)

MD_TopicCategoryCode = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_TopicCategoryCode'), MD_TopicCategoryCode_Type)
_Namespace_gmd.addCategoryObject('elementBinding', MD_TopicCategoryCode.name().localName(), MD_TopicCategoryCode)

ConventionalUnit = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'ConventionalUnit'), ConventionalUnitType, documentation=u'Conventional units that are neither base units nor defined by direct combination of base units are used in many application domains.  For example electronVolt for energy, feet and nautical miles for length.  In most cases there is a known, usually linear, conversion to a preferred unit which is either a base unit or derived by direct combination of base units.\nThe gml:ConventionalUnit extends gml:UnitDefinition with a property that describes a conversion to a preferred unit for this physical quantity.  When the conversion is exact, the element gml:conversionToPreferredUnit should be used, or when the conversion is not exact the element gml:roughConversionToPreferredUnit is available. Both of these elements have the same content model.  The gml:derivationUnitTerm property defined above is included to allow a user to optionally record how this unit may be derived from other ("more primitive") units.')
_Namespace_gml.addCategoryObject('elementBinding', ConventionalUnit.name().localName(), ConventionalUnit)

multiSolidProperty = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'multiSolidProperty'), MultiSolidPropertyType, documentation=u'')
_Namespace_gml.addCategoryObject('elementBinding', multiSolidProperty.name().localName(), multiSolidProperty)

dmsAngleValue = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'dmsAngleValue'), DMSAngleType, documentation=u'')
_Namespace_gml.addCategoryObject('elementBinding', dmsAngleValue.name().localName(), dmsAngleValue)

MD_VectorSpatialRepresentation = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_VectorSpatialRepresentation'), MD_VectorSpatialRepresentation_Type)
_Namespace_gmd.addCategoryObject('elementBinding', MD_VectorSpatialRepresentation.name().localName(), MD_VectorSpatialRepresentation)

Tin = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'Tin'), TinType, documentation=u'A tin is a triangulated surface that uses the Delauny algorithm or a similar algorithm complemented with consideration of stoplines (stopLines), breaklines (breakLines), and maximum length of triangle sides (maxLength). controlPoint shall contain a set of the positions (three or more) used as posts for this TIN (corners of the triangles in the TIN). See ISO 19107:2003, 6.4.39 for details.')
_Namespace_gml.addCategoryObject('elementBinding', Tin.name().localName(), Tin)

ArcByCenterPoint = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'ArcByCenterPoint'), ArcByCenterPointType, documentation=u'This variant of the arc requires that the points on the arc shall be computed instead of storing the coordinates directly. The single control point is the center point of the arc plus the radius and the bearing at start and end. This representation can be used only in 2D.\nThe element radius specifies the radius of the arc.\nThe element startAngle specifies the bearing of the arc at the start.\nThe element endAngle specifies the bearing of the arc at the end.\nThe interpolation is fixed as "circularArcCenterPointWithRadius".\nSince this type describes always a single arc, the attribute "numArc" is fixed to "1".\nThe content model follows the general pattern for the encoding of curve segments.')
_Namespace_gml.addCategoryObject('elementBinding', ArcByCenterPoint.name().localName(), ArcByCenterPoint)

segments = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'segments'), CurveSegmentArrayPropertyType, documentation=u'This property element contains a list of curve segments. The order of the elements is significant and shall be preserved when processing the array.')
_Namespace_gml.addCategoryObject('elementBinding', segments.name().localName(), segments)

Scale = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gco, u'Scale'), ScaleType)
_Namespace_gco.addCategoryObject('elementBinding', Scale.name().localName(), Scale)

pointArrayProperty = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'pointArrayProperty'), PointArrayPropertyType, documentation=u'')
_Namespace_gml.addCategoryObject('elementBinding', pointArrayProperty.name().localName(), pointArrayProperty)

DynamicFeatureCollection = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'DynamicFeatureCollection'), DynamicFeatureCollectionType, documentation=u'A gml:DynamicFeatureCollection is a feature collection that has a gml:validTime property (i.e. is a snapshot of the feature collection) or which has a gml:history property that contains one or more gml:AbstractTimeSlices each of which contain values of the time varying properties of the feature collection.  Note that the gml:DynamicFeatureCollection may be one of the following:\n1.\tA feature collection which consists of static feature members (members do not change in time) but which has properties of the collection object as a whole that do change in time .  \n2.\tA feature collection which consists of dynamic feature members (the members are gml:DynamicFeatures) but which also has properties of the collection as a whole that vary in time.')
_Namespace_gml.addCategoryObject('elementBinding', DynamicFeatureCollection.name().localName(), DynamicFeatureCollection)

AbstractCoordinateSystem = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractCoordinateSystem'), AbstractCoordinateSystemType, abstract=pyxb.binding.datatypes.boolean(1), documentation=u'gml:AbstractCoordinateSystem is a coordinate system (CS) is the non-repeating sequence of coordinate system axes that spans a given coordinate space. A CS is derived from a set of mathematical rules for specifying how coordinates in a given space are to be assigned to points. The coordinate values in a coordinate tuple shall be recorded in the order in which the coordinate system axes associations are recorded. This abstract complex type shall not be used, extended, or restricted, in an Application Schema, to define a concrete subtype with a meaning equivalent to a concrete subtype specified in this document.')
_Namespace_gml.addCategoryObject('elementBinding', AbstractCoordinateSystem.name().localName(), AbstractCoordinateSystem)

MD_PortrayalCatalogueReference = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_PortrayalCatalogueReference'), MD_PortrayalCatalogueReference_Type)
_Namespace_gmd.addCategoryObject('elementBinding', MD_PortrayalCatalogueReference.name().localName(), MD_PortrayalCatalogueReference)

multiPointDomain = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'multiPointDomain'), DomainSetType, documentation=u'')
_Namespace_gml.addCategoryObject('elementBinding', multiPointDomain.name().localName(), multiPointDomain)

Shell = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'Shell'), ShellType, documentation=u'A shell is used to represent a single connected component of a solid boundary as specified in ISO 19107:2003, 6.3.8.\nEvery gml:surfaceMember references or contains one surface, i.e. any element which is substitutable for gml:AbstractSurface. In the context of a shell, the surfaces describe the boundary of the solid. \nIf provided, the aggregationType attribute shall have the value "set".\n')
_Namespace_gml.addCategoryObject('elementBinding', Shell.name().localName(), Shell)

AbstractGeneralParameterValue = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractGeneralParameterValue'), AbstractGeneralParameterValueType, abstract=pyxb.binding.datatypes.boolean(1), documentation=u'gml:AbstractGeneralParameterValue is an abstract parameter value or group of parameter values.\nThis abstract complexType is expected to be extended and restricted for well-known operation methods with many instances, in Application Schemas that define operation-method-specialized element names and contents. Specific parameter value elements are directly contained in concrete subtypes, not in this abstract type. All concrete types derived from this type shall extend this type to include one "...Value" element with an appropriate type, which should be one of the element types allowed in the ParameterValueType. In addition, all derived concrete types shall extend this type to include a "operationParameter" property element that references one element substitutable for the "OperationParameter" object element.')
_Namespace_gml.addCategoryObject('elementBinding', AbstractGeneralParameterValue.name().localName(), AbstractGeneralParameterValue)

TimeInstant = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'TimeInstant'), TimeInstantType, documentation=u'gml:TimeInstant acts as a zero-dimensional geometric primitive that represents an identifiable position in time.')
_Namespace_gml.addCategoryObject('elementBinding', TimeInstant.name().localName(), TimeInstant)

TimeCS = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'TimeCS'), TimeCSType, documentation=u'gml:TimeCS is a one-dimensional coordinate system containing a time axis, used to describe the temporal position of a point in the specified time units from a specified time origin. A TimeCS shall have one gml:axis property element.')
_Namespace_gml.addCategoryObject('elementBinding', TimeCS.name().localName(), TimeCS)

usesGeodeticDatum = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'usesGeodeticDatum'), GeodeticDatumPropertyType, documentation=u'')
_Namespace_gml.addCategoryObject('elementBinding', usesGeodeticDatum.name().localName(), usesGeodeticDatum)

OperationParameter = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'OperationParameter'), OperationParameterType, documentation=u'gml:OperationParameter is the definition of a parameter used by an operation method. Most parameter values are numeric, but other types of parameter values are possible. This complex type is expected to be used or extended for all operation methods, without defining operation-method-specialized element names.')
_Namespace_gml.addCategoryObject('elementBinding', OperationParameter.name().localName(), OperationParameter)

Conversion = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'Conversion'), ConversionType, documentation=u'gml:Conversion is a concrete operation on coordinates that does not include any change of Datum. The best-known example of a coordinate conversion is a map projection. The parameters describing coordinate conversions are defined rather than empirically derived. Note that some conversions have no parameters.\nThis concrete complex type can be used without using a GML Application Schema that defines operation-method-specialized element names and contents, especially for methods with only one Conversion instance.\nThe usesValue property elements are an unordered list of composition associations to the set of parameter values used by this conversion operation.')
_Namespace_gml.addCategoryObject('elementBinding', Conversion.name().localName(), Conversion)

MD_Usage = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_Usage'), MD_Usage_Type)
_Namespace_gmd.addCategoryObject('elementBinding', MD_Usage.name().localName(), MD_Usage)

temporalCSRef = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'temporalCSRef'), TemporalCSPropertyType, documentation=u'')
_Namespace_gml.addCategoryObject('elementBinding', temporalCSRef.name().localName(), temporalCSRef)

MD_Distributor = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_Distributor'), MD_Distributor_Type)
_Namespace_gmd.addCategoryObject('elementBinding', MD_Distributor.name().localName(), MD_Distributor)

AbstractDQ_PositionalAccuracy = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'AbstractDQ_PositionalAccuracy'), AbstractDQ_PositionalAccuracy_Type, abstract=pyxb.binding.datatypes.boolean(1))
_Namespace_gmd.addCategoryObject('elementBinding', AbstractDQ_PositionalAccuracy.name().localName(), AbstractDQ_PositionalAccuracy)

OperationMethod = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'OperationMethod'), OperationMethodType, documentation=u'gml:OperationMethod is a method (algorithm or procedure) used to perform a coordinate operation. Most operation methods use a number of operation parameters, although some coordinate conversions use none. Each coordinate operation using the method assigns values to these parameters.\nThe parameter elements are an unordered list of associations to the set of operation parameters and parameter groups used by this operation method.')
_Namespace_gml.addCategoryObject('elementBinding', OperationMethod.name().localName(), OperationMethod)

coordinateOperationAccuracy = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'coordinateOperationAccuracy'), CTD_ANON_2, documentation=u'gml:coordinateOperationAccuracy is an association role to a DQ_PositionalAccuracy object as encoded in ISO/TS 19139, either referencing or containing the definition of that positional accuracy. That object contains an estimate of the impact of this coordinate operation on point accuracy. That is, it gives position error estimates for the target coordinates of this coordinate operation, assuming no errors in the source coordinates.')
_Namespace_gml.addCategoryObject('elementBinding', coordinateOperationAccuracy.name().localName(), coordinateOperationAccuracy)

AbstractGeometricPrimitive = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractGeometricPrimitive'), AbstractGeometricPrimitiveType, abstract=pyxb.binding.datatypes.boolean(1), documentation=u'The AbstractGeometricPrimitive element is the abstract head of the substitution group for all (pre- and user-defined) geometric primitives.')
_Namespace_gml.addCategoryObject('elementBinding', AbstractGeometricPrimitive.name().localName(), AbstractGeometricPrimitive)

scope = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'scope'), pyxb.binding.datatypes.string, documentation=u'The gml:scope property provides a description of the usage, or limitations of usage, for which this CRS-related object is valid. If unknown, enter "not known".')
_Namespace_gml.addCategoryObject('elementBinding', scope.name().localName(), scope)

definitionRef = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'definitionRef'), ReferenceType, documentation=u'')
_Namespace_gml.addCategoryObject('elementBinding', definitionRef.name().localName(), definitionRef)

directedFace = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'directedFace'), DirectedFacePropertyType, documentation=u'The gml:directedFace property element describes the boundary of topology solids, in the coBoundary of topology edges and is used in the support of surface features via the gml:TopoSurface expression, see below. The orientation attribute of type gml:SignType expresses the sense in which the included face is used i.e. inward or outward with respect to the surface normal in any geometric realisation.')
_Namespace_gml.addCategoryObject('elementBinding', directedFace.name().localName(), directedFace)

surfaceMember = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'surfaceMember'), SurfacePropertyType, documentation=u'This property element either references a surface via the XLink-attributes or contains the surface element. A surface element is any element, which is substitutable for gml:AbstractSurface.')
_Namespace_gml.addCategoryObject('elementBinding', surfaceMember.name().localName(), surfaceMember)

geocentricCRSRef = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'geocentricCRSRef'), GeocentricCRSPropertyType, documentation=u'')
_Namespace_gml.addCategoryObject('elementBinding', geocentricCRSRef.name().localName(), geocentricCRSRef)

curveArrayProperty = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'curveArrayProperty'), CurveArrayPropertyType, documentation=u'')
_Namespace_gml.addCategoryObject('elementBinding', curveArrayProperty.name().localName(), curveArrayProperty)

coordinateOperationRef = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'coordinateOperationRef'), CoordinateOperationPropertyType, documentation=u'')
_Namespace_gml.addCategoryObject('elementBinding', coordinateOperationRef.name().localName(), coordinateOperationRef)

MD_MaintenanceInformation = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_MaintenanceInformation'), MD_MaintenanceInformation_Type)
_Namespace_gmd.addCategoryObject('elementBinding', MD_MaintenanceInformation.name().localName(), MD_MaintenanceInformation)

Record = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gco, u'Record'), pyxb.binding.datatypes.anyType)
_Namespace_gco.addCategoryObject('elementBinding', Record.name().localName(), Record)

ProjectedCRS = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'ProjectedCRS'), ProjectedCRSType, documentation=u'gml:ProjectedCRS is a 2D coordinate reference system used to approximate the shape of the earth on a planar surface, but in such a way that the distortion that is inherent to the approximation is carefully controlled and known. Distortion correction is commonly applied to calculated bearings and distances to produce values that are a close match to actual field values.')
_Namespace_gml.addCategoryObject('elementBinding', ProjectedCRS.name().localName(), ProjectedCRS)

definitionMember = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'definitionMember'), DictionaryEntryType, documentation=u'')
_Namespace_gml.addCategoryObject('elementBinding', definitionMember.name().localName(), definitionMember)

track = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'track'), HistoryPropertyType, documentation=u'')
_Namespace_gml.addCategoryObject('elementBinding', track.name().localName(), track)

seconds = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'seconds'), ArcSecondsType, documentation=u'')
_Namespace_gml.addCategoryObject('elementBinding', seconds.name().localName(), seconds)

operationMethodRef = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'operationMethodRef'), OperationMethodPropertyType, documentation=u'')
_Namespace_gml.addCategoryObject('elementBinding', operationMethodRef.name().localName(), operationMethodRef)

usesTemporalCS = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'usesTemporalCS'), TemporalCSPropertyType, documentation=u'')
_Namespace_gml.addCategoryObject('elementBinding', usesTemporalCS.name().localName(), usesTemporalCS)

EllipsoidalCS = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'EllipsoidalCS'), EllipsoidalCSType, documentation=u'gml:EllipsoidalCS is a two- or three-dimensional coordinate system in which position is specified by geodetic latitude, geodetic longitude, and (in the three-dimensional case) ellipsoidal height. An EllipsoidalCS shall have two or three gml:axis property elements; the number of associations shall equal the dimension of the CS.')
_Namespace_gml.addCategoryObject('elementBinding', EllipsoidalCS.name().localName(), EllipsoidalCS)

CI_ResponsibleParty = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'CI_ResponsibleParty'), CI_ResponsibleParty_Type)
_Namespace_gmd.addCategoryObject('elementBinding', CI_ResponsibleParty.name().localName(), CI_ResponsibleParty)

DefinitionCollection = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'DefinitionCollection'), DictionaryType, documentation=u'')
_Namespace_gml.addCategoryObject('elementBinding', DefinitionCollection.name().localName(), DefinitionCollection)

AbstractSingleCRS = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractSingleCRS'), AbstractCRSType, abstract=pyxb.binding.datatypes.boolean(1), documentation=u'gml:AbstractSingleCRS implements a coordinate reference system consisting of one coordinate system and one datum (as opposed to a Compound CRS).')
_Namespace_gml.addCategoryObject('elementBinding', AbstractSingleCRS.name().localName(), AbstractSingleCRS)

DS_Series = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'DS_Series'), DS_Series_Type)
_Namespace_gmd.addCategoryObject('elementBinding', DS_Series.name().localName(), DS_Series)

MD_AggregateInformation = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_AggregateInformation'), MD_AggregateInformation_Type)
_Namespace_gmd.addCategoryObject('elementBinding', MD_AggregateInformation.name().localName(), MD_AggregateInformation)

DS_OtherAggregate = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'DS_OtherAggregate'), DS_OtherAggregate_Type)
_Namespace_gmd.addCategoryObject('elementBinding', DS_OtherAggregate.name().localName(), DS_OtherAggregate)

history = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'history'), HistoryPropertyType, documentation=u'A generic sequence of events constitute a gml:history of an object.\nThe gml:history element contains a set of elements in the substitution group headed by the abstract element gml:AbstractTimeSlice, representing the time-varying properties of interest. The history property of a dynamic feature associates a feature instance with a sequence of time slices (i.e. change events) that encapsulate the evolution of the feature.')
_Namespace_gml.addCategoryObject('elementBinding', history.name().localName(), history)

MD_ObligationCode = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_ObligationCode'), MD_ObligationCode_Type)
_Namespace_gmd.addCategoryObject('elementBinding', MD_ObligationCode.name().localName(), MD_ObligationCode)

conversionToPreferredUnit = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'conversionToPreferredUnit'), ConversionToPreferredUnitType, documentation=u'The elements gml:conversionToPreferredUnit and gml:roughConversionToPreferredUnit represent parameters used to convert conventional units to preferred units for this physical quantity type.  A preferred unit is either a Base Unit or a Derived Unit that is selected for all values of one physical quantity type.')
_Namespace_gml.addCategoryObject('elementBinding', conversionToPreferredUnit.name().localName(), conversionToPreferredUnit)

ArcByBulge = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'ArcByBulge'), ArcByBulgeType, documentation=u'An ArcByBulge is an arc string with only one arc unit, i.e. two control points, one bulge and one normal vector.\nAs arc is an arc string consisting of a single arc, the attribute "numArc" is fixed to "1".')
_Namespace_gml.addCategoryObject('elementBinding', ArcByBulge.name().localName(), ArcByBulge)

MD_ScopeCode = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_ScopeCode'), CodeListValue_Type)
_Namespace_gmd.addCategoryObject('elementBinding', MD_ScopeCode.name().localName(), MD_ScopeCode)

MultiPoint = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'MultiPoint'), MultiPointType, documentation=u'A gml:MultiPoint consists of one or more gml:Points.\nThe members of the geometric aggregate may be specified either using the "standard" property (gml:pointMember) or the array property (gml:pointMembers). It is also valid to use both the "standard" and the array properties in the same collection.')
_Namespace_gml.addCategoryObject('elementBinding', MultiPoint.name().localName(), MultiPoint)

topoCurveProperty = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'topoCurveProperty'), TopoCurvePropertyType, documentation=u'The gml:topoCurveProperty property element may be used in features to express their relationship to the referenced topology edges.')
_Namespace_gml.addCategoryObject('elementBinding', topoCurveProperty.name().localName(), topoCurveProperty)

CI_Date = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'CI_Date'), CI_Date_Type)
_Namespace_gmd.addCategoryObject('elementBinding', CI_Date.name().localName(), CI_Date)

usesCartesianCS = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'usesCartesianCS'), CartesianCSPropertyType, documentation=u'')
_Namespace_gml.addCategoryObject('elementBinding', usesCartesianCS.name().localName(), usesCartesianCS)

temporalDatum = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'temporalDatum'), TemporalDatumPropertyType, documentation=u'gml:temporalDatum is an association role to the temporal datum used by this CRS.')
_Namespace_gml.addCategoryObject('elementBinding', temporalDatum.name().localName(), temporalDatum)

generalConversionRef = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'generalConversionRef'), GeneralConversionPropertyType, documentation=u'')
_Namespace_gml.addCategoryObject('elementBinding', generalConversionRef.name().localName(), generalConversionRef)

group = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'group'), OperationParameterGroupPropertyType, documentation=u'gml:group is an association role to the operation parameter group for which this element provides parameter values.')
_Namespace_gml.addCategoryObject('elementBinding', group.name().localName(), group)

Envelope = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'Envelope'), EnvelopeType, documentation=u'Envelope defines an extent using a pair of positions defining opposite corners in arbitrary dimensions. The first direct position is the "lower corner" (a coordinate position consisting of all the minimal ordinates for each dimension for all points within the envelope), the second one the "upper corner" (a coordinate position consisting of all the maximal ordinates for each dimension for all points within the envelope).\nThe use of the properties "coordinates" and "pos" has been deprecated. The explicitly named properties "lowerCorner" and "upperCorner" shall be used instead.')
_Namespace_gml.addCategoryObject('elementBinding', Envelope.name().localName(), Envelope)

formula = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'formula'), CodeType, documentation=u'gml:formula Formula(s) or procedure used by an operation method. The use of the codespace attribite has been deprecated. The property value shall be a character string.')
_Namespace_gml.addCategoryObject('elementBinding', formula.name().localName(), formula)

coordinateSystemAxisRef = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'coordinateSystemAxisRef'), CoordinateSystemAxisPropertyType, documentation=u'')
_Namespace_gml.addCategoryObject('elementBinding', coordinateSystemAxisRef.name().localName(), coordinateSystemAxisRef)

AbstractObject = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gco, u'AbstractObject'), AbstractObject_Type, abstract=pyxb.binding.datatypes.boolean(1))
_Namespace_gco.addCategoryObject('elementBinding', AbstractObject.name().localName(), AbstractObject)

FeatureCollection = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'FeatureCollection'), FeatureCollectionType, documentation=u'')
_Namespace_gml.addCategoryObject('elementBinding', FeatureCollection.name().localName(), FeatureCollection)

Surface = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'Surface'), SurfaceType, documentation=u'A Surface is a 2-dimensional primitive and is composed of one or more surface patches as specified in ISO 19107:2003, 6.3.17.1. The surface patches are connected to one another.\npatches encapsulates the patches of the surface.')
_Namespace_gml.addCategoryObject('elementBinding', Surface.name().localName(), Surface)

minutes = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'minutes'), ArcMinutesType, documentation=u'')
_Namespace_gml.addCategoryObject('elementBinding', minutes.name().localName(), minutes)

directedEdge = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'directedEdge'), DirectedEdgePropertyType, documentation=u'A gml:directedEdge property element describes the boundary of topology faces, the coBoundary of topology nodes and is used in the support of topological line features via the gml:TopoCurve expression, see below. The orientation attribute of type gml:SignType expresses the sense in which the included edge is used, i.e. forward or reverse.')
_Namespace_gml.addCategoryObject('elementBinding', directedEdge.name().localName(), directedEdge)

MD_SecurityConstraints = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_SecurityConstraints'), MD_SecurityConstraints_Type)
_Namespace_gmd.addCategoryObject('elementBinding', MD_SecurityConstraints.name().localName(), MD_SecurityConstraints)

PolyhedralSurface = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'PolyhedralSurface'), SurfaceType, documentation=u'A polyhedral surface is a surface composed of polygon patches connected along their common boundary curves. This differs from the surface type only in the restriction on the types of surface patches acceptable.\npolygonPatches encapsulates the polygon patches of the polyhedral surface.')
_Namespace_gml.addCategoryObject('elementBinding', PolyhedralSurface.name().localName(), PolyhedralSurface)

featureMembers = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'featureMembers'), FeatureArrayPropertyType, documentation=u'')
_Namespace_gml.addCategoryObject('elementBinding', featureMembers.name().localName(), featureMembers)

Clothoid = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'Clothoid'), ClothoidType, documentation=u'A clothoid, or Cornu\'s spiral, is plane curve whose curvature is a fixed function of its length.\nrefLocation, startParameter, endParameter and scaleFactor have the same meaning as specified in ISO 19107:2003, 6.4.22.\ninterpolation is fixed as "clothoid".\nThe content model follows the general pattern for the encoding of curve segments.')
_Namespace_gml.addCategoryObject('elementBinding', Clothoid.name().localName(), Clothoid)

MD_Resolution = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_Resolution'), MD_Resolution_Type)
_Namespace_gmd.addCategoryObject('elementBinding', MD_Resolution.name().localName(), MD_Resolution)

MD_RangeDimension = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_RangeDimension'), MD_RangeDimension_Type)
_Namespace_gmd.addCategoryObject('elementBinding', MD_RangeDimension.name().localName(), MD_RangeDimension)

verticalCS = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'verticalCS'), VerticalCSPropertyType, documentation=u'gml:verticalCS is an association role to the vertical coordinate system used by this CRS.')
_Namespace_gml.addCategoryObject('elementBinding', verticalCS.name().localName(), verticalCS)

imageCRSRef = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'imageCRSRef'), ImageCRSPropertyType, documentation=u'')
_Namespace_gml.addCategoryObject('elementBinding', imageCRSRef.name().localName(), imageCRSRef)

remarks = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'remarks'), pyxb.binding.datatypes.string)
_Namespace_gml.addCategoryObject('elementBinding', remarks.name().localName(), remarks)

usesMethod = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'usesMethod'), OperationMethodPropertyType, documentation=u'')
_Namespace_gml.addCategoryObject('elementBinding', usesMethod.name().localName(), usesMethod)

topoPrimitiveMembers = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'topoPrimitiveMembers'), TopoPrimitiveArrayAssociationType, documentation=u'The gml:topoPrimitiveMembers property element encodes the relationship between a topology complex and an arbitrary number of topology primitives.')
_Namespace_gml.addCategoryObject('elementBinding', topoPrimitiveMembers.name().localName(), topoPrimitiveMembers)

MD_SpatialRepresentationTypeCode = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_SpatialRepresentationTypeCode'), CodeListValue_Type)
_Namespace_gmd.addCategoryObject('elementBinding', MD_SpatialRepresentationTypeCode.name().localName(), MD_SpatialRepresentationTypeCode)

componentReferenceSystem = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'componentReferenceSystem'), SingleCRSPropertyType, documentation=u'The gml:componentReferenceSystem elements are an ordered sequence of associations to all the component coordinate reference systems included in this compound coordinate reference system. The gml:AggregationAttributeGroup should be used to specify that the gml:componentReferenceSystem properties are ordered.')
_Namespace_gml.addCategoryObject('elementBinding', componentReferenceSystem.name().localName(), componentReferenceSystem)

LocationKeyWord = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'LocationKeyWord'), CodeType, documentation=u'')
_Namespace_gml.addCategoryObject('elementBinding', LocationKeyWord.name().localName(), LocationKeyWord)

exterior = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'exterior'), AbstractRingPropertyType, documentation=u'A boundary of a surface consists of a number of rings. In the normal 2D case, one of these rings is distinguished as being the exterior boundary. In a general manifold this is not always possible, in which case all boundaries shall be listed as interior boundaries, and the exterior will be empty.')
_Namespace_gml.addCategoryObject('elementBinding', exterior.name().localName(), exterior)

BSpline = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'BSpline'), BSplineType, documentation=u'A B-Spline is a piecewise parametric polynomial or rational curve described in terms of control points and basis functions as specified in ISO 19107:2003, 6.4.30. Therefore, interpolation may be either "polynomialSpline" or "rationalSpline" depending on the interpolation type; default is "polynomialSpline".\ndegree shall be the degree of the polynomial used for interpolation in this spline.\nknot shall be the sequence of distinct knots used to define the spline basis functions (see ISO 19107:2003, 6.4.26.2).\nThe attribute isPolynomial shall be set to "true" if this is a polynomial spline (see ISO 19107:2003, 6.4.30.5).\nThe attribute knotType shall provide the type of knot distribution used in defining this spline (see ISO 19107:2003, 6.4.30.4).\nThe content model follows the general pattern for the encoding of curve segments.')
_Namespace_gml.addCategoryObject('elementBinding', BSpline.name().localName(), BSpline)

conversion = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'conversion'), GeneralConversionPropertyType, documentation=u'gml:conversion is an association role to the coordinate conversion used to define the derived CRS.')
_Namespace_gml.addCategoryObject('elementBinding', conversion.name().localName(), conversion)

GridFunction = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'GridFunction'), GridFunctionType, documentation=u'gml:GridFunction provides an explicit mapping rule for grid geometries, i.e. the domain shall be a geometry of type grid.  It describes the mapping of grid posts (discrete point grid coverage) or grid cells (discrete surface coverage) to the values in the range set.\nThe gml:startPoint is the index position of a point in the grid that is mapped to the first point in the range set (this is also the index position of the first grid post).  If the gml:startPoint property is omitted the gml:startPoint is assumed to be equal to the value of gml:low in the gml:Grid geometry. Subsequent points in the mapping are determined by the value of the gml:sequenceRule.')
_Namespace_gml.addCategoryObject('elementBinding', GridFunction.name().localName(), GridFunction)

multiCoverage = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'multiCoverage'), MultiSurfacePropertyType, documentation=u'')
_Namespace_gml.addCategoryObject('elementBinding', multiCoverage.name().localName(), multiCoverage)

parameterValue = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'parameterValue'), AbstractGeneralParameterValuePropertyType, documentation=u'gml:parameterValue is a composition association to a parameter value or group of parameter values used by a coordinate operation.')
_Namespace_gml.addCategoryObject('elementBinding', parameterValue.name().localName(), parameterValue)

VerticalCS = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'VerticalCS'), VerticalCSType, documentation=u"gml:VerticalCS is a one-dimensional coordinate system used to record the heights or depths of points. Such a coordinate system is usually dependent on the Earth's gravity field, perhaps loosely as when atmospheric pressure is the basis for the vertical coordinate system axis. A VerticalCS shall have one gml:axis property element.")
_Namespace_gml.addCategoryObject('elementBinding', VerticalCS.name().localName(), VerticalCS)

Grid = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'Grid'), GridType, documentation=u'The gml:Grid implicitly defines an unrectified grid, which is a network composed of two or more sets of curves in which the members of each set intersect the members of the other sets in an algorithmic way.  The region of interest within the grid is given in terms of its gml:limits, being the grid coordinates of  diagonally opposed corners of a rectangular region.  gml:axisLabels is provided with a list of labels of the axes of the grid (gml:axisName has been deprecated). gml:dimension specifies the dimension of the grid.  \nThe gml:limits element contains a single gml:GridEnvelope. The gml:low and gml:high property elements of the envelope are each integerLists, which are coordinate tuples, the coordinates being measured as offsets from the origin of the grid along each axis, of the diagonally opposing corners of a "rectangular" region of interest.')
_Namespace_gml.addCategoryObject('elementBinding', Grid.name().localName(), Grid)

CI_OnlineResource = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'CI_OnlineResource'), CI_OnlineResource_Type)
_Namespace_gmd.addCategoryObject('elementBinding', CI_OnlineResource.name().localName(), CI_OnlineResource)

compoundCRSRef = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'compoundCRSRef'), CompoundCRSPropertyType, documentation=u'')
_Namespace_gml.addCategoryObject('elementBinding', compoundCRSRef.name().localName(), compoundCRSRef)

LocalisedCharacterString = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'LocalisedCharacterString'), LocalisedCharacterString_Type)
_Namespace_gmd.addCategoryObject('elementBinding', LocalisedCharacterString.name().localName(), LocalisedCharacterString)

MD_ExtendedElementInformation = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_ExtendedElementInformation'), MD_ExtendedElementInformation_Type)
_Namespace_gmd.addCategoryObject('elementBinding', MD_ExtendedElementInformation.name().localName(), MD_ExtendedElementInformation)

userDefinedCS = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'userDefinedCS'), UserDefinedCSPropertyType, documentation=u'gml:userDefinedCS is an association role to the user defined coordinate system used by this CRS.')
_Namespace_gml.addCategoryObject('elementBinding', userDefinedCS.name().localName(), userDefinedCS)

generalOperationParameter = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'generalOperationParameter'), AbstractGeneralOperationParameterPropertyType, documentation=u'')
_Namespace_gml.addCategoryObject('elementBinding', generalOperationParameter.name().localName(), generalOperationParameter)

affineCS = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'affineCS'), AffineCSPropertyType, documentation=u'gml:affineCS is an association role to the affine coordinate system used by this CRS.')
_Namespace_gml.addCategoryObject('elementBinding', affineCS.name().localName(), affineCS)

MultiCurve = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'MultiCurve'), MultiCurveType, documentation=u'A gml:MultiCurve is defined by one or more gml:AbstractCurves.\nThe members of the geometric aggregate may be specified either using the "standard" property (gml:curveMember) or the array property (gml:curveMembers). It is also valid to use both the "standard" and the array properties in the same collection.')
_Namespace_gml.addCategoryObject('elementBinding', MultiCurve.name().localName(), MultiCurve)

target = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'target'), TargetPropertyType)
_Namespace_gml.addCategoryObject('elementBinding', target.name().localName(), target)

Solid = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'Solid'), SolidType, documentation=u'A solid is the basis for 3-dimensional geometry. The extent of a solid is defined by the boundary surfaces as specified in ISO 19107:2003, 6.3.18. exterior specifies the outer boundary, interior the inner boundary of the solid.')
_Namespace_gml.addCategoryObject('elementBinding', Solid.name().localName(), Solid)

referenceSystemRef = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'referenceSystemRef'), CRSPropertyType, documentation=u'')
_Namespace_gml.addCategoryObject('elementBinding', referenceSystemRef.name().localName(), referenceSystemRef)

LineString = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'LineString'), LineStringType, documentation=u'A LineString is a special curve that consists of a single segment with linear interpolation. It is defined by two or more coordinate tuples, with linear interpolation between them. The number of direct positions in the list shall be at least two.')
_Namespace_gml.addCategoryObject('elementBinding', LineString.name().localName(), LineString)

MD_MediumNameCode = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_MediumNameCode'), CodeListValue_Type)
_Namespace_gmd.addCategoryObject('elementBinding', MD_MediumNameCode.name().localName(), MD_MediumNameCode)

ellipsoidalCSRef = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'ellipsoidalCSRef'), EllipsoidalCSPropertyType, documentation=u'')
_Namespace_gml.addCategoryObject('elementBinding', ellipsoidalCSRef.name().localName(), ellipsoidalCSRef)

coordinates = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'coordinates'), CoordinatesType, documentation=u'')
_Namespace_gml.addCategoryObject('elementBinding', coordinates.name().localName(), coordinates)

MultiplicityRange = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gco, u'MultiplicityRange'), MultiplicityRange_Type)
_Namespace_gco.addCategoryObject('elementBinding', MultiplicityRange.name().localName(), MultiplicityRange)

CompositeSurface = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'CompositeSurface'), CompositeSurfaceType, documentation=u'A gml:CompositeSurface is represented by a set of orientable surfaces. It is geometry type with all the geometric properties of a (primitive) surface. Essentially, a composite surface is a collection of surfaces that join in pairs on common boundary curves and which, when considered as a whole, form a single surface.\nsurfaceMember references or contains inline one surface in the composite surface. \nThe surfaces are contiguous.')
_Namespace_gml.addCategoryObject('elementBinding', CompositeSurface.name().localName(), CompositeSurface)

QuantityList = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'QuantityList'), MeasureOrNilReasonListType)
_Namespace_gml.addCategoryObject('elementBinding', QuantityList.name().localName(), QuantityList)

solidArrayProperty = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'solidArrayProperty'), SolidArrayPropertyType, documentation=u'')
_Namespace_gml.addCategoryObject('elementBinding', solidArrayProperty.name().localName(), solidArrayProperty)

geographicCRSRef = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'geographicCRSRef'), GeographicCRSPropertyType, documentation=u'')
_Namespace_gml.addCategoryObject('elementBinding', geographicCRSRef.name().localName(), geographicCRSRef)

CI_RoleCode = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'CI_RoleCode'), CodeListValue_Type)
_Namespace_gmd.addCategoryObject('elementBinding', CI_RoleCode.name().localName(), CI_RoleCode)

Definition = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'Definition'), DefinitionType, documentation=u'The basic gml:Definition element specifies a definition, which can be included in or referenced by a dictionary. \nThe content model for a generic definition is a derivation from gml:AbstractGMLType.  \nThe gml:description property element shall hold the definition if this can be captured in a simple text string, or the gml:descriptionReference property element may carry a link to a description elsewhere.\nThe gml:identifier element shall provide one identifier identifying this definition. The identifier shall be unique within the dictionaries using this definition. \nThe gml:name elements shall provide zero or more terms and synonyms for which this is the definition.\nThe gml:remarks element shall be used to hold additional textual information that is not conceptually part of the definition but is useful in understanding the definition.')
_Namespace_gml.addCategoryObject('elementBinding', Definition.name().localName(), Definition)

AbstractDQ_Element = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'AbstractDQ_Element'), AbstractDQ_Element_Type, abstract=pyxb.binding.datatypes.boolean(1))
_Namespace_gmd.addCategoryObject('elementBinding', AbstractDQ_Element.name().localName(), AbstractDQ_Element)

DQ_RelativeInternalPositionalAccuracy = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'DQ_RelativeInternalPositionalAccuracy'), DQ_RelativeInternalPositionalAccuracy_Type)
_Namespace_gmd.addCategoryObject('elementBinding', DQ_RelativeInternalPositionalAccuracy.name().localName(), DQ_RelativeInternalPositionalAccuracy)

usesImageDatum = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'usesImageDatum'), ImageDatumPropertyType, documentation=u'')
_Namespace_gml.addCategoryObject('elementBinding', usesImageDatum.name().localName(), usesImageDatum)

AbstractDS_Aggregate = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'AbstractDS_Aggregate'), AbstractDS_Aggregate_Type, abstract=pyxb.binding.datatypes.boolean(1))
_Namespace_gmd.addCategoryObject('elementBinding', AbstractDS_Aggregate.name().localName(), AbstractDS_Aggregate)

primeMeridianRef = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'primeMeridianRef'), PrimeMeridianPropertyType, documentation=u'')
_Namespace_gml.addCategoryObject('elementBinding', primeMeridianRef.name().localName(), primeMeridianRef)

GeocentricCRS = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'GeocentricCRS'), GeocentricCRSType, documentation=u'')
_Namespace_gml.addCategoryObject('elementBinding', GeocentricCRS.name().localName(), GeocentricCRS)

rangeSet = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'rangeSet'), RangeSetType, documentation=u'The gml:rangeSet property element contains the values of the coverage (sometimes called the attribute values).  Its content model is given by gml:RangeSetType.\nThis content model supports a structural description of the range.  The semantic information describing the range set is embedded using a uniform method, as part of the explicit values, or as a template value accompanying the representation using gml:DataBlock and gml:File.\nThe values from each component (or "band") in the range may be encoded within a gml:ValueArray element or a concrete member of the gml:AbstractScalarValueList substitution group . Use of these elements satisfies the value-type homogeneity requirement.')
_Namespace_gml.addCategoryObject('elementBinding', rangeSet.name().localName(), rangeSet)

topoComplexProperty = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'topoComplexProperty'), TopoComplexPropertyType, documentation=u'')
_Namespace_gml.addCategoryObject('elementBinding', topoComplexProperty.name().localName(), topoComplexProperty)

multiCenterLineOf = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'multiCenterLineOf'), MultiCurvePropertyType, documentation=u'')
_Namespace_gml.addCategoryObject('elementBinding', multiCenterLineOf.name().localName(), multiCenterLineOf)

MD_Metadata = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_Metadata'), MD_Metadata_Type)
_Namespace_gmd.addCategoryObject('elementBinding', MD_Metadata.name().localName(), MD_Metadata)

AbstractTimeComplex = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractTimeComplex'), AbstractTimeComplexType, abstract=pyxb.binding.datatypes.boolean(1), documentation=u'gml:AbstractTimeComplex is an aggregation of temporal primitives and acts as the head of a substitution group for temporal complexes.')
_Namespace_gml.addCategoryObject('elementBinding', AbstractTimeComplex.name().localName(), AbstractTimeComplex)

usesAffineCS = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'usesAffineCS'), AffineCSPropertyType, documentation=u'')
_Namespace_gml.addCategoryObject('elementBinding', usesAffineCS.name().localName(), usesAffineCS)

MD_ScopeDescription = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_ScopeDescription'), MD_ScopeDescription_Type)
_Namespace_gmd.addCategoryObject('elementBinding', MD_ScopeDescription.name().localName(), MD_ScopeDescription)

CountExtent = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'CountExtent'), CountExtentType)
_Namespace_gml.addCategoryObject('elementBinding', CountExtent.name().localName(), CountExtent)

AbstractDiscreteCoverage = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractDiscreteCoverage'), DiscreteCoverageType, abstract=pyxb.binding.datatypes.boolean(1), documentation=u'A discrete coverage consists of a domain set, range set and optionally a coverage function. The domain set consists of either spatial or temporal geometry objects, finite in number. The range set is comprised of a finite number of attribute values each of which is associated to every direct position within any single spatiotemporal object in the domain. In other words, the range values are constant on each spatiotemporal object in the domain. This coverage function maps each element from the coverage domain to an element in its range. The coverageFunction element describes the mapping function.\nThis element serves as the head of a substitution group which may contain any discrete coverage whose type is derived from gml:DiscreteCoverageType.')
_Namespace_gml.addCategoryObject('elementBinding', AbstractDiscreteCoverage.name().localName(), AbstractDiscreteCoverage)

AbstractSurface = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractSurface'), AbstractSurfaceType, abstract=pyxb.binding.datatypes.boolean(1), documentation=u'The AbstractSurface element is the abstract head of the substitution group for all (continuous) surface elements.')
_Namespace_gml.addCategoryObject('elementBinding', AbstractSurface.name().localName(), AbstractSurface)

MD_Keywords = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_Keywords'), MD_Keywords_Type)
_Namespace_gmd.addCategoryObject('elementBinding', MD_Keywords.name().localName(), MD_Keywords)

definedByConversion = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'definedByConversion'), GeneralConversionPropertyType, documentation=u'')
_Namespace_gml.addCategoryObject('elementBinding', definedByConversion.name().localName(), definedByConversion)

concatenatedOperationRef = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'concatenatedOperationRef'), ConcatenatedOperationPropertyType, documentation=u'')
_Namespace_gml.addCategoryObject('elementBinding', concatenatedOperationRef.name().localName(), concatenatedOperationRef)

greenwichLongitude = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'greenwichLongitude'), AngleType, documentation=u'gml:greenwichLongitude is the longitude of the prime meridian measured from the Greenwich meridian, positive eastward. If the value of the prime meridian "name" is "Greenwich" then the value of greenwichLongitude shall be 0 degrees.')
_Namespace_gml.addCategoryObject('elementBinding', greenwichLongitude.name().localName(), greenwichLongitude)

TemporalCS = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'TemporalCS'), TemporalCSType, documentation=u'')
_Namespace_gml.addCategoryObject('elementBinding', TemporalCS.name().localName(), TemporalCS)

LanguageCode = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'LanguageCode'), CodeListValue_Type)
_Namespace_gmd.addCategoryObject('elementBinding', LanguageCode.name().localName(), LanguageCode)

CompositeValue = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'CompositeValue'), CompositeValueType, documentation=u'gml:CompositeValue is an aggregate value built from other values . It contains zero or an arbitrary number of gml:valueComponent elements, and zero or one gml:valueComponents property elements.  It may be used for strongly coupled aggregates (vectors, tensors) or for arbitrary collections of values.')
_Namespace_gml.addCategoryObject('elementBinding', CompositeValue.name().localName(), CompositeValue)

RectifiedGrid = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'RectifiedGrid'), RectifiedGridType, documentation=u'A rectified grid is a grid for which there is an affine transformation between the grid coordinates and the coordinates of an external coordinate reference system. It is defined by specifying the position (in some geometric space) of the grid "origin" and of the vectors that specify the post locations.\nNote that the grid limits (post indexes) and axis name properties are inherited from gml:GridType and that gml:RectifiedGrid adds a gml:origin property (contains or references a gml:Point) and a set of gml:offsetVector properties.')
_Namespace_gml.addCategoryObject('elementBinding', RectifiedGrid.name().localName(), RectifiedGrid)

linearCS = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'linearCS'), LinearCSPropertyType, documentation=u'gml:linearCS is an association role to the linear coordinate system used by this CRS.')
_Namespace_gml.addCategoryObject('elementBinding', linearCS.name().localName(), linearCS)

AbstractCurveSegment = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractCurveSegment'), AbstractCurveSegmentType, abstract=pyxb.binding.datatypes.boolean(1), documentation=u'A curve segment defines a homogeneous segment of a curve.\nThe attributes numDerivativesAtStart, numDerivativesAtEnd and numDerivativesInterior specify the type of continuity as specified in ISO 19107:2003, 6.4.9.3.\nThe AbstractCurveSegment element is the abstract head of the substituition group for all curve segment elements, i.e. continuous segments of the same interpolation mechanism.\nAll curve segments shall have an attribute interpolation with type gml:CurveInterpolationType specifying the curve interpolation mechanism used for this segment. This mechanism uses the control points and control parameters to determine the position of this curve segment.')
_Namespace_gml.addCategoryObject('elementBinding', AbstractCurveSegment.name().localName(), AbstractCurveSegment)

polarCSRef = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'polarCSRef'), PolarCSPropertyType, documentation=u'')
_Namespace_gml.addCategoryObject('elementBinding', polarCSRef.name().localName(), polarCSRef)

LI_Source = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'LI_Source'), LI_Source_Type)
_Namespace_gmd.addCategoryObject('elementBinding', LI_Source.name().localName(), LI_Source)

DS_ProductionSeries = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'DS_ProductionSeries'), DS_ProductionSeries_Type)
_Namespace_gmd.addCategoryObject('elementBinding', DS_ProductionSeries.name().localName(), DS_ProductionSeries)

identifier = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'), CodeWithAuthorityType, documentation=u'Often, a special identifier is assigned to an object by the maintaining authority with the intention that it is used in references to the object For such cases, the codeSpace shall be provided. That identifier is usually unique either globally or within an application domain. gml:identifier is a pre-defined property for such identifiers.')
_Namespace_gml.addCategoryObject('elementBinding', identifier.name().localName(), identifier)

Real = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gco, u'Real'), pyxb.binding.datatypes.double)
_Namespace_gco.addCategoryObject('elementBinding', Real.name().localName(), Real)

Circle = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'Circle'), CircleType, documentation=u'A Circle is an arc whose ends coincide to form a simple closed loop. The three control points shall be distinct non-co-linear points for the circle to be unambiguously defined. The arc is simply extended past the third control point until the first control point is encountered.')
_Namespace_gml.addCategoryObject('elementBinding', Circle.name().localName(), Circle)

includesParameter = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'includesParameter'), AbstractGeneralOperationParameterPropertyType, documentation=u'')
_Namespace_gml.addCategoryObject('elementBinding', includesParameter.name().localName(), includesParameter)

verticalDatumRef = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'verticalDatumRef'), VerticalDatumPropertyType, documentation=u'')
_Namespace_gml.addCategoryObject('elementBinding', verticalDatumRef.name().localName(), verticalDatumRef)

MD_CoverageContentTypeCode = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_CoverageContentTypeCode'), CodeListValue_Type)
_Namespace_gmd.addCategoryObject('elementBinding', MD_CoverageContentTypeCode.name().localName(), MD_CoverageContentTypeCode)

Boolean_ = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gco, u'Boolean'), pyxb.binding.datatypes.boolean)
_Namespace_gco.addCategoryObject('elementBinding', Boolean_.name().localName(), Boolean_)

GeodesicString = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'GeodesicString'), GeodesicStringType, documentation=u'A sequence of geodesic segments. \nThe number of control points shall be at least two.\ninterpolation is fixed as "geodesic".\nThe content model follows the general pattern for the encoding of curve segments.')
_Namespace_gml.addCategoryObject('elementBinding', GeodesicString.name().localName(), GeodesicString)

AbstractSolid = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractSolid'), AbstractSolidType, abstract=pyxb.binding.datatypes.boolean(1), documentation=u'The AbstractSolid element is the abstract head of the substituition group for all (continuous) solid elements.')
_Namespace_gml.addCategoryObject('elementBinding', AbstractSolid.name().localName(), AbstractSolid)

MD_Identifier = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_Identifier'), MD_Identifier_Type)
_Namespace_gmd.addCategoryObject('elementBinding', MD_Identifier.name().localName(), MD_Identifier)

engineeringCRSRef = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'engineeringCRSRef'), EngineeringCRSPropertyType, documentation=u'')
_Namespace_gml.addCategoryObject('elementBinding', engineeringCRSRef.name().localName(), engineeringCRSRef)

valueFile = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'valueFile'), pyxb.binding.datatypes.anyURI, documentation=u'gml:valueFile is a reference to a file or a part of a file containing one or more parameter values, each numeric value with its associated unit of measure. When referencing a part of a file, that file shall contain multiple identified parts, such as an XML encoded document. Furthermore, the referenced file or part of a file may reference another part of the same or different files, as allowed in XML documents.')
_Namespace_gml.addCategoryObject('elementBinding', valueFile.name().localName(), valueFile)

CompositeSolid = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'CompositeSolid'), CompositeSolidType, documentation=u'gml:CompositeSolid implements ISO 19107 GM_CompositeSolid (see ISO 19107:2003, 6.6.7) as specified in D.2.3.6. \nA gml:CompositeSolid is represented by a set of orientable surfaces. It is a geometry type with all the geometric properties of a (primitive) solid. Essentially, a composite solid is a collection of solids that join in pairs on common boundary surfaces and which, when considered as a whole, form a single solid. \nsolidMember references or contains one solid in the composite solid. The solids are contiguous.')
_Namespace_gml.addCategoryObject('elementBinding', CompositeSolid.name().localName(), CompositeSolid)

Length = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gco, u'Length'), LengthType)
_Namespace_gco.addCategoryObject('elementBinding', Length.name().localName(), Length)

OrientableCurve = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'OrientableCurve'), OrientableCurveType, documentation=u'OrientableCurve consists of a curve and an orientation. If the orientation is "+", then the OrientableCurve is identical to the baseCurve. If the orientation is "-", then the OrientableCurve is related to another AbstractCurve with a parameterization that reverses the sense of the curve traversal.')
_Namespace_gml.addCategoryObject('elementBinding', OrientableCurve.name().localName(), OrientableCurve)

MD_DigitalTransferOptions = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_DigitalTransferOptions'), MD_DigitalTransferOptions_Type)
_Namespace_gmd.addCategoryObject('elementBinding', MD_DigitalTransferOptions.name().localName(), MD_DigitalTransferOptions)

status = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'status'), StringOrRefType, documentation=u'')
_Namespace_gml.addCategoryObject('elementBinding', status.name().localName(), status)

DQ_QuantitativeAttributeAccuracy = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'DQ_QuantitativeAttributeAccuracy'), DQ_QuantitativeAttributeAccuracy_Type)
_Namespace_gmd.addCategoryObject('elementBinding', DQ_QuantitativeAttributeAccuracy.name().localName(), DQ_QuantitativeAttributeAccuracy)

TopoSolid = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'TopoSolid'), TopoSolidType, documentation=u'gml:TopoSolid represents the 3-dimensional topology primitive. \nThe topological boundary of a solid (gml:directedFace) consists of a set of directed faces.\nA solid may optionally be realised by a 3-dimensional geometric primitive (gml:solidProperty).')
_Namespace_gml.addCategoryObject('elementBinding', TopoSolid.name().localName(), TopoSolid)

AbstractDQ_TemporalAccuracy = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'AbstractDQ_TemporalAccuracy'), AbstractDQ_TemporalAccuracy_Type, abstract=pyxb.binding.datatypes.boolean(1))
_Namespace_gmd.addCategoryObject('elementBinding', AbstractDQ_TemporalAccuracy.name().localName(), AbstractDQ_TemporalAccuracy)

EX_GeographicDescription = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'EX_GeographicDescription'), EX_GeographicDescription_Type)
_Namespace_gmd.addCategoryObject('elementBinding', EX_GeographicDescription.name().localName(), EX_GeographicDescription)

domainSet = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'domainSet'), DomainSetType, documentation=u'The gml:domainSet property element describes the spatio-temporal region of interest, within which the coverage is defined. Its content model is given by gml:DomainSetType.\nThe value of the domain is thus a choice between a gml:AbstractGeometry and a gml:AbstractTimeObject.  In the instance these abstract elements will normally be substituted by a geometry complex or temporal complex, to represent spatial coverages and time-series, respectively.  \nThe presence of the gml:AssociationAttributeGroup means that domainSet follows the usual GML property model and may use the xlink:href attribute to point to the domain, as an alternative to describing the domain inline. Ownership semantics may be provided using the gml:OwnershipAttributeGroup.\n')
_Namespace_gml.addCategoryObject('elementBinding', domainSet.name().localName(), domainSet)

topoPointProperty = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'topoPointProperty'), TopoPointPropertyType, documentation=u'The gml:topoPointProperty property element may be used in features to express their relationship to the referenced topology node.')
_Namespace_gml.addCategoryObject('elementBinding', topoPointProperty.name().localName(), topoPointProperty)

obliqueCartesianCSRef = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'obliqueCartesianCSRef'), ObliqueCartesianCSPropertyType, documentation=u'')
_Namespace_gml.addCategoryObject('elementBinding', obliqueCartesianCSRef.name().localName(), obliqueCartesianCSRef)

TemporalCRS = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'TemporalCRS'), TemporalCRSType, documentation=u'gml:TemporalCRS is a 1D coordinate reference system used for the recording of time.')
_Namespace_gml.addCategoryObject('elementBinding', TemporalCRS.name().localName(), TemporalCRS)

Integer = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gco, u'Integer'), pyxb.binding.datatypes.integer)
_Namespace_gco.addCategoryObject('elementBinding', Integer.name().localName(), Integer)

targetElement = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'targetElement'), pyxb.binding.datatypes.string)
_Namespace_gml.addCategoryObject('elementBinding', targetElement.name().localName(), targetElement)

AbstractGeneralConversion = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractGeneralConversion'), AbstractGeneralConversionType, abstract=pyxb.binding.datatypes.boolean(1), documentation=u'gm:AbstractGeneralConversion is an abstract operation on coordinates that does not include any change of datum. The best-known example of a coordinate conversion is a map projection. The parameters describing coordinate conversions are defined rather than empirically derived. Note that some conversions have no parameters. The operationVersion, sourceCRS, and targetCRS elements are omitted in a coordinate conversion.\nThis abstract complex type is expected to be extended for well-known operation methods with many Conversion instances, in GML Application Schemas that define operation-method-specialized element names and contents. This conversion uses an operation method, usually with associated parameter values. However, operation methods and parameter values are directly associated with concrete subtypes, not with this abstract type. All concrete types derived from this type shall extend this type to include a "usesMethod" element that references the "OperationMethod" element. Similarly, all concrete types derived from this type shall extend this type to include zero or more elements each named "uses...Value" that each use the type of an element substitutable for the "AbstractGeneralParameterValue" element.')
_Namespace_gml.addCategoryObject('elementBinding', AbstractGeneralConversion.name().localName(), AbstractGeneralConversion)

PT_LocaleContainer = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'PT_LocaleContainer'), PT_LocaleContainer_Type)
_Namespace_gmd.addCategoryObject('elementBinding', PT_LocaleContainer.name().localName(), PT_LocaleContainer)

DS_StereoMate = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'DS_StereoMate'), DS_StereoMate_Type)
_Namespace_gmd.addCategoryObject('elementBinding', DS_StereoMate.name().localName(), DS_StereoMate)

MD_BrowseGraphic = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_BrowseGraphic'), MD_BrowseGraphic_Type)
_Namespace_gmd.addCategoryObject('elementBinding', MD_BrowseGraphic.name().localName(), MD_BrowseGraphic)

SecondDefiningParameter = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'SecondDefiningParameter'), CTD_ANON_9)
_Namespace_gml.addCategoryObject('elementBinding', SecondDefiningParameter.name().localName(), SecondDefiningParameter)

baseSurface = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'baseSurface'), SurfacePropertyType, documentation=u'The property baseSurface references or contains the base surface. The property baseSurface either references the base surface via the XLink-attributes or contains the surface element. A surface element is any element which is substitutable for gml:AbstractSurface. The base surface has positive orientation.')
_Namespace_gml.addCategoryObject('elementBinding', baseSurface.name().localName(), baseSurface)

descriptionReference = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'), ReferenceType, documentation=u'The value of this property is a remote text description of the object. The xlink:href attribute of the gml:descriptionReference property references the external description.')
_Namespace_gml.addCategoryObject('elementBinding', descriptionReference.name().localName(), descriptionReference)

usesEllipsoid = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'usesEllipsoid'), EllipsoidPropertyType, documentation=u'')
_Namespace_gml.addCategoryObject('elementBinding', usesEllipsoid.name().localName(), usesEllipsoid)

AbstractTopology = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractTopology'), AbstractTopologyType, abstract=pyxb.binding.datatypes.boolean(1))
_Namespace_gml.addCategoryObject('elementBinding', AbstractTopology.name().localName(), AbstractTopology)

CartesianCS = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'CartesianCS'), CartesianCSType, documentation=u'gml:CartesianCS is a 1-, 2-, or 3-dimensional coordinate system. In the 1-dimensional case, it contains a single straight coordinate axis. In the 2- and 3-dimensional cases gives the position of points relative to orthogonal straight axes. In the multi-dimensional case, all axes shall have the same length unit of measure. A CartesianCS shall have one, two, or three gml:axis property elements.')
_Namespace_gml.addCategoryObject('elementBinding', CartesianCS.name().localName(), CartesianCS)

VerticalDatum = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'VerticalDatum'), VerticalDatumType, documentation=u'gml:VerticalDatum is a textual description and/or a set of parameters identifying a particular reference level surface used as a zero-height surface, including its position with respect to the Earth for any of the height types recognized by this International Standard.')
_Namespace_gml.addCategoryObject('elementBinding', VerticalDatum.name().localName(), VerticalDatum)

Angle = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gco, u'Angle'), AngleType)
_Namespace_gco.addCategoryObject('elementBinding', Angle.name().localName(), Angle)

AbstractRS_ReferenceSystem = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'AbstractRS_ReferenceSystem'), AbstractRS_ReferenceSystem_Type, abstract=pyxb.binding.datatypes.boolean(1))
_Namespace_gmd.addCategoryObject('elementBinding', AbstractRS_ReferenceSystem.name().localName(), AbstractRS_ReferenceSystem)

temporalDatumRef = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'temporalDatumRef'), TemporalDatumPropertyType, documentation=u'')
_Namespace_gml.addCategoryObject('elementBinding', temporalDatumRef.name().localName(), temporalDatumRef)

temporalCRSRef = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'temporalCRSRef'), TemporalCRSPropertyType, documentation=u'')
_Namespace_gml.addCategoryObject('elementBinding', temporalCRSRef.name().localName(), temporalCRSRef)

Count = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'Count'), CTD_ANON_6, nillable=pyxb.binding.datatypes.boolean(1))
_Namespace_gml.addCategoryObject('elementBinding', Count.name().localName(), Count)

TypeName = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gco, u'TypeName'), TypeName_Type)
_Namespace_gco.addCategoryObject('elementBinding', TypeName.name().localName(), TypeName)

DataBlock = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'DataBlock'), DataBlockType, documentation=u'gml:DataBlock describes the Range as a block of text encoded values similar to a Common Separated Value (CSV) representation.\nThe range set parameterization is described by the property gml:rangeParameters.')
_Namespace_gml.addCategoryObject('elementBinding', DataBlock.name().localName(), DataBlock)

AbstractRing = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractRing'), AbstractRingType, abstract=pyxb.binding.datatypes.boolean(1), documentation=u'An abstraction of a ring to support surface boundaries of different complexity.\nThe AbstractRing element is the abstract head of the substituition group for all closed boundaries of a surface patch.')
_Namespace_gml.addCategoryObject('elementBinding', AbstractRing.name().localName(), AbstractRing)

TopoVolume = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'TopoVolume'), TopoVolumeType, documentation=u'gml:TopoVolume represents a homogeneous topological expression, a set of directed topologic solids, which if realised are isomorphic to a geometric solid primitive. The intended use of gml:TopoVolume is to appear within a solid feature to express the structural and geometric relationships of this solid feature to other features via the shared solid definitions.')
_Namespace_gml.addCategoryObject('elementBinding', TopoVolume.name().localName(), TopoVolume)

derivedCRSRef = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'derivedCRSRef'), DerivedCRSPropertyType, documentation=u'')
_Namespace_gml.addCategoryObject('elementBinding', derivedCRSRef.name().localName(), derivedCRSRef)

curveMember = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'curveMember'), CurvePropertyType)
_Namespace_gml.addCategoryObject('elementBinding', curveMember.name().localName(), curveMember)

singleCRSRef = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'singleCRSRef'), SingleCRSPropertyType, documentation=u'')
_Namespace_gml.addCategoryObject('elementBinding', singleCRSRef.name().localName(), singleCRSRef)

AbstractDQ_Completeness = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'AbstractDQ_Completeness'), AbstractDQ_Completeness_Type, abstract=pyxb.binding.datatypes.boolean(1))
_Namespace_gmd.addCategoryObject('elementBinding', AbstractDQ_Completeness.name().localName(), AbstractDQ_Completeness)

MD_Band = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_Band'), MD_Band_Type)
_Namespace_gmd.addCategoryObject('elementBinding', MD_Band.name().localName(), MD_Band)

Point = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'Point'), PointType, documentation=u'A Point is defined by a single coordinate tuple. The direct position of a point is specified by the pos element which is of type DirectPositionType.')
_Namespace_gml.addCategoryObject('elementBinding', Point.name().localName(), Point)

centerLineOf = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'centerLineOf'), CurvePropertyType, documentation=u'')
_Namespace_gml.addCategoryObject('elementBinding', centerLineOf.name().localName(), centerLineOf)

TimeReferenceSystem = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'TimeReferenceSystem'), TimeReferenceSystemType, documentation=u'A reference system is characterized in terms of its domain of validity: the spatial and temporal extent over which it is applicable. The basic GML element for temporal reference systems is gml:TimeReferenceSystem.  Its content model extends gml:DefinitionType with one additional property, gml:domainOfValidity.')
_Namespace_gml.addCategoryObject('elementBinding', TimeReferenceSystem.name().localName(), TimeReferenceSystem)

dataSourceReference = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'dataSourceReference'), ReferenceType, documentation=u'Evidence is represented by a simple gml:dataSource or gml:dataSourceReference property that indicates the source of the temporal data.')
_Namespace_gml.addCategoryObject('elementBinding', dataSourceReference.name().localName(), dataSourceReference)

DQ_TemporalValidity = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'DQ_TemporalValidity'), DQ_TemporalValidity_Type)
_Namespace_gmd.addCategoryObject('elementBinding', DQ_TemporalValidity.name().localName(), DQ_TemporalValidity)

parameter = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'parameter'), AbstractGeneralOperationParameterPropertyType, documentation=u'gml:parameter is an association to an operation parameter or parameter group.')
_Namespace_gml.addCategoryObject('elementBinding', parameter.name().localName(), parameter)

DQ_ConceptualConsistency = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'DQ_ConceptualConsistency'), DQ_ConceptualConsistency_Type)
_Namespace_gmd.addCategoryObject('elementBinding', DQ_ConceptualConsistency.name().localName(), DQ_ConceptualConsistency)

MD_ServiceIdentification = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_ServiceIdentification'), MD_ServiceIdentification_Type)
_Namespace_gmd.addCategoryObject('elementBinding', MD_ServiceIdentification.name().localName(), MD_ServiceIdentification)

CI_PresentationFormCode = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'CI_PresentationFormCode'), CodeListValue_Type)
_Namespace_gmd.addCategoryObject('elementBinding', CI_PresentationFormCode.name().localName(), CI_PresentationFormCode)

pointMembers = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'pointMembers'), PointArrayPropertyType, documentation=u'This property element contains a list of points. The order of the elements is significant and shall be preserved when processing the array.')
_Namespace_gml.addCategoryObject('elementBinding', pointMembers.name().localName(), pointMembers)

reversePropertyName = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'reversePropertyName'), pyxb.binding.datatypes.string, documentation=u'If the value of an object property is another object and that object contains also a property for the association between the two objects, then this name of the reverse property may be encoded in a gml:reversePropertyName element in an appinfo annotation of the property element to document the constraint between the two properties. The value of the element shall contain the qualified name of the property element.')
_Namespace_gml.addCategoryObject('elementBinding', reversePropertyName.name().localName(), reversePropertyName)

AbstractFeature = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractFeature'), AbstractFeatureType, abstract=pyxb.binding.datatypes.boolean(1), documentation=u'This abstract element serves as the head of a substitution group which may contain any elements whose content model is derived from gml:AbstractFeatureType.  This may be used as a variable in the construction of content models.  \ngml:AbstractFeature may be thought of as "anything that is a GML feature" and may be used to define variables or templates in which the value of a GML property is "any feature". This occurs in particular in a GML feature collection where the feature member properties contain one or multiple copies of gml:AbstractFeature respectively.')
_Namespace_gml.addCategoryObject('elementBinding', AbstractFeature.name().localName(), AbstractFeature)

multiGeometryProperty = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'multiGeometryProperty'), MultiGeometryPropertyType, documentation=u'')
_Namespace_gml.addCategoryObject('elementBinding', multiGeometryProperty.name().localName(), multiGeometryProperty)

datumRef = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'datumRef'), DatumPropertyType, documentation=u'')
_Namespace_gml.addCategoryObject('elementBinding', datumRef.name().localName(), datumRef)

DS_AssociationTypeCode = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'DS_AssociationTypeCode'), CodeListValue_Type)
_Namespace_gmd.addCategoryObject('elementBinding', DS_AssociationTypeCode.name().localName(), DS_AssociationTypeCode)

coordinateSystem = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'coordinateSystem'), CoordinateSystemPropertyType, documentation=u'An association role to the coordinate system used by this CRS.')
_Namespace_gml.addCategoryObject('elementBinding', coordinateSystem.name().localName(), coordinateSystem)

DS_Platform = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'DS_Platform'), DS_Platform_Type)
_Namespace_gmd.addCategoryObject('elementBinding', DS_Platform.name().localName(), DS_Platform)

primeMeridian = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'primeMeridian'), PrimeMeridianPropertyType, documentation=u'gml:primeMeridian is an association role to the prime meridian used by this geodetic datum.')
_Namespace_gml.addCategoryObject('elementBinding', primeMeridian.name().localName(), primeMeridian)

MD_DistributionUnits = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_DistributionUnits'), CodeListValue_Type)
_Namespace_gmd.addCategoryObject('elementBinding', MD_DistributionUnits.name().localName(), MD_DistributionUnits)

doubleOrNilReasonTupleList = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'doubleOrNilReasonTupleList'), doubleOrNilReasonList, documentation=u'gml:doubleOrNilReasonList consists of a list of gml:doubleOrNilReason values, each separated by a whitespace. The gml:doubleOrNilReason values are grouped into tuples where the dimension of each tuple in the list is equal to the number of range parameters.')
_Namespace_gml.addCategoryObject('elementBinding', doubleOrNilReasonTupleList.name().localName(), doubleOrNilReasonTupleList)

trianglePatches = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'trianglePatches'), SurfacePatchArrayPropertyType, documentation=u'')
_Namespace_gml.addCategoryObject('elementBinding', trianglePatches.name().localName(), trianglePatches)

TimeCalendarEra = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'TimeCalendarEra'), TimeCalendarEraType, documentation=u'gml:TimeCalendarEra inherits basic properties from gml:DefinitionType and has the following additional properties:\n-\tgml:referenceEvent is the name or description of a mythical or historic event which fixes the position of the base scale of the calendar era.  This is given as text or using a link to description held elsewhere.\n-\tgml:referenceDate specifies the date of the referenceEvent expressed as a date in the given calendar.  In most calendars, this date is the origin (i.e., the first day) of the scale, but this is not always true.\n-\tgml:julianReference specifies the Julian date that corresponds to the reference date.  The Julian day number is an integer value; the Julian date is a decimal value that allows greater resolution.  Transforming calendar dates to and from Julian dates provides a relatively simple basis for transforming dates from one calendar to another.\n-\tgml:epochOfUse is the period for which the calendar era was used as a basis for dating.')
_Namespace_gml.addCategoryObject('elementBinding', TimeCalendarEra.name().localName(), TimeCalendarEra)

angle = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'angle'), AngleType, documentation=u'The gml:angle property element is used to record the value of an angle quantity as a single number, with its units.')
_Namespace_gml.addCategoryObject('elementBinding', angle.name().localName(), angle)

subject = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'subject'), TargetPropertyType)
_Namespace_gml.addCategoryObject('elementBinding', subject.name().localName(), subject)

duration = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'duration'), pyxb.binding.datatypes.duration, documentation=u'gml:duration conforms to the ISO 8601 syntax for temporal length as implemented by the XML Schema duration type.')
_Namespace_gml.addCategoryObject('elementBinding', duration.name().localName(), duration)

AbstractMD_ContentInformation = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'AbstractMD_ContentInformation'), AbstractMD_ContentInformation_Type, abstract=pyxb.binding.datatypes.boolean(1))
_Namespace_gmd.addCategoryObject('elementBinding', AbstractMD_ContentInformation.name().localName(), AbstractMD_ContentInformation)

using = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'using'), ProcedurePropertyType)
_Namespace_gml.addCategoryObject('elementBinding', using.name().localName(), using)

usesParameter = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'usesParameter'), AbstractGeneralOperationParameterPropertyType, documentation=u'')
_Namespace_gml.addCategoryObject('elementBinding', usesParameter.name().localName(), usesParameter)

CI_Series = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'CI_Series'), CI_Series_Type)
_Namespace_gmd.addCategoryObject('elementBinding', CI_Series.name().localName(), CI_Series)

derivationUnitTerm = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'derivationUnitTerm'), DerivationUnitTermType, documentation=u'A set of gml:derivationUnitTerm elements describes a derived unit of measure.  Each element carries an integer exponent.  The terms are combined by raising each referenced unit to the power of its exponent and forming the product.\nThis unit term references another unit of measure (uom) and provides an integer exponent applied to that unit in defining the compound unit. The exponent may be positive or negative, but not zero.')
_Namespace_gml.addCategoryObject('elementBinding', derivationUnitTerm.name().localName(), derivationUnitTerm)

Distance = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gco, u'Distance'), LengthType)
_Namespace_gco.addCategoryObject('elementBinding', Distance.name().localName(), Distance)

projectedCRSRef = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'projectedCRSRef'), ProjectedCRSPropertyType, documentation=u'')
_Namespace_gml.addCategoryObject('elementBinding', projectedCRSRef.name().localName(), projectedCRSRef)

rangeMeaning = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'rangeMeaning'), CodeWithAuthorityType, documentation=u'gml:rangeMeaning describes the meaning of axis value range specified by gml:minimumValue and gml:maximumValue. This element shall be omitted when both gml:minimumValue and gml:maximumValue are omitted. This element should be included when gml:minimumValue and/or gml:maximumValue are included. If this element is omitted when the gml:minimumValue and/or gml:maximumValue are included, the meaning is unspecified. The codeSpace attribute shall reference a source of information specifying the values and meanings of all the allowed string values for this property.')
_Namespace_gml.addCategoryObject('elementBinding', rangeMeaning.name().localName(), rangeMeaning)

Country = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'Country'), CodeListValue_Type)
_Namespace_gmd.addCategoryObject('elementBinding', Country.name().localName(), Country)

dictionaryEntry = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'dictionaryEntry'), DictionaryEntryType, documentation=u'This property element contains or refers to the definitions which are members of a dictionary. \nThe content model follows the standard GML property pattern, so a gml:dictionaryEntry may either contain or refer to a single gml:Definition. Since gml:Dictionary is substitutable for gml:Definition, the content of an entry may itself be a lower level dictionary. \nNote that if the value is provided by reference, this definition does not carry a handle (gml:id) in this context, so does not allow external references to this specific definition in this context.  When used in this way the referenced definition will usually be in a dictionary in the same XML document.')
_Namespace_gml.addCategoryObject('elementBinding', dictionaryEntry.name().localName(), dictionaryEntry)

Transformation = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'Transformation'), TransformationType, documentation=u'gml:Transformation is a concrete object element derived from gml:GeneralTransformation (13.6.2.13).\nThis concrete object can be used for all operation methods, without using a GML Application Schema that defines operation-method-specialized element names and contents, especially for methods with only one Transformation instance.\nThe parameterValue elements are an unordered list of composition associations to the set of parameter values used by this conversion operation.')
_Namespace_gml.addCategoryObject('elementBinding', Transformation.name().localName(), Transformation)

abstractInlineProperty = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'abstractInlineProperty'), InlinePropertyType, abstract=pyxb.binding.datatypes.boolean(1), documentation=u'gml:abstractInlineProperty may be used as the head of a subtitution group of more specific elements providing a value inline.')
_Namespace_gml.addCategoryObject('elementBinding', abstractInlineProperty.name().localName(), abstractInlineProperty)

RS_Identifier = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'RS_Identifier'), RS_Identifier_Type)
_Namespace_gmd.addCategoryObject('elementBinding', RS_Identifier.name().localName(), RS_Identifier)

dataSource = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'dataSource'), StringOrRefType, documentation=u'Evidence is represented by a simple gml:dataSource or gml:dataSourceReference property that indicates the source of the temporal data. The remote link attributes of the gml:dataSource element have been deprecated along with its current type.')
_Namespace_gml.addCategoryObject('elementBinding', dataSource.name().localName(), dataSource)

minimumOccurs = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'minimumOccurs'), pyxb.binding.datatypes.nonNegativeInteger, documentation=u'gml:minimumOccurs is the minimum number of times that values for this parameter group or parameter are required. If this attribute is omitted, the minimum number shall be one.')
_Namespace_gml.addCategoryObject('elementBinding', minimumOccurs.name().localName(), minimumOccurs)

modifiedCoordinate = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'modifiedCoordinate'), pyxb.binding.datatypes.positiveInteger, documentation=u'gml:modifiedCoordinate is a positive integer defining a position in a coordinate tuple.')
_Namespace_gml.addCategoryObject('elementBinding', modifiedCoordinate.name().localName(), modifiedCoordinate)

locationReference = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'locationReference'), ReferenceType, documentation=u'The gml:locationReference property element is a convenience property where the text value referenced by the xlink:href attribute describes the location of the feature.')
_Namespace_gml.addCategoryObject('elementBinding', locationReference.name().localName(), locationReference)

MD_Dimension = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_Dimension'), MD_Dimension_Type)
_Namespace_gmd.addCategoryObject('elementBinding', MD_Dimension.name().localName(), MD_Dimension)

coordinateSystemRef = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'coordinateSystemRef'), CoordinateSystemPropertyType, documentation=u'')
_Namespace_gml.addCategoryObject('elementBinding', coordinateSystemRef.name().localName(), coordinateSystemRef)

CI_Contact = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'CI_Contact'), CI_Contact_Type)
_Namespace_gmd.addCategoryObject('elementBinding', CI_Contact.name().localName(), CI_Contact)

semiMajorAxis = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'semiMajorAxis'), MeasureType, documentation=u'gml:semiMajorAxis specifies the length of the semi-major axis of the ellipsoid, with its units. Uses the MeasureType with the restriction that the unit of measure referenced by uom must be suitable for a length, such as metres or feet.')
_Namespace_gml.addCategoryObject('elementBinding', semiMajorAxis.name().localName(), semiMajorAxis)

DefinitionProxy = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'DefinitionProxy'), DefinitionProxyType, documentation=u'')
_Namespace_gml.addCategoryObject('elementBinding', DefinitionProxy.name().localName(), DefinitionProxy)

MD_PixelOrientationCode = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_PixelOrientationCode'), MD_PixelOrientationCode_Type)
_Namespace_gmd.addCategoryObject('elementBinding', MD_PixelOrientationCode.name().localName(), MD_PixelOrientationCode)

unitOfMeasure = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'unitOfMeasure'), UnitOfMeasureType, documentation=u'The element gml:unitOfMeasure is a property element to refer to a unit of measure. This is an empty element which carries a reference to a unit of measure definition.')
_Namespace_gml.addCategoryObject('elementBinding', unitOfMeasure.name().localName(), unitOfMeasure)

valueComponent = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'valueComponent'), ValuePropertyType, documentation=u'Property that refers to, or contains, a Value.')
_Namespace_gml.addCategoryObject('elementBinding', valueComponent.name().localName(), valueComponent)

ParameterValue = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'ParameterValue'), ParameterValueType, documentation=u'gml:ParameterValue is a parameter value, an ordered sequence of values, or a reference to a file of parameter values. This concrete complex type may be used for operation methods without using an Application Schema that defines operation-method-specialized element names and contents, especially for methods with only one instance. This complex type may be used, extended, or restricted for well-known operation methods, especially for methods with many instances.')
_Namespace_gml.addCategoryObject('elementBinding', ParameterValue.name().localName(), ParameterValue)

operationParameterRef = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'operationParameterRef'), OperationParameterPropertyType, documentation=u'')
_Namespace_gml.addCategoryObject('elementBinding', operationParameterRef.name().localName(), operationParameterRef)

CI_DateTypeCode = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'CI_DateTypeCode'), CodeListValue_Type)
_Namespace_gmd.addCategoryObject('elementBinding', CI_DateTypeCode.name().localName(), CI_DateTypeCode)

Bezier = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'Bezier'), BezierType, documentation=u'Bezier curves are polynomial splines that use Bezier or Bernstein polynomials for interpolation purposes. It is a special case of the B-Spline curve with two knots.\ndegree shall be the degree of the polynomial used for interpolation in this spline.\nknot shall be the sequence of distinct knots used to define the spline basis functions.\ninterpolation is fixed as "polynomialSpline".\nisPolynomial is fixed as "true".\nknotType is not relevant for Bezier curve segments.\n')
_Namespace_gml.addCategoryObject('elementBinding', Bezier.name().localName(), Bezier)

topoPrimitiveMember = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'topoPrimitiveMember'), TopoPrimitiveMemberType, documentation=u'The gml:topoPrimitiveMember property element encodes for the relationship between a topology complex and a single topology primitive.')
_Namespace_gml.addCategoryObject('elementBinding', topoPrimitiveMember.name().localName(), topoPrimitiveMember)

CharacterString = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gco, u'CharacterString'), pyxb.binding.datatypes.string)
_Namespace_gco.addCategoryObject('elementBinding', CharacterString.name().localName(), CharacterString)

DQ_TopologicalConsistency = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'DQ_TopologicalConsistency'), DQ_TopologicalConsistency_Type)
_Namespace_gmd.addCategoryObject('elementBinding', DQ_TopologicalConsistency.name().localName(), DQ_TopologicalConsistency)

valuesOfGroup = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'valuesOfGroup'), OperationParameterGroupPropertyType, documentation=u'')
_Namespace_gml.addCategoryObject('elementBinding', valuesOfGroup.name().localName(), valuesOfGroup)

AbstractGML = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractGML'), AbstractGMLType, abstract=pyxb.binding.datatypes.boolean(1), documentation=u'The abstract element gml:AbstractGML is "any GML object having identity".   It acts as the head of an XML Schema substitution group, which may include any element which is a GML feature, or other object, with identity.  This is used as a variable in content models in GML core and application schemas.  It is effectively an abstract superclass for all GML objects.')
_Namespace_gml.addCategoryObject('elementBinding', AbstractGML.name().localName(), AbstractGML)

extentOf = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'extentOf'), SurfacePropertyType, documentation=u'')
_Namespace_gml.addCategoryObject('elementBinding', extentOf.name().localName(), extentOf)

solidMember = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'solidMember'), SolidPropertyType, documentation=u'This property element either references a solid via the XLink-attributes or contains the solid element. A solid element is any element, which is substitutable for gml:AbstractSolid.')
_Namespace_gml.addCategoryObject('elementBinding', solidMember.name().localName(), solidMember)

baseCRS = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'baseCRS'), SingleCRSPropertyType, documentation=u'gml:baseCRS is an association role to the coordinate reference system used by this derived CRS.')
_Namespace_gml.addCategoryObject('elementBinding', baseCRS.name().localName(), baseCRS)

valueList = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'valueList'), MeasureListType, documentation=u'gml:valueList is an ordered sequence of two or more numeric values of an operation parameter list, where each value has the same associated unit of measure. An element of this type contains a space-separated sequence of double values.')
_Namespace_gml.addCategoryObject('elementBinding', valueList.name().localName(), valueList)

timePosition = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'timePosition'), TimePositionType, documentation=u'This element is used directly as a property of gml:TimeInstant (see 15.2.2.3), and may also be used in application schemas.')
_Namespace_gml.addCategoryObject('elementBinding', timePosition.name().localName(), timePosition)

targetCRS = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'targetCRS'), CRSPropertyType, documentation=u'gml:targetCRS is an association role to the target CRS (coordinate reference system) of this coordinate operation.')
_Namespace_gml.addCategoryObject('elementBinding', targetCRS.name().localName(), targetCRS)

dynamicMembers = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'dynamicMembers'), DynamicFeatureMemberType)
_Namespace_gml.addCategoryObject('elementBinding', dynamicMembers.name().localName(), dynamicMembers)

axis = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'axis'), CoordinateSystemAxisPropertyType, documentation=u'The gml:axis property is an association role (ordered sequence) to the coordinate system axes included in this coordinate system. The coordinate values in a coordinate tuple shall be recorded in the order in which the coordinate system axes associations are recorded, whenever those coordinates use a coordinate reference system that uses this coordinate system. The gml:AggregationAttributeGroup should be used to specify that the axis objects are ordered.')
_Namespace_gml.addCategoryObject('elementBinding', axis.name().localName(), axis)

multiSolidDomain = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'multiSolidDomain'), DomainSetType, documentation=u'')
_Namespace_gml.addCategoryObject('elementBinding', multiSolidDomain.name().localName(), multiSolidDomain)

secondDefiningParameter = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'secondDefiningParameter'), CTD_ANON_8, documentation=u'gml:secondDefiningParameter is a property containing the definition of the second parameter that defines the shape of an ellipsoid. An ellipsoid requires two defining parameters: semi-major axis and inverse flattening or semi-major axis and semi-minor axis. When the reference body is a sphere rather than an ellipsoid, only a single defining parameter is required, namely the radius of the sphere; in that case, the semi-major axis "degenerates" into the radius of the sphere.\nThe inverseFlattening element contains the inverse flattening value of the ellipsoid. This value is a scale factor (or ratio). It uses gml:LengthType with the restriction that the unit of measure referenced by the uom attribute must be suitable for a scale factor, such as percent, permil, or parts-per-million.\nThe semiMinorAxis element contains the length of the semi-minor axis of the ellipsoid. When the isSphere element is included, the ellipsoid is degenerate and is actually a sphere. The sphere is completely defined by the semi-major axis, which is the radius of the sphere.')
_Namespace_gml.addCategoryObject('elementBinding', secondDefiningParameter.name().localName(), secondDefiningParameter)

roughConversionToPreferredUnit = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'roughConversionToPreferredUnit'), ConversionToPreferredUnitType, documentation=u'The elements gml:conversionToPreferredUnit and gml:roughConversionToPreferredUnit represent parameters used to convert conventional units to preferred units for this physical quantity type.  A preferred unit is either a Base Unit or a Derived Unit that is selected for all values of one physical quantity type.')
_Namespace_gml.addCategoryObject('elementBinding', roughConversionToPreferredUnit.name().localName(), roughConversionToPreferredUnit)

origin = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'origin'), pyxb.binding.datatypes.dateTime, documentation=u'gml:origin is the date and time origin of this temporal datum.')
_Namespace_gml.addCategoryObject('elementBinding', origin.name().localName(), origin)

AbstractGriddedSurface = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractGriddedSurface'), AbstractGriddedSurfaceType, abstract=pyxb.binding.datatypes.boolean(1), documentation=u'if provided, rows gives the number of rows, columns the number of columns in the parameter grid. The parameter grid is represented by an instance of the gml:PointGrid group.\nThe element provides a substitution group head for the surface patches based on a grid. All derived subtypes shall conform to the constraints specified in ISO 19107:2003, 6.4.41.')
_Namespace_gml.addCategoryObject('elementBinding', AbstractGriddedSurface.name().localName(), AbstractGriddedSurface)

File = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'File'), FileType, documentation=u'for efficiency reasons, GML also provides a means of encoding the range set in an arbitrary external encoding, such as a binary file.  This encoding may be "well-known" but this is not required. This mode uses the gml:File element.\nThe values of the coverage (attribute values in the range set) are transmitted in a external file that is referenced from the XML structure described by gml:FileType.  The external file is referenced by the gml:fileReference property that is an anyURI (the gml:fileName property has been deprecated).  This means that the external file may be located remotely from the referencing GML instance. \nThe gml:compression property points to a definition of a compression algorithm through an anyURI.  This may be a retrievable, computable definition or simply a reference to an unambiguous name for the compression method.\nThe gml:mimeType property points to a definition of the file mime type.\nThe gml:fileStructure property is defined by a codelist. Note further that all values shall be enclosed in a single file. Multi-file structures for values are not supported in GML.\nThe semantics of the range set is described as above using the gml:rangeParameters property.\nNote that if any compression algorithm is applied, the structure above applies only to the pre-compression or post-decompression structure of the file.\nNote that the fields within a record match the gml:valueComponents of the gml:CompositeValue in document order.')
_Namespace_gml.addCategoryObject('elementBinding', File.name().localName(), File)

verticalCRSRef = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'verticalCRSRef'), VerticalCRSPropertyType, documentation=u'')
_Namespace_gml.addCategoryObject('elementBinding', verticalCRSRef.name().localName(), verticalCRSRef)

minimumValue = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'minimumValue'), pyxb.binding.datatypes.double, documentation=u'The gml:minimumValue and gml:maximumValue properties allow the specification of minimum and maximum value normally allowed for this axis, in the unit of measure for the axis. For a continuous angular axis such as longitude, the values wrap-around at this value. Also, values beyond this minimum/maximum can be used for specified purposes, such as in a bounding box. A value of minus infinity shall be allowed for the gml:minimumValue element, a value of plus infiniy for the gml:maximumValue element. If these elements are omitted, the value is unspecified.')
_Namespace_gml.addCategoryObject('elementBinding', minimumValue.name().localName(), minimumValue)

Rectangle = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'Rectangle'), RectangleType, documentation=u'gml:Rectangle represents a rectangle as a surface patch with an outer boundary consisting of a linear ring. Note that this is a polygon (subtype) with no inner boundaries. The number of points in the linear ring shall be five.\nThe ring (element exterior) shall be a gml:LinearRing and shall form a rectangle; the first and the last position shall be coincident.\ninterpolation is fixed to "planar", i.e. an interpolation shall return points on a single plane. The boundary of the patch shall be contained within that plane.')
_Namespace_gml.addCategoryObject('elementBinding', Rectangle.name().localName(), Rectangle)

MD_TopologyLevelCode = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_TopologyLevelCode'), CodeListValue_Type)
_Namespace_gmd.addCategoryObject('elementBinding', MD_TopologyLevelCode.name().localName(), MD_TopologyLevelCode)

PT_FreeText = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'PT_FreeText'), PT_FreeText_Type)
_Namespace_gmd.addCategoryObject('elementBinding', PT_FreeText.name().localName(), PT_FreeText)

direction = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'direction'), DirectionPropertyType, documentation=u'The property gml:direction is intended as a pre-defined property expressing a direction to be assigned to features defined in a GML application schema.')
_Namespace_gml.addCategoryObject('elementBinding', direction.name().localName(), direction)

TimeNode = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'TimeNode'), TimeNodeType, documentation=u'A time node is a zero-dimensional topological primitive that represents an identifiable node in time (it is equivalent to a point in space). A node may act as the termination or initiation of any number of time edges. A time node may be realised as a geometry, its position, whose value is a time instant.')
_Namespace_gml.addCategoryObject('elementBinding', TimeNode.name().localName(), TimeNode)

Null = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'Null'), NilReasonType, documentation=u'')
_Namespace_gml.addCategoryObject('elementBinding', Null.name().localName(), Null)

passThroughOperationRef = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'passThroughOperationRef'), PassThroughOperationPropertyType, documentation=u'')
_Namespace_gml.addCategoryObject('elementBinding', passThroughOperationRef.name().localName(), passThroughOperationRef)

anchorPoint = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'anchorPoint'), CodeType, documentation=u'')
_Namespace_gml.addCategoryObject('elementBinding', anchorPoint.name().localName(), anchorPoint)

vector = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'vector'), VectorType)
_Namespace_gml.addCategoryObject('elementBinding', vector.name().localName(), vector)

verticalDatum = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'verticalDatum'), VerticalDatumPropertyType, documentation=u'gml:verticalDatum is an association role to the vertical datum used by this CRS.')
_Namespace_gml.addCategoryObject('elementBinding', verticalDatum.name().localName(), verticalDatum)

polygonPatches = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'polygonPatches'), SurfacePatchArrayPropertyType, documentation=u'')
_Namespace_gml.addCategoryObject('elementBinding', polygonPatches.name().localName(), polygonPatches)

MultiSurface = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'MultiSurface'), MultiSurfaceType, documentation=u'A gml:MultiSurface is defined by one or more gml:AbstractSurfaces.\nThe members of the geometric aggregate may be specified either using the "standard" property (gml:surfaceMember) or the array property (gml:surfaceMembers). It is also valid to use both the "standard" and the array properties in the same collection.')
_Namespace_gml.addCategoryObject('elementBinding', MultiSurface.name().localName(), MultiSurface)

metaDataProperty = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'metaDataProperty'), MetaDataPropertyType, documentation=u'')
_Namespace_gml.addCategoryObject('elementBinding', metaDataProperty.name().localName(), metaDataProperty)

dmsAngle = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'dmsAngle'), DMSAngleType, documentation=u'')
_Namespace_gml.addCategoryObject('elementBinding', dmsAngle.name().localName(), dmsAngle)

sourceDimensions = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'sourceDimensions'), pyxb.binding.datatypes.positiveInteger, documentation=u'gml:sourceDimensions is the number of dimensions in the source CRS of this operation method.')
_Namespace_gml.addCategoryObject('elementBinding', sourceDimensions.name().localName(), sourceDimensions)

verticalCSRef = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'verticalCSRef'), VerticalCSPropertyType, documentation=u'')
_Namespace_gml.addCategoryObject('elementBinding', verticalCSRef.name().localName(), verticalCSRef)

MultiSurfaceCoverage = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'MultiSurfaceCoverage'), DiscreteCoverageType, documentation=u'In a gml:MultiSurfaceCoverage the domain is partioned into a collection of surfaces comprising a gml:MultiSurface.  The coverage function than maps each surface in the collection to a value in the range set.\nThe content model is identical with gml:DiscreteCoverageType, but that gml:domainSet shall have values gml:MultiSurface.\nIn a gml:MultiSurfaceCoverage the mapping from the domain to the range is straightforward.\n-\tFor gml:DataBlock encodings the surfaces of the gml:MultiSurface are mapped in document order to the tuples of the data block.\n-\tFor gml:CompositeValue encodings the surfaces of the gml:MultiSurface are mapped to the members of the composite value in document order.\n-\tFor gml:File encodings the surfaces of the gml:MultiSurface are mapped to the records of the file in sequential order.\n')
_Namespace_gml.addCategoryObject('elementBinding', MultiSurfaceCoverage.name().localName(), MultiSurfaceCoverage)

MD_MetadataExtensionInformation = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_MetadataExtensionInformation'), MD_MetadataExtensionInformation_Type)
_Namespace_gmd.addCategoryObject('elementBinding', MD_MetadataExtensionInformation.name().localName(), MD_MetadataExtensionInformation)

ArcString = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'ArcString'), ArcStringType, documentation=u'An ArcString is a curve segment that uses three-point circular arc interpolation ("circularArc3Points"). The number of arcs in the arc string may be explicitly stated in the attribute numArc. The number of control points in the arc string shall be 2 * numArc + 1.\nThe content model follows the general pattern for the encoding of curve segments.')
_Namespace_gml.addCategoryObject('elementBinding', ArcString.name().localName(), ArcString)

AbstractSurfacePatch = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractSurfacePatch'), AbstractSurfacePatchType, abstract=pyxb.binding.datatypes.boolean(1), documentation=u'A surface patch defines a homogenuous portion of a surface. \nThe AbstractSurfacePatch element is the abstract head of the substituition group for all surface patch elements describing a continuous portion of a surface.\nAll surface patches shall have an attribute interpolation (declared in the types derived from gml:AbstractSurfacePatchType) specifying the interpolation mechanism used for the patch using gml:SurfaceInterpolationType.')
_Namespace_gml.addCategoryObject('elementBinding', AbstractSurfacePatch.name().localName(), AbstractSurfacePatch)

EX_BoundingPolygon = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'EX_BoundingPolygon'), EX_BoundingPolygon_Type)
_Namespace_gmd.addCategoryObject('elementBinding', EX_BoundingPolygon.name().localName(), EX_BoundingPolygon)

MD_DataIdentification = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_DataIdentification'), MD_DataIdentification_Type)
_Namespace_gmd.addCategoryObject('elementBinding', MD_DataIdentification.name().localName(), MD_DataIdentification)

AbstractObject_ = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractObject'), pyxb.binding.datatypes.anyType, abstract=pyxb.binding.datatypes.boolean(1), documentation=u'This element has no type defined, and is therefore implicitly (according to the rules of W3C XML Schema) an XML Schema anyType. It is used as the head of an XML Schema substitution group which unifies complex content and certain simple content elements used for datatypes in GML, including the gml:AbstractGML substitution group.')
_Namespace_gml.addCategoryObject('elementBinding', AbstractObject_.name().localName(), AbstractObject_)

userDefinedCSRef = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'userDefinedCSRef'), UserDefinedCSPropertyType, documentation=u'')
_Namespace_gml.addCategoryObject('elementBinding', userDefinedCSRef.name().localName(), userDefinedCSRef)

pointProperty = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'pointProperty'), PointPropertyType, documentation=u'This property element either references a point via the XLink-attributes or contains the point element. pointProperty is the predefined property which may be used by GML Application Schemas whenever a GML feature has a property with a value that is substitutable for Point.')
_Namespace_gml.addCategoryObject('elementBinding', pointProperty.name().localName(), pointProperty)

Ellipsoid = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'Ellipsoid'), EllipsoidType, documentation=u'A gml:Ellipsoid is a geometric figure that may be used to describe the approximate shape of the earth. In mathematical terms, it is a surface formed by the rotation of an ellipse about its minor axis.')
_Namespace_gml.addCategoryObject('elementBinding', Ellipsoid.name().localName(), Ellipsoid)

superComplex = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'superComplex'), TopoComplexPropertyType, documentation=u'The property elements gml:subComplex, gml:superComplex and gml:maximalComplex provide an encoding for relationships between topology complexes as described for gml:TopoComplex above.')
_Namespace_gml.addCategoryObject('elementBinding', superComplex.name().localName(), superComplex)

Binary = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gco, u'Binary'), Binary_Type)
_Namespace_gco.addCategoryObject('elementBinding', Binary.name().localName(), Binary)

UnitDefinition = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'UnitDefinition'), UnitDefinitionType, documentation=u'A gml:UnitDefinition is a general definition of a unit of measure. This generic element is used only for units for which no relationship with other units or units systems is known.\nThe content model of gml:UnitDefinition adds three additional properties to gml:Definition, gml:quantityType, gml:quantityTypeReference and gml:catalogSymbol.  \nThe gml:catalogSymbol property optionally gives the short symbol used for this unit. This element is usually used when the relationship of this unit to other units or units systems is unknown.')
_Namespace_gml.addCategoryObject('elementBinding', UnitDefinition.name().localName(), UnitDefinition)

Cone = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'Cone'), ConeType)
_Namespace_gml.addCategoryObject('elementBinding', Cone.name().localName(), Cone)

valueOfParameter = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'valueOfParameter'), OperationParameterPropertyType, documentation=u'')
_Namespace_gml.addCategoryObject('elementBinding', valueOfParameter.name().localName(), valueOfParameter)

CoverageMappingRule = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'CoverageMappingRule'), MappingRuleType, documentation=u"gml:CoverageMappingRule provides a formal or informal description of the coverage function.\nThe mapping rule may be defined as an in-line string (gml:ruleDefinition) or via a remote reference through xlink:href (gml:ruleReference).  \nIf no rule name is specified, the default is 'Linear' with respect to members of the domain in document order.")
_Namespace_gml.addCategoryObject('elementBinding', CoverageMappingRule.name().localName(), CoverageMappingRule)

MD_GeometricObjectTypeCode = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_GeometricObjectTypeCode'), CodeListValue_Type)
_Namespace_gmd.addCategoryObject('elementBinding', MD_GeometricObjectTypeCode.name().localName(), MD_GeometricObjectTypeCode)

AbstractCoordinateOperation = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractCoordinateOperation'), AbstractCoordinateOperationType, abstract=pyxb.binding.datatypes.boolean(1), documentation=u'gml:AbstractCoordinateOperation is a mathematical operation on coordinates that transforms or converts coordinates to another coordinate reference system. Many but not all coordinate operations (from CRS A to CRS B) also uniquely define the inverse operation (from CRS B to CRS A). In some cases, the operation method algorithm for the inverse operation is the same as for the forward algorithm, but the signs of some operation parameter values shall be reversed. In other cases, different algorithms are required for the forward and inverse operations, but the same operation parameter values are used. If (some) entirely different parameter values are needed, a different coordinate operation shall be defined.\nThe optional coordinateOperationAccuracy property elements provide estimates of the impact of this coordinate operation on point position accuracy.')
_Namespace_gml.addCategoryObject('elementBinding', AbstractCoordinateOperation.name().localName(), AbstractCoordinateOperation)

featureProperty = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'featureProperty'), FeaturePropertyType, documentation=u'')
_Namespace_gml.addCategoryObject('elementBinding', featureProperty.name().localName(), featureProperty)

EX_VerticalExtent = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'EX_VerticalExtent'), EX_VerticalExtent_Type)
_Namespace_gmd.addCategoryObject('elementBinding', EX_VerticalExtent.name().localName(), EX_VerticalExtent)

CompoundCRS = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'CompoundCRS'), CompoundCRSType, documentation=u'gml:CompundCRS is a coordinate reference system describing the position of points through two or more independent coordinate reference systems. It is associated with a non-repeating sequence of two or more instances of SingleCRS.')
_Namespace_gml.addCategoryObject('elementBinding', CompoundCRS.name().localName(), CompoundCRS)

MD_StandardOrderProcess = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_StandardOrderProcess'), MD_StandardOrderProcess_Type)
_Namespace_gmd.addCategoryObject('elementBinding', MD_StandardOrderProcess.name().localName(), MD_StandardOrderProcess)

VerticalCRS = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'VerticalCRS'), VerticalCRSType, documentation=u'gml:VerticalCRS is a 1D coordinate reference system used for recording heights or depths. Vertical CRSs make use of the direction of gravity to define the concept of height or depth, but the relationship with gravity may not be straightforward. By implication, ellipsoidal heights (h) cannot be captured in a vertical coordinate reference system. Ellipsoidal heights cannot exist independently, but only as an inseparable part of a 3D coordinate tuple defined in a geographic 3D coordinate reference system.')
_Namespace_gml.addCategoryObject('elementBinding', VerticalCRS.name().localName(), VerticalCRS)

multiCurveDomain = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'multiCurveDomain'), DomainSetType, documentation=u'')
_Namespace_gml.addCategoryObject('elementBinding', multiCurveDomain.name().localName(), multiCurveDomain)

AbstractGenericName = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gco, u'AbstractGenericName'), CodeType, abstract=pyxb.binding.datatypes.boolean(1))
_Namespace_gco.addCategoryObject('elementBinding', AbstractGenericName.name().localName(), AbstractGenericName)

TopoSurface = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'TopoSurface'), TopoSurfaceType, documentation=u'gml:TopoSurface represents a homogeneous topological expression, a set of directed faces, which if realised are isomorphic to a geometric surface primitive. The intended use of gml:TopoSurface is to appear within a surface feature to express the structural and possibly geometric relationships of this surface feature to other features via the shared face definitions.')
_Namespace_gml.addCategoryObject('elementBinding', TopoSurface.name().localName(), TopoSurface)

DS_Association = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'DS_Association'), DS_Association_Type)
_Namespace_gmd.addCategoryObject('elementBinding', DS_Association.name().localName(), DS_Association)

usesVerticalCS = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'usesVerticalCS'), VerticalCSPropertyType, documentation=u'')
_Namespace_gml.addCategoryObject('elementBinding', usesVerticalCS.name().localName(), usesVerticalCS)

axisAbbrev = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'axisAbbrev'), CodeType, documentation=u'gml:axisAbbrev is the abbreviation used for this coordinate system axis; this abbreviation is also used to identify the coordinates in the coordinate tuple. The codeSpace attribute may reference a source of more information on a set of standardized abbreviations, or on this abbreviation.')
_Namespace_gml.addCategoryObject('elementBinding', axisAbbrev.name().localName(), axisAbbrev)

DQ_ConformanceResult = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'DQ_ConformanceResult'), DQ_ConformanceResult_Type)
_Namespace_gmd.addCategoryObject('elementBinding', DQ_ConformanceResult.name().localName(), DQ_ConformanceResult)

ImageDatum = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'ImageDatum'), ImageDatumType, documentation=u'gml:ImageDatum defines the origin of an image coordinate reference system, and is used in a local context only. For an image datum, the anchor definition is usually either the centre of the image or the corner of the image. For more information, see ISO 19111 B.3.5.')
_Namespace_gml.addCategoryObject('elementBinding', ImageDatum.name().localName(), ImageDatum)

abstractStrictAssociationRole = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'abstractStrictAssociationRole'), AssociationRoleType, abstract=pyxb.binding.datatypes.boolean(1), documentation=u'This element shows how an element \n\tdeclaration may include a Schematron constraint to limit the property to act \n\tin either inline or by-reference mode, but not both.')
_Namespace_gml.addCategoryObject('elementBinding', abstractStrictAssociationRole.name().localName(), abstractStrictAssociationRole)

DS_Initiative = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'DS_Initiative'), DS_Initiative_Type)
_Namespace_gmd.addCategoryObject('elementBinding', DS_Initiative.name().localName(), DS_Initiative)

linearCSRef = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'linearCSRef'), LinearCSPropertyType, documentation=u'')
_Namespace_gml.addCategoryObject('elementBinding', linearCSRef.name().localName(), linearCSRef)

TimeEdge = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'TimeEdge'), TimeEdgeType, documentation=u'A time edge is a one-dimensional topological primitive. It is an open interval that starts and ends at a node. The edge may be realised as a geometry whose value is a time period.')
_Namespace_gml.addCategoryObject('elementBinding', TimeEdge.name().localName(), TimeEdge)

AbstractTimeGeometricPrimitive = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractTimeGeometricPrimitive'), AbstractTimeGeometricPrimitiveType, abstract=pyxb.binding.datatypes.boolean(1), documentation=u'gml:TimeGeometricPrimitive acts as the head of a substitution group for geometric temporal primitives.\nA temporal geometry shall be associated with a temporal reference system through the frame attribute that provides a URI reference that identifies a description of the reference system. Following ISO 19108, the Gregorian calendar with UTC is the default reference system, but others may also be used. The GPS calendar is an alternative reference systems in common use.\nThe two geometric primitives in the temporal dimension are the instant and the period. GML components are defined to support these as follows.')
_Namespace_gml.addCategoryObject('elementBinding', AbstractTimeGeometricPrimitive.name().localName(), AbstractTimeGeometricPrimitive)

MD_Medium = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_Medium'), MD_Medium_Type)
_Namespace_gmd.addCategoryObject('elementBinding', MD_Medium.name().localName(), MD_Medium)

BooleanList = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'BooleanList'), booleanOrNilReasonList)
_Namespace_gml.addCategoryObject('elementBinding', BooleanList.name().localName(), BooleanList)

MappingRule = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'MappingRule'), StringOrRefType, documentation=u'')
_Namespace_gml.addCategoryObject('elementBinding', MappingRule.name().localName(), MappingRule)

members = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'members'), ArrayAssociationType, documentation=u'')
_Namespace_gml.addCategoryObject('elementBinding', members.name().localName(), members)

associationName = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'associationName'), pyxb.binding.datatypes.string)
_Namespace_gml.addCategoryObject('elementBinding', associationName.name().localName(), associationName)

CI_Citation = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'CI_Citation'), CI_Citation_Type)
_Namespace_gmd.addCategoryObject('elementBinding', CI_Citation.name().localName(), CI_Citation)

singleOperationRef = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'singleOperationRef'), SingleOperationPropertyType, documentation=u'')
_Namespace_gml.addCategoryObject('elementBinding', singleOperationRef.name().localName(), singleOperationRef)

MultiPointCoverage = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'MultiPointCoverage'), DiscreteCoverageType, documentation=u'In a gml:MultiPointCoverage the domain set is a gml:MultiPoint, that is a collection of arbitrarily distributed geometric points.\nThe content model is identical with gml:DiscreteCoverageType, but that gml:domainSet shall have values gml:MultiPoint.\nIn a gml:MultiPointCoverage the mapping from the domain to the range is straightforward.\n-\tFor gml:DataBlock encodings the points of the gml:MultiPoint are mapped in document order to the tuples of the data block.\n-\tFor gml:CompositeValue encodings the points of the gml:MultiPoint are mapped to the members of the composite value in document order.\n-\tFor gml:File encodings the points of the gml:MultiPoint are mapped to the records of the file in sequential order.\n')
_Namespace_gml.addCategoryObject('elementBinding', MultiPointCoverage.name().localName(), MultiPointCoverage)

MD_CellGeometryCode = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_CellGeometryCode'), CodeListValue_Type)
_Namespace_gmd.addCategoryObject('elementBinding', MD_CellGeometryCode.name().localName(), MD_CellGeometryCode)

abstractReference = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'abstractReference'), ReferenceType, abstract=pyxb.binding.datatypes.boolean(1), documentation=u'gml:abstractReference may be used as the head of a subtitution group of more specific elements providing a value by-reference.')
_Namespace_gml.addCategoryObject('elementBinding', abstractReference.name().localName(), abstractReference)

patches = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'patches'), SurfacePatchArrayPropertyType, documentation=u'The patches property element contains the sequence of surface patches. The order of the elements is significant and shall be preserved when processing the array.')
_Namespace_gml.addCategoryObject('elementBinding', patches.name().localName(), patches)

formulaCitation = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'formulaCitation'), CTD_ANON_7, documentation=u'gml:formulaCitation provides a reference to a publication giving the formula(s) or procedure used by an coordinate operation method.')
_Namespace_gml.addCategoryObject('elementBinding', formulaCitation.name().localName(), formulaCitation)

stringValue = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'stringValue'), pyxb.binding.datatypes.string, documentation=u'gml:stringValue is a character string value of an operation parameter. A string value does not have an associated unit of measure.')
_Namespace_gml.addCategoryObject('elementBinding', stringValue.name().localName(), stringValue)

cartesianCSRef = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'cartesianCSRef'), CartesianCSPropertyType, documentation=u'')
_Namespace_gml.addCategoryObject('elementBinding', cartesianCSRef.name().localName(), cartesianCSRef)

pointRep = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'pointRep'), PointPropertyType, documentation=u'')
_Namespace_gml.addCategoryObject('elementBinding', pointRep.name().localName(), pointRep)

Arc = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'Arc'), ArcType, documentation=u'An Arc is an arc string with only one arc unit, i.e. three control points including the start and end point. As arc is an arc string consisting of a single arc, the attribute "numArc" is fixed to "1".')
_Namespace_gml.addCategoryObject('elementBinding', Arc.name().localName(), Arc)

measure = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'measure'), MeasureType, documentation=u'The value of a physical quantity, together with its unit.')
_Namespace_gml.addCategoryObject('elementBinding', measure.name().localName(), measure)

sourceCRS = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'sourceCRS'), CRSPropertyType, documentation=u'gml:sourceCRS is an association role to the source CRS (coordinate reference system) of this coordinate operation.')
_Namespace_gml.addCategoryObject('elementBinding', sourceCRS.name().localName(), sourceCRS)

AbstractGeometry = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractGeometry'), AbstractGeometryType, abstract=pyxb.binding.datatypes.boolean(1), documentation=u'The AbstractGeometry element is the abstract head of the substitution group for all geometry elements of GML. This includes pre-defined and user-defined geometry elements. Any geometry element shall be a direct or indirect extension/restriction of AbstractGeometryType and shall be directly or indirectly in the substitution group of AbstractGeometry.')
_Namespace_gml.addCategoryObject('elementBinding', AbstractGeometry.name().localName(), AbstractGeometry)

LocalName = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gco, u'LocalName'), CodeType)
_Namespace_gco.addCategoryObject('elementBinding', LocalName.name().localName(), LocalName)

MD_ClassificationCode = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_ClassificationCode'), CodeListValue_Type)
_Namespace_gmd.addCategoryObject('elementBinding', MD_ClassificationCode.name().localName(), MD_ClassificationCode)

AbstractMD_Identification = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'AbstractMD_Identification'), AbstractMD_Identification_Type, abstract=pyxb.binding.datatypes.boolean(1))
_Namespace_gmd.addCategoryObject('elementBinding', AbstractMD_Identification.name().localName(), AbstractMD_Identification)

gmlProfileSchema = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'gmlProfileSchema'), pyxb.binding.datatypes.anyURI)
_Namespace_gml.addCategoryObject('elementBinding', gmlProfileSchema.name().localName(), gmlProfileSchema)

TopoComplex = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'TopoComplex'), TopoComplexType, documentation=u'gml:TopoComplex is a collection of topological primitives.\nEach complex holds a reference to its maximal complex (gml:maximalComplex) and optionally to sub- or super-complexes (gml:subComplex, gml:superComplex). \nA topology complex contains its primitive and sub-complex members.\n')
_Namespace_gml.addCategoryObject('elementBinding', TopoComplex.name().localName(), TopoComplex)

timeInterval = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'timeInterval'), TimeIntervalLengthType, documentation=u' gml:timeInterval conforms to ISO 11404 which is based on floating point values for temporal length.\nISO 11404 syntax specifies the use of a positiveInteger together with appropriate values for radix and factor. The resolution of the time interval is to one radix ^(-factor) of the specified time unit.\nThe value of the unit is either selected from the units for time intervals from ISO 31-1:1992, or is another suitable unit.  The encoding is defined for GML in gml:TimeUnitType. The second component of this union type provides a method for indicating time units other than the six standard units given in the enumeration.')
_Namespace_gml.addCategoryObject('elementBinding', timeInterval.name().localName(), timeInterval)

usesTemporalDatum = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'usesTemporalDatum'), TemporalDatumPropertyType, documentation=u'')
_Namespace_gml.addCategoryObject('elementBinding', usesTemporalDatum.name().localName(), usesTemporalDatum)

usesPrimeMeridian = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'usesPrimeMeridian'), PrimeMeridianPropertyType, documentation=u'')
_Namespace_gml.addCategoryObject('elementBinding', usesPrimeMeridian.name().localName(), usesPrimeMeridian)

transformationRef = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'transformationRef'), TransformationPropertyType, documentation=u'')
_Namespace_gml.addCategoryObject('elementBinding', transformationRef.name().localName(), transformationRef)

engineeringDatumRef = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'engineeringDatumRef'), EngineeringDatumPropertyType, documentation=u'')
_Namespace_gml.addCategoryObject('elementBinding', engineeringDatumRef.name().localName(), engineeringDatumRef)

DerivedCRS = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'DerivedCRS'), DerivedCRSType, documentation=u'gml:DerivedCRS is a single coordinate reference system that is defined by its coordinate conversion from another single coordinate reference system known as the base CRS. The base CRS can be a projected coordinate reference system, if this DerivedCRS is used for a georectified grid coverage as described in ISO 19123, Clause 8.')
_Namespace_gml.addCategoryObject('elementBinding', DerivedCRS.name().localName(), DerivedCRS)

pixelInCell = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'pixelInCell'), CodeWithAuthorityType, documentation=u'gml:pixelInCell is a specification of the way an image grid is associated with the image data attributes. The required codeSpace attribute shall reference a source of information specifying the values and meanings of all the allowed string values for this property.')
_Namespace_gml.addCategoryObject('elementBinding', pixelInCell.name().localName(), pixelInCell)

maximumOccurs = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'maximumOccurs'), pyxb.binding.datatypes.positiveInteger, documentation=u'gml:maximumOccurs is the maximum number of times that values for this parameter group may be included. If this attribute is omitted, the maximum number shall be one.')
_Namespace_gml.addCategoryObject('elementBinding', maximumOccurs.name().localName(), maximumOccurs)

Cylinder = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'Cylinder'), CylinderType)
_Namespace_gml.addCategoryObject('elementBinding', Cylinder.name().localName(), Cylinder)

quantityTypeReference = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'quantityTypeReference'), ReferenceType, documentation=u'The gml:quantityTypeReference property indicates the phenomenon to which the units apply. The content is a reference to a remote value.')
_Namespace_gml.addCategoryObject('elementBinding', quantityTypeReference.name().localName(), quantityTypeReference)

value = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'value'), MeasureType, documentation=u'gml:value is a numeric value of an operation parameter, with its associated unit of measure.')
_Namespace_gml.addCategoryObject('elementBinding', value.name().localName(), value)

DQ_ThematicClassificationCorrectness = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'DQ_ThematicClassificationCorrectness'), DQ_ThematicClassificationCorrectness_Type)
_Namespace_gmd.addCategoryObject('elementBinding', DQ_ThematicClassificationCorrectness.name().localName(), DQ_ThematicClassificationCorrectness)

Date = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gco, u'Date'), Date_Type, nillable=pyxb.binding.datatypes.boolean(1))
_Namespace_gco.addCategoryObject('elementBinding', Date.name().localName(), Date)

AbstractScalarValue = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractScalarValue'), pyxb.binding.datatypes.anyType, abstract=pyxb.binding.datatypes.boolean(1), documentation=u'gml:AbstractScalarValue is an abstract element which acts as the head of a substitution group which contains gml:Boolean, gml:Category, gml:Count and gml:Quantity, and (transitively) the elements in their substitution groups.')
_Namespace_gml.addCategoryObject('elementBinding', AbstractScalarValue.name().localName(), AbstractScalarValue)

TopoPoint = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'TopoPoint'), TopoPointType, documentation=u'The intended use of gml:TopoPoint is to appear within a point feature to express the structural and possibly geometric relationships of this feature to other features via shared node definitions.')
_Namespace_gml.addCategoryObject('elementBinding', TopoPoint.name().localName(), TopoPoint)

DQ_Scope = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'DQ_Scope'), DQ_Scope_Type)
_Namespace_gmd.addCategoryObject('elementBinding', DQ_Scope.name().localName(), DQ_Scope)

MD_DimensionNameTypeCode = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_DimensionNameTypeCode'), CodeListValue_Type)
_Namespace_gmd.addCategoryObject('elementBinding', MD_DimensionNameTypeCode.name().localName(), MD_DimensionNameTypeCode)



CharacterString_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gco, u'CharacterString'), pyxb.binding.datatypes.string, scope=CharacterString_PropertyType))
CharacterString_PropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=CharacterString_PropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gco, u'CharacterString'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



Real_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gco, u'Real'), pyxb.binding.datatypes.double, scope=Real_PropertyType))
Real_PropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=Real_PropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gco, u'Real'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



AbstractMD_Identification_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'resourceMaintenance'), MD_MaintenanceInformation_PropertyType, scope=AbstractMD_Identification_Type))

AbstractMD_Identification_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'pointOfContact'), CI_ResponsibleParty_PropertyType, scope=AbstractMD_Identification_Type))

AbstractMD_Identification_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'purpose'), CharacterString_PropertyType, scope=AbstractMD_Identification_Type))

AbstractMD_Identification_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'resourceFormat'), MD_Format_PropertyType, scope=AbstractMD_Identification_Type))

AbstractMD_Identification_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'graphicOverview'), MD_BrowseGraphic_PropertyType, scope=AbstractMD_Identification_Type))

AbstractMD_Identification_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'citation'), CI_Citation_PropertyType, scope=AbstractMD_Identification_Type))

AbstractMD_Identification_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'resourceConstraints'), MD_Constraints_PropertyType, scope=AbstractMD_Identification_Type))

AbstractMD_Identification_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'abstract'), CharacterString_PropertyType, scope=AbstractMD_Identification_Type))

AbstractMD_Identification_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'resourceSpecificUsage'), MD_Usage_PropertyType, scope=AbstractMD_Identification_Type))

AbstractMD_Identification_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'aggregationInfo'), MD_AggregateInformation_PropertyType, scope=AbstractMD_Identification_Type))

AbstractMD_Identification_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'credit'), CharacterString_PropertyType, scope=AbstractMD_Identification_Type))

AbstractMD_Identification_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'descriptiveKeywords'), MD_Keywords_PropertyType, scope=AbstractMD_Identification_Type))

AbstractMD_Identification_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'status'), MD_ProgressCode_PropertyType, scope=AbstractMD_Identification_Type))
AbstractMD_Identification_Type._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=AbstractMD_Identification_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'citation'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=AbstractMD_Identification_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'resourceMaintenance'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=AbstractMD_Identification_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'resourceConstraints'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=AbstractMD_Identification_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'graphicOverview'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=AbstractMD_Identification_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'resourceFormat'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=AbstractMD_Identification_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'pointOfContact'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=AbstractMD_Identification_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'descriptiveKeywords'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=AbstractMD_Identification_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'resourceSpecificUsage'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=AbstractMD_Identification_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'status'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=AbstractMD_Identification_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'credit'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=AbstractMD_Identification_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'aggregationInfo'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=AbstractMD_Identification_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'abstract'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=AbstractMD_Identification_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'resourceMaintenance'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=AbstractMD_Identification_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'purpose'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=AbstractMD_Identification_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'resourceConstraints'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=AbstractMD_Identification_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'graphicOverview'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=AbstractMD_Identification_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'resourceFormat'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=AbstractMD_Identification_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'pointOfContact'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=AbstractMD_Identification_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'descriptiveKeywords'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=AbstractMD_Identification_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'resourceSpecificUsage'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=AbstractMD_Identification_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'status'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=AbstractMD_Identification_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'credit'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=AbstractMD_Identification_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'aggregationInfo'))),
    ])
})



MD_DataIdentification_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'characterSet'), MD_CharacterSetCode_PropertyType, scope=MD_DataIdentification_Type))

MD_DataIdentification_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'topicCategory'), MD_TopicCategoryCode_PropertyType, scope=MD_DataIdentification_Type))

MD_DataIdentification_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'extent'), EX_Extent_PropertyType, scope=MD_DataIdentification_Type))

MD_DataIdentification_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'environmentDescription'), CharacterString_PropertyType, scope=MD_DataIdentification_Type))

MD_DataIdentification_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'language'), CharacterString_PropertyType, scope=MD_DataIdentification_Type))

MD_DataIdentification_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'supplementalInformation'), CharacterString_PropertyType, scope=MD_DataIdentification_Type))

MD_DataIdentification_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'spatialRepresentationType'), MD_SpatialRepresentationTypeCode_PropertyType, scope=MD_DataIdentification_Type))

MD_DataIdentification_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'spatialResolution'), MD_Resolution_PropertyType, scope=MD_DataIdentification_Type))
MD_DataIdentification_Type._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=MD_DataIdentification_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'citation'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=MD_DataIdentification_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'language'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MD_DataIdentification_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'pointOfContact'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MD_DataIdentification_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'resourceMaintenance'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MD_DataIdentification_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'graphicOverview'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MD_DataIdentification_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'status'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MD_DataIdentification_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'resourceFormat'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MD_DataIdentification_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'credit'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MD_DataIdentification_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'descriptiveKeywords'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MD_DataIdentification_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'resourceSpecificUsage'))),
        pyxb.binding.content.ContentModelTransition(next_state=9, element_use=MD_DataIdentification_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'spatialRepresentationType'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MD_DataIdentification_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'resourceConstraints'))),
        pyxb.binding.content.ContentModelTransition(next_state=9, element_use=MD_DataIdentification_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'spatialResolution'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MD_DataIdentification_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'aggregationInfo'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=MD_DataIdentification_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'abstract'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=MD_DataIdentification_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'characterSet'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=MD_DataIdentification_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'topicCategory'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=MD_DataIdentification_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'extent'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=MD_DataIdentification_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'environmentDescription'))),
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=MD_DataIdentification_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'supplementalInformation'))),
    ])
    , 5 : pyxb.binding.content.ContentModelState(state=5, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=MD_DataIdentification_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'language'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MD_DataIdentification_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'pointOfContact'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MD_DataIdentification_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'credit'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MD_DataIdentification_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'resourceMaintenance'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MD_DataIdentification_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'graphicOverview'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MD_DataIdentification_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'status'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MD_DataIdentification_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'resourceFormat'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MD_DataIdentification_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'purpose'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MD_DataIdentification_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'descriptiveKeywords'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MD_DataIdentification_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'resourceSpecificUsage'))),
        pyxb.binding.content.ContentModelTransition(next_state=9, element_use=MD_DataIdentification_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'spatialRepresentationType'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MD_DataIdentification_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'resourceConstraints'))),
        pyxb.binding.content.ContentModelTransition(next_state=9, element_use=MD_DataIdentification_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'spatialResolution'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MD_DataIdentification_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'aggregationInfo'))),
    ])
    , 6 : pyxb.binding.content.ContentModelState(state=6, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=MD_DataIdentification_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'language'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=MD_DataIdentification_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'characterSet'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=MD_DataIdentification_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'extent'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=MD_DataIdentification_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'environmentDescription'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=MD_DataIdentification_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'topicCategory'))),
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=MD_DataIdentification_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'supplementalInformation'))),
        pyxb.binding.content.ContentModelTransition(next_state=9, element_use=MD_DataIdentification_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'spatialRepresentationType'))),
        pyxb.binding.content.ContentModelTransition(next_state=9, element_use=MD_DataIdentification_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'spatialResolution'))),
    ])
    , 7 : pyxb.binding.content.ContentModelState(state=7, is_final=True, transitions=[
    ])
    , 8 : pyxb.binding.content.ContentModelState(state=8, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=MD_DataIdentification_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'supplementalInformation'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=MD_DataIdentification_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'extent'))),
    ])
    , 9 : pyxb.binding.content.ContentModelState(state=9, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=MD_DataIdentification_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'language'))),
        pyxb.binding.content.ContentModelTransition(next_state=9, element_use=MD_DataIdentification_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'spatialRepresentationType'))),
        pyxb.binding.content.ContentModelTransition(next_state=9, element_use=MD_DataIdentification_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'spatialResolution'))),
    ])
})



CI_Contact_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'contactInstructions'), CharacterString_PropertyType, scope=CI_Contact_Type))

CI_Contact_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'phone'), CI_Telephone_PropertyType, scope=CI_Contact_Type))

CI_Contact_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'onlineResource'), CI_OnlineResource_PropertyType, scope=CI_Contact_Type))

CI_Contact_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'hoursOfService'), CharacterString_PropertyType, scope=CI_Contact_Type))

CI_Contact_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'address'), CI_Address_PropertyType, scope=CI_Contact_Type))
CI_Contact_Type._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=CI_Contact_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'onlineResource'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=CI_Contact_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'phone'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=CI_Contact_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'hoursOfService'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=CI_Contact_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'address'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=CI_Contact_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'contactInstructions'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=CI_Contact_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'address'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=CI_Contact_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'contactInstructions'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=CI_Contact_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'onlineResource'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=CI_Contact_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'hoursOfService'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=CI_Contact_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'contactInstructions'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=CI_Contact_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'onlineResource'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=CI_Contact_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'hoursOfService'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=True, transitions=[
    ])
    , 5 : pyxb.binding.content.ContentModelState(state=5, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=CI_Contact_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'contactInstructions'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=CI_Contact_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'hoursOfService'))),
    ])
    , 6 : pyxb.binding.content.ContentModelState(state=6, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=CI_Contact_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'contactInstructions'))),
    ])
})



TriangleType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'exterior'), AbstractRingPropertyType, scope=TriangleType, documentation=u'A boundary of a surface consists of a number of rings. In the normal 2D case, one of these rings is distinguished as being the exterior boundary. In a general manifold this is not always possible, in which case all boundaries shall be listed as interior boundaries, and the exterior will be empty.'))
TriangleType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=TriangleType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'exterior'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



DirectionPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'DirectionVector'), DirectionVectorType, scope=DirectionPropertyType))

DirectionPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'DirectionDescription'), DirectionDescriptionType, scope=DirectionPropertyType))

DirectionPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'CompassPoint'), CompassPointEnumeration, scope=DirectionPropertyType))

DirectionPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'DirectionKeyword'), CodeType, scope=DirectionPropertyType))

DirectionPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'DirectionString'), StringOrRefType, scope=DirectionPropertyType))
DirectionPropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DirectionPropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'DirectionVector'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DirectionPropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'CompassPoint'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DirectionPropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'DirectionDescription'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DirectionPropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'DirectionString'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DirectionPropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'DirectionKeyword'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



SolidArrayPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractSolid'), AbstractSolidType, abstract=pyxb.binding.datatypes.boolean(1), scope=SolidArrayPropertyType, documentation=u'The AbstractSolid element is the abstract head of the substituition group for all (continuous) solid elements.'))
SolidArrayPropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=1, element_use=SolidArrayPropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractSolid'))),
    ])
})



GeneralTransformationPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractGeneralTransformation'), AbstractGeneralTransformationType, abstract=pyxb.binding.datatypes.boolean(1), scope=GeneralTransformationPropertyType, documentation=u'gml:AbstractGeneralTransformation is an abstract operation on coordinates that usually includes a change of Datum. The parameters of a coordinate transformation are empirically derived from data containing the coordinates of a series of points in both coordinate reference systems. This computational process is usually "over-determined", allowing derivation of error (or accuracy) estimates for the transformation. Also, the stochastic nature of the parameters may result in multiple (different) versions of the same coordinate transformation. The operationVersion, sourceCRS, and targetCRS proeprty elements are mandatory in a coordinate transformation.\nThis abstract complex type is expected to be extended for well-known operation methods with many Transformation instances, in Application Schemas that define operation-method-specialized value element names and contents. This transformation uses an operation method with associated parameter values. However, operation methods and parameter values are directly associated with concrete subtypes, not with this abstract type. All concrete types derived from this type shall extend this type to include a "usesMethod" element that references one "OperationMethod" element. Similarly, all concrete types derived from this type shall extend this type to include one or more elements each named "uses...Value" that each use the type of an element substitutable for the "AbstractGeneralParameterValue" element.'))
GeneralTransformationPropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=GeneralTransformationPropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractGeneralTransformation'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



DirectedNodePropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'Node'), NodeType, scope=DirectedNodePropertyType, documentation=u'gml:Node represents the 0-dimensional primitive.\nThe optional coboundary of a node (gml:directedEdge) is a sequence of directed edges which are incident on this node. Edges emanating from this node appear in the node coboundary with a negative orientation. \nIf provided, the aggregationType attribute shall have the value "sequence".\nA node may optionally be realised by a 0-dimensional geometric primitive (gml:pointProperty).'))
DirectedNodePropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DirectedNodePropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'Node'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



AbstractGMLType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'), CodeType, scope=AbstractGMLType, documentation=u'The gml:name property provides a label or identifier for the object, commonly a descriptive name. An object may have several names, typically assigned by different authorities. gml:name uses the gml:CodeType content model.  The authority for a name is indicated by the value of its (optional) codeSpace attribute.  The name may or may not be unique, as determined by the rules of the organization responsible for the codeSpace.  In common usage there will be one name per authority, so a processing application may select the name from its preferred codeSpace.'))

AbstractGMLType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'metaDataProperty'), MetaDataPropertyType, scope=AbstractGMLType, documentation=u''))

AbstractGMLType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'), ReferenceType, scope=AbstractGMLType, documentation=u'The value of this property is a remote text description of the object. The xlink:href attribute of the gml:descriptionReference property references the external description.'))

AbstractGMLType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'description'), StringOrRefType, scope=AbstractGMLType, documentation=u'The value of this property is a text description of the object. gml:description uses gml:StringOrRefType as its content model, so it may contain a simple text string content, or carry a reference to an external description. The use of gml:description to reference an external description has been deprecated and replaced by the gml:descriptionReference property.'))

AbstractGMLType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'), CodeWithAuthorityType, scope=AbstractGMLType, documentation=u'Often, a special identifier is assigned to an object by the maintaining authority with the intention that it is used in references to the object For such cases, the codeSpace shall be provided. That identifier is usually unique either globally or within an application domain. gml:identifier is a pre-defined property for such identifiers.'))
AbstractGMLType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=AbstractGMLType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=AbstractGMLType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=AbstractGMLType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=1, element_use=AbstractGMLType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'metaDataProperty'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=AbstractGMLType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'description'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=AbstractGMLType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=AbstractGMLType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=AbstractGMLType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=AbstractGMLType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=AbstractGMLType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=AbstractGMLType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
    ])
})


DefinitionBaseType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=1, element_use=DefinitionBaseType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'metaDataProperty'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DefinitionBaseType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'description'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=DefinitionBaseType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=DefinitionBaseType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=DefinitionBaseType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=DefinitionBaseType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=DefinitionBaseType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=DefinitionBaseType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
    ])
})



DefinitionType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'remarks'), pyxb.binding.datatypes.string, scope=DefinitionType))
DefinitionType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=1, element_use=DefinitionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'metaDataProperty'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DefinitionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'description'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=DefinitionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=DefinitionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=DefinitionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=DefinitionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=DefinitionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=True, transitions=[
    ])
    , 5 : pyxb.binding.content.ContentModelState(state=5, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=DefinitionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=DefinitionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'remarks'))),
    ])
})


IdentifiedObjectType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=1, element_use=IdentifiedObjectType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'metaDataProperty'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=IdentifiedObjectType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'description'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=IdentifiedObjectType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=IdentifiedObjectType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=IdentifiedObjectType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=IdentifiedObjectType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=IdentifiedObjectType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=True, transitions=[
    ])
    , 5 : pyxb.binding.content.ContentModelState(state=5, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=IdentifiedObjectType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=IdentifiedObjectType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'remarks'))),
    ])
})



AbstractCRSType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'domainOfValidity'), CTD_ANON_1, scope=AbstractCRSType, documentation=u'The gml:domainOfValidity property implements an association role to an EX_Extent object as encoded in ISO/TS 19139, either referencing or containing the definition of that extent.'))

AbstractCRSType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'scope'), pyxb.binding.datatypes.string, scope=AbstractCRSType, documentation=u'The gml:scope property provides a description of the usage, or limitations of usage, for which this CRS-related object is valid. If unknown, enter "not known".'))
AbstractCRSType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=AbstractCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=1, element_use=AbstractCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'metaDataProperty'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=AbstractCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=AbstractCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'description'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=AbstractCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'domainOfValidity'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=AbstractCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'scope'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=AbstractCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=AbstractCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=AbstractCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
    ])
    , 5 : pyxb.binding.content.ContentModelState(state=5, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=AbstractCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'domainOfValidity'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=AbstractCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'scope'))),
    ])
    , 6 : pyxb.binding.content.ContentModelState(state=6, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=AbstractCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=AbstractCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'domainOfValidity'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=AbstractCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'scope'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=AbstractCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'remarks'))),
    ])
})



AbstractGeneralDerivedCRSType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'conversion'), GeneralConversionPropertyType, scope=AbstractGeneralDerivedCRSType, documentation=u'gml:conversion is an association role to the coordinate conversion used to define the derived CRS.'))
AbstractGeneralDerivedCRSType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=1, element_use=AbstractGeneralDerivedCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'metaDataProperty'))),
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=AbstractGeneralDerivedCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=AbstractGeneralDerivedCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=AbstractGeneralDerivedCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'description'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=AbstractGeneralDerivedCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'domainOfValidity'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=AbstractGeneralDerivedCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'scope'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=AbstractGeneralDerivedCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=AbstractGeneralDerivedCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=True, transitions=[
    ])
    , 5 : pyxb.binding.content.ContentModelState(state=5, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=AbstractGeneralDerivedCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
    ])
    , 6 : pyxb.binding.content.ContentModelState(state=6, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=AbstractGeneralDerivedCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'conversion'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=AbstractGeneralDerivedCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'domainOfValidity'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=AbstractGeneralDerivedCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'scope'))),
    ])
    , 7 : pyxb.binding.content.ContentModelState(state=7, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=AbstractGeneralDerivedCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=AbstractGeneralDerivedCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'domainOfValidity'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=AbstractGeneralDerivedCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'scope'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=AbstractGeneralDerivedCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'remarks'))),
    ])
})



ProjectedCRSType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'baseGeodeticCRS'), GeodeticCRSPropertyType, scope=ProjectedCRSType, documentation=u'gml:baseGeodeticCRS is an association role to the geodetic coordinate reference system used by this projected CRS.'))

ProjectedCRSType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'baseGeographicCRS'), GeographicCRSPropertyType, scope=ProjectedCRSType, documentation=u''))

ProjectedCRSType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'cartesianCS'), CartesianCSPropertyType, scope=ProjectedCRSType, documentation=u'gml:cartesianCS is an association role to the Cartesian coordinate system used by this CRS.'))
ProjectedCRSType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=ProjectedCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=ProjectedCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'description'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=ProjectedCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=1, element_use=ProjectedCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'metaDataProperty'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=9, element_use=ProjectedCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'cartesianCS'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=ProjectedCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'remarks'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=ProjectedCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=ProjectedCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'domainOfValidity'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=ProjectedCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'scope'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=ProjectedCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
    ])
    , 5 : pyxb.binding.content.ContentModelState(state=5, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=ProjectedCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'domainOfValidity'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=ProjectedCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'scope'))),
    ])
    , 6 : pyxb.binding.content.ContentModelState(state=6, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=ProjectedCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=ProjectedCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
    ])
    , 7 : pyxb.binding.content.ContentModelState(state=7, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=ProjectedCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'baseGeodeticCRS'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=ProjectedCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'baseGeographicCRS'))),
    ])
    , 8 : pyxb.binding.content.ContentModelState(state=8, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=ProjectedCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'conversion'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=ProjectedCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'domainOfValidity'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=ProjectedCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'scope'))),
    ])
    , 9 : pyxb.binding.content.ContentModelState(state=9, is_final=True, transitions=[
    ])
})



SurfaceArrayPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractSurface'), AbstractSurfaceType, abstract=pyxb.binding.datatypes.boolean(1), scope=SurfaceArrayPropertyType, documentation=u'The AbstractSurface element is the abstract head of the substitution group for all (continuous) surface elements.'))
SurfaceArrayPropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=1, element_use=SurfaceArrayPropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractSurface'))),
    ])
})



PointPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'Point'), PointType, scope=PointPropertyType, documentation=u'A Point is defined by a single coordinate tuple. The direct position of a point is specified by the pos element which is of type DirectPositionType.'))
PointPropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=PointPropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'Point'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



CI_ResponsibleParty_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'role'), CI_RoleCode_PropertyType, scope=CI_ResponsibleParty_Type))

CI_ResponsibleParty_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'individualName'), CharacterString_PropertyType, scope=CI_ResponsibleParty_Type))

CI_ResponsibleParty_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'organisationName'), CharacterString_PropertyType, scope=CI_ResponsibleParty_Type))

CI_ResponsibleParty_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'contactInfo'), CI_Contact_PropertyType, scope=CI_ResponsibleParty_Type))

CI_ResponsibleParty_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'positionName'), CharacterString_PropertyType, scope=CI_ResponsibleParty_Type))
CI_ResponsibleParty_Type._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=CI_ResponsibleParty_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'individualName'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=CI_ResponsibleParty_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'contactInfo'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=CI_ResponsibleParty_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'organisationName'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=CI_ResponsibleParty_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'role'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=CI_ResponsibleParty_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'positionName'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=CI_ResponsibleParty_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'contactInfo'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=CI_ResponsibleParty_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'role'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=CI_ResponsibleParty_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'organisationName'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=CI_ResponsibleParty_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'positionName'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=CI_ResponsibleParty_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'role'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=True, transitions=[
    ])
    , 5 : pyxb.binding.content.ContentModelState(state=5, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=CI_ResponsibleParty_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'contactInfo'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=CI_ResponsibleParty_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'role'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=CI_ResponsibleParty_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'positionName'))),
    ])
    , 6 : pyxb.binding.content.ContentModelState(state=6, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=CI_ResponsibleParty_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'contactInfo'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=CI_ResponsibleParty_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'role'))),
    ])
})



MD_ReferenceSystem_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_ReferenceSystem'), MD_ReferenceSystem_Type, scope=MD_ReferenceSystem_PropertyType))
MD_ReferenceSystem_PropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MD_ReferenceSystem_PropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_ReferenceSystem'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})


AbstractTopologyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=AbstractTopologyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=AbstractTopologyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=AbstractTopologyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=1, element_use=AbstractTopologyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'metaDataProperty'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=AbstractTopologyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'description'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=AbstractTopologyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=AbstractTopologyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=AbstractTopologyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=AbstractTopologyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=AbstractTopologyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=AbstractTopologyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
    ])
})


AbstractTopoPrimitiveType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=AbstractTopoPrimitiveType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=AbstractTopoPrimitiveType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=AbstractTopoPrimitiveType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=1, element_use=AbstractTopoPrimitiveType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'metaDataProperty'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=AbstractTopoPrimitiveType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'description'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=AbstractTopoPrimitiveType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=AbstractTopoPrimitiveType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=AbstractTopoPrimitiveType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=AbstractTopoPrimitiveType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=AbstractTopoPrimitiveType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=AbstractTopoPrimitiveType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
    ])
})



FaceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'directedEdge'), DirectedEdgePropertyType, scope=FaceType, documentation=u'A gml:directedEdge property element describes the boundary of topology faces, the coBoundary of topology nodes and is used in the support of topological line features via the gml:TopoCurve expression, see below. The orientation attribute of type gml:SignType expresses the sense in which the included edge is used, i.e. forward or reverse.'))

FaceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'directedTopoSolid'), DirectedTopoSolidPropertyType, scope=FaceType, documentation=u'The gml:directedSolid property element describes the coBoundary of topology faces and is used in the support of volume features via the gml:TopoVolume expression, see below. The orientation attribute of type gml:SignType expresses the sense in which the included solid appears in the face coboundary. In the context of a gml:TopoVolume the orientation attribute has no meaning.'))

FaceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'surfaceProperty'), SurfacePropertyType, scope=FaceType, documentation=u'This property element either references a surface via the XLink-attributes or contains the surface element. surfaceProperty is the predefined property which may be used by GML Application Schemas whenever a GML feature has a property with a value that is substitutable for AbstractSurface.'))

FaceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'isolated'), NodePropertyType, scope=FaceType))
FaceType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=9, element_use=FaceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=FaceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=FaceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'directedEdge'))),
        pyxb.binding.content.ContentModelTransition(next_state=9, element_use=FaceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=1, element_use=FaceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'metaDataProperty'))),
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=FaceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'isolated'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=FaceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'description'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=9, element_use=FaceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=9, element_use=FaceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=FaceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'isolated'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=FaceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'directedEdge'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=FaceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'directedTopoSolid'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=FaceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'surfaceProperty'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=True, transitions=[
    ])
    , 5 : pyxb.binding.content.ContentModelState(state=5, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=FaceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'surfaceProperty'))),
    ])
    , 6 : pyxb.binding.content.ContentModelState(state=6, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=FaceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'directedTopoSolid'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=FaceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'surfaceProperty'))),
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=FaceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'isolated'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=FaceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'directedEdge'))),
    ])
    , 7 : pyxb.binding.content.ContentModelState(state=7, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=FaceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'directedEdge'))),
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=FaceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'isolated'))),
    ])
    , 8 : pyxb.binding.content.ContentModelState(state=8, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=FaceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=9, element_use=FaceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=9, element_use=FaceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=FaceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'directedEdge'))),
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=FaceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'isolated'))),
    ])
    , 9 : pyxb.binding.content.ContentModelState(state=9, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=9, element_use=FaceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=FaceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'directedEdge'))),
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=FaceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'isolated'))),
    ])
})



DQ_ConceptualConsistency_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'DQ_ConceptualConsistency'), DQ_ConceptualConsistency_Type, scope=DQ_ConceptualConsistency_PropertyType))
DQ_ConceptualConsistency_PropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DQ_ConceptualConsistency_PropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'DQ_ConceptualConsistency'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



MD_ServiceIdentification_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_ServiceIdentification'), MD_ServiceIdentification_Type, scope=MD_ServiceIdentification_PropertyType))
MD_ServiceIdentification_PropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MD_ServiceIdentification_PropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_ServiceIdentification'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



CoordinateSystemAxisPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'CoordinateSystemAxis'), CoordinateSystemAxisType, scope=CoordinateSystemAxisPropertyType, documentation=u'gml:CoordinateSystemAxis is a definition of a coordinate system axis.'))
CoordinateSystemAxisPropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=CoordinateSystemAxisPropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'CoordinateSystemAxis'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



Binary_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gco, u'Binary'), Binary_Type, scope=Binary_PropertyType))
Binary_PropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=Binary_PropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gco, u'Binary'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



MD_Georeferenceable_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_Georeferenceable'), MD_Georeferenceable_Type, scope=MD_Georeferenceable_PropertyType))
MD_Georeferenceable_PropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MD_Georeferenceable_PropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_Georeferenceable'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



SphericalCSPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'SphericalCS'), SphericalCSType, scope=SphericalCSPropertyType, documentation=u'gml:SphericalCS is a three-dimensional coordinate system with one distance measured from the origin and two angular coordinates. A SphericalCS shall have three gml:axis property elements.'))
SphericalCSPropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=SphericalCSPropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'SphericalCS'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



EdgeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'curveProperty'), CurvePropertyType, scope=EdgeType, documentation=u'This property element either references a curve via the XLink-attributes or contains the curve element. curveProperty is the predefined property which may be used by GML Application Schemas whenever a GML feature has a property with a value that is substitutable for AbstractCurve.'))

EdgeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'container'), TopoSolidPropertyType, scope=EdgeType))

EdgeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'directedFace'), DirectedFacePropertyType, scope=EdgeType, documentation=u'The gml:directedFace property element describes the boundary of topology solids, in the coBoundary of topology edges and is used in the support of surface features via the gml:TopoSurface expression, see below. The orientation attribute of type gml:SignType expresses the sense in which the included face is used i.e. inward or outward with respect to the surface normal in any geometric realisation.'))

EdgeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'directedNode'), DirectedNodePropertyType, scope=EdgeType, documentation=u'A gml:directedNode property element describes the boundary of topology edges and is used in the support of topological point features via the gml:TopoPoint expression, see below. The orientation attribute of type gml:SignType expresses the sense in which the included node is used: start ("-") or end ("+") node.'))
EdgeType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=EdgeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=EdgeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=EdgeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=EdgeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'container'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=EdgeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'directedNode'))),
        pyxb.binding.content.ContentModelTransition(next_state=1, element_use=EdgeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'metaDataProperty'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=EdgeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'description'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=EdgeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'directedNode'))),
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=EdgeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'container'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=EdgeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=EdgeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'directedNode'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=EdgeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=EdgeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'container'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=EdgeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=EdgeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'directedNode'))),
    ])
    , 5 : pyxb.binding.content.ContentModelState(state=5, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=EdgeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'curveProperty'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=EdgeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'directedFace'))),
    ])
    , 6 : pyxb.binding.content.ContentModelState(state=6, is_final=True, transitions=[
    ])
    , 7 : pyxb.binding.content.ContentModelState(state=7, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=EdgeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'directedNode'))),
    ])
    , 8 : pyxb.binding.content.ContentModelState(state=8, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=EdgeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=EdgeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'directedNode'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=EdgeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=EdgeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'container'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=EdgeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
    ])
})



DQ_ConformanceResult_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'pass'), Boolean_PropertyType, scope=DQ_ConformanceResult_Type))

DQ_ConformanceResult_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'specification'), CI_Citation_PropertyType, scope=DQ_ConformanceResult_Type))

DQ_ConformanceResult_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'explanation'), CharacterString_PropertyType, scope=DQ_ConformanceResult_Type))
DQ_ConformanceResult_Type._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DQ_ConformanceResult_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'specification'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=DQ_ConformanceResult_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'explanation'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=DQ_ConformanceResult_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'pass'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=True, transitions=[
    ])
})



RangeSetType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'ValueArray'), ValueArrayType, scope=RangeSetType, documentation=u'A Value Array is used for homogeneous arrays of primitive and aggregate values.  \nThe member values may be scalars, composites, arrays or lists.\nValueArray has the same content model as CompositeValue, but the member values shall be homogeneous.  The element declaration contains a Schematron constraint which expresses this restriction precisely.  Since the members are homogeneous, the gml:referenceSystem (uom, codeSpace) may be specified on the gml:ValueArray itself and inherited by all the members if desired.'))

RangeSetType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractScalarValueList'), pyxb.binding.datatypes.anyType, abstract=pyxb.binding.datatypes.boolean(1), scope=RangeSetType, documentation=u'gml:AbstractScalarValueList is an abstract element which acts as the head of a substitution group which contains gml:BooleanList, gml:CategoryList, gml:CountList and gml:QuantityList, and (transitively) the elements in their substitution groups.'))

RangeSetType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'DataBlock'), DataBlockType, scope=RangeSetType, documentation=u'gml:DataBlock describes the Range as a block of text encoded values similar to a Common Separated Value (CSV) representation.\nThe range set parameterization is described by the property gml:rangeParameters.'))

RangeSetType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'File'), FileType, scope=RangeSetType, documentation=u'for efficiency reasons, GML also provides a means of encoding the range set in an arbitrary external encoding, such as a binary file.  This encoding may be "well-known" but this is not required. This mode uses the gml:File element.\nThe values of the coverage (attribute values in the range set) are transmitted in a external file that is referenced from the XML structure described by gml:FileType.  The external file is referenced by the gml:fileReference property that is an anyURI (the gml:fileName property has been deprecated).  This means that the external file may be located remotely from the referencing GML instance. \nThe gml:compression property points to a definition of a compression algorithm through an anyURI.  This may be a retrievable, computable definition or simply a reference to an unambiguous name for the compression method.\nThe gml:mimeType property points to a definition of the file mime type.\nThe gml:fileStructure property is defined by a codelist. Note further that all values shall be enclosed in a single file. Multi-file structures for values are not supported in GML.\nThe semantics of the range set is described as above using the gml:rangeParameters property.\nNote that if any compression algorithm is applied, the structure above applies only to the pre-compression or post-decompression structure of the file.\nNote that the fields within a record match the gml:valueComponents of the gml:CompositeValue in document order.'))
RangeSetType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=RangeSetType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'ValueArray'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=RangeSetType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractScalarValueList'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=RangeSetType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'DataBlock'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=RangeSetType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'File'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=RangeSetType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'ValueArray'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=RangeSetType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractScalarValueList'))),
    ])
})



CompoundCRSType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'componentReferenceSystem'), SingleCRSPropertyType, scope=CompoundCRSType, documentation=u'The gml:componentReferenceSystem elements are an ordered sequence of associations to all the component coordinate reference systems included in this compound coordinate reference system. The gml:AggregationAttributeGroup should be used to specify that the gml:componentReferenceSystem properties are ordered.'))
CompoundCRSType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=1, element_use=CompoundCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'metaDataProperty'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=CompoundCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'description'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=CompoundCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=CompoundCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=CompoundCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=CompoundCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=CompoundCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'componentReferenceSystem'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=CompoundCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
    ])
    , 5 : pyxb.binding.content.ContentModelState(state=5, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=CompoundCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'componentReferenceSystem'))),
    ])
    , 6 : pyxb.binding.content.ContentModelState(state=6, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=CompoundCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'componentReferenceSystem'))),
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=CompoundCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'domainOfValidity'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=CompoundCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'scope'))),
    ])
    , 7 : pyxb.binding.content.ContentModelState(state=7, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=CompoundCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'domainOfValidity'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=CompoundCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'scope'))),
    ])
    , 8 : pyxb.binding.content.ContentModelState(state=8, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=CompoundCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=CompoundCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'domainOfValidity'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=CompoundCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'scope'))),
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=CompoundCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'remarks'))),
    ])
})



AbstractDatumType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'scope'), pyxb.binding.datatypes.string, scope=AbstractDatumType, documentation=u'The gml:scope property provides a description of the usage, or limitations of usage, for which this CRS-related object is valid. If unknown, enter "not known".'))

AbstractDatumType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'anchorDefinition'), CodeType, scope=AbstractDatumType, documentation=u'gml:anchorDefinition is a description, possibly including coordinates, of the definition used to anchor the datum to the Earth. Also known as the "origin", especially for engineering and image datums. The codeSpace attribute may be used to reference a source of more detailed on this point or surface, or on a set of such descriptions.\n-\tFor a geodetic datum, this point is also known as the fundamental point, which is traditionally the point where the relationship between geoid and ellipsoid is defined. In some cases, the "fundamental point" may consist of a number of points. In those cases, the parameters defining the geoid/ellipsoid relationship have been averaged for these points, and the averages adopted as the datum definition.\n-\tFor an engineering datum, the anchor definition may be a physical point, or it may be a point with defined coordinates in another CRS.may\n-\tFor an image datum, the anchor definition is usually either the centre of the image or the corner of the image.\n-\tFor a temporal datum, this attribute is not defined. Instead of the anchor definition, a temporal datum carries a separate time origin of type DateTime.'))

AbstractDatumType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'realizationEpoch'), pyxb.binding.datatypes.date, scope=AbstractDatumType, documentation=u'gml:realizationEpoch is the time after which this datum definition is valid. See ISO 19111 Table 32 for details.'))

AbstractDatumType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'domainOfValidity'), CTD_ANON_1, scope=AbstractDatumType, documentation=u'The gml:domainOfValidity property implements an association role to an EX_Extent object as encoded in ISO/TS 19139, either referencing or containing the definition of that extent.'))
AbstractDatumType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=1, element_use=AbstractDatumType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'metaDataProperty'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=AbstractDatumType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'description'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=AbstractDatumType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=AbstractDatumType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=AbstractDatumType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=AbstractDatumType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=AbstractDatumType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'domainOfValidity'))),
        pyxb.binding.content.ContentModelTransition(next_state=9, element_use=AbstractDatumType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'scope'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=AbstractDatumType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'realizationEpoch'))),
    ])
    , 5 : pyxb.binding.content.ContentModelState(state=5, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=AbstractDatumType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
    ])
    , 6 : pyxb.binding.content.ContentModelState(state=6, is_final=True, transitions=[
    ])
    , 7 : pyxb.binding.content.ContentModelState(state=7, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=9, element_use=AbstractDatumType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'scope'))),
    ])
    , 8 : pyxb.binding.content.ContentModelState(state=8, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=AbstractDatumType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'domainOfValidity'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=AbstractDatumType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=9, element_use=AbstractDatumType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'scope'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=AbstractDatumType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'remarks'))),
    ])
    , 9 : pyxb.binding.content.ContentModelState(state=9, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=AbstractDatumType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'anchorDefinition'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=AbstractDatumType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'realizationEpoch'))),
        pyxb.binding.content.ContentModelTransition(next_state=9, element_use=AbstractDatumType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'scope'))),
    ])
})


VerticalDatumType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=1, element_use=VerticalDatumType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'metaDataProperty'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=VerticalDatumType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'description'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=VerticalDatumType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=VerticalDatumType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=VerticalDatumType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=VerticalDatumType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=VerticalDatumType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'domainOfValidity'))),
        pyxb.binding.content.ContentModelTransition(next_state=9, element_use=VerticalDatumType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'scope'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=VerticalDatumType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'realizationEpoch'))),
    ])
    , 5 : pyxb.binding.content.ContentModelState(state=5, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=VerticalDatumType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
    ])
    , 6 : pyxb.binding.content.ContentModelState(state=6, is_final=True, transitions=[
    ])
    , 7 : pyxb.binding.content.ContentModelState(state=7, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=9, element_use=VerticalDatumType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'scope'))),
    ])
    , 8 : pyxb.binding.content.ContentModelState(state=8, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=VerticalDatumType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'domainOfValidity'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=VerticalDatumType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=9, element_use=VerticalDatumType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'scope'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=VerticalDatumType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'remarks'))),
    ])
    , 9 : pyxb.binding.content.ContentModelState(state=9, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=VerticalDatumType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'anchorDefinition'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=VerticalDatumType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'realizationEpoch'))),
        pyxb.binding.content.ContentModelTransition(next_state=9, element_use=VerticalDatumType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'scope'))),
    ])
})


TemporalDatumBaseType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=TemporalDatumBaseType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'description'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=TemporalDatumBaseType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=1, element_use=TemporalDatumBaseType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'metaDataProperty'))),
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=TemporalDatumBaseType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=TemporalDatumBaseType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=TemporalDatumBaseType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=TemporalDatumBaseType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=TemporalDatumBaseType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'domainOfValidity'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=TemporalDatumBaseType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'scope'))),
    ])
    , 5 : pyxb.binding.content.ContentModelState(state=5, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=TemporalDatumBaseType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'scope'))),
    ])
    , 6 : pyxb.binding.content.ContentModelState(state=6, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=TemporalDatumBaseType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'scope'))),
    ])
    , 7 : pyxb.binding.content.ContentModelState(state=7, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=TemporalDatumBaseType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'remarks'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=TemporalDatumBaseType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'domainOfValidity'))),
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=TemporalDatumBaseType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=TemporalDatumBaseType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'scope'))),
    ])
})



TemporalDatumType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'origin'), pyxb.binding.datatypes.dateTime, scope=TemporalDatumType, documentation=u'gml:origin is the date and time origin of this temporal datum.'))
TemporalDatumType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=TemporalDatumType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'description'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=TemporalDatumType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=1, element_use=TemporalDatumType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'metaDataProperty'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=TemporalDatumType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=TemporalDatumType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=TemporalDatumType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=TemporalDatumType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=True, transitions=[
    ])
    , 5 : pyxb.binding.content.ContentModelState(state=5, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=TemporalDatumType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'domainOfValidity'))),
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=TemporalDatumType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'scope'))),
    ])
    , 6 : pyxb.binding.content.ContentModelState(state=6, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=TemporalDatumType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'scope'))),
    ])
    , 7 : pyxb.binding.content.ContentModelState(state=7, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=TemporalDatumType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'scope'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=TemporalDatumType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'origin'))),
    ])
    , 8 : pyxb.binding.content.ContentModelState(state=8, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=TemporalDatumType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'remarks'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=TemporalDatumType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'domainOfValidity'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=TemporalDatumType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=TemporalDatumType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'scope'))),
    ])
})



CI_OnLineFunctionCode_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'CI_OnLineFunctionCode'), CodeListValue_Type, scope=CI_OnLineFunctionCode_PropertyType))
CI_OnLineFunctionCode_PropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=CI_OnLineFunctionCode_PropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'CI_OnLineFunctionCode'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



ImageCRSType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'affineCS'), AffineCSPropertyType, scope=ImageCRSType, documentation=u'gml:affineCS is an association role to the affine coordinate system used by this CRS.'))

ImageCRSType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'usesObliqueCartesianCS'), ObliqueCartesianCSPropertyType, scope=ImageCRSType, documentation=u''))

ImageCRSType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'cartesianCS'), CartesianCSPropertyType, scope=ImageCRSType, documentation=u'gml:cartesianCS is an association role to the Cartesian coordinate system used by this CRS.'))

ImageCRSType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'imageDatum'), ImageDatumPropertyType, scope=ImageCRSType, documentation=u'gml:imageDatum is an association role to the image datum used by this CRS.'))
ImageCRSType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=1, element_use=ImageCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'metaDataProperty'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=ImageCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=ImageCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=ImageCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'description'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=ImageCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'imageDatum'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=ImageCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=ImageCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=ImageCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
    ])
    , 5 : pyxb.binding.content.ContentModelState(state=5, is_final=True, transitions=[
    ])
    , 6 : pyxb.binding.content.ContentModelState(state=6, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=ImageCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'affineCS'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=ImageCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'usesObliqueCartesianCS'))),
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=ImageCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'domainOfValidity'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=ImageCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'cartesianCS'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=ImageCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'scope'))),
    ])
    , 7 : pyxb.binding.content.ContentModelState(state=7, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=ImageCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'domainOfValidity'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=ImageCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'scope'))),
    ])
    , 8 : pyxb.binding.content.ContentModelState(state=8, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=ImageCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=ImageCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'domainOfValidity'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=ImageCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'scope'))),
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=ImageCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'remarks'))),
    ])
})



CI_OnlineResource_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'CI_OnlineResource'), CI_OnlineResource_Type, scope=CI_OnlineResource_PropertyType))
CI_OnlineResource_PropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=CI_OnlineResource_PropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'CI_OnlineResource'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



DS_Platform_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'DS_Platform'), DS_Platform_Type, scope=DS_Platform_PropertyType))
DS_Platform_PropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DS_Platform_PropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'DS_Platform'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



MD_Constraints_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_Constraints'), MD_Constraints_Type, scope=MD_Constraints_PropertyType))
MD_Constraints_PropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MD_Constraints_PropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_Constraints'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



AbstractFeatureType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'boundedBy'), BoundingShapeType, nillable=pyxb.binding.datatypes.boolean(1), scope=AbstractFeatureType, documentation=u'This property describes the minimum bounding box or rectangle that encloses the entire feature.'))

AbstractFeatureType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'location'), LocationPropertyType, scope=AbstractFeatureType, documentation=u''))
AbstractFeatureType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=AbstractFeatureType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=AbstractFeatureType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'boundedBy'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=AbstractFeatureType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=AbstractFeatureType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=1, element_use=AbstractFeatureType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'metaDataProperty'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=AbstractFeatureType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'location'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=AbstractFeatureType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'description'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=AbstractFeatureType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'boundedBy'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=AbstractFeatureType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'location'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=AbstractFeatureType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=AbstractFeatureType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'location'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=AbstractFeatureType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'boundedBy'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=AbstractFeatureType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'location'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=AbstractFeatureType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=AbstractFeatureType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
    ])
    , 5 : pyxb.binding.content.ContentModelState(state=5, is_final=True, transitions=[
    ])
    , 6 : pyxb.binding.content.ContentModelState(state=6, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=AbstractFeatureType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=AbstractFeatureType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'boundedBy'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=AbstractFeatureType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=AbstractFeatureType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=AbstractFeatureType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'location'))),
    ])
})


BoundedFeatureType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=1, element_use=BoundedFeatureType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'metaDataProperty'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=BoundedFeatureType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'description'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=BoundedFeatureType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=BoundedFeatureType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=BoundedFeatureType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=BoundedFeatureType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'boundedBy'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=BoundedFeatureType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=BoundedFeatureType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'boundedBy'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=BoundedFeatureType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=BoundedFeatureType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=BoundedFeatureType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=BoundedFeatureType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'boundedBy'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=BoundedFeatureType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=BoundedFeatureType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=BoundedFeatureType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'boundedBy'))),
    ])
    , 5 : pyxb.binding.content.ContentModelState(state=5, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=BoundedFeatureType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'location'))),
    ])
    , 6 : pyxb.binding.content.ContentModelState(state=6, is_final=True, transitions=[
    ])
})



MD_DistributionUnits_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_DistributionUnits'), CodeListValue_Type, scope=MD_DistributionUnits_PropertyType))
MD_DistributionUnits_PropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MD_DistributionUnits_PropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_DistributionUnits'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



ConversionPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'Conversion'), ConversionType, scope=ConversionPropertyType, documentation=u'gml:Conversion is a concrete operation on coordinates that does not include any change of Datum. The best-known example of a coordinate conversion is a map projection. The parameters describing coordinate conversions are defined rather than empirically derived. Note that some conversions have no parameters.\nThis concrete complex type can be used without using a GML Application Schema that defines operation-method-specialized element names and contents, especially for methods with only one Conversion instance.\nThe usesValue property elements are an unordered list of composition associations to the set of parameter values used by this conversion operation.'))
ConversionPropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=ConversionPropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'Conversion'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



TimeCSPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'TimeCS'), TimeCSType, scope=TimeCSPropertyType, documentation=u'gml:TimeCS is a one-dimensional coordinate system containing a time axis, used to describe the temporal position of a point in the specified time units from a specified time origin. A TimeCS shall have one gml:axis property element.'))
TimeCSPropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=TimeCSPropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'TimeCS'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



AbstractTimeSliceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'validTime'), TimePrimitivePropertyType, scope=AbstractTimeSliceType, documentation=u'gml:validTime is a convenience property element.'))

AbstractTimeSliceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'dataSource'), StringOrRefType, scope=AbstractTimeSliceType, documentation=u'Evidence is represented by a simple gml:dataSource or gml:dataSourceReference property that indicates the source of the temporal data. The remote link attributes of the gml:dataSource element have been deprecated along with its current type.'))
AbstractTimeSliceType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=AbstractTimeSliceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=AbstractTimeSliceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=AbstractTimeSliceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=AbstractTimeSliceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'validTime'))),
        pyxb.binding.content.ContentModelTransition(next_state=1, element_use=AbstractTimeSliceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'metaDataProperty'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=AbstractTimeSliceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'description'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=AbstractTimeSliceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=AbstractTimeSliceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=AbstractTimeSliceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'validTime'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=AbstractTimeSliceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'dataSource'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=AbstractTimeSliceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=AbstractTimeSliceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=AbstractTimeSliceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=AbstractTimeSliceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'validTime'))),
    ])
    , 5 : pyxb.binding.content.ContentModelState(state=5, is_final=True, transitions=[
    ])
    , 6 : pyxb.binding.content.ContentModelState(state=6, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=AbstractTimeSliceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=AbstractTimeSliceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'validTime'))),
    ])
})


AbstractTimeObjectType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=AbstractTimeObjectType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=AbstractTimeObjectType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=AbstractTimeObjectType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=1, element_use=AbstractTimeObjectType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'metaDataProperty'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=AbstractTimeObjectType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'description'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=AbstractTimeObjectType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=AbstractTimeObjectType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=AbstractTimeObjectType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=AbstractTimeObjectType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=AbstractTimeObjectType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=AbstractTimeObjectType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
    ])
})



AbstractTimePrimitiveType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'relatedTime'), RelatedTimeType, scope=AbstractTimePrimitiveType))
AbstractTimePrimitiveType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=AbstractTimePrimitiveType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=AbstractTimePrimitiveType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=AbstractTimePrimitiveType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=1, element_use=AbstractTimePrimitiveType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'metaDataProperty'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=AbstractTimePrimitiveType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'relatedTime'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=AbstractTimePrimitiveType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'description'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=AbstractTimePrimitiveType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'relatedTime'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=AbstractTimePrimitiveType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=AbstractTimePrimitiveType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=AbstractTimePrimitiveType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'relatedTime'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=AbstractTimePrimitiveType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=AbstractTimePrimitiveType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=AbstractTimePrimitiveType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=AbstractTimePrimitiveType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'relatedTime'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=AbstractTimePrimitiveType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
    ])
    , 5 : pyxb.binding.content.ContentModelState(state=5, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=AbstractTimePrimitiveType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'relatedTime'))),
    ])
})


AbstractTimeGeometricPrimitiveType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=AbstractTimeGeometricPrimitiveType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=AbstractTimeGeometricPrimitiveType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=AbstractTimeGeometricPrimitiveType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=1, element_use=AbstractTimeGeometricPrimitiveType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'metaDataProperty'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=AbstractTimeGeometricPrimitiveType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'relatedTime'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=AbstractTimeGeometricPrimitiveType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'description'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=AbstractTimeGeometricPrimitiveType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'relatedTime'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=AbstractTimeGeometricPrimitiveType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=AbstractTimeGeometricPrimitiveType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=AbstractTimeGeometricPrimitiveType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'relatedTime'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=AbstractTimeGeometricPrimitiveType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=AbstractTimeGeometricPrimitiveType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=AbstractTimeGeometricPrimitiveType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=AbstractTimeGeometricPrimitiveType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'relatedTime'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=AbstractTimeGeometricPrimitiveType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
    ])
    , 5 : pyxb.binding.content.ContentModelState(state=5, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=AbstractTimeGeometricPrimitiveType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'relatedTime'))),
    ])
})



TimeInstantType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'timePosition'), TimePositionType, scope=TimeInstantType, documentation=u'This element is used directly as a property of gml:TimeInstant (see 15.2.2.3), and may also be used in application schemas.'))
TimeInstantType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=TimeInstantType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=TimeInstantType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=TimeInstantType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=TimeInstantType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'timePosition'))),
        pyxb.binding.content.ContentModelTransition(next_state=1, element_use=TimeInstantType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'metaDataProperty'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=TimeInstantType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'relatedTime'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=TimeInstantType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'description'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=TimeInstantType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=TimeInstantType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'timePosition'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=TimeInstantType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'relatedTime'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=TimeInstantType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=TimeInstantType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'timePosition'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=TimeInstantType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'relatedTime'))),
    ])
    , 5 : pyxb.binding.content.ContentModelState(state=5, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=TimeInstantType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=TimeInstantType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'timePosition'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=TimeInstantType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=TimeInstantType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'relatedTime'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=TimeInstantType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
    ])
    , 6 : pyxb.binding.content.ContentModelState(state=6, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=TimeInstantType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'timePosition'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=TimeInstantType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=TimeInstantType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'relatedTime'))),
    ])
})



CI_RoleCode_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'CI_RoleCode'), CodeListValue_Type, scope=CI_RoleCode_PropertyType))
CI_RoleCode_PropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=CI_RoleCode_PropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'CI_RoleCode'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



AbstractGeneralParameterValuePropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractGeneralParameterValue'), AbstractGeneralParameterValueType, abstract=pyxb.binding.datatypes.boolean(1), scope=AbstractGeneralParameterValuePropertyType, documentation=u'gml:AbstractGeneralParameterValue is an abstract parameter value or group of parameter values.\nThis abstract complexType is expected to be extended and restricted for well-known operation methods with many instances, in Application Schemas that define operation-method-specialized element names and contents. Specific parameter value elements are directly contained in concrete subtypes, not in this abstract type. All concrete types derived from this type shall extend this type to include one "...Value" element with an appropriate type, which should be one of the element types allowed in the ParameterValueType. In addition, all derived concrete types shall extend this type to include a "operationParameter" property element that references one element substitutable for the "OperationParameter" object element.'))
AbstractGeneralParameterValuePropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=AbstractGeneralParameterValuePropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractGeneralParameterValue'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



CoverageFunctionType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'MappingRule'), StringOrRefType, scope=CoverageFunctionType, documentation=u''))

CoverageFunctionType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'CoverageMappingRule'), MappingRuleType, scope=CoverageFunctionType, documentation=u"gml:CoverageMappingRule provides a formal or informal description of the coverage function.\nThe mapping rule may be defined as an in-line string (gml:ruleDefinition) or via a remote reference through xlink:href (gml:ruleReference).  \nIf no rule name is specified, the default is 'Linear' with respect to members of the domain in document order."))

CoverageFunctionType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'GridFunction'), GridFunctionType, scope=CoverageFunctionType, documentation=u'gml:GridFunction provides an explicit mapping rule for grid geometries, i.e. the domain shall be a geometry of type grid.  It describes the mapping of grid posts (discrete point grid coverage) or grid cells (discrete surface coverage) to the values in the range set.\nThe gml:startPoint is the index position of a point in the grid that is mapped to the first point in the range set (this is also the index position of the first grid post).  If the gml:startPoint property is omitted the gml:startPoint is assumed to be equal to the value of gml:low in the gml:Grid geometry. Subsequent points in the mapping are determined by the value of the gml:sequenceRule.'))
CoverageFunctionType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=CoverageFunctionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'MappingRule'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=CoverageFunctionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'GridFunction'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=CoverageFunctionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'CoverageMappingRule'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



AbstractCoordinateSystemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'axis'), CoordinateSystemAxisPropertyType, scope=AbstractCoordinateSystemType, documentation=u'The gml:axis property is an association role (ordered sequence) to the coordinate system axes included in this coordinate system. The coordinate values in a coordinate tuple shall be recorded in the order in which the coordinate system axes associations are recorded, whenever those coordinates use a coordinate reference system that uses this coordinate system. The gml:AggregationAttributeGroup should be used to specify that the axis objects are ordered.'))
AbstractCoordinateSystemType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=AbstractCoordinateSystemType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'description'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=AbstractCoordinateSystemType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=AbstractCoordinateSystemType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=1, element_use=AbstractCoordinateSystemType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'metaDataProperty'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=AbstractCoordinateSystemType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=AbstractCoordinateSystemType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=AbstractCoordinateSystemType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=AbstractCoordinateSystemType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'axis'))),
    ])
    , 5 : pyxb.binding.content.ContentModelState(state=5, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=AbstractCoordinateSystemType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'axis'))),
    ])
    , 6 : pyxb.binding.content.ContentModelState(state=6, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=AbstractCoordinateSystemType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=AbstractCoordinateSystemType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'axis'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=AbstractCoordinateSystemType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'remarks'))),
    ])
})


AffineCSType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=AffineCSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'description'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=AffineCSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=AffineCSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=1, element_use=AffineCSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'metaDataProperty'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=AffineCSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=AffineCSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=AffineCSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=AffineCSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'axis'))),
    ])
    , 5 : pyxb.binding.content.ContentModelState(state=5, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=AffineCSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'axis'))),
    ])
    , 6 : pyxb.binding.content.ContentModelState(state=6, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=AffineCSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=AffineCSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'axis'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=AffineCSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'remarks'))),
    ])
})


PolarCSType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=PolarCSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'description'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=PolarCSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=PolarCSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=1, element_use=PolarCSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'metaDataProperty'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=PolarCSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=PolarCSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=PolarCSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=PolarCSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'axis'))),
    ])
    , 5 : pyxb.binding.content.ContentModelState(state=5, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=PolarCSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'axis'))),
    ])
    , 6 : pyxb.binding.content.ContentModelState(state=6, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=PolarCSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=PolarCSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'axis'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=PolarCSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'remarks'))),
    ])
})



TemporalCRSType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'temporalDatum'), TemporalDatumPropertyType, scope=TemporalCRSType, documentation=u'gml:temporalDatum is an association role to the temporal datum used by this CRS.'))

TemporalCRSType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'usesTemporalCS'), TemporalCSPropertyType, scope=TemporalCRSType, documentation=u''))

TemporalCRSType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'timeCS'), TimeCSPropertyType, scope=TemporalCRSType, documentation=u'gml:timeCS is an association role to the time coordinate system used by this CRS.'))
TemporalCRSType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=TemporalCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'description'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=TemporalCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=TemporalCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=1, element_use=TemporalCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'metaDataProperty'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=TemporalCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'domainOfValidity'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=TemporalCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'scope'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=TemporalCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=TemporalCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=TemporalCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'domainOfValidity'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=TemporalCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'scope'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=TemporalCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'timeCS'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=TemporalCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'usesTemporalCS'))),
    ])
    , 5 : pyxb.binding.content.ContentModelState(state=5, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=TemporalCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
    ])
    , 6 : pyxb.binding.content.ContentModelState(state=6, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=TemporalCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'temporalDatum'))),
    ])
    , 7 : pyxb.binding.content.ContentModelState(state=7, is_final=True, transitions=[
    ])
    , 8 : pyxb.binding.content.ContentModelState(state=8, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=TemporalCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'remarks'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=TemporalCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=TemporalCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'domainOfValidity'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=TemporalCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'scope'))),
    ])
})



Country_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'Country'), CodeListValue_Type, scope=Country_PropertyType))
Country_PropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=Country_PropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'Country'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



LocationPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractGeometry'), AbstractGeometryType, abstract=pyxb.binding.datatypes.boolean(1), scope=LocationPropertyType, documentation=u'The AbstractGeometry element is the abstract head of the substitution group for all geometry elements of GML. This includes pre-defined and user-defined geometry elements. Any geometry element shall be a direct or indirect extension/restriction of AbstractGeometryType and shall be directly or indirectly in the substitution group of AbstractGeometry.'))

LocationPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'LocationKeyWord'), CodeType, scope=LocationPropertyType, documentation=u''))

LocationPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'Null'), NilReasonType, scope=LocationPropertyType, documentation=u''))

LocationPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'LocationString'), StringOrRefType, scope=LocationPropertyType, documentation=u''))
LocationPropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=LocationPropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractGeometry'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=LocationPropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'Null'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=LocationPropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'LocationString'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=LocationPropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'LocationKeyWord'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})


PriorityLocationPropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=PriorityLocationPropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractGeometry'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=PriorityLocationPropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'Null'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=PriorityLocationPropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'LocationString'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=PriorityLocationPropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'LocationKeyWord'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



BoundingShapeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'Envelope'), EnvelopeType, scope=BoundingShapeType, documentation=u'Envelope defines an extent using a pair of positions defining opposite corners in arbitrary dimensions. The first direct position is the "lower corner" (a coordinate position consisting of all the minimal ordinates for each dimension for all points within the envelope), the second one the "upper corner" (a coordinate position consisting of all the maximal ordinates for each dimension for all points within the envelope).\nThe use of the properties "coordinates" and "pos" has been deprecated. The explicitly named properties "lowerCorner" and "upperCorner" shall be used instead.'))

BoundingShapeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'Null'), NilReasonType, scope=BoundingShapeType, documentation=u''))
BoundingShapeType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=BoundingShapeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'Envelope'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=BoundingShapeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'Null'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



AbstractRingPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractRing'), AbstractRingType, abstract=pyxb.binding.datatypes.boolean(1), scope=AbstractRingPropertyType, documentation=u'An abstraction of a ring to support surface boundaries of different complexity.\nThe AbstractRing element is the abstract head of the substituition group for all closed boundaries of a surface patch.'))
AbstractRingPropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=AbstractRingPropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractRing'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



DS_InitiativeTypeCode_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'DS_InitiativeTypeCode'), CodeListValue_Type, scope=DS_InitiativeTypeCode_PropertyType))
DS_InitiativeTypeCode_PropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DS_InitiativeTypeCode_PropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'DS_InitiativeTypeCode'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



MultiSurfacePropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'MultiSurface'), MultiSurfaceType, scope=MultiSurfacePropertyType, documentation=u'A gml:MultiSurface is defined by one or more gml:AbstractSurfaces.\nThe members of the geometric aggregate may be specified either using the "standard" property (gml:surfaceMember) or the array property (gml:surfaceMembers). It is also valid to use both the "standard" and the array properties in the same collection.'))
MultiSurfacePropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MultiSurfacePropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'MultiSurface'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



CI_Citation_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'series'), CI_Series_PropertyType, scope=CI_Citation_Type))

CI_Citation_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'date'), CI_Date_PropertyType, scope=CI_Citation_Type))

CI_Citation_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'alternateTitle'), CharacterString_PropertyType, scope=CI_Citation_Type))

CI_Citation_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'collectiveTitle'), CharacterString_PropertyType, scope=CI_Citation_Type))

CI_Citation_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'edition'), CharacterString_PropertyType, scope=CI_Citation_Type))

CI_Citation_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'title'), CharacterString_PropertyType, scope=CI_Citation_Type))

CI_Citation_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'editionDate'), Date_PropertyType, scope=CI_Citation_Type))

CI_Citation_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'ISSN'), CharacterString_PropertyType, scope=CI_Citation_Type))

CI_Citation_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'identifier'), MD_Identifier_PropertyType, scope=CI_Citation_Type))

CI_Citation_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'otherCitationDetails'), CharacterString_PropertyType, scope=CI_Citation_Type))

CI_Citation_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'citedResponsibleParty'), CI_ResponsibleParty_PropertyType, scope=CI_Citation_Type))

CI_Citation_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'presentationForm'), CI_PresentationFormCode_PropertyType, scope=CI_Citation_Type))

CI_Citation_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'ISBN'), CharacterString_PropertyType, scope=CI_Citation_Type))
CI_Citation_Type._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=10, element_use=CI_Citation_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'title'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=CI_Citation_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'series'))),
        pyxb.binding.content.ContentModelTransition(next_state=9, element_use=CI_Citation_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'collectiveTitle'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=CI_Citation_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'ISBN'))),
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=CI_Citation_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'otherCitationDetails'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=CI_Citation_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'ISSN'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=CI_Citation_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=CI_Citation_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'citedResponsibleParty'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=CI_Citation_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'presentationForm'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=True, transitions=[
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=CI_Citation_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'series'))),
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=CI_Citation_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'otherCitationDetails'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=CI_Citation_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'date'))),
        pyxb.binding.content.ContentModelTransition(next_state=9, element_use=CI_Citation_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'collectiveTitle'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=CI_Citation_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'edition'))),
        pyxb.binding.content.ContentModelTransition(next_state=10, element_use=CI_Citation_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'alternateTitle'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=CI_Citation_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'editionDate'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=CI_Citation_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'ISSN'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=CI_Citation_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=CI_Citation_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'citedResponsibleParty'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=CI_Citation_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'presentationForm'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=CI_Citation_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'ISBN'))),
    ])
    , 5 : pyxb.binding.content.ContentModelState(state=5, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=CI_Citation_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'otherCitationDetails'))),
        pyxb.binding.content.ContentModelTransition(next_state=9, element_use=CI_Citation_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'collectiveTitle'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=CI_Citation_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'ISSN'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=CI_Citation_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'ISBN'))),
    ])
    , 6 : pyxb.binding.content.ContentModelState(state=6, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=CI_Citation_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'series'))),
        pyxb.binding.content.ContentModelTransition(next_state=9, element_use=CI_Citation_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'collectiveTitle'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=CI_Citation_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'ISBN'))),
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=CI_Citation_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'otherCitationDetails'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=CI_Citation_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'editionDate'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=CI_Citation_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'ISSN'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=CI_Citation_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=CI_Citation_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'citedResponsibleParty'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=CI_Citation_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'presentationForm'))),
    ])
    , 7 : pyxb.binding.content.ContentModelState(state=7, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=9, element_use=CI_Citation_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'collectiveTitle'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=CI_Citation_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'ISSN'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=CI_Citation_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'ISBN'))),
    ])
    , 8 : pyxb.binding.content.ContentModelState(state=8, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=CI_Citation_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'ISSN'))),
    ])
    , 9 : pyxb.binding.content.ContentModelState(state=9, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=CI_Citation_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'ISSN'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=CI_Citation_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'ISBN'))),
    ])
    , 10 : pyxb.binding.content.ContentModelState(state=10, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=10, element_use=CI_Citation_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'alternateTitle'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=CI_Citation_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'date'))),
    ])
})



CTD_ANON_1._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'EX_Extent'), EX_Extent_Type, scope=CTD_ANON_1))
CTD_ANON_1._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=CTD_ANON_1._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'EX_Extent'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



ScopedName_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gco, u'ScopedName'), CodeType, scope=ScopedName_PropertyType))
ScopedName_PropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=ScopedName_PropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gco, u'ScopedName'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



MD_ScopeCode_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_ScopeCode'), CodeListValue_Type, scope=MD_ScopeCode_PropertyType))
MD_ScopeCode_PropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MD_ScopeCode_PropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_ScopeCode'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



NodeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'pointProperty'), PointPropertyType, scope=NodeType, documentation=u'This property element either references a point via the XLink-attributes or contains the point element. pointProperty is the predefined property which may be used by GML Application Schemas whenever a GML feature has a property with a value that is substitutable for Point.'))

NodeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'container'), FaceOrTopoSolidPropertyType, scope=NodeType))

NodeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'directedEdge'), DirectedEdgePropertyType, scope=NodeType, documentation=u'A gml:directedEdge property element describes the boundary of topology faces, the coBoundary of topology nodes and is used in the support of topological line features via the gml:TopoCurve expression, see below. The orientation attribute of type gml:SignType expresses the sense in which the included edge is used, i.e. forward or reverse.'))
NodeType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=NodeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'pointProperty'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=NodeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=NodeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'container'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=NodeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=NodeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=1, element_use=NodeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'metaDataProperty'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=NodeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'description'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=NodeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'directedEdge'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=NodeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'pointProperty'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=NodeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=NodeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=NodeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'container'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=NodeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'directedEdge'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=True, transitions=[
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=NodeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'pointProperty'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=NodeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=NodeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'container'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=NodeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=NodeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=NodeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'directedEdge'))),
    ])
    , 5 : pyxb.binding.content.ContentModelState(state=5, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=NodeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'container'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=NodeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=NodeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'pointProperty'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=NodeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'directedEdge'))),
    ])
    , 6 : pyxb.binding.content.ContentModelState(state=6, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=NodeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'pointProperty'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=NodeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'directedEdge'))),
    ])
})



CI_DateTypeCode_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'CI_DateTypeCode'), CodeListValue_Type, scope=CI_DateTypeCode_PropertyType))
CI_DateTypeCode_PropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=CI_DateTypeCode_PropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'CI_DateTypeCode'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



OffsetCurveType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'refDirection'), VectorType, scope=OffsetCurveType))

OffsetCurveType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'offsetBase'), CurvePropertyType, scope=OffsetCurveType))

OffsetCurveType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'distance'), LengthType, scope=OffsetCurveType))
OffsetCurveType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=OffsetCurveType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'offsetBase'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=OffsetCurveType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'distance'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=OffsetCurveType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'refDirection'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=True, transitions=[
    ])
})



AbstractCoverageType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'domainSet'), DomainSetType, scope=AbstractCoverageType, documentation=u'The gml:domainSet property element describes the spatio-temporal region of interest, within which the coverage is defined. Its content model is given by gml:DomainSetType.\nThe value of the domain is thus a choice between a gml:AbstractGeometry and a gml:AbstractTimeObject.  In the instance these abstract elements will normally be substituted by a geometry complex or temporal complex, to represent spatial coverages and time-series, respectively.  \nThe presence of the gml:AssociationAttributeGroup means that domainSet follows the usual GML property model and may use the xlink:href attribute to point to the domain, as an alternative to describing the domain inline. Ownership semantics may be provided using the gml:OwnershipAttributeGroup.\n'))

AbstractCoverageType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'rangeSet'), RangeSetType, scope=AbstractCoverageType, documentation=u'The gml:rangeSet property element contains the values of the coverage (sometimes called the attribute values).  Its content model is given by gml:RangeSetType.\nThis content model supports a structural description of the range.  The semantic information describing the range set is embedded using a uniform method, as part of the explicit values, or as a template value accompanying the representation using gml:DataBlock and gml:File.\nThe values from each component (or "band") in the range may be encoded within a gml:ValueArray element or a concrete member of the gml:AbstractScalarValueList substitution group . Use of these elements satisfies the value-type homogeneity requirement.'))
AbstractCoverageType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=AbstractCoverageType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=AbstractCoverageType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'boundedBy'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=AbstractCoverageType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'location'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=AbstractCoverageType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=AbstractCoverageType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'domainSet'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=AbstractCoverageType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=1, element_use=AbstractCoverageType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'metaDataProperty'))),
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=AbstractCoverageType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'description'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=AbstractCoverageType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'boundedBy'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=AbstractCoverageType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'location'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=AbstractCoverageType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'domainSet'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=AbstractCoverageType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=AbstractCoverageType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'location'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=AbstractCoverageType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'domainSet'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=True, transitions=[
    ])
    , 5 : pyxb.binding.content.ContentModelState(state=5, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=AbstractCoverageType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'domainSet'))),
    ])
    , 6 : pyxb.binding.content.ContentModelState(state=6, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=AbstractCoverageType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'boundedBy'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=AbstractCoverageType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=AbstractCoverageType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=AbstractCoverageType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'domainSet'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=AbstractCoverageType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'location'))),
    ])
    , 7 : pyxb.binding.content.ContentModelState(state=7, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=AbstractCoverageType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=AbstractCoverageType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'boundedBy'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=AbstractCoverageType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'location'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=AbstractCoverageType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=AbstractCoverageType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'domainSet'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=AbstractCoverageType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
    ])
    , 8 : pyxb.binding.content.ContentModelState(state=8, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=AbstractCoverageType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'rangeSet'))),
    ])
})



AbstractContinuousCoverageType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'coverageFunction'), CoverageFunctionType, scope=AbstractContinuousCoverageType, documentation=u'The gml:coverageFunction property describes the mapping function from the domain to the range of the coverage.\nThe value of the CoverageFunction is one of gml:CoverageMappingRule and gml:GridFunction.\nIf the gml:coverageFunction property is omitted for a gridded coverage (including rectified gridded coverages) the gml:startPoint is assumed to be the value of the gml:low property in the gml:Grid geometry, and the gml:sequenceRule is assumed to be linear and the gml:axisOrder property is assumed to be "+1 +2".'))
AbstractContinuousCoverageType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=9, element_use=AbstractContinuousCoverageType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=AbstractContinuousCoverageType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=AbstractContinuousCoverageType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'location'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=AbstractContinuousCoverageType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'boundedBy'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=AbstractContinuousCoverageType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'domainSet'))),
        pyxb.binding.content.ContentModelTransition(next_state=9, element_use=AbstractContinuousCoverageType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=1, element_use=AbstractContinuousCoverageType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'metaDataProperty'))),
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=AbstractContinuousCoverageType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'description'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=AbstractContinuousCoverageType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'boundedBy'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=AbstractContinuousCoverageType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'location'))),
        pyxb.binding.content.ContentModelTransition(next_state=9, element_use=AbstractContinuousCoverageType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=AbstractContinuousCoverageType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'domainSet'))),
        pyxb.binding.content.ContentModelTransition(next_state=9, element_use=AbstractContinuousCoverageType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=AbstractContinuousCoverageType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'location'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=AbstractContinuousCoverageType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'domainSet'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=AbstractContinuousCoverageType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'coverageFunction'))),
    ])
    , 5 : pyxb.binding.content.ContentModelState(state=5, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=AbstractContinuousCoverageType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'domainSet'))),
    ])
    , 6 : pyxb.binding.content.ContentModelState(state=6, is_final=True, transitions=[
    ])
    , 7 : pyxb.binding.content.ContentModelState(state=7, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=9, element_use=AbstractContinuousCoverageType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=AbstractContinuousCoverageType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=AbstractContinuousCoverageType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'location'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=AbstractContinuousCoverageType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'boundedBy'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=AbstractContinuousCoverageType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'domainSet'))),
        pyxb.binding.content.ContentModelTransition(next_state=9, element_use=AbstractContinuousCoverageType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
    ])
    , 8 : pyxb.binding.content.ContentModelState(state=8, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=AbstractContinuousCoverageType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'rangeSet'))),
    ])
    , 9 : pyxb.binding.content.ContentModelState(state=9, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=AbstractContinuousCoverageType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'boundedBy'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=AbstractContinuousCoverageType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'location'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=AbstractContinuousCoverageType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'domainSet'))),
        pyxb.binding.content.ContentModelTransition(next_state=9, element_use=AbstractContinuousCoverageType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
    ])
})



AbstractDQ_Element_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationMethodDescription'), CharacterString_PropertyType, scope=AbstractDQ_Element_Type))

AbstractDQ_Element_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'measureDescription'), CharacterString_PropertyType, scope=AbstractDQ_Element_Type))

AbstractDQ_Element_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationProcedure'), CI_Citation_PropertyType, scope=AbstractDQ_Element_Type))

AbstractDQ_Element_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationMethodType'), DQ_EvaluationMethodTypeCode_PropertyType, scope=AbstractDQ_Element_Type))

AbstractDQ_Element_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'dateTime'), DateTime_PropertyType, scope=AbstractDQ_Element_Type))

AbstractDQ_Element_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'result'), DQ_Result_PropertyType, scope=AbstractDQ_Element_Type))

AbstractDQ_Element_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'nameOfMeasure'), CharacterString_PropertyType, scope=AbstractDQ_Element_Type))

AbstractDQ_Element_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'measureIdentification'), MD_Identifier_PropertyType, scope=AbstractDQ_Element_Type))
AbstractDQ_Element_Type._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=AbstractDQ_Element_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'measureDescription'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=AbstractDQ_Element_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationMethodType'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=AbstractDQ_Element_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationProcedure'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=AbstractDQ_Element_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationMethodDescription'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=AbstractDQ_Element_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'dateTime'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=AbstractDQ_Element_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'result'))),
        pyxb.binding.content.ContentModelTransition(next_state=1, element_use=AbstractDQ_Element_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'nameOfMeasure'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=AbstractDQ_Element_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'measureIdentification'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=AbstractDQ_Element_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'dateTime'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=AbstractDQ_Element_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'result'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=AbstractDQ_Element_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationMethodDescription'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=AbstractDQ_Element_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationProcedure'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=AbstractDQ_Element_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'dateTime'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=AbstractDQ_Element_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'result'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=AbstractDQ_Element_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'measureDescription'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=AbstractDQ_Element_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationMethodType'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=AbstractDQ_Element_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationProcedure'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=AbstractDQ_Element_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationMethodDescription'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=AbstractDQ_Element_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'dateTime'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=AbstractDQ_Element_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'result'))),
    ])
    , 5 : pyxb.binding.content.ContentModelState(state=5, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=AbstractDQ_Element_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationProcedure'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=AbstractDQ_Element_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'dateTime'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=AbstractDQ_Element_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'result'))),
    ])
    , 6 : pyxb.binding.content.ContentModelState(state=6, is_final=True, transitions=[
    ])
    , 7 : pyxb.binding.content.ContentModelState(state=7, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=AbstractDQ_Element_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationMethodType'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=AbstractDQ_Element_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationMethodDescription'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=AbstractDQ_Element_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'dateTime'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=AbstractDQ_Element_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationProcedure'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=AbstractDQ_Element_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'result'))),
    ])
    , 8 : pyxb.binding.content.ContentModelState(state=8, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=AbstractDQ_Element_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'result'))),
    ])
})


AbstractDQ_TemporalAccuracy_Type._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=AbstractDQ_TemporalAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'measureDescription'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=AbstractDQ_TemporalAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationMethodType'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=AbstractDQ_TemporalAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationProcedure'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=AbstractDQ_TemporalAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationMethodDescription'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=AbstractDQ_TemporalAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'dateTime'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=AbstractDQ_TemporalAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'result'))),
        pyxb.binding.content.ContentModelTransition(next_state=1, element_use=AbstractDQ_TemporalAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'nameOfMeasure'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=AbstractDQ_TemporalAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'measureIdentification'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=AbstractDQ_TemporalAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'dateTime'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=AbstractDQ_TemporalAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'result'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=AbstractDQ_TemporalAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationMethodDescription'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=AbstractDQ_TemporalAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationProcedure'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=AbstractDQ_TemporalAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'dateTime'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=AbstractDQ_TemporalAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'result'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=AbstractDQ_TemporalAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'measureDescription'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=AbstractDQ_TemporalAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationMethodType'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=AbstractDQ_TemporalAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationProcedure'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=AbstractDQ_TemporalAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationMethodDescription'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=AbstractDQ_TemporalAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'dateTime'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=AbstractDQ_TemporalAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'result'))),
    ])
    , 5 : pyxb.binding.content.ContentModelState(state=5, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=AbstractDQ_TemporalAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationProcedure'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=AbstractDQ_TemporalAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'dateTime'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=AbstractDQ_TemporalAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'result'))),
    ])
    , 6 : pyxb.binding.content.ContentModelState(state=6, is_final=True, transitions=[
    ])
    , 7 : pyxb.binding.content.ContentModelState(state=7, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=AbstractDQ_TemporalAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationMethodType'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=AbstractDQ_TemporalAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationMethodDescription'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=AbstractDQ_TemporalAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'dateTime'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=AbstractDQ_TemporalAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationProcedure'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=AbstractDQ_TemporalAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'result'))),
    ])
    , 8 : pyxb.binding.content.ContentModelState(state=8, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=AbstractDQ_TemporalAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'result'))),
    ])
})


DQ_TemporalConsistency_Type._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=DQ_TemporalConsistency_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'measureDescription'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=DQ_TemporalConsistency_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationMethodType'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DQ_TemporalConsistency_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationProcedure'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=DQ_TemporalConsistency_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationMethodDescription'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DQ_TemporalConsistency_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'dateTime'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=DQ_TemporalConsistency_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'result'))),
        pyxb.binding.content.ContentModelTransition(next_state=1, element_use=DQ_TemporalConsistency_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'nameOfMeasure'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=DQ_TemporalConsistency_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'measureIdentification'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DQ_TemporalConsistency_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'dateTime'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=DQ_TemporalConsistency_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'result'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=DQ_TemporalConsistency_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationMethodDescription'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DQ_TemporalConsistency_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationProcedure'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DQ_TemporalConsistency_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'dateTime'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=DQ_TemporalConsistency_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'result'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=DQ_TemporalConsistency_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'measureDescription'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=DQ_TemporalConsistency_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationMethodType'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DQ_TemporalConsistency_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationProcedure'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=DQ_TemporalConsistency_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationMethodDescription'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DQ_TemporalConsistency_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'dateTime'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=DQ_TemporalConsistency_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'result'))),
    ])
    , 5 : pyxb.binding.content.ContentModelState(state=5, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DQ_TemporalConsistency_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationProcedure'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DQ_TemporalConsistency_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'dateTime'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=DQ_TemporalConsistency_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'result'))),
    ])
    , 6 : pyxb.binding.content.ContentModelState(state=6, is_final=True, transitions=[
    ])
    , 7 : pyxb.binding.content.ContentModelState(state=7, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=DQ_TemporalConsistency_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationMethodType'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=DQ_TemporalConsistency_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationMethodDescription'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DQ_TemporalConsistency_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'dateTime'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DQ_TemporalConsistency_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationProcedure'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=DQ_TemporalConsistency_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'result'))),
    ])
    , 8 : pyxb.binding.content.ContentModelState(state=8, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=DQ_TemporalConsistency_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'result'))),
    ])
})



MD_GridSpatialRepresentation_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'transformationParameterAvailability'), Boolean_PropertyType, scope=MD_GridSpatialRepresentation_Type))

MD_GridSpatialRepresentation_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'numberOfDimensions'), Integer_PropertyType, scope=MD_GridSpatialRepresentation_Type))

MD_GridSpatialRepresentation_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'cellGeometry'), MD_CellGeometryCode_PropertyType, scope=MD_GridSpatialRepresentation_Type))

MD_GridSpatialRepresentation_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'axisDimensionProperties'), MD_Dimension_PropertyType, scope=MD_GridSpatialRepresentation_Type))
MD_GridSpatialRepresentation_Type._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=MD_GridSpatialRepresentation_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'numberOfDimensions'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MD_GridSpatialRepresentation_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'transformationParameterAvailability'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=MD_GridSpatialRepresentation_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'cellGeometry'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=MD_GridSpatialRepresentation_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'axisDimensionProperties'))),
    ])
})



MD_Georeferenceable_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'controlPointAvailability'), Boolean_PropertyType, scope=MD_Georeferenceable_Type))

MD_Georeferenceable_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'orientationParameterDescription'), CharacterString_PropertyType, scope=MD_Georeferenceable_Type))

MD_Georeferenceable_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'georeferencedParameters'), Record_PropertyType, scope=MD_Georeferenceable_Type))

MD_Georeferenceable_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'orientationParameterAvailability'), Boolean_PropertyType, scope=MD_Georeferenceable_Type))

MD_Georeferenceable_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'parameterCitation'), CI_Citation_PropertyType, scope=MD_Georeferenceable_Type))
MD_Georeferenceable_Type._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=MD_Georeferenceable_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'numberOfDimensions'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=MD_Georeferenceable_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'georeferencedParameters'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=MD_Georeferenceable_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'transformationParameterAvailability'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=MD_Georeferenceable_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'parameterCitation'))),
    ])
    , 5 : pyxb.binding.content.ContentModelState(state=5, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=MD_Georeferenceable_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'controlPointAvailability'))),
    ])
    , 6 : pyxb.binding.content.ContentModelState(state=6, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=MD_Georeferenceable_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'orientationParameterAvailability'))),
    ])
    , 7 : pyxb.binding.content.ContentModelState(state=7, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MD_Georeferenceable_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'orientationParameterDescription'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=MD_Georeferenceable_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'georeferencedParameters'))),
    ])
    , 8 : pyxb.binding.content.ContentModelState(state=8, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=MD_Georeferenceable_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'cellGeometry'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=MD_Georeferenceable_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'axisDimensionProperties'))),
    ])
})


DQ_AccuracyOfATimeMeasurement_Type._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=DQ_AccuracyOfATimeMeasurement_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'measureDescription'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=DQ_AccuracyOfATimeMeasurement_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationMethodType'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DQ_AccuracyOfATimeMeasurement_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationProcedure'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=DQ_AccuracyOfATimeMeasurement_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationMethodDescription'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DQ_AccuracyOfATimeMeasurement_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'dateTime'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=DQ_AccuracyOfATimeMeasurement_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'result'))),
        pyxb.binding.content.ContentModelTransition(next_state=1, element_use=DQ_AccuracyOfATimeMeasurement_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'nameOfMeasure'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=DQ_AccuracyOfATimeMeasurement_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'measureIdentification'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DQ_AccuracyOfATimeMeasurement_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'dateTime'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=DQ_AccuracyOfATimeMeasurement_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'result'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=DQ_AccuracyOfATimeMeasurement_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationMethodDescription'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DQ_AccuracyOfATimeMeasurement_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationProcedure'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DQ_AccuracyOfATimeMeasurement_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'dateTime'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=DQ_AccuracyOfATimeMeasurement_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'result'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=DQ_AccuracyOfATimeMeasurement_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'measureDescription'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=DQ_AccuracyOfATimeMeasurement_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationMethodType'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DQ_AccuracyOfATimeMeasurement_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationProcedure'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=DQ_AccuracyOfATimeMeasurement_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationMethodDescription'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DQ_AccuracyOfATimeMeasurement_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'dateTime'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=DQ_AccuracyOfATimeMeasurement_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'result'))),
    ])
    , 5 : pyxb.binding.content.ContentModelState(state=5, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DQ_AccuracyOfATimeMeasurement_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationProcedure'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DQ_AccuracyOfATimeMeasurement_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'dateTime'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=DQ_AccuracyOfATimeMeasurement_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'result'))),
    ])
    , 6 : pyxb.binding.content.ContentModelState(state=6, is_final=True, transitions=[
    ])
    , 7 : pyxb.binding.content.ContentModelState(state=7, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=DQ_AccuracyOfATimeMeasurement_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationMethodType'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=DQ_AccuracyOfATimeMeasurement_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationMethodDescription'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DQ_AccuracyOfATimeMeasurement_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'dateTime'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DQ_AccuracyOfATimeMeasurement_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationProcedure'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=DQ_AccuracyOfATimeMeasurement_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'result'))),
    ])
    , 8 : pyxb.binding.content.ContentModelState(state=8, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=DQ_AccuracyOfATimeMeasurement_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'result'))),
    ])
})



EllipsoidalCSPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'EllipsoidalCS'), EllipsoidalCSType, scope=EllipsoidalCSPropertyType, documentation=u'gml:EllipsoidalCS is a two- or three-dimensional coordinate system in which position is specified by geodetic latitude, geodetic longitude, and (in the three-dimensional case) ellipsoidal height. An EllipsoidalCS shall have two or three gml:axis property elements; the number of associations shall equal the dimension of the CS.'))
EllipsoidalCSPropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=EllipsoidalCSPropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'EllipsoidalCS'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



MD_GeometricObjects_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'geometricObjectCount'), Integer_PropertyType, scope=MD_GeometricObjects_Type))

MD_GeometricObjects_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'geometricObjectType'), MD_GeometricObjectTypeCode_PropertyType, scope=MD_GeometricObjects_Type))
MD_GeometricObjects_Type._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MD_GeometricObjects_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'geometricObjectType'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=MD_GeometricObjects_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'geometricObjectCount'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=True, transitions=[
    ])
})



ObservationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'using'), ProcedurePropertyType, scope=ObservationType))

ObservationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'target'), TargetPropertyType, scope=ObservationType))

ObservationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'resultOf'), ResultType, scope=ObservationType))

ObservationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'validTime'), TimePrimitivePropertyType, scope=ObservationType, documentation=u'gml:validTime is a convenience property element.'))
ObservationType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=ObservationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=ObservationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=ObservationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=ObservationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'boundedBy'))),
        pyxb.binding.content.ContentModelTransition(next_state=1, element_use=ObservationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'metaDataProperty'))),
        pyxb.binding.content.ContentModelTransition(next_state=9, element_use=ObservationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'location'))),
        pyxb.binding.content.ContentModelTransition(next_state=10, element_use=ObservationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'description'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=ObservationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'validTime'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=ObservationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'boundedBy'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=ObservationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=9, element_use=ObservationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'location'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=ObservationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'validTime'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=ObservationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'boundedBy'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=ObservationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=ObservationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=9, element_use=ObservationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'location'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=ObservationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'validTime'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=ObservationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'using'))),
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=ObservationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'target'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=ObservationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'resultOf'))),
    ])
    , 5 : pyxb.binding.content.ContentModelState(state=5, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=9, element_use=ObservationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'location'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=ObservationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'validTime'))),
    ])
    , 6 : pyxb.binding.content.ContentModelState(state=6, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=ObservationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'target'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=ObservationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'resultOf'))),
    ])
    , 7 : pyxb.binding.content.ContentModelState(state=7, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=ObservationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'resultOf'))),
    ])
    , 8 : pyxb.binding.content.ContentModelState(state=8, is_final=True, transitions=[
    ])
    , 9 : pyxb.binding.content.ContentModelState(state=9, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=ObservationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'validTime'))),
    ])
    , 10 : pyxb.binding.content.ContentModelState(state=10, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=ObservationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=ObservationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=ObservationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=ObservationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'boundedBy'))),
        pyxb.binding.content.ContentModelTransition(next_state=9, element_use=ObservationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'location'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=ObservationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'validTime'))),
    ])
})



DirectedObservationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'direction'), DirectionPropertyType, scope=DirectedObservationType, documentation=u'The property gml:direction is intended as a pre-defined property expressing a direction to be assigned to features defined in a GML application schema.'))
DirectedObservationType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=DirectedObservationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=11, element_use=DirectedObservationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=DirectedObservationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'location'))),
        pyxb.binding.content.ContentModelTransition(next_state=11, element_use=DirectedObservationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=1, element_use=DirectedObservationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'metaDataProperty'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=DirectedObservationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'boundedBy'))),
        pyxb.binding.content.ContentModelTransition(next_state=10, element_use=DirectedObservationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'description'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DirectedObservationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'validTime'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=DirectedObservationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'using'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=DirectedObservationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'target'))),
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=DirectedObservationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'resultOf'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=DirectedObservationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'target'))),
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=DirectedObservationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'resultOf'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=11, element_use=DirectedObservationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=11, element_use=DirectedObservationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DirectedObservationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'validTime'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=DirectedObservationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'boundedBy'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=DirectedObservationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'location'))),
    ])
    , 5 : pyxb.binding.content.ContentModelState(state=5, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=DirectedObservationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'resultOf'))),
    ])
    , 6 : pyxb.binding.content.ContentModelState(state=6, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DirectedObservationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'validTime'))),
    ])
    , 7 : pyxb.binding.content.ContentModelState(state=7, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=9, element_use=DirectedObservationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'direction'))),
    ])
    , 8 : pyxb.binding.content.ContentModelState(state=8, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=DirectedObservationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'location'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DirectedObservationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'validTime'))),
    ])
    , 9 : pyxb.binding.content.ContentModelState(state=9, is_final=True, transitions=[
    ])
    , 10 : pyxb.binding.content.ContentModelState(state=10, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=DirectedObservationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=11, element_use=DirectedObservationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=DirectedObservationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'location'))),
        pyxb.binding.content.ContentModelTransition(next_state=11, element_use=DirectedObservationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=DirectedObservationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'boundedBy'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DirectedObservationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'validTime'))),
    ])
    , 11 : pyxb.binding.content.ContentModelState(state=11, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=11, element_use=DirectedObservationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=DirectedObservationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'location'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=DirectedObservationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'boundedBy'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DirectedObservationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'validTime'))),
    ])
})



DirectedObservationAtDistanceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'distance'), MeasureType, scope=DirectedObservationAtDistanceType))
DirectedObservationAtDistanceType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DirectedObservationAtDistanceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=DirectedObservationAtDistanceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DirectedObservationAtDistanceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=DirectedObservationAtDistanceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'boundedBy'))),
        pyxb.binding.content.ContentModelTransition(next_state=1, element_use=DirectedObservationAtDistanceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'metaDataProperty'))),
        pyxb.binding.content.ContentModelTransition(next_state=9, element_use=DirectedObservationAtDistanceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'location'))),
        pyxb.binding.content.ContentModelTransition(next_state=11, element_use=DirectedObservationAtDistanceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'description'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=DirectedObservationAtDistanceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'validTime'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=DirectedObservationAtDistanceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'boundedBy'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DirectedObservationAtDistanceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=9, element_use=DirectedObservationAtDistanceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'location'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=DirectedObservationAtDistanceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'validTime'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=DirectedObservationAtDistanceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'boundedBy'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DirectedObservationAtDistanceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DirectedObservationAtDistanceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=9, element_use=DirectedObservationAtDistanceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'location'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=DirectedObservationAtDistanceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'validTime'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=DirectedObservationAtDistanceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'target'))),
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=DirectedObservationAtDistanceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'using'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=DirectedObservationAtDistanceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'resultOf'))),
    ])
    , 5 : pyxb.binding.content.ContentModelState(state=5, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=9, element_use=DirectedObservationAtDistanceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'location'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=DirectedObservationAtDistanceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'validTime'))),
    ])
    , 6 : pyxb.binding.content.ContentModelState(state=6, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=DirectedObservationAtDistanceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'resultOf'))),
    ])
    , 7 : pyxb.binding.content.ContentModelState(state=7, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=DirectedObservationAtDistanceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'target'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=DirectedObservationAtDistanceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'resultOf'))),
    ])
    , 8 : pyxb.binding.content.ContentModelState(state=8, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=10, element_use=DirectedObservationAtDistanceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'direction'))),
    ])
    , 9 : pyxb.binding.content.ContentModelState(state=9, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=DirectedObservationAtDistanceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'validTime'))),
    ])
    , 10 : pyxb.binding.content.ContentModelState(state=10, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=12, element_use=DirectedObservationAtDistanceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'distance'))),
    ])
    , 11 : pyxb.binding.content.ContentModelState(state=11, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DirectedObservationAtDistanceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=DirectedObservationAtDistanceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DirectedObservationAtDistanceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=DirectedObservationAtDistanceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'boundedBy'))),
        pyxb.binding.content.ContentModelTransition(next_state=9, element_use=DirectedObservationAtDistanceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'location'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=DirectedObservationAtDistanceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'validTime'))),
    ])
    , 12 : pyxb.binding.content.ContentModelState(state=12, is_final=True, transitions=[
    ])
})


AbstractTimeComplexType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=AbstractTimeComplexType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=AbstractTimeComplexType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=AbstractTimeComplexType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=1, element_use=AbstractTimeComplexType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'metaDataProperty'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=AbstractTimeComplexType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'description'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=AbstractTimeComplexType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=AbstractTimeComplexType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=AbstractTimeComplexType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=AbstractTimeComplexType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=AbstractTimeComplexType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=AbstractTimeComplexType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
    ])
})



TimeTopologyComplexType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'primitive'), TimeTopologyPrimitivePropertyType, scope=TimeTopologyComplexType))
TimeTopologyComplexType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=TimeTopologyComplexType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'primitive'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=TimeTopologyComplexType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=TimeTopologyComplexType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=TimeTopologyComplexType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=1, element_use=TimeTopologyComplexType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'metaDataProperty'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=TimeTopologyComplexType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'description'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=TimeTopologyComplexType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'primitive'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=TimeTopologyComplexType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=TimeTopologyComplexType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'primitive'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=TimeTopologyComplexType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=TimeTopologyComplexType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=TimeTopologyComplexType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'primitive'))),
    ])
    , 5 : pyxb.binding.content.ContentModelState(state=5, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=TimeTopologyComplexType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=TimeTopologyComplexType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'primitive'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=TimeTopologyComplexType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=TimeTopologyComplexType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
    ])
})


AbstractDQ_Completeness_Type._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=AbstractDQ_Completeness_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'measureDescription'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=AbstractDQ_Completeness_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationMethodType'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=AbstractDQ_Completeness_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationProcedure'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=AbstractDQ_Completeness_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationMethodDescription'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=AbstractDQ_Completeness_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'dateTime'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=AbstractDQ_Completeness_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'result'))),
        pyxb.binding.content.ContentModelTransition(next_state=1, element_use=AbstractDQ_Completeness_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'nameOfMeasure'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=AbstractDQ_Completeness_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'measureIdentification'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=AbstractDQ_Completeness_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'dateTime'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=AbstractDQ_Completeness_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'result'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=AbstractDQ_Completeness_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationMethodDescription'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=AbstractDQ_Completeness_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationProcedure'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=AbstractDQ_Completeness_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'dateTime'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=AbstractDQ_Completeness_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'result'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=AbstractDQ_Completeness_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'measureDescription'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=AbstractDQ_Completeness_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationMethodType'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=AbstractDQ_Completeness_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationProcedure'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=AbstractDQ_Completeness_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationMethodDescription'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=AbstractDQ_Completeness_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'dateTime'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=AbstractDQ_Completeness_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'result'))),
    ])
    , 5 : pyxb.binding.content.ContentModelState(state=5, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=AbstractDQ_Completeness_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationProcedure'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=AbstractDQ_Completeness_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'dateTime'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=AbstractDQ_Completeness_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'result'))),
    ])
    , 6 : pyxb.binding.content.ContentModelState(state=6, is_final=True, transitions=[
    ])
    , 7 : pyxb.binding.content.ContentModelState(state=7, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=AbstractDQ_Completeness_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationMethodType'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=AbstractDQ_Completeness_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationMethodDescription'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=AbstractDQ_Completeness_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'dateTime'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=AbstractDQ_Completeness_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationProcedure'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=AbstractDQ_Completeness_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'result'))),
    ])
    , 8 : pyxb.binding.content.ContentModelState(state=8, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=AbstractDQ_Completeness_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'result'))),
    ])
})


DQ_CompletenessCommission_Type._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=DQ_CompletenessCommission_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'measureDescription'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=DQ_CompletenessCommission_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationMethodType'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DQ_CompletenessCommission_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationProcedure'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=DQ_CompletenessCommission_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationMethodDescription'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DQ_CompletenessCommission_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'dateTime'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=DQ_CompletenessCommission_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'result'))),
        pyxb.binding.content.ContentModelTransition(next_state=1, element_use=DQ_CompletenessCommission_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'nameOfMeasure'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=DQ_CompletenessCommission_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'measureIdentification'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DQ_CompletenessCommission_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'dateTime'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=DQ_CompletenessCommission_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'result'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=DQ_CompletenessCommission_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationMethodDescription'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DQ_CompletenessCommission_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationProcedure'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DQ_CompletenessCommission_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'dateTime'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=DQ_CompletenessCommission_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'result'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=DQ_CompletenessCommission_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'measureDescription'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=DQ_CompletenessCommission_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationMethodType'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DQ_CompletenessCommission_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationProcedure'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=DQ_CompletenessCommission_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationMethodDescription'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DQ_CompletenessCommission_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'dateTime'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=DQ_CompletenessCommission_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'result'))),
    ])
    , 5 : pyxb.binding.content.ContentModelState(state=5, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DQ_CompletenessCommission_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationProcedure'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DQ_CompletenessCommission_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'dateTime'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=DQ_CompletenessCommission_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'result'))),
    ])
    , 6 : pyxb.binding.content.ContentModelState(state=6, is_final=True, transitions=[
    ])
    , 7 : pyxb.binding.content.ContentModelState(state=7, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=DQ_CompletenessCommission_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationMethodType'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=DQ_CompletenessCommission_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationMethodDescription'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DQ_CompletenessCommission_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'dateTime'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DQ_CompletenessCommission_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationProcedure'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=DQ_CompletenessCommission_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'result'))),
    ])
    , 8 : pyxb.binding.content.ContentModelState(state=8, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=DQ_CompletenessCommission_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'result'))),
    ])
})



TimePeriodPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'TimePeriod'), TimePeriodType, scope=TimePeriodPropertyType, documentation=u'gml:TimePeriod acts as a one-dimensional geometric primitive that represents an identifiable extent in time.\nThe location in of a gml:TimePeriod is described by the temporal positions of the instants at which it begins and ends. The length of the period is equal to the temporal distance between the two bounding temporal positions. \nBoth beginning and end may be described in terms of their direct position using gml:TimePositionType which is an XML Schema simple content type, or by reference to an indentifiable time instant using gml:TimeInstantPropertyType.\nAlternatively a limit of a gml:TimePeriod may use the conventional GML property model to make a reference to a time instant described elsewhere, or a limit may be indicated as a direct position.'))
TimePeriodPropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=TimePeriodPropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'TimePeriod'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



DS_DataSet_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'partOf'), DS_Aggregate_PropertyType, scope=DS_DataSet_Type))

DS_DataSet_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'has'), MD_Metadata_PropertyType, scope=DS_DataSet_Type))
DS_DataSet_Type._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DS_DataSet_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'has'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DS_DataSet_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'has'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=DS_DataSet_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'partOf'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=DS_DataSet_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'partOf'))),
    ])
})



OperationPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractOperation'), AbstractCoordinateOperationType, abstract=pyxb.binding.datatypes.boolean(1), scope=OperationPropertyType, documentation=u''))
OperationPropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=OperationPropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractOperation'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



Measure_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gco, u'Measure'), MeasureType, scope=Measure_PropertyType))
Measure_PropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=Measure_PropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gco, u'Measure'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



EngineeringDatumPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'EngineeringDatum'), EngineeringDatumType, scope=EngineeringDatumPropertyType, documentation=u'gml:EngineeringDatum defines the origin of an engineering coordinate reference system, and is used in a region around that origin. This origin may be fixed with respect to the earth (such as a defined point at a construction site), or be a defined point on a moving vehicle (such as on a ship or satellite).'))
EngineeringDatumPropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=EngineeringDatumPropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'EngineeringDatum'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



TimeNodePropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'TimeNode'), TimeNodeType, scope=TimeNodePropertyType, documentation=u'A time node is a zero-dimensional topological primitive that represents an identifiable node in time (it is equivalent to a point in space). A node may act as the termination or initiation of any number of time edges. A time node may be realised as a geometry, its position, whose value is a time instant.'))
TimeNodePropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=TimeNodePropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'TimeNode'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



GeodeticDatumPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'GeodeticDatum'), GeodeticDatumType, scope=GeodeticDatumPropertyType, documentation=u'gml:GeodeticDatum is a geodetic datum defines the precise location and orientation in 3-dimensional space of a defined ellipsoid (or sphere), or of a Cartesian coordinate system centered in this ellipsoid (or sphere).'))
GeodeticDatumPropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=GeodeticDatumPropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'GeodeticDatum'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



MovingObjectStatusType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'location'), LocationPropertyType, scope=MovingObjectStatusType, documentation=u''))

MovingObjectStatusType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'locationName'), CodeType, scope=MovingObjectStatusType, documentation=u'The gml:locationName property element is a convenience property where the text value describes the location of the feature. If the location names are selected from a controlled list, then the list shall be identified in the codeSpace attribute.'))

MovingObjectStatusType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'pos'), DirectPositionType, scope=MovingObjectStatusType))

MovingObjectStatusType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'locationReference'), ReferenceType, scope=MovingObjectStatusType, documentation=u'The gml:locationReference property element is a convenience property where the text value referenced by the xlink:href attribute describes the location of the feature.'))

MovingObjectStatusType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'bearing'), DirectionPropertyType, scope=MovingObjectStatusType))

MovingObjectStatusType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'speed'), MeasureType, scope=MovingObjectStatusType))

MovingObjectStatusType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'position'), GeometryPropertyType, scope=MovingObjectStatusType))

MovingObjectStatusType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'status'), StringOrRefType, scope=MovingObjectStatusType, documentation=u''))

MovingObjectStatusType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'elevation'), MeasureType, scope=MovingObjectStatusType))

MovingObjectStatusType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'statusReference'), ReferenceType, scope=MovingObjectStatusType, documentation=u''))

MovingObjectStatusType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'acceleration'), MeasureType, scope=MovingObjectStatusType))
MovingObjectStatusType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=12, element_use=MovingObjectStatusType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=9, element_use=MovingObjectStatusType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=12, element_use=MovingObjectStatusType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=MovingObjectStatusType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'validTime'))),
        pyxb.binding.content.ContentModelTransition(next_state=1, element_use=MovingObjectStatusType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'metaDataProperty'))),
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=MovingObjectStatusType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'description'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=MovingObjectStatusType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'statusReference'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=MovingObjectStatusType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'bearing'))),
        pyxb.binding.content.ContentModelTransition(next_state=13, element_use=MovingObjectStatusType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'elevation'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MovingObjectStatusType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'status'))),
        pyxb.binding.content.ContentModelTransition(next_state=11, element_use=MovingObjectStatusType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'speed'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=MovingObjectStatusType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'statusReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=10, element_use=MovingObjectStatusType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'acceleration'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=MovingObjectStatusType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'position'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=MovingObjectStatusType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'location'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=MovingObjectStatusType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'locationReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=MovingObjectStatusType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'locationName'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=MovingObjectStatusType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'pos'))),
    ])
    , 5 : pyxb.binding.content.ContentModelState(state=5, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=MovingObjectStatusType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'position'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=MovingObjectStatusType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'locationReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=MovingObjectStatusType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'pos'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=MovingObjectStatusType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'location'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=MovingObjectStatusType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'locationName'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=MovingObjectStatusType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'dataSource'))),
    ])
    , 6 : pyxb.binding.content.ContentModelState(state=6, is_final=True, transitions=[
    ])
    , 7 : pyxb.binding.content.ContentModelState(state=7, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=9, element_use=MovingObjectStatusType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=12, element_use=MovingObjectStatusType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=MovingObjectStatusType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'validTime'))),
        pyxb.binding.content.ContentModelTransition(next_state=12, element_use=MovingObjectStatusType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
    ])
    , 8 : pyxb.binding.content.ContentModelState(state=8, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=13, element_use=MovingObjectStatusType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'elevation'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MovingObjectStatusType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'status'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=MovingObjectStatusType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'statusReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=10, element_use=MovingObjectStatusType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'acceleration'))),
    ])
    , 9 : pyxb.binding.content.ContentModelState(state=9, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=12, element_use=MovingObjectStatusType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=12, element_use=MovingObjectStatusType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=MovingObjectStatusType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'validTime'))),
    ])
    , 10 : pyxb.binding.content.ContentModelState(state=10, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=13, element_use=MovingObjectStatusType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'elevation'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MovingObjectStatusType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'status'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=MovingObjectStatusType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'statusReference'))),
    ])
    , 11 : pyxb.binding.content.ContentModelState(state=11, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=MovingObjectStatusType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'bearing'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MovingObjectStatusType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'status'))),
        pyxb.binding.content.ContentModelTransition(next_state=10, element_use=MovingObjectStatusType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'acceleration'))),
        pyxb.binding.content.ContentModelTransition(next_state=13, element_use=MovingObjectStatusType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'elevation'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=MovingObjectStatusType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'statusReference'))),
    ])
    , 12 : pyxb.binding.content.ContentModelState(state=12, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=12, element_use=MovingObjectStatusType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=MovingObjectStatusType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'validTime'))),
    ])
    , 13 : pyxb.binding.content.ContentModelState(state=13, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MovingObjectStatusType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'status'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=MovingObjectStatusType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'statusReference'))),
    ])
})



MD_MetadataExtensionInformation_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_MetadataExtensionInformation'), MD_MetadataExtensionInformation_Type, scope=MD_MetadataExtensionInformation_PropertyType))
MD_MetadataExtensionInformation_PropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MD_MetadataExtensionInformation_PropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_MetadataExtensionInformation'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



MD_Constraints_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'useLimitation'), CharacterString_PropertyType, scope=MD_Constraints_Type))
MD_Constraints_Type._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=1, element_use=MD_Constraints_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'useLimitation'))),
    ])
})



ImageDatumPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'ImageDatum'), ImageDatumType, scope=ImageDatumPropertyType, documentation=u'gml:ImageDatum defines the origin of an image coordinate reference system, and is used in a local context only. For an image datum, the anchor definition is usually either the centre of the image or the corner of the image. For more information, see ISO 19111 B.3.5.'))
ImageDatumPropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=ImageDatumPropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'ImageDatum'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



CurveArrayPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractCurve'), AbstractCurveType, abstract=pyxb.binding.datatypes.boolean(1), scope=CurveArrayPropertyType, documentation=u'The AbstractCurve element is the abstract head of the substitution group for all (continuous) curve elements.'))
CurveArrayPropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=1, element_use=CurveArrayPropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractCurve'))),
    ])
})



CTD_ANON_2._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'AbstractDQ_PositionalAccuracy'), AbstractDQ_PositionalAccuracy_Type, abstract=pyxb.binding.datatypes.boolean(1), scope=CTD_ANON_2))
CTD_ANON_2._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=CTD_ANON_2._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'AbstractDQ_PositionalAccuracy'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



Date_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gco, u'Date'), Date_Type, nillable=pyxb.binding.datatypes.boolean(1), scope=Date_PropertyType))

Date_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gco, u'DateTime'), pyxb.binding.datatypes.dateTime, scope=Date_PropertyType))
Date_PropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=Date_PropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gco, u'Date'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=Date_PropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gco, u'DateTime'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



NodePropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'Node'), NodeType, scope=NodePropertyType, documentation=u'gml:Node represents the 0-dimensional primitive.\nThe optional coboundary of a node (gml:directedEdge) is a sequence of directed edges which are incident on this node. Edges emanating from this node appear in the node coboundary with a negative orientation. \nIf provided, the aggregationType attribute shall have the value "sequence".\nA node may optionally be realised by a 0-dimensional geometric primitive (gml:pointProperty).'))
NodePropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=NodePropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'Node'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



AbstractCoordinateOperationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'targetCRS'), CRSPropertyType, scope=AbstractCoordinateOperationType, documentation=u'gml:targetCRS is an association role to the target CRS (coordinate reference system) of this coordinate operation.'))

AbstractCoordinateOperationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'domainOfValidity'), CTD_ANON_1, scope=AbstractCoordinateOperationType, documentation=u'The gml:domainOfValidity property implements an association role to an EX_Extent object as encoded in ISO/TS 19139, either referencing or containing the definition of that extent.'))

AbstractCoordinateOperationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'sourceCRS'), CRSPropertyType, scope=AbstractCoordinateOperationType, documentation=u'gml:sourceCRS is an association role to the source CRS (coordinate reference system) of this coordinate operation.'))

AbstractCoordinateOperationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'operationVersion'), pyxb.binding.datatypes.string, scope=AbstractCoordinateOperationType, documentation=u'gml:operationVersion is the version of the coordinate transformation (i.e., instantiation due to the stochastic nature of the parameters). Mandatory when describing a transformation, and should not be supplied for a conversion.'))

AbstractCoordinateOperationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'scope'), pyxb.binding.datatypes.string, scope=AbstractCoordinateOperationType, documentation=u'The gml:scope property provides a description of the usage, or limitations of usage, for which this CRS-related object is valid. If unknown, enter "not known".'))

AbstractCoordinateOperationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'coordinateOperationAccuracy'), CTD_ANON_2, scope=AbstractCoordinateOperationType, documentation=u'gml:coordinateOperationAccuracy is an association role to a DQ_PositionalAccuracy object as encoded in ISO/TS 19139, either referencing or containing the definition of that positional accuracy. That object contains an estimate of the impact of this coordinate operation on point accuracy. That is, it gives position error estimates for the target coordinates of this coordinate operation, assuming no errors in the source coordinates.'))
AbstractCoordinateOperationType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=AbstractCoordinateOperationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=AbstractCoordinateOperationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=AbstractCoordinateOperationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'description'))),
        pyxb.binding.content.ContentModelTransition(next_state=1, element_use=AbstractCoordinateOperationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'metaDataProperty'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=AbstractCoordinateOperationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=AbstractCoordinateOperationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'domainOfValidity'))),
        pyxb.binding.content.ContentModelTransition(next_state=9, element_use=AbstractCoordinateOperationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'scope'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=AbstractCoordinateOperationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'targetCRS'))),
    ])
    , 5 : pyxb.binding.content.ContentModelState(state=5, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=AbstractCoordinateOperationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=AbstractCoordinateOperationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
    ])
    , 6 : pyxb.binding.content.ContentModelState(state=6, is_final=True, transitions=[
    ])
    , 7 : pyxb.binding.content.ContentModelState(state=7, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=9, element_use=AbstractCoordinateOperationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'scope'))),
    ])
    , 8 : pyxb.binding.content.ContentModelState(state=8, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=AbstractCoordinateOperationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'domainOfValidity'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=AbstractCoordinateOperationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=AbstractCoordinateOperationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'remarks'))),
        pyxb.binding.content.ContentModelTransition(next_state=9, element_use=AbstractCoordinateOperationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'scope'))),
    ])
    , 9 : pyxb.binding.content.ContentModelState(state=9, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=AbstractCoordinateOperationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'sourceCRS'))),
        pyxb.binding.content.ContentModelTransition(next_state=9, element_use=AbstractCoordinateOperationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'scope'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=AbstractCoordinateOperationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'targetCRS'))),
        pyxb.binding.content.ContentModelTransition(next_state=10, element_use=AbstractCoordinateOperationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'operationVersion'))),
        pyxb.binding.content.ContentModelTransition(next_state=10, element_use=AbstractCoordinateOperationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'coordinateOperationAccuracy'))),
    ])
    , 10 : pyxb.binding.content.ContentModelState(state=10, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=AbstractCoordinateOperationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'sourceCRS'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=AbstractCoordinateOperationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'targetCRS'))),
        pyxb.binding.content.ContentModelTransition(next_state=10, element_use=AbstractCoordinateOperationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'coordinateOperationAccuracy'))),
    ])
})



MD_ScopeDescription_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_ScopeDescription'), MD_ScopeDescription_Type, scope=MD_ScopeDescription_PropertyType))
MD_ScopeDescription_PropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MD_ScopeDescription_PropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_ScopeDescription'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



Record_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gco, u'Record'), pyxb.binding.datatypes.anyType, scope=Record_PropertyType))
Record_PropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=Record_PropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gco, u'Record'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



AbstractFeatureCollectionType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'featureMember'), FeaturePropertyType, scope=AbstractFeatureCollectionType, documentation=u''))

AbstractFeatureCollectionType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'featureMembers'), FeatureArrayPropertyType, scope=AbstractFeatureCollectionType, documentation=u''))
AbstractFeatureCollectionType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=AbstractFeatureCollectionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=AbstractFeatureCollectionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'featureMembers'))),
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=AbstractFeatureCollectionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=AbstractFeatureCollectionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'featureMember'))),
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=AbstractFeatureCollectionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=1, element_use=AbstractFeatureCollectionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'metaDataProperty'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=AbstractFeatureCollectionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'location'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=AbstractFeatureCollectionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'boundedBy'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=AbstractFeatureCollectionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'description'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=AbstractFeatureCollectionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'featureMembers'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=AbstractFeatureCollectionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'featureMember'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=AbstractFeatureCollectionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'featureMembers'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=AbstractFeatureCollectionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'featureMember'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=AbstractFeatureCollectionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'location'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=AbstractFeatureCollectionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'featureMembers'))),
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=AbstractFeatureCollectionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=AbstractFeatureCollectionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=AbstractFeatureCollectionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'featureMember'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=AbstractFeatureCollectionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'location'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=AbstractFeatureCollectionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'boundedBy'))),
    ])
    , 5 : pyxb.binding.content.ContentModelState(state=5, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=AbstractFeatureCollectionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=AbstractFeatureCollectionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'featureMembers'))),
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=AbstractFeatureCollectionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=AbstractFeatureCollectionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'featureMember'))),
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=AbstractFeatureCollectionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=AbstractFeatureCollectionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'location'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=AbstractFeatureCollectionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'boundedBy'))),
    ])
    , 6 : pyxb.binding.content.ContentModelState(state=6, is_final=True, transitions=[
    ])
    , 7 : pyxb.binding.content.ContentModelState(state=7, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=AbstractFeatureCollectionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=AbstractFeatureCollectionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'featureMembers'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=AbstractFeatureCollectionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'location'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=AbstractFeatureCollectionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'featureMember'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=AbstractFeatureCollectionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'boundedBy'))),
    ])
})



DynamicFeatureMemberType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'DynamicFeature'), DynamicFeatureType, scope=DynamicFeatureMemberType, documentation=u"States are captured by time-stamped instances of a feature. The content model extends the standard gml:AbstractFeatureType with the gml:dynamicProperties model group.\nEach time-stamped instance represents a 'snapshot' of a feature. The dynamic feature classes will normally be extended to suit particular applications.  A dynamic feature bears either a time stamp or a history."))
DynamicFeatureMemberType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=1, element_use=DynamicFeatureMemberType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'DynamicFeature'))),
    ])
})



AbstractDS_Aggregate_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'superset'), DS_Aggregate_PropertyType, scope=AbstractDS_Aggregate_Type))

AbstractDS_Aggregate_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'composedOf'), DS_DataSet_PropertyType, scope=AbstractDS_Aggregate_Type))

AbstractDS_Aggregate_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'seriesMetadata'), MD_Metadata_PropertyType, scope=AbstractDS_Aggregate_Type))

AbstractDS_Aggregate_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'subset'), DS_Aggregate_PropertyType, scope=AbstractDS_Aggregate_Type))
AbstractDS_Aggregate_Type._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=AbstractDS_Aggregate_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'composedOf'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=AbstractDS_Aggregate_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'composedOf'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=AbstractDS_Aggregate_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'seriesMetadata'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=AbstractDS_Aggregate_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'seriesMetadata'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=AbstractDS_Aggregate_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'superset'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=AbstractDS_Aggregate_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'subset'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=AbstractDS_Aggregate_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'superset'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=AbstractDS_Aggregate_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'subset'))),
    ])
})


DS_Series_Type._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DS_Series_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'composedOf'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DS_Series_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'composedOf'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=DS_Series_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'seriesMetadata'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=DS_Series_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'seriesMetadata'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=DS_Series_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'superset'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=DS_Series_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'subset'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=DS_Series_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'superset'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=DS_Series_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'subset'))),
    ])
})


DS_Platform_Type._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DS_Platform_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'composedOf'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DS_Platform_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'composedOf'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=DS_Platform_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'seriesMetadata'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=DS_Platform_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'seriesMetadata'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=DS_Platform_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'superset'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=DS_Platform_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'subset'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=DS_Platform_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'superset'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=DS_Platform_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'subset'))),
    ])
})



UnitDefinitionType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'catalogSymbol'), CodeType, scope=UnitDefinitionType, documentation=u'The catalogSymbol is the preferred lexical symbol used for this unit of measure.\nThe codeSpace attribute in gml:CodeType identifies a namespace for the catalog symbol value, and might reference the external catalog. The string value in gml:CodeType contains the value of a symbol that should be unique within this catalog namespace. This symbol often appears explicitly in the catalog, but it could be a combination of symbols using a specified algebra of units.'))

UnitDefinitionType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'quantityType'), StringOrRefType, scope=UnitDefinitionType, documentation=u'The gml:quantityType property indicates the phenomenon to which the units apply. This element contains an informal description of the phenomenon or type of physical quantity that is measured or observed. When the physical quantity is the result of an observation or measurement, this term is known as observable type or measurand.\nThe use of gml:quantityType for references to remote values is deprecated.'))

UnitDefinitionType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'quantityTypeReference'), ReferenceType, scope=UnitDefinitionType, documentation=u'The gml:quantityTypeReference property indicates the phenomenon to which the units apply. The content is a reference to a remote value.'))
UnitDefinitionType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=UnitDefinitionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'description'))),
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=UnitDefinitionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=UnitDefinitionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=1, element_use=UnitDefinitionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'metaDataProperty'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=UnitDefinitionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=UnitDefinitionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=UnitDefinitionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'catalogSymbol'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=UnitDefinitionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'catalogSymbol'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=UnitDefinitionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'quantityType'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=UnitDefinitionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'quantityTypeReference'))),
    ])
    , 5 : pyxb.binding.content.ContentModelState(state=5, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=UnitDefinitionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
    ])
    , 6 : pyxb.binding.content.ContentModelState(state=6, is_final=True, transitions=[
    ])
    , 7 : pyxb.binding.content.ContentModelState(state=7, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=UnitDefinitionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'catalogSymbol'))),
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=UnitDefinitionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=UnitDefinitionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'quantityType'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=UnitDefinitionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'quantityTypeReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=UnitDefinitionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'remarks'))),
    ])
    , 8 : pyxb.binding.content.ContentModelState(state=8, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=UnitDefinitionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'catalogSymbol'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=UnitDefinitionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'quantityTypeReference'))),
    ])
})



DQ_TopologicalConsistency_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'DQ_TopologicalConsistency'), DQ_TopologicalConsistency_Type, scope=DQ_TopologicalConsistency_PropertyType))
DQ_TopologicalConsistency_PropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DQ_TopologicalConsistency_PropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'DQ_TopologicalConsistency'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



DiscreteCoverageType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'coverageFunction'), CoverageFunctionType, scope=DiscreteCoverageType, documentation=u'The gml:coverageFunction property describes the mapping function from the domain to the range of the coverage.\nThe value of the CoverageFunction is one of gml:CoverageMappingRule and gml:GridFunction.\nIf the gml:coverageFunction property is omitted for a gridded coverage (including rectified gridded coverages) the gml:startPoint is assumed to be the value of the gml:low property in the gml:Grid geometry, and the gml:sequenceRule is assumed to be linear and the gml:axisOrder property is assumed to be "+1 +2".'))
DiscreteCoverageType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=9, element_use=DiscreteCoverageType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DiscreteCoverageType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=DiscreteCoverageType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'location'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=DiscreteCoverageType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'boundedBy'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=DiscreteCoverageType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'domainSet'))),
        pyxb.binding.content.ContentModelTransition(next_state=9, element_use=DiscreteCoverageType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=1, element_use=DiscreteCoverageType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'metaDataProperty'))),
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=DiscreteCoverageType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'description'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=DiscreteCoverageType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'boundedBy'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=DiscreteCoverageType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'location'))),
        pyxb.binding.content.ContentModelTransition(next_state=9, element_use=DiscreteCoverageType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=DiscreteCoverageType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'domainSet'))),
        pyxb.binding.content.ContentModelTransition(next_state=9, element_use=DiscreteCoverageType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=DiscreteCoverageType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'location'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=DiscreteCoverageType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'domainSet'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=DiscreteCoverageType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'coverageFunction'))),
    ])
    , 5 : pyxb.binding.content.ContentModelState(state=5, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=DiscreteCoverageType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'domainSet'))),
    ])
    , 6 : pyxb.binding.content.ContentModelState(state=6, is_final=True, transitions=[
    ])
    , 7 : pyxb.binding.content.ContentModelState(state=7, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=9, element_use=DiscreteCoverageType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DiscreteCoverageType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=DiscreteCoverageType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'location'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=DiscreteCoverageType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'boundedBy'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=DiscreteCoverageType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'domainSet'))),
        pyxb.binding.content.ContentModelTransition(next_state=9, element_use=DiscreteCoverageType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
    ])
    , 8 : pyxb.binding.content.ContentModelState(state=8, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=DiscreteCoverageType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'rangeSet'))),
    ])
    , 9 : pyxb.binding.content.ContentModelState(state=9, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=DiscreteCoverageType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'boundedBy'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=DiscreteCoverageType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'location'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=DiscreteCoverageType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'domainSet'))),
        pyxb.binding.content.ContentModelTransition(next_state=9, element_use=DiscreteCoverageType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
    ])
})



AbstractEX_GeographicExtent_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'extentTypeCode'), Boolean_PropertyType, scope=AbstractEX_GeographicExtent_Type))
AbstractEX_GeographicExtent_Type._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=AbstractEX_GeographicExtent_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'extentTypeCode'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



AngleChoiceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'angle'), AngleType, scope=AngleChoiceType, documentation=u'The gml:angle property element is used to record the value of an angle quantity as a single number, with its units.'))

AngleChoiceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'dmsAngle'), DMSAngleType, scope=AngleChoiceType, documentation=u''))
AngleChoiceType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=AngleChoiceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'angle'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=AngleChoiceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'dmsAngle'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



Integer_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gco, u'Integer'), pyxb.binding.datatypes.integer, scope=Integer_PropertyType))
Integer_PropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=Integer_PropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gco, u'Integer'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



MD_Keywords_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_Keywords'), MD_Keywords_Type, scope=MD_Keywords_PropertyType))
MD_Keywords_PropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MD_Keywords_PropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_Keywords'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})


AssociationRoleType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, term=pyxb.binding.content.Wildcard(process_contents=pyxb.binding.content.Wildcard.PC_strict, namespace_constraint=pyxb.binding.content.Wildcard.NC_any)),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})


AbstractDQ_PositionalAccuracy_Type._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=AbstractDQ_PositionalAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'measureDescription'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=AbstractDQ_PositionalAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationMethodType'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=AbstractDQ_PositionalAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationProcedure'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=AbstractDQ_PositionalAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationMethodDescription'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=AbstractDQ_PositionalAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'dateTime'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=AbstractDQ_PositionalAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'result'))),
        pyxb.binding.content.ContentModelTransition(next_state=1, element_use=AbstractDQ_PositionalAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'nameOfMeasure'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=AbstractDQ_PositionalAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'measureIdentification'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=AbstractDQ_PositionalAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'dateTime'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=AbstractDQ_PositionalAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'result'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=AbstractDQ_PositionalAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationMethodDescription'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=AbstractDQ_PositionalAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationProcedure'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=AbstractDQ_PositionalAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'dateTime'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=AbstractDQ_PositionalAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'result'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=AbstractDQ_PositionalAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'measureDescription'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=AbstractDQ_PositionalAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationMethodType'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=AbstractDQ_PositionalAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationProcedure'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=AbstractDQ_PositionalAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationMethodDescription'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=AbstractDQ_PositionalAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'dateTime'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=AbstractDQ_PositionalAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'result'))),
    ])
    , 5 : pyxb.binding.content.ContentModelState(state=5, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=AbstractDQ_PositionalAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationProcedure'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=AbstractDQ_PositionalAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'dateTime'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=AbstractDQ_PositionalAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'result'))),
    ])
    , 6 : pyxb.binding.content.ContentModelState(state=6, is_final=True, transitions=[
    ])
    , 7 : pyxb.binding.content.ContentModelState(state=7, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=AbstractDQ_PositionalAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationMethodType'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=AbstractDQ_PositionalAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationMethodDescription'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=AbstractDQ_PositionalAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'dateTime'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=AbstractDQ_PositionalAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationProcedure'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=AbstractDQ_PositionalAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'result'))),
    ])
    , 8 : pyxb.binding.content.ContentModelState(state=8, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=AbstractDQ_PositionalAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'result'))),
    ])
})


DQ_GriddedDataPositionalAccuracy_Type._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=DQ_GriddedDataPositionalAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'measureDescription'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=DQ_GriddedDataPositionalAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationMethodType'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DQ_GriddedDataPositionalAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationProcedure'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=DQ_GriddedDataPositionalAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationMethodDescription'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DQ_GriddedDataPositionalAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'dateTime'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=DQ_GriddedDataPositionalAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'result'))),
        pyxb.binding.content.ContentModelTransition(next_state=1, element_use=DQ_GriddedDataPositionalAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'nameOfMeasure'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=DQ_GriddedDataPositionalAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'measureIdentification'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DQ_GriddedDataPositionalAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'dateTime'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=DQ_GriddedDataPositionalAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'result'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=DQ_GriddedDataPositionalAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationMethodDescription'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DQ_GriddedDataPositionalAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationProcedure'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DQ_GriddedDataPositionalAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'dateTime'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=DQ_GriddedDataPositionalAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'result'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=DQ_GriddedDataPositionalAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'measureDescription'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=DQ_GriddedDataPositionalAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationMethodType'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DQ_GriddedDataPositionalAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationProcedure'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=DQ_GriddedDataPositionalAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationMethodDescription'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DQ_GriddedDataPositionalAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'dateTime'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=DQ_GriddedDataPositionalAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'result'))),
    ])
    , 5 : pyxb.binding.content.ContentModelState(state=5, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DQ_GriddedDataPositionalAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationProcedure'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DQ_GriddedDataPositionalAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'dateTime'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=DQ_GriddedDataPositionalAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'result'))),
    ])
    , 6 : pyxb.binding.content.ContentModelState(state=6, is_final=True, transitions=[
    ])
    , 7 : pyxb.binding.content.ContentModelState(state=7, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=DQ_GriddedDataPositionalAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationMethodType'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=DQ_GriddedDataPositionalAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationMethodDescription'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DQ_GriddedDataPositionalAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'dateTime'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DQ_GriddedDataPositionalAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationProcedure'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=DQ_GriddedDataPositionalAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'result'))),
    ])
    , 8 : pyxb.binding.content.ContentModelState(state=8, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=DQ_GriddedDataPositionalAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'result'))),
    ])
})


SphericalCSType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=SphericalCSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'description'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=SphericalCSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=SphericalCSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=1, element_use=SphericalCSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'metaDataProperty'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=SphericalCSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=SphericalCSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=SphericalCSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=SphericalCSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'axis'))),
    ])
    , 5 : pyxb.binding.content.ContentModelState(state=5, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=SphericalCSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'axis'))),
    ])
    , 6 : pyxb.binding.content.ContentModelState(state=6, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=SphericalCSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=SphericalCSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'axis'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=SphericalCSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'remarks'))),
    ])
})



MD_TopologyLevelCode_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_TopologyLevelCode'), CodeListValue_Type, scope=MD_TopologyLevelCode_PropertyType))
MD_TopologyLevelCode_PropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MD_TopologyLevelCode_PropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_TopologyLevelCode'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



ObliqueCartesianCSPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'ObliqueCartesianCS'), ObliqueCartesianCSType, scope=ObliqueCartesianCSPropertyType, documentation=u''))
ObliqueCartesianCSPropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=ObliqueCartesianCSPropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'ObliqueCartesianCS'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



EnvelopeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'upperCorner'), DirectPositionType, scope=EnvelopeType))

EnvelopeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'lowerCorner'), DirectPositionType, scope=EnvelopeType))

EnvelopeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'coordinates'), CoordinatesType, scope=EnvelopeType, documentation=u''))

EnvelopeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'pos'), DirectPositionType, scope=EnvelopeType))
EnvelopeType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=EnvelopeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'lowerCorner'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=EnvelopeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'coordinates'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=EnvelopeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'pos'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=EnvelopeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'upperCorner'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=True, transitions=[
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=EnvelopeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'pos'))),
    ])
})



EnvelopeWithTimePeriodType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'beginPosition'), TimePositionType, scope=EnvelopeWithTimePeriodType))

EnvelopeWithTimePeriodType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'endPosition'), TimePositionType, scope=EnvelopeWithTimePeriodType))
EnvelopeWithTimePeriodType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=EnvelopeWithTimePeriodType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'coordinates'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=EnvelopeWithTimePeriodType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'pos'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=EnvelopeWithTimePeriodType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'lowerCorner'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=EnvelopeWithTimePeriodType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'pos'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=EnvelopeWithTimePeriodType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'upperCorner'))),
    ])
    , 5 : pyxb.binding.content.ContentModelState(state=5, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=EnvelopeWithTimePeriodType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'beginPosition'))),
    ])
    , 6 : pyxb.binding.content.ContentModelState(state=6, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=EnvelopeWithTimePeriodType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'endPosition'))),
    ])
})



SurfacePropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractSurface'), AbstractSurfaceType, abstract=pyxb.binding.datatypes.boolean(1), scope=SurfacePropertyType, documentation=u'The AbstractSurface element is the abstract head of the substitution group for all (continuous) surface elements.'))
SurfacePropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=SurfacePropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractSurface'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})


AbstractGeneralTransformationType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=AbstractGeneralTransformationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'description'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=AbstractGeneralTransformationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=1, element_use=AbstractGeneralTransformationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'metaDataProperty'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=AbstractGeneralTransformationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=AbstractGeneralTransformationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=AbstractGeneralTransformationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'remarks'))),
        pyxb.binding.content.ContentModelTransition(next_state=10, element_use=AbstractGeneralTransformationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'domainOfValidity'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=AbstractGeneralTransformationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'scope'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=AbstractGeneralTransformationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=AbstractGeneralTransformationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=AbstractGeneralTransformationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'scope'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=AbstractGeneralTransformationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'operationVersion'))),
    ])
    , 5 : pyxb.binding.content.ContentModelState(state=5, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=AbstractGeneralTransformationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
    ])
    , 6 : pyxb.binding.content.ContentModelState(state=6, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=AbstractGeneralTransformationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'coordinateOperationAccuracy'))),
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=AbstractGeneralTransformationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'sourceCRS'))),
    ])
    , 7 : pyxb.binding.content.ContentModelState(state=7, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=9, element_use=AbstractGeneralTransformationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'targetCRS'))),
    ])
    , 8 : pyxb.binding.content.ContentModelState(state=8, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=10, element_use=AbstractGeneralTransformationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'domainOfValidity'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=AbstractGeneralTransformationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'scope'))),
    ])
    , 9 : pyxb.binding.content.ContentModelState(state=9, is_final=True, transitions=[
    ])
    , 10 : pyxb.binding.content.ContentModelState(state=10, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=AbstractGeneralTransformationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'scope'))),
    ])
})



TransformationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'parameterValue'), AbstractGeneralParameterValuePropertyType, scope=TransformationType, documentation=u'gml:parameterValue is a composition association to a parameter value or group of parameter values used by a coordinate operation.'))

TransformationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'method'), OperationMethodPropertyType, scope=TransformationType, documentation=u'gml:method is an association role to the operation method used by a coordinate operation.'))
TransformationType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=1, element_use=TransformationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'metaDataProperty'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=TransformationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'description'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=TransformationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=TransformationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=TransformationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'parameterValue'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=TransformationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=TransformationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=TransformationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'scope'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=TransformationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'operationVersion'))),
    ])
    , 5 : pyxb.binding.content.ContentModelState(state=5, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=TransformationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
    ])
    , 6 : pyxb.binding.content.ContentModelState(state=6, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=TransformationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'coordinateOperationAccuracy'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=TransformationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'sourceCRS'))),
    ])
    , 7 : pyxb.binding.content.ContentModelState(state=7, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=TransformationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=9, element_use=TransformationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'remarks'))),
        pyxb.binding.content.ContentModelTransition(next_state=11, element_use=TransformationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'domainOfValidity'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=TransformationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'scope'))),
    ])
    , 8 : pyxb.binding.content.ContentModelState(state=8, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=10, element_use=TransformationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'targetCRS'))),
    ])
    , 9 : pyxb.binding.content.ContentModelState(state=9, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=11, element_use=TransformationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'domainOfValidity'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=TransformationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'scope'))),
    ])
    , 10 : pyxb.binding.content.ContentModelState(state=10, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=TransformationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'method'))),
    ])
    , 11 : pyxb.binding.content.ContentModelState(state=11, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=TransformationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'scope'))),
    ])
})



CI_Telephone_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'CI_Telephone'), CI_Telephone_Type, scope=CI_Telephone_PropertyType))
CI_Telephone_PropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=CI_Telephone_PropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'CI_Telephone'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



DS_OtherAggregate_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'DS_OtherAggregate'), DS_OtherAggregate_Type, scope=DS_OtherAggregate_PropertyType))
DS_OtherAggregate_PropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DS_OtherAggregate_PropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'DS_OtherAggregate'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



MD_PixelOrientationCode_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_PixelOrientationCode'), MD_PixelOrientationCode_Type, scope=MD_PixelOrientationCode_PropertyType))
MD_PixelOrientationCode_PropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MD_PixelOrientationCode_PropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_PixelOrientationCode'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



AffinePlacementType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'outDimension'), pyxb.binding.datatypes.positiveInteger, scope=AffinePlacementType))

AffinePlacementType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'location'), DirectPositionType, scope=AffinePlacementType))

AffinePlacementType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'refDirection'), VectorType, scope=AffinePlacementType))

AffinePlacementType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'inDimension'), pyxb.binding.datatypes.positiveInteger, scope=AffinePlacementType))
AffinePlacementType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=AffinePlacementType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'location'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=AffinePlacementType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'refDirection'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=AffinePlacementType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'refDirection'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=AffinePlacementType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'inDimension'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=AffinePlacementType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'outDimension'))),
    ])
    , 5 : pyxb.binding.content.ContentModelState(state=5, is_final=True, transitions=[
    ])
})



EllipsoidPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'Ellipsoid'), EllipsoidType, scope=EllipsoidPropertyType, documentation=u'A gml:Ellipsoid is a geometric figure that may be used to describe the approximate shape of the earth. In mathematical terms, it is a surface formed by the rotation of an ellipse about its minor axis.'))
EllipsoidPropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=EllipsoidPropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'Ellipsoid'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



TimeReferenceSystemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'domainOfValidity'), pyxb.binding.datatypes.string, scope=TimeReferenceSystemType))
TimeReferenceSystemType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=TimeReferenceSystemType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'description'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=TimeReferenceSystemType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=TimeReferenceSystemType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=1, element_use=TimeReferenceSystemType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'metaDataProperty'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=TimeReferenceSystemType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=TimeReferenceSystemType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=TimeReferenceSystemType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=TimeReferenceSystemType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'domainOfValidity'))),
    ])
    , 5 : pyxb.binding.content.ContentModelState(state=5, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=TimeReferenceSystemType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'remarks'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=TimeReferenceSystemType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=TimeReferenceSystemType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'domainOfValidity'))),
    ])
    , 6 : pyxb.binding.content.ContentModelState(state=6, is_final=True, transitions=[
    ])
})



TimeCoordinateSystemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'originPosition'), TimePositionType, scope=TimeCoordinateSystemType))

TimeCoordinateSystemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'origin'), TimeInstantPropertyType, scope=TimeCoordinateSystemType))

TimeCoordinateSystemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'interval'), TimeIntervalLengthType, scope=TimeCoordinateSystemType))
TimeCoordinateSystemType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=TimeCoordinateSystemType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'description'))),
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=TimeCoordinateSystemType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=TimeCoordinateSystemType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=1, element_use=TimeCoordinateSystemType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'metaDataProperty'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=TimeCoordinateSystemType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=TimeCoordinateSystemType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=TimeCoordinateSystemType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=TimeCoordinateSystemType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'interval'))),
    ])
    , 5 : pyxb.binding.content.ContentModelState(state=5, is_final=True, transitions=[
    ])
    , 6 : pyxb.binding.content.ContentModelState(state=6, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=TimeCoordinateSystemType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'domainOfValidity'))),
    ])
    , 7 : pyxb.binding.content.ContentModelState(state=7, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=TimeCoordinateSystemType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'remarks'))),
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=TimeCoordinateSystemType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=TimeCoordinateSystemType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'domainOfValidity'))),
    ])
    , 8 : pyxb.binding.content.ContentModelState(state=8, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=TimeCoordinateSystemType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'originPosition'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=TimeCoordinateSystemType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'origin'))),
    ])
})



MD_Identifier_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_Identifier'), MD_Identifier_Type, scope=MD_Identifier_PropertyType))
MD_Identifier_PropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MD_Identifier_PropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_Identifier'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



MultiPointPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'MultiPoint'), MultiPointType, scope=MultiPointPropertyType, documentation=u'A gml:MultiPoint consists of one or more gml:Points.\nThe members of the geometric aggregate may be specified either using the "standard" property (gml:pointMember) or the array property (gml:pointMembers). It is also valid to use both the "standard" and the array properties in the same collection.'))
MultiPointPropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MultiPointPropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'MultiPoint'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



MultiCurvePropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'MultiCurve'), MultiCurveType, scope=MultiCurvePropertyType, documentation=u'A gml:MultiCurve is defined by one or more gml:AbstractCurves.\nThe members of the geometric aggregate may be specified either using the "standard" property (gml:curveMember) or the array property (gml:curveMembers). It is also valid to use both the "standard" and the array properties in the same collection.'))
MultiCurvePropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MultiCurvePropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'MultiCurve'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



MD_Resolution_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'equivalentScale'), MD_RepresentativeFraction_PropertyType, scope=MD_Resolution_Type))

MD_Resolution_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'distance'), Distance_PropertyType, scope=MD_Resolution_Type))
MD_Resolution_Type._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MD_Resolution_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'equivalentScale'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MD_Resolution_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'distance'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



MD_DigitalTransferOptions_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'offLine'), MD_Medium_PropertyType, scope=MD_DigitalTransferOptions_Type))

MD_DigitalTransferOptions_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'unitsOfDistribution'), CharacterString_PropertyType, scope=MD_DigitalTransferOptions_Type))

MD_DigitalTransferOptions_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'transferSize'), Real_PropertyType, scope=MD_DigitalTransferOptions_Type))

MD_DigitalTransferOptions_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'onLine'), CI_OnlineResource_PropertyType, scope=MD_DigitalTransferOptions_Type))
MD_DigitalTransferOptions_Type._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=MD_DigitalTransferOptions_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'unitsOfDistribution'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MD_DigitalTransferOptions_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'transferSize'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=MD_DigitalTransferOptions_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'offLine'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MD_DigitalTransferOptions_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'onLine'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=MD_DigitalTransferOptions_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'offLine'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MD_DigitalTransferOptions_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'onLine'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MD_DigitalTransferOptions_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'transferSize'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=MD_DigitalTransferOptions_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'offLine'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MD_DigitalTransferOptions_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'onLine'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=True, transitions=[
    ])
})


AbstractGeometryType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=AbstractGeometryType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=AbstractGeometryType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=AbstractGeometryType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=1, element_use=AbstractGeometryType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'metaDataProperty'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=AbstractGeometryType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'description'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=AbstractGeometryType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=AbstractGeometryType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=AbstractGeometryType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=AbstractGeometryType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=AbstractGeometryType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=AbstractGeometryType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
    ])
})



OperationMethodPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'OperationMethod'), OperationMethodType, scope=OperationMethodPropertyType, documentation=u'gml:OperationMethod is a method (algorithm or procedure) used to perform a coordinate operation. Most operation methods use a number of operation parameters, although some coordinate conversions use none. Each coordinate operation using the method assigns values to these parameters.\nThe parameter elements are an unordered list of associations to the set of operation parameters and parameter groups used by this operation method.'))
OperationMethodPropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=OperationMethodPropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'OperationMethod'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



PT_FreeText_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'PT_FreeText'), PT_FreeText_Type, scope=PT_FreeText_PropertyType))
PT_FreeText_PropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=PT_FreeText_PropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gco, u'CharacterString'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=PT_FreeText_PropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'PT_FreeText'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=PT_FreeText_PropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'PT_FreeText'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=True, transitions=[
    ])
})



BaseUnitType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'unitsSystem'), ReferenceType, scope=BaseUnitType))
BaseUnitType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=1, element_use=BaseUnitType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'metaDataProperty'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=BaseUnitType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'description'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=BaseUnitType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=BaseUnitType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=BaseUnitType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=BaseUnitType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=BaseUnitType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'catalogSymbol'))),
        pyxb.binding.content.ContentModelTransition(next_state=9, element_use=BaseUnitType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'unitsSystem'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=BaseUnitType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'quantityTypeReference'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=BaseUnitType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'catalogSymbol'))),
        pyxb.binding.content.ContentModelTransition(next_state=9, element_use=BaseUnitType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'unitsSystem'))),
    ])
    , 5 : pyxb.binding.content.ContentModelState(state=5, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=BaseUnitType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
    ])
    , 6 : pyxb.binding.content.ContentModelState(state=6, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=BaseUnitType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'catalogSymbol'))),
        pyxb.binding.content.ContentModelTransition(next_state=9, element_use=BaseUnitType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'unitsSystem'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=BaseUnitType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'quantityTypeReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=BaseUnitType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'quantityType'))),
    ])
    , 7 : pyxb.binding.content.ContentModelState(state=7, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=9, element_use=BaseUnitType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'unitsSystem'))),
    ])
    , 8 : pyxb.binding.content.ContentModelState(state=8, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=9, element_use=BaseUnitType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'unitsSystem'))),
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=BaseUnitType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'catalogSymbol'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=BaseUnitType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=BaseUnitType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'quantityType'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=BaseUnitType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'quantityTypeReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=BaseUnitType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'remarks'))),
    ])
    , 9 : pyxb.binding.content.ContentModelState(state=9, is_final=True, transitions=[
    ])
})



MD_CharacterSetCode_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_CharacterSetCode'), CodeListValue_Type, scope=MD_CharacterSetCode_PropertyType))
MD_CharacterSetCode_PropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MD_CharacterSetCode_PropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_CharacterSetCode'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



CI_ResponsibleParty_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'CI_ResponsibleParty'), CI_ResponsibleParty_Type, scope=CI_ResponsibleParty_PropertyType))
CI_ResponsibleParty_PropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=CI_ResponsibleParty_PropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'CI_ResponsibleParty'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



CI_Address_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'city'), CharacterString_PropertyType, scope=CI_Address_Type))

CI_Address_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'deliveryPoint'), CharacterString_PropertyType, scope=CI_Address_Type))

CI_Address_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'postalCode'), CharacterString_PropertyType, scope=CI_Address_Type))

CI_Address_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'administrativeArea'), CharacterString_PropertyType, scope=CI_Address_Type))

CI_Address_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'country'), CharacterString_PropertyType, scope=CI_Address_Type))

CI_Address_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'electronicMailAddress'), CharacterString_PropertyType, scope=CI_Address_Type))
CI_Address_Type._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=1, element_use=CI_Address_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'deliveryPoint'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=CI_Address_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'city'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=CI_Address_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'postalCode'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=CI_Address_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'administrativeArea'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=CI_Address_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'country'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=CI_Address_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'electronicMailAddress'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=CI_Address_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'electronicMailAddress'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=CI_Address_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'electronicMailAddress'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=CI_Address_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'country'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=CI_Address_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'postalCode'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=CI_Address_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'electronicMailAddress'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=CI_Address_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'country'))),
    ])
    , 5 : pyxb.binding.content.ContentModelState(state=5, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=CI_Address_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'postalCode'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=CI_Address_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'administrativeArea'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=CI_Address_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'country'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=CI_Address_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'electronicMailAddress'))),
    ])
})



EX_Extent_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'EX_Extent'), EX_Extent_Type, scope=EX_Extent_PropertyType))
EX_Extent_PropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=EX_Extent_PropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'EX_Extent'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



FeaturePropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractFeature'), AbstractFeatureType, abstract=pyxb.binding.datatypes.boolean(1), scope=FeaturePropertyType, documentation=u'This abstract element serves as the head of a substitution group which may contain any elements whose content model is derived from gml:AbstractFeatureType.  This may be used as a variable in the construction of content models.  \ngml:AbstractFeature may be thought of as "anything that is a GML feature" and may be used to define variables or templates in which the value of a GML property is "any feature". This occurs in particular in a GML feature collection where the feature member properties contain one or multiple copies of gml:AbstractFeature respectively.'))
FeaturePropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=FeaturePropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractFeature'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})


AbstractDQ_LogicalConsistency_Type._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=AbstractDQ_LogicalConsistency_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'measureDescription'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=AbstractDQ_LogicalConsistency_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationMethodType'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=AbstractDQ_LogicalConsistency_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationProcedure'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=AbstractDQ_LogicalConsistency_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationMethodDescription'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=AbstractDQ_LogicalConsistency_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'dateTime'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=AbstractDQ_LogicalConsistency_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'result'))),
        pyxb.binding.content.ContentModelTransition(next_state=1, element_use=AbstractDQ_LogicalConsistency_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'nameOfMeasure'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=AbstractDQ_LogicalConsistency_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'measureIdentification'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=AbstractDQ_LogicalConsistency_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'dateTime'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=AbstractDQ_LogicalConsistency_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'result'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=AbstractDQ_LogicalConsistency_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationMethodDescription'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=AbstractDQ_LogicalConsistency_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationProcedure'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=AbstractDQ_LogicalConsistency_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'dateTime'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=AbstractDQ_LogicalConsistency_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'result'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=AbstractDQ_LogicalConsistency_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'measureDescription'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=AbstractDQ_LogicalConsistency_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationMethodType'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=AbstractDQ_LogicalConsistency_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationProcedure'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=AbstractDQ_LogicalConsistency_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationMethodDescription'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=AbstractDQ_LogicalConsistency_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'dateTime'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=AbstractDQ_LogicalConsistency_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'result'))),
    ])
    , 5 : pyxb.binding.content.ContentModelState(state=5, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=AbstractDQ_LogicalConsistency_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationProcedure'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=AbstractDQ_LogicalConsistency_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'dateTime'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=AbstractDQ_LogicalConsistency_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'result'))),
    ])
    , 6 : pyxb.binding.content.ContentModelState(state=6, is_final=True, transitions=[
    ])
    , 7 : pyxb.binding.content.ContentModelState(state=7, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=AbstractDQ_LogicalConsistency_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationMethodType'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=AbstractDQ_LogicalConsistency_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationMethodDescription'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=AbstractDQ_LogicalConsistency_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'dateTime'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=AbstractDQ_LogicalConsistency_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationProcedure'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=AbstractDQ_LogicalConsistency_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'result'))),
    ])
    , 8 : pyxb.binding.content.ContentModelState(state=8, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=AbstractDQ_LogicalConsistency_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'result'))),
    ])
})



CoordinateSystemAxisType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'axisDirection'), CodeWithAuthorityType, scope=CoordinateSystemAxisType, documentation=u'gml:axisDirection is the direction of this coordinate system axis (or in the case of Cartesian projected coordinates, the direction of this coordinate system axis at the origin).\nWithin any set of coordinate system axes, only one of each pair of terms may be used. For earth-fixed CRSs, this direction is often approximate and intended to provide a human interpretable meaning to the axis. When a geodetic datum is used, the precise directions of the axes may therefore vary slightly from this approximate direction.\nThe codeSpace attribute shall reference a source of information specifying the values and meanings of all the allowed string values for this property.'))

CoordinateSystemAxisType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'rangeMeaning'), CodeWithAuthorityType, scope=CoordinateSystemAxisType, documentation=u'gml:rangeMeaning describes the meaning of axis value range specified by gml:minimumValue and gml:maximumValue. This element shall be omitted when both gml:minimumValue and gml:maximumValue are omitted. This element should be included when gml:minimumValue and/or gml:maximumValue are included. If this element is omitted when the gml:minimumValue and/or gml:maximumValue are included, the meaning is unspecified. The codeSpace attribute shall reference a source of information specifying the values and meanings of all the allowed string values for this property.'))

CoordinateSystemAxisType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'minimumValue'), pyxb.binding.datatypes.double, scope=CoordinateSystemAxisType, documentation=u'The gml:minimumValue and gml:maximumValue properties allow the specification of minimum and maximum value normally allowed for this axis, in the unit of measure for the axis. For a continuous angular axis such as longitude, the values wrap-around at this value. Also, values beyond this minimum/maximum can be used for specified purposes, such as in a bounding box. A value of minus infinity shall be allowed for the gml:minimumValue element, a value of plus infiniy for the gml:maximumValue element. If these elements are omitted, the value is unspecified.'))

CoordinateSystemAxisType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'maximumValue'), pyxb.binding.datatypes.double, scope=CoordinateSystemAxisType, documentation=u'The gml:minimumValue and gml:maximumValue properties allow the specification of minimum and maximum value normally allowed for this axis, in the unit of measure for the axis. For a continuous angular axis such as longitude, the values wrap-around at this value. Also, values beyond this minimum/maximum can be used for specified purposes, such as in a bounding box. A value of minus infinity shall be allowed for the gml:minimumValue element, a value of plus infiniy for the gml:maximumValue element. If these elements are omitted, the value is unspecified.'))

CoordinateSystemAxisType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'axisAbbrev'), CodeType, scope=CoordinateSystemAxisType, documentation=u'gml:axisAbbrev is the abbreviation used for this coordinate system axis; this abbreviation is also used to identify the coordinates in the coordinate tuple. The codeSpace attribute may reference a source of more information on a set of standardized abbreviations, or on this abbreviation.'))
CoordinateSystemAxisType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=1, element_use=CoordinateSystemAxisType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'metaDataProperty'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=CoordinateSystemAxisType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=CoordinateSystemAxisType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=CoordinateSystemAxisType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'description'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=CoordinateSystemAxisType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'axisAbbrev'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=CoordinateSystemAxisType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=10, element_use=CoordinateSystemAxisType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'remarks'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=CoordinateSystemAxisType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'rangeMeaning'))),
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=CoordinateSystemAxisType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'minimumValue'))),
        pyxb.binding.content.ContentModelTransition(next_state=9, element_use=CoordinateSystemAxisType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'maximumValue'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=CoordinateSystemAxisType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=CoordinateSystemAxisType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
    ])
    , 5 : pyxb.binding.content.ContentModelState(state=5, is_final=True, transitions=[
    ])
    , 6 : pyxb.binding.content.ContentModelState(state=6, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=CoordinateSystemAxisType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
    ])
    , 7 : pyxb.binding.content.ContentModelState(state=7, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=CoordinateSystemAxisType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'rangeMeaning'))),
        pyxb.binding.content.ContentModelTransition(next_state=9, element_use=CoordinateSystemAxisType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'maximumValue'))),
    ])
    , 8 : pyxb.binding.content.ContentModelState(state=8, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=CoordinateSystemAxisType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'axisDirection'))),
    ])
    , 9 : pyxb.binding.content.ContentModelState(state=9, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=CoordinateSystemAxisType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'rangeMeaning'))),
    ])
    , 10 : pyxb.binding.content.ContentModelState(state=10, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=CoordinateSystemAxisType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'axisAbbrev'))),
    ])
})



TopoCurveType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'directedEdge'), DirectedEdgePropertyType, scope=TopoCurveType, documentation=u'A gml:directedEdge property element describes the boundary of topology faces, the coBoundary of topology nodes and is used in the support of topological line features via the gml:TopoCurve expression, see below. The orientation attribute of type gml:SignType expresses the sense in which the included edge is used, i.e. forward or reverse.'))
TopoCurveType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=TopoCurveType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=TopoCurveType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'directedEdge'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=TopoCurveType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=TopoCurveType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=1, element_use=TopoCurveType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'metaDataProperty'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=TopoCurveType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'description'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=TopoCurveType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=TopoCurveType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'directedEdge'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=TopoCurveType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=TopoCurveType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'directedEdge'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=TopoCurveType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=TopoCurveType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=TopoCurveType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'directedEdge'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=TopoCurveType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
    ])
    , 5 : pyxb.binding.content.ContentModelState(state=5, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=TopoCurveType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'directedEdge'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=TopoCurveType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
    ])
})



CRSPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractCRS'), AbstractCRSType, abstract=pyxb.binding.datatypes.boolean(1), scope=CRSPropertyType, documentation=u'gml:AbstractCRS specifies a coordinate reference system which is usually single but may be compound. This abstract complex type shall not be used, extended, or restricted, in a GML Application Schema, to define a concrete subtype with a meaning equivalent to a concrete subtype specified in this document.'))
CRSPropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=CRSPropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractCRS'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



SingleCRSPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractSingleCRS'), AbstractCRSType, abstract=pyxb.binding.datatypes.boolean(1), scope=SingleCRSPropertyType, documentation=u'gml:AbstractSingleCRS implements a coordinate reference system consisting of one coordinate system and one datum (as opposed to a Compound CRS).'))
SingleCRSPropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=SingleCRSPropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractSingleCRS'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})


DQ_FormatConsistency_Type._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=DQ_FormatConsistency_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'measureDescription'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=DQ_FormatConsistency_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationMethodType'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DQ_FormatConsistency_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationProcedure'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=DQ_FormatConsistency_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationMethodDescription'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DQ_FormatConsistency_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'dateTime'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=DQ_FormatConsistency_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'result'))),
        pyxb.binding.content.ContentModelTransition(next_state=1, element_use=DQ_FormatConsistency_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'nameOfMeasure'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=DQ_FormatConsistency_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'measureIdentification'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DQ_FormatConsistency_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'dateTime'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=DQ_FormatConsistency_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'result'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=DQ_FormatConsistency_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationMethodDescription'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DQ_FormatConsistency_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationProcedure'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DQ_FormatConsistency_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'dateTime'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=DQ_FormatConsistency_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'result'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=DQ_FormatConsistency_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'measureDescription'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=DQ_FormatConsistency_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationMethodType'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DQ_FormatConsistency_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationProcedure'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=DQ_FormatConsistency_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationMethodDescription'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DQ_FormatConsistency_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'dateTime'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=DQ_FormatConsistency_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'result'))),
    ])
    , 5 : pyxb.binding.content.ContentModelState(state=5, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DQ_FormatConsistency_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationProcedure'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DQ_FormatConsistency_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'dateTime'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=DQ_FormatConsistency_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'result'))),
    ])
    , 6 : pyxb.binding.content.ContentModelState(state=6, is_final=True, transitions=[
    ])
    , 7 : pyxb.binding.content.ContentModelState(state=7, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=DQ_FormatConsistency_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationMethodType'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=DQ_FormatConsistency_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationMethodDescription'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DQ_FormatConsistency_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'dateTime'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DQ_FormatConsistency_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationProcedure'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=DQ_FormatConsistency_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'result'))),
    ])
    , 8 : pyxb.binding.content.ContentModelState(state=8, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=DQ_FormatConsistency_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'result'))),
    ])
})



PolygonPatchType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'interior'), AbstractRingPropertyType, scope=PolygonPatchType, documentation=u'A boundary of a surface consists of a number of rings. The "interior" rings separate the surface / surface patch from the area enclosed by the rings.'))

PolygonPatchType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'exterior'), AbstractRingPropertyType, scope=PolygonPatchType, documentation=u'A boundary of a surface consists of a number of rings. In the normal 2D case, one of these rings is distinguished as being the exterior boundary. In a general manifold this is not always possible, in which case all boundaries shall be listed as interior boundaries, and the exterior will be empty.'))
PolygonPatchType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=PolygonPatchType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'exterior'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=PolygonPatchType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'interior'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=PolygonPatchType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'interior'))),
    ])
})


AbstractGeometricAggregateType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=AbstractGeometricAggregateType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=AbstractGeometricAggregateType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=AbstractGeometricAggregateType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=1, element_use=AbstractGeometricAggregateType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'metaDataProperty'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=AbstractGeometricAggregateType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'description'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=AbstractGeometricAggregateType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=AbstractGeometricAggregateType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=AbstractGeometricAggregateType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=AbstractGeometricAggregateType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=AbstractGeometricAggregateType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=AbstractGeometricAggregateType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
    ])
})



Boolean_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gco, u'Boolean'), pyxb.binding.datatypes.boolean, scope=Boolean_PropertyType))
Boolean_PropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=Boolean_PropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gco, u'Boolean'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



EX_TemporalExtent_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'extent'), TM_Primitive_PropertyType, scope=EX_TemporalExtent_Type))
EX_TemporalExtent_Type._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=EX_TemporalExtent_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'extent'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



EX_SpatialTemporalExtent_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'spatialExtent'), EX_GeographicExtent_PropertyType, scope=EX_SpatialTemporalExtent_Type))
EX_SpatialTemporalExtent_Type._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=EX_SpatialTemporalExtent_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'extent'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=EX_SpatialTemporalExtent_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'spatialExtent'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=EX_SpatialTemporalExtent_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'spatialExtent'))),
    ])
})



MD_DimensionNameTypeCode_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_DimensionNameTypeCode'), CodeListValue_Type, scope=MD_DimensionNameTypeCode_PropertyType))
MD_DimensionNameTypeCode_PropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MD_DimensionNameTypeCode_PropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_DimensionNameTypeCode'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



CI_Citation_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'CI_Citation'), CI_Citation_Type, scope=CI_Citation_PropertyType))
CI_Citation_PropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=CI_Citation_PropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'CI_Citation'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



PolarCSPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'PolarCS'), PolarCSType, scope=PolarCSPropertyType, documentation=u'gml:PolarCS ia s two-dimensional coordinate system in which position is specified by the distance from the origin and the angle between the line from the origin to a point and a reference direction. A PolarCS shall have two gml:axis property elements.'))
PolarCSPropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=PolarCSPropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'PolarCS'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



CI_Date_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'CI_Date'), CI_Date_Type, scope=CI_Date_PropertyType))
CI_Date_PropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=CI_Date_PropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'CI_Date'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})


DQ_DomainConsistency_Type._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=DQ_DomainConsistency_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'measureDescription'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=DQ_DomainConsistency_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationMethodType'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DQ_DomainConsistency_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationProcedure'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=DQ_DomainConsistency_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationMethodDescription'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DQ_DomainConsistency_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'dateTime'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=DQ_DomainConsistency_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'result'))),
        pyxb.binding.content.ContentModelTransition(next_state=1, element_use=DQ_DomainConsistency_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'nameOfMeasure'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=DQ_DomainConsistency_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'measureIdentification'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DQ_DomainConsistency_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'dateTime'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=DQ_DomainConsistency_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'result'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=DQ_DomainConsistency_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationMethodDescription'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DQ_DomainConsistency_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationProcedure'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DQ_DomainConsistency_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'dateTime'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=DQ_DomainConsistency_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'result'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=DQ_DomainConsistency_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'measureDescription'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=DQ_DomainConsistency_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationMethodType'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DQ_DomainConsistency_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationProcedure'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=DQ_DomainConsistency_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationMethodDescription'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DQ_DomainConsistency_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'dateTime'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=DQ_DomainConsistency_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'result'))),
    ])
    , 5 : pyxb.binding.content.ContentModelState(state=5, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DQ_DomainConsistency_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationProcedure'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DQ_DomainConsistency_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'dateTime'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=DQ_DomainConsistency_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'result'))),
    ])
    , 6 : pyxb.binding.content.ContentModelState(state=6, is_final=True, transitions=[
    ])
    , 7 : pyxb.binding.content.ContentModelState(state=7, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=DQ_DomainConsistency_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationMethodType'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=DQ_DomainConsistency_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationMethodDescription'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DQ_DomainConsistency_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'dateTime'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DQ_DomainConsistency_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationProcedure'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=DQ_DomainConsistency_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'result'))),
    ])
    , 8 : pyxb.binding.content.ContentModelState(state=8, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=DQ_DomainConsistency_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'result'))),
    ])
})



CylindricalCSPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'CylindricalCS'), CylindricalCSType, scope=CylindricalCSPropertyType, documentation=u'gml:CylindricalCS is a three-dimensional coordinate system consisting of a polar coordinate system extended by a straight coordinate axis perpendicular to the plane spanned by the polar coordinate system. A CylindricalCS shall have three gml:axis property elements.'))
CylindricalCSPropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=CylindricalCSPropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'CylindricalCS'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



MD_SpatialRepresentation_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'AbstractMD_SpatialRepresentation'), AbstractMD_SpatialRepresentation_Type, abstract=pyxb.binding.datatypes.boolean(1), scope=MD_SpatialRepresentation_PropertyType))
MD_SpatialRepresentation_PropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MD_SpatialRepresentation_PropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'AbstractMD_SpatialRepresentation'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



ConcatenatedOperationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'coordOperation'), CoordinateOperationPropertyType, scope=ConcatenatedOperationType, documentation=u'gml:coordOperation is an association role to a coordinate operation.'))
ConcatenatedOperationType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=1, element_use=ConcatenatedOperationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'metaDataProperty'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=ConcatenatedOperationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'description'))),
        pyxb.binding.content.ContentModelTransition(next_state=12, element_use=ConcatenatedOperationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=ConcatenatedOperationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=12, element_use=ConcatenatedOperationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=ConcatenatedOperationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=ConcatenatedOperationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'scope'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=ConcatenatedOperationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'domainOfValidity'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=9, element_use=ConcatenatedOperationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'coordOperation'))),
    ])
    , 5 : pyxb.binding.content.ContentModelState(state=5, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=12, element_use=ConcatenatedOperationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
    ])
    , 6 : pyxb.binding.content.ContentModelState(state=6, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=ConcatenatedOperationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'targetCRS'))),
        pyxb.binding.content.ContentModelTransition(next_state=9, element_use=ConcatenatedOperationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'coordOperation'))),
    ])
    , 7 : pyxb.binding.content.ContentModelState(state=7, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=ConcatenatedOperationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'scope'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=ConcatenatedOperationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'targetCRS'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=ConcatenatedOperationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'sourceCRS'))),
        pyxb.binding.content.ContentModelTransition(next_state=10, element_use=ConcatenatedOperationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'operationVersion'))),
        pyxb.binding.content.ContentModelTransition(next_state=9, element_use=ConcatenatedOperationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'coordOperation'))),
        pyxb.binding.content.ContentModelTransition(next_state=10, element_use=ConcatenatedOperationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'coordinateOperationAccuracy'))),
    ])
    , 8 : pyxb.binding.content.ContentModelState(state=8, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=ConcatenatedOperationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'scope'))),
    ])
    , 9 : pyxb.binding.content.ContentModelState(state=9, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=11, element_use=ConcatenatedOperationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'coordOperation'))),
    ])
    , 10 : pyxb.binding.content.ContentModelState(state=10, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=ConcatenatedOperationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'targetCRS'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=ConcatenatedOperationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'sourceCRS'))),
        pyxb.binding.content.ContentModelTransition(next_state=10, element_use=ConcatenatedOperationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'coordinateOperationAccuracy'))),
        pyxb.binding.content.ContentModelTransition(next_state=9, element_use=ConcatenatedOperationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'coordOperation'))),
    ])
    , 11 : pyxb.binding.content.ContentModelState(state=11, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=11, element_use=ConcatenatedOperationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'coordOperation'))),
    ])
    , 12 : pyxb.binding.content.ContentModelState(state=12, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=12, element_use=ConcatenatedOperationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=ConcatenatedOperationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'scope'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=ConcatenatedOperationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'domainOfValidity'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=ConcatenatedOperationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'remarks'))),
    ])
})



GridFunctionType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'startPoint'), integerList, scope=GridFunctionType))

GridFunctionType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'sequenceRule'), SequenceRuleType, scope=GridFunctionType))
GridFunctionType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=GridFunctionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'sequenceRule'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=GridFunctionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'startPoint'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=GridFunctionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'startPoint'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=True, transitions=[
    ])
})



CI_Telephone_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'facsimile'), CharacterString_PropertyType, scope=CI_Telephone_Type))

CI_Telephone_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'voice'), CharacterString_PropertyType, scope=CI_Telephone_Type))
CI_Telephone_Type._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=1, element_use=CI_Telephone_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'voice'))),
        pyxb.binding.content.ContentModelTransition(next_state=1, element_use=CI_Telephone_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'facsimile'))),
    ])
})



MD_DataIdentification_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_DataIdentification'), MD_DataIdentification_Type, scope=MD_DataIdentification_PropertyType))
MD_DataIdentification_PropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MD_DataIdentification_PropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_DataIdentification'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



CI_PresentationFormCode_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'CI_PresentationFormCode'), CodeListValue_Type, scope=CI_PresentationFormCode_PropertyType))
CI_PresentationFormCode_PropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=CI_PresentationFormCode_PropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'CI_PresentationFormCode'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



OperationParameterPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'OperationParameter'), OperationParameterType, scope=OperationParameterPropertyType, documentation=u'gml:OperationParameter is the definition of a parameter used by an operation method. Most parameter values are numeric, but other types of parameter values are possible. This complex type is expected to be used or extended for all operation methods, without defining operation-method-specialized element names.'))
OperationParameterPropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=OperationParameterPropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'OperationParameter'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



TM_PeriodDuration_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gts, u'TM_PeriodDuration'), pyxb.binding.datatypes.duration, scope=TM_PeriodDuration_PropertyType))
TM_PeriodDuration_PropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=TM_PeriodDuration_PropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gts, u'TM_PeriodDuration'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



AbstractGeneralOperationParameterType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'minimumOccurs'), pyxb.binding.datatypes.nonNegativeInteger, scope=AbstractGeneralOperationParameterType, documentation=u'gml:minimumOccurs is the minimum number of times that values for this parameter group or parameter are required. If this attribute is omitted, the minimum number shall be one.'))
AbstractGeneralOperationParameterType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=AbstractGeneralOperationParameterType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'description'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=AbstractGeneralOperationParameterType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=AbstractGeneralOperationParameterType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=1, element_use=AbstractGeneralOperationParameterType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'metaDataProperty'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=AbstractGeneralOperationParameterType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=AbstractGeneralOperationParameterType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=AbstractGeneralOperationParameterType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=True, transitions=[
    ])
    , 5 : pyxb.binding.content.ContentModelState(state=5, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=AbstractGeneralOperationParameterType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'minimumOccurs'))),
    ])
    , 6 : pyxb.binding.content.ContentModelState(state=6, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=AbstractGeneralOperationParameterType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=AbstractGeneralOperationParameterType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'minimumOccurs'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=AbstractGeneralOperationParameterType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'remarks'))),
    ])
})



OperationParameterGroupType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'maximumOccurs'), pyxb.binding.datatypes.positiveInteger, scope=OperationParameterGroupType, documentation=u'gml:maximumOccurs is the maximum number of times that values for this parameter group may be included. If this attribute is omitted, the maximum number shall be one.'))

OperationParameterGroupType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'parameter'), AbstractGeneralOperationParameterPropertyType, scope=OperationParameterGroupType, documentation=u'gml:parameter is an association to an operation parameter or parameter group.'))
OperationParameterGroupType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=OperationParameterGroupType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'description'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=OperationParameterGroupType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=OperationParameterGroupType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=1, element_use=OperationParameterGroupType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'metaDataProperty'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=OperationParameterGroupType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=OperationParameterGroupType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=OperationParameterGroupType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'parameter'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=OperationParameterGroupType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'maximumOccurs'))),
        pyxb.binding.content.ContentModelTransition(next_state=9, element_use=OperationParameterGroupType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'minimumOccurs'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=OperationParameterGroupType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'parameter'))),
    ])
    , 5 : pyxb.binding.content.ContentModelState(state=5, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=OperationParameterGroupType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
    ])
    , 6 : pyxb.binding.content.ContentModelState(state=6, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=OperationParameterGroupType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'parameter'))),
    ])
    , 7 : pyxb.binding.content.ContentModelState(state=7, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=OperationParameterGroupType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'parameter'))),
    ])
    , 8 : pyxb.binding.content.ContentModelState(state=8, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=OperationParameterGroupType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'maximumOccurs'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=OperationParameterGroupType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=OperationParameterGroupType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'parameter'))),
        pyxb.binding.content.ContentModelTransition(next_state=9, element_use=OperationParameterGroupType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'minimumOccurs'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=OperationParameterGroupType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'remarks'))),
    ])
    , 9 : pyxb.binding.content.ContentModelState(state=9, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=OperationParameterGroupType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'maximumOccurs'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=OperationParameterGroupType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'parameter'))),
    ])
})



MD_Georectified_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'pointInPixel'), MD_PixelOrientationCode_PropertyType, scope=MD_Georectified_Type))

MD_Georectified_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'transformationDimensionMapping'), CharacterString_PropertyType, scope=MD_Georectified_Type))

MD_Georectified_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'transformationDimensionDescription'), CharacterString_PropertyType, scope=MD_Georectified_Type))

MD_Georectified_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'checkPointAvailability'), Boolean_PropertyType, scope=MD_Georectified_Type))

MD_Georectified_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'checkPointDescription'), CharacterString_PropertyType, scope=MD_Georectified_Type))

MD_Georectified_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'cornerPoints'), GM_Point_PropertyType, scope=MD_Georectified_Type))

MD_Georectified_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'centerPoint'), GM_Point_PropertyType, scope=MD_Georectified_Type))
MD_Georectified_Type._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=MD_Georectified_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'numberOfDimensions'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=9, element_use=MD_Georectified_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'transformationDimensionDescription'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=MD_Georectified_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'transformationDimensionMapping'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=MD_Georectified_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'transformationParameterAvailability'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MD_Georectified_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'pointInPixel'))),
    ])
    , 5 : pyxb.binding.content.ContentModelState(state=5, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=MD_Georectified_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'checkPointAvailability'))),
    ])
    , 6 : pyxb.binding.content.ContentModelState(state=6, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=MD_Georectified_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'axisDimensionProperties'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=MD_Georectified_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'cellGeometry'))),
    ])
    , 7 : pyxb.binding.content.ContentModelState(state=7, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=11, element_use=MD_Georectified_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'cornerPoints'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MD_Georectified_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'pointInPixel'))),
        pyxb.binding.content.ContentModelTransition(next_state=11, element_use=MD_Georectified_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'checkPointDescription'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=MD_Georectified_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'centerPoint'))),
    ])
    , 8 : pyxb.binding.content.ContentModelState(state=8, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=10, element_use=MD_Georectified_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'transformationDimensionMapping'))),
    ])
    , 9 : pyxb.binding.content.ContentModelState(state=9, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=MD_Georectified_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'transformationDimensionMapping'))),
    ])
    , 10 : pyxb.binding.content.ContentModelState(state=10, is_final=True, transitions=[
    ])
    , 11 : pyxb.binding.content.ContentModelState(state=11, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=11, element_use=MD_Georectified_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'cornerPoints'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MD_Georectified_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'pointInPixel'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=MD_Georectified_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'centerPoint'))),
    ])
})



DQ_DataQuality_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'lineage'), LI_Lineage_PropertyType, scope=DQ_DataQuality_Type))

DQ_DataQuality_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'scope'), DQ_Scope_PropertyType, scope=DQ_DataQuality_Type))

DQ_DataQuality_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'report'), DQ_Element_PropertyType, scope=DQ_DataQuality_Type))
DQ_DataQuality_Type._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DQ_DataQuality_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'scope'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DQ_DataQuality_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'report'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=DQ_DataQuality_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'lineage'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=True, transitions=[
    ])
})



SolidPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractSolid'), AbstractSolidType, abstract=pyxb.binding.datatypes.boolean(1), scope=SolidPropertyType, documentation=u'The AbstractSolid element is the abstract head of the substituition group for all (continuous) solid elements.'))
SolidPropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=SolidPropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractSolid'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



MD_Format_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'version'), CharacterString_PropertyType, scope=MD_Format_Type))

MD_Format_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'formatDistributor'), MD_Distributor_PropertyType, scope=MD_Format_Type))

MD_Format_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'amendmentNumber'), CharacterString_PropertyType, scope=MD_Format_Type))

MD_Format_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'specification'), CharacterString_PropertyType, scope=MD_Format_Type))

MD_Format_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'fileDecompressionTechnique'), CharacterString_PropertyType, scope=MD_Format_Type))

MD_Format_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'name'), CharacterString_PropertyType, scope=MD_Format_Type))
MD_Format_Type._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=MD_Format_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'name'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MD_Format_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'formatDistributor'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=MD_Format_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'version'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MD_Format_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'formatDistributor'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=MD_Format_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'amendmentNumber'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=MD_Format_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'specification'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MD_Format_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'fileDecompressionTechnique'))),
    ])
    , 5 : pyxb.binding.content.ContentModelState(state=5, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MD_Format_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'formatDistributor'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=MD_Format_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'specification'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MD_Format_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'fileDecompressionTechnique'))),
    ])
    , 6 : pyxb.binding.content.ContentModelState(state=6, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MD_Format_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'formatDistributor'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MD_Format_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'fileDecompressionTechnique'))),
    ])
})



TopoSolidPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'TopoSolid'), TopoSolidType, scope=TopoSolidPropertyType, documentation=u'gml:TopoSolid represents the 3-dimensional topology primitive. \nThe topological boundary of a solid (gml:directedFace) consists of a set of directed faces.\nA solid may optionally be realised by a 3-dimensional geometric primitive (gml:solidProperty).'))
TopoSolidPropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=TopoSolidPropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'TopoSolid'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



TargetPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractFeature'), AbstractFeatureType, abstract=pyxb.binding.datatypes.boolean(1), scope=TargetPropertyType, documentation=u'This abstract element serves as the head of a substitution group which may contain any elements whose content model is derived from gml:AbstractFeatureType.  This may be used as a variable in the construction of content models.  \ngml:AbstractFeature may be thought of as "anything that is a GML feature" and may be used to define variables or templates in which the value of a GML property is "any feature". This occurs in particular in a GML feature collection where the feature member properties contain one or multiple copies of gml:AbstractFeature respectively.'))

TargetPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractGeometry'), AbstractGeometryType, abstract=pyxb.binding.datatypes.boolean(1), scope=TargetPropertyType, documentation=u'The AbstractGeometry element is the abstract head of the substitution group for all geometry elements of GML. This includes pre-defined and user-defined geometry elements. Any geometry element shall be a direct or indirect extension/restriction of AbstractGeometryType and shall be directly or indirectly in the substitution group of AbstractGeometry.'))
TargetPropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=TargetPropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractFeature'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=TargetPropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractGeometry'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



MD_Georectified_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_Georectified'), MD_Georectified_Type, scope=MD_Georectified_PropertyType))
MD_Georectified_PropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MD_Georectified_PropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_Georectified'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



TimeTopologyComplexPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'TimeTopologyComplex'), TimeTopologyComplexType, scope=TimeTopologyComplexPropertyType, documentation=u'A temporal topology complex shall be the connected acyclic directed graph composed of temporal topological primitives, i.e. time nodes and time edges. Because a time edge may not exist without two time nodes on its boundaries, static features have time edges from a temporal topology complex as the values of their temporal properties, regardless of explicit declarations.\nA temporal topology complex expresses a linear or a non-linear graph. A temporal linear graph, composed of a sequence of time edges, provides a lineage described only by "substitution" of feature instances or feature element values. A time node as the start or the end of the graph connects with at least one time edge. A time node other than the start and the end shall connect to at least two time edges: one of starting from the node, and another ending at the node.\nA temporal topological complex is a set of connected temporal topological primitives. The member primtives are indicated, either by reference or by value, using the primitive property.'))
TimeTopologyComplexPropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=TimeTopologyComplexPropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'TimeTopologyComplex'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



MD_CoverageDescription_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'dimension'), MD_RangeDimension_PropertyType, scope=MD_CoverageDescription_Type))

MD_CoverageDescription_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'attributeDescription'), RecordType_PropertyType, scope=MD_CoverageDescription_Type))

MD_CoverageDescription_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'contentType'), MD_CoverageContentTypeCode_PropertyType, scope=MD_CoverageDescription_Type))
MD_CoverageDescription_Type._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MD_CoverageDescription_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'attributeDescription'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=MD_CoverageDescription_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'contentType'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=MD_CoverageDescription_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'dimension'))),
    ])
})



GeodeticDatumType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'primeMeridian'), PrimeMeridianPropertyType, scope=GeodeticDatumType, documentation=u'gml:primeMeridian is an association role to the prime meridian used by this geodetic datum.'))

GeodeticDatumType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'ellipsoid'), EllipsoidPropertyType, scope=GeodeticDatumType, documentation=u'gml:ellipsoid is an association role to the ellipsoid used by this geodetic datum.'))
GeodeticDatumType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=GeodeticDatumType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'description'))),
        pyxb.binding.content.ContentModelTransition(next_state=11, element_use=GeodeticDatumType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=GeodeticDatumType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=1, element_use=GeodeticDatumType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'metaDataProperty'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=11, element_use=GeodeticDatumType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=GeodeticDatumType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=GeodeticDatumType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'anchorDefinition'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=GeodeticDatumType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'realizationEpoch'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=GeodeticDatumType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'scope'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=GeodeticDatumType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'primeMeridian'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=GeodeticDatumType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'realizationEpoch'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=GeodeticDatumType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'primeMeridian'))),
    ])
    , 5 : pyxb.binding.content.ContentModelState(state=5, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=11, element_use=GeodeticDatumType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
    ])
    , 6 : pyxb.binding.content.ContentModelState(state=6, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=GeodeticDatumType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'primeMeridian'))),
    ])
    , 7 : pyxb.binding.content.ContentModelState(state=7, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=9, element_use=GeodeticDatumType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'domainOfValidity'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=GeodeticDatumType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'scope'))),
    ])
    , 8 : pyxb.binding.content.ContentModelState(state=8, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=10, element_use=GeodeticDatumType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'ellipsoid'))),
    ])
    , 9 : pyxb.binding.content.ContentModelState(state=9, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=GeodeticDatumType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'scope'))),
    ])
    , 10 : pyxb.binding.content.ContentModelState(state=10, is_final=True, transitions=[
    ])
    , 11 : pyxb.binding.content.ContentModelState(state=11, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=GeodeticDatumType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'remarks'))),
        pyxb.binding.content.ContentModelTransition(next_state=9, element_use=GeodeticDatumType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'domainOfValidity'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=GeodeticDatumType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'scope'))),
        pyxb.binding.content.ContentModelTransition(next_state=11, element_use=GeodeticDatumType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
    ])
})



TopoVolumePropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'TopoVolume'), TopoVolumeType, scope=TopoVolumePropertyType, documentation=u'gml:TopoVolume represents a homogeneous topological expression, a set of directed topologic solids, which if realised are isomorphic to a geometric solid primitive. The intended use of gml:TopoVolume is to appear within a solid feature to express the structural and geometric relationships of this solid feature to other features via the shared solid definitions.'))
TopoVolumePropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=TopoVolumePropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'TopoVolume'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



CurvePropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractCurve'), AbstractCurveType, abstract=pyxb.binding.datatypes.boolean(1), scope=CurvePropertyType, documentation=u'The AbstractCurve element is the abstract head of the substitution group for all (continuous) curve elements.'))
CurvePropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=CurvePropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractCurve'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



MD_ImageDescription_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'illuminationAzimuthAngle'), Real_PropertyType, scope=MD_ImageDescription_Type))

MD_ImageDescription_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'lensDistortionInformationAvailability'), Boolean_PropertyType, scope=MD_ImageDescription_Type))

MD_ImageDescription_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'imagingCondition'), MD_ImagingConditionCode_PropertyType, scope=MD_ImageDescription_Type))

MD_ImageDescription_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'cameraCalibrationInformationAvailability'), Boolean_PropertyType, scope=MD_ImageDescription_Type))

MD_ImageDescription_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'imageQualityCode'), MD_Identifier_PropertyType, scope=MD_ImageDescription_Type))

MD_ImageDescription_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'cloudCoverPercentage'), Real_PropertyType, scope=MD_ImageDescription_Type))

MD_ImageDescription_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'radiometricCalibrationDataAvailability'), Boolean_PropertyType, scope=MD_ImageDescription_Type))

MD_ImageDescription_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'compressionGenerationQuantity'), Integer_PropertyType, scope=MD_ImageDescription_Type))

MD_ImageDescription_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'processingLevelCode'), MD_Identifier_PropertyType, scope=MD_ImageDescription_Type))

MD_ImageDescription_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'triangulationIndicator'), Boolean_PropertyType, scope=MD_ImageDescription_Type))

MD_ImageDescription_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'filmDistortionInformationAvailability'), Boolean_PropertyType, scope=MD_ImageDescription_Type))

MD_ImageDescription_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'illuminationElevationAngle'), Real_PropertyType, scope=MD_ImageDescription_Type))
MD_ImageDescription_Type._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=MD_ImageDescription_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'attributeDescription'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=11, element_use=MD_ImageDescription_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'cameraCalibrationInformationAvailability'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=MD_ImageDescription_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'lensDistortionInformationAvailability'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=MD_ImageDescription_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'cloudCoverPercentage'))),
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=MD_ImageDescription_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'imagingCondition'))),
        pyxb.binding.content.ContentModelTransition(next_state=10, element_use=MD_ImageDescription_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'imageQualityCode'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=MD_ImageDescription_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'illuminationAzimuthAngle'))),
        pyxb.binding.content.ContentModelTransition(next_state=13, element_use=MD_ImageDescription_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'illuminationElevationAngle'))),
        pyxb.binding.content.ContentModelTransition(next_state=14, element_use=MD_ImageDescription_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'compressionGenerationQuantity'))),
        pyxb.binding.content.ContentModelTransition(next_state=12, element_use=MD_ImageDescription_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'processingLevelCode'))),
        pyxb.binding.content.ContentModelTransition(next_state=15, element_use=MD_ImageDescription_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'triangulationIndicator'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MD_ImageDescription_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'dimension'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=MD_ImageDescription_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'filmDistortionInformationAvailability'))),
        pyxb.binding.content.ContentModelTransition(next_state=9, element_use=MD_ImageDescription_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'radiometricCalibrationDataAvailability'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MD_ImageDescription_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'contentType'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=MD_ImageDescription_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'lensDistortionInformationAvailability'))),
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=MD_ImageDescription_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'imagingCondition'))),
        pyxb.binding.content.ContentModelTransition(next_state=10, element_use=MD_ImageDescription_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'imageQualityCode'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=MD_ImageDescription_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'cloudCoverPercentage'))),
        pyxb.binding.content.ContentModelTransition(next_state=11, element_use=MD_ImageDescription_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'cameraCalibrationInformationAvailability'))),
        pyxb.binding.content.ContentModelTransition(next_state=14, element_use=MD_ImageDescription_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'compressionGenerationQuantity'))),
        pyxb.binding.content.ContentModelTransition(next_state=12, element_use=MD_ImageDescription_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'processingLevelCode'))),
        pyxb.binding.content.ContentModelTransition(next_state=15, element_use=MD_ImageDescription_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'triangulationIndicator'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=MD_ImageDescription_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'filmDistortionInformationAvailability'))),
        pyxb.binding.content.ContentModelTransition(next_state=9, element_use=MD_ImageDescription_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'radiometricCalibrationDataAvailability'))),
    ])
    , 5 : pyxb.binding.content.ContentModelState(state=5, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=MD_ImageDescription_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'lensDistortionInformationAvailability'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=MD_ImageDescription_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'filmDistortionInformationAvailability'))),
        pyxb.binding.content.ContentModelTransition(next_state=11, element_use=MD_ImageDescription_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'cameraCalibrationInformationAvailability'))),
        pyxb.binding.content.ContentModelTransition(next_state=14, element_use=MD_ImageDescription_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'compressionGenerationQuantity'))),
        pyxb.binding.content.ContentModelTransition(next_state=12, element_use=MD_ImageDescription_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'processingLevelCode'))),
        pyxb.binding.content.ContentModelTransition(next_state=15, element_use=MD_ImageDescription_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'triangulationIndicator'))),
        pyxb.binding.content.ContentModelTransition(next_state=9, element_use=MD_ImageDescription_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'radiometricCalibrationDataAvailability'))),
    ])
    , 6 : pyxb.binding.content.ContentModelState(state=6, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=MD_ImageDescription_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'lensDistortionInformationAvailability'))),
    ])
    , 7 : pyxb.binding.content.ContentModelState(state=7, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=MD_ImageDescription_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'lensDistortionInformationAvailability'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=MD_ImageDescription_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'filmDistortionInformationAvailability'))),
        pyxb.binding.content.ContentModelTransition(next_state=10, element_use=MD_ImageDescription_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'imageQualityCode'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=MD_ImageDescription_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'cloudCoverPercentage'))),
        pyxb.binding.content.ContentModelTransition(next_state=11, element_use=MD_ImageDescription_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'cameraCalibrationInformationAvailability'))),
        pyxb.binding.content.ContentModelTransition(next_state=14, element_use=MD_ImageDescription_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'compressionGenerationQuantity'))),
        pyxb.binding.content.ContentModelTransition(next_state=12, element_use=MD_ImageDescription_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'processingLevelCode'))),
        pyxb.binding.content.ContentModelTransition(next_state=15, element_use=MD_ImageDescription_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'triangulationIndicator'))),
        pyxb.binding.content.ContentModelTransition(next_state=9, element_use=MD_ImageDescription_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'radiometricCalibrationDataAvailability'))),
    ])
    , 8 : pyxb.binding.content.ContentModelState(state=8, is_final=True, transitions=[
    ])
    , 9 : pyxb.binding.content.ContentModelState(state=9, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=MD_ImageDescription_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'filmDistortionInformationAvailability'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=MD_ImageDescription_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'lensDistortionInformationAvailability'))),
        pyxb.binding.content.ContentModelTransition(next_state=11, element_use=MD_ImageDescription_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'cameraCalibrationInformationAvailability'))),
    ])
    , 10 : pyxb.binding.content.ContentModelState(state=10, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=MD_ImageDescription_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'lensDistortionInformationAvailability'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=MD_ImageDescription_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'filmDistortionInformationAvailability'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=MD_ImageDescription_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'cloudCoverPercentage'))),
        pyxb.binding.content.ContentModelTransition(next_state=11, element_use=MD_ImageDescription_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'cameraCalibrationInformationAvailability'))),
        pyxb.binding.content.ContentModelTransition(next_state=14, element_use=MD_ImageDescription_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'compressionGenerationQuantity'))),
        pyxb.binding.content.ContentModelTransition(next_state=12, element_use=MD_ImageDescription_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'processingLevelCode'))),
        pyxb.binding.content.ContentModelTransition(next_state=15, element_use=MD_ImageDescription_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'triangulationIndicator'))),
        pyxb.binding.content.ContentModelTransition(next_state=9, element_use=MD_ImageDescription_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'radiometricCalibrationDataAvailability'))),
    ])
    , 11 : pyxb.binding.content.ContentModelState(state=11, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=MD_ImageDescription_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'filmDistortionInformationAvailability'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=MD_ImageDescription_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'lensDistortionInformationAvailability'))),
    ])
    , 12 : pyxb.binding.content.ContentModelState(state=12, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=MD_ImageDescription_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'lensDistortionInformationAvailability'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=MD_ImageDescription_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'filmDistortionInformationAvailability'))),
        pyxb.binding.content.ContentModelTransition(next_state=11, element_use=MD_ImageDescription_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'cameraCalibrationInformationAvailability'))),
        pyxb.binding.content.ContentModelTransition(next_state=14, element_use=MD_ImageDescription_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'compressionGenerationQuantity'))),
        pyxb.binding.content.ContentModelTransition(next_state=15, element_use=MD_ImageDescription_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'triangulationIndicator'))),
        pyxb.binding.content.ContentModelTransition(next_state=9, element_use=MD_ImageDescription_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'radiometricCalibrationDataAvailability'))),
    ])
    , 13 : pyxb.binding.content.ContentModelState(state=13, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=11, element_use=MD_ImageDescription_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'cameraCalibrationInformationAvailability'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=MD_ImageDescription_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'lensDistortionInformationAvailability'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=MD_ImageDescription_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'cloudCoverPercentage'))),
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=MD_ImageDescription_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'imagingCondition'))),
        pyxb.binding.content.ContentModelTransition(next_state=10, element_use=MD_ImageDescription_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'imageQualityCode'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=MD_ImageDescription_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'illuminationAzimuthAngle'))),
        pyxb.binding.content.ContentModelTransition(next_state=14, element_use=MD_ImageDescription_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'compressionGenerationQuantity'))),
        pyxb.binding.content.ContentModelTransition(next_state=12, element_use=MD_ImageDescription_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'processingLevelCode'))),
        pyxb.binding.content.ContentModelTransition(next_state=15, element_use=MD_ImageDescription_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'triangulationIndicator'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=MD_ImageDescription_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'filmDistortionInformationAvailability'))),
        pyxb.binding.content.ContentModelTransition(next_state=9, element_use=MD_ImageDescription_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'radiometricCalibrationDataAvailability'))),
    ])
    , 14 : pyxb.binding.content.ContentModelState(state=14, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=MD_ImageDescription_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'lensDistortionInformationAvailability'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=MD_ImageDescription_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'filmDistortionInformationAvailability'))),
        pyxb.binding.content.ContentModelTransition(next_state=11, element_use=MD_ImageDescription_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'cameraCalibrationInformationAvailability'))),
        pyxb.binding.content.ContentModelTransition(next_state=15, element_use=MD_ImageDescription_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'triangulationIndicator'))),
        pyxb.binding.content.ContentModelTransition(next_state=9, element_use=MD_ImageDescription_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'radiometricCalibrationDataAvailability'))),
    ])
    , 15 : pyxb.binding.content.ContentModelState(state=15, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=MD_ImageDescription_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'filmDistortionInformationAvailability'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=MD_ImageDescription_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'lensDistortionInformationAvailability'))),
        pyxb.binding.content.ContentModelTransition(next_state=9, element_use=MD_ImageDescription_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'radiometricCalibrationDataAvailability'))),
        pyxb.binding.content.ContentModelTransition(next_state=11, element_use=MD_ImageDescription_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'cameraCalibrationInformationAvailability'))),
    ])
})



TimeInstantPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'TimeInstant'), TimeInstantType, scope=TimeInstantPropertyType, documentation=u'gml:TimeInstant acts as a zero-dimensional geometric primitive that represents an identifiable position in time.'))
TimeInstantPropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=TimeInstantPropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'TimeInstant'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



DQ_QuantitativeResult_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'value'), Record_PropertyType, scope=DQ_QuantitativeResult_Type))

DQ_QuantitativeResult_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'valueType'), RecordType_PropertyType, scope=DQ_QuantitativeResult_Type))

DQ_QuantitativeResult_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'errorStatistic'), CharacterString_PropertyType, scope=DQ_QuantitativeResult_Type))

DQ_QuantitativeResult_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'valueUnit'), UnitOfMeasure_PropertyType, scope=DQ_QuantitativeResult_Type))
DQ_QuantitativeResult_Type._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DQ_QuantitativeResult_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'valueType'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=DQ_QuantitativeResult_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'valueUnit'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=DQ_QuantitativeResult_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'valueUnit'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=DQ_QuantitativeResult_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'errorStatistic'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=DQ_QuantitativeResult_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'value'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=DQ_QuantitativeResult_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'value'))),
    ])
    , 5 : pyxb.binding.content.ContentModelState(state=5, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=DQ_QuantitativeResult_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'value'))),
    ])
})



CartesianCSPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'CartesianCS'), CartesianCSType, scope=CartesianCSPropertyType, documentation=u'gml:CartesianCS is a 1-, 2-, or 3-dimensional coordinate system. In the 1-dimensional case, it contains a single straight coordinate axis. In the 2- and 3-dimensional cases gives the position of points relative to orthogonal straight axes. In the multi-dimensional case, all axes shall have the same length unit of measure. A CartesianCS shall have one, two, or three gml:axis property elements.'))
CartesianCSPropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=CartesianCSPropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'CartesianCS'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})


AbstractMetaDataType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
    ])
})


GenericMetaDataType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=1, term=pyxb.binding.content.Wildcard(process_contents=pyxb.binding.content.Wildcard.PC_lax, namespace_constraint=pyxb.binding.content.Wildcard.NC_any)),
    ])
})



PT_Locale_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'characterEncoding'), MD_CharacterSetCode_PropertyType, scope=PT_Locale_Type))

PT_Locale_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'languageCode'), LanguageCode_PropertyType, scope=PT_Locale_Type))

PT_Locale_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'country'), Country_PropertyType, scope=PT_Locale_Type))
PT_Locale_Type._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=PT_Locale_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'languageCode'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=PT_Locale_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'characterEncoding'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=PT_Locale_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'country'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=True, transitions=[
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=PT_Locale_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'characterEncoding'))),
    ])
})


CylindricalCSType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=CylindricalCSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'description'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=CylindricalCSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=CylindricalCSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=1, element_use=CylindricalCSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'metaDataProperty'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=CylindricalCSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=CylindricalCSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=CylindricalCSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=CylindricalCSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'axis'))),
    ])
    , 5 : pyxb.binding.content.ContentModelState(state=5, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=CylindricalCSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'axis'))),
    ])
    , 6 : pyxb.binding.content.ContentModelState(state=6, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=CylindricalCSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=CylindricalCSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'axis'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=CylindricalCSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'remarks'))),
    ])
})



AbstractGriddedSurfaceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'rows'), CTD_ANON_12, scope=AbstractGriddedSurfaceType))
AbstractGriddedSurfaceType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=AbstractGriddedSurfaceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'rows'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})


SphereType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=SphereType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'rows'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



RS_Identifier_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'RS_Identifier'), RS_Identifier_Type, scope=RS_Identifier_PropertyType))
RS_Identifier_PropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=RS_Identifier_PropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'RS_Identifier'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



MD_ClassificationCode_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_ClassificationCode'), CodeListValue_Type, scope=MD_ClassificationCode_PropertyType))
MD_ClassificationCode_PropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MD_ClassificationCode_PropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_ClassificationCode'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



MD_BrowseGraphic_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'fileType'), CharacterString_PropertyType, scope=MD_BrowseGraphic_Type))

MD_BrowseGraphic_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'fileName'), CharacterString_PropertyType, scope=MD_BrowseGraphic_Type))

MD_BrowseGraphic_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'fileDescription'), CharacterString_PropertyType, scope=MD_BrowseGraphic_Type))
MD_BrowseGraphic_Type._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MD_BrowseGraphic_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'fileName'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=MD_BrowseGraphic_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'fileDescription'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=MD_BrowseGraphic_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'fileType'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=MD_BrowseGraphic_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'fileType'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=True, transitions=[
    ])
})



MD_Identifier_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'code'), CharacterString_PropertyType, scope=MD_Identifier_Type))

MD_Identifier_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'authority'), CI_Citation_PropertyType, scope=MD_Identifier_Type))
MD_Identifier_Type._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MD_Identifier_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'authority'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=MD_Identifier_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'code'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=MD_Identifier_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'code'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=True, transitions=[
    ])
})



RS_Identifier_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'version'), CharacterString_PropertyType, scope=RS_Identifier_Type))

RS_Identifier_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'codeSpace'), CharacterString_PropertyType, scope=RS_Identifier_Type))
RS_Identifier_Type._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=RS_Identifier_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'authority'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=RS_Identifier_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'code'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=RS_Identifier_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'code'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=RS_Identifier_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'codeSpace'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=RS_Identifier_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'version'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=RS_Identifier_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'version'))),
    ])
    , 5 : pyxb.binding.content.ContentModelState(state=5, is_final=True, transitions=[
    ])
})



DQ_ConformanceResult_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'DQ_ConformanceResult'), DQ_ConformanceResult_Type, scope=DQ_ConformanceResult_PropertyType))
DQ_ConformanceResult_PropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DQ_ConformanceResult_PropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'DQ_ConformanceResult'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



MultiSolidType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'solidMember'), SolidPropertyType, scope=MultiSolidType, documentation=u'This property element either references a solid via the XLink-attributes or contains the solid element. A solid element is any element, which is substitutable for gml:AbstractSolid.'))

MultiSolidType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'solidMembers'), SolidArrayPropertyType, scope=MultiSolidType, documentation=u'This property element contains a list of solids. The order of the elements is significant and shall be preserved when processing the array.'))
MultiSolidType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=MultiSolidType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'solidMember'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MultiSolidType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=MultiSolidType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'solidMembers'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MultiSolidType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=MultiSolidType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=1, element_use=MultiSolidType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'metaDataProperty'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=MultiSolidType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'description'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=MultiSolidType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'solidMember'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=MultiSolidType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'solidMembers'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MultiSolidType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=MultiSolidType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'solidMember'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=MultiSolidType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'solidMembers'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=MultiSolidType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'solidMember'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MultiSolidType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=MultiSolidType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'solidMembers'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MultiSolidType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
    ])
    , 5 : pyxb.binding.content.ContentModelState(state=5, is_final=True, transitions=[
    ])
    , 6 : pyxb.binding.content.ContentModelState(state=6, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=MultiSolidType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'solidMember'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MultiSolidType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=MultiSolidType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'solidMembers'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MultiSolidType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=MultiSolidType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
    ])
})



ArcStringByBulgeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'pointRep'), PointPropertyType, scope=ArcStringByBulgeType, documentation=u''))

ArcStringByBulgeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'posList'), DirectPositionListType, scope=ArcStringByBulgeType))

ArcStringByBulgeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'coordinates'), CoordinatesType, scope=ArcStringByBulgeType, documentation=u''))

ArcStringByBulgeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'normal'), VectorType, scope=ArcStringByBulgeType))

ArcStringByBulgeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'bulge'), pyxb.binding.datatypes.double, scope=ArcStringByBulgeType))

ArcStringByBulgeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'pos'), DirectPositionType, scope=ArcStringByBulgeType))

ArcStringByBulgeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'pointProperty'), PointPropertyType, scope=ArcStringByBulgeType, documentation=u'This property element either references a point via the XLink-attributes or contains the point element. pointProperty is the predefined property which may be used by GML Application Schemas whenever a GML feature has a property with a value that is substitutable for Point.'))
ArcStringByBulgeType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=ArcStringByBulgeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'pointRep'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=ArcStringByBulgeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'coordinates'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=ArcStringByBulgeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'pos'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=ArcStringByBulgeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'posList'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=ArcStringByBulgeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'pointProperty'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=ArcStringByBulgeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'bulge'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=ArcStringByBulgeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'normal'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=ArcStringByBulgeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'normal'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=ArcStringByBulgeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'pointRep'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=ArcStringByBulgeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'pos'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=ArcStringByBulgeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'pointProperty'))),
    ])
    , 5 : pyxb.binding.content.ContentModelState(state=5, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=ArcStringByBulgeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'pointRep'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=ArcStringByBulgeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'bulge'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=ArcStringByBulgeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'pos'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=ArcStringByBulgeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'pointProperty'))),
    ])
    , 6 : pyxb.binding.content.ContentModelState(state=6, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=ArcStringByBulgeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'bulge'))),
    ])
})



DictionaryType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'indirectEntry'), IndirectEntryType, scope=DictionaryType, documentation=u''))

DictionaryType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'dictionaryEntry'), DictionaryEntryType, scope=DictionaryType, documentation=u'This property element contains or refers to the definitions which are members of a dictionary. \nThe content model follows the standard GML property pattern, so a gml:dictionaryEntry may either contain or refer to a single gml:Definition. Since gml:Dictionary is substitutable for gml:Definition, the content of an entry may itself be a lower level dictionary. \nNote that if the value is provided by reference, this definition does not carry a handle (gml:id) in this context, so does not allow external references to this specific definition in this context.  When used in this way the referenced definition will usually be in a dictionary in the same XML document.'))
DictionaryType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=DictionaryType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=1, element_use=DictionaryType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'metaDataProperty'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=DictionaryType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DictionaryType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'description'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=DictionaryType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=DictionaryType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=DictionaryType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'dictionaryEntry'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=DictionaryType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'indirectEntry'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=DictionaryType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
    ])
    , 5 : pyxb.binding.content.ContentModelState(state=5, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=DictionaryType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=DictionaryType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'dictionaryEntry'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=DictionaryType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'indirectEntry'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=DictionaryType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'remarks'))),
    ])
})



DirectedTopoSolidPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'TopoSolid'), TopoSolidType, scope=DirectedTopoSolidPropertyType, documentation=u'gml:TopoSolid represents the 3-dimensional topology primitive. \nThe topological boundary of a solid (gml:directedFace) consists of a set of directed faces.\nA solid may optionally be realised by a 3-dimensional geometric primitive (gml:solidProperty).'))
DirectedTopoSolidPropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DirectedTopoSolidPropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'TopoSolid'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})


ObliqueCartesianCSType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=ObliqueCartesianCSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'description'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=ObliqueCartesianCSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=ObliqueCartesianCSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=1, element_use=ObliqueCartesianCSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'metaDataProperty'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=ObliqueCartesianCSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=ObliqueCartesianCSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=ObliqueCartesianCSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=ObliqueCartesianCSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'axis'))),
    ])
    , 5 : pyxb.binding.content.ContentModelState(state=5, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=ObliqueCartesianCSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'axis'))),
    ])
    , 6 : pyxb.binding.content.ContentModelState(state=6, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=ObliqueCartesianCSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=ObliqueCartesianCSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'axis'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=ObliqueCartesianCSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'remarks'))),
    ])
})



DateTime_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gco, u'DateTime'), pyxb.binding.datatypes.dateTime, scope=DateTime_PropertyType))
DateTime_PropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DateTime_PropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gco, u'DateTime'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



GeometricPrimitivePropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractGeometricPrimitive'), AbstractGeometricPrimitiveType, abstract=pyxb.binding.datatypes.boolean(1), scope=GeometricPrimitivePropertyType, documentation=u'The AbstractGeometricPrimitive element is the abstract head of the substitution group for all (pre- and user-defined) geometric primitives.'))
GeometricPrimitivePropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=GeometricPrimitivePropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractGeometricPrimitive'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



CoordinateOperationPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractCoordinateOperation'), AbstractCoordinateOperationType, abstract=pyxb.binding.datatypes.boolean(1), scope=CoordinateOperationPropertyType, documentation=u'gml:AbstractCoordinateOperation is a mathematical operation on coordinates that transforms or converts coordinates to another coordinate reference system. Many but not all coordinate operations (from CRS A to CRS B) also uniquely define the inverse operation (from CRS B to CRS A). In some cases, the operation method algorithm for the inverse operation is the same as for the forward algorithm, but the signs of some operation parameter values shall be reversed. In other cases, different algorithms are required for the forward and inverse operations, but the same operation parameter values are used. If (some) entirely different parameter values are needed, a different coordinate operation shall be defined.\nThe optional coordinateOperationAccuracy property elements provide estimates of the impact of this coordinate operation on point position accuracy.'))
CoordinateOperationPropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=CoordinateOperationPropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractCoordinateOperation'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



DerivedCRSType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'baseCRS'), SingleCRSPropertyType, scope=DerivedCRSType, documentation=u'gml:baseCRS is an association role to the coordinate reference system used by this derived CRS.'))

DerivedCRSType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'derivedCRSType'), CodeWithAuthorityType, scope=DerivedCRSType, documentation=u'The gml:derivedCRSType property describes the type of a derived coordinate reference system. The required codeSpace attribute shall reference a source of information specifying the values and meanings of all the allowed string values for this property.'))

DerivedCRSType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'coordinateSystem'), CoordinateSystemPropertyType, scope=DerivedCRSType, documentation=u'An association role to the coordinate system used by this CRS.'))
DerivedCRSType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=1, element_use=DerivedCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'metaDataProperty'))),
        pyxb.binding.content.ContentModelTransition(next_state=10, element_use=DerivedCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=DerivedCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DerivedCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'description'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=10, element_use=DerivedCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=DerivedCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=DerivedCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'baseCRS'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=10, element_use=DerivedCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
    ])
    , 5 : pyxb.binding.content.ContentModelState(state=5, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=DerivedCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'derivedCRSType'))),
    ])
    , 6 : pyxb.binding.content.ContentModelState(state=6, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=DerivedCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'coordinateSystem'))),
    ])
    , 7 : pyxb.binding.content.ContentModelState(state=7, is_final=True, transitions=[
    ])
    , 8 : pyxb.binding.content.ContentModelState(state=8, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=DerivedCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'conversion'))),
        pyxb.binding.content.ContentModelTransition(next_state=9, element_use=DerivedCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'domainOfValidity'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=DerivedCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'scope'))),
    ])
    , 9 : pyxb.binding.content.ContentModelState(state=9, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=9, element_use=DerivedCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'domainOfValidity'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=DerivedCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'scope'))),
    ])
    , 10 : pyxb.binding.content.ContentModelState(state=10, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=10, element_use=DerivedCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=9, element_use=DerivedCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'domainOfValidity'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=DerivedCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'scope'))),
        pyxb.binding.content.ContentModelTransition(next_state=9, element_use=DerivedCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'remarks'))),
    ])
})



LI_ProcessStep_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'LI_ProcessStep'), LI_ProcessStep_Type, scope=LI_ProcessStep_PropertyType))
LI_ProcessStep_PropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=LI_ProcessStep_PropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'LI_ProcessStep'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



LI_Lineage_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'source'), LI_Source_PropertyType, scope=LI_Lineage_Type))

LI_Lineage_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'statement'), CharacterString_PropertyType, scope=LI_Lineage_Type))

LI_Lineage_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'processStep'), LI_ProcessStep_PropertyType, scope=LI_Lineage_Type))
LI_Lineage_Type._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=LI_Lineage_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'statement'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=LI_Lineage_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'processStep'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=LI_Lineage_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'source'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=LI_Lineage_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'processStep'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=LI_Lineage_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'source'))),
    ])
})



PassThroughOperationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'modifiedCoordinate'), pyxb.binding.datatypes.positiveInteger, scope=PassThroughOperationType, documentation=u'gml:modifiedCoordinate is a positive integer defining a position in a coordinate tuple.'))

PassThroughOperationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'coordOperation'), CoordinateOperationPropertyType, scope=PassThroughOperationType, documentation=u'gml:coordOperation is an association role to a coordinate operation.'))
PassThroughOperationType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=1, element_use=PassThroughOperationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'metaDataProperty'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=PassThroughOperationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=PassThroughOperationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=PassThroughOperationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'description'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=PassThroughOperationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=9, element_use=PassThroughOperationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'scope'))),
        pyxb.binding.content.ContentModelTransition(next_state=10, element_use=PassThroughOperationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'domainOfValidity'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=PassThroughOperationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'remarks'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=PassThroughOperationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=9, element_use=PassThroughOperationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'scope'))),
        pyxb.binding.content.ContentModelTransition(next_state=10, element_use=PassThroughOperationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'domainOfValidity'))),
    ])
    , 5 : pyxb.binding.content.ContentModelState(state=5, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=PassThroughOperationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=PassThroughOperationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
    ])
    , 6 : pyxb.binding.content.ContentModelState(state=6, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=PassThroughOperationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'targetCRS'))),
        pyxb.binding.content.ContentModelTransition(next_state=11, element_use=PassThroughOperationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'modifiedCoordinate'))),
    ])
    , 7 : pyxb.binding.content.ContentModelState(state=7, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=11, element_use=PassThroughOperationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'modifiedCoordinate'))),
    ])
    , 8 : pyxb.binding.content.ContentModelState(state=8, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=PassThroughOperationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'sourceCRS'))),
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=PassThroughOperationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'targetCRS'))),
        pyxb.binding.content.ContentModelTransition(next_state=11, element_use=PassThroughOperationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'modifiedCoordinate'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=PassThroughOperationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'coordinateOperationAccuracy'))),
    ])
    , 9 : pyxb.binding.content.ContentModelState(state=9, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=PassThroughOperationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'sourceCRS'))),
        pyxb.binding.content.ContentModelTransition(next_state=9, element_use=PassThroughOperationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'scope'))),
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=PassThroughOperationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'targetCRS'))),
        pyxb.binding.content.ContentModelTransition(next_state=11, element_use=PassThroughOperationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'modifiedCoordinate'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=PassThroughOperationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'operationVersion'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=PassThroughOperationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'coordinateOperationAccuracy'))),
    ])
    , 10 : pyxb.binding.content.ContentModelState(state=10, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=9, element_use=PassThroughOperationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'scope'))),
    ])
    , 11 : pyxb.binding.content.ContentModelState(state=11, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=11, element_use=PassThroughOperationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'modifiedCoordinate'))),
        pyxb.binding.content.ContentModelTransition(next_state=12, element_use=PassThroughOperationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'coordOperation'))),
    ])
    , 12 : pyxb.binding.content.ContentModelState(state=12, is_final=True, transitions=[
    ])
})



CurveSegmentArrayPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractCurveSegment'), AbstractCurveSegmentType, abstract=pyxb.binding.datatypes.boolean(1), scope=CurveSegmentArrayPropertyType, documentation=u'A curve segment defines a homogeneous segment of a curve.\nThe attributes numDerivativesAtStart, numDerivativesAtEnd and numDerivativesInterior specify the type of continuity as specified in ISO 19107:2003, 6.4.9.3.\nThe AbstractCurveSegment element is the abstract head of the substituition group for all curve segment elements, i.e. continuous segments of the same interpolation mechanism.\nAll curve segments shall have an attribute interpolation with type gml:CurveInterpolationType specifying the curve interpolation mechanism used for this segment. This mechanism uses the control points and control parameters to determine the position of this curve segment.'))
CurveSegmentArrayPropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=1, element_use=CurveSegmentArrayPropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractCurveSegment'))),
    ])
})



PT_Locale_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'PT_Locale'), PT_Locale_Type, scope=PT_Locale_PropertyType))
PT_Locale_PropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=PT_Locale_PropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'PT_Locale'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



LI_Source_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'LI_Source'), LI_Source_Type, scope=LI_Source_PropertyType))
LI_Source_PropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=LI_Source_PropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'LI_Source'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



Multiplicity_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gco, u'range'), MultiplicityRange_PropertyType, scope=Multiplicity_Type))
Multiplicity_Type._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=Multiplicity_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gco, u'range'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=Multiplicity_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gco, u'range'))),
    ])
})



VerticalCRSType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'verticalDatum'), VerticalDatumPropertyType, scope=VerticalCRSType, documentation=u'gml:verticalDatum is an association role to the vertical datum used by this CRS.'))

VerticalCRSType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'verticalCS'), VerticalCSPropertyType, scope=VerticalCRSType, documentation=u'gml:verticalCS is an association role to the vertical coordinate system used by this CRS.'))
VerticalCRSType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=VerticalCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'description'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=VerticalCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=VerticalCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=1, element_use=VerticalCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'metaDataProperty'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=VerticalCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=VerticalCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=VerticalCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'verticalDatum'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=VerticalCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
    ])
    , 5 : pyxb.binding.content.ContentModelState(state=5, is_final=True, transitions=[
    ])
    , 6 : pyxb.binding.content.ContentModelState(state=6, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=VerticalCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'domainOfValidity'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=VerticalCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'verticalCS'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=VerticalCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'scope'))),
    ])
    , 7 : pyxb.binding.content.ContentModelState(state=7, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=VerticalCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'domainOfValidity'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=VerticalCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'scope'))),
    ])
    , 8 : pyxb.binding.content.ContentModelState(state=8, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=VerticalCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=VerticalCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'domainOfValidity'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=VerticalCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'scope'))),
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=VerticalCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'remarks'))),
    ])
})



IndirectEntryType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'DefinitionProxy'), DefinitionProxyType, scope=IndirectEntryType, documentation=u''))
IndirectEntryType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=IndirectEntryType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'DefinitionProxy'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})


AbstractGeometricPrimitiveType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=AbstractGeometricPrimitiveType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=AbstractGeometricPrimitiveType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=AbstractGeometricPrimitiveType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=1, element_use=AbstractGeometricPrimitiveType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'metaDataProperty'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=AbstractGeometricPrimitiveType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'description'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=AbstractGeometricPrimitiveType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=AbstractGeometricPrimitiveType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=AbstractGeometricPrimitiveType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=AbstractGeometricPrimitiveType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=AbstractGeometricPrimitiveType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=AbstractGeometricPrimitiveType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
    ])
})


AbstractSurfaceType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=AbstractSurfaceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=AbstractSurfaceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=AbstractSurfaceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=1, element_use=AbstractSurfaceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'metaDataProperty'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=AbstractSurfaceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'description'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=AbstractSurfaceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=AbstractSurfaceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=AbstractSurfaceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=AbstractSurfaceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=AbstractSurfaceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=AbstractSurfaceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
    ])
})



OrientableSurfaceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'baseSurface'), SurfacePropertyType, scope=OrientableSurfaceType, documentation=u'The property baseSurface references or contains the base surface. The property baseSurface either references the base surface via the XLink-attributes or contains the surface element. A surface element is any element which is substitutable for gml:AbstractSurface. The base surface has positive orientation.'))
OrientableSurfaceType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=OrientableSurfaceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=OrientableSurfaceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=OrientableSurfaceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=1, element_use=OrientableSurfaceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'metaDataProperty'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=OrientableSurfaceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'baseSurface'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=OrientableSurfaceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'description'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=OrientableSurfaceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=OrientableSurfaceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=OrientableSurfaceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'baseSurface'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=OrientableSurfaceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=OrientableSurfaceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=OrientableSurfaceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=OrientableSurfaceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'baseSurface'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=True, transitions=[
    ])
    , 5 : pyxb.binding.content.ContentModelState(state=5, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=OrientableSurfaceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=OrientableSurfaceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'baseSurface'))),
    ])
})


AbstractDQ_ThematicAccuracy_Type._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=AbstractDQ_ThematicAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'measureDescription'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=AbstractDQ_ThematicAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationMethodType'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=AbstractDQ_ThematicAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationProcedure'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=AbstractDQ_ThematicAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationMethodDescription'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=AbstractDQ_ThematicAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'dateTime'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=AbstractDQ_ThematicAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'result'))),
        pyxb.binding.content.ContentModelTransition(next_state=1, element_use=AbstractDQ_ThematicAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'nameOfMeasure'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=AbstractDQ_ThematicAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'measureIdentification'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=AbstractDQ_ThematicAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'dateTime'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=AbstractDQ_ThematicAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'result'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=AbstractDQ_ThematicAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationMethodDescription'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=AbstractDQ_ThematicAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationProcedure'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=AbstractDQ_ThematicAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'dateTime'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=AbstractDQ_ThematicAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'result'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=AbstractDQ_ThematicAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'measureDescription'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=AbstractDQ_ThematicAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationMethodType'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=AbstractDQ_ThematicAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationProcedure'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=AbstractDQ_ThematicAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationMethodDescription'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=AbstractDQ_ThematicAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'dateTime'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=AbstractDQ_ThematicAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'result'))),
    ])
    , 5 : pyxb.binding.content.ContentModelState(state=5, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=AbstractDQ_ThematicAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationProcedure'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=AbstractDQ_ThematicAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'dateTime'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=AbstractDQ_ThematicAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'result'))),
    ])
    , 6 : pyxb.binding.content.ContentModelState(state=6, is_final=True, transitions=[
    ])
    , 7 : pyxb.binding.content.ContentModelState(state=7, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=AbstractDQ_ThematicAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationMethodType'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=AbstractDQ_ThematicAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationMethodDescription'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=AbstractDQ_ThematicAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'dateTime'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=AbstractDQ_ThematicAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationProcedure'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=AbstractDQ_ThematicAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'result'))),
    ])
    , 8 : pyxb.binding.content.ContentModelState(state=8, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=AbstractDQ_ThematicAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'result'))),
    ])
})



PT_LocaleContainer_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'localisedString'), LocalisedCharacterString_PropertyType, scope=PT_LocaleContainer_Type))

PT_LocaleContainer_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'description'), CharacterString_PropertyType, scope=PT_LocaleContainer_Type))

PT_LocaleContainer_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'locale'), PT_Locale_PropertyType, scope=PT_LocaleContainer_Type))

PT_LocaleContainer_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'responsibleParty'), CI_ResponsibleParty_PropertyType, scope=PT_LocaleContainer_Type))

PT_LocaleContainer_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'date'), CI_Date_PropertyType, scope=PT_LocaleContainer_Type))
PT_LocaleContainer_Type._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=PT_LocaleContainer_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'description'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=PT_LocaleContainer_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'locale'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=PT_LocaleContainer_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'date'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=PT_LocaleContainer_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'date'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=PT_LocaleContainer_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'responsibleParty'))),
    ])
    , 5 : pyxb.binding.content.ContentModelState(state=5, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=PT_LocaleContainer_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'responsibleParty'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=PT_LocaleContainer_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'localisedString'))),
    ])
    , 6 : pyxb.binding.content.ContentModelState(state=6, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=PT_LocaleContainer_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'localisedString'))),
    ])
})



MD_MaintenanceFrequencyCode_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_MaintenanceFrequencyCode'), CodeListValue_Type, scope=MD_MaintenanceFrequencyCode_PropertyType))
MD_MaintenanceFrequencyCode_PropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MD_MaintenanceFrequencyCode_PropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_MaintenanceFrequencyCode'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



ValuePropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractValue'), pyxb.binding.datatypes.anyType, abstract=pyxb.binding.datatypes.boolean(1), scope=ValuePropertyType, documentation=u'gml:AbstractValue is an abstract element which acts as the head of a substitution group which contains gml:AbstractScalarValue, gml:AbstractScalarValueList, gml:CompositeValue and gml:ValueExtent, and (transitively) the elements in their substitution groups.\nThese elements may be used in an application schema as variables, so that in an XML instance document any member of its substitution group may occur.'))

ValuePropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractGeometry'), AbstractGeometryType, abstract=pyxb.binding.datatypes.boolean(1), scope=ValuePropertyType, documentation=u'The AbstractGeometry element is the abstract head of the substitution group for all geometry elements of GML. This includes pre-defined and user-defined geometry elements. Any geometry element shall be a direct or indirect extension/restriction of AbstractGeometryType and shall be directly or indirectly in the substitution group of AbstractGeometry.'))

ValuePropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractTimeObject'), AbstractTimeObjectType, abstract=pyxb.binding.datatypes.boolean(1), scope=ValuePropertyType, documentation=u'gml:AbstractTimeObject acts as the head of a substitution group for all temporal primitives and complexes.'))

ValuePropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'Null'), NilReasonType, scope=ValuePropertyType, documentation=u''))
ValuePropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=ValuePropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractValue'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=ValuePropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractGeometry'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=ValuePropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractTimeObject'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=ValuePropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'Null'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



PointType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'pos'), DirectPositionType, scope=PointType))

PointType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'coordinates'), CoordinatesType, scope=PointType, documentation=u''))
PointType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=PointType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=PointType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=PointType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=PointType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'pos'))),
        pyxb.binding.content.ContentModelTransition(next_state=1, element_use=PointType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'metaDataProperty'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=PointType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'coordinates'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=PointType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'description'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=PointType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=PointType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=PointType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'pos'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=PointType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'coordinates'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=PointType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=PointType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'pos'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=PointType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'coordinates'))),
    ])
    , 5 : pyxb.binding.content.ContentModelState(state=5, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=PointType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=PointType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=PointType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=PointType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'coordinates'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=PointType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'pos'))),
    ])
})



GridLimitsType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'GridEnvelope'), GridEnvelopeType, scope=GridLimitsType))
GridLimitsType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=GridLimitsType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'GridEnvelope'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



SurfaceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'patches'), SurfacePatchArrayPropertyType, scope=SurfaceType, documentation=u'The patches property element contains the sequence of surface patches. The order of the elements is significant and shall be preserved when processing the array.'))
SurfaceType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=SurfaceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=SurfaceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'patches'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=SurfaceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=SurfaceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=1, element_use=SurfaceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'metaDataProperty'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=SurfaceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'description'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=SurfaceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=SurfaceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'patches'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=SurfaceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=True, transitions=[
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=SurfaceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=SurfaceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=SurfaceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'patches'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=SurfaceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
    ])
    , 5 : pyxb.binding.content.ContentModelState(state=5, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=SurfaceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'patches'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=SurfaceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
    ])
})



ArcByCenterPointType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'pos'), DirectPositionType, scope=ArcByCenterPointType))

ArcByCenterPointType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'pointRep'), PointPropertyType, scope=ArcByCenterPointType, documentation=u''))

ArcByCenterPointType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'posList'), DirectPositionListType, scope=ArcByCenterPointType))

ArcByCenterPointType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'radius'), LengthType, scope=ArcByCenterPointType))

ArcByCenterPointType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'startAngle'), AngleType, scope=ArcByCenterPointType))

ArcByCenterPointType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'coordinates'), CoordinatesType, scope=ArcByCenterPointType, documentation=u''))

ArcByCenterPointType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'endAngle'), AngleType, scope=ArcByCenterPointType))

ArcByCenterPointType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'pointProperty'), PointPropertyType, scope=ArcByCenterPointType, documentation=u'This property element either references a point via the XLink-attributes or contains the point element. pointProperty is the predefined property which may be used by GML Application Schemas whenever a GML feature has a property with a value that is substitutable for Point.'))
ArcByCenterPointType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=ArcByCenterPointType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'posList'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=ArcByCenterPointType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'coordinates'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=ArcByCenterPointType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'pointRep'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=ArcByCenterPointType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'pointProperty'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=ArcByCenterPointType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'pos'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=ArcByCenterPointType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'endAngle'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=True, transitions=[
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=ArcByCenterPointType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'radius'))),
    ])
    , 5 : pyxb.binding.content.ContentModelState(state=5, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=ArcByCenterPointType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'startAngle'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=ArcByCenterPointType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'endAngle'))),
    ])
})


CircleByCenterPointType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=CircleByCenterPointType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'pos'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=CircleByCenterPointType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'coordinates'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=CircleByCenterPointType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'pointRep'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=CircleByCenterPointType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'posList'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=CircleByCenterPointType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'pointProperty'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=CircleByCenterPointType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'radius'))),
    ])
})



EX_BoundingPolygon_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'EX_BoundingPolygon'), EX_BoundingPolygon_Type, scope=EX_BoundingPolygon_PropertyType))
EX_BoundingPolygon_PropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=EX_BoundingPolygon_PropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'EX_BoundingPolygon'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



LinearRingType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'pointRep'), PointPropertyType, scope=LinearRingType, documentation=u''))

LinearRingType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'pointProperty'), PointPropertyType, scope=LinearRingType, documentation=u'This property element either references a point via the XLink-attributes or contains the point element. pointProperty is the predefined property which may be used by GML Application Schemas whenever a GML feature has a property with a value that is substitutable for Point.'))

LinearRingType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'posList'), DirectPositionListType, scope=LinearRingType))

LinearRingType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'pos'), DirectPositionType, scope=LinearRingType))

LinearRingType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'coordinates'), CoordinatesType, scope=LinearRingType, documentation=u''))
LinearRingType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=LinearRingType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'posList'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=LinearRingType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'pos'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=LinearRingType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'pointRep'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=LinearRingType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'coordinates'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=LinearRingType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'pointProperty'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=LinearRingType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'pos'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=LinearRingType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'pointRep'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=LinearRingType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'pointProperty'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=LinearRingType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'pos'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=LinearRingType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'pointRep'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=LinearRingType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'pointProperty'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=LinearRingType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'pos'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=LinearRingType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'pointRep'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=LinearRingType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'pointProperty'))),
    ])
    , 5 : pyxb.binding.content.ContentModelState(state=5, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=LinearRingType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'pos'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=LinearRingType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'pointRep'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=LinearRingType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'pointProperty'))),
    ])
    , 6 : pyxb.binding.content.ContentModelState(state=6, is_final=True, transitions=[
    ])
})



MD_Format_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_Format'), MD_Format_Type, scope=MD_Format_PropertyType))
MD_Format_PropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MD_Format_PropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_Format'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



DS_Sensor_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'DS_Sensor'), DS_Sensor_Type, scope=DS_Sensor_PropertyType))
DS_Sensor_PropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DS_Sensor_PropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'DS_Sensor'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})


DQ_AbsoluteExternalPositionalAccuracy_Type._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=DQ_AbsoluteExternalPositionalAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'measureDescription'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=DQ_AbsoluteExternalPositionalAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationMethodType'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DQ_AbsoluteExternalPositionalAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationProcedure'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=DQ_AbsoluteExternalPositionalAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationMethodDescription'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DQ_AbsoluteExternalPositionalAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'dateTime'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=DQ_AbsoluteExternalPositionalAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'result'))),
        pyxb.binding.content.ContentModelTransition(next_state=1, element_use=DQ_AbsoluteExternalPositionalAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'nameOfMeasure'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=DQ_AbsoluteExternalPositionalAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'measureIdentification'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DQ_AbsoluteExternalPositionalAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'dateTime'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=DQ_AbsoluteExternalPositionalAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'result'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=DQ_AbsoluteExternalPositionalAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationMethodDescription'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DQ_AbsoluteExternalPositionalAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationProcedure'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DQ_AbsoluteExternalPositionalAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'dateTime'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=DQ_AbsoluteExternalPositionalAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'result'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=DQ_AbsoluteExternalPositionalAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'measureDescription'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=DQ_AbsoluteExternalPositionalAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationMethodType'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DQ_AbsoluteExternalPositionalAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationProcedure'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=DQ_AbsoluteExternalPositionalAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationMethodDescription'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DQ_AbsoluteExternalPositionalAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'dateTime'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=DQ_AbsoluteExternalPositionalAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'result'))),
    ])
    , 5 : pyxb.binding.content.ContentModelState(state=5, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DQ_AbsoluteExternalPositionalAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationProcedure'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DQ_AbsoluteExternalPositionalAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'dateTime'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=DQ_AbsoluteExternalPositionalAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'result'))),
    ])
    , 6 : pyxb.binding.content.ContentModelState(state=6, is_final=True, transitions=[
    ])
    , 7 : pyxb.binding.content.ContentModelState(state=7, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=DQ_AbsoluteExternalPositionalAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationMethodType'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=DQ_AbsoluteExternalPositionalAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationMethodDescription'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DQ_AbsoluteExternalPositionalAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'dateTime'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DQ_AbsoluteExternalPositionalAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationProcedure'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=DQ_AbsoluteExternalPositionalAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'result'))),
    ])
    , 8 : pyxb.binding.content.ContentModelState(state=8, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=DQ_AbsoluteExternalPositionalAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'result'))),
    ])
})



GeographicCRSType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'usesEllipsoidalCS'), EllipsoidalCSPropertyType, scope=GeographicCRSType, documentation=u''))

GeographicCRSType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'usesGeodeticDatum'), GeodeticDatumPropertyType, scope=GeographicCRSType, documentation=u''))
GeographicCRSType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=GeographicCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'description'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=GeographicCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=GeographicCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=1, element_use=GeographicCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'metaDataProperty'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=GeographicCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=GeographicCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=GeographicCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'usesGeodeticDatum'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=GeographicCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
    ])
    , 5 : pyxb.binding.content.ContentModelState(state=5, is_final=True, transitions=[
    ])
    , 6 : pyxb.binding.content.ContentModelState(state=6, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=GeographicCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'usesEllipsoidalCS'))),
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=GeographicCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'domainOfValidity'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=GeographicCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'scope'))),
    ])
    , 7 : pyxb.binding.content.ContentModelState(state=7, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=GeographicCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'domainOfValidity'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=GeographicCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'scope'))),
    ])
    , 8 : pyxb.binding.content.ContentModelState(state=8, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=GeographicCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=GeographicCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'domainOfValidity'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=GeographicCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'scope'))),
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=GeographicCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'remarks'))),
    ])
})



DirectedFacePropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'Face'), FaceType, scope=DirectedFacePropertyType, documentation=u'gml:Face represents the 2-dimensional topology primitive.\nThe topological boundary of a face (gml:directedEdge) consists of a sequence of directed edges. If provided, the aggregationType attribute shall have the value "sequence".\nThe optional coboundary of a face (gml:directedTopoSolid) is a pair of directed solids which are bounded by this face. A positively directed solid corresponds to a solid which lies in the direction of the negatively directed normal to the face in any geometric realisation. \nA face may optionally be realised by a 2-dimensional geometric primitive (gml:surfaceProperty).'))
DirectedFacePropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DirectedFacePropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'Face'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})


AbstractCurveType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=AbstractCurveType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=AbstractCurveType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=AbstractCurveType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=1, element_use=AbstractCurveType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'metaDataProperty'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=AbstractCurveType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'description'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=AbstractCurveType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=AbstractCurveType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=AbstractCurveType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=AbstractCurveType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=AbstractCurveType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=AbstractCurveType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
    ])
})



CompositeCurveType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'curveMember'), CurvePropertyType, scope=CompositeCurveType))
CompositeCurveType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=CompositeCurveType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=CompositeCurveType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=CompositeCurveType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=1, element_use=CompositeCurveType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'metaDataProperty'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=CompositeCurveType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'curveMember'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=CompositeCurveType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'description'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=CompositeCurveType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=CompositeCurveType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'curveMember'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=CompositeCurveType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=CompositeCurveType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'curveMember'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=CompositeCurveType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=CompositeCurveType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=CompositeCurveType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'curveMember'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=CompositeCurveType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
    ])
    , 5 : pyxb.binding.content.ContentModelState(state=5, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=CompositeCurveType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'curveMember'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=CompositeCurveType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
    ])
})


UserDefinedCSType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=UserDefinedCSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'description'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=UserDefinedCSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=UserDefinedCSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=1, element_use=UserDefinedCSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'metaDataProperty'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=UserDefinedCSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=UserDefinedCSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=UserDefinedCSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=UserDefinedCSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'axis'))),
    ])
    , 5 : pyxb.binding.content.ContentModelState(state=5, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=UserDefinedCSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'axis'))),
    ])
    , 6 : pyxb.binding.content.ContentModelState(state=6, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=UserDefinedCSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=UserDefinedCSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'axis'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=UserDefinedCSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'remarks'))),
    ])
})



MD_ContentInformation_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'AbstractMD_ContentInformation'), AbstractMD_ContentInformation_Type, abstract=pyxb.binding.datatypes.boolean(1), scope=MD_ContentInformation_PropertyType))
MD_ContentInformation_PropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MD_ContentInformation_PropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'AbstractMD_ContentInformation'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



DQ_ThematicClassificationCorrectness_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'DQ_ThematicClassificationCorrectness'), DQ_ThematicClassificationCorrectness_Type, scope=DQ_ThematicClassificationCorrectness_PropertyType))
DQ_ThematicClassificationCorrectness_PropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DQ_ThematicClassificationCorrectness_PropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'DQ_ThematicClassificationCorrectness'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



GeneralConversionPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractGeneralConversion'), AbstractGeneralConversionType, abstract=pyxb.binding.datatypes.boolean(1), scope=GeneralConversionPropertyType, documentation=u'gm:AbstractGeneralConversion is an abstract operation on coordinates that does not include any change of datum. The best-known example of a coordinate conversion is a map projection. The parameters describing coordinate conversions are defined rather than empirically derived. Note that some conversions have no parameters. The operationVersion, sourceCRS, and targetCRS elements are omitted in a coordinate conversion.\nThis abstract complex type is expected to be extended for well-known operation methods with many Conversion instances, in GML Application Schemas that define operation-method-specialized element names and contents. This conversion uses an operation method, usually with associated parameter values. However, operation methods and parameter values are directly associated with concrete subtypes, not with this abstract type. All concrete types derived from this type shall extend this type to include a "usesMethod" element that references the "OperationMethod" element. Similarly, all concrete types derived from this type shall extend this type to include zero or more elements each named "uses...Value" that each use the type of an element substitutable for the "AbstractGeneralParameterValue" element.'))
GeneralConversionPropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=GeneralConversionPropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractGeneralConversion'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



MD_Metadata_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_Metadata'), MD_Metadata_Type, scope=MD_Metadata_PropertyType))
MD_Metadata_PropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MD_Metadata_PropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_Metadata'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



MD_Distribution_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'transferOptions'), MD_DigitalTransferOptions_PropertyType, scope=MD_Distribution_Type))

MD_Distribution_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'distributionFormat'), MD_Format_PropertyType, scope=MD_Distribution_Type))

MD_Distribution_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'distributor'), MD_Distributor_PropertyType, scope=MD_Distribution_Type))
MD_Distribution_Type._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=1, element_use=MD_Distribution_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'distributionFormat'))),
        pyxb.binding.content.ContentModelTransition(next_state=1, element_use=MD_Distribution_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'transferOptions'))),
        pyxb.binding.content.ContentModelTransition(next_state=1, element_use=MD_Distribution_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'distributor'))),
    ])
})



MD_Dimension_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'resolution'), Measure_PropertyType, scope=MD_Dimension_Type))

MD_Dimension_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'dimensionName'), MD_DimensionNameTypeCode_PropertyType, scope=MD_Dimension_Type))

MD_Dimension_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'dimensionSize'), Integer_PropertyType, scope=MD_Dimension_Type))
MD_Dimension_Type._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MD_Dimension_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'dimensionName'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=MD_Dimension_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'dimensionSize'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=MD_Dimension_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'resolution'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=True, transitions=[
    ])
})



MD_Medium_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_Medium'), MD_Medium_Type, scope=MD_Medium_PropertyType))
MD_Medium_PropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MD_Medium_PropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_Medium'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



GeometryPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractGeometry'), AbstractGeometryType, abstract=pyxb.binding.datatypes.boolean(1), scope=GeometryPropertyType, documentation=u'The AbstractGeometry element is the abstract head of the substitution group for all geometry elements of GML. This includes pre-defined and user-defined geometry elements. Any geometry element shall be a direct or indirect extension/restriction of AbstractGeometryType and shall be directly or indirectly in the substitution group of AbstractGeometry.'))
GeometryPropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=GeometryPropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractGeometry'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



MultiplicityRange_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gco, u'upper'), UnlimitedInteger_PropertyType, scope=MultiplicityRange_Type))

MultiplicityRange_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gco, u'lower'), Integer_PropertyType, scope=MultiplicityRange_Type))
MultiplicityRange_Type._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MultiplicityRange_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gco, u'lower'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=MultiplicityRange_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gco, u'upper'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=True, transitions=[
    ])
})


ResultType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, term=pyxb.binding.content.Wildcard(process_contents=pyxb.binding.content.Wildcard.PC_strict, namespace_constraint=pyxb.binding.content.Wildcard.NC_any)),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



ArrayType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'members'), ArrayAssociationType, scope=ArrayType, documentation=u''))
ArrayType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=ArrayType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'members'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=ArrayType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=ArrayType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=ArrayType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=1, element_use=ArrayType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'metaDataProperty'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=ArrayType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'description'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=ArrayType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'members'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=ArrayType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=ArrayType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'members'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=ArrayType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=ArrayType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=True, transitions=[
    ])
    , 5 : pyxb.binding.content.ContentModelState(state=5, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=ArrayType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=ArrayType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'members'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=ArrayType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=ArrayType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
    ])
})



AbstractGeneralOperationParameterPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractGeneralOperationParameter'), AbstractGeneralOperationParameterType, abstract=pyxb.binding.datatypes.boolean(1), scope=AbstractGeneralOperationParameterPropertyType, documentation=u'gml:GeneralOperationParameter is the abstract definition of a parameter or group of parameters used by an operation method.'))
AbstractGeneralOperationParameterPropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=AbstractGeneralOperationParameterPropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractGeneralOperationParameter'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



DynamicFeatureType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'validTime'), TimePrimitivePropertyType, scope=DynamicFeatureType, documentation=u'gml:validTime is a convenience property element.'))

DynamicFeatureType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'history'), HistoryPropertyType, scope=DynamicFeatureType, documentation=u'A generic sequence of events constitute a gml:history of an object.\nThe gml:history element contains a set of elements in the substitution group headed by the abstract element gml:AbstractTimeSlice, representing the time-varying properties of interest. The history property of a dynamic feature associates a feature instance with a sequence of time slices (i.e. change events) that encapsulate the evolution of the feature.'))

DynamicFeatureType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'dataSource'), StringOrRefType, scope=DynamicFeatureType, documentation=u'Evidence is represented by a simple gml:dataSource or gml:dataSourceReference property that indicates the source of the temporal data. The remote link attributes of the gml:dataSource element have been deprecated along with its current type.'))

DynamicFeatureType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'dataSourceReference'), ReferenceType, scope=DynamicFeatureType, documentation=u'Evidence is represented by a simple gml:dataSource or gml:dataSourceReference property that indicates the source of the temporal data.'))
DynamicFeatureType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=DynamicFeatureType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'validTime'))),
        pyxb.binding.content.ContentModelTransition(next_state=9, element_use=DynamicFeatureType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'history'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DynamicFeatureType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=10, element_use=DynamicFeatureType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'dataSource'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DynamicFeatureType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=DynamicFeatureType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=DynamicFeatureType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'dataSourceReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=1, element_use=DynamicFeatureType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'metaDataProperty'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=DynamicFeatureType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'location'))),
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=DynamicFeatureType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'boundedBy'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=DynamicFeatureType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'description'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=DynamicFeatureType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'validTime'))),
        pyxb.binding.content.ContentModelTransition(next_state=9, element_use=DynamicFeatureType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'history'))),
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=DynamicFeatureType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'boundedBy'))),
        pyxb.binding.content.ContentModelTransition(next_state=10, element_use=DynamicFeatureType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'dataSource'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=DynamicFeatureType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'location'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DynamicFeatureType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=DynamicFeatureType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'dataSourceReference'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=9, element_use=DynamicFeatureType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'history'))),
        pyxb.binding.content.ContentModelTransition(next_state=10, element_use=DynamicFeatureType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'dataSource'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=DynamicFeatureType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'dataSourceReference'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=True, transitions=[
    ])
    , 5 : pyxb.binding.content.ContentModelState(state=5, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=DynamicFeatureType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'validTime'))),
        pyxb.binding.content.ContentModelTransition(next_state=9, element_use=DynamicFeatureType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'history'))),
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=DynamicFeatureType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'boundedBy'))),
        pyxb.binding.content.ContentModelTransition(next_state=10, element_use=DynamicFeatureType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'dataSource'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DynamicFeatureType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DynamicFeatureType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=DynamicFeatureType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'dataSourceReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=DynamicFeatureType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'location'))),
    ])
    , 6 : pyxb.binding.content.ContentModelState(state=6, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=DynamicFeatureType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'validTime'))),
        pyxb.binding.content.ContentModelTransition(next_state=9, element_use=DynamicFeatureType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'history'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=DynamicFeatureType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'dataSourceReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=10, element_use=DynamicFeatureType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'dataSource'))),
    ])
    , 7 : pyxb.binding.content.ContentModelState(state=7, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=DynamicFeatureType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'validTime'))),
        pyxb.binding.content.ContentModelTransition(next_state=10, element_use=DynamicFeatureType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'dataSource'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=DynamicFeatureType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'location'))),
        pyxb.binding.content.ContentModelTransition(next_state=9, element_use=DynamicFeatureType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'history'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=DynamicFeatureType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'dataSourceReference'))),
    ])
    , 8 : pyxb.binding.content.ContentModelState(state=8, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=DynamicFeatureType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'validTime'))),
        pyxb.binding.content.ContentModelTransition(next_state=9, element_use=DynamicFeatureType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'history'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DynamicFeatureType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=10, element_use=DynamicFeatureType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'dataSource'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DynamicFeatureType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=DynamicFeatureType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=DynamicFeatureType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'dataSourceReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=DynamicFeatureType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'location'))),
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=DynamicFeatureType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'boundedBy'))),
    ])
    , 9 : pyxb.binding.content.ContentModelState(state=9, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=10, element_use=DynamicFeatureType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'dataSource'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=DynamicFeatureType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'dataSourceReference'))),
    ])
    , 10 : pyxb.binding.content.ContentModelState(state=10, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=DynamicFeatureType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'dataSourceReference'))),
    ])
})


DS_OtherAggregate_Type._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DS_OtherAggregate_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'composedOf'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DS_OtherAggregate_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'composedOf'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=DS_OtherAggregate_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'seriesMetadata'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=DS_OtherAggregate_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'seriesMetadata'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=DS_OtherAggregate_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'superset'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=DS_OtherAggregate_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'subset'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=DS_OtherAggregate_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'superset'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=DS_OtherAggregate_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'subset'))),
    ])
})



LineStringSegmentArrayPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'LineStringSegment'), LineStringSegmentType, scope=LineStringSegmentArrayPropertyType, documentation=u'A LineStringSegment is a curve segment that is defined by two or more control points including the start and end point, with linear interpolation between them.\nThe content model follows the general pattern for the encoding of curve segments.'))
LineStringSegmentArrayPropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=1, element_use=LineStringSegmentArrayPropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'LineStringSegment'))),
    ])
})



MD_BrowseGraphic_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_BrowseGraphic'), MD_BrowseGraphic_Type, scope=MD_BrowseGraphic_PropertyType))
MD_BrowseGraphic_PropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MD_BrowseGraphic_PropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_BrowseGraphic'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



MD_CoverageContentTypeCode_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_CoverageContentTypeCode'), CodeListValue_Type, scope=MD_CoverageContentTypeCode_PropertyType))
MD_CoverageContentTypeCode_PropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MD_CoverageContentTypeCode_PropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_CoverageContentTypeCode'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



PrimeMeridianType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'greenwichLongitude'), AngleType, scope=PrimeMeridianType, documentation=u'gml:greenwichLongitude is the longitude of the prime meridian measured from the Greenwich meridian, positive eastward. If the value of the prime meridian "name" is "Greenwich" then the value of greenwichLongitude shall be 0 degrees.'))
PrimeMeridianType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=PrimeMeridianType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'description'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=PrimeMeridianType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=PrimeMeridianType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=1, element_use=PrimeMeridianType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'metaDataProperty'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=PrimeMeridianType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=PrimeMeridianType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=PrimeMeridianType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=True, transitions=[
    ])
    , 5 : pyxb.binding.content.ContentModelState(state=5, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=PrimeMeridianType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'greenwichLongitude'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=PrimeMeridianType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=PrimeMeridianType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'remarks'))),
    ])
    , 6 : pyxb.binding.content.ContentModelState(state=6, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=PrimeMeridianType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'greenwichLongitude'))),
    ])
})



CompositeSurfaceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'surfaceMember'), SurfacePropertyType, scope=CompositeSurfaceType, documentation=u'This property element either references a surface via the XLink-attributes or contains the surface element. A surface element is any element, which is substitutable for gml:AbstractSurface.'))
CompositeSurfaceType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=CompositeSurfaceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=CompositeSurfaceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'surfaceMember'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=CompositeSurfaceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=CompositeSurfaceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=1, element_use=CompositeSurfaceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'metaDataProperty'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=CompositeSurfaceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'description'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=CompositeSurfaceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=CompositeSurfaceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=CompositeSurfaceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'surfaceMember'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=CompositeSurfaceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=CompositeSurfaceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=CompositeSurfaceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=CompositeSurfaceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'surfaceMember'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=CompositeSurfaceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'surfaceMember'))),
    ])
    , 5 : pyxb.binding.content.ContentModelState(state=5, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=CompositeSurfaceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=CompositeSurfaceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'surfaceMember'))),
    ])
})



CoordinateSystemPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractCoordinateSystem'), AbstractCoordinateSystemType, abstract=pyxb.binding.datatypes.boolean(1), scope=CoordinateSystemPropertyType, documentation=u'gml:AbstractCoordinateSystem is a coordinate system (CS) is the non-repeating sequence of coordinate system axes that spans a given coordinate space. A CS is derived from a set of mathematical rules for specifying how coordinates in a given space are to be assigned to points. The coordinate values in a coordinate tuple shall be recorded in the order in which the coordinate system axes associations are recorded. This abstract complex type shall not be used, extended, or restricted, in an Application Schema, to define a concrete subtype with a meaning equivalent to a concrete subtype specified in this document.'))
CoordinateSystemPropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=CoordinateSystemPropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractCoordinateSystem'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



TimeOrdinalEraPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'TimeOrdinalEra'), TimeOrdinalEraType, scope=TimeOrdinalEraPropertyType, documentation=u'Its content model follows the pattern of gml:TimeEdge, inheriting standard properties from gml:DefinitionType, and adding gml:start, gml:end and gml:extent properties, a set of gml:member properties which indicate ordered gml:TimeOrdinalEra elements, and a gml:group property which points to the parent era.\nThe recursive inclusion of gml:TimeOrdinalEra elements allow the construction of an arbitrary depth hierarchical ordinal reference schema, such that an ordinal era at a given level of the hierarchy includes a sequence of shorter, coterminous ordinal eras.'))
TimeOrdinalEraPropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=TimeOrdinalEraPropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'TimeOrdinalEra'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



CI_Contact_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'CI_Contact'), CI_Contact_Type, scope=CI_Contact_PropertyType))
CI_Contact_PropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=CI_Contact_PropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'CI_Contact'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})


DS_Sensor_Type._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DS_Sensor_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'composedOf'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DS_Sensor_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'composedOf'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=DS_Sensor_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'seriesMetadata'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=DS_Sensor_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'seriesMetadata'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=DS_Sensor_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'superset'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=DS_Sensor_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'subset'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=DS_Sensor_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'superset'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=DS_Sensor_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'subset'))),
    ])
})



HistoryPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractTimeSlice'), AbstractTimeSliceType, abstract=pyxb.binding.datatypes.boolean(1), scope=HistoryPropertyType, documentation=u'To describe an event \u2014 an action that occurs at an instant or over an interval of time \u2014 GML provides the gml:AbtractTimeSlice element. A timeslice encapsulates the time-varying properties of a dynamic feature -- it shall be extended to represent a time stamped projection of a specific feature. The gml:dataSource property describes how the temporal data was acquired.\nA gml:AbstractTimeSlice instance is a GML object that encapsulates updates of the dynamic\u2014or volatile\u2014properties that reflect some change event; it thus includes only those feature properties that have actually changed due to some process.\ngml:AbstractTimeSlice basically provides a facility for attribute-level time stamping, in contrast to the object-level time stamping of dynamic feature instances. \nThe time slice can thus be viewed as event or process-oriented, whereas a snapshot is more state or structure-oriented. A timeslice has richer causality, whereas a snapshot merely portrays the status of the whole. \n'))
HistoryPropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=HistoryPropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractTimeSlice'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=HistoryPropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractTimeSlice'))),
    ])
})



MD_TopicCategoryCode_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_TopicCategoryCode'), MD_TopicCategoryCode_Type, scope=MD_TopicCategoryCode_PropertyType))
MD_TopicCategoryCode_PropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MD_TopicCategoryCode_PropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_TopicCategoryCode'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



BooleanPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'Boolean'), CTD_ANON_3, nillable=pyxb.binding.datatypes.boolean(1), scope=BooleanPropertyType))
BooleanPropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=BooleanPropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'Boolean'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



TimeOrdinalEraType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'extent'), TimePeriodPropertyType, scope=TimeOrdinalEraType))

TimeOrdinalEraType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'member'), TimeOrdinalEraPropertyType, scope=TimeOrdinalEraType))

TimeOrdinalEraType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'group'), ReferenceType, scope=TimeOrdinalEraType))

TimeOrdinalEraType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'relatedTime'), RelatedTimeType, scope=TimeOrdinalEraType))

TimeOrdinalEraType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'start'), TimeNodePropertyType, scope=TimeOrdinalEraType))

TimeOrdinalEraType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'end'), TimeNodePropertyType, scope=TimeOrdinalEraType))
TimeOrdinalEraType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=1, element_use=TimeOrdinalEraType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'metaDataProperty'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=TimeOrdinalEraType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'description'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=TimeOrdinalEraType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=TimeOrdinalEraType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=TimeOrdinalEraType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'group'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=TimeOrdinalEraType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'extent'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=TimeOrdinalEraType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'member'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=TimeOrdinalEraType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'relatedTime'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=TimeOrdinalEraType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'start'))),
        pyxb.binding.content.ContentModelTransition(next_state=9, element_use=TimeOrdinalEraType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'end'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=TimeOrdinalEraType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'member'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=TimeOrdinalEraType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'group'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=TimeOrdinalEraType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=TimeOrdinalEraType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
    ])
    , 5 : pyxb.binding.content.ContentModelState(state=5, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=TimeOrdinalEraType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'member'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=TimeOrdinalEraType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'group'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=TimeOrdinalEraType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=TimeOrdinalEraType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'extent'))),
        pyxb.binding.content.ContentModelTransition(next_state=9, element_use=TimeOrdinalEraType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'end'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=TimeOrdinalEraType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'relatedTime'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=TimeOrdinalEraType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'start'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=TimeOrdinalEraType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'remarks'))),
    ])
    , 6 : pyxb.binding.content.ContentModelState(state=6, is_final=True, transitions=[
    ])
    , 7 : pyxb.binding.content.ContentModelState(state=7, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=TimeOrdinalEraType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
    ])
    , 8 : pyxb.binding.content.ContentModelState(state=8, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=TimeOrdinalEraType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'extent'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=TimeOrdinalEraType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'member'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=TimeOrdinalEraType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'group'))),
        pyxb.binding.content.ContentModelTransition(next_state=9, element_use=TimeOrdinalEraType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'end'))),
    ])
    , 9 : pyxb.binding.content.ContentModelState(state=9, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=TimeOrdinalEraType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'extent'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=TimeOrdinalEraType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'member'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=TimeOrdinalEraType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'group'))),
    ])
})



GM_Object_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractGeometry'), AbstractGeometryType, abstract=pyxb.binding.datatypes.boolean(1), scope=GM_Object_PropertyType, documentation=u'The AbstractGeometry element is the abstract head of the substitution group for all geometry elements of GML. This includes pre-defined and user-defined geometry elements. Any geometry element shall be a direct or indirect extension/restriction of AbstractGeometryType and shall be directly or indirectly in the substitution group of AbstractGeometry.'))
GM_Object_PropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=GM_Object_PropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractGeometry'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



EX_VerticalExtent_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'verticalCRS'), SC_CRS_PropertyType, scope=EX_VerticalExtent_Type))

EX_VerticalExtent_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'minimumValue'), Real_PropertyType, scope=EX_VerticalExtent_Type))

EX_VerticalExtent_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'maximumValue'), Real_PropertyType, scope=EX_VerticalExtent_Type))
EX_VerticalExtent_Type._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=EX_VerticalExtent_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'minimumValue'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=EX_VerticalExtent_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'maximumValue'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=EX_VerticalExtent_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'verticalCRS'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=True, transitions=[
    ])
})



TimeOrdinalReferenceSystemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'component'), TimeOrdinalEraPropertyType, scope=TimeOrdinalReferenceSystemType))
TimeOrdinalReferenceSystemType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=1, element_use=TimeOrdinalReferenceSystemType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'metaDataProperty'))),
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=TimeOrdinalReferenceSystemType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=TimeOrdinalReferenceSystemType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=TimeOrdinalReferenceSystemType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'description'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=TimeOrdinalReferenceSystemType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'component'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=TimeOrdinalReferenceSystemType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=TimeOrdinalReferenceSystemType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=TimeOrdinalReferenceSystemType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
    ])
    , 5 : pyxb.binding.content.ContentModelState(state=5, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=TimeOrdinalReferenceSystemType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'domainOfValidity'))),
    ])
    , 6 : pyxb.binding.content.ContentModelState(state=6, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=TimeOrdinalReferenceSystemType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'component'))),
    ])
    , 7 : pyxb.binding.content.ContentModelState(state=7, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=TimeOrdinalReferenceSystemType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=TimeOrdinalReferenceSystemType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'remarks'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=TimeOrdinalReferenceSystemType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'domainOfValidity'))),
    ])
})



CompositeValueType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'valueComponents'), ValueArrayPropertyType, scope=CompositeValueType, documentation=u'Property that contains Values.'))

CompositeValueType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'valueComponent'), ValuePropertyType, scope=CompositeValueType, documentation=u'Property that refers to, or contains, a Value.'))
CompositeValueType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=CompositeValueType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=CompositeValueType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=CompositeValueType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=CompositeValueType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'valueComponents'))),
        pyxb.binding.content.ContentModelTransition(next_state=1, element_use=CompositeValueType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'metaDataProperty'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=CompositeValueType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'valueComponent'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=CompositeValueType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'description'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=CompositeValueType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=CompositeValueType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=CompositeValueType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'valueComponent'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=CompositeValueType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'valueComponents'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=True, transitions=[
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=CompositeValueType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'valueComponents'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=CompositeValueType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'valueComponent'))),
    ])
    , 5 : pyxb.binding.content.ContentModelState(state=5, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=CompositeValueType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=CompositeValueType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=CompositeValueType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=CompositeValueType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'valueComponents'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=CompositeValueType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'valueComponent'))),
    ])
    , 6 : pyxb.binding.content.ContentModelState(state=6, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=CompositeValueType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=CompositeValueType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'valueComponents'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=CompositeValueType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'valueComponent'))),
    ])
})


ValueArrayType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=ValueArrayType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=ValueArrayType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=ValueArrayType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=ValueArrayType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'valueComponents'))),
        pyxb.binding.content.ContentModelTransition(next_state=1, element_use=ValueArrayType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'metaDataProperty'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=ValueArrayType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'valueComponent'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=ValueArrayType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'description'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=ValueArrayType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=ValueArrayType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=ValueArrayType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'valueComponent'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=ValueArrayType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'valueComponents'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=True, transitions=[
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=ValueArrayType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'valueComponents'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=ValueArrayType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'valueComponent'))),
    ])
    , 5 : pyxb.binding.content.ContentModelState(state=5, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=ValueArrayType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=ValueArrayType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=ValueArrayType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=ValueArrayType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'valueComponents'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=ValueArrayType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'valueComponent'))),
    ])
    , 6 : pyxb.binding.content.ContentModelState(state=6, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=ValueArrayType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=ValueArrayType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'valueComponents'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=ValueArrayType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'valueComponent'))),
    ])
})



EX_Extent_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'verticalElement'), EX_VerticalExtent_PropertyType, scope=EX_Extent_Type))

EX_Extent_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'description'), CharacterString_PropertyType, scope=EX_Extent_Type))

EX_Extent_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'temporalElement'), EX_TemporalExtent_PropertyType, scope=EX_Extent_Type))

EX_Extent_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'geographicElement'), EX_GeographicExtent_PropertyType, scope=EX_Extent_Type))
EX_Extent_Type._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=EX_Extent_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'description'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=EX_Extent_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'temporalElement'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=EX_Extent_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'geographicElement'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=EX_Extent_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'verticalElement'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=EX_Extent_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'temporalElement'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=EX_Extent_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'geographicElement'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=EX_Extent_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'verticalElement'))),
    ])
})


AbstractSolidType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=AbstractSolidType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=AbstractSolidType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=AbstractSolidType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=1, element_use=AbstractSolidType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'metaDataProperty'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=AbstractSolidType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'description'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=AbstractSolidType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=AbstractSolidType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=AbstractSolidType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=AbstractSolidType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=AbstractSolidType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=AbstractSolidType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
    ])
})



CompositeSolidType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'solidMember'), SolidPropertyType, scope=CompositeSolidType, documentation=u'This property element either references a solid via the XLink-attributes or contains the solid element. A solid element is any element, which is substitutable for gml:AbstractSolid.'))
CompositeSolidType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=CompositeSolidType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'solidMember'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=CompositeSolidType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=CompositeSolidType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=CompositeSolidType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=1, element_use=CompositeSolidType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'metaDataProperty'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=CompositeSolidType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'description'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=CompositeSolidType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'solidMember'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=CompositeSolidType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=CompositeSolidType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'solidMember'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=CompositeSolidType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=CompositeSolidType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=CompositeSolidType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'solidMember'))),
    ])
    , 5 : pyxb.binding.content.ContentModelState(state=5, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=CompositeSolidType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=CompositeSolidType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'solidMember'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=CompositeSolidType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=CompositeSolidType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
    ])
})



ConversionToPreferredUnitType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'factor'), pyxb.binding.datatypes.double, scope=ConversionToPreferredUnitType))

ConversionToPreferredUnitType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'formula'), FormulaType, scope=ConversionToPreferredUnitType))
ConversionToPreferredUnitType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=ConversionToPreferredUnitType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'factor'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=ConversionToPreferredUnitType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'formula'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



TimeCalendarPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'TimeCalendar'), TimeCalendarType, scope=TimeCalendarPropertyType, documentation=u'A calendar is a discrete temporal reference system that provides a basis for defining temporal position to a resolution of one day.\ngml:TimeCalendar adds one property to those inherited from gml:TimeReferenceSystem. A gml:referenceFrame provides a link to a gml:TimeCalendarEra that it uses. A  gml:TimeCalendar may reference more than one calendar era. \nThe referenceFrame element follows the standard GML property model, allowing the association to be instantiated either using an inline description using the gml:TimeCalendarEra element, or a link to a gml:TimeCalendarEra which is explicit elsewhere.'))
TimeCalendarPropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=TimeCalendarPropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'TimeCalendar'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



MD_StandardOrderProcess_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'turnaround'), CharacterString_PropertyType, scope=MD_StandardOrderProcess_Type))

MD_StandardOrderProcess_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'fees'), CharacterString_PropertyType, scope=MD_StandardOrderProcess_Type))

MD_StandardOrderProcess_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'orderingInstructions'), CharacterString_PropertyType, scope=MD_StandardOrderProcess_Type))

MD_StandardOrderProcess_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'plannedAvailableDateTime'), DateTime_PropertyType, scope=MD_StandardOrderProcess_Type))
MD_StandardOrderProcess_Type._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MD_StandardOrderProcess_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'fees'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=MD_StandardOrderProcess_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'orderingInstructions'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=MD_StandardOrderProcess_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'plannedAvailableDateTime'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=MD_StandardOrderProcess_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'turnaround'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=MD_StandardOrderProcess_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'orderingInstructions'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=MD_StandardOrderProcess_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'plannedAvailableDateTime'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=MD_StandardOrderProcess_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'turnaround'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=MD_StandardOrderProcess_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'turnaround'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=MD_StandardOrderProcess_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'orderingInstructions'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=MD_StandardOrderProcess_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'turnaround'))),
    ])
    , 5 : pyxb.binding.content.ContentModelState(state=5, is_final=True, transitions=[
    ])
})



TimeEdgePropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'TimeEdge'), TimeEdgeType, scope=TimeEdgePropertyType, documentation=u'A time edge is a one-dimensional topological primitive. It is an open interval that starts and ends at a node. The edge may be realised as a geometry whose value is a time period.'))
TimeEdgePropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=TimeEdgePropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'TimeEdge'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



GenericName_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gco, u'AbstractGenericName'), CodeType, abstract=pyxb.binding.datatypes.boolean(1), scope=GenericName_PropertyType))
GenericName_PropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=GenericName_PropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gco, u'AbstractGenericName'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



MD_ApplicationSchemaInformation_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'name'), CI_Citation_PropertyType, scope=MD_ApplicationSchemaInformation_Type))

MD_ApplicationSchemaInformation_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'schemaLanguage'), CharacterString_PropertyType, scope=MD_ApplicationSchemaInformation_Type))

MD_ApplicationSchemaInformation_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'schemaAscii'), CharacterString_PropertyType, scope=MD_ApplicationSchemaInformation_Type))

MD_ApplicationSchemaInformation_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'constraintLanguage'), CharacterString_PropertyType, scope=MD_ApplicationSchemaInformation_Type))

MD_ApplicationSchemaInformation_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'graphicsFile'), Binary_PropertyType, scope=MD_ApplicationSchemaInformation_Type))

MD_ApplicationSchemaInformation_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'softwareDevelopmentFile'), Binary_PropertyType, scope=MD_ApplicationSchemaInformation_Type))

MD_ApplicationSchemaInformation_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'softwareDevelopmentFileFormat'), CharacterString_PropertyType, scope=MD_ApplicationSchemaInformation_Type))
MD_ApplicationSchemaInformation_Type._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MD_ApplicationSchemaInformation_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'name'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=MD_ApplicationSchemaInformation_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'schemaLanguage'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=True, transitions=[
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=MD_ApplicationSchemaInformation_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'constraintLanguage'))),
    ])
    , 5 : pyxb.binding.content.ContentModelState(state=5, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=MD_ApplicationSchemaInformation_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'schemaAscii'))),
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=MD_ApplicationSchemaInformation_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'graphicsFile'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=MD_ApplicationSchemaInformation_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'softwareDevelopmentFileFormat'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=MD_ApplicationSchemaInformation_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'softwareDevelopmentFile'))),
    ])
    , 6 : pyxb.binding.content.ContentModelState(state=6, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=MD_ApplicationSchemaInformation_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'graphicsFile'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=MD_ApplicationSchemaInformation_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'softwareDevelopmentFile'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=MD_ApplicationSchemaInformation_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'softwareDevelopmentFileFormat'))),
    ])
    , 7 : pyxb.binding.content.ContentModelState(state=7, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=MD_ApplicationSchemaInformation_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'softwareDevelopmentFile'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=MD_ApplicationSchemaInformation_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'softwareDevelopmentFileFormat'))),
    ])
    , 8 : pyxb.binding.content.ContentModelState(state=8, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=MD_ApplicationSchemaInformation_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'softwareDevelopmentFileFormat'))),
    ])
})



MD_Distributor_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_Distributor'), MD_Distributor_Type, scope=MD_Distributor_PropertyType))
MD_Distributor_PropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MD_Distributor_PropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_Distributor'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



GeodeticCRSType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'ellipsoidalCS'), EllipsoidalCSPropertyType, scope=GeodeticCRSType, documentation=u'gml:ellipsoidalCS is an association role to the ellipsoidal coordinate system used by this CRS.'))

GeodeticCRSType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'cartesianCS'), CartesianCSPropertyType, scope=GeodeticCRSType, documentation=u'gml:cartesianCS is an association role to the Cartesian coordinate system used by this CRS.'))

GeodeticCRSType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'geodeticDatum'), GeodeticDatumPropertyType, scope=GeodeticCRSType, documentation=u'gml:geodeticDatum is an association role to the geodetic datum used by this CRS.\n'))

GeodeticCRSType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'sphericalCS'), SphericalCSPropertyType, scope=GeodeticCRSType, documentation=u'gml:sphericalCS is an association role to the spherical coordinate system used by this CRS.'))
GeodeticCRSType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=GeodeticCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=GeodeticCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'description'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=GeodeticCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=1, element_use=GeodeticCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'metaDataProperty'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=GeodeticCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'geodeticDatum'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=GeodeticCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=GeodeticCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=GeodeticCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
    ])
    , 5 : pyxb.binding.content.ContentModelState(state=5, is_final=True, transitions=[
    ])
    , 6 : pyxb.binding.content.ContentModelState(state=6, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=GeodeticCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'ellipsoidalCS'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=GeodeticCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'cartesianCS'))),
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=GeodeticCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'domainOfValidity'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=GeodeticCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'scope'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=GeodeticCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'sphericalCS'))),
    ])
    , 7 : pyxb.binding.content.ContentModelState(state=7, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=GeodeticCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'domainOfValidity'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=GeodeticCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'scope'))),
    ])
    , 8 : pyxb.binding.content.ContentModelState(state=8, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=GeodeticCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=GeodeticCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'domainOfValidity'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=GeodeticCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'scope'))),
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=GeodeticCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'remarks'))),
    ])
})



DQ_AccuracyOfATimeMeasurement_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'DQ_AccuracyOfATimeMeasurement'), DQ_AccuracyOfATimeMeasurement_Type, scope=DQ_AccuracyOfATimeMeasurement_PropertyType))
DQ_AccuracyOfATimeMeasurement_PropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DQ_AccuracyOfATimeMeasurement_PropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'DQ_AccuracyOfATimeMeasurement'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})


EngineeringDatumType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=1, element_use=EngineeringDatumType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'metaDataProperty'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=EngineeringDatumType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'description'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=EngineeringDatumType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=EngineeringDatumType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=EngineeringDatumType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=EngineeringDatumType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=EngineeringDatumType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'domainOfValidity'))),
        pyxb.binding.content.ContentModelTransition(next_state=9, element_use=EngineeringDatumType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'scope'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=EngineeringDatumType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'realizationEpoch'))),
    ])
    , 5 : pyxb.binding.content.ContentModelState(state=5, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=EngineeringDatumType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
    ])
    , 6 : pyxb.binding.content.ContentModelState(state=6, is_final=True, transitions=[
    ])
    , 7 : pyxb.binding.content.ContentModelState(state=7, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=9, element_use=EngineeringDatumType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'scope'))),
    ])
    , 8 : pyxb.binding.content.ContentModelState(state=8, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=EngineeringDatumType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'domainOfValidity'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=EngineeringDatumType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=9, element_use=EngineeringDatumType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'scope'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=EngineeringDatumType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'remarks'))),
    ])
    , 9 : pyxb.binding.content.ContentModelState(state=9, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=EngineeringDatumType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'anchorDefinition'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=EngineeringDatumType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'realizationEpoch'))),
        pyxb.binding.content.ContentModelTransition(next_state=9, element_use=EngineeringDatumType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'scope'))),
    ])
})



DS_Aggregate_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'AbstractDS_Aggregate'), AbstractDS_Aggregate_Type, abstract=pyxb.binding.datatypes.boolean(1), scope=DS_Aggregate_PropertyType))
DS_Aggregate_PropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DS_Aggregate_PropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'AbstractDS_Aggregate'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



MD_ScopeDescription_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'features'), ObjectReference_PropertyType, scope=MD_ScopeDescription_Type))

MD_ScopeDescription_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'attributes'), ObjectReference_PropertyType, scope=MD_ScopeDescription_Type))

MD_ScopeDescription_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'featureInstances'), ObjectReference_PropertyType, scope=MD_ScopeDescription_Type))

MD_ScopeDescription_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'attributeInstances'), ObjectReference_PropertyType, scope=MD_ScopeDescription_Type))

MD_ScopeDescription_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'dataset'), CharacterString_PropertyType, scope=MD_ScopeDescription_Type))

MD_ScopeDescription_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'other'), CharacterString_PropertyType, scope=MD_ScopeDescription_Type))
MD_ScopeDescription_Type._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=MD_ScopeDescription_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'attributes'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=MD_ScopeDescription_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'features'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=MD_ScopeDescription_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'featureInstances'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=MD_ScopeDescription_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'attributeInstances'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MD_ScopeDescription_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'dataset'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MD_ScopeDescription_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'other'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=MD_ScopeDescription_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'attributes'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=MD_ScopeDescription_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'features'))),
    ])
    , 5 : pyxb.binding.content.ContentModelState(state=5, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=MD_ScopeDescription_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'featureInstances'))),
    ])
    , 6 : pyxb.binding.content.ContentModelState(state=6, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=MD_ScopeDescription_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'attributeInstances'))),
    ])
})



DQ_CompletenessCommission_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'DQ_CompletenessCommission'), DQ_CompletenessCommission_Type, scope=DQ_CompletenessCommission_PropertyType))
DQ_CompletenessCommission_PropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DQ_CompletenessCommission_PropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'DQ_CompletenessCommission'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})


DQ_ConceptualConsistency_Type._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=DQ_ConceptualConsistency_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'measureDescription'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=DQ_ConceptualConsistency_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationMethodType'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DQ_ConceptualConsistency_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationProcedure'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=DQ_ConceptualConsistency_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationMethodDescription'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DQ_ConceptualConsistency_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'dateTime'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=DQ_ConceptualConsistency_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'result'))),
        pyxb.binding.content.ContentModelTransition(next_state=1, element_use=DQ_ConceptualConsistency_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'nameOfMeasure'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=DQ_ConceptualConsistency_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'measureIdentification'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DQ_ConceptualConsistency_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'dateTime'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=DQ_ConceptualConsistency_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'result'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=DQ_ConceptualConsistency_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationMethodDescription'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DQ_ConceptualConsistency_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationProcedure'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DQ_ConceptualConsistency_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'dateTime'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=DQ_ConceptualConsistency_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'result'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=DQ_ConceptualConsistency_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'measureDescription'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=DQ_ConceptualConsistency_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationMethodType'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DQ_ConceptualConsistency_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationProcedure'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=DQ_ConceptualConsistency_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationMethodDescription'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DQ_ConceptualConsistency_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'dateTime'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=DQ_ConceptualConsistency_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'result'))),
    ])
    , 5 : pyxb.binding.content.ContentModelState(state=5, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DQ_ConceptualConsistency_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationProcedure'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DQ_ConceptualConsistency_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'dateTime'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=DQ_ConceptualConsistency_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'result'))),
    ])
    , 6 : pyxb.binding.content.ContentModelState(state=6, is_final=True, transitions=[
    ])
    , 7 : pyxb.binding.content.ContentModelState(state=7, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=DQ_ConceptualConsistency_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationMethodType'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=DQ_ConceptualConsistency_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationMethodDescription'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DQ_ConceptualConsistency_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'dateTime'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DQ_ConceptualConsistency_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationProcedure'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=DQ_ConceptualConsistency_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'result'))),
    ])
    , 8 : pyxb.binding.content.ContentModelState(state=8, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=DQ_ConceptualConsistency_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'result'))),
    ])
})



DataBlockType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'tupleList'), CoordinatesType, scope=DataBlockType, documentation=u'gml:CoordinatesType consists of a list of coordinate tuples, with each coordinate tuple separated by the ts or tuple separator (whitespace), and each coordinate in the tuple by the cs or coordinate separator (comma).\nThe gml:tupleList encoding is effectively "band-interleaved".'))

DataBlockType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'rangeParameters'), AssociationRoleType, scope=DataBlockType))

DataBlockType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'doubleOrNilReasonTupleList'), doubleOrNilReasonList, scope=DataBlockType, documentation=u'gml:doubleOrNilReasonList consists of a list of gml:doubleOrNilReason values, each separated by a whitespace. The gml:doubleOrNilReason values are grouped into tuples where the dimension of each tuple in the list is equal to the number of range parameters.'))
DataBlockType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DataBlockType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'rangeParameters'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=DataBlockType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'doubleOrNilReasonTupleList'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=DataBlockType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'tupleList'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=True, transitions=[
    ])
})



ValueArrayPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'Null'), NilReasonType, scope=ValueArrayPropertyType, documentation=u''))

ValueArrayPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractTimeObject'), AbstractTimeObjectType, abstract=pyxb.binding.datatypes.boolean(1), scope=ValueArrayPropertyType, documentation=u'gml:AbstractTimeObject acts as the head of a substitution group for all temporal primitives and complexes.'))

ValueArrayPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractValue'), pyxb.binding.datatypes.anyType, abstract=pyxb.binding.datatypes.boolean(1), scope=ValueArrayPropertyType, documentation=u'gml:AbstractValue is an abstract element which acts as the head of a substitution group which contains gml:AbstractScalarValue, gml:AbstractScalarValueList, gml:CompositeValue and gml:ValueExtent, and (transitively) the elements in their substitution groups.\nThese elements may be used in an application schema as variables, so that in an XML instance document any member of its substitution group may occur.'))

ValueArrayPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractGeometry'), AbstractGeometryType, abstract=pyxb.binding.datatypes.boolean(1), scope=ValueArrayPropertyType, documentation=u'The AbstractGeometry element is the abstract head of the substitution group for all geometry elements of GML. This includes pre-defined and user-defined geometry elements. Any geometry element shall be a direct or indirect extension/restriction of AbstractGeometryType and shall be directly or indirectly in the substitution group of AbstractGeometry.'))
ValueArrayPropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=ValueArrayPropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractValue'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=ValueArrayPropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractGeometry'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=ValueArrayPropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'Null'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=ValueArrayPropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractTimeObject'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=ValueArrayPropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractValue'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=ValueArrayPropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractGeometry'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=ValueArrayPropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'Null'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=ValueArrayPropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractTimeObject'))),
    ])
})



MD_DatatypeCode_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_DatatypeCode'), CodeListValue_Type, scope=MD_DatatypeCode_PropertyType))
MD_DatatypeCode_PropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MD_DatatypeCode_PropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_DatatypeCode'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



UomArea_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'UnitDefinition'), UnitDefinitionType, scope=UomArea_PropertyType, documentation=u'A gml:UnitDefinition is a general definition of a unit of measure. This generic element is used only for units for which no relationship with other units or units systems is known.\nThe content model of gml:UnitDefinition adds three additional properties to gml:Definition, gml:quantityType, gml:quantityTypeReference and gml:catalogSymbol.  \nThe gml:catalogSymbol property optionally gives the short symbol used for this unit. This element is usually used when the relationship of this unit to other units or units systems is unknown.'))
UomArea_PropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=UomArea_PropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'UnitDefinition'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



EX_GeographicBoundingBox_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'northBoundLatitude'), Decimal_PropertyType, scope=EX_GeographicBoundingBox_Type))

EX_GeographicBoundingBox_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'westBoundLongitude'), Decimal_PropertyType, scope=EX_GeographicBoundingBox_Type))

EX_GeographicBoundingBox_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'eastBoundLongitude'), Decimal_PropertyType, scope=EX_GeographicBoundingBox_Type))

EX_GeographicBoundingBox_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'southBoundLatitude'), Decimal_PropertyType, scope=EX_GeographicBoundingBox_Type))
EX_GeographicBoundingBox_Type._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=EX_GeographicBoundingBox_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'westBoundLongitude'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=EX_GeographicBoundingBox_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'extentTypeCode'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=EX_GeographicBoundingBox_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'eastBoundLongitude'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=EX_GeographicBoundingBox_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'westBoundLongitude'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=EX_GeographicBoundingBox_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'southBoundLatitude'))),
    ])
    , 5 : pyxb.binding.content.ContentModelState(state=5, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=EX_GeographicBoundingBox_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'northBoundLatitude'))),
    ])
    , 6 : pyxb.binding.content.ContentModelState(state=6, is_final=True, transitions=[
    ])
})



AbstractTimeTopologyPrimitiveType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'complex'), ReferenceType, scope=AbstractTimeTopologyPrimitiveType))
AbstractTimeTopologyPrimitiveType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=AbstractTimeTopologyPrimitiveType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=AbstractTimeTopologyPrimitiveType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=AbstractTimeTopologyPrimitiveType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'complex'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=AbstractTimeTopologyPrimitiveType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=1, element_use=AbstractTimeTopologyPrimitiveType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'metaDataProperty'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=AbstractTimeTopologyPrimitiveType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'relatedTime'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=AbstractTimeTopologyPrimitiveType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'description'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=AbstractTimeTopologyPrimitiveType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=AbstractTimeTopologyPrimitiveType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=AbstractTimeTopologyPrimitiveType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'relatedTime'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=AbstractTimeTopologyPrimitiveType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'complex'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=True, transitions=[
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=AbstractTimeTopologyPrimitiveType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'complex'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=AbstractTimeTopologyPrimitiveType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'relatedTime'))),
    ])
    , 5 : pyxb.binding.content.ContentModelState(state=5, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=AbstractTimeTopologyPrimitiveType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=AbstractTimeTopologyPrimitiveType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=AbstractTimeTopologyPrimitiveType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'complex'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=AbstractTimeTopologyPrimitiveType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=AbstractTimeTopologyPrimitiveType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'relatedTime'))),
    ])
    , 6 : pyxb.binding.content.ContentModelState(state=6, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=AbstractTimeTopologyPrimitiveType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=AbstractTimeTopologyPrimitiveType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'complex'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=AbstractTimeTopologyPrimitiveType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'relatedTime'))),
    ])
})



TimeNodeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'position'), TimeInstantPropertyType, scope=TimeNodeType))

TimeNodeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'nextEdge'), TimeEdgePropertyType, scope=TimeNodeType))

TimeNodeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'previousEdge'), TimeEdgePropertyType, scope=TimeNodeType))
TimeNodeType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=TimeNodeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=TimeNodeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=TimeNodeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'position'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=TimeNodeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=TimeNodeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'nextEdge'))),
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=TimeNodeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'complex'))),
        pyxb.binding.content.ContentModelTransition(next_state=1, element_use=TimeNodeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'metaDataProperty'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=TimeNodeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'relatedTime'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=TimeNodeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'description'))),
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=TimeNodeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'previousEdge'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=TimeNodeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'nextEdge'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=TimeNodeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=TimeNodeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'position'))),
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=TimeNodeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'complex'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=TimeNodeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'relatedTime'))),
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=TimeNodeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'previousEdge'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=TimeNodeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=TimeNodeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'nextEdge'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=TimeNodeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=TimeNodeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'position'))),
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=TimeNodeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'complex'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=TimeNodeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'relatedTime'))),
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=TimeNodeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'previousEdge'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=TimeNodeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'nextEdge'))),
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=TimeNodeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'complex'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=TimeNodeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'position'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=TimeNodeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'relatedTime'))),
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=TimeNodeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'previousEdge'))),
    ])
    , 5 : pyxb.binding.content.ContentModelState(state=5, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=TimeNodeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=TimeNodeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=TimeNodeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'position'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=TimeNodeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=TimeNodeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'nextEdge'))),
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=TimeNodeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'complex'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=TimeNodeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'relatedTime'))),
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=TimeNodeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'previousEdge'))),
    ])
    , 6 : pyxb.binding.content.ContentModelState(state=6, is_final=True, transitions=[
    ])
    , 7 : pyxb.binding.content.ContentModelState(state=7, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=TimeNodeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'nextEdge'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=TimeNodeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'position'))),
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=TimeNodeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'previousEdge'))),
    ])
})



DS_ProductionSeries_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'DS_ProductionSeries'), DS_ProductionSeries_Type, scope=DS_ProductionSeries_PropertyType))
DS_ProductionSeries_PropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DS_ProductionSeries_PropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'DS_ProductionSeries'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



DomainSetType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractGeometry'), AbstractGeometryType, abstract=pyxb.binding.datatypes.boolean(1), scope=DomainSetType, documentation=u'The AbstractGeometry element is the abstract head of the substitution group for all geometry elements of GML. This includes pre-defined and user-defined geometry elements. Any geometry element shall be a direct or indirect extension/restriction of AbstractGeometryType and shall be directly or indirectly in the substitution group of AbstractGeometry.'))

DomainSetType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractTimeObject'), AbstractTimeObjectType, abstract=pyxb.binding.datatypes.boolean(1), scope=DomainSetType, documentation=u'gml:AbstractTimeObject acts as the head of a substitution group for all temporal primitives and complexes.'))
DomainSetType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DomainSetType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractGeometry'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DomainSetType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractTimeObject'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



Angle_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gco, u'Angle'), AngleType, scope=Angle_PropertyType))
Angle_PropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=Angle_PropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gco, u'Angle'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



LI_ProcessStep_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'source'), LI_Source_PropertyType, scope=LI_ProcessStep_Type))

LI_ProcessStep_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'description'), CharacterString_PropertyType, scope=LI_ProcessStep_Type))

LI_ProcessStep_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'dateTime'), DateTime_PropertyType, scope=LI_ProcessStep_Type))

LI_ProcessStep_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'processor'), CI_ResponsibleParty_PropertyType, scope=LI_ProcessStep_Type))

LI_ProcessStep_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'rationale'), CharacterString_PropertyType, scope=LI_ProcessStep_Type))
LI_ProcessStep_Type._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=LI_ProcessStep_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'description'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=LI_ProcessStep_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'dateTime'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=LI_ProcessStep_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'processor'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=LI_ProcessStep_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'source'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=LI_ProcessStep_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'rationale'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=LI_ProcessStep_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'dateTime'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=LI_ProcessStep_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'processor'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=LI_ProcessStep_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'source'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=LI_ProcessStep_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'processor'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=LI_ProcessStep_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'source'))),
    ])
})



Distance_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gco, u'Distance'), LengthType, scope=Distance_PropertyType))
Distance_PropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=Distance_PropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gco, u'Distance'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



EX_TemporalExtent_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'EX_TemporalExtent'), EX_TemporalExtent_Type, scope=EX_TemporalExtent_PropertyType))
EX_TemporalExtent_PropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=EX_TemporalExtent_PropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'EX_TemporalExtent'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



GeodeticCRSPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'GeodeticCRS'), GeodeticCRSType, scope=GeodeticCRSPropertyType))
GeodeticCRSPropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=GeodeticCRSPropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'GeodeticCRS'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



MD_LegalConstraints_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'otherConstraints'), CharacterString_PropertyType, scope=MD_LegalConstraints_Type))

MD_LegalConstraints_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'accessConstraints'), MD_RestrictionCode_PropertyType, scope=MD_LegalConstraints_Type))

MD_LegalConstraints_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'useConstraints'), MD_RestrictionCode_PropertyType, scope=MD_LegalConstraints_Type))
MD_LegalConstraints_Type._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=1, element_use=MD_LegalConstraints_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'useLimitation'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MD_LegalConstraints_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'accessConstraints'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MD_LegalConstraints_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'otherConstraints'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MD_LegalConstraints_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'useConstraints'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MD_LegalConstraints_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'accessConstraints'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MD_LegalConstraints_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'otherConstraints'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MD_LegalConstraints_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'useConstraints'))),
    ])
})



LineStringSegmentType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'pointRep'), PointPropertyType, scope=LineStringSegmentType, documentation=u''))

LineStringSegmentType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'pointProperty'), PointPropertyType, scope=LineStringSegmentType, documentation=u'This property element either references a point via the XLink-attributes or contains the point element. pointProperty is the predefined property which may be used by GML Application Schemas whenever a GML feature has a property with a value that is substitutable for Point.'))

LineStringSegmentType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'pos'), DirectPositionType, scope=LineStringSegmentType))

LineStringSegmentType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'posList'), DirectPositionListType, scope=LineStringSegmentType))

LineStringSegmentType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'coordinates'), CoordinatesType, scope=LineStringSegmentType, documentation=u''))
LineStringSegmentType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=LineStringSegmentType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'pointProperty'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=LineStringSegmentType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'pos'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=LineStringSegmentType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'coordinates'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=LineStringSegmentType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'posList'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=LineStringSegmentType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'pointRep'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=LineStringSegmentType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'pointProperty'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=LineStringSegmentType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'pos'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=LineStringSegmentType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'pointRep'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=LineStringSegmentType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'pointProperty'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=LineStringSegmentType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'pos'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=LineStringSegmentType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'pointRep'))),
    ])
})



TopoSurfacePropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'TopoSurface'), TopoSurfaceType, scope=TopoSurfacePropertyType, documentation=u'gml:TopoSurface represents a homogeneous topological expression, a set of directed faces, which if realised are isomorphic to a geometric surface primitive. The intended use of gml:TopoSurface is to appear within a surface feature to express the structural and possibly geometric relationships of this surface feature to other features via the shared face definitions.'))
TopoSurfacePropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=TopoSurfacePropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'TopoSurface'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})


LinearCSType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=LinearCSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'description'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=LinearCSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=LinearCSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=1, element_use=LinearCSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'metaDataProperty'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=LinearCSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=LinearCSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=LinearCSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=LinearCSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'axis'))),
    ])
    , 5 : pyxb.binding.content.ContentModelState(state=5, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=LinearCSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'axis'))),
    ])
    , 6 : pyxb.binding.content.ContentModelState(state=6, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=LinearCSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=LinearCSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'axis'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=LinearCSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'remarks'))),
    ])
})


DQ_NonQuantitativeAttributeAccuracy_Type._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=DQ_NonQuantitativeAttributeAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'measureDescription'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=DQ_NonQuantitativeAttributeAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationMethodType'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DQ_NonQuantitativeAttributeAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationProcedure'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=DQ_NonQuantitativeAttributeAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationMethodDescription'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DQ_NonQuantitativeAttributeAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'dateTime'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=DQ_NonQuantitativeAttributeAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'result'))),
        pyxb.binding.content.ContentModelTransition(next_state=1, element_use=DQ_NonQuantitativeAttributeAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'nameOfMeasure'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=DQ_NonQuantitativeAttributeAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'measureIdentification'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DQ_NonQuantitativeAttributeAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'dateTime'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=DQ_NonQuantitativeAttributeAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'result'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=DQ_NonQuantitativeAttributeAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationMethodDescription'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DQ_NonQuantitativeAttributeAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationProcedure'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DQ_NonQuantitativeAttributeAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'dateTime'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=DQ_NonQuantitativeAttributeAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'result'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=DQ_NonQuantitativeAttributeAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'measureDescription'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=DQ_NonQuantitativeAttributeAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationMethodType'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DQ_NonQuantitativeAttributeAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationProcedure'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=DQ_NonQuantitativeAttributeAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationMethodDescription'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DQ_NonQuantitativeAttributeAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'dateTime'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=DQ_NonQuantitativeAttributeAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'result'))),
    ])
    , 5 : pyxb.binding.content.ContentModelState(state=5, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DQ_NonQuantitativeAttributeAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationProcedure'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DQ_NonQuantitativeAttributeAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'dateTime'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=DQ_NonQuantitativeAttributeAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'result'))),
    ])
    , 6 : pyxb.binding.content.ContentModelState(state=6, is_final=True, transitions=[
    ])
    , 7 : pyxb.binding.content.ContentModelState(state=7, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=DQ_NonQuantitativeAttributeAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationMethodType'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=DQ_NonQuantitativeAttributeAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationMethodDescription'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DQ_NonQuantitativeAttributeAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'dateTime'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DQ_NonQuantitativeAttributeAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationProcedure'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=DQ_NonQuantitativeAttributeAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'result'))),
    ])
    , 8 : pyxb.binding.content.ContentModelState(state=8, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=DQ_NonQuantitativeAttributeAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'result'))),
    ])
})



GeographicCRSPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'GeographicCRS'), GeographicCRSType, scope=GeographicCRSPropertyType, documentation=u''))
GeographicCRSPropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=GeographicCRSPropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'GeographicCRS'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



RecordType_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gco, u'RecordType'), RecordType_Type, scope=RecordType_PropertyType))
RecordType_PropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=RecordType_PropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gco, u'RecordType'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



CurveType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'segments'), CurveSegmentArrayPropertyType, scope=CurveType, documentation=u'This property element contains a list of curve segments. The order of the elements is significant and shall be preserved when processing the array.'))
CurveType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=CurveType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=CurveType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=CurveType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=CurveType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'segments'))),
        pyxb.binding.content.ContentModelTransition(next_state=1, element_use=CurveType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'metaDataProperty'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=CurveType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'description'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=CurveType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'segments'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=CurveType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=CurveType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'segments'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=CurveType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=CurveType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=True, transitions=[
    ])
    , 5 : pyxb.binding.content.ContentModelState(state=5, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=CurveType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=CurveType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'segments'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=CurveType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=CurveType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
    ])
})



TimeClockType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'referenceTime'), pyxb.binding.datatypes.time, scope=TimeClockType))

TimeClockType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'referenceEvent'), StringOrRefType, scope=TimeClockType))

TimeClockType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'dateBasis'), TimeCalendarPropertyType, scope=TimeClockType))

TimeClockType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'utcReference'), pyxb.binding.datatypes.time, scope=TimeClockType))
TimeClockType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=1, element_use=TimeClockType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'metaDataProperty'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=TimeClockType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'description'))),
        pyxb.binding.content.ContentModelTransition(next_state=9, element_use=TimeClockType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=TimeClockType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=TimeClockType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'dateBasis'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=9, element_use=TimeClockType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=TimeClockType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=TimeClockType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'referenceTime'))),
    ])
    , 5 : pyxb.binding.content.ContentModelState(state=5, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=TimeClockType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'utcReference'))),
    ])
    , 6 : pyxb.binding.content.ContentModelState(state=6, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=9, element_use=TimeClockType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
    ])
    , 7 : pyxb.binding.content.ContentModelState(state=7, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=TimeClockType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'referenceEvent'))),
    ])
    , 8 : pyxb.binding.content.ContentModelState(state=8, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=TimeClockType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'domainOfValidity'))),
    ])
    , 9 : pyxb.binding.content.ContentModelState(state=9, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=9, element_use=TimeClockType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=TimeClockType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'domainOfValidity'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=TimeClockType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'remarks'))),
    ])
})



MD_ExtendedElementInformation_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'parentEntity'), CharacterString_PropertyType, scope=MD_ExtendedElementInformation_Type))

MD_ExtendedElementInformation_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'definition'), CharacterString_PropertyType, scope=MD_ExtendedElementInformation_Type))

MD_ExtendedElementInformation_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'domainCode'), Integer_PropertyType, scope=MD_ExtendedElementInformation_Type))

MD_ExtendedElementInformation_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'rationale'), CharacterString_PropertyType, scope=MD_ExtendedElementInformation_Type))

MD_ExtendedElementInformation_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'name'), CharacterString_PropertyType, scope=MD_ExtendedElementInformation_Type))

MD_ExtendedElementInformation_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'obligation'), MD_ObligationCode_PropertyType, scope=MD_ExtendedElementInformation_Type))

MD_ExtendedElementInformation_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'condition'), CharacterString_PropertyType, scope=MD_ExtendedElementInformation_Type))

MD_ExtendedElementInformation_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'shortName'), CharacterString_PropertyType, scope=MD_ExtendedElementInformation_Type))

MD_ExtendedElementInformation_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'rule'), CharacterString_PropertyType, scope=MD_ExtendedElementInformation_Type))

MD_ExtendedElementInformation_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'dataType'), MD_DatatypeCode_PropertyType, scope=MD_ExtendedElementInformation_Type))

MD_ExtendedElementInformation_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'maximumOccurrence'), CharacterString_PropertyType, scope=MD_ExtendedElementInformation_Type))

MD_ExtendedElementInformation_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'source'), CI_ResponsibleParty_PropertyType, scope=MD_ExtendedElementInformation_Type))

MD_ExtendedElementInformation_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'domainValue'), CharacterString_PropertyType, scope=MD_ExtendedElementInformation_Type))
MD_ExtendedElementInformation_Type._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=MD_ExtendedElementInformation_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'name'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MD_ExtendedElementInformation_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'rationale'))),
        pyxb.binding.content.ContentModelTransition(next_state=13, element_use=MD_ExtendedElementInformation_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'source'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=MD_ExtendedElementInformation_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'shortName'))),
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=MD_ExtendedElementInformation_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'domainCode'))),
        pyxb.binding.content.ContentModelTransition(next_state=9, element_use=MD_ExtendedElementInformation_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'definition'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=11, element_use=MD_ExtendedElementInformation_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'condition'))),
        pyxb.binding.content.ContentModelTransition(next_state=12, element_use=MD_ExtendedElementInformation_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'dataType'))),
    ])
    , 5 : pyxb.binding.content.ContentModelState(state=5, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=MD_ExtendedElementInformation_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'domainCode'))),
        pyxb.binding.content.ContentModelTransition(next_state=9, element_use=MD_ExtendedElementInformation_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'definition'))),
    ])
    , 6 : pyxb.binding.content.ContentModelState(state=6, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=MD_ExtendedElementInformation_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'parentEntity'))),
    ])
    , 7 : pyxb.binding.content.ContentModelState(state=7, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=9, element_use=MD_ExtendedElementInformation_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'definition'))),
    ])
    , 8 : pyxb.binding.content.ContentModelState(state=8, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MD_ExtendedElementInformation_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'rule'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=MD_ExtendedElementInformation_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'parentEntity'))),
    ])
    , 9 : pyxb.binding.content.ContentModelState(state=9, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=11, element_use=MD_ExtendedElementInformation_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'condition'))),
        pyxb.binding.content.ContentModelTransition(next_state=12, element_use=MD_ExtendedElementInformation_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'dataType'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=MD_ExtendedElementInformation_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'obligation'))),
    ])
    , 10 : pyxb.binding.content.ContentModelState(state=10, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=MD_ExtendedElementInformation_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'domainValue'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=MD_ExtendedElementInformation_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'parentEntity'))),
    ])
    , 11 : pyxb.binding.content.ContentModelState(state=11, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=12, element_use=MD_ExtendedElementInformation_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'dataType'))),
    ])
    , 12 : pyxb.binding.content.ContentModelState(state=12, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=MD_ExtendedElementInformation_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'domainValue'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=MD_ExtendedElementInformation_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'parentEntity'))),
        pyxb.binding.content.ContentModelTransition(next_state=10, element_use=MD_ExtendedElementInformation_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'maximumOccurrence'))),
    ])
    , 13 : pyxb.binding.content.ContentModelState(state=13, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MD_ExtendedElementInformation_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'rationale'))),
        pyxb.binding.content.ContentModelTransition(next_state=13, element_use=MD_ExtendedElementInformation_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'source'))),
    ])
})



UnlimitedInteger_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gco, u'UnlimitedInteger'), UnlimitedInteger_Type, nillable=pyxb.binding.datatypes.boolean(1), scope=UnlimitedInteger_PropertyType))
UnlimitedInteger_PropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=UnlimitedInteger_PropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gco, u'UnlimitedInteger'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



DQ_LogicalConsistency_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'AbstractDQ_LogicalConsistency'), AbstractDQ_LogicalConsistency_Type, abstract=pyxb.binding.datatypes.boolean(1), scope=DQ_LogicalConsistency_PropertyType))
DQ_LogicalConsistency_PropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DQ_LogicalConsistency_PropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'AbstractDQ_LogicalConsistency'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



DQ_Element_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'AbstractDQ_Element'), AbstractDQ_Element_Type, abstract=pyxb.binding.datatypes.boolean(1), scope=DQ_Element_PropertyType))
DQ_Element_PropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DQ_Element_PropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'AbstractDQ_Element'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



NodeOrEdgePropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'Node'), NodeType, scope=NodeOrEdgePropertyType, documentation=u'gml:Node represents the 0-dimensional primitive.\nThe optional coboundary of a node (gml:directedEdge) is a sequence of directed edges which are incident on this node. Edges emanating from this node appear in the node coboundary with a negative orientation. \nIf provided, the aggregationType attribute shall have the value "sequence".\nA node may optionally be realised by a 0-dimensional geometric primitive (gml:pointProperty).'))

NodeOrEdgePropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'Edge'), EdgeType, scope=NodeOrEdgePropertyType, documentation=u'gml:Edge represents the 1-dimensional primitive.\nThe topological boundary of an Edge (gml:directedNode) consists of a negatively directed start Node and a positively directed end Node.   \nThe optional coboundary of an edge (gml:directedFace) is a circular sequence of directed faces which are incident on this edge in document order. In the 2D case, the orientation of the face on the left of the edge is "+"; the orientation of the face on the right on its right is "-". \nIf provided, the aggregationType attribute shall have the value "sequence".\nAn edge may optionally be realised by a 1-dimensional geometric primitive (gml:curveProperty).'))
NodeOrEdgePropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=NodeOrEdgePropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'Node'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=NodeOrEdgePropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'Edge'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



MD_GeometricObjectTypeCode_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_GeometricObjectTypeCode'), CodeListValue_Type, scope=MD_GeometricObjectTypeCode_PropertyType))
MD_GeometricObjectTypeCode_PropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MD_GeometricObjectTypeCode_PropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_GeometricObjectTypeCode'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



BagType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'member'), AssociationRoleType, scope=BagType, documentation=u''))

BagType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'members'), ArrayAssociationType, scope=BagType, documentation=u''))
BagType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=BagType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=BagType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=BagType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=BagType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'member'))),
        pyxb.binding.content.ContentModelTransition(next_state=1, element_use=BagType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'metaDataProperty'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=BagType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'members'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=BagType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'description'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=BagType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=BagType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=BagType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'members'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=BagType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'member'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=BagType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'member'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=BagType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'members'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=BagType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=BagType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'member'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=BagType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'members'))),
    ])
    , 5 : pyxb.binding.content.ContentModelState(state=5, is_final=True, transitions=[
    ])
    , 6 : pyxb.binding.content.ContentModelState(state=6, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=BagType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=BagType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=BagType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=BagType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'member'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=BagType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'members'))),
    ])
})



MD_RepresentativeFraction_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'denominator'), Integer_PropertyType, scope=MD_RepresentativeFraction_Type))
MD_RepresentativeFraction_Type._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MD_RepresentativeFraction_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'denominator'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



EX_SpatialTemporalExtent_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'EX_SpatialTemporalExtent'), EX_SpatialTemporalExtent_Type, scope=EX_SpatialTemporalExtent_PropertyType))
EX_SpatialTemporalExtent_PropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=EX_SpatialTemporalExtent_PropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'EX_SpatialTemporalExtent'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



MultiGeometryType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'geometryMember'), GeometryPropertyType, scope=MultiGeometryType, documentation=u'This property element either references a geometry element via the XLink-attributes or contains the geometry element.'))

MultiGeometryType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'geometryMembers'), GeometryArrayPropertyType, scope=MultiGeometryType, documentation=u'This property element contains a list of geometry elements. The order of the elements is significant and shall be preserved when processing the array.'))
MultiGeometryType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=MultiGeometryType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'geometryMember'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=MultiGeometryType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MultiGeometryType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MultiGeometryType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=MultiGeometryType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'geometryMembers'))),
        pyxb.binding.content.ContentModelTransition(next_state=1, element_use=MultiGeometryType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'metaDataProperty'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=MultiGeometryType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'description'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=MultiGeometryType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'geometryMembers'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MultiGeometryType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=MultiGeometryType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'geometryMember'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=MultiGeometryType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'geometryMembers'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MultiGeometryType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=MultiGeometryType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'geometryMember'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MultiGeometryType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=True, transitions=[
    ])
    , 5 : pyxb.binding.content.ContentModelState(state=5, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=MultiGeometryType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'geometryMembers'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=MultiGeometryType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'geometryMember'))),
    ])
    , 6 : pyxb.binding.content.ContentModelState(state=6, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=MultiGeometryType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'geometryMember'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=MultiGeometryType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MultiGeometryType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MultiGeometryType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=MultiGeometryType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'geometryMembers'))),
    ])
})



CubicSplineType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'pointRep'), PointPropertyType, scope=CubicSplineType, documentation=u''))

CubicSplineType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'posList'), DirectPositionListType, scope=CubicSplineType))

CubicSplineType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'coordinates'), CoordinatesType, scope=CubicSplineType, documentation=u''))

CubicSplineType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'pointProperty'), PointPropertyType, scope=CubicSplineType, documentation=u'This property element either references a point via the XLink-attributes or contains the point element. pointProperty is the predefined property which may be used by GML Application Schemas whenever a GML feature has a property with a value that is substitutable for Point.'))

CubicSplineType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'vectorAtEnd'), VectorType, scope=CubicSplineType))

CubicSplineType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'pos'), DirectPositionType, scope=CubicSplineType))

CubicSplineType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'vectorAtStart'), VectorType, scope=CubicSplineType))
CubicSplineType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=CubicSplineType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'posList'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=CubicSplineType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'pointProperty'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=CubicSplineType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'coordinates'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=CubicSplineType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'pointRep'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=CubicSplineType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'pos'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=CubicSplineType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'vectorAtEnd'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=True, transitions=[
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=CubicSplineType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'pointProperty'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=CubicSplineType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'pos'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=CubicSplineType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'pointRep'))),
    ])
    , 5 : pyxb.binding.content.ContentModelState(state=5, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=CubicSplineType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'pointProperty'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=CubicSplineType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'pos'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=CubicSplineType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'vectorAtStart'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=CubicSplineType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'pointRep'))),
    ])
    , 6 : pyxb.binding.content.ContentModelState(state=6, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=CubicSplineType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'vectorAtStart'))),
    ])
})



GM_Point_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'Point'), PointType, scope=GM_Point_PropertyType, documentation=u'A Point is defined by a single coordinate tuple. The direct position of a point is specified by the pos element which is of type DirectPositionType.'))
GM_Point_PropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=GM_Point_PropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'Point'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



MD_ObligationCode_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_ObligationCode'), MD_ObligationCode_Type, scope=MD_ObligationCode_PropertyType))
MD_ObligationCode_PropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MD_ObligationCode_PropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_ObligationCode'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



TimePrimitivePropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractTimePrimitive'), AbstractTimePrimitiveType, abstract=pyxb.binding.datatypes.boolean(1), scope=TimePrimitivePropertyType, documentation=u'gml:AbstractTimePrimitive acts as the head of a substitution group for geometric and topological temporal primitives.'))
TimePrimitivePropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=TimePrimitivePropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractTimePrimitive'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



DQ_DomainConsistency_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'DQ_DomainConsistency'), DQ_DomainConsistency_Type, scope=DQ_DomainConsistency_PropertyType))
DQ_DomainConsistency_PropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DQ_DomainConsistency_PropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'DQ_DomainConsistency'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



Decimal_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gco, u'Decimal'), pyxb.binding.datatypes.decimal, scope=Decimal_PropertyType))
Decimal_PropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=Decimal_PropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gco, u'Decimal'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



UserDefinedCSPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'UserDefinedCS'), UserDefinedCSType, scope=UserDefinedCSPropertyType, documentation=u'gml:UserDefinedCS is a two- or three-dimensional coordinate system that consists of any combination of coordinate axes not covered by any other coordinate system type. A UserDefinedCS shall have two or three gml:axis property elements; the number of property elements shall equal the dimension of the CS.'))
UserDefinedCSPropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=UserDefinedCSPropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'UserDefinedCS'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



GeodesicStringType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'posList'), DirectPositionListType, scope=GeodesicStringType))

GeodesicStringType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'pointProperty'), PointPropertyType, scope=GeodesicStringType, documentation=u'This property element either references a point via the XLink-attributes or contains the point element. pointProperty is the predefined property which may be used by GML Application Schemas whenever a GML feature has a property with a value that is substitutable for Point.'))

GeodesicStringType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'pos'), DirectPositionType, scope=GeodesicStringType))
GeodesicStringType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=GeodesicStringType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'posList'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=GeodesicStringType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'pos'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=GeodesicStringType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'pointProperty'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=GeodesicStringType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'pos'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=GeodesicStringType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'pointProperty'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=True, transitions=[
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=GeodesicStringType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'pos'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=GeodesicStringType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'pointProperty'))),
    ])
})


GeodesicType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=GeodesicType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'posList'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=GeodesicType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'pos'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=GeodesicType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'pointProperty'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=GeodesicType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'pos'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=GeodesicType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'pointProperty'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=True, transitions=[
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=GeodesicType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'pos'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=GeodesicType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'pointProperty'))),
    ])
})



TopoComplexPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'TopoComplex'), TopoComplexType, scope=TopoComplexPropertyType, documentation=u'gml:TopoComplex is a collection of topological primitives.\nEach complex holds a reference to its maximal complex (gml:maximalComplex) and optionally to sub- or super-complexes (gml:subComplex, gml:superComplex). \nA topology complex contains its primitive and sub-complex members.\n'))
TopoComplexPropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=TopoComplexPropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'TopoComplex'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})


TimeCSType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=TimeCSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'description'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=TimeCSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=TimeCSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=1, element_use=TimeCSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'metaDataProperty'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=TimeCSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=TimeCSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=TimeCSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=TimeCSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'axis'))),
    ])
    , 5 : pyxb.binding.content.ContentModelState(state=5, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=TimeCSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'axis'))),
    ])
    , 6 : pyxb.binding.content.ContentModelState(state=6, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=TimeCSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=TimeCSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'axis'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=TimeCSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'remarks'))),
    ])
})



ParameterValueGroupType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'group'), OperationParameterGroupPropertyType, scope=ParameterValueGroupType, documentation=u'gml:group is an association role to the operation parameter group for which this element provides parameter values.'))

ParameterValueGroupType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'parameterValue'), AbstractGeneralParameterValuePropertyType, scope=ParameterValueGroupType, documentation=u'gml:parameterValue is a composition association to a parameter value or group of parameter values used by a coordinate operation.'))
ParameterValueGroupType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=ParameterValueGroupType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'parameterValue'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=ParameterValueGroupType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'parameterValue'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=ParameterValueGroupType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'parameterValue'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=ParameterValueGroupType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'group'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=True, transitions=[
    ])
})



RingType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'curveMember'), CurvePropertyType, scope=RingType))
RingType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=RingType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'curveMember'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=RingType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'curveMember'))),
    ])
})



MD_SpatialRepresentationTypeCode_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_SpatialRepresentationTypeCode'), CodeListValue_Type, scope=MD_SpatialRepresentationTypeCode_PropertyType))
MD_SpatialRepresentationTypeCode_PropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MD_SpatialRepresentationTypeCode_PropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_SpatialRepresentationTypeCode'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



TopoPrimitiveArrayAssociationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractTopoPrimitive'), AbstractTopoPrimitiveType, abstract=pyxb.binding.datatypes.boolean(1), scope=TopoPrimitiveArrayAssociationType, documentation=u'gml:AbstractTopoPrimitive acts as the base type for all topological primitives. Topology primitives are the atomic (smallest possible) units of a topology complex. \nEach topology primitive may contain references to other topology primitives of codimension 2 or more (gml:isolated). Conversely, nodes may have faces as containers and nodes and edges may have solids as containers (gml:container).'))
TopoPrimitiveArrayAssociationType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=1, element_use=TopoPrimitiveArrayAssociationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractTopoPrimitive'))),
    ])
})



DS_Initiative_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'DS_Initiative'), DS_Initiative_Type, scope=DS_Initiative_PropertyType))
DS_Initiative_PropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DS_Initiative_PropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'DS_Initiative'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



MD_FeatureCatalogueDescription_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'featureCatalogueCitation'), CI_Citation_PropertyType, scope=MD_FeatureCatalogueDescription_Type))

MD_FeatureCatalogueDescription_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'complianceCode'), Boolean_PropertyType, scope=MD_FeatureCatalogueDescription_Type))

MD_FeatureCatalogueDescription_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'includedWithDataset'), Boolean_PropertyType, scope=MD_FeatureCatalogueDescription_Type))

MD_FeatureCatalogueDescription_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'language'), CharacterString_PropertyType, scope=MD_FeatureCatalogueDescription_Type))

MD_FeatureCatalogueDescription_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'featureTypes'), GenericName_PropertyType, scope=MD_FeatureCatalogueDescription_Type))
MD_FeatureCatalogueDescription_Type._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=MD_FeatureCatalogueDescription_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'complianceCode'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=MD_FeatureCatalogueDescription_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'language'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=MD_FeatureCatalogueDescription_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'includedWithDataset'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MD_FeatureCatalogueDescription_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'featureCatalogueCitation'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=MD_FeatureCatalogueDescription_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'featureTypes'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=MD_FeatureCatalogueDescription_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'language'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=MD_FeatureCatalogueDescription_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'includedWithDataset'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MD_FeatureCatalogueDescription_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'featureCatalogueCitation'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=MD_FeatureCatalogueDescription_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'featureTypes'))),
    ])
})



DQ_Result_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'AbstractDQ_Result'), AbstractDQ_Result_Type, abstract=pyxb.binding.datatypes.boolean(1), scope=DQ_Result_PropertyType))
DQ_Result_PropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DQ_Result_PropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'AbstractDQ_Result'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})


TemporalCSType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=TemporalCSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'description'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=TemporalCSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=TemporalCSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=1, element_use=TemporalCSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'metaDataProperty'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=TemporalCSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=TemporalCSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=TemporalCSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=TemporalCSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'axis'))),
    ])
    , 5 : pyxb.binding.content.ContentModelState(state=5, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=TemporalCSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'axis'))),
    ])
    , 6 : pyxb.binding.content.ContentModelState(state=6, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=TemporalCSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=TemporalCSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'axis'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=TemporalCSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'remarks'))),
    ])
})



MD_ImageDescription_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_ImageDescription'), MD_ImageDescription_Type, scope=MD_ImageDescription_PropertyType))
MD_ImageDescription_PropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MD_ImageDescription_PropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_ImageDescription'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



GeometryArrayPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractGeometry'), AbstractGeometryType, abstract=pyxb.binding.datatypes.boolean(1), scope=GeometryArrayPropertyType, documentation=u'The AbstractGeometry element is the abstract head of the substitution group for all geometry elements of GML. This includes pre-defined and user-defined geometry elements. Any geometry element shall be a direct or indirect extension/restriction of AbstractGeometryType and shall be directly or indirectly in the substitution group of AbstractGeometry.'))
GeometryArrayPropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=1, element_use=GeometryArrayPropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractGeometry'))),
    ])
})



DQ_QuantitativeResult_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'DQ_QuantitativeResult'), DQ_QuantitativeResult_Type, scope=DQ_QuantitativeResult_PropertyType))
DQ_QuantitativeResult_PropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DQ_QuantitativeResult_PropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'DQ_QuantitativeResult'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



MD_MediumNameCode_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_MediumNameCode'), CodeListValue_Type, scope=MD_MediumNameCode_PropertyType))
MD_MediumNameCode_PropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MD_MediumNameCode_PropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_MediumNameCode'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



MD_GridSpatialRepresentation_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_GridSpatialRepresentation'), MD_GridSpatialRepresentation_Type, scope=MD_GridSpatialRepresentation_PropertyType))
MD_GridSpatialRepresentation_PropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MD_GridSpatialRepresentation_PropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_GridSpatialRepresentation'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



MD_RestrictionCode_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_RestrictionCode'), CodeListValue_Type, scope=MD_RestrictionCode_PropertyType))
MD_RestrictionCode_PropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MD_RestrictionCode_PropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_RestrictionCode'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



MD_ReferenceSystem_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'referenceSystemIdentifier'), RS_Identifier_PropertyType, scope=MD_ReferenceSystem_Type))
MD_ReferenceSystem_Type._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MD_ReferenceSystem_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'referenceSystemIdentifier'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



DerivedUnitType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'derivationUnitTerm'), DerivationUnitTermType, scope=DerivedUnitType, documentation=u'A set of gml:derivationUnitTerm elements describes a derived unit of measure.  Each element carries an integer exponent.  The terms are combined by raising each referenced unit to the power of its exponent and forming the product.\nThis unit term references another unit of measure (uom) and provides an integer exponent applied to that unit in defining the compound unit. The exponent may be positive or negative, but not zero.'))
DerivedUnitType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=1, element_use=DerivedUnitType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'metaDataProperty'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DerivedUnitType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=DerivedUnitType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=DerivedUnitType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'description'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=DerivedUnitType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'catalogSymbol'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DerivedUnitType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=9, element_use=DerivedUnitType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'quantityType'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=DerivedUnitType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'derivationUnitTerm'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=DerivedUnitType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'quantityTypeReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=DerivedUnitType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'remarks'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=DerivedUnitType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'derivationUnitTerm'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DerivedUnitType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=DerivedUnitType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
    ])
    , 5 : pyxb.binding.content.ContentModelState(state=5, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=DerivedUnitType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'catalogSymbol'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=DerivedUnitType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'derivationUnitTerm'))),
    ])
    , 6 : pyxb.binding.content.ContentModelState(state=6, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DerivedUnitType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
    ])
    , 7 : pyxb.binding.content.ContentModelState(state=7, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=DerivedUnitType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'catalogSymbol'))),
        pyxb.binding.content.ContentModelTransition(next_state=9, element_use=DerivedUnitType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'quantityType'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=DerivedUnitType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'quantityTypeReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=DerivedUnitType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'derivationUnitTerm'))),
    ])
    , 8 : pyxb.binding.content.ContentModelState(state=8, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=DerivedUnitType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'derivationUnitTerm'))),
    ])
    , 9 : pyxb.binding.content.ContentModelState(state=9, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=DerivedUnitType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'catalogSymbol'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=DerivedUnitType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'derivationUnitTerm'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=DerivedUnitType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'quantityTypeReference'))),
    ])
})


DQ_QuantitativeAttributeAccuracy_Type._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=DQ_QuantitativeAttributeAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'measureDescription'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=DQ_QuantitativeAttributeAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationMethodType'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DQ_QuantitativeAttributeAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationProcedure'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=DQ_QuantitativeAttributeAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationMethodDescription'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DQ_QuantitativeAttributeAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'dateTime'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=DQ_QuantitativeAttributeAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'result'))),
        pyxb.binding.content.ContentModelTransition(next_state=1, element_use=DQ_QuantitativeAttributeAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'nameOfMeasure'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=DQ_QuantitativeAttributeAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'measureIdentification'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DQ_QuantitativeAttributeAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'dateTime'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=DQ_QuantitativeAttributeAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'result'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=DQ_QuantitativeAttributeAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationMethodDescription'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DQ_QuantitativeAttributeAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationProcedure'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DQ_QuantitativeAttributeAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'dateTime'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=DQ_QuantitativeAttributeAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'result'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=DQ_QuantitativeAttributeAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'measureDescription'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=DQ_QuantitativeAttributeAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationMethodType'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DQ_QuantitativeAttributeAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationProcedure'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=DQ_QuantitativeAttributeAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationMethodDescription'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DQ_QuantitativeAttributeAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'dateTime'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=DQ_QuantitativeAttributeAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'result'))),
    ])
    , 5 : pyxb.binding.content.ContentModelState(state=5, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DQ_QuantitativeAttributeAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationProcedure'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DQ_QuantitativeAttributeAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'dateTime'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=DQ_QuantitativeAttributeAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'result'))),
    ])
    , 6 : pyxb.binding.content.ContentModelState(state=6, is_final=True, transitions=[
    ])
    , 7 : pyxb.binding.content.ContentModelState(state=7, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=DQ_QuantitativeAttributeAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationMethodType'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=DQ_QuantitativeAttributeAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationMethodDescription'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DQ_QuantitativeAttributeAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'dateTime'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DQ_QuantitativeAttributeAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationProcedure'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=DQ_QuantitativeAttributeAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'result'))),
    ])
    , 8 : pyxb.binding.content.ContentModelState(state=8, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=DQ_QuantitativeAttributeAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'result'))),
    ])
})



PrimeMeridianPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'PrimeMeridian'), PrimeMeridianType, scope=PrimeMeridianPropertyType, documentation=u'A gml:PrimeMeridian defines the origin from which longitude values are determined. The default value for the prime meridian gml:identifier value is "Greenwich".'))
PrimeMeridianPropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=PrimeMeridianPropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'PrimeMeridian'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



CI_Address_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'CI_Address'), CI_Address_Type, scope=CI_Address_PropertyType))
CI_Address_PropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=CI_Address_PropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'CI_Address'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



VerticalDatumPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'VerticalDatum'), VerticalDatumType, scope=VerticalDatumPropertyType, documentation=u'gml:VerticalDatum is a textual description and/or a set of parameters identifying a particular reference level surface used as a zero-height surface, including its position with respect to the Earth for any of the height types recognized by this International Standard.'))
VerticalDatumPropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=VerticalDatumPropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'VerticalDatum'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



MD_ExtendedElementInformation_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_ExtendedElementInformation'), MD_ExtendedElementInformation_Type, scope=MD_ExtendedElementInformation_PropertyType))
MD_ExtendedElementInformation_PropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MD_ExtendedElementInformation_PropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_ExtendedElementInformation'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



GeometricComplexType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'element'), GeometricPrimitivePropertyType, scope=GeometricComplexType))
GeometricComplexType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=GeometricComplexType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=GeometricComplexType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=GeometricComplexType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=GeometricComplexType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'element'))),
        pyxb.binding.content.ContentModelTransition(next_state=1, element_use=GeometricComplexType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'metaDataProperty'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=GeometricComplexType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'description'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=GeometricComplexType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'element'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=GeometricComplexType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=GeometricComplexType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'element'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=GeometricComplexType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=GeometricComplexType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=GeometricComplexType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'element'))),
    ])
    , 5 : pyxb.binding.content.ContentModelState(state=5, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=GeometricComplexType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=GeometricComplexType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'element'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=GeometricComplexType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=GeometricComplexType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
    ])
})



TimeCalendarType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'referenceFrame'), TimeCalendarEraPropertyType, scope=TimeCalendarType))
TimeCalendarType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=1, element_use=TimeCalendarType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'metaDataProperty'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=TimeCalendarType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'description'))),
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=TimeCalendarType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=TimeCalendarType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=TimeCalendarType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=TimeCalendarType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=TimeCalendarType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'referenceFrame'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=TimeCalendarType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
    ])
    , 5 : pyxb.binding.content.ContentModelState(state=5, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=TimeCalendarType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'domainOfValidity'))),
    ])
    , 6 : pyxb.binding.content.ContentModelState(state=6, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=TimeCalendarType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'referenceFrame'))),
    ])
    , 7 : pyxb.binding.content.ContentModelState(state=7, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=TimeCalendarType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=TimeCalendarType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'remarks'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=TimeCalendarType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'domainOfValidity'))),
    ])
})



TimePeriodType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'timeInterval'), TimeIntervalLengthType, scope=TimePeriodType, documentation=u' gml:timeInterval conforms to ISO 11404 which is based on floating point values for temporal length.\nISO 11404 syntax specifies the use of a positiveInteger together with appropriate values for radix and factor. The resolution of the time interval is to one radix ^(-factor) of the specified time unit.\nThe value of the unit is either selected from the units for time intervals from ISO 31-1:1992, or is another suitable unit.  The encoding is defined for GML in gml:TimeUnitType. The second component of this union type provides a method for indicating time units other than the six standard units given in the enumeration.'))

TimePeriodType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'beginPosition'), TimePositionType, scope=TimePeriodType))

TimePeriodType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'begin'), TimeInstantPropertyType, scope=TimePeriodType))

TimePeriodType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'endPosition'), TimePositionType, scope=TimePeriodType))

TimePeriodType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'end'), TimeInstantPropertyType, scope=TimePeriodType))

TimePeriodType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'duration'), pyxb.binding.datatypes.duration, scope=TimePeriodType, documentation=u'gml:duration conforms to the ISO 8601 syntax for temporal length as implemented by the XML Schema duration type.'))
TimePeriodType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=TimePeriodType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'beginPosition'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=TimePeriodType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=TimePeriodType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=TimePeriodType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=TimePeriodType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'begin'))),
        pyxb.binding.content.ContentModelTransition(next_state=1, element_use=TimePeriodType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'metaDataProperty'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=TimePeriodType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'relatedTime'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=TimePeriodType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'description'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=TimePeriodType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'endPosition'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=TimePeriodType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'end'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=TimePeriodType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=TimePeriodType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'beginPosition'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=TimePeriodType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'begin'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=TimePeriodType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'relatedTime'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=TimePeriodType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=TimePeriodType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'beginPosition'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=TimePeriodType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=TimePeriodType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=TimePeriodType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=TimePeriodType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'begin'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=TimePeriodType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'relatedTime'))),
    ])
    , 5 : pyxb.binding.content.ContentModelState(state=5, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=TimePeriodType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'timeInterval'))),
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=TimePeriodType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'duration'))),
    ])
    , 6 : pyxb.binding.content.ContentModelState(state=6, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=TimePeriodType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'beginPosition'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=TimePeriodType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'begin'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=TimePeriodType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'relatedTime'))),
    ])
    , 7 : pyxb.binding.content.ContentModelState(state=7, is_final=True, transitions=[
    ])
    , 8 : pyxb.binding.content.ContentModelState(state=8, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=TimePeriodType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'beginPosition'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=TimePeriodType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=TimePeriodType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'begin'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=TimePeriodType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'relatedTime'))),
    ])
})



MD_CoverageDescription_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_CoverageDescription'), MD_CoverageDescription_Type, scope=MD_CoverageDescription_PropertyType))
MD_CoverageDescription_PropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MD_CoverageDescription_PropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_CoverageDescription'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



PolygonType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'exterior'), AbstractRingPropertyType, scope=PolygonType, documentation=u'A boundary of a surface consists of a number of rings. In the normal 2D case, one of these rings is distinguished as being the exterior boundary. In a general manifold this is not always possible, in which case all boundaries shall be listed as interior boundaries, and the exterior will be empty.'))

PolygonType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'interior'), AbstractRingPropertyType, scope=PolygonType, documentation=u'A boundary of a surface consists of a number of rings. The "interior" rings separate the surface / surface patch from the area enclosed by the rings.'))
PolygonType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=PolygonType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=PolygonType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=PolygonType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=PolygonType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'description'))),
        pyxb.binding.content.ContentModelTransition(next_state=1, element_use=PolygonType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'metaDataProperty'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=PolygonType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'exterior'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=PolygonType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'interior'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=PolygonType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'interior'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=PolygonType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=PolygonType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=PolygonType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'exterior'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=PolygonType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'interior'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=PolygonType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=PolygonType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=PolygonType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=PolygonType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'exterior'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=PolygonType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'interior'))),
    ])
    , 5 : pyxb.binding.content.ContentModelState(state=5, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=PolygonType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=PolygonType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'exterior'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=PolygonType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'interior'))),
    ])
})



MD_PortrayalCatalogueReference_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_PortrayalCatalogueReference'), MD_PortrayalCatalogueReference_Type, scope=MD_PortrayalCatalogueReference_PropertyType))
MD_PortrayalCatalogueReference_PropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MD_PortrayalCatalogueReference_PropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_PortrayalCatalogueReference'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



MD_SecurityConstraints_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'handlingDescription'), CharacterString_PropertyType, scope=MD_SecurityConstraints_Type))

MD_SecurityConstraints_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'classification'), MD_ClassificationCode_PropertyType, scope=MD_SecurityConstraints_Type))

MD_SecurityConstraints_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'classificationSystem'), CharacterString_PropertyType, scope=MD_SecurityConstraints_Type))

MD_SecurityConstraints_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'userNote'), CharacterString_PropertyType, scope=MD_SecurityConstraints_Type))
MD_SecurityConstraints_Type._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=1, element_use=MD_SecurityConstraints_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'useLimitation'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MD_SecurityConstraints_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'classification'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=MD_SecurityConstraints_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'userNote'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=MD_SecurityConstraints_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'classificationSystem'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=MD_SecurityConstraints_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'handlingDescription'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=MD_SecurityConstraints_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'classificationSystem'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=MD_SecurityConstraints_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'handlingDescription'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=MD_SecurityConstraints_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'handlingDescription'))),
    ])
    , 5 : pyxb.binding.content.ContentModelState(state=5, is_final=True, transitions=[
    ])
})


DQ_CompletenessOmission_Type._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=DQ_CompletenessOmission_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'measureDescription'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=DQ_CompletenessOmission_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationMethodType'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DQ_CompletenessOmission_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationProcedure'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=DQ_CompletenessOmission_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationMethodDescription'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DQ_CompletenessOmission_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'dateTime'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=DQ_CompletenessOmission_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'result'))),
        pyxb.binding.content.ContentModelTransition(next_state=1, element_use=DQ_CompletenessOmission_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'nameOfMeasure'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=DQ_CompletenessOmission_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'measureIdentification'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DQ_CompletenessOmission_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'dateTime'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=DQ_CompletenessOmission_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'result'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=DQ_CompletenessOmission_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationMethodDescription'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DQ_CompletenessOmission_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationProcedure'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DQ_CompletenessOmission_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'dateTime'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=DQ_CompletenessOmission_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'result'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=DQ_CompletenessOmission_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'measureDescription'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=DQ_CompletenessOmission_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationMethodType'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DQ_CompletenessOmission_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationProcedure'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=DQ_CompletenessOmission_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationMethodDescription'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DQ_CompletenessOmission_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'dateTime'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=DQ_CompletenessOmission_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'result'))),
    ])
    , 5 : pyxb.binding.content.ContentModelState(state=5, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DQ_CompletenessOmission_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationProcedure'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DQ_CompletenessOmission_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'dateTime'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=DQ_CompletenessOmission_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'result'))),
    ])
    , 6 : pyxb.binding.content.ContentModelState(state=6, is_final=True, transitions=[
    ])
    , 7 : pyxb.binding.content.ContentModelState(state=7, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=DQ_CompletenessOmission_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationMethodType'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=DQ_CompletenessOmission_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationMethodDescription'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DQ_CompletenessOmission_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'dateTime'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DQ_CompletenessOmission_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationProcedure'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=DQ_CompletenessOmission_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'result'))),
    ])
    , 8 : pyxb.binding.content.ContentModelState(state=8, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=DQ_CompletenessOmission_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'result'))),
    ])
})



MemberName_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gco, u'attributeType'), TypeName_PropertyType, scope=MemberName_Type))

MemberName_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gco, u'aName'), CharacterString_PropertyType, scope=MemberName_Type))
MemberName_Type._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MemberName_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gco, u'aName'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=MemberName_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gco, u'attributeType'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=True, transitions=[
    ])
})



MD_Dimension_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_Dimension'), MD_Dimension_Type, scope=MD_Dimension_PropertyType))
MD_Dimension_PropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MD_Dimension_PropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_Dimension'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



DirectionDescriptionType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'compassPoint'), CompassPointEnumeration, scope=DirectionDescriptionType))

DirectionDescriptionType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'keyword'), CodeType, scope=DirectionDescriptionType))

DirectionDescriptionType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'reference'), ReferenceType, scope=DirectionDescriptionType))

DirectionDescriptionType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'description'), pyxb.binding.datatypes.string, scope=DirectionDescriptionType))
DirectionDescriptionType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DirectionDescriptionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'compassPoint'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DirectionDescriptionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'keyword'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DirectionDescriptionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'reference'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DirectionDescriptionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'description'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



CI_Date_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'dateType'), CI_DateTypeCode_PropertyType, scope=CI_Date_Type))

CI_Date_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'date'), Date_PropertyType, scope=CI_Date_Type))
CI_Date_Type._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=CI_Date_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'date'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=CI_Date_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'dateType'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=True, transitions=[
    ])
})


DS_ProductionSeries_Type._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DS_ProductionSeries_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'composedOf'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DS_ProductionSeries_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'composedOf'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=DS_ProductionSeries_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'seriesMetadata'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=DS_ProductionSeries_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'seriesMetadata'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=DS_ProductionSeries_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'superset'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=DS_ProductionSeries_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'subset'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=DS_ProductionSeries_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'superset'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=DS_ProductionSeries_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'subset'))),
    ])
})



MappingRuleType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'ruleDefinition'), pyxb.binding.datatypes.string, scope=MappingRuleType))

MappingRuleType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'ruleReference'), ReferenceType, scope=MappingRuleType))
MappingRuleType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MappingRuleType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'ruleDefinition'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MappingRuleType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'ruleReference'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



VerticalCSPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'VerticalCS'), VerticalCSType, scope=VerticalCSPropertyType, documentation=u"gml:VerticalCS is a one-dimensional coordinate system used to record the heights or depths of points. Such a coordinate system is usually dependent on the Earth's gravity field, perhaps loosely as when atmospheric pressure is the basis for the vertical coordinate system axis. A VerticalCS shall have one gml:axis property element."))
VerticalCSPropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=VerticalCSPropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'VerticalCS'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



TimeClockPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'TimeClock'), TimeClockType, scope=TimeClockPropertyType, documentation=u'A clock provides a basis for defining temporal position within a day. A clock shall be used with a calendar in order to provide a complete description of a temporal position within a specific day.\ngml:TimeClock adds the following properties to those inherited from gml:TimeReferenceSystemType:\n-\tgml:referenceEvent is the name or description of an event, such as solar noon or sunrise, which fixes the position of the base scale of the clock.\n-\tgml:referenceTime specifies the time of day associated with the reference event expressed as a time of day in the given clock. The reference time is usually the origin of the clock scale. \n-\tgml:utcReference specifies the 24 hour local or UTC time that corresponds to the reference time.\n-\tgml:dateBasis contains or references the calendars that use this clock.'))
TimeClockPropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=TimeClockPropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'TimeClock'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



MetaDataPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractMetaData'), AbstractMetaDataType, abstract=pyxb.binding.datatypes.boolean(1), scope=MetaDataPropertyType, documentation=u''))
MetaDataPropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MetaDataPropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractMetaData'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



EngineeringCRSType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'sphericalCS'), SphericalCSPropertyType, scope=EngineeringCRSType, documentation=u'gml:sphericalCS is an association role to the spherical coordinate system used by this CRS.'))

EngineeringCRSType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'cylindricalCS'), CylindricalCSPropertyType, scope=EngineeringCRSType, documentation=u'gml:cylindricalCS is an association role to the cylindrical coordinate system used by this CRS.'))

EngineeringCRSType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'affineCS'), AffineCSPropertyType, scope=EngineeringCRSType, documentation=u'gml:affineCS is an association role to the affine coordinate system used by this CRS.'))

EngineeringCRSType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'linearCS'), LinearCSPropertyType, scope=EngineeringCRSType, documentation=u'gml:linearCS is an association role to the linear coordinate system used by this CRS.'))

EngineeringCRSType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'userDefinedCS'), UserDefinedCSPropertyType, scope=EngineeringCRSType, documentation=u'gml:userDefinedCS is an association role to the user defined coordinate system used by this CRS.'))

EngineeringCRSType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'cartesianCS'), CartesianCSPropertyType, scope=EngineeringCRSType, documentation=u'gml:cartesianCS is an association role to the Cartesian coordinate system used by this CRS.'))

EngineeringCRSType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'engineeringDatum'), EngineeringDatumPropertyType, scope=EngineeringCRSType, documentation=u'gml:engineeringDatum is an association role to the engineering datum used by this CRS.'))

EngineeringCRSType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'coordinateSystem'), CoordinateSystemPropertyType, scope=EngineeringCRSType, documentation=u'An association role to the coordinate system used by this CRS.'))

EngineeringCRSType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'polarCS'), PolarCSPropertyType, scope=EngineeringCRSType, documentation=u'gml:polarCS is an association role to the polar coordinate system used by this CRS.'))
EngineeringCRSType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=EngineeringCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=1, element_use=EngineeringCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'metaDataProperty'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=EngineeringCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=EngineeringCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'description'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=EngineeringCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'domainOfValidity'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=EngineeringCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'scope'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=EngineeringCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'remarks'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=EngineeringCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=EngineeringCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'domainOfValidity'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=EngineeringCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'scope'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=EngineeringCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
    ])
    , 5 : pyxb.binding.content.ContentModelState(state=5, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=EngineeringCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'sphericalCS'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=EngineeringCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'cylindricalCS'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=EngineeringCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'affineCS'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=EngineeringCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'userDefinedCS'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=EngineeringCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'cartesianCS'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=EngineeringCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'coordinateSystem'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=EngineeringCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'domainOfValidity'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=EngineeringCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'linearCS'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=EngineeringCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'scope'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=EngineeringCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'polarCS'))),
    ])
    , 6 : pyxb.binding.content.ContentModelState(state=6, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=EngineeringCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=EngineeringCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
    ])
    , 7 : pyxb.binding.content.ContentModelState(state=7, is_final=True, transitions=[
    ])
    , 8 : pyxb.binding.content.ContentModelState(state=8, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=EngineeringCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'engineeringDatum'))),
    ])
})



TopoSolidType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'isolated'), NodeOrEdgePropertyType, scope=TopoSolidType))

TopoSolidType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'directedFace'), DirectedFacePropertyType, scope=TopoSolidType, documentation=u'The gml:directedFace property element describes the boundary of topology solids, in the coBoundary of topology edges and is used in the support of surface features via the gml:TopoSurface expression, see below. The orientation attribute of type gml:SignType expresses the sense in which the included face is used i.e. inward or outward with respect to the surface normal in any geometric realisation.'))

TopoSolidType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'solidProperty'), SolidPropertyType, scope=TopoSolidType, documentation=u'This property element either references a solid via the XLink-attributes or contains the solid element. solidProperty is the predefined property which may be used by GML Application Schemas whenever a GML feature has a property with a value that is substitutable for AbstractSolid.'))
TopoSolidType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=TopoSolidType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=TopoSolidType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'isolated'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=TopoSolidType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=TopoSolidType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=1, element_use=TopoSolidType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'metaDataProperty'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=TopoSolidType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'directedFace'))),
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=TopoSolidType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'description'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=TopoSolidType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'isolated'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=TopoSolidType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=TopoSolidType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'directedFace'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=TopoSolidType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'isolated'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=TopoSolidType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'directedFace'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=True, transitions=[
    ])
    , 5 : pyxb.binding.content.ContentModelState(state=5, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=TopoSolidType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'isolated'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=TopoSolidType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=TopoSolidType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=TopoSolidType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'directedFace'))),
    ])
    , 6 : pyxb.binding.content.ContentModelState(state=6, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=TopoSolidType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'isolated'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=TopoSolidType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'directedFace'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=TopoSolidType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'solidProperty'))),
    ])
    , 7 : pyxb.binding.content.ContentModelState(state=7, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=TopoSolidType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'isolated'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=TopoSolidType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=TopoSolidType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=TopoSolidType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'directedFace'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=TopoSolidType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
    ])
})


DQ_TopologicalConsistency_Type._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=DQ_TopologicalConsistency_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'measureDescription'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=DQ_TopologicalConsistency_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationMethodType'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DQ_TopologicalConsistency_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationProcedure'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=DQ_TopologicalConsistency_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationMethodDescription'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DQ_TopologicalConsistency_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'dateTime'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=DQ_TopologicalConsistency_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'result'))),
        pyxb.binding.content.ContentModelTransition(next_state=1, element_use=DQ_TopologicalConsistency_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'nameOfMeasure'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=DQ_TopologicalConsistency_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'measureIdentification'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DQ_TopologicalConsistency_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'dateTime'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=DQ_TopologicalConsistency_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'result'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=DQ_TopologicalConsistency_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationMethodDescription'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DQ_TopologicalConsistency_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationProcedure'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DQ_TopologicalConsistency_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'dateTime'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=DQ_TopologicalConsistency_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'result'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=DQ_TopologicalConsistency_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'measureDescription'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=DQ_TopologicalConsistency_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationMethodType'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DQ_TopologicalConsistency_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationProcedure'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=DQ_TopologicalConsistency_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationMethodDescription'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DQ_TopologicalConsistency_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'dateTime'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=DQ_TopologicalConsistency_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'result'))),
    ])
    , 5 : pyxb.binding.content.ContentModelState(state=5, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DQ_TopologicalConsistency_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationProcedure'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DQ_TopologicalConsistency_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'dateTime'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=DQ_TopologicalConsistency_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'result'))),
    ])
    , 6 : pyxb.binding.content.ContentModelState(state=6, is_final=True, transitions=[
    ])
    , 7 : pyxb.binding.content.ContentModelState(state=7, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=DQ_TopologicalConsistency_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationMethodType'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=DQ_TopologicalConsistency_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationMethodDescription'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DQ_TopologicalConsistency_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'dateTime'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DQ_TopologicalConsistency_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationProcedure'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=DQ_TopologicalConsistency_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'result'))),
    ])
    , 8 : pyxb.binding.content.ContentModelState(state=8, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=DQ_TopologicalConsistency_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'result'))),
    ])
})



UnitOfMeasure_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'UnitDefinition'), UnitDefinitionType, scope=UnitOfMeasure_PropertyType, documentation=u'A gml:UnitDefinition is a general definition of a unit of measure. This generic element is used only for units for which no relationship with other units or units systems is known.\nThe content model of gml:UnitDefinition adds three additional properties to gml:Definition, gml:quantityType, gml:quantityTypeReference and gml:catalogSymbol.  \nThe gml:catalogSymbol property optionally gives the short symbol used for this unit. This element is usually used when the relationship of this unit to other units or units systems is unknown.'))
UnitOfMeasure_PropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=UnitOfMeasure_PropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'UnitDefinition'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



ConventionalUnitType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'roughConversionToPreferredUnit'), ConversionToPreferredUnitType, scope=ConventionalUnitType, documentation=u'The elements gml:conversionToPreferredUnit and gml:roughConversionToPreferredUnit represent parameters used to convert conventional units to preferred units for this physical quantity type.  A preferred unit is either a Base Unit or a Derived Unit that is selected for all values of one physical quantity type.'))

ConventionalUnitType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'conversionToPreferredUnit'), ConversionToPreferredUnitType, scope=ConventionalUnitType, documentation=u'The elements gml:conversionToPreferredUnit and gml:roughConversionToPreferredUnit represent parameters used to convert conventional units to preferred units for this physical quantity type.  A preferred unit is either a Base Unit or a Derived Unit that is selected for all values of one physical quantity type.'))

ConventionalUnitType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'derivationUnitTerm'), DerivationUnitTermType, scope=ConventionalUnitType, documentation=u'A set of gml:derivationUnitTerm elements describes a derived unit of measure.  Each element carries an integer exponent.  The terms are combined by raising each referenced unit to the power of its exponent and forming the product.\nThis unit term references another unit of measure (uom) and provides an integer exponent applied to that unit in defining the compound unit. The exponent may be positive or negative, but not zero.'))
ConventionalUnitType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=1, element_use=ConventionalUnitType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'metaDataProperty'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=ConventionalUnitType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=ConventionalUnitType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=ConventionalUnitType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'description'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=ConventionalUnitType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'catalogSymbol'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=ConventionalUnitType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=9, element_use=ConventionalUnitType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'roughConversionToPreferredUnit'))),
        pyxb.binding.content.ContentModelTransition(next_state=9, element_use=ConventionalUnitType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'conversionToPreferredUnit'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=ConventionalUnitType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'quantityType'))),
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=ConventionalUnitType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'quantityTypeReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=ConventionalUnitType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'remarks'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=9, element_use=ConventionalUnitType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'roughConversionToPreferredUnit'))),
        pyxb.binding.content.ContentModelTransition(next_state=9, element_use=ConventionalUnitType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'conversionToPreferredUnit'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=ConventionalUnitType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=ConventionalUnitType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
    ])
    , 5 : pyxb.binding.content.ContentModelState(state=5, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=9, element_use=ConventionalUnitType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'roughConversionToPreferredUnit'))),
        pyxb.binding.content.ContentModelTransition(next_state=9, element_use=ConventionalUnitType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'conversionToPreferredUnit'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=ConventionalUnitType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'catalogSymbol'))),
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=ConventionalUnitType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'quantityTypeReference'))),
    ])
    , 6 : pyxb.binding.content.ContentModelState(state=6, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=ConventionalUnitType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
    ])
    , 7 : pyxb.binding.content.ContentModelState(state=7, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=9, element_use=ConventionalUnitType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'roughConversionToPreferredUnit'))),
        pyxb.binding.content.ContentModelTransition(next_state=9, element_use=ConventionalUnitType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'conversionToPreferredUnit'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=ConventionalUnitType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'catalogSymbol'))),
    ])
    , 8 : pyxb.binding.content.ContentModelState(state=8, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=9, element_use=ConventionalUnitType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'roughConversionToPreferredUnit'))),
        pyxb.binding.content.ContentModelTransition(next_state=9, element_use=ConventionalUnitType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'conversionToPreferredUnit'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=ConventionalUnitType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'catalogSymbol'))),
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=ConventionalUnitType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'quantityTypeReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=ConventionalUnitType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'quantityType'))),
    ])
    , 9 : pyxb.binding.content.ContentModelState(state=9, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=9, element_use=ConventionalUnitType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'derivationUnitTerm'))),
    ])
})



DQ_AbsoluteExternalPositionalAccuracy_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'DQ_AbsoluteExternalPositionalAccuracy'), DQ_AbsoluteExternalPositionalAccuracy_Type, scope=DQ_AbsoluteExternalPositionalAccuracy_PropertyType))
DQ_AbsoluteExternalPositionalAccuracy_PropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DQ_AbsoluteExternalPositionalAccuracy_PropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'DQ_AbsoluteExternalPositionalAccuracy'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



MultiSolidPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'MultiSolid'), MultiSolidType, scope=MultiSolidPropertyType, documentation=u'A gml:MultiSolid is defined by one or more gml:AbstractSolids.\nThe members of the geometric aggregate may be specified either using the "standard" property (gml:solidMember) or the array property (gml:solidMembers). It is also valid to use both the "standard" and the array properties in the same collection.'))
MultiSolidPropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MultiSolidPropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'MultiSolid'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



DMSAngleType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'decimalMinutes'), DecimalMinutesType, scope=DMSAngleType, documentation=u''))

DMSAngleType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'degrees'), DegreesType, scope=DMSAngleType, documentation=u''))

DMSAngleType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'seconds'), ArcSecondsType, scope=DMSAngleType, documentation=u''))

DMSAngleType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'minutes'), ArcMinutesType, scope=DMSAngleType, documentation=u''))
DMSAngleType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=DMSAngleType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'degrees'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=DMSAngleType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'minutes'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DMSAngleType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'decimalMinutes'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DMSAngleType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'seconds'))),
    ])
})



ProcedurePropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractFeature'), AbstractFeatureType, abstract=pyxb.binding.datatypes.boolean(1), scope=ProcedurePropertyType, documentation=u'This abstract element serves as the head of a substitution group which may contain any elements whose content model is derived from gml:AbstractFeatureType.  This may be used as a variable in the construction of content models.  \ngml:AbstractFeature may be thought of as "anything that is a GML feature" and may be used to define variables or templates in which the value of a GML property is "any feature". This occurs in particular in a GML feature collection where the feature member properties contain one or multiple copies of gml:AbstractFeature respectively.'))
ProcedurePropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=ProcedurePropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractFeature'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



MD_VectorSpatialRepresentation_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'geometricObjects'), MD_GeometricObjects_PropertyType, scope=MD_VectorSpatialRepresentation_Type))

MD_VectorSpatialRepresentation_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'topologyLevel'), MD_TopologyLevelCode_PropertyType, scope=MD_VectorSpatialRepresentation_Type))
MD_VectorSpatialRepresentation_Type._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MD_VectorSpatialRepresentation_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'topologyLevel'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MD_VectorSpatialRepresentation_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'geometricObjects'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MD_VectorSpatialRepresentation_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'geometricObjects'))),
    ])
})



TinType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'controlPoint'), CTD_ANON_11, scope=TinType))

TinType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'stopLines'), LineStringSegmentArrayPropertyType, scope=TinType))

TinType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'breakLines'), LineStringSegmentArrayPropertyType, scope=TinType))

TinType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'maxLength'), LengthType, scope=TinType))
TinType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=TinType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'patches'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=TinType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=TinType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=TinType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=1, element_use=TinType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'metaDataProperty'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=TinType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'description'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=TinType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'breakLines'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=TinType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'maxLength'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=TinType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'stopLines'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=TinType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=TinType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'patches'))),
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=TinType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=TinType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'controlPoint'))),
    ])
    , 5 : pyxb.binding.content.ContentModelState(state=5, is_final=True, transitions=[
    ])
    , 6 : pyxb.binding.content.ContentModelState(state=6, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=TinType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=TinType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=TinType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'patches'))),
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=TinType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
    ])
    , 7 : pyxb.binding.content.ContentModelState(state=7, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=TinType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'patches'))),
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=TinType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
    ])
})



SC_CRS_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractCRS'), AbstractCRSType, abstract=pyxb.binding.datatypes.boolean(1), scope=SC_CRS_PropertyType, documentation=u'gml:AbstractCRS specifies a coordinate reference system which is usually single but may be compound. This abstract complex type shall not be used, extended, or restricted, in a GML Application Schema, to define a concrete subtype with a meaning equivalent to a concrete subtype specified in this document.'))
SC_CRS_PropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=SC_CRS_PropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractCRS'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



PointArrayPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'Point'), PointType, scope=PointArrayPropertyType, documentation=u'A Point is defined by a single coordinate tuple. The direct position of a point is specified by the pos element which is of type DirectPositionType.'))
PointArrayPropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=1, element_use=PointArrayPropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'Point'))),
    ])
})



DynamicFeatureCollectionType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'dynamicMembers'), DynamicFeatureMemberType, scope=DynamicFeatureCollectionType))
DynamicFeatureCollectionType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DynamicFeatureCollectionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'validTime'))),
        pyxb.binding.content.ContentModelTransition(next_state=10, element_use=DynamicFeatureCollectionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=DynamicFeatureCollectionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'boundedBy'))),
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=DynamicFeatureCollectionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'dynamicMembers'))),
        pyxb.binding.content.ContentModelTransition(next_state=9, element_use=DynamicFeatureCollectionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'dataSource'))),
        pyxb.binding.content.ContentModelTransition(next_state=11, element_use=DynamicFeatureCollectionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=DynamicFeatureCollectionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'history'))),
        pyxb.binding.content.ContentModelTransition(next_state=11, element_use=DynamicFeatureCollectionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=DynamicFeatureCollectionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'dataSourceReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=1, element_use=DynamicFeatureCollectionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'metaDataProperty'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=DynamicFeatureCollectionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'location'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=DynamicFeatureCollectionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'description'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=DynamicFeatureCollectionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'history'))),
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=DynamicFeatureCollectionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'dynamicMembers'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=DynamicFeatureCollectionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'dataSourceReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=9, element_use=DynamicFeatureCollectionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'dataSource'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=DynamicFeatureCollectionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'dynamicMembers'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=DynamicFeatureCollectionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'dataSourceReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=9, element_use=DynamicFeatureCollectionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'dataSource'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=DynamicFeatureCollectionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'dynamicMembers'))),
    ])
    , 5 : pyxb.binding.content.ContentModelState(state=5, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DynamicFeatureCollectionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'validTime'))),
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=DynamicFeatureCollectionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'dynamicMembers'))),
        pyxb.binding.content.ContentModelTransition(next_state=9, element_use=DynamicFeatureCollectionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'dataSource'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=DynamicFeatureCollectionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'location'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=DynamicFeatureCollectionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'history'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=DynamicFeatureCollectionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'dataSourceReference'))),
    ])
    , 6 : pyxb.binding.content.ContentModelState(state=6, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DynamicFeatureCollectionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'validTime'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=DynamicFeatureCollectionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'history'))),
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=DynamicFeatureCollectionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'dynamicMembers'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=DynamicFeatureCollectionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'dataSourceReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=9, element_use=DynamicFeatureCollectionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'dataSource'))),
    ])
    , 7 : pyxb.binding.content.ContentModelState(state=7, is_final=True, transitions=[
    ])
    , 8 : pyxb.binding.content.ContentModelState(state=8, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DynamicFeatureCollectionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'validTime'))),
        pyxb.binding.content.ContentModelTransition(next_state=10, element_use=DynamicFeatureCollectionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=DynamicFeatureCollectionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'boundedBy'))),
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=DynamicFeatureCollectionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'dynamicMembers'))),
        pyxb.binding.content.ContentModelTransition(next_state=9, element_use=DynamicFeatureCollectionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'dataSource'))),
        pyxb.binding.content.ContentModelTransition(next_state=11, element_use=DynamicFeatureCollectionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=DynamicFeatureCollectionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'history'))),
        pyxb.binding.content.ContentModelTransition(next_state=11, element_use=DynamicFeatureCollectionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=DynamicFeatureCollectionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'dataSourceReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=DynamicFeatureCollectionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'location'))),
    ])
    , 9 : pyxb.binding.content.ContentModelState(state=9, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=DynamicFeatureCollectionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'dynamicMembers'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=DynamicFeatureCollectionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'dataSourceReference'))),
    ])
    , 10 : pyxb.binding.content.ContentModelState(state=10, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DynamicFeatureCollectionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'validTime'))),
        pyxb.binding.content.ContentModelTransition(next_state=11, element_use=DynamicFeatureCollectionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=DynamicFeatureCollectionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'boundedBy'))),
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=DynamicFeatureCollectionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'dynamicMembers'))),
        pyxb.binding.content.ContentModelTransition(next_state=9, element_use=DynamicFeatureCollectionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'dataSource'))),
        pyxb.binding.content.ContentModelTransition(next_state=11, element_use=DynamicFeatureCollectionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=DynamicFeatureCollectionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'history'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=DynamicFeatureCollectionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'dataSourceReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=DynamicFeatureCollectionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'location'))),
    ])
    , 11 : pyxb.binding.content.ContentModelState(state=11, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DynamicFeatureCollectionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'validTime'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=DynamicFeatureCollectionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'boundedBy'))),
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=DynamicFeatureCollectionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'dynamicMembers'))),
        pyxb.binding.content.ContentModelTransition(next_state=9, element_use=DynamicFeatureCollectionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'dataSource'))),
        pyxb.binding.content.ContentModelTransition(next_state=11, element_use=DynamicFeatureCollectionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=DynamicFeatureCollectionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'history'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=DynamicFeatureCollectionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'dataSourceReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=DynamicFeatureCollectionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'location'))),
    ])
})



MD_PortrayalCatalogueReference_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'portrayalCatalogueCitation'), CI_Citation_PropertyType, scope=MD_PortrayalCatalogueReference_Type))
MD_PortrayalCatalogueReference_Type._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MD_PortrayalCatalogueReference_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'portrayalCatalogueCitation'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MD_PortrayalCatalogueReference_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'portrayalCatalogueCitation'))),
    ])
})



MD_Distributor_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'distributorTransferOptions'), MD_DigitalTransferOptions_PropertyType, scope=MD_Distributor_Type))

MD_Distributor_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'distributorContact'), CI_ResponsibleParty_PropertyType, scope=MD_Distributor_Type))

MD_Distributor_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'distributionOrderProcess'), MD_StandardOrderProcess_PropertyType, scope=MD_Distributor_Type))

MD_Distributor_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'distributorFormat'), MD_Format_PropertyType, scope=MD_Distributor_Type))
MD_Distributor_Type._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MD_Distributor_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'distributorContact'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MD_Distributor_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'distributionOrderProcess'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MD_Distributor_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'distributorTransferOptions'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MD_Distributor_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'distributorFormat'))),
    ])
})



ShellType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'surfaceMember'), SurfacePropertyType, scope=ShellType, documentation=u'This property element either references a surface via the XLink-attributes or contains the surface element. A surface element is any element, which is substitutable for gml:AbstractSurface.'))
ShellType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=ShellType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'surfaceMember'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=ShellType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'surfaceMember'))),
    ])
})



MD_Keywords_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'thesaurusName'), CI_Citation_PropertyType, scope=MD_Keywords_Type))

MD_Keywords_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'keyword'), CharacterString_PropertyType, scope=MD_Keywords_Type))

MD_Keywords_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'type'), MD_KeywordTypeCode_PropertyType, scope=MD_Keywords_Type))
MD_Keywords_Type._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MD_Keywords_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'keyword'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MD_Keywords_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'keyword'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=MD_Keywords_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'type'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=MD_Keywords_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'thesaurusName'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=MD_Keywords_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'thesaurusName'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=True, transitions=[
    ])
})



MD_ImagingConditionCode_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_ImagingConditionCode'), CodeListValue_Type, scope=MD_ImagingConditionCode_PropertyType))
MD_ImagingConditionCode_PropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MD_ImagingConditionCode_PropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_ImagingConditionCode'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})


OperationParameterType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=OperationParameterType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'description'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=OperationParameterType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=OperationParameterType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=1, element_use=OperationParameterType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'metaDataProperty'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=OperationParameterType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=OperationParameterType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=OperationParameterType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=True, transitions=[
    ])
    , 5 : pyxb.binding.content.ContentModelState(state=5, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=OperationParameterType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'minimumOccurs'))),
    ])
    , 6 : pyxb.binding.content.ContentModelState(state=6, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=OperationParameterType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=OperationParameterType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'minimumOccurs'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=OperationParameterType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'remarks'))),
    ])
})


AbstractGeneralConversionType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=AbstractGeneralConversionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=1, element_use=AbstractGeneralConversionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'metaDataProperty'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=AbstractGeneralConversionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=AbstractGeneralConversionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'description'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=AbstractGeneralConversionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=AbstractGeneralConversionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'scope'))),
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=AbstractGeneralConversionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'domainOfValidity'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=AbstractGeneralConversionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'coordinateOperationAccuracy'))),
    ])
    , 5 : pyxb.binding.content.ContentModelState(state=5, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=AbstractGeneralConversionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=AbstractGeneralConversionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
    ])
    , 6 : pyxb.binding.content.ContentModelState(state=6, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=AbstractGeneralConversionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'scope'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=AbstractGeneralConversionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'coordinateOperationAccuracy'))),
    ])
    , 7 : pyxb.binding.content.ContentModelState(state=7, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=AbstractGeneralConversionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'scope'))),
    ])
    , 8 : pyxb.binding.content.ContentModelState(state=8, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=AbstractGeneralConversionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'scope'))),
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=AbstractGeneralConversionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'domainOfValidity'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=AbstractGeneralConversionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'remarks'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=AbstractGeneralConversionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
    ])
})



ConversionType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'method'), OperationMethodPropertyType, scope=ConversionType, documentation=u'gml:method is an association role to the operation method used by a coordinate operation.'))

ConversionType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'parameterValue'), AbstractGeneralParameterValuePropertyType, scope=ConversionType, documentation=u'gml:parameterValue is a composition association to a parameter value or group of parameter values used by a coordinate operation.'))
ConversionType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=1, element_use=ConversionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'metaDataProperty'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=ConversionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=ConversionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=ConversionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'description'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=ConversionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'remarks'))),
        pyxb.binding.content.ContentModelTransition(next_state=9, element_use=ConversionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'scope'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=ConversionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=ConversionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'domainOfValidity'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=ConversionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'parameterValue'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=ConversionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
    ])
    , 5 : pyxb.binding.content.ContentModelState(state=5, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=9, element_use=ConversionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'scope'))),
    ])
    , 6 : pyxb.binding.content.ContentModelState(state=6, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=ConversionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=ConversionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
    ])
    , 7 : pyxb.binding.content.ContentModelState(state=7, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=ConversionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'coordinateOperationAccuracy'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=ConversionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'method'))),
    ])
    , 8 : pyxb.binding.content.ContentModelState(state=8, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=9, element_use=ConversionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'scope'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=ConversionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'domainOfValidity'))),
    ])
    , 9 : pyxb.binding.content.ContentModelState(state=9, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=ConversionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'coordinateOperationAccuracy'))),
        pyxb.binding.content.ContentModelTransition(next_state=9, element_use=ConversionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'scope'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=ConversionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'method'))),
    ])
})



TimeTopologyPrimitivePropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractTimeTopologyPrimitive'), AbstractTimeTopologyPrimitiveType, abstract=pyxb.binding.datatypes.boolean(1), scope=TimeTopologyPrimitivePropertyType, documentation=u'gml:TimeTopologyPrimitive acts as the head of a substitution group for topological temporal primitives.\nTemporal topology primitives shall imply the ordering information between features or feature properties. The temporal connection of features can be examined if they have temporal topology primitives as values of their properties. Usually, an instantaneous feature associates with a time node, and a static feature associates with a time edge.  A feature with both modes associates with the temporal topology primitive: a supertype of time nodes and time edges.\nA topological primitive is always connected to one or more other topological primitives, and is, therefore, always a member of a topological complex. In a GML instance, this will often be indicated by the primitives being described by elements that are descendents of an element describing a complex. However, in order to support the case where a temporal topological primitive is described in another context, the optional complex property is provided, which carries a reference to the parent temporal topological complex.'))
TimeTopologyPrimitivePropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=TimeTopologyPrimitivePropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractTimeTopologyPrimitive'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



MD_Usage_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'userContactInfo'), CI_ResponsibleParty_PropertyType, scope=MD_Usage_Type))

MD_Usage_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'specificUsage'), CharacterString_PropertyType, scope=MD_Usage_Type))

MD_Usage_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'usageDateTime'), DateTime_PropertyType, scope=MD_Usage_Type))

MD_Usage_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'userDeterminedLimitations'), CharacterString_PropertyType, scope=MD_Usage_Type))
MD_Usage_Type._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MD_Usage_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'specificUsage'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=MD_Usage_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'usageDateTime'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=MD_Usage_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'userContactInfo'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=MD_Usage_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'userDeterminedLimitations'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=MD_Usage_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'userContactInfo'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=MD_Usage_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'userDeterminedLimitations'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=MD_Usage_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'userContactInfo'))),
    ])
    , 5 : pyxb.binding.content.ContentModelState(state=5, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=MD_Usage_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'userContactInfo'))),
    ])
})



TemporalCSPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'TemporalCS'), TemporalCSType, scope=TemporalCSPropertyType, documentation=u''))
TemporalCSPropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=TemporalCSPropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'TemporalCS'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



Multiplicity_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gco, u'Multiplicity'), Multiplicity_Type, scope=Multiplicity_PropertyType))
Multiplicity_PropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=Multiplicity_PropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gco, u'Multiplicity'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



MD_MetadataExtensionInformation_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'extendedElementInformation'), MD_ExtendedElementInformation_PropertyType, scope=MD_MetadataExtensionInformation_Type))

MD_MetadataExtensionInformation_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'extensionOnLineResource'), CI_OnlineResource_PropertyType, scope=MD_MetadataExtensionInformation_Type))
MD_MetadataExtensionInformation_Type._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MD_MetadataExtensionInformation_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'extensionOnLineResource'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MD_MetadataExtensionInformation_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'extendedElementInformation'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MD_MetadataExtensionInformation_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'extendedElementInformation'))),
    ])
})



OperationMethodType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'targetDimensions'), pyxb.binding.datatypes.positiveInteger, scope=OperationMethodType, documentation=u'gml:targetDimensions is the number of dimensions in the target CRS of this operation method.'))

OperationMethodType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'formula'), CodeType, scope=OperationMethodType, documentation=u'gml:formula Formula(s) or procedure used by an operation method. The use of the codespace attribite has been deprecated. The property value shall be a character string.'))

OperationMethodType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'parameter'), AbstractGeneralOperationParameterPropertyType, scope=OperationMethodType, documentation=u'gml:parameter is an association to an operation parameter or parameter group.'))

OperationMethodType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'formulaCitation'), CTD_ANON_7, scope=OperationMethodType, documentation=u'gml:formulaCitation provides a reference to a publication giving the formula(s) or procedure used by an coordinate operation method.'))

OperationMethodType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'sourceDimensions'), pyxb.binding.datatypes.positiveInteger, scope=OperationMethodType, documentation=u'gml:sourceDimensions is the number of dimensions in the source CRS of this operation method.'))
OperationMethodType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=OperationMethodType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=OperationMethodType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'description'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=OperationMethodType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=1, element_use=OperationMethodType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'metaDataProperty'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=OperationMethodType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'formulaCitation'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=OperationMethodType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=OperationMethodType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'formula'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=OperationMethodType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'remarks'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=OperationMethodType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=OperationMethodType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'formulaCitation'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=OperationMethodType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'formula'))),
    ])
    , 5 : pyxb.binding.content.ContentModelState(state=5, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=OperationMethodType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=OperationMethodType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
    ])
    , 6 : pyxb.binding.content.ContentModelState(state=6, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=OperationMethodType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'parameter'))),
    ])
    , 7 : pyxb.binding.content.ContentModelState(state=7, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=OperationMethodType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'targetDimensions'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=OperationMethodType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'parameter'))),
    ])
    , 8 : pyxb.binding.content.ContentModelState(state=8, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=OperationMethodType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'targetDimensions'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=OperationMethodType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'parameter'))),
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=OperationMethodType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'sourceDimensions'))),
    ])
})



PT_LocaleContainer_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'PT_LocaleContainer'), PT_LocaleContainer_Type, scope=PT_LocaleContainer_PropertyType))
PT_LocaleContainer_PropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=PT_LocaleContainer_PropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'PT_LocaleContainer'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



GeocentricCRSPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'GeocentricCRS'), GeocentricCRSType, scope=GeocentricCRSPropertyType, documentation=u''))
GeocentricCRSPropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=GeocentricCRSPropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'GeocentricCRS'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



DirectedEdgePropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'Edge'), EdgeType, scope=DirectedEdgePropertyType, documentation=u'gml:Edge represents the 1-dimensional primitive.\nThe topological boundary of an Edge (gml:directedNode) consists of a negatively directed start Node and a positively directed end Node.   \nThe optional coboundary of an edge (gml:directedFace) is a circular sequence of directed faces which are incident on this edge in document order. In the 2D case, the orientation of the face on the left of the edge is "+"; the orientation of the face on the right on its right is "-". \nIf provided, the aggregationType attribute shall have the value "sequence".\nAn edge may optionally be realised by a 1-dimensional geometric primitive (gml:curveProperty).'))
DirectedEdgePropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DirectedEdgePropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'Edge'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



MD_MaintenanceInformation_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'userDefinedMaintenanceFrequency'), TM_PeriodDuration_PropertyType, scope=MD_MaintenanceInformation_Type))

MD_MaintenanceInformation_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'updateScope'), MD_ScopeCode_PropertyType, scope=MD_MaintenanceInformation_Type))

MD_MaintenanceInformation_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'maintenanceNote'), CharacterString_PropertyType, scope=MD_MaintenanceInformation_Type))

MD_MaintenanceInformation_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'updateScopeDescription'), MD_ScopeDescription_PropertyType, scope=MD_MaintenanceInformation_Type))

MD_MaintenanceInformation_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'contact'), CI_ResponsibleParty_PropertyType, scope=MD_MaintenanceInformation_Type))

MD_MaintenanceInformation_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'maintenanceAndUpdateFrequency'), MD_MaintenanceFrequencyCode_PropertyType, scope=MD_MaintenanceInformation_Type))

MD_MaintenanceInformation_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'dateOfNextUpdate'), Date_PropertyType, scope=MD_MaintenanceInformation_Type))
MD_MaintenanceInformation_Type._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MD_MaintenanceInformation_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'maintenanceAndUpdateFrequency'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=MD_MaintenanceInformation_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'updateScopeDescription'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=MD_MaintenanceInformation_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'userDefinedMaintenanceFrequency'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=MD_MaintenanceInformation_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'maintenanceNote'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=MD_MaintenanceInformation_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'updateScope'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=MD_MaintenanceInformation_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'contact'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=MD_MaintenanceInformation_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'dateOfNextUpdate'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=MD_MaintenanceInformation_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'updateScopeDescription'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=MD_MaintenanceInformation_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'userDefinedMaintenanceFrequency'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=MD_MaintenanceInformation_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'maintenanceNote'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=MD_MaintenanceInformation_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'updateScope'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=MD_MaintenanceInformation_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'contact'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=MD_MaintenanceInformation_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'updateScope'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=MD_MaintenanceInformation_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'updateScopeDescription'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=MD_MaintenanceInformation_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'contact'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=MD_MaintenanceInformation_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'maintenanceNote'))),
    ])
})



TimeEdgeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'start'), TimeNodePropertyType, scope=TimeEdgeType))

TimeEdgeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'end'), TimeNodePropertyType, scope=TimeEdgeType))

TimeEdgeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'extent'), TimePeriodPropertyType, scope=TimeEdgeType))
TimeEdgeType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=TimeEdgeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=TimeEdgeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=TimeEdgeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=TimeEdgeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'start'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=TimeEdgeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'complex'))),
        pyxb.binding.content.ContentModelTransition(next_state=1, element_use=TimeEdgeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'metaDataProperty'))),
        pyxb.binding.content.ContentModelTransition(next_state=9, element_use=TimeEdgeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'relatedTime'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=TimeEdgeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'description'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=TimeEdgeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=TimeEdgeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'complex'))),
        pyxb.binding.content.ContentModelTransition(next_state=9, element_use=TimeEdgeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'relatedTime'))),
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=TimeEdgeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'start'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=TimeEdgeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=TimeEdgeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=TimeEdgeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=TimeEdgeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'complex'))),
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=TimeEdgeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'start'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=TimeEdgeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=9, element_use=TimeEdgeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'relatedTime'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=TimeEdgeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'extent'))),
    ])
    , 5 : pyxb.binding.content.ContentModelState(state=5, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=TimeEdgeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'start'))),
    ])
    , 6 : pyxb.binding.content.ContentModelState(state=6, is_final=True, transitions=[
    ])
    , 7 : pyxb.binding.content.ContentModelState(state=7, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=TimeEdgeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'end'))),
    ])
    , 8 : pyxb.binding.content.ContentModelState(state=8, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=TimeEdgeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'complex'))),
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=TimeEdgeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'start'))),
        pyxb.binding.content.ContentModelTransition(next_state=9, element_use=TimeEdgeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'relatedTime'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=TimeEdgeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
    ])
    , 9 : pyxb.binding.content.ContentModelState(state=9, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=TimeEdgeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'complex'))),
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=TimeEdgeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'start'))),
        pyxb.binding.content.ContentModelTransition(next_state=9, element_use=TimeEdgeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'relatedTime'))),
    ])
})



FormulaType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'd'), pyxb.binding.datatypes.double, scope=FormulaType))

FormulaType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'a'), pyxb.binding.datatypes.double, scope=FormulaType))

FormulaType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'c'), pyxb.binding.datatypes.double, scope=FormulaType))

FormulaType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'b'), pyxb.binding.datatypes.double, scope=FormulaType))
FormulaType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=FormulaType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'a'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=FormulaType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'b'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=FormulaType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'b'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=FormulaType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'c'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=FormulaType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'd'))),
    ])
    , 5 : pyxb.binding.content.ContentModelState(state=5, is_final=True, transitions=[
    ])
})



DictionaryEntryType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'Definition'), DefinitionType, scope=DictionaryEntryType, documentation=u'The basic gml:Definition element specifies a definition, which can be included in or referenced by a dictionary. \nThe content model for a generic definition is a derivation from gml:AbstractGMLType.  \nThe gml:description property element shall hold the definition if this can be captured in a simple text string, or the gml:descriptionReference property element may carry a link to a description elsewhere.\nThe gml:identifier element shall provide one identifier identifying this definition. The identifier shall be unique within the dictionaries using this definition. \nThe gml:name elements shall provide zero or more terms and synonyms for which this is the definition.\nThe gml:remarks element shall be used to hold additional textual information that is not conceptually part of the definition but is useful in understanding the definition.'))
DictionaryEntryType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DictionaryEntryType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'Definition'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



OperationParameterGroupPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'OperationParameterGroup'), OperationParameterGroupType, scope=OperationParameterGroupPropertyType, documentation=u'gml:OperationParameterGroup is the definition of a group of parameters used by an operation method. This complex type is expected to be used or extended for all applicable operation methods, without defining operation-method-specialized element names.\nThe generalOperationParameter elements are an unordered list of associations to the set of operation parameters that are members of this group.'))
OperationParameterGroupPropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=OperationParameterGroupPropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'OperationParameterGroup'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



MD_AggregateInformation_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_AggregateInformation'), MD_AggregateInformation_Type, scope=MD_AggregateInformation_PropertyType))
MD_AggregateInformation_PropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MD_AggregateInformation_PropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_AggregateInformation'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



DQ_GriddedDataPositionalAccuracy_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'DQ_GriddedDataPositionalAccuracy'), DQ_GriddedDataPositionalAccuracy_Type, scope=DQ_GriddedDataPositionalAccuracy_PropertyType))
DQ_GriddedDataPositionalAccuracy_PropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DQ_GriddedDataPositionalAccuracy_PropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'DQ_GriddedDataPositionalAccuracy'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})


EllipsoidalCSType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=EllipsoidalCSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'description'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=EllipsoidalCSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=EllipsoidalCSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=1, element_use=EllipsoidalCSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'metaDataProperty'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=EllipsoidalCSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=EllipsoidalCSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=EllipsoidalCSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=EllipsoidalCSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'axis'))),
    ])
    , 5 : pyxb.binding.content.ContentModelState(state=5, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=EllipsoidalCSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'axis'))),
    ])
    , 6 : pyxb.binding.content.ContentModelState(state=6, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=EllipsoidalCSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=EllipsoidalCSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'axis'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=EllipsoidalCSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'remarks'))),
    ])
})



AffineCSPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'AffineCS'), AffineCSType, scope=AffineCSPropertyType, documentation=u'gml:AffineCS is a two- or three-dimensional coordinate system with straight axes that are not necessarily orthogonal. An AffineCS shall have two or three gml:axis property elements; the number of property elements shall equal the dimension of the CS.'))
AffineCSPropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=AffineCSPropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'AffineCS'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



DQ_EvaluationMethodTypeCode_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'DQ_EvaluationMethodTypeCode'), CodeListValue_Type, scope=DQ_EvaluationMethodTypeCode_PropertyType))
DQ_EvaluationMethodTypeCode_PropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DQ_EvaluationMethodTypeCode_PropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'DQ_EvaluationMethodTypeCode'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



MD_AggregateInformation_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'initiativeType'), DS_InitiativeTypeCode_PropertyType, scope=MD_AggregateInformation_Type))

MD_AggregateInformation_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'aggregateDataSetName'), CI_Citation_PropertyType, scope=MD_AggregateInformation_Type))

MD_AggregateInformation_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'aggregateDataSetIdentifier'), MD_Identifier_PropertyType, scope=MD_AggregateInformation_Type))

MD_AggregateInformation_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'associationType'), DS_AssociationTypeCode_PropertyType, scope=MD_AggregateInformation_Type))
MD_AggregateInformation_Type._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MD_AggregateInformation_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'aggregateDataSetName'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=MD_AggregateInformation_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'aggregateDataSetIdentifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=MD_AggregateInformation_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'associationType'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=MD_AggregateInformation_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'aggregateDataSetIdentifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=MD_AggregateInformation_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'associationType'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=MD_AggregateInformation_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'associationType'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=MD_AggregateInformation_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'initiativeType'))),
    ])
    , 5 : pyxb.binding.content.ContentModelState(state=5, is_final=True, transitions=[
    ])
})



EX_BoundingPolygon_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'polygon'), GM_Object_PropertyType, scope=EX_BoundingPolygon_Type))
EX_BoundingPolygon_Type._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=EX_BoundingPolygon_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'extentTypeCode'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=EX_BoundingPolygon_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'polygon'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=EX_BoundingPolygon_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'polygon'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=EX_BoundingPolygon_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'polygon'))),
    ])
})


ArcByBulgeType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=ArcByBulgeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'pos'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=ArcByBulgeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'pointProperty'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=ArcByBulgeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'posList'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=ArcByBulgeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'pointRep'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=ArcByBulgeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'coordinates'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=ArcByBulgeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'normal'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=ArcByBulgeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'bulge'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=True, transitions=[
    ])
    , 5 : pyxb.binding.content.ContentModelState(state=5, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=ArcByBulgeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'pos'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=ArcByBulgeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'pointProperty'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=ArcByBulgeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'pointRep'))),
    ])
})



MultiPointType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'pointMembers'), PointArrayPropertyType, scope=MultiPointType, documentation=u'This property element contains a list of points. The order of the elements is significant and shall be preserved when processing the array.'))

MultiPointType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'pointMember'), PointPropertyType, scope=MultiPointType, documentation=u'This property element either references a Point via the XLink-attributes or contains the Point element.'))
MultiPointType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=MultiPointType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MultiPointType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=MultiPointType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=MultiPointType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'pointMembers'))),
        pyxb.binding.content.ContentModelTransition(next_state=1, element_use=MultiPointType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'metaDataProperty'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=MultiPointType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'pointMember'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=MultiPointType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'description'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=MultiPointType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=MultiPointType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=MultiPointType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'pointMember'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=MultiPointType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'pointMembers'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=True, transitions=[
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=MultiPointType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'pointMembers'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=MultiPointType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'pointMember'))),
    ])
    , 5 : pyxb.binding.content.ContentModelState(state=5, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=MultiPointType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MultiPointType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=MultiPointType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=MultiPointType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'pointMembers'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=MultiPointType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'pointMember'))),
    ])
    , 6 : pyxb.binding.content.ContentModelState(state=6, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=MultiPointType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=MultiPointType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'pointMembers'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=MultiPointType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'pointMember'))),
    ])
})



TopoCurvePropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'TopoCurve'), TopoCurveType, scope=TopoCurvePropertyType, documentation=u'gml:TopoCurve represents a homogeneous topological expression, a sequence of directed edges, which if realised are isomorphic to a geometric curve primitive. The intended use of gml:TopoCurve is to appear within a line feature to express the structural and geometric relationships of this feature to other features via the shared edge definitions.\nIf provided, the aggregationType attribute shall have the value "sequence".'))
TopoCurvePropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=TopoCurvePropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'TopoCurve'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



DS_Association_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'DS_Association'), DS_Association_Type, scope=DS_Association_PropertyType))
DS_Association_PropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DS_Association_PropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'DS_Association'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



DefinitionProxyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'definitionRef'), ReferenceType, scope=DefinitionProxyType, documentation=u''))
DefinitionProxyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DefinitionProxyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'description'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=DefinitionProxyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=DefinitionProxyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=1, element_use=DefinitionProxyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'metaDataProperty'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=DefinitionProxyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=DefinitionProxyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=DefinitionProxyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=True, transitions=[
    ])
    , 5 : pyxb.binding.content.ContentModelState(state=5, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=DefinitionProxyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'definitionRef'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=DefinitionProxyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=DefinitionProxyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'remarks'))),
    ])
    , 6 : pyxb.binding.content.ContentModelState(state=6, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=DefinitionProxyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'definitionRef'))),
    ])
})



TemporalDatumPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'TemporalDatum'), TemporalDatumType, scope=TemporalDatumPropertyType, documentation=u'A gml:TemporalDatum defines the origin of a Temporal Reference System. This type omits the "anchorDefinition" and "realizationEpoch" elements and adds the "origin" element with the dateTime type.'))
TemporalDatumPropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=TemporalDatumPropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'TemporalDatum'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



CTD_ANON_7._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'CI_Citation'), CI_Citation_Type, scope=CTD_ANON_7))
CTD_ANON_7._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=CTD_ANON_7._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'CI_Citation'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



MD_MediumFormatCode_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_MediumFormatCode'), CodeListValue_Type, scope=MD_MediumFormatCode_PropertyType))
MD_MediumFormatCode_PropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MD_MediumFormatCode_PropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_MediumFormatCode'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



MD_Identification_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'AbstractMD_Identification'), AbstractMD_Identification_Type, abstract=pyxb.binding.datatypes.boolean(1), scope=MD_Identification_PropertyType))
MD_Identification_PropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MD_Identification_PropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'AbstractMD_Identification'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



SurfacePatchArrayPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractSurfacePatch'), AbstractSurfacePatchType, abstract=pyxb.binding.datatypes.boolean(1), scope=SurfacePatchArrayPropertyType, documentation=u'A surface patch defines a homogenuous portion of a surface. \nThe AbstractSurfacePatch element is the abstract head of the substituition group for all surface patch elements describing a continuous portion of a surface.\nAll surface patches shall have an attribute interpolation (declared in the types derived from gml:AbstractSurfacePatchType) specifying the interpolation mechanism used for the patch using gml:SurfaceInterpolationType.'))
SurfacePatchArrayPropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=1, element_use=SurfacePatchArrayPropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractSurfacePatch'))),
    ])
})



EX_GeographicBoundingBox_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'EX_GeographicBoundingBox'), EX_GeographicBoundingBox_Type, scope=EX_GeographicBoundingBox_PropertyType))
EX_GeographicBoundingBox_PropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=EX_GeographicBoundingBox_PropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'EX_GeographicBoundingBox'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})


FeatureCollectionType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=FeatureCollectionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=FeatureCollectionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'featureMembers'))),
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=FeatureCollectionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=FeatureCollectionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'featureMember'))),
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=FeatureCollectionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=1, element_use=FeatureCollectionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'metaDataProperty'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=FeatureCollectionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'location'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=FeatureCollectionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'boundedBy'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=FeatureCollectionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'description'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=FeatureCollectionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'featureMembers'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=FeatureCollectionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'featureMember'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=FeatureCollectionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'featureMembers'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=FeatureCollectionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'featureMember'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=FeatureCollectionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'location'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=FeatureCollectionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'featureMembers'))),
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=FeatureCollectionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=FeatureCollectionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=FeatureCollectionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'featureMember'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=FeatureCollectionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'location'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=FeatureCollectionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'boundedBy'))),
    ])
    , 5 : pyxb.binding.content.ContentModelState(state=5, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=FeatureCollectionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=FeatureCollectionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'featureMembers'))),
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=FeatureCollectionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=FeatureCollectionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'featureMember'))),
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=FeatureCollectionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=FeatureCollectionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'location'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=FeatureCollectionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'boundedBy'))),
    ])
    , 6 : pyxb.binding.content.ContentModelState(state=6, is_final=True, transitions=[
    ])
    , 7 : pyxb.binding.content.ContentModelState(state=7, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=FeatureCollectionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=FeatureCollectionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'featureMembers'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=FeatureCollectionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'location'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=FeatureCollectionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'featureMember'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=FeatureCollectionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'boundedBy'))),
    ])
})



MemberName_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gco, u'MemberName'), MemberName_Type, scope=MemberName_PropertyType))
MemberName_PropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MemberName_PropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gco, u'MemberName'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



MD_Usage_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_Usage'), MD_Usage_Type, scope=MD_Usage_PropertyType))
MD_Usage_PropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MD_Usage_PropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_Usage'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



FeatureArrayPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractFeature'), AbstractFeatureType, abstract=pyxb.binding.datatypes.boolean(1), scope=FeatureArrayPropertyType, documentation=u'This abstract element serves as the head of a substitution group which may contain any elements whose content model is derived from gml:AbstractFeatureType.  This may be used as a variable in the construction of content models.  \ngml:AbstractFeature may be thought of as "anything that is a GML feature" and may be used to define variables or templates in which the value of a GML property is "any feature". This occurs in particular in a GML feature collection where the feature member properties contain one or multiple copies of gml:AbstractFeature respectively.'))
FeatureArrayPropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=1, element_use=FeatureArrayPropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractFeature'))),
    ])
})



ClothoidType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'endParameter'), pyxb.binding.datatypes.double, scope=ClothoidType))

ClothoidType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'refLocation'), CTD_ANON_13, scope=ClothoidType))

ClothoidType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'scaleFactor'), pyxb.binding.datatypes.decimal, scope=ClothoidType))

ClothoidType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'startParameter'), pyxb.binding.datatypes.double, scope=ClothoidType))
ClothoidType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=ClothoidType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'refLocation'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=ClothoidType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'scaleFactor'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=ClothoidType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'startParameter'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=ClothoidType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'endParameter'))),
    ])
    , 5 : pyxb.binding.content.ContentModelState(state=5, is_final=True, transitions=[
    ])
})



TimeCalendarEraPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'TimeCalendarEra'), TimeCalendarEraType, scope=TimeCalendarEraPropertyType, documentation=u'gml:TimeCalendarEra inherits basic properties from gml:DefinitionType and has the following additional properties:\n-\tgml:referenceEvent is the name or description of a mythical or historic event which fixes the position of the base scale of the calendar era.  This is given as text or using a link to description held elsewhere.\n-\tgml:referenceDate specifies the date of the referenceEvent expressed as a date in the given calendar.  In most calendars, this date is the origin (i.e., the first day) of the scale, but this is not always true.\n-\tgml:julianReference specifies the Julian date that corresponds to the reference date.  The Julian day number is an integer value; the Julian date is a decimal value that allows greater resolution.  Transforming calendar dates to and from Julian dates provides a relatively simple basis for transforming dates from one calendar to another.\n-\tgml:epochOfUse is the period for which the calendar era was used as a basis for dating.'))
TimeCalendarEraPropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=TimeCalendarEraPropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'TimeCalendarEra'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



MD_RangeDimension_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'descriptor'), CharacterString_PropertyType, scope=MD_RangeDimension_Type))

MD_RangeDimension_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'sequenceIdentifier'), MemberName_PropertyType, scope=MD_RangeDimension_Type))
MD_RangeDimension_Type._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MD_RangeDimension_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'sequenceIdentifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=MD_RangeDimension_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'descriptor'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=MD_RangeDimension_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'descriptor'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=True, transitions=[
    ])
})



ImageCRSPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'ImageCRS'), ImageCRSType, scope=ImageCRSPropertyType, documentation=u'gml:ImageCRS is an engineering coordinate reference system applied to locations in images. Image coordinate reference systems are treated as a separate sub-type because the definition of the associated image datum contains two attributes not relevant to other engineering datums.'))
ImageCRSPropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=ImageCRSPropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'ImageCRS'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



MultiSurfaceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'surfaceMember'), SurfacePropertyType, scope=MultiSurfaceType, documentation=u'This property element either references a surface via the XLink-attributes or contains the surface element. A surface element is any element, which is substitutable for gml:AbstractSurface.'))

MultiSurfaceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'surfaceMembers'), SurfaceArrayPropertyType, scope=MultiSurfaceType, documentation=u'This property element contains a list of surfaces. The order of the elements is significant and shall be preserved when processing the array.'))
MultiSurfaceType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=MultiSurfaceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=MultiSurfaceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=MultiSurfaceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MultiSurfaceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'surfaceMember'))),
        pyxb.binding.content.ContentModelTransition(next_state=1, element_use=MultiSurfaceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'metaDataProperty'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=MultiSurfaceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'surfaceMembers'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=MultiSurfaceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'description'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MultiSurfaceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'surfaceMember'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=MultiSurfaceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'surfaceMembers'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=MultiSurfaceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MultiSurfaceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'surfaceMember'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=MultiSurfaceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'surfaceMembers'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=MultiSurfaceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=True, transitions=[
    ])
    , 5 : pyxb.binding.content.ContentModelState(state=5, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=MultiSurfaceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=MultiSurfaceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=MultiSurfaceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MultiSurfaceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'surfaceMember'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=MultiSurfaceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'surfaceMembers'))),
    ])
    , 6 : pyxb.binding.content.ContentModelState(state=6, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MultiSurfaceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'surfaceMember'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=MultiSurfaceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=MultiSurfaceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'surfaceMembers'))),
    ])
})



MD_LegalConstraints_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_LegalConstraints'), MD_LegalConstraints_Type, scope=MD_LegalConstraints_PropertyType))
MD_LegalConstraints_PropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MD_LegalConstraints_PropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_LegalConstraints'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



DQ_TemporalValidity_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'DQ_TemporalValidity'), DQ_TemporalValidity_Type, scope=DQ_TemporalValidity_PropertyType))
DQ_TemporalValidity_PropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DQ_TemporalValidity_PropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'DQ_TemporalValidity'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



BSplineType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'coordinates'), CoordinatesType, scope=BSplineType, documentation=u''))

BSplineType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'pointRep'), PointPropertyType, scope=BSplineType, documentation=u''))

BSplineType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'degree'), pyxb.binding.datatypes.nonNegativeInteger, scope=BSplineType))

BSplineType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'pos'), DirectPositionType, scope=BSplineType))

BSplineType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'knot'), KnotPropertyType, scope=BSplineType))

BSplineType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'posList'), DirectPositionListType, scope=BSplineType))

BSplineType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'pointProperty'), PointPropertyType, scope=BSplineType, documentation=u'This property element either references a point via the XLink-attributes or contains the point element. pointProperty is the predefined property which may be used by GML Application Schemas whenever a GML feature has a property with a value that is substitutable for Point.'))
BSplineType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=BSplineType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'pos'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=BSplineType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'degree'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=BSplineType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'coordinates'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=BSplineType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'pointRep'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=BSplineType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'posList'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=BSplineType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'pointProperty'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=BSplineType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'degree'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=BSplineType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'knot'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=BSplineType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'knot'))),
    ])
    , 5 : pyxb.binding.content.ContentModelState(state=5, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=BSplineType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'degree'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=BSplineType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'pos'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=BSplineType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'pointRep'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=BSplineType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'pointProperty'))),
    ])
    , 6 : pyxb.binding.content.ContentModelState(state=6, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=BSplineType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'knot'))),
    ])
})



DS_AssociationTypeCode_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'DS_AssociationTypeCode'), CodeListValue_Type, scope=DS_AssociationTypeCode_PropertyType))
DS_AssociationTypeCode_PropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DS_AssociationTypeCode_PropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'DS_AssociationTypeCode'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



DQ_NonQuantitativeAttributeAccuracy_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'DQ_NonQuantitativeAttributeAccuracy'), DQ_NonQuantitativeAttributeAccuracy_Type, scope=DQ_NonQuantitativeAttributeAccuracy_PropertyType))
DQ_NonQuantitativeAttributeAccuracy_PropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DQ_NonQuantitativeAttributeAccuracy_PropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'DQ_NonQuantitativeAttributeAccuracy'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



CI_OnlineResource_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'description'), CharacterString_PropertyType, scope=CI_OnlineResource_Type))

CI_OnlineResource_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'function'), CI_OnLineFunctionCode_PropertyType, scope=CI_OnlineResource_Type))

CI_OnlineResource_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'name'), CharacterString_PropertyType, scope=CI_OnlineResource_Type))

CI_OnlineResource_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'linkage'), URL_PropertyType, scope=CI_OnlineResource_Type))

CI_OnlineResource_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'protocol'), CharacterString_PropertyType, scope=CI_OnlineResource_Type))

CI_OnlineResource_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'applicationProfile'), CharacterString_PropertyType, scope=CI_OnlineResource_Type))
CI_OnlineResource_Type._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=CI_OnlineResource_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'linkage'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=CI_OnlineResource_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'function'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=CI_OnlineResource_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=CI_OnlineResource_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'description'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=CI_OnlineResource_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'protocol'))),
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=CI_OnlineResource_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'applicationProfile'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=CI_OnlineResource_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'description'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=CI_OnlineResource_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'function'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=CI_OnlineResource_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'function'))),
    ])
    , 5 : pyxb.binding.content.ContentModelState(state=5, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=CI_OnlineResource_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=CI_OnlineResource_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'description'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=CI_OnlineResource_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'function'))),
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=CI_OnlineResource_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'applicationProfile'))),
    ])
    , 6 : pyxb.binding.content.ContentModelState(state=6, is_final=True, transitions=[
    ])
    , 7 : pyxb.binding.content.ContentModelState(state=7, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=CI_OnlineResource_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=CI_OnlineResource_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'description'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=CI_OnlineResource_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'function'))),
    ])
})



DQ_ThematicAccuracy_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'AbstractDQ_ThematicAccuracy'), AbstractDQ_ThematicAccuracy_Type, abstract=pyxb.binding.datatypes.boolean(1), scope=DQ_ThematicAccuracy_PropertyType))
DQ_ThematicAccuracy_PropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DQ_ThematicAccuracy_PropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'AbstractDQ_ThematicAccuracy'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})


DS_Initiative_Type._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DS_Initiative_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'composedOf'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DS_Initiative_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'composedOf'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=DS_Initiative_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'seriesMetadata'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=DS_Initiative_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'seriesMetadata'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=DS_Initiative_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'superset'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=DS_Initiative_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'subset'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=DS_Initiative_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'superset'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=DS_Initiative_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'subset'))),
    ])
})



TopoComplexType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'superComplex'), TopoComplexPropertyType, scope=TopoComplexType, documentation=u'The property elements gml:subComplex, gml:superComplex and gml:maximalComplex provide an encoding for relationships between topology complexes as described for gml:TopoComplex above.'))

TopoComplexType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'topoPrimitiveMembers'), TopoPrimitiveArrayAssociationType, scope=TopoComplexType, documentation=u'The gml:topoPrimitiveMembers property element encodes the relationship between a topology complex and an arbitrary number of topology primitives.'))

TopoComplexType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'maximalComplex'), TopoComplexPropertyType, scope=TopoComplexType, documentation=u'The property elements gml:subComplex, gml:superComplex and gml:maximalComplex provide an encoding for relationships between topology complexes as described for gml:TopoComplex above.'))

TopoComplexType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'subComplex'), TopoComplexPropertyType, scope=TopoComplexType, documentation=u'The property elements gml:subComplex, gml:superComplex and gml:maximalComplex provide an encoding for relationships between topology complexes as described for gml:TopoComplex above.'))

TopoComplexType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'topoPrimitiveMember'), TopoPrimitiveMemberType, scope=TopoComplexType, documentation=u'The gml:topoPrimitiveMember property element encodes for the relationship between a topology complex and a single topology primitive.'))
TopoComplexType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=TopoComplexType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=TopoComplexType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=TopoComplexType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=TopoComplexType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'maximalComplex'))),
        pyxb.binding.content.ContentModelTransition(next_state=1, element_use=TopoComplexType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'metaDataProperty'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=TopoComplexType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'description'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=TopoComplexType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'topoPrimitiveMembers'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=TopoComplexType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'superComplex'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=TopoComplexType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'topoPrimitiveMember'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=TopoComplexType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'subComplex'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=TopoComplexType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=TopoComplexType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'maximalComplex'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=TopoComplexType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=TopoComplexType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=TopoComplexType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'maximalComplex'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=TopoComplexType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=TopoComplexType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
    ])
    , 5 : pyxb.binding.content.ContentModelState(state=5, is_final=True, transitions=[
    ])
    , 6 : pyxb.binding.content.ContentModelState(state=6, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=TopoComplexType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'maximalComplex'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=TopoComplexType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
    ])
})



MultiCurveType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'curveMember'), CurvePropertyType, scope=MultiCurveType))

MultiCurveType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'curveMembers'), CurveArrayPropertyType, scope=MultiCurveType, documentation=u'This property element contains a list of curves. The order of the elements is significant and shall be preserved when processing the array.'))
MultiCurveType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MultiCurveType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=MultiCurveType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=MultiCurveType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=MultiCurveType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'curveMember'))),
        pyxb.binding.content.ContentModelTransition(next_state=1, element_use=MultiCurveType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'metaDataProperty'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=MultiCurveType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'curveMembers'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=MultiCurveType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'description'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=MultiCurveType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=MultiCurveType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=MultiCurveType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'curveMember'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=MultiCurveType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'curveMembers'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=MultiCurveType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'curveMember'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=MultiCurveType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'curveMembers'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=MultiCurveType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=MultiCurveType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'curveMember'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=MultiCurveType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'curveMembers'))),
    ])
    , 5 : pyxb.binding.content.ContentModelState(state=5, is_final=True, transitions=[
    ])
    , 6 : pyxb.binding.content.ContentModelState(state=6, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MultiCurveType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=MultiCurveType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=MultiCurveType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=MultiCurveType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'curveMember'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=MultiCurveType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'curveMembers'))),
    ])
})


VerticalCSType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=VerticalCSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'description'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=VerticalCSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=VerticalCSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=1, element_use=VerticalCSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'metaDataProperty'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=VerticalCSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=VerticalCSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=VerticalCSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=VerticalCSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'axis'))),
    ])
    , 5 : pyxb.binding.content.ContentModelState(state=5, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=VerticalCSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'axis'))),
    ])
    , 6 : pyxb.binding.content.ContentModelState(state=6, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=VerticalCSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=VerticalCSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'axis'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=VerticalCSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'remarks'))),
    ])
})



GridType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'limits'), GridLimitsType, scope=GridType))

GridType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'axisLabels'), NCNameList, scope=GridType))

GridType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'axisName'), pyxb.binding.datatypes.string, scope=GridType))
GridType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=GridType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=GridType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'limits'))),
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=GridType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=GridType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=1, element_use=GridType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'metaDataProperty'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=GridType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'description'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=GridType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'axisName'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=GridType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'axisLabels'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=True, transitions=[
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=GridType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'limits'))),
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=GridType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=GridType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
    ])
    , 5 : pyxb.binding.content.ContentModelState(state=5, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=GridType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'limits'))),
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=GridType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=GridType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=GridType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
    ])
    , 6 : pyxb.binding.content.ContentModelState(state=6, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=GridType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'axisName'))),
    ])
    , 7 : pyxb.binding.content.ContentModelState(state=7, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=GridType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'limits'))),
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=GridType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
    ])
})



CompoundCRSPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'CompoundCRS'), CompoundCRSType, scope=CompoundCRSPropertyType, documentation=u'gml:CompundCRS is a coordinate reference system describing the position of points through two or more independent coordinate reference systems. It is associated with a non-repeating sequence of two or more instances of SingleCRS.'))
CompoundCRSPropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=CompoundCRSPropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'CompoundCRS'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})


RelatedTimeType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=RelatedTimeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractTimePrimitive'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})


DS_StereoMate_Type._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DS_StereoMate_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'composedOf'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DS_StereoMate_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'composedOf'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=DS_StereoMate_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'seriesMetadata'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=DS_StereoMate_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'seriesMetadata'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=DS_StereoMate_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'superset'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=DS_StereoMate_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'subset'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=DS_StereoMate_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'superset'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=DS_StereoMate_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'subset'))),
    ])
})



SolidType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'interior'), ShellPropertyType, scope=SolidType))

SolidType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'exterior'), ShellPropertyType, scope=SolidType))
SolidType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=SolidType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=SolidType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=SolidType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=SolidType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'exterior'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=SolidType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'interior'))),
        pyxb.binding.content.ContentModelTransition(next_state=1, element_use=SolidType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'metaDataProperty'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=SolidType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'description'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=SolidType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'interior'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=SolidType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'interior'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=SolidType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=SolidType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'exterior'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=SolidType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=SolidType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=SolidType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=SolidType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=SolidType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'exterior'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=SolidType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'interior'))),
    ])
    , 5 : pyxb.binding.content.ContentModelState(state=5, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=SolidType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'interior'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=SolidType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=SolidType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'exterior'))),
    ])
})



CI_Series_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'CI_Series'), CI_Series_Type, scope=CI_Series_PropertyType))
CI_Series_PropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=CI_Series_PropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'CI_Series'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



LineStringType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'posList'), DirectPositionListType, scope=LineStringType))

LineStringType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'coordinates'), CoordinatesType, scope=LineStringType, documentation=u''))

LineStringType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'pointRep'), PointPropertyType, scope=LineStringType, documentation=u''))

LineStringType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'pos'), DirectPositionType, scope=LineStringType))

LineStringType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'pointProperty'), PointPropertyType, scope=LineStringType, documentation=u'This property element either references a point via the XLink-attributes or contains the point element. pointProperty is the predefined property which may be used by GML Application Schemas whenever a GML feature has a property with a value that is substitutable for Point.'))
LineStringType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=LineStringType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'pointRep'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=LineStringType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'posList'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=LineStringType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=LineStringType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'coordinates'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=LineStringType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=LineStringType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=LineStringType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'pos'))),
        pyxb.binding.content.ContentModelTransition(next_state=1, element_use=LineStringType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'metaDataProperty'))),
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=LineStringType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'pointProperty'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=LineStringType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'description'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=LineStringType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'pointRep'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=LineStringType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'posList'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=LineStringType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=LineStringType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'coordinates'))),
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=LineStringType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'pos'))),
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=LineStringType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'pointProperty'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=LineStringType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'pointRep'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=LineStringType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'posList'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=LineStringType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=LineStringType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'coordinates'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=LineStringType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=LineStringType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=LineStringType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'pos'))),
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=LineStringType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'pointProperty'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=True, transitions=[
    ])
    , 5 : pyxb.binding.content.ContentModelState(state=5, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=LineStringType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'pointRep'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=LineStringType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'posList'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=LineStringType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'coordinates'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=LineStringType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=LineStringType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=LineStringType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'pos'))),
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=LineStringType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'pointProperty'))),
    ])
    , 6 : pyxb.binding.content.ContentModelState(state=6, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=LineStringType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'pointRep'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=LineStringType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'pos'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=LineStringType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'pointProperty'))),
    ])
    , 7 : pyxb.binding.content.ContentModelState(state=7, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=LineStringType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'pointRep'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=LineStringType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'pos'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=LineStringType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'pointProperty'))),
    ])
})



MD_Distribution_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_Distribution'), MD_Distribution_Type, scope=MD_Distribution_PropertyType))
MD_Distribution_PropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MD_Distribution_PropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_Distribution'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



Number_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gco, u'Real'), pyxb.binding.datatypes.double, scope=Number_PropertyType))

Number_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gco, u'Decimal'), pyxb.binding.datatypes.decimal, scope=Number_PropertyType))

Number_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gco, u'Integer'), pyxb.binding.datatypes.integer, scope=Number_PropertyType))
Number_PropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=Number_PropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gco, u'Real'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=Number_PropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gco, u'Integer'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=Number_PropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gco, u'Decimal'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



UomAngle_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'UnitDefinition'), UnitDefinitionType, scope=UomAngle_PropertyType, documentation=u'A gml:UnitDefinition is a general definition of a unit of measure. This generic element is used only for units for which no relationship with other units or units systems is known.\nThe content model of gml:UnitDefinition adds three additional properties to gml:Definition, gml:quantityType, gml:quantityTypeReference and gml:catalogSymbol.  \nThe gml:catalogSymbol property optionally gives the short symbol used for this unit. This element is usually used when the relationship of this unit to other units or units systems is unknown.'))
UomAngle_PropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=UomAngle_PropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'UnitDefinition'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



LinearCSPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'LinearCS'), LinearCSType, scope=LinearCSPropertyType, documentation=u'gml:LinearCS is a one-dimensional coordinate system that consists of the points that lie on the single axis described. The associated coordinate is the distance \u2013 with or without offset \u2013 from the specified datum to the point along the axis. A LinearCS shall have one gml:axis property element.'))
LinearCSPropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=LinearCSPropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'LinearCS'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})


DQ_RelativeInternalPositionalAccuracy_Type._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=DQ_RelativeInternalPositionalAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'measureDescription'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=DQ_RelativeInternalPositionalAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationMethodType'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DQ_RelativeInternalPositionalAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationProcedure'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=DQ_RelativeInternalPositionalAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationMethodDescription'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DQ_RelativeInternalPositionalAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'dateTime'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=DQ_RelativeInternalPositionalAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'result'))),
        pyxb.binding.content.ContentModelTransition(next_state=1, element_use=DQ_RelativeInternalPositionalAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'nameOfMeasure'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=DQ_RelativeInternalPositionalAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'measureIdentification'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DQ_RelativeInternalPositionalAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'dateTime'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=DQ_RelativeInternalPositionalAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'result'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=DQ_RelativeInternalPositionalAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationMethodDescription'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DQ_RelativeInternalPositionalAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationProcedure'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DQ_RelativeInternalPositionalAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'dateTime'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=DQ_RelativeInternalPositionalAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'result'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=DQ_RelativeInternalPositionalAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'measureDescription'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=DQ_RelativeInternalPositionalAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationMethodType'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DQ_RelativeInternalPositionalAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationProcedure'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=DQ_RelativeInternalPositionalAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationMethodDescription'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DQ_RelativeInternalPositionalAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'dateTime'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=DQ_RelativeInternalPositionalAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'result'))),
    ])
    , 5 : pyxb.binding.content.ContentModelState(state=5, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DQ_RelativeInternalPositionalAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationProcedure'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DQ_RelativeInternalPositionalAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'dateTime'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=DQ_RelativeInternalPositionalAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'result'))),
    ])
    , 6 : pyxb.binding.content.ContentModelState(state=6, is_final=True, transitions=[
    ])
    , 7 : pyxb.binding.content.ContentModelState(state=7, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=DQ_RelativeInternalPositionalAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationMethodType'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=DQ_RelativeInternalPositionalAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationMethodDescription'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DQ_RelativeInternalPositionalAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'dateTime'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DQ_RelativeInternalPositionalAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationProcedure'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=DQ_RelativeInternalPositionalAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'result'))),
    ])
    , 8 : pyxb.binding.content.ContentModelState(state=8, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=DQ_RelativeInternalPositionalAccuracy_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'result'))),
    ])
})



DQ_Completeness_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'AbstractDQ_Completeness'), AbstractDQ_Completeness_Type, abstract=pyxb.binding.datatypes.boolean(1), scope=DQ_Completeness_PropertyType))
DQ_Completeness_PropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DQ_Completeness_PropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'AbstractDQ_Completeness'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



GeocentricCRSType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'usesGeodeticDatum'), GeodeticDatumPropertyType, scope=GeocentricCRSType, documentation=u''))

GeocentricCRSType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'usesCartesianCS'), CartesianCSPropertyType, scope=GeocentricCRSType, documentation=u''))

GeocentricCRSType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'usesSphericalCS'), SphericalCSPropertyType, scope=GeocentricCRSType, documentation=u''))
GeocentricCRSType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=GeocentricCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'description'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=GeocentricCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=GeocentricCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=1, element_use=GeocentricCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'metaDataProperty'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=GeocentricCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=GeocentricCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=GeocentricCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=GeocentricCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'usesGeodeticDatum'))),
    ])
    , 5 : pyxb.binding.content.ContentModelState(state=5, is_final=True, transitions=[
    ])
    , 6 : pyxb.binding.content.ContentModelState(state=6, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=GeocentricCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'domainOfValidity'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=GeocentricCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'scope'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=GeocentricCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'usesSphericalCS'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=GeocentricCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'usesCartesianCS'))),
    ])
    , 7 : pyxb.binding.content.ContentModelState(state=7, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=GeocentricCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'domainOfValidity'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=GeocentricCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'scope'))),
    ])
    , 8 : pyxb.binding.content.ContentModelState(state=8, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=GeocentricCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=GeocentricCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'domainOfValidity'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=GeocentricCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'scope'))),
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=GeocentricCRSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'remarks'))),
    ])
})



MD_Metadata_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'referenceSystemInfo'), MD_ReferenceSystem_PropertyType, scope=MD_Metadata_Type))

MD_Metadata_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'metadataExtensionInfo'), MD_MetadataExtensionInformation_PropertyType, scope=MD_Metadata_Type))

MD_Metadata_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'contentInfo'), MD_ContentInformation_PropertyType, scope=MD_Metadata_Type))

MD_Metadata_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'characterSet'), MD_CharacterSetCode_PropertyType, scope=MD_Metadata_Type))

MD_Metadata_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'dataQualityInfo'), DQ_DataQuality_PropertyType, scope=MD_Metadata_Type))

MD_Metadata_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'portrayalCatalogueInfo'), MD_PortrayalCatalogueReference_PropertyType, scope=MD_Metadata_Type))

MD_Metadata_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'metadataConstraints'), MD_Constraints_PropertyType, scope=MD_Metadata_Type))

MD_Metadata_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'metadataMaintenance'), MD_MaintenanceInformation_PropertyType, scope=MD_Metadata_Type))

MD_Metadata_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'series'), DS_Aggregate_PropertyType, scope=MD_Metadata_Type))

MD_Metadata_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'describes'), DS_DataSet_PropertyType, scope=MD_Metadata_Type))

MD_Metadata_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'propertyType'), ObjectReference_PropertyType, scope=MD_Metadata_Type))

MD_Metadata_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'featureType'), ObjectReference_PropertyType, scope=MD_Metadata_Type))

MD_Metadata_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'featureAttribute'), ObjectReference_PropertyType, scope=MD_Metadata_Type))

MD_Metadata_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'fileIdentifier'), CharacterString_PropertyType, scope=MD_Metadata_Type))

MD_Metadata_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'language'), CharacterString_PropertyType, scope=MD_Metadata_Type))

MD_Metadata_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'applicationSchemaInfo'), MD_ApplicationSchemaInformation_PropertyType, scope=MD_Metadata_Type))

MD_Metadata_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'distributionInfo'), MD_Distribution_PropertyType, scope=MD_Metadata_Type))

MD_Metadata_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'parentIdentifier'), CharacterString_PropertyType, scope=MD_Metadata_Type))

MD_Metadata_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'hierarchyLevel'), MD_ScopeCode_PropertyType, scope=MD_Metadata_Type))

MD_Metadata_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'hierarchyLevelName'), CharacterString_PropertyType, scope=MD_Metadata_Type))

MD_Metadata_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'identificationInfo'), MD_Identification_PropertyType, scope=MD_Metadata_Type))

MD_Metadata_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'contact'), CI_ResponsibleParty_PropertyType, scope=MD_Metadata_Type))

MD_Metadata_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'dateStamp'), Date_PropertyType, scope=MD_Metadata_Type))

MD_Metadata_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'metadataStandardName'), CharacterString_PropertyType, scope=MD_Metadata_Type))

MD_Metadata_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'metadataStandardVersion'), CharacterString_PropertyType, scope=MD_Metadata_Type))

MD_Metadata_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'dataSetURI'), CharacterString_PropertyType, scope=MD_Metadata_Type))

MD_Metadata_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'locale'), PT_Locale_PropertyType, scope=MD_Metadata_Type))

MD_Metadata_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'spatialRepresentationInfo'), MD_SpatialRepresentation_PropertyType, scope=MD_Metadata_Type))
MD_Metadata_Type._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=11, element_use=MD_Metadata_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'contact'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=MD_Metadata_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'fileIdentifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=MD_Metadata_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'language'))),
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=MD_Metadata_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'characterSet'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=MD_Metadata_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'parentIdentifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=MD_Metadata_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'hierarchyLevel'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=MD_Metadata_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'hierarchyLevelName'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MD_Metadata_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'contentInfo'))),
        pyxb.binding.content.ContentModelTransition(next_state=13, element_use=MD_Metadata_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'metadataMaintenance'))),
        pyxb.binding.content.ContentModelTransition(next_state=14, element_use=MD_Metadata_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'dataQualityInfo'))),
        pyxb.binding.content.ContentModelTransition(next_state=13, element_use=MD_Metadata_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'series'))),
        pyxb.binding.content.ContentModelTransition(next_state=13, element_use=MD_Metadata_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'describes'))),
        pyxb.binding.content.ContentModelTransition(next_state=14, element_use=MD_Metadata_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'applicationSchemaInfo'))),
        pyxb.binding.content.ContentModelTransition(next_state=14, element_use=MD_Metadata_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'distributionInfo'))),
        pyxb.binding.content.ContentModelTransition(next_state=13, element_use=MD_Metadata_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'propertyType'))),
        pyxb.binding.content.ContentModelTransition(next_state=13, element_use=MD_Metadata_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'featureType'))),
        pyxb.binding.content.ContentModelTransition(next_state=14, element_use=MD_Metadata_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'portrayalCatalogueInfo'))),
        pyxb.binding.content.ContentModelTransition(next_state=13, element_use=MD_Metadata_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'featureAttribute'))),
        pyxb.binding.content.ContentModelTransition(next_state=14, element_use=MD_Metadata_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'metadataConstraints'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=MD_Metadata_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'hierarchyLevel'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=MD_Metadata_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'hierarchyLevelName'))),
        pyxb.binding.content.ContentModelTransition(next_state=11, element_use=MD_Metadata_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'contact'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=11, element_use=MD_Metadata_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'contact'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=MD_Metadata_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'language'))),
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=MD_Metadata_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'characterSet'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=MD_Metadata_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'parentIdentifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=MD_Metadata_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'hierarchyLevel'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=MD_Metadata_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'hierarchyLevelName'))),
    ])
    , 5 : pyxb.binding.content.ContentModelState(state=5, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=MD_Metadata_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'referenceSystemInfo'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=MD_Metadata_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'metadataExtensionInfo'))),
        pyxb.binding.content.ContentModelTransition(next_state=9, element_use=MD_Metadata_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'identificationInfo'))),
        pyxb.binding.content.ContentModelTransition(next_state=10, element_use=MD_Metadata_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'metadataStandardName'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=MD_Metadata_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'dataSetURI'))),
        pyxb.binding.content.ContentModelTransition(next_state=12, element_use=MD_Metadata_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'metadataStandardVersion'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=MD_Metadata_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'locale'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=MD_Metadata_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'spatialRepresentationInfo'))),
    ])
    , 6 : pyxb.binding.content.ContentModelState(state=6, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=MD_Metadata_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'characterSet'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=MD_Metadata_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'parentIdentifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=MD_Metadata_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'hierarchyLevel'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=MD_Metadata_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'hierarchyLevelName'))),
        pyxb.binding.content.ContentModelTransition(next_state=11, element_use=MD_Metadata_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'contact'))),
    ])
    , 7 : pyxb.binding.content.ContentModelState(state=7, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=MD_Metadata_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'parentIdentifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=MD_Metadata_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'hierarchyLevel'))),
        pyxb.binding.content.ContentModelTransition(next_state=11, element_use=MD_Metadata_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'contact'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=MD_Metadata_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'hierarchyLevelName'))),
    ])
    , 8 : pyxb.binding.content.ContentModelState(state=8, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=MD_Metadata_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'referenceSystemInfo'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=MD_Metadata_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'metadataExtensionInfo'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=MD_Metadata_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'locale'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=MD_Metadata_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'spatialRepresentationInfo'))),
        pyxb.binding.content.ContentModelTransition(next_state=9, element_use=MD_Metadata_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'identificationInfo'))),
    ])
    , 9 : pyxb.binding.content.ContentModelState(state=9, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=MD_Metadata_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'referenceSystemInfo'))),
        pyxb.binding.content.ContentModelTransition(next_state=13, element_use=MD_Metadata_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'series'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=MD_Metadata_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'metadataExtensionInfo'))),
        pyxb.binding.content.ContentModelTransition(next_state=14, element_use=MD_Metadata_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'dataQualityInfo'))),
        pyxb.binding.content.ContentModelTransition(next_state=9, element_use=MD_Metadata_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'identificationInfo'))),
        pyxb.binding.content.ContentModelTransition(next_state=14, element_use=MD_Metadata_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'metadataConstraints'))),
        pyxb.binding.content.ContentModelTransition(next_state=14, element_use=MD_Metadata_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'applicationSchemaInfo'))),
        pyxb.binding.content.ContentModelTransition(next_state=14, element_use=MD_Metadata_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'distributionInfo'))),
        pyxb.binding.content.ContentModelTransition(next_state=13, element_use=MD_Metadata_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'propertyType'))),
        pyxb.binding.content.ContentModelTransition(next_state=13, element_use=MD_Metadata_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'featureType'))),
        pyxb.binding.content.ContentModelTransition(next_state=13, element_use=MD_Metadata_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'metadataMaintenance'))),
        pyxb.binding.content.ContentModelTransition(next_state=14, element_use=MD_Metadata_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'portrayalCatalogueInfo'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=MD_Metadata_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'locale'))),
        pyxb.binding.content.ContentModelTransition(next_state=13, element_use=MD_Metadata_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'featureAttribute'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=MD_Metadata_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'spatialRepresentationInfo'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MD_Metadata_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'contentInfo'))),
        pyxb.binding.content.ContentModelTransition(next_state=13, element_use=MD_Metadata_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'describes'))),
    ])
    , 10 : pyxb.binding.content.ContentModelState(state=10, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=MD_Metadata_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'referenceSystemInfo'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=MD_Metadata_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'metadataExtensionInfo'))),
        pyxb.binding.content.ContentModelTransition(next_state=9, element_use=MD_Metadata_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'identificationInfo'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=MD_Metadata_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'dataSetURI'))),
        pyxb.binding.content.ContentModelTransition(next_state=12, element_use=MD_Metadata_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'metadataStandardVersion'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=MD_Metadata_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'locale'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=MD_Metadata_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'spatialRepresentationInfo'))),
    ])
    , 11 : pyxb.binding.content.ContentModelState(state=11, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=MD_Metadata_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'hierarchyLevel'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=MD_Metadata_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'hierarchyLevelName'))),
        pyxb.binding.content.ContentModelTransition(next_state=11, element_use=MD_Metadata_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'contact'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=MD_Metadata_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'dateStamp'))),
    ])
    , 12 : pyxb.binding.content.ContentModelState(state=12, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=MD_Metadata_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'referenceSystemInfo'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=MD_Metadata_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'metadataExtensionInfo'))),
        pyxb.binding.content.ContentModelTransition(next_state=9, element_use=MD_Metadata_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'identificationInfo'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=MD_Metadata_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'dataSetURI'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=MD_Metadata_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'locale'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=MD_Metadata_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'spatialRepresentationInfo'))),
    ])
    , 13 : pyxb.binding.content.ContentModelState(state=13, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=13, element_use=MD_Metadata_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'series'))),
        pyxb.binding.content.ContentModelTransition(next_state=13, element_use=MD_Metadata_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'describes'))),
        pyxb.binding.content.ContentModelTransition(next_state=13, element_use=MD_Metadata_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'propertyType'))),
        pyxb.binding.content.ContentModelTransition(next_state=13, element_use=MD_Metadata_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'featureType'))),
        pyxb.binding.content.ContentModelTransition(next_state=13, element_use=MD_Metadata_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'featureAttribute'))),
    ])
    , 14 : pyxb.binding.content.ContentModelState(state=14, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=14, element_use=MD_Metadata_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'dataQualityInfo'))),
        pyxb.binding.content.ContentModelTransition(next_state=13, element_use=MD_Metadata_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'metadataMaintenance'))),
        pyxb.binding.content.ContentModelTransition(next_state=13, element_use=MD_Metadata_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'series'))),
        pyxb.binding.content.ContentModelTransition(next_state=14, element_use=MD_Metadata_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'applicationSchemaInfo'))),
        pyxb.binding.content.ContentModelTransition(next_state=13, element_use=MD_Metadata_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'propertyType'))),
        pyxb.binding.content.ContentModelTransition(next_state=13, element_use=MD_Metadata_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'featureType'))),
        pyxb.binding.content.ContentModelTransition(next_state=14, element_use=MD_Metadata_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'portrayalCatalogueInfo'))),
        pyxb.binding.content.ContentModelTransition(next_state=13, element_use=MD_Metadata_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'featureAttribute'))),
        pyxb.binding.content.ContentModelTransition(next_state=14, element_use=MD_Metadata_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'metadataConstraints'))),
        pyxb.binding.content.ContentModelTransition(next_state=13, element_use=MD_Metadata_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'describes'))),
    ])
})



LocalisedCharacterString_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'LocalisedCharacterString'), LocalisedCharacterString_Type, scope=LocalisedCharacterString_PropertyType))
LocalisedCharacterString_PropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=LocalisedCharacterString_PropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'LocalisedCharacterString'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



GeometricComplexPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'GeometricComplex'), GeometricComplexType, scope=GeometricComplexPropertyType))

GeometricComplexPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'CompositeCurve'), CompositeCurveType, scope=GeometricComplexPropertyType, documentation=u'A gml:CompositeCurve is represented by a sequence of (orientable) curves such that each curve in the sequence terminates at the start point of the subsequent curve in the list. \ncurveMember references or contains inline one curve in the composite curve. \nThe curves are contiguous, the collection of curves is ordered. Therefore, if provided, the aggregationType attribute shall have the value "sequence".'))

GeometricComplexPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'CompositeSolid'), CompositeSolidType, scope=GeometricComplexPropertyType, documentation=u'gml:CompositeSolid implements ISO 19107 GM_CompositeSolid (see ISO 19107:2003, 6.6.7) as specified in D.2.3.6. \nA gml:CompositeSolid is represented by a set of orientable surfaces. It is a geometry type with all the geometric properties of a (primitive) solid. Essentially, a composite solid is a collection of solids that join in pairs on common boundary surfaces and which, when considered as a whole, form a single solid. \nsolidMember references or contains one solid in the composite solid. The solids are contiguous.'))

GeometricComplexPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'CompositeSurface'), CompositeSurfaceType, scope=GeometricComplexPropertyType, documentation=u'A gml:CompositeSurface is represented by a set of orientable surfaces. It is geometry type with all the geometric properties of a (primitive) surface. Essentially, a composite surface is a collection of surfaces that join in pairs on common boundary curves and which, when considered as a whole, form a single surface.\nsurfaceMember references or contains inline one surface in the composite surface. \nThe surfaces are contiguous.'))
GeometricComplexPropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=GeometricComplexPropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'GeometricComplex'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=GeometricComplexPropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'CompositeCurve'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=GeometricComplexPropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'CompositeSurface'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=GeometricComplexPropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'CompositeSolid'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



MD_Band_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_Band'), MD_Band_Type, scope=MD_Band_PropertyType))
MD_Band_PropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MD_Band_PropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_Band'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



DQ_TemporalConsistency_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'DQ_TemporalConsistency'), DQ_TemporalConsistency_Type, scope=DQ_TemporalConsistency_PropertyType))
DQ_TemporalConsistency_PropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DQ_TemporalConsistency_PropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'DQ_TemporalConsistency'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



ConcatenatedOperationPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'ConcatenatedOperation'), ConcatenatedOperationType, scope=ConcatenatedOperationPropertyType))
ConcatenatedOperationPropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=ConcatenatedOperationPropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'ConcatenatedOperation'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



KnotPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'Knot'), KnotType, scope=KnotPropertyType, documentation=u'A knot is a breakpoint on a piecewise spline curve.\nvalue is the value of the parameter at the knot of the spline (see ISO 19107:2003, 6.4.24.2).\nmultiplicity is the multiplicity of this knot used in the definition of the spline (with the same weight).\nweight is the value of the averaging weight used for this knot of the spline.'))
KnotPropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=KnotPropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'Knot'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



DQ_CompletenessOmission_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'DQ_CompletenessOmission'), DQ_CompletenessOmission_Type, scope=DQ_CompletenessOmission_PropertyType))
DQ_CompletenessOmission_PropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DQ_CompletenessOmission_PropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'DQ_CompletenessOmission'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



TopoVolumeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'directedTopoSolid'), DirectedTopoSolidPropertyType, scope=TopoVolumeType, documentation=u'The gml:directedSolid property element describes the coBoundary of topology faces and is used in the support of volume features via the gml:TopoVolume expression, see below. The orientation attribute of type gml:SignType expresses the sense in which the included solid appears in the face coboundary. In the context of a gml:TopoVolume the orientation attribute has no meaning.'))
TopoVolumeType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=TopoVolumeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=TopoVolumeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=TopoVolumeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=TopoVolumeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'directedTopoSolid'))),
        pyxb.binding.content.ContentModelTransition(next_state=1, element_use=TopoVolumeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'metaDataProperty'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=TopoVolumeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'description'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=TopoVolumeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'directedTopoSolid'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=TopoVolumeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=TopoVolumeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'directedTopoSolid'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=TopoVolumeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=TopoVolumeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=TopoVolumeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'directedTopoSolid'))),
    ])
    , 5 : pyxb.binding.content.ContentModelState(state=5, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=TopoVolumeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=TopoVolumeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'directedTopoSolid'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=TopoVolumeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=TopoVolumeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
    ])
})



RectifiedGridType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'origin'), PointPropertyType, scope=RectifiedGridType))

RectifiedGridType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'offsetVector'), VectorType, scope=RectifiedGridType))
RectifiedGridType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=RectifiedGridType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=RectifiedGridType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'limits'))),
        pyxb.binding.content.ContentModelTransition(next_state=9, element_use=RectifiedGridType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=9, element_use=RectifiedGridType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=1, element_use=RectifiedGridType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'metaDataProperty'))),
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=RectifiedGridType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'description'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=RectifiedGridType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'axisName'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=RectifiedGridType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'axisLabels'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=RectifiedGridType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'origin'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=RectifiedGridType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'offsetVector'))),
    ])
    , 5 : pyxb.binding.content.ContentModelState(state=5, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=RectifiedGridType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'offsetVector'))),
    ])
    , 6 : pyxb.binding.content.ContentModelState(state=6, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=RectifiedGridType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'limits'))),
        pyxb.binding.content.ContentModelTransition(next_state=9, element_use=RectifiedGridType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=9, element_use=RectifiedGridType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
    ])
    , 7 : pyxb.binding.content.ContentModelState(state=7, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=RectifiedGridType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'limits'))),
        pyxb.binding.content.ContentModelTransition(next_state=9, element_use=RectifiedGridType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=RectifiedGridType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=9, element_use=RectifiedGridType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
    ])
    , 8 : pyxb.binding.content.ContentModelState(state=8, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=RectifiedGridType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'axisName'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=RectifiedGridType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'origin'))),
    ])
    , 9 : pyxb.binding.content.ContentModelState(state=9, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=RectifiedGridType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'limits'))),
        pyxb.binding.content.ContentModelTransition(next_state=9, element_use=RectifiedGridType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
    ])
})



MD_FeatureCatalogueDescription_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_FeatureCatalogueDescription'), MD_FeatureCatalogueDescription_Type, scope=MD_FeatureCatalogueDescription_PropertyType))
MD_FeatureCatalogueDescription_PropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MD_FeatureCatalogueDescription_PropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_FeatureCatalogueDescription'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



LI_Source_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'description'), CharacterString_PropertyType, scope=LI_Source_Type))

LI_Source_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'sourceReferenceSystem'), MD_ReferenceSystem_PropertyType, scope=LI_Source_Type))

LI_Source_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'sourceCitation'), CI_Citation_PropertyType, scope=LI_Source_Type))

LI_Source_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'scaleDenominator'), MD_RepresentativeFraction_PropertyType, scope=LI_Source_Type))

LI_Source_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'sourceExtent'), EX_Extent_PropertyType, scope=LI_Source_Type))

LI_Source_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'sourceStep'), LI_ProcessStep_PropertyType, scope=LI_Source_Type))
LI_Source_Type._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=LI_Source_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'description'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=LI_Source_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'sourceReferenceSystem'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=LI_Source_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'sourceCitation'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=LI_Source_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'scaleDenominator'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=LI_Source_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'sourceExtent'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=LI_Source_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'sourceStep'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=LI_Source_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'sourceExtent'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=LI_Source_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'sourceStep'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=LI_Source_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'sourceReferenceSystem'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=LI_Source_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'scaleDenominator'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=LI_Source_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'sourceCitation'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=LI_Source_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'sourceExtent'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=LI_Source_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'sourceStep'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=LI_Source_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'sourceExtent'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=LI_Source_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'sourceStep'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=LI_Source_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'sourceReferenceSystem'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=LI_Source_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'sourceCitation'))),
    ])
    , 5 : pyxb.binding.content.ContentModelState(state=5, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=LI_Source_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'sourceExtent'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=LI_Source_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'sourceStep'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=LI_Source_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'sourceCitation'))),
    ])
})



ArcStringType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'pointRep'), PointPropertyType, scope=ArcStringType, documentation=u''))

ArcStringType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'pointProperty'), PointPropertyType, scope=ArcStringType, documentation=u'This property element either references a point via the XLink-attributes or contains the point element. pointProperty is the predefined property which may be used by GML Application Schemas whenever a GML feature has a property with a value that is substitutable for Point.'))

ArcStringType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'posList'), DirectPositionListType, scope=ArcStringType))

ArcStringType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'pos'), DirectPositionType, scope=ArcStringType))

ArcStringType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'coordinates'), CoordinatesType, scope=ArcStringType, documentation=u''))
ArcStringType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=ArcStringType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'pos'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=ArcStringType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'pointProperty'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=ArcStringType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'pointRep'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=ArcStringType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'coordinates'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=ArcStringType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'posList'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=ArcStringType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'pos'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=ArcStringType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'pointProperty'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=ArcStringType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'pointRep'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=ArcStringType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'pos'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=ArcStringType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'pointProperty'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=ArcStringType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'pointRep'))),
    ])
    , 5 : pyxb.binding.content.ContentModelState(state=5, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=ArcStringType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'pos'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=ArcStringType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'pointProperty'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=ArcStringType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'pointRep'))),
    ])
})


ArcType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=ArcType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'posList'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=ArcType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'pos'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=ArcType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'pointProperty'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=ArcType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'coordinates'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=ArcType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'pointRep'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=ArcType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'pos'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=ArcType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'pointProperty'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=ArcType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'pointRep'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=ArcType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'pos'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=ArcType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'pointProperty'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=ArcType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'pointRep'))),
    ])
})


CircleType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=CircleType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'posList'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=CircleType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'pos'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=CircleType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'pointProperty'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=CircleType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'coordinates'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=CircleType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'pointRep'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=CircleType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'pos'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=CircleType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'pointProperty'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=CircleType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'pointRep'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=CircleType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'pos'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=CircleType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'pointProperty'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=CircleType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'pointRep'))),
    ])
})



MD_RepresentativeFraction_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_RepresentativeFraction'), MD_RepresentativeFraction_Type, scope=MD_RepresentativeFraction_PropertyType))
MD_RepresentativeFraction_PropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MD_RepresentativeFraction_PropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_RepresentativeFraction'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



MD_VectorSpatialRepresentation_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_VectorSpatialRepresentation'), MD_VectorSpatialRepresentation_Type, scope=MD_VectorSpatialRepresentation_PropertyType))
MD_VectorSpatialRepresentation_PropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MD_VectorSpatialRepresentation_PropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_VectorSpatialRepresentation'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



UomLength_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'UnitDefinition'), UnitDefinitionType, scope=UomLength_PropertyType, documentation=u'A gml:UnitDefinition is a general definition of a unit of measure. This generic element is used only for units for which no relationship with other units or units systems is known.\nThe content model of gml:UnitDefinition adds three additional properties to gml:Definition, gml:quantityType, gml:quantityTypeReference and gml:catalogSymbol.  \nThe gml:catalogSymbol property optionally gives the short symbol used for this unit. This element is usually used when the relationship of this unit to other units or units systems is unknown.'))
UomLength_PropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=UomLength_PropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'UnitDefinition'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



TopoPrimitiveMemberType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractTopoPrimitive'), AbstractTopoPrimitiveType, abstract=pyxb.binding.datatypes.boolean(1), scope=TopoPrimitiveMemberType, documentation=u'gml:AbstractTopoPrimitive acts as the base type for all topological primitives. Topology primitives are the atomic (smallest possible) units of a topology complex. \nEach topology primitive may contain references to other topology primitives of codimension 2 or more (gml:isolated). Conversely, nodes may have faces as containers and nodes and edges may have solids as containers (gml:container).'))
TopoPrimitiveMemberType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=TopoPrimitiveMemberType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractTopoPrimitive'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



MD_MaintenanceInformation_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_MaintenanceInformation'), MD_MaintenanceInformation_Type, scope=MD_MaintenanceInformation_PropertyType))
MD_MaintenanceInformation_PropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MD_MaintenanceInformation_PropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_MaintenanceInformation'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



Scale_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gco, u'Scale'), ScaleType, scope=Scale_PropertyType))
Scale_PropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=Scale_PropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gco, u'Scale'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



EngineeringCRSPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'EngineeringCRS'), EngineeringCRSType, scope=EngineeringCRSPropertyType, documentation=u'gml:EngineeringCRS is a contextually local coordinate reference system which can be divided into two broad categories:\n-\tearth-fixed systems applied to engineering activities on or near the surface of the earth;\n-\tCRSs on moving platforms such as road vehicles, vessels, aircraft, or spacecraft, see ISO 19111 8.3.'))
EngineeringCRSPropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=EngineeringCRSPropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'EngineeringCRS'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



CTD_ANON_8._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'SecondDefiningParameter'), CTD_ANON_9, scope=CTD_ANON_8))
CTD_ANON_8._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=CTD_ANON_8._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'SecondDefiningParameter'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



DirectionVectorType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'vector'), VectorType, scope=DirectionVectorType))

DirectionVectorType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'verticalAngle'), AngleType, scope=DirectionVectorType))

DirectionVectorType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'horizontalAngle'), AngleType, scope=DirectionVectorType))
DirectionVectorType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=DirectionVectorType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'vector'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DirectionVectorType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'horizontalAngle'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=DirectionVectorType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'verticalAngle'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=True, transitions=[
    ])
})



OrientableCurveType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'baseCurve'), CurvePropertyType, scope=OrientableCurveType, documentation=u'The property baseCurve references or contains the base curve, i.e. it either references the base curve via the XLink-attributes or contains the curve element. A curve element is any element which is substitutable for AbstractCurve. The base curve has positive orientation.'))
OrientableCurveType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=OrientableCurveType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'baseCurve'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=OrientableCurveType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=OrientableCurveType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=OrientableCurveType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=1, element_use=OrientableCurveType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'metaDataProperty'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=OrientableCurveType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'description'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=OrientableCurveType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'baseCurve'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=OrientableCurveType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=OrientableCurveType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'baseCurve'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=OrientableCurveType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=OrientableCurveType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=True, transitions=[
    ])
    , 5 : pyxb.binding.content.ContentModelState(state=5, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=OrientableCurveType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=OrientableCurveType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'baseCurve'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=OrientableCurveType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=OrientableCurveType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
    ])
})



TM_Primitive_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractTimePrimitive'), AbstractTimePrimitiveType, abstract=pyxb.binding.datatypes.boolean(1), scope=TM_Primitive_PropertyType, documentation=u'gml:AbstractTimePrimitive acts as the head of a substitution group for geometric and topological temporal primitives.'))
TM_Primitive_PropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=TM_Primitive_PropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractTimePrimitive'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



LocalName_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gco, u'LocalName'), CodeType, scope=LocalName_PropertyType))
LocalName_PropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=LocalName_PropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gco, u'LocalName'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



EX_GeographicDescription_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'geographicIdentifier'), MD_Identifier_PropertyType, scope=EX_GeographicDescription_Type))
EX_GeographicDescription_Type._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=EX_GeographicDescription_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'extentTypeCode'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=EX_GeographicDescription_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'geographicIdentifier'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=EX_GeographicDescription_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'geographicIdentifier'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=True, transitions=[
    ])
})



EX_GeographicExtent_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'AbstractEX_GeographicExtent'), AbstractEX_GeographicExtent_Type, abstract=pyxb.binding.datatypes.boolean(1), scope=EX_GeographicExtent_PropertyType))
EX_GeographicExtent_PropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=EX_GeographicExtent_PropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'AbstractEX_GeographicExtent'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



DQ_PositionalAccuracy_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'AbstractDQ_PositionalAccuracy'), AbstractDQ_PositionalAccuracy_Type, abstract=pyxb.binding.datatypes.boolean(1), scope=DQ_PositionalAccuracy_PropertyType))
DQ_PositionalAccuracy_PropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DQ_PositionalAccuracy_PropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'AbstractDQ_PositionalAccuracy'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



TopoPointPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'TopoPoint'), TopoPointType, scope=TopoPointPropertyType, documentation=u'The intended use of gml:TopoPoint is to appear within a point feature to express the structural and possibly geometric relationships of this feature to other features via shared node definitions.'))
TopoPointPropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=TopoPointPropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'TopoPoint'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



MD_KeywordTypeCode_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_KeywordTypeCode'), CodeListValue_Type, scope=MD_KeywordTypeCode_PropertyType))
MD_KeywordTypeCode_PropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MD_KeywordTypeCode_PropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_KeywordTypeCode'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



MD_RangeDimension_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_RangeDimension'), MD_RangeDimension_Type, scope=MD_RangeDimension_PropertyType))
MD_RangeDimension_PropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MD_RangeDimension_PropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_RangeDimension'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



CountPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'Count'), CTD_ANON_6, nillable=pyxb.binding.datatypes.boolean(1), scope=CountPropertyType))
CountPropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=CountPropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'Count'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



CTD_ANON_9._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'inverseFlattening'), MeasureType, scope=CTD_ANON_9))

CTD_ANON_9._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'semiMinorAxis'), LengthType, scope=CTD_ANON_9))

CTD_ANON_9._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'isSphere'), pyxb.binding.datatypes.boolean, scope=CTD_ANON_9))
CTD_ANON_9._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=CTD_ANON_9._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'inverseFlattening'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=CTD_ANON_9._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'semiMinorAxis'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=CTD_ANON_9._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'isSphere'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



DQ_FormatConsistency_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'DQ_FormatConsistency'), DQ_FormatConsistency_Type, scope=DQ_FormatConsistency_PropertyType))
DQ_FormatConsistency_PropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DQ_FormatConsistency_PropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'DQ_FormatConsistency'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



DQ_Scope_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'levelDescription'), MD_ScopeDescription_PropertyType, scope=DQ_Scope_Type))

DQ_Scope_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'level'), MD_ScopeCode_PropertyType, scope=DQ_Scope_Type))

DQ_Scope_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'extent'), EX_Extent_PropertyType, scope=DQ_Scope_Type))
DQ_Scope_Type._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DQ_Scope_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'level'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=DQ_Scope_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'levelDescription'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=DQ_Scope_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'extent'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=DQ_Scope_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'levelDescription'))),
    ])
})


CartesianCSType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=CartesianCSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'description'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=CartesianCSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=CartesianCSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=1, element_use=CartesianCSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'metaDataProperty'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=CartesianCSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=CartesianCSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=CartesianCSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=CartesianCSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'axis'))),
    ])
    , 5 : pyxb.binding.content.ContentModelState(state=5, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=CartesianCSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'axis'))),
    ])
    , 6 : pyxb.binding.content.ContentModelState(state=6, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=CartesianCSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=CartesianCSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'axis'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=CartesianCSType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'remarks'))),
    ])
})



MD_Resolution_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_Resolution'), MD_Resolution_Type, scope=MD_Resolution_PropertyType))
MD_Resolution_PropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MD_Resolution_PropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_Resolution'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



ShellPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'Shell'), ShellType, scope=ShellPropertyType, documentation=u'A shell is used to represent a single connected component of a solid boundary as specified in ISO 19107:2003, 6.3.8.\nEvery gml:surfaceMember references or contains one surface, i.e. any element which is substitutable for gml:AbstractSurface. In the context of a shell, the surfaces describe the boundary of the solid. \nIf provided, the aggregationType attribute shall have the value "set".\n'))
ShellPropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=ShellPropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'Shell'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



PT_FreeText_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'textGroup'), LocalisedCharacterString_PropertyType, scope=PT_FreeText_Type))
PT_FreeText_Type._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=PT_FreeText_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'textGroup'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=PT_FreeText_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'textGroup'))),
    ])
})



AbstractRS_ReferenceSystem_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'domainOfValidity'), EX_Extent_PropertyType, scope=AbstractRS_ReferenceSystem_Type))

AbstractRS_ReferenceSystem_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'name'), RS_Identifier_PropertyType, scope=AbstractRS_ReferenceSystem_Type))
AbstractRS_ReferenceSystem_Type._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=AbstractRS_ReferenceSystem_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'name'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=AbstractRS_ReferenceSystem_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'domainOfValidity'))),
    ])
})



MD_StandardOrderProcess_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_StandardOrderProcess'), MD_StandardOrderProcess_Type, scope=MD_StandardOrderProcess_PropertyType))
MD_StandardOrderProcess_PropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MD_StandardOrderProcess_PropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_StandardOrderProcess'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



TemporalCRSPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'TemporalCRS'), TemporalCRSType, scope=TemporalCRSPropertyType, documentation=u'gml:TemporalCRS is a 1D coordinate reference system used for the recording of time.'))
TemporalCRSPropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=TemporalCRSPropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'TemporalCRS'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



TypeName_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gco, u'aName'), CharacterString_PropertyType, scope=TypeName_Type))
TypeName_Type._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=TypeName_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gco, u'aName'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



DS_Series_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'DS_Series'), DS_Series_Type, scope=DS_Series_PropertyType))
DS_Series_PropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DS_Series_PropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'DS_Series'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



MD_ProgressCode_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_ProgressCode'), CodeListValue_Type, scope=MD_ProgressCode_PropertyType))
MD_ProgressCode_PropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MD_ProgressCode_PropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_ProgressCode'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})


DQ_ThematicClassificationCorrectness_Type._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=DQ_ThematicClassificationCorrectness_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'measureDescription'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=DQ_ThematicClassificationCorrectness_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationMethodType'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DQ_ThematicClassificationCorrectness_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationProcedure'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=DQ_ThematicClassificationCorrectness_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationMethodDescription'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DQ_ThematicClassificationCorrectness_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'dateTime'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=DQ_ThematicClassificationCorrectness_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'result'))),
        pyxb.binding.content.ContentModelTransition(next_state=1, element_use=DQ_ThematicClassificationCorrectness_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'nameOfMeasure'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=DQ_ThematicClassificationCorrectness_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'measureIdentification'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DQ_ThematicClassificationCorrectness_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'dateTime'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=DQ_ThematicClassificationCorrectness_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'result'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=DQ_ThematicClassificationCorrectness_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationMethodDescription'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DQ_ThematicClassificationCorrectness_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationProcedure'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DQ_ThematicClassificationCorrectness_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'dateTime'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=DQ_ThematicClassificationCorrectness_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'result'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=DQ_ThematicClassificationCorrectness_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'measureDescription'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=DQ_ThematicClassificationCorrectness_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationMethodType'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DQ_ThematicClassificationCorrectness_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationProcedure'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=DQ_ThematicClassificationCorrectness_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationMethodDescription'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DQ_ThematicClassificationCorrectness_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'dateTime'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=DQ_ThematicClassificationCorrectness_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'result'))),
    ])
    , 5 : pyxb.binding.content.ContentModelState(state=5, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DQ_ThematicClassificationCorrectness_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationProcedure'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DQ_ThematicClassificationCorrectness_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'dateTime'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=DQ_ThematicClassificationCorrectness_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'result'))),
    ])
    , 6 : pyxb.binding.content.ContentModelState(state=6, is_final=True, transitions=[
    ])
    , 7 : pyxb.binding.content.ContentModelState(state=7, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=DQ_ThematicClassificationCorrectness_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationMethodType'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=DQ_ThematicClassificationCorrectness_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationMethodDescription'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DQ_ThematicClassificationCorrectness_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'dateTime'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DQ_ThematicClassificationCorrectness_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationProcedure'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=DQ_ThematicClassificationCorrectness_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'result'))),
    ])
    , 8 : pyxb.binding.content.ContentModelState(state=8, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=DQ_ThematicClassificationCorrectness_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'result'))),
    ])
})



DerivedCRSPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'DerivedCRS'), DerivedCRSType, scope=DerivedCRSPropertyType, documentation=u'gml:DerivedCRS is a single coordinate reference system that is defined by its coordinate conversion from another single coordinate reference system known as the base CRS. The base CRS can be a projected coordinate reference system, if this DerivedCRS is used for a georectified grid coverage as described in ISO 19123, Clause 8.'))
DerivedCRSPropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DerivedCRSPropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'DerivedCRS'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



MD_DigitalTransferOptions_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_DigitalTransferOptions'), MD_DigitalTransferOptions_Type, scope=MD_DigitalTransferOptions_PropertyType))
MD_DigitalTransferOptions_PropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MD_DigitalTransferOptions_PropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_DigitalTransferOptions'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



MD_Band_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'toneGradation'), Integer_PropertyType, scope=MD_Band_Type))

MD_Band_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'offset'), Real_PropertyType, scope=MD_Band_Type))

MD_Band_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'maxValue'), Real_PropertyType, scope=MD_Band_Type))

MD_Band_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'minValue'), Real_PropertyType, scope=MD_Band_Type))

MD_Band_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'scaleFactor'), Real_PropertyType, scope=MD_Band_Type))

MD_Band_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'units'), UomLength_PropertyType, scope=MD_Band_Type))

MD_Band_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'peakResponse'), Real_PropertyType, scope=MD_Band_Type))

MD_Band_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'bitsPerValue'), Integer_PropertyType, scope=MD_Band_Type))
MD_Band_Type._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=MD_Band_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'scaleFactor'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MD_Band_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'offset'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=MD_Band_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'maxValue'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=MD_Band_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'sequenceIdentifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=MD_Band_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'minValue'))),
        pyxb.binding.content.ContentModelTransition(next_state=10, element_use=MD_Band_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'toneGradation'))),
        pyxb.binding.content.ContentModelTransition(next_state=11, element_use=MD_Band_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'units'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=MD_Band_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'peakResponse'))),
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=MD_Band_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'bitsPerValue'))),
        pyxb.binding.content.ContentModelTransition(next_state=9, element_use=MD_Band_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'descriptor'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MD_Band_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'offset'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=MD_Band_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'scaleFactor'))),
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=MD_Band_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'bitsPerValue'))),
        pyxb.binding.content.ContentModelTransition(next_state=10, element_use=MD_Band_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'toneGradation'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MD_Band_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'offset'))),
    ])
    , 5 : pyxb.binding.content.ContentModelState(state=5, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=MD_Band_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'scaleFactor'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MD_Band_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'offset'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=MD_Band_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'minValue'))),
        pyxb.binding.content.ContentModelTransition(next_state=10, element_use=MD_Band_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'toneGradation'))),
        pyxb.binding.content.ContentModelTransition(next_state=11, element_use=MD_Band_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'units'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=MD_Band_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'peakResponse'))),
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=MD_Band_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'bitsPerValue'))),
    ])
    , 6 : pyxb.binding.content.ContentModelState(state=6, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=MD_Band_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'scaleFactor'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MD_Band_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'offset'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=MD_Band_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'maxValue'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=MD_Band_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'minValue'))),
        pyxb.binding.content.ContentModelTransition(next_state=10, element_use=MD_Band_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'toneGradation'))),
        pyxb.binding.content.ContentModelTransition(next_state=11, element_use=MD_Band_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'units'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=MD_Band_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'peakResponse'))),
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=MD_Band_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'bitsPerValue'))),
        pyxb.binding.content.ContentModelTransition(next_state=9, element_use=MD_Band_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'descriptor'))),
    ])
    , 7 : pyxb.binding.content.ContentModelState(state=7, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MD_Band_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'offset'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=MD_Band_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'scaleFactor'))),
        pyxb.binding.content.ContentModelTransition(next_state=10, element_use=MD_Band_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'toneGradation'))),
    ])
    , 8 : pyxb.binding.content.ContentModelState(state=8, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=MD_Band_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'scaleFactor'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MD_Band_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'offset'))),
        pyxb.binding.content.ContentModelTransition(next_state=10, element_use=MD_Band_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'toneGradation'))),
        pyxb.binding.content.ContentModelTransition(next_state=11, element_use=MD_Band_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'units'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=MD_Band_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'peakResponse'))),
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=MD_Band_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'bitsPerValue'))),
    ])
    , 9 : pyxb.binding.content.ContentModelState(state=9, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=MD_Band_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'scaleFactor'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MD_Band_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'offset'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=MD_Band_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'maxValue'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=MD_Band_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'minValue'))),
        pyxb.binding.content.ContentModelTransition(next_state=10, element_use=MD_Band_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'toneGradation'))),
        pyxb.binding.content.ContentModelTransition(next_state=11, element_use=MD_Band_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'units'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=MD_Band_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'peakResponse'))),
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=MD_Band_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'bitsPerValue'))),
    ])
    , 10 : pyxb.binding.content.ContentModelState(state=10, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MD_Band_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'offset'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=MD_Band_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'scaleFactor'))),
    ])
    , 11 : pyxb.binding.content.ContentModelState(state=11, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=MD_Band_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'scaleFactor'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MD_Band_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'offset'))),
        pyxb.binding.content.ContentModelTransition(next_state=10, element_use=MD_Band_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'toneGradation'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=MD_Band_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'peakResponse'))),
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=MD_Band_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'bitsPerValue'))),
    ])
})



DS_DataSet_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'DS_DataSet'), DS_DataSet_Type, scope=DS_DataSet_PropertyType))
DS_DataSet_PropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DS_DataSet_PropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'DS_DataSet'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



MultiplicityRange_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gco, u'MultiplicityRange'), MultiplicityRange_Type, scope=MultiplicityRange_PropertyType))
MultiplicityRange_PropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MultiplicityRange_PropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gco, u'MultiplicityRange'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



URL_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'URL'), pyxb.binding.datatypes.anyURI, scope=URL_PropertyType))
URL_PropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=URL_PropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'URL'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})


DQ_TemporalValidity_Type._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=DQ_TemporalValidity_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'measureDescription'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=DQ_TemporalValidity_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationMethodType'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DQ_TemporalValidity_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationProcedure'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=DQ_TemporalValidity_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationMethodDescription'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DQ_TemporalValidity_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'dateTime'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=DQ_TemporalValidity_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'result'))),
        pyxb.binding.content.ContentModelTransition(next_state=1, element_use=DQ_TemporalValidity_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'nameOfMeasure'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=DQ_TemporalValidity_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'measureIdentification'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DQ_TemporalValidity_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'dateTime'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=DQ_TemporalValidity_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'result'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=DQ_TemporalValidity_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationMethodDescription'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DQ_TemporalValidity_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationProcedure'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DQ_TemporalValidity_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'dateTime'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=DQ_TemporalValidity_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'result'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=DQ_TemporalValidity_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'measureDescription'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=DQ_TemporalValidity_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationMethodType'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DQ_TemporalValidity_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationProcedure'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=DQ_TemporalValidity_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationMethodDescription'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DQ_TemporalValidity_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'dateTime'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=DQ_TemporalValidity_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'result'))),
    ])
    , 5 : pyxb.binding.content.ContentModelState(state=5, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DQ_TemporalValidity_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationProcedure'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DQ_TemporalValidity_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'dateTime'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=DQ_TemporalValidity_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'result'))),
    ])
    , 6 : pyxb.binding.content.ContentModelState(state=6, is_final=True, transitions=[
    ])
    , 7 : pyxb.binding.content.ContentModelState(state=7, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=DQ_TemporalValidity_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationMethodType'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=DQ_TemporalValidity_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationMethodDescription'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DQ_TemporalValidity_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'dateTime'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DQ_TemporalValidity_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'evaluationProcedure'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=DQ_TemporalValidity_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'result'))),
    ])
    , 8 : pyxb.binding.content.ContentModelState(state=8, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=DQ_TemporalValidity_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'result'))),
    ])
})



QuantityPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'Quantity'), CTD_ANON_5, nillable=pyxb.binding.datatypes.boolean(1), scope=QuantityPropertyType, documentation=u'An XML attribute uom ("unit of measure") is required, whose value is a URI which identifies the definition of a ratio scale or units by which the numeric value shall be multiplied, or an interval or position scale on which the value occurs.'))
QuantityPropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=QuantityPropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'Quantity'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



CI_Series_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'page'), CharacterString_PropertyType, scope=CI_Series_Type))

CI_Series_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'name'), CharacterString_PropertyType, scope=CI_Series_Type))

CI_Series_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'issueIdentification'), CharacterString_PropertyType, scope=CI_Series_Type))
CI_Series_Type._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=CI_Series_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=CI_Series_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'page'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=CI_Series_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'issueIdentification'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=CI_Series_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'page'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=CI_Series_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'issueIdentification'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=True, transitions=[
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=CI_Series_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'page'))),
    ])
})


MD_ServiceIdentification_Type._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=MD_ServiceIdentification_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'citation'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MD_ServiceIdentification_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'resourceMaintenance'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MD_ServiceIdentification_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'resourceConstraints'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MD_ServiceIdentification_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'graphicOverview'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MD_ServiceIdentification_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'resourceFormat'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MD_ServiceIdentification_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'pointOfContact'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MD_ServiceIdentification_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'descriptiveKeywords'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MD_ServiceIdentification_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'resourceSpecificUsage'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MD_ServiceIdentification_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'status'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MD_ServiceIdentification_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'credit'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MD_ServiceIdentification_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'aggregationInfo'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=MD_ServiceIdentification_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'abstract'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MD_ServiceIdentification_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'resourceMaintenance'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MD_ServiceIdentification_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'purpose'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MD_ServiceIdentification_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'resourceConstraints'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MD_ServiceIdentification_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'graphicOverview'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MD_ServiceIdentification_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'resourceFormat'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MD_ServiceIdentification_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'pointOfContact'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MD_ServiceIdentification_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'descriptiveKeywords'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MD_ServiceIdentification_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'resourceSpecificUsage'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MD_ServiceIdentification_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'status'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MD_ServiceIdentification_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'credit'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MD_ServiceIdentification_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'aggregationInfo'))),
    ])
})



TopoSurfaceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'directedFace'), DirectedFacePropertyType, scope=TopoSurfaceType, documentation=u'The gml:directedFace property element describes the boundary of topology solids, in the coBoundary of topology edges and is used in the support of surface features via the gml:TopoSurface expression, see below. The orientation attribute of type gml:SignType expresses the sense in which the included face is used i.e. inward or outward with respect to the surface normal in any geometric realisation.'))
TopoSurfaceType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=TopoSurfaceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=TopoSurfaceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=TopoSurfaceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=1, element_use=TopoSurfaceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'metaDataProperty'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=TopoSurfaceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'description'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=TopoSurfaceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'directedFace'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=TopoSurfaceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=TopoSurfaceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=TopoSurfaceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'directedFace'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=TopoSurfaceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=TopoSurfaceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=TopoSurfaceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=TopoSurfaceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'directedFace'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=TopoSurfaceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'directedFace'))),
    ])
    , 5 : pyxb.binding.content.ContentModelState(state=5, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=TopoSurfaceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=TopoSurfaceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'directedFace'))),
    ])
})



GridEnvelopeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'high'), integerList, scope=GridEnvelopeType))

GridEnvelopeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'low'), integerList, scope=GridEnvelopeType))
GridEnvelopeType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=GridEnvelopeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'low'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=GridEnvelopeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'high'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=True, transitions=[
    ])
})



MultiGeometryPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractGeometricAggregate'), AbstractGeometricAggregateType, abstract=pyxb.binding.datatypes.boolean(1), scope=MultiGeometryPropertyType, documentation=u'gml:AbstractGeometricAggregate is the abstract head of the substitution group for all geometric aggregates.'))
MultiGeometryPropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MultiGeometryPropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractGeometricAggregate'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



DatumPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractDatum'), AbstractDatumType, abstract=pyxb.binding.datatypes.boolean(1), scope=DatumPropertyType, documentation=u'A gml:AbstractDatum specifies the relationship of a coordinate system to the earth, thus creating a coordinate reference system. A datum uses a parameter or set of parameters that determine the location of the origin of the coordinate reference system. Each datum subtype may be associated with only specific types of coordinate systems. This abstract complex type shall not be used, extended, or restricted, in a GML Application Schema, to define a concrete subtype with a meaning equivalent to a concrete subtype specified in this document.'))
DatumPropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DatumPropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractDatum'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



FaceOrTopoSolidPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'Face'), FaceType, scope=FaceOrTopoSolidPropertyType, documentation=u'gml:Face represents the 2-dimensional topology primitive.\nThe topological boundary of a face (gml:directedEdge) consists of a sequence of directed edges. If provided, the aggregationType attribute shall have the value "sequence".\nThe optional coboundary of a face (gml:directedTopoSolid) is a pair of directed solids which are bounded by this face. A positively directed solid corresponds to a solid which lies in the direction of the negatively directed normal to the face in any geometric realisation. \nA face may optionally be realised by a 2-dimensional geometric primitive (gml:surfaceProperty).'))

FaceOrTopoSolidPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'TopoSolid'), TopoSolidType, scope=FaceOrTopoSolidPropertyType, documentation=u'gml:TopoSolid represents the 3-dimensional topology primitive. \nThe topological boundary of a solid (gml:directedFace) consists of a set of directed faces.\nA solid may optionally be realised by a 3-dimensional geometric primitive (gml:solidProperty).'))
FaceOrTopoSolidPropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=FaceOrTopoSolidPropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'Face'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=FaceOrTopoSolidPropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'TopoSolid'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



MD_SecurityConstraints_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_SecurityConstraints'), MD_SecurityConstraints_Type, scope=MD_SecurityConstraints_PropertyType))
MD_SecurityConstraints_PropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MD_SecurityConstraints_PropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_SecurityConstraints'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



TimeCalendarEraType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'epochOfUse'), TimePeriodPropertyType, scope=TimeCalendarEraType))

TimeCalendarEraType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'referenceEvent'), StringOrRefType, scope=TimeCalendarEraType))

TimeCalendarEraType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'referenceDate'), CalDate, scope=TimeCalendarEraType))

TimeCalendarEraType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'julianReference'), pyxb.binding.datatypes.decimal, scope=TimeCalendarEraType))
TimeCalendarEraType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=1, element_use=TimeCalendarEraType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'metaDataProperty'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=TimeCalendarEraType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'description'))),
        pyxb.binding.content.ContentModelTransition(next_state=9, element_use=TimeCalendarEraType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=TimeCalendarEraType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=9, element_use=TimeCalendarEraType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=TimeCalendarEraType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=TimeCalendarEraType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'julianReference'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=TimeCalendarEraType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'epochOfUse'))),
    ])
    , 5 : pyxb.binding.content.ContentModelState(state=5, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=9, element_use=TimeCalendarEraType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
    ])
    , 6 : pyxb.binding.content.ContentModelState(state=6, is_final=True, transitions=[
    ])
    , 7 : pyxb.binding.content.ContentModelState(state=7, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=TimeCalendarEraType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'referenceDate'))),
    ])
    , 8 : pyxb.binding.content.ContentModelState(state=8, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=TimeCalendarEraType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'referenceEvent'))),
    ])
    , 9 : pyxb.binding.content.ContentModelState(state=9, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=9, element_use=TimeCalendarEraType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=TimeCalendarEraType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'referenceEvent'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=TimeCalendarEraType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'remarks'))),
    ])
})



UomTime_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'UnitDefinition'), UnitDefinitionType, scope=UomTime_PropertyType, documentation=u'A gml:UnitDefinition is a general definition of a unit of measure. This generic element is used only for units for which no relationship with other units or units systems is known.\nThe content model of gml:UnitDefinition adds three additional properties to gml:Definition, gml:quantityType, gml:quantityTypeReference and gml:catalogSymbol.  \nThe gml:catalogSymbol property optionally gives the short symbol used for this unit. This element is usually used when the relationship of this unit to other units or units systems is unknown.'))
UomTime_PropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=UomTime_PropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'UnitDefinition'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



EX_VerticalExtent_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'EX_VerticalExtent'), EX_VerticalExtent_Type, scope=EX_VerticalExtent_PropertyType))
EX_VerticalExtent_PropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=EX_VerticalExtent_PropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'EX_VerticalExtent'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



ProjectedCRSPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'ProjectedCRS'), ProjectedCRSType, scope=ProjectedCRSPropertyType, documentation=u'gml:ProjectedCRS is a 2D coordinate reference system used to approximate the shape of the earth on a planar surface, but in such a way that the distortion that is inherent to the approximation is carefully controlled and known. Distortion correction is commonly applied to calculated bearings and distances to produce values that are a close match to actual field values.'))
ProjectedCRSPropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=ProjectedCRSPropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'ProjectedCRS'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



ArrayAssociationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractObject'), pyxb.binding.datatypes.anyType, abstract=pyxb.binding.datatypes.boolean(1), scope=ArrayAssociationType, documentation=u'This element has no type defined, and is therefore implicitly (according to the rules of W3C XML Schema) an XML Schema anyType. It is used as the head of an XML Schema substitution group which unifies complex content and certain simple content elements used for datatypes in GML, including the gml:AbstractGML substitution group.'))
ArrayAssociationType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=1, element_use=ArrayAssociationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractObject'))),
    ])
})


InlinePropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, term=pyxb.binding.content.Wildcard(process_contents=pyxb.binding.content.Wildcard.PC_strict, namespace_constraint=pyxb.binding.content.Wildcard.NC_any)),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



CTD_ANON_10._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'posList'), DirectPositionListType, scope=CTD_ANON_10))

CTD_ANON_10._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'pointProperty'), PointPropertyType, scope=CTD_ANON_10, documentation=u'This property element either references a point via the XLink-attributes or contains the point element. pointProperty is the predefined property which may be used by GML Application Schemas whenever a GML feature has a property with a value that is substitutable for Point.'))

CTD_ANON_10._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'pos'), DirectPositionType, scope=CTD_ANON_10))
CTD_ANON_10._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=CTD_ANON_10._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'posList'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=CTD_ANON_10._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'pointProperty'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=CTD_ANON_10._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'pos'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=CTD_ANON_10._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'pointProperty'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=CTD_ANON_10._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'pos'))),
    ])
})



KnotType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'weight'), pyxb.binding.datatypes.double, scope=KnotType))

KnotType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'value'), pyxb.binding.datatypes.double, scope=KnotType))

KnotType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'multiplicity'), pyxb.binding.datatypes.nonNegativeInteger, scope=KnotType))
KnotType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=KnotType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'value'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=KnotType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'multiplicity'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=KnotType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'weight'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=True, transitions=[
    ])
})



UomVolume_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'UnitDefinition'), UnitDefinitionType, scope=UomVolume_PropertyType, documentation=u'A gml:UnitDefinition is a general definition of a unit of measure. This generic element is used only for units for which no relationship with other units or units systems is known.\nThe content model of gml:UnitDefinition adds three additional properties to gml:Definition, gml:quantityType, gml:quantityTypeReference and gml:catalogSymbol.  \nThe gml:catalogSymbol property optionally gives the short symbol used for this unit. This element is usually used when the relationship of this unit to other units or units systems is unknown.'))
UomVolume_PropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=UomVolume_PropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'UnitDefinition'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



CategoryPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'Category'), CTD_ANON_4, nillable=pyxb.binding.datatypes.boolean(1), scope=CategoryPropertyType, documentation=u'A gml:Category has an optional XML attribute codeSpace, whose value is a URI which identifies a dictionary, codelist or authority for the term.'))
CategoryPropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=CategoryPropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'Category'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



ParameterValueType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'value'), MeasureType, scope=ParameterValueType, documentation=u'gml:value is a numeric value of an operation parameter, with its associated unit of measure.'))

ParameterValueType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'integerValue'), pyxb.binding.datatypes.positiveInteger, scope=ParameterValueType, documentation=u'gml:integerValue is a positive integer value of an operation parameter, usually used for a count. An integer value does not have an associated unit of measure.'))

ParameterValueType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'booleanValue'), pyxb.binding.datatypes.boolean, scope=ParameterValueType, documentation=u'gml:booleanValue is a boolean value of an operation parameter. A Boolean value does not have an associated unit of measure.'))

ParameterValueType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'valueList'), MeasureListType, scope=ParameterValueType, documentation=u'gml:valueList is an ordered sequence of two or more numeric values of an operation parameter list, where each value has the same associated unit of measure. An element of this type contains a space-separated sequence of double values.'))

ParameterValueType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'operationParameter'), OperationParameterPropertyType, scope=ParameterValueType, documentation=u'gml:operationParameter is an association role to the operation parameter of which this is a value.'))

ParameterValueType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'integerValueList'), integerList, scope=ParameterValueType, documentation=u'gml:integerValueList is an ordered sequence of two or more integer values of an operation parameter list, usually used for counts. These integer values do not have an associated unit of measure. An element of this type contains a space-separated sequence of integer values.'))

ParameterValueType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'dmsAngleValue'), DMSAngleType, scope=ParameterValueType, documentation=u''))

ParameterValueType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'valueFile'), pyxb.binding.datatypes.anyURI, scope=ParameterValueType, documentation=u'gml:valueFile is a reference to a file or a part of a file containing one or more parameter values, each numeric value with its associated unit of measure. When referencing a part of a file, that file shall contain multiple identified parts, such as an XML encoded document. Furthermore, the referenced file or part of a file may reference another part of the same or different files, as allowed in XML documents.'))

ParameterValueType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'stringValue'), pyxb.binding.datatypes.string, scope=ParameterValueType, documentation=u'gml:stringValue is a character string value of an operation parameter. A string value does not have an associated unit of measure.'))
ParameterValueType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=ParameterValueType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'valueList'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=ParameterValueType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'integerValue'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=ParameterValueType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'booleanValue'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=ParameterValueType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'value'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=ParameterValueType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'integerValueList'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=ParameterValueType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'dmsAngleValue'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=ParameterValueType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'valueFile'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=ParameterValueType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'stringValue'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=ParameterValueType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'operationParameter'))),
    ])
})


BezierType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=BezierType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'pointProperty'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=BezierType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'pos'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=BezierType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'posList'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=BezierType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'pointRep'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=BezierType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'coordinates'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=BezierType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'degree'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=BezierType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'pos'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=BezierType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'pointRep'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=BezierType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'pointProperty'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=BezierType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'degree'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=BezierType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'degree'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=BezierType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'knot'))),
    ])
    , 5 : pyxb.binding.content.ContentModelState(state=5, is_final=True, transitions=[
    ])
    , 6 : pyxb.binding.content.ContentModelState(state=6, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=BezierType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'knot'))),
    ])
})



CTD_ANON_11._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'posList'), DirectPositionListType, scope=CTD_ANON_11))

CTD_ANON_11._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'pointProperty'), PointPropertyType, scope=CTD_ANON_11, documentation=u'This property element either references a point via the XLink-attributes or contains the point element. pointProperty is the predefined property which may be used by GML Application Schemas whenever a GML feature has a property with a value that is substitutable for Point.'))

CTD_ANON_11._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'pos'), DirectPositionType, scope=CTD_ANON_11))
CTD_ANON_11._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=CTD_ANON_11._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'posList'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=CTD_ANON_11._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'pos'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=CTD_ANON_11._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'pointProperty'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=CTD_ANON_11._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'pos'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=CTD_ANON_11._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'pointProperty'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=True, transitions=[
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=CTD_ANON_11._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'pos'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=CTD_ANON_11._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'pointProperty'))),
    ])
    , 5 : pyxb.binding.content.ContentModelState(state=5, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=CTD_ANON_11._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'pos'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=CTD_ANON_11._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'pointProperty'))),
    ])
})



TopoPointType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'directedNode'), DirectedNodePropertyType, scope=TopoPointType, documentation=u'A gml:directedNode property element describes the boundary of topology edges and is used in the support of topological point features via the gml:TopoPoint expression, see below. The orientation attribute of type gml:SignType expresses the sense in which the included node is used: start ("-") or end ("+") node.'))
TopoPointType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=TopoPointType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=TopoPointType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=TopoPointType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=1, element_use=TopoPointType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'metaDataProperty'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=TopoPointType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'directedNode'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=TopoPointType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'description'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=TopoPointType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=TopoPointType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'directedNode'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=TopoPointType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=True, transitions=[
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=TopoPointType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=TopoPointType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=TopoPointType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'directedNode'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=TopoPointType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
    ])
    , 5 : pyxb.binding.content.ContentModelState(state=5, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=TopoPointType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'directedNode'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=TopoPointType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
    ])
})



ImageDatumType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'pixelInCell'), CodeWithAuthorityType, scope=ImageDatumType, documentation=u'gml:pixelInCell is a specification of the way an image grid is associated with the image data attributes. The required codeSpace attribute shall reference a source of information specifying the values and meanings of all the allowed string values for this property.'))
ImageDatumType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=1, element_use=ImageDatumType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'metaDataProperty'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=ImageDatumType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'description'))),
        pyxb.binding.content.ContentModelTransition(next_state=9, element_use=ImageDatumType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=ImageDatumType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=9, element_use=ImageDatumType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=ImageDatumType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=ImageDatumType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'domainOfValidity'))),
        pyxb.binding.content.ContentModelTransition(next_state=10, element_use=ImageDatumType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'scope'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=ImageDatumType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'realizationEpoch'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=ImageDatumType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'pixelInCell'))),
    ])
    , 5 : pyxb.binding.content.ContentModelState(state=5, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=9, element_use=ImageDatumType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
    ])
    , 6 : pyxb.binding.content.ContentModelState(state=6, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=ImageDatumType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'pixelInCell'))),
    ])
    , 7 : pyxb.binding.content.ContentModelState(state=7, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=10, element_use=ImageDatumType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'scope'))),
    ])
    , 8 : pyxb.binding.content.ContentModelState(state=8, is_final=True, transitions=[
    ])
    , 9 : pyxb.binding.content.ContentModelState(state=9, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=ImageDatumType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'domainOfValidity'))),
        pyxb.binding.content.ContentModelTransition(next_state=9, element_use=ImageDatumType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=10, element_use=ImageDatumType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'scope'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=ImageDatumType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'remarks'))),
    ])
    , 10 : pyxb.binding.content.ContentModelState(state=10, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=ImageDatumType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'anchorDefinition'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=ImageDatumType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'realizationEpoch'))),
        pyxb.binding.content.ContentModelTransition(next_state=8, element_use=ImageDatumType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'pixelInCell'))),
        pyxb.binding.content.ContentModelTransition(next_state=10, element_use=ImageDatumType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'scope'))),
    ])
})



DQ_RelativeInternalPositionalAccuracy_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'DQ_RelativeInternalPositionalAccuracy'), DQ_RelativeInternalPositionalAccuracy_Type, scope=DQ_RelativeInternalPositionalAccuracy_PropertyType))
DQ_RelativeInternalPositionalAccuracy_PropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DQ_RelativeInternalPositionalAccuracy_PropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'DQ_RelativeInternalPositionalAccuracy'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



FileType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'rangeParameters'), AssociationRoleType, scope=FileType))

FileType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'fileStructure'), CodeType, scope=FileType))

FileType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'mimeType'), pyxb.binding.datatypes.anyURI, scope=FileType))

FileType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'compression'), pyxb.binding.datatypes.anyURI, scope=FileType))

FileType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'fileName'), pyxb.binding.datatypes.anyURI, scope=FileType, documentation=u''))

FileType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'fileReference'), pyxb.binding.datatypes.anyURI, scope=FileType))
FileType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=FileType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'rangeParameters'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=FileType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'fileName'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=FileType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'fileReference'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=FileType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'mimeType'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=FileType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'compression'))),
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=FileType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'compression'))),
    ])
    , 5 : pyxb.binding.content.ContentModelState(state=5, is_final=True, transitions=[
    ])
    , 6 : pyxb.binding.content.ContentModelState(state=6, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=FileType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'fileStructure'))),
    ])
})



Length_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gco, u'Length'), LengthType, scope=Length_PropertyType))
Length_PropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=Length_PropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gco, u'Length'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



VerticalCRSPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'VerticalCRS'), VerticalCRSType, scope=VerticalCRSPropertyType, documentation=u'gml:VerticalCRS is a 1D coordinate reference system used for recording heights or depths. Vertical CRSs make use of the direction of gravity to define the concept of height or depth, but the relationship with gravity may not be straightforward. By implication, ellipsoidal heights (h) cannot be captured in a vertical coordinate reference system. Ellipsoidal heights cannot exist independently, but only as an inseparable part of a 3D coordinate tuple defined in a geographic 3D coordinate reference system.'))
VerticalCRSPropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=VerticalCRSPropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'VerticalCRS'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



RectangleType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'exterior'), AbstractRingPropertyType, scope=RectangleType, documentation=u'A boundary of a surface consists of a number of rings. In the normal 2D case, one of these rings is distinguished as being the exterior boundary. In a general manifold this is not always possible, in which case all boundaries shall be listed as interior boundaries, and the exterior will be empty.'))
RectangleType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=RectangleType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'exterior'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



PassThroughOperationPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'PassThroughOperation'), PassThroughOperationType, scope=PassThroughOperationPropertyType, documentation=u'gml:PassThroughOperation is a pass-through operation specifies that a subset of a coordinate tuple is subject to a specific coordinate operation.\nThe modifiedCoordinate property elements are an ordered sequence of positive integers defining the positions in a coordinate tuple of the coordinates affected by this pass-through operation. The AggregationAttributeGroup should be used to specify that the modifiedCoordinate elements are ordered.'))
PassThroughOperationPropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=PassThroughOperationPropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'PassThroughOperation'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



MD_CellGeometryCode_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_CellGeometryCode'), CodeListValue_Type, scope=MD_CellGeometryCode_PropertyType))
MD_CellGeometryCode_PropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MD_CellGeometryCode_PropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_CellGeometryCode'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



EllipsoidType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'semiMajorAxis'), MeasureType, scope=EllipsoidType, documentation=u'gml:semiMajorAxis specifies the length of the semi-major axis of the ellipsoid, with its units. Uses the MeasureType with the restriction that the unit of measure referenced by uom must be suitable for a length, such as metres or feet.'))

EllipsoidType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'secondDefiningParameter'), CTD_ANON_8, scope=EllipsoidType, documentation=u'gml:secondDefiningParameter is a property containing the definition of the second parameter that defines the shape of an ellipsoid. An ellipsoid requires two defining parameters: semi-major axis and inverse flattening or semi-major axis and semi-minor axis. When the reference body is a sphere rather than an ellipsoid, only a single defining parameter is required, namely the radius of the sphere; in that case, the semi-major axis "degenerates" into the radius of the sphere.\nThe inverseFlattening element contains the inverse flattening value of the ellipsoid. This value is a scale factor (or ratio). It uses gml:LengthType with the restriction that the unit of measure referenced by the uom attribute must be suitable for a scale factor, such as percent, permil, or parts-per-million.\nThe semiMinorAxis element contains the length of the semi-minor axis of the ellipsoid. When the isSphere element is included, the ellipsoid is degenerate and is actually a sphere. The sphere is completely defined by the semi-major axis, which is the radius of the sphere.'))
EllipsoidType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=1, element_use=EllipsoidType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'metaDataProperty'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=EllipsoidType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'description'))),
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=EllipsoidType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=EllipsoidType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=EllipsoidType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=EllipsoidType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'descriptionReference'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=True, transitions=[
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=EllipsoidType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'identifier'))),
    ])
    , 5 : pyxb.binding.content.ContentModelState(state=5, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=EllipsoidType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'secondDefiningParameter'))),
    ])
    , 6 : pyxb.binding.content.ContentModelState(state=6, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=EllipsoidType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'semiMajorAxis'))),
    ])
    , 7 : pyxb.binding.content.ContentModelState(state=7, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=7, element_use=EllipsoidType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=EllipsoidType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'semiMajorAxis'))),
        pyxb.binding.content.ContentModelTransition(next_state=6, element_use=EllipsoidType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'remarks'))),
    ])
})



LI_Lineage_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'LI_Lineage'), LI_Lineage_Type, scope=LI_Lineage_PropertyType))
LI_Lineage_PropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=LI_Lineage_PropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'LI_Lineage'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})


ConeType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=ConeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'rows'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



LinearRingPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'LinearRing'), LinearRingType, scope=LinearRingPropertyType, documentation=u'A LinearRing is defined by four or more coordinate tuples, with linear interpolation between them; the first and last coordinates shall be coincident. The number of direct positions in the list shall be at least four.'))
LinearRingPropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=LinearRingPropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'LinearRing'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



DQ_QuantitativeAttributeAccuracy_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'DQ_QuantitativeAttributeAccuracy'), DQ_QuantitativeAttributeAccuracy_Type, scope=DQ_QuantitativeAttributeAccuracy_PropertyType))
DQ_QuantitativeAttributeAccuracy_PropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DQ_QuantitativeAttributeAccuracy_PropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'DQ_QuantitativeAttributeAccuracy'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



UomVelocity_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'UnitDefinition'), UnitDefinitionType, scope=UomVelocity_PropertyType, documentation=u'A gml:UnitDefinition is a general definition of a unit of measure. This generic element is used only for units for which no relationship with other units or units systems is known.\nThe content model of gml:UnitDefinition adds three additional properties to gml:Definition, gml:quantityType, gml:quantityTypeReference and gml:catalogSymbol.  \nThe gml:catalogSymbol property optionally gives the short symbol used for this unit. This element is usually used when the relationship of this unit to other units or units systems is unknown.'))
UomVelocity_PropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=UomVelocity_PropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'UnitDefinition'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



MD_Medium_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'name'), MD_MediumNameCode_PropertyType, scope=MD_Medium_Type))

MD_Medium_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'densityUnits'), CharacterString_PropertyType, scope=MD_Medium_Type))

MD_Medium_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'volumes'), Integer_PropertyType, scope=MD_Medium_Type))

MD_Medium_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'density'), Real_PropertyType, scope=MD_Medium_Type))

MD_Medium_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'mediumFormat'), MD_MediumFormatCode_PropertyType, scope=MD_Medium_Type))

MD_Medium_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'mediumNote'), CharacterString_PropertyType, scope=MD_Medium_Type))
MD_Medium_Type._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=MD_Medium_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'name'))),
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=MD_Medium_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'densityUnits'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MD_Medium_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'volumes'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=MD_Medium_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'density'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MD_Medium_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'mediumFormat'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=MD_Medium_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'mediumNote'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MD_Medium_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'mediumFormat'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=MD_Medium_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'mediumNote'))),
    ])
    , 3 : pyxb.binding.content.ContentModelState(state=3, is_final=True, transitions=[
    ])
    , 4 : pyxb.binding.content.ContentModelState(state=4, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=5, element_use=MD_Medium_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'densityUnits'))),
        pyxb.binding.content.ContentModelTransition(next_state=4, element_use=MD_Medium_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'density'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MD_Medium_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'volumes'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MD_Medium_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'mediumFormat'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=MD_Medium_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'mediumNote'))),
    ])
    , 5 : pyxb.binding.content.ContentModelState(state=5, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MD_Medium_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'mediumFormat'))),
        pyxb.binding.content.ContentModelTransition(next_state=3, element_use=MD_Medium_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'mediumNote'))),
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MD_Medium_Type._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'volumes'))),
    ])
})



DQ_TemporalAccuracy_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'AbstractDQ_TemporalAccuracy'), AbstractDQ_TemporalAccuracy_Type, abstract=pyxb.binding.datatypes.boolean(1), scope=DQ_TemporalAccuracy_PropertyType))
DQ_TemporalAccuracy_PropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DQ_TemporalAccuracy_PropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'AbstractDQ_TemporalAccuracy'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



EX_GeographicDescription_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'EX_GeographicDescription'), EX_GeographicDescription_Type, scope=EX_GeographicDescription_PropertyType))
EX_GeographicDescription_PropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=EX_GeographicDescription_PropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'EX_GeographicDescription'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



DQ_DataQuality_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'DQ_DataQuality'), DQ_DataQuality_Type, scope=DQ_DataQuality_PropertyType))
DQ_DataQuality_PropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DQ_DataQuality_PropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'DQ_DataQuality'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



MD_ApplicationSchemaInformation_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_ApplicationSchemaInformation'), MD_ApplicationSchemaInformation_Type, scope=MD_ApplicationSchemaInformation_PropertyType))
MD_ApplicationSchemaInformation_PropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MD_ApplicationSchemaInformation_PropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_ApplicationSchemaInformation'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



SingleOperationPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractSingleOperation'), AbstractCoordinateOperationType, abstract=pyxb.binding.datatypes.boolean(1), scope=SingleOperationPropertyType, documentation=u'gml:AbstractSingleOperation is a single (not concatenated) coordinate operation.'))
SingleOperationPropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=SingleOperationPropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'AbstractSingleOperation'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



TypeName_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gco, u'TypeName'), TypeName_Type, scope=TypeName_PropertyType))
TypeName_PropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=TypeName_PropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gco, u'TypeName'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



CTD_ANON_12._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'Row'), CTD_ANON_10, scope=CTD_ANON_12))
CTD_ANON_12._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=CTD_ANON_12._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'Row'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=CTD_ANON_12._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'Row'))),
    ])
})



DS_StereoMate_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'DS_StereoMate'), DS_StereoMate_Type, scope=DS_StereoMate_PropertyType))
DS_StereoMate_PropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DS_StereoMate_PropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'DS_StereoMate'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



UomScale_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'UnitDefinition'), UnitDefinitionType, scope=UomScale_PropertyType, documentation=u'A gml:UnitDefinition is a general definition of a unit of measure. This generic element is used only for units for which no relationship with other units or units systems is known.\nThe content model of gml:UnitDefinition adds three additional properties to gml:Definition, gml:quantityType, gml:quantityTypeReference and gml:catalogSymbol.  \nThe gml:catalogSymbol property optionally gives the short symbol used for this unit. This element is usually used when the relationship of this unit to other units or units systems is unknown.'))
UomScale_PropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=UomScale_PropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'UnitDefinition'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



RS_ReferenceSystem_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'AbstractRS_ReferenceSystem'), AbstractRS_ReferenceSystem_Type, abstract=pyxb.binding.datatypes.boolean(1), scope=RS_ReferenceSystem_PropertyType))
RS_ReferenceSystem_PropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=RS_ReferenceSystem_PropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'AbstractRS_ReferenceSystem'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



DQ_Scope_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'DQ_Scope'), DQ_Scope_Type, scope=DQ_Scope_PropertyType))
DQ_Scope_PropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=DQ_Scope_PropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'DQ_Scope'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



TransformationPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'Transformation'), TransformationType, scope=TransformationPropertyType, documentation=u'gml:Transformation is a concrete object element derived from gml:GeneralTransformation (13.6.2.13).\nThis concrete object can be used for all operation methods, without using a GML Application Schema that defines operation-method-specialized element names and contents, especially for methods with only one Transformation instance.\nThe parameterValue elements are an unordered list of composition associations to the set of parameter values used by this conversion operation.'))
TransformationPropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=TransformationPropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'Transformation'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



MD_GeometricObjects_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_GeometricObjects'), MD_GeometricObjects_Type, scope=MD_GeometricObjects_PropertyType))
MD_GeometricObjects_PropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=MD_GeometricObjects_PropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'MD_GeometricObjects'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



RingPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'Ring'), RingType, scope=RingPropertyType, documentation=u'A ring is used to represent a single connected component of a surface boundary as specified in ISO 19107:2003, 6.3.6.\nEvery gml:curveMember references or contains one curve, i.e. any element which is substitutable for gml:AbstractCurve. In the context of a ring, the curves describe the boundary of the surface. The sequence of curves shall be contiguous and connected in a cycle.\nIf provided, the aggregationType attribute shall have the value "sequence".'))
RingPropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=RingPropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'Ring'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})


CylinderType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=CylinderType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'rows'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



CTD_ANON_13._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, u'AffinePlacement'), AffinePlacementType, scope=CTD_ANON_13, documentation=u'location, refDirection, inDimension and outDimension have the same meaning as specified in ISO 19107:2003, 6.4.21.'))
CTD_ANON_13._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=False, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=CTD_ANON_13._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, u'AffinePlacement'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})



LanguageCode_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, u'LanguageCode'), CodeListValue_Type, scope=LanguageCode_PropertyType))
LanguageCode_PropertyType._ContentModel = pyxb.binding.content.ContentModel(state_map = {
      1 : pyxb.binding.content.ContentModelState(state=1, is_final=True, transitions=[
        pyxb.binding.content.ContentModelTransition(next_state=2, element_use=LanguageCode_PropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, u'LanguageCode'))),
    ])
    , 2 : pyxb.binding.content.ContentModelState(state=2, is_final=True, transitions=[
    ])
})

Triangle._setSubstitutionGroup(AbstractSurfacePatch)

Face._setSubstitutionGroup(AbstractTopoPrimitive)

usesAxis._setSubstitutionGroup(axis)

AbstractTopoPrimitive._setSubstitutionGroup(AbstractTopology)

ImageCRS._setSubstitutionGroup(AbstractSingleCRS)

usesTimeCS._setSubstitutionGroup(timeCS)

AbstractTimeSlice._setSubstitutionGroup(AbstractGML)

usesValue._setSubstitutionGroup(parameterValue)

coverageFunction._setSubstitutionGroup(AbstractObject_)

CategoryList._setSubstitutionGroup(AbstractScalarValueList)

AffineCS._setSubstitutionGroup(AbstractCoordinateSystem)

PolarCS._setSubstitutionGroup(AbstractCoordinateSystem)

priorityLocation._setSubstitutionGroup(location)

OffsetCurve._setSubstitutionGroup(AbstractCurveSegment)

AbstractContinuousCoverage._setSubstitutionGroup(AbstractFeature)

DQ_AccuracyOfATimeMeasurement._setSubstitutionGroup(AbstractDQ_TemporalAccuracy)

usesEllipsoidalCS._setSubstitutionGroup(ellipsoidalCS)

DirectedObservationAtDistance._setSubstitutionGroup(DirectedObservation)

TimeTopologyComplex._setSubstitutionGroup(AbstractTimeComplex)

DQ_CompletenessCommission._setSubstitutionGroup(AbstractDQ_Completeness)

MovingObjectStatus._setSubstitutionGroup(AbstractTimeSlice)

AbstractSingleOperation._setSubstitutionGroup(AbstractCoordinateOperation)

MD_ImagingConditionCode._setSubstitutionGroup(CharacterString)

AbstractFeatureCollection._setSubstitutionGroup(AbstractFeature)

AbstractScalarValueList._setSubstitutionGroup(AbstractValue)

Edge._setSubstitutionGroup(AbstractTopoPrimitive)

GridCoverage._setSubstitutionGroup(AbstractDiscreteCoverage)

SphericalCS._setSubstitutionGroup(AbstractCoordinateSystem)

EnvelopeWithTimePeriod._setSubstitutionGroup(Envelope)

TemporalDatum._setSubstitutionGroup(AbstractDatum)

AffinePlacement._setSubstitutionGroup(AbstractObject_)

TimeCoordinateSystem._setSubstitutionGroup(TimeReferenceSystem)

AbstractImplicitGeometry._setSubstitutionGroup(AbstractGeometry)

BaseUnit._setSubstitutionGroup(UnitDefinition)

AbstractDQ_LogicalConsistency._setSubstitutionGroup(AbstractDQ_Element)

CoordinateSystemAxis._setSubstitutionGroup(Definition)

includesSingleCRS._setSubstitutionGroup(componentReferenceSystem)

DQ_FormatConsistency._setSubstitutionGroup(AbstractDQ_LogicalConsistency)

PolygonPatch._setSubstitutionGroup(AbstractSurfacePatch)

AbstractGeometricAggregate._setSubstitutionGroup(AbstractGeometry)

EX_SpatialTemporalExtent._setSubstitutionGroup(EX_TemporalExtent)

AbstractCoverage._setSubstitutionGroup(AbstractFeature)

ConcatenatedOperation._setSubstitutionGroup(AbstractCoordinateOperation)

DQ_DomainConsistency._setSubstitutionGroup(AbstractDQ_LogicalConsistency)

MD_Georectified._setSubstitutionGroup(MD_GridSpatialRepresentation)

MD_CharacterSetCode._setSubstitutionGroup(CharacterString)

DirectedObservation._setSubstitutionGroup(Observation)

DQ_EvaluationMethodTypeCode._setSubstitutionGroup(CharacterString)

GeodeticDatum._setSubstitutionGroup(AbstractDatum)

MD_ImageDescription._setSubstitutionGroup(MD_CoverageDescription)

DQ_QuantitativeResult._setSubstitutionGroup(AbstractDQ_Result)

GenericMetaData._setSubstitutionGroup(AbstractMetaData)

CylindricalCS._setSubstitutionGroup(AbstractCoordinateSystem)

MD_GridSpatialRepresentation._setSubstitutionGroup(AbstractMD_SpatialRepresentation)

Sphere._setSubstitutionGroup(AbstractGriddedSurface)

MultiSolid._setSubstitutionGroup(AbstractGeometricAggregate)

ArcStringByBulge._setSubstitutionGroup(AbstractCurveSegment)

Dictionary._setSubstitutionGroup(Definition)

MD_CoverageDescription._setSubstitutionGroup(AbstractMD_ContentInformation)

PassThroughOperation._setSubstitutionGroup(AbstractSingleOperation)

AbstractTimePrimitive._setSubstitutionGroup(AbstractTimeObject)

OrientableSurface._setSubstitutionGroup(AbstractSurface)

DS_InitiativeTypeCode._setSubstitutionGroup(CharacterString)

TriangulatedSurface._setSubstitutionGroup(Surface)

CircleByCenterPoint._setSubstitutionGroup(ArcByCenterPoint)

MD_MediumFormatCode._setSubstitutionGroup(CharacterString)

LinearRing._setSubstitutionGroup(AbstractRing)

DQ_AbsoluteExternalPositionalAccuracy._setSubstitutionGroup(AbstractDQ_PositionalAccuracy)

GeographicCRS._setSubstitutionGroup(AbstractSingleCRS)

ScopedName._setSubstitutionGroup(AbstractGenericName)

CompositeCurve._setSubstitutionGroup(AbstractCurve)

CountList._setSubstitutionGroup(AbstractScalarValueList)

usesSphericalCS._setSubstitutionGroup(sphericalCS)

UserDefinedCS._setSubstitutionGroup(AbstractCoordinateSystem)

usesEngineeringDatum._setSubstitutionGroup(engineeringDatum)

MD_MaintenanceFrequencyCode._setSubstitutionGroup(CharacterString)

AbstractTimeObject._setSubstitutionGroup(AbstractGML)

MD_Georeferenceable._setSubstitutionGroup(MD_GridSpatialRepresentation)

Array._setSubstitutionGroup(AbstractGML)

CategoryExtent._setSubstitutionGroup(AbstractValue)

ObliqueCartesianCS._setSubstitutionGroup(AbstractCoordinateSystem)

MD_DatatypeCode._setSubstitutionGroup(CharacterString)

PrimeMeridian._setSubstitutionGroup(Definition)

DQ_GriddedDataPositionalAccuracy._setSubstitutionGroup(AbstractDQ_PositionalAccuracy)

TimeOrdinalReferenceSystem._setSubstitutionGroup(TimeReferenceSystem)

ValueArray._setSubstitutionGroup(CompositeValue)

usesCS._setSubstitutionGroup(coordinateSystem)

Observation._setSubstitutionGroup(AbstractFeature)

GeodeticCRS._setSubstitutionGroup(AbstractSingleCRS)

EngineeringDatum._setSubstitutionGroup(AbstractDatum)

RectifiedGridCoverage._setSubstitutionGroup(AbstractDiscreteCoverage)

usesSingleOperation._setSubstitutionGroup(coordOperation)

EX_GeographicBoundingBox._setSubstitutionGroup(AbstractEX_GeographicExtent)

AbstractTimeTopologyPrimitive._setSubstitutionGroup(AbstractTimePrimitive)

AbstractDatum._setSubstitutionGroup(Definition)

methodFormula._setSubstitutionGroup(formula)

AbstractValue._setSubstitutionGroup(AbstractObject_)

AbstractCurve._setSubstitutionGroup(AbstractGeometricPrimitive)

gridDomain._setSubstitutionGroup(domainSet)

Category._setSubstitutionGroup(AbstractScalarValue)

MD_LegalConstraints._setSubstitutionGroup(MD_Constraints)

LinearCS._setSubstitutionGroup(AbstractCoordinateSystem)

DQ_NonQuantitativeAttributeAccuracy._setSubstitutionGroup(AbstractDQ_ThematicAccuracy)

DynamicFeature._setSubstitutionGroup(AbstractFeature)

rectifiedGridDomain._setSubstitutionGroup(domainSet)

OperationParameterGroup._setSubstitutionGroup(AbstractGeneralOperationParameter)

Quantity._setSubstitutionGroup(AbstractScalarValue)

AbstractDQ_ThematicAccuracy._setSubstitutionGroup(AbstractDQ_Element)

Curve._setSubstitutionGroup(AbstractCurve)

Bag._setSubstitutionGroup(AbstractGML)

MultiSolidCoverage._setSubstitutionGroup(AbstractDiscreteCoverage)

MultiGeometry._setSubstitutionGroup(AbstractGeometricAggregate)

CubicSpline._setSubstitutionGroup(AbstractCurveSegment)

AbstractGeneralDerivedCRS._setSubstitutionGroup(AbstractSingleCRS)

MD_ProgressCode._setSubstitutionGroup(CharacterString)

MD_RestrictionCode._setSubstitutionGroup(CharacterString)

Geodesic._setSubstitutionGroup(GeodesicString)

AbstractParametricCurveSurface._setSubstitutionGroup(AbstractSurfacePatch)

TimeClock._setSubstitutionGroup(TimeReferenceSystem)

ParameterValueGroup._setSubstitutionGroup(AbstractGeneralParameterValue)

includesValue._setSubstitutionGroup(parameterValue)

Ring._setSubstitutionGroup(AbstractRing)

Node._setSubstitutionGroup(AbstractTopoPrimitive)

MD_FeatureCatalogueDescription._setSubstitutionGroup(AbstractMD_ContentInformation)

LineStringSegment._setSubstitutionGroup(AbstractCurveSegment)

multiSurfaceDomain._setSubstitutionGroup(domainSet)

Boolean._setSubstitutionGroup(AbstractScalarValue)

DerivedUnit._setSubstitutionGroup(UnitDefinition)

usesVerticalDatum._setSubstitutionGroup(verticalDatum)

MD_KeywordTypeCode._setSubstitutionGroup(CharacterString)

AbstractGeneralTransformation._setSubstitutionGroup(AbstractOperation)

GeometricComplex._setSubstitutionGroup(AbstractGeometry)

usesOperation._setSubstitutionGroup(coordOperation)

TimeCalendar._setSubstitutionGroup(TimeReferenceSystem)

TimePeriod._setSubstitutionGroup(AbstractTimeGeometricPrimitive)

DQ_TemporalConsistency._setSubstitutionGroup(AbstractDQ_TemporalAccuracy)

Polygon._setSubstitutionGroup(AbstractSurface)

AbstractGeneralOperationParameter._setSubstitutionGroup(Definition)

DQ_CompletenessOmission._setSubstitutionGroup(AbstractDQ_Completeness)

AbstractOperation._setSubstitutionGroup(AbstractSingleOperation)

MultiCurveCoverage._setSubstitutionGroup(AbstractDiscreteCoverage)

AbstractMetaData._setSubstitutionGroup(AbstractObject_)

QuantityExtent._setSubstitutionGroup(AbstractValue)

AbstractCRS._setSubstitutionGroup(Definition)

EngineeringCRS._setSubstitutionGroup(AbstractSingleCRS)

CI_OnLineFunctionCode._setSubstitutionGroup(CharacterString)

DS_Sensor._setSubstitutionGroup(DS_Series)

MD_TopicCategoryCode._setSubstitutionGroup(CharacterString)

ConventionalUnit._setSubstitutionGroup(UnitDefinition)

MD_VectorSpatialRepresentation._setSubstitutionGroup(AbstractMD_SpatialRepresentation)

Tin._setSubstitutionGroup(TriangulatedSurface)

ArcByCenterPoint._setSubstitutionGroup(AbstractCurveSegment)

Scale._setSubstitutionGroup(Measure)

DynamicFeatureCollection._setSubstitutionGroup(DynamicFeature)

AbstractCoordinateSystem._setSubstitutionGroup(Definition)

multiPointDomain._setSubstitutionGroup(domainSet)

Shell._setSubstitutionGroup(AbstractObject_)

AbstractGeneralParameterValue._setSubstitutionGroup(AbstractObject_)

TimeInstant._setSubstitutionGroup(AbstractTimeGeometricPrimitive)

TimeCS._setSubstitutionGroup(AbstractCoordinateSystem)

usesGeodeticDatum._setSubstitutionGroup(geodeticDatum)

OperationParameter._setSubstitutionGroup(AbstractGeneralOperationParameter)

Conversion._setSubstitutionGroup(AbstractGeneralConversion)

AbstractDQ_PositionalAccuracy._setSubstitutionGroup(AbstractDQ_Element)

OperationMethod._setSubstitutionGroup(Definition)

AbstractGeometricPrimitive._setSubstitutionGroup(AbstractGeometry)

ProjectedCRS._setSubstitutionGroup(AbstractGeneralDerivedCRS)

definitionMember._setSubstitutionGroup(dictionaryEntry)

track._setSubstitutionGroup(history)

EllipsoidalCS._setSubstitutionGroup(AbstractCoordinateSystem)

DefinitionCollection._setSubstitutionGroup(Definition)

AbstractSingleCRS._setSubstitutionGroup(AbstractCRS)

DS_Series._setSubstitutionGroup(AbstractDS_Aggregate)

DS_OtherAggregate._setSubstitutionGroup(AbstractDS_Aggregate)

MD_ObligationCode._setSubstitutionGroup(CharacterString)

ArcByBulge._setSubstitutionGroup(ArcStringByBulge)

MD_ScopeCode._setSubstitutionGroup(CharacterString)

MultiPoint._setSubstitutionGroup(AbstractGeometricAggregate)

usesCartesianCS._setSubstitutionGroup(cartesianCS)

Envelope._setSubstitutionGroup(AbstractObject_)

FeatureCollection._setSubstitutionGroup(AbstractFeature)

Surface._setSubstitutionGroup(AbstractSurface)

MD_SecurityConstraints._setSubstitutionGroup(MD_Constraints)

PolyhedralSurface._setSubstitutionGroup(Surface)

Clothoid._setSubstitutionGroup(AbstractCurveSegment)

usesMethod._setSubstitutionGroup(method)

MD_SpatialRepresentationTypeCode._setSubstitutionGroup(CharacterString)

BSpline._setSubstitutionGroup(AbstractCurveSegment)

GridFunction._setSubstitutionGroup(AbstractObject_)

VerticalCS._setSubstitutionGroup(AbstractCoordinateSystem)

Grid._setSubstitutionGroup(AbstractImplicitGeometry)

LocalisedCharacterString._setSubstitutionGroup(CharacterString)

generalOperationParameter._setSubstitutionGroup(parameter)

MultiCurve._setSubstitutionGroup(AbstractGeometricAggregate)

Solid._setSubstitutionGroup(AbstractSolid)

LineString._setSubstitutionGroup(AbstractCurve)

MD_MediumNameCode._setSubstitutionGroup(CharacterString)

CompositeSurface._setSubstitutionGroup(AbstractSurface)

QuantityList._setSubstitutionGroup(AbstractScalarValueList)

CI_RoleCode._setSubstitutionGroup(CharacterString)

Definition._setSubstitutionGroup(AbstractGML)

DQ_RelativeInternalPositionalAccuracy._setSubstitutionGroup(AbstractDQ_PositionalAccuracy)

usesImageDatum._setSubstitutionGroup(imageDatum)

GeocentricCRS._setSubstitutionGroup(AbstractSingleCRS)

AbstractTimeComplex._setSubstitutionGroup(AbstractTimeObject)

usesAffineCS._setSubstitutionGroup(affineCS)

CountExtent._setSubstitutionGroup(AbstractValue)

AbstractDiscreteCoverage._setSubstitutionGroup(AbstractCoverage)

AbstractSurface._setSubstitutionGroup(AbstractGeometricPrimitive)

definedByConversion._setSubstitutionGroup(conversion)

TemporalCS._setSubstitutionGroup(AbstractCoordinateSystem)

LanguageCode._setSubstitutionGroup(CharacterString)

CompositeValue._setSubstitutionGroup(AbstractValue)

RectifiedGrid._setSubstitutionGroup(Grid)

AbstractCurveSegment._setSubstitutionGroup(AbstractObject_)

DS_ProductionSeries._setSubstitutionGroup(DS_Series)

Circle._setSubstitutionGroup(Arc)

includesParameter._setSubstitutionGroup(parameter)

MD_CoverageContentTypeCode._setSubstitutionGroup(CharacterString)

GeodesicString._setSubstitutionGroup(AbstractCurveSegment)

AbstractSolid._setSubstitutionGroup(AbstractGeometricPrimitive)

CompositeSolid._setSubstitutionGroup(AbstractSolid)

Length._setSubstitutionGroup(Measure)

OrientableCurve._setSubstitutionGroup(AbstractCurve)

DQ_QuantitativeAttributeAccuracy._setSubstitutionGroup(AbstractDQ_ThematicAccuracy)

TopoSolid._setSubstitutionGroup(AbstractTopoPrimitive)

AbstractDQ_TemporalAccuracy._setSubstitutionGroup(AbstractDQ_Element)

EX_GeographicDescription._setSubstitutionGroup(AbstractEX_GeographicExtent)

TemporalCRS._setSubstitutionGroup(AbstractSingleCRS)

AbstractGeneralConversion._setSubstitutionGroup(AbstractOperation)

DS_StereoMate._setSubstitutionGroup(DS_OtherAggregate)

usesEllipsoid._setSubstitutionGroup(ellipsoid)

AbstractTopology._setSubstitutionGroup(AbstractGML)

CartesianCS._setSubstitutionGroup(AbstractCoordinateSystem)

VerticalDatum._setSubstitutionGroup(AbstractDatum)

Angle._setSubstitutionGroup(Measure)

Count._setSubstitutionGroup(AbstractScalarValue)

DataBlock._setSubstitutionGroup(AbstractObject_)

AbstractRing._setSubstitutionGroup(AbstractObject_)

AbstractDQ_Completeness._setSubstitutionGroup(AbstractDQ_Element)

MD_Band._setSubstitutionGroup(MD_RangeDimension)

Point._setSubstitutionGroup(AbstractGeometricPrimitive)

TimeReferenceSystem._setSubstitutionGroup(Definition)

DQ_TemporalValidity._setSubstitutionGroup(AbstractDQ_TemporalAccuracy)

DQ_ConceptualConsistency._setSubstitutionGroup(AbstractDQ_LogicalConsistency)

MD_ServiceIdentification._setSubstitutionGroup(AbstractMD_Identification)

CI_PresentationFormCode._setSubstitutionGroup(CharacterString)

AbstractFeature._setSubstitutionGroup(AbstractGML)

DS_AssociationTypeCode._setSubstitutionGroup(CharacterString)

DS_Platform._setSubstitutionGroup(DS_Series)

MD_DistributionUnits._setSubstitutionGroup(CharacterString)

trianglePatches._setSubstitutionGroup(patches)

subject._setSubstitutionGroup(target)

usesParameter._setSubstitutionGroup(generalOperationParameter)

Distance._setSubstitutionGroup(Length)

Country._setSubstitutionGroup(CharacterString)

Transformation._setSubstitutionGroup(AbstractGeneralTransformation)

RS_Identifier._setSubstitutionGroup(MD_Identifier)

DefinitionProxy._setSubstitutionGroup(Definition)

MD_PixelOrientationCode._setSubstitutionGroup(CharacterString)

ParameterValue._setSubstitutionGroup(AbstractGeneralParameterValue)

CI_DateTypeCode._setSubstitutionGroup(CharacterString)

Bezier._setSubstitutionGroup(BSpline)

DQ_TopologicalConsistency._setSubstitutionGroup(AbstractDQ_LogicalConsistency)

valuesOfGroup._setSubstitutionGroup(group)

AbstractGML._setSubstitutionGroup(AbstractObject_)

multiSolidDomain._setSubstitutionGroup(domainSet)

AbstractGriddedSurface._setSubstitutionGroup(AbstractParametricCurveSurface)

File._setSubstitutionGroup(AbstractObject_)

Rectangle._setSubstitutionGroup(AbstractSurfacePatch)

MD_TopologyLevelCode._setSubstitutionGroup(CharacterString)

TimeNode._setSubstitutionGroup(AbstractTimeTopologyPrimitive)

anchorPoint._setSubstitutionGroup(anchorDefinition)

polygonPatches._setSubstitutionGroup(patches)

MultiSurface._setSubstitutionGroup(AbstractGeometricAggregate)

MultiSurfaceCoverage._setSubstitutionGroup(AbstractDiscreteCoverage)

ArcString._setSubstitutionGroup(AbstractCurveSegment)

EX_BoundingPolygon._setSubstitutionGroup(AbstractEX_GeographicExtent)

MD_DataIdentification._setSubstitutionGroup(AbstractMD_Identification)

Ellipsoid._setSubstitutionGroup(Definition)

UnitDefinition._setSubstitutionGroup(Definition)

Cone._setSubstitutionGroup(AbstractGriddedSurface)

valueOfParameter._setSubstitutionGroup(operationParameter)

CoverageMappingRule._setSubstitutionGroup(AbstractObject_)

MD_GeometricObjectTypeCode._setSubstitutionGroup(CharacterString)

AbstractCoordinateOperation._setSubstitutionGroup(Definition)

CompoundCRS._setSubstitutionGroup(AbstractCRS)

VerticalCRS._setSubstitutionGroup(AbstractSingleCRS)

multiCurveDomain._setSubstitutionGroup(domainSet)

usesVerticalCS._setSubstitutionGroup(verticalCS)

DQ_ConformanceResult._setSubstitutionGroup(AbstractDQ_Result)

ImageDatum._setSubstitutionGroup(AbstractDatum)

DS_Initiative._setSubstitutionGroup(AbstractDS_Aggregate)

TimeEdge._setSubstitutionGroup(AbstractTimeTopologyPrimitive)

AbstractTimeGeometricPrimitive._setSubstitutionGroup(AbstractTimePrimitive)

BooleanList._setSubstitutionGroup(AbstractScalarValueList)

MultiPointCoverage._setSubstitutionGroup(AbstractDiscreteCoverage)

MD_CellGeometryCode._setSubstitutionGroup(CharacterString)

Arc._setSubstitutionGroup(ArcString)

AbstractGeometry._setSubstitutionGroup(AbstractGML)

LocalName._setSubstitutionGroup(AbstractGenericName)

MD_ClassificationCode._setSubstitutionGroup(CharacterString)

TopoComplex._setSubstitutionGroup(AbstractTopology)

usesTemporalDatum._setSubstitutionGroup(temporalDatum)

usesPrimeMeridian._setSubstitutionGroup(primeMeridian)

DerivedCRS._setSubstitutionGroup(AbstractGeneralDerivedCRS)

Cylinder._setSubstitutionGroup(AbstractGriddedSurface)

DQ_ThematicClassificationCorrectness._setSubstitutionGroup(AbstractDQ_ThematicAccuracy)

AbstractScalarValue._setSubstitutionGroup(AbstractValue)

MD_DimensionNameTypeCode._setSubstitutionGroup(CharacterString)
