Metadata-Version: 1.0
Name: zc.recipe.deployment
Version: 0.6.0
Summary: ZC Buildout recipe for Unix deployments
Home-page: http://www.python.org/pypi/zc.recipe.deployment
Author: Jim Fulton
Author-email: jim@zope.com
License: ZPL 2.1
Description: ***********************
        Unix Deployment Support
        ***********************
        
        .. contents::
        
        The zc.recipe.deployment recipe provides support for deploying
        applications with multiple processes on Unix systems. (Perhaps support
        for other systems will be added later.) It creates directories to hold
        application instance configuration, log and run-time files.  It also
        sets or reads options that can be read by other programs to find out
        where to place files:
        
        crontab-directory
        The name of the directory in which cron jobs should be placed.
        This is /etc/cron.d.
        
        etc-directory
        The name of the directory where configuration files should be
        placed.  This is /etc/NAME, where NAME is the deployment
        name.
        
        log-directory
        The name of the directory where application instances should write
        their log files.  This is /var/log/NAME, where NAME is
        the deployment name.
        
        logrotate-directory
        The name of the directory where logrotate configuration files
        should be placed, typically, /etc/logrotate.d.
        
        run-directory
        The name of the directory where application instances should put
        their run-time files such as pid files and inter-process
        communication socket files.  This is /var/run/NAME, where
        NAME is the deployment name.
        
        rc-directory
        The name of the directory where run-control scripts should be
        installed.  This is /etc/init.d.
        
        The etc, log, and run directories are created in such a way that the
        directories are owned by the user specified in the user option and are
        writable by the user and the user's group.
        
        Changes
        *******
        
        0.6 (2008-02-01)
        ================
        
        Features Added
        --------------
        
        Added the ability to specify a name independent of the section name.
        Also, provide a name option for use by recipes.
        
        Important note to recipe authors: Recipes should use the deployment
        name option rather than the deployment name when computing names of
        generated files.
        
        0.5 (Mar 23, 2007)
        ==================
        
        Features Added
        --------------
        
        Added recipe for generating crontab files in /etc/cron.d.
        
        0.4 (Mar 22, 2007)
        ==================
        
        Features Added
        --------------
        
        - Added setting for the logrotate configuration directories.
        
        Bugs Fixed
        ----------
        
        - The documentation gave the wrong name for the crontab-directory option.
        
        0.3 (Feb 14, 2007)
        ==================
        
        Features Added
        --------------
        
        - Added a configuration recipe for creating configuration files.
        
        0.2.1 (Feb 13, 2007)
        ====================
        
        - Fixed bug in setup file.
        
        0.2 (Feb 7, 2007)
        =================
        
        Bugs Fixed
        ----------
        
        - Non-empty log and run directories were deleated in un- and
        re-install.
        
        Detailed Documentation
        **********************
        
        Using the deployment recipe is pretty simple. Jusr specify a
        deployment name, specified via the part name, and a deployment user.
        
        Let's add a deployment to a sample buildout:
        
        >>> write('buildout.cfg',
        ... '''
        ... [buildout]
        ... parts = foo
        ...
        ... [foo]
        ... recipe = zc.recipe.deployment
        ... user = jim
        ... ''')
        
        >>> print system(join('bin', 'buildout')),
        Installing foo.
        zc.recipe.deployment:
        Creating '/etc/foo',
        mode 755, user 'root', group 'root'
        zc.recipe.deployment:
        Creating '/var/log/foo',
        mode 755, user 'jim', group 'jim'
        zc.recipe.deployment:
        Creating '/var/run/foo',
        mode 750, user 'jim', group 'jim'
        
        
        (Note that we have to be running as root and must have a user jim for
        this to work.)
        
        Now we can see that directories named foo in /etc, /var/log and
        /var/run have been created:
        
        >>> print system('ls -ld /etc/foo'),
        drwxr-xr-x 2 root root 4096 2007-02-06 09:50 /etc/foo
        
        >>> print system('ls -ld /var/log/foo'),
        drwxr-xr-x 2 jim jim 4096 2007-02-06 09:50 /var/log/foo
        
        >>> print system('ls -ld /var/run/foo'),
        drwxr-x--- 2 jim jim 40 2007-02-06 09:50 /var/run/foo
        
        By looking at .installed.cfg, we can see the options available for use
        by other recipes:
        
        >>> cat('.installed.cfg') # doctest: +ELLIPSIS
        [buildout]
        ...
        [foo]
        __buildout_installed__ =
        ...
        crontab-directory = /etc/cron.d
        etc-directory = /etc/foo
        log-directory = /var/log/foo
        logrotate-directory = /etc/logrotate.d
        name = foo
        rc-directory = /etc/init.d
        recipe = zc.recipe.deployment
        run-directory = /var/run/foo
        user = jim
        
        If we ininstall, then the directories are removed.
        
        >>> print system(join('bin', 'buildout')+' buildout:parts='),
        Uninstalling foo.
        Running uninstall recipe.
        zc.recipe.deployment: Removing '/etc/foo'
        zc.recipe.deployment: Removing '/var/log/foo'.
        zc.recipe.deployment: Removing '/var/run/foo'.
        
        >>> import os
        >>> os.path.exists('/etc/foo')
        False
        >>> os.path.exists('/var/log/foo')
        False
        >>> os.path.exists('/var/run/foo')
        False
        
        The log and run directories are only removed if they are non-empty.
        To see that, we'll put a file in each of the directories created:
        
        >>> print system(join('bin', 'buildout')), # doctest: +ELLIPSIS
        Installing foo.
        ...
        
        >>> write('/etc/foo/x', '')
        >>> write('/var/log/foo/x', '')
        >>> write('/var/run/foo/x', '')
        
        And then uninstall:
        
        >>> print system(join('bin', 'buildout')+' buildout:parts='),
        Uninstalling foo.
        Running uninstall recipe.
        zc.recipe.deployment: Removing '/etc/foo'
        zc.recipe.deployment: Can't remove non-empty directory '/var/log/foo'.
        zc.recipe.deployment: Can't remove non-empty directory '/var/run/foo'.
        
        >>> os.path.exists('/etc/foo')
        False
        
        >>> print system('ls -ld /var/log/foo'),
        drwxr-xr-x 2 jim jim 4096 2007-02-06 09:50 /var/log/foo
        
        >>> print system('ls -ld /var/run/foo'),
        drwxr-x--- 2 jim jim 40 2007-02-06 09:50 /var/run/foo
        
        Here we see that the var and run directories are kept. The etc
        directory is discarded because only buildout recipes should write to
        it and all of it's data are expendible.
        
        If we reinstall, remove the files, and uninstall, then the directories
        are removed:
        
        >>> print system(join('bin', 'buildout')),
        Installing foo.
        zc.recipe.deployment:
        Creating '/etc/foo',
        mode 755, user 'root', group 'root'
        zc.recipe.deployment:
        Updating '/var/log/foo',
        mode 755, user 'jim', group 'jim'
        zc.recipe.deployment:
        Updating '/var/run/foo',
        mode 750, user 'jim', group 'jim'
        
        >>> os.remove('/var/log/foo/x')
        >>> os.remove('/var/run/foo/x')
        
        >>> print system(join('bin', 'buildout')+' buildout:parts='),
        Uninstalling foo.
        Running uninstall recipe.
        zc.recipe.deployment: Removing '/etc/foo'
        zc.recipe.deployment: Removing '/var/log/foo'.
        zc.recipe.deployment: Removing '/var/run/foo'.
        
        >>> os.path.exists('/etc/foo')
        False
        >>> os.path.exists('/var/log/foo')
        False
        >>> os.path.exists('/var/run/foo')
        False
        
        Deployment Name
        ===============
        
        The deployment name is used for naming generated files and directories.
        The deployment name defaults to the section name, but the deployment
        name can be specified explicitly:
        
        >>> write('buildout.cfg',
        ... '''
        ... [buildout]
        ... parts = foo
        ...
        ... [foo]
        ... recipe = zc.recipe.deployment
        ... name = bar
        ... user = jim
        ... ''')
        
        >>> print system(join('bin', 'buildout')),
        Installing foo.
        zc.recipe.deployment:
        Creating '/etc/bar',
        mode 755, user 'root', group 'root'
        zc.recipe.deployment:
        Creating '/var/log/bar',
        mode 755, user 'jim', group 'jim'
        zc.recipe.deployment:
        Creating '/var/run/bar',
        mode 750, user 'jim', group 'jim'
        
        >>> print system('ls -ld /etc/bar'),
        drwxr-xr-x 2 root root 4096 2007-02-06 09:50 /etc/bar
        
        >>> print system('ls -ld /var/log/bar'),
        drwxr-xr-x 2 jim jim 4096 2007-02-06 09:50 /var/log/bar
        
        >>> print system('ls -ld /var/run/bar'),
        drwxr-x--- 2 jim jim 40 2007-02-06 09:50 /var/run/bar
        
        >>> cat('.installed.cfg') # doctest: +ELLIPSIS
        [buildout]
        installed_develop_eggs =
        parts = foo
        <BLANKLINE>
        [foo]
        __buildout_installed__ =
        ...
        crontab-directory = /etc/cron.d
        etc-directory = /etc/bar
        log-directory = /var/log/bar
        logrotate-directory = /etc/logrotate.d
        name = bar
        rc-directory = /etc/init.d
        recipe = zc.recipe.deployment
        run-directory = /var/run/bar
        user = jim
        
        Note (here and earlier) that the options include the name option,
        which defaults to the part name.  Other parts that use the deployment
        name should use the name option rather than the part name.
        
        Configuration files
        ===================
        
        Normally, configuration files are created by specialized recipes.
        Sometimes, it's useful to specify configuration files in a buildout
        configuration file.  The zc.recipe.deployment:configuration recipe can be
        used to do that.
        
        Let's add a configuration file to our buildout:
        
        >>> write('buildout.cfg',
        ... '''
        ... [buildout]
        ... parts = foo x.cfg
        ...
        ... [foo]
        ... recipe = zc.recipe.deployment
        ... user = jim
        ...
        ... [x.cfg]
        ... recipe = zc.recipe.deployment:configuration
        ... text = xxx
        ...        yyy
        ...        zzz
        ... ''')
        
        >>> print system(join('bin', 'buildout')),
        Uninstalling foo.
        Running uninstall recipe.
        zc.recipe.deployment: Removing '/etc/bar'
        zc.recipe.deployment: Removing '/var/log/bar'.
        zc.recipe.deployment: Removing '/var/run/bar'.
        Installing foo.
        zc.recipe.deployment:
        Creating '/etc/foo',
        mode 755, user 'root', group 'root'
        zc.recipe.deployment:
        Creating '/var/log/foo',
        mode 755, user 'jim', group 'jim'
        zc.recipe.deployment:
        Creating '/var/run/foo',
        mode 750, user 'jim', group 'jim'
        Installing x.cfg.
        
        By default, the configuration is installed as a part:
        
        >>> cat('parts', 'x.cfg')
        xxx
        yyy
        zzz
        
        If a deployment is specified, then the file is placed in the
        deployment etc directory:
        
        >>> write('buildout.cfg',
        ... '''
        ... [buildout]
        ... parts = foo x.cfg
        ...
        ... [foo]
        ... recipe = zc.recipe.deployment
        ... user = jim
        ...
        ... [x.cfg]
        ... recipe = zc.recipe.deployment:configuration
        ... text = xxx
        ...        yyy
        ...        zzz
        ... deployment = foo
        ... ''')
        
        >>> print system(join('bin', 'buildout')),
        Uninstalling x.cfg.
        Updating foo.
        Installing x.cfg.
        
        >>> os.path.exists(join('parts', 'x.cfg'))
        False
        
        >>> cat('/etc/foo/x.cfg')
        xxx
        yyy
        zzz
        
        We can read data from a file rather than specifying in the
        configuration:
        
        >>> write('x.in', '1\n2\n3\n')
        
        >>> write('buildout.cfg',
        ... '''
        ... [buildout]
        ... parts = foo x.cfg
        ...
        ... [foo]
        ... recipe = zc.recipe.deployment
        ... user = jim
        ...
        ... [x.cfg]
        ... recipe = zc.recipe.deployment:configuration
        ... file = x.in
        ... deployment = foo
        ... ''')
        
        >>> print system(join('bin', 'buildout')),
        Uninstalling x.cfg.
        Updating foo.
        Installing x.cfg.
        
        >>> cat('/etc/foo/x.cfg')
        1
        2
        3
        
        The recipe sets a location option that can be used by other recipes:
        
        >>> cat('.installed.cfg') # doctest: +ELLIPSIS
        [buildout]
        ...
        [x.cfg]
        ...
        location = /etc/foo/x.cfg
        ...
        
        Cron support
        ============
        
        The crontab recipe provides support for creating crontab files.  It
        uses a times option to specify times to run the command and a command
        option containing the command.
        
        >>> write('buildout.cfg',
        ... '''
        ... [buildout]
        ... parts = foo cron
        ...
        ... [foo]
        ... recipe = zc.recipe.deployment
        ... user = jim
        ...
        ... [cron]
        ... recipe = zc.recipe.deployment:crontab
        ... times = 30 23 * * *
        ... command = echo hello world!
        ... deployment = foo
        ... ''')
        
        >>> print system(join('bin', 'buildout')),
        Uninstalling x.cfg.
        Updating foo.
        Installing cron.
        
        This example creates /etc/cron.d/foo-cron
        
        >>> open('/etc/cron.d/foo-cron').read()
        '30 23 * * *\tjim\techo hello world!\n'
        
        .. make sure cron recipe honors deployment name option:
        
        
        >>> write('buildout.cfg',
        ... '''
        ... [buildout]
        ... parts = foo cron
        ...
        ... [foo]
        ... recipe = zc.recipe.deployment
        ... name = bar
        ... user = jim
        ...
        ... [cron]
        ... recipe = zc.recipe.deployment:crontab
        ... times = 30 23 * * *
        ... command = echo hello world!
        ... deployment = foo
        ... ''')
        
        >>> print system(join('bin', 'buildout')),
        Uninstalling cron.
        Uninstalling foo.
        Running uninstall recipe.
        zc.recipe.deployment: Removing '/etc/foo'
        zc.recipe.deployment: Removing '/var/log/foo'.
        zc.recipe.deployment: Removing '/var/run/foo'.
        Installing foo.
        zc.recipe.deployment:
        Creating '/etc/bar',
        mode 755, user 'root', group 'root'
        zc.recipe.deployment:
        Creating '/var/log/bar',
        mode 755, user 'jim', group 'jim'
        zc.recipe.deployment:
        Creating '/var/run/bar',
        mode 750, user 'jim', group 'jim'
        Installing cron.
        
        >>> open('/etc/cron.d/bar-cron').read()
        '30 23 * * *\tjim\techo hello world!\n'
        
        
        .. cleanup
        
        >>> print system(join('bin', 'buildout')+' buildout:parts='),
        Uninstalling cron.
        Uninstalling foo.
        Running uninstall recipe.
        zc.recipe.deployment: Removing '/etc/bar'
        zc.recipe.deployment: Removing '/var/log/bar'.
        zc.recipe.deployment: Removing '/var/run/bar'.
        
        >>> os.path.exists('/etc/cron.d/bar-cron')
        False
        
        
        Download
        **********************
        
Keywords: deployment build
Platform: UNKNOWN
