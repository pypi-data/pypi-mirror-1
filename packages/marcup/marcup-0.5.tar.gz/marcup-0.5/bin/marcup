#!/usr/bin/env python

usage = \
"""
usage: marcup [options] [command] [arguments]

  Options:
  --storage <file> - location of persistent storage, default is store.db
  --id-field <tag> - control field to extract unique record id from 
                     (default 001)
  --strict         - fail at the first sign of trouble

  Commands:
  load file : load a file into storage and print out a load report
  dump : dump the contents of a marc datastore as MARC21 to stdout
"""

import sys
import logging
import optparse

import marcup

parser = optparse.OptionParser()
parser.add_option('-s', '--storage', action='store', dest='dbfile', 
                  default='store.db', help='storage location')
parser.add_option('-i', '--id-field', action='store', dest='id_field',
                  default='001', help='unique id control field')
parser.add_option('-x', '--strict', action='store_true', dest='strict',
                  help='fail at the first sign of trouble')
options, args = parser.parse_args()

if len(args) == 0:
    parser.error("must supply command, `marcup help` for details") 

# send info messages and above to stderr
logging.basicConfig()
handler = logging.StreamHandler()
formatter =  logging.Formatter("%(asctime)s %(levelname)s] %(message)s")
handler.setFormatter(formatter)
logger = logging.getLogger()
logger.addHandler(handler)
logger.setLevel(logging.INFO)

# figure out what command to run, and run it
cmd = args[0]
if cmd == "help":
    print usage
elif cmd == "load":
    if len(args) != 2:
        parser.error("must supply a file to load")
    try:
        store = marcup.Store(options.dbfile)
        report = store.load(args[1], id_field=options.id_field, 
                strict=options.strict)
        print report
    except marcup.LoadException, e:
        print "error: %s" % e
elif cmd == "dump":
    store = marcup.Store(options.dbfile)
    store.dump()
else:
    parser.error("unknown command: %s" % cmd)

logger.removeHandler(handler)

