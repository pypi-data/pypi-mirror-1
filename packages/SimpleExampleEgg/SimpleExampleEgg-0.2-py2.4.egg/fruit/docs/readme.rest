=====================
SimpleExampleEgg
=====================
:Author: Todd Greenwood
:Title: SimpleExampleEgg
:Keywords: python, egg, setuptools, distutils, tutorial, doctests, unit tests, deploy, install, example
:Version: 0.1
:License: GPL v. 2
:Date: Dec 2005

This aims to be a super simple example of python, setuptools, docutils, unit-tests, and eggs.

.. contents::
    :depth: 3

Introduction
------------

Hopefully, this will clarify, in my own mind, at least, how to make super simple apps that have all sorts of cool extras such as working unit tests, launch scripts, deploy and install flawlessly...etc. Ideally, I'll be able to write apps that 'just work'. So my end users can just point some tool (easy_install) at a file (an egg) and voila, a working app.

Here's what I'd like to have happen for this exercise:

 * user clicks a link
 * app downloads and installs
 * user runs the app's internal test suite

Along the way, I'll play around with:
 
 * deploying the app locally, and to pipy
 * user may recieve the app via email, a web link, file copy, etc.
 * doctests and unit tests 

Note, this documentation was written using Mikolaj Machowski's 
Vim reStructured Text plugin (vst_). It is the coolest thing since the
'intraweb'. Look at the source 'readme.rest' and the generated 'readme.html'.
The code listings and sample code output were generated as part of the build,
very little 'copy and paste' here.

Basic Source Files
-------------------

1. dir listing:

    {readbang:ls /home/tgreenwo/active/SimpleExampleEgg/fruit | grep -v pyc}

1. apple.py:

    {read:/home/tgreenwo/active/SimpleExampleEgg/fruit/apple.py}

1. Let's run this tiny app to see what we get:

    ``$ python apple.py Mr.Guido``

    {readpython:/home/tgreenwo/active/SimpleExampleEgg/fruit/apple.py 'Mr.Guido'}

1. setup.py:
        
    {read:/home/tgreenwo/active/SimpleExampleEgg/setup.py}

1. simpletests.py:

    {read:/home/tgreenwo/active/SimpleExampleEgg/fruit/simpletests.py}


Tests and Building
------------------

1. Let's run the test suite:

    ``$ python simpletests.py``

    {readpython:/home/tgreenwo/active/SimpleExampleEgg/fruit/simpletests.py}

1. Now, let's run the test suite from setuptools:
    
    ``$ python setup.py test``

    {readpython:/home/tgreenwo/active/SimpleExampleEgg/setup.py test}

1. Next, let's make sure the build system works. But first, I should mention
    that this documentation is generated via a vim pluggin. 
    
Building the REST docs
++++++++++++++++++++++

1. So, while from a command line you would execute:
    
    ``$ python setup bdist_egg``

    Because this doc lives in ./fruit/docs/readme.rest, I will use the pbu
    utility to walk the directory tree and launch setup.py. If you would like
    to build the docs, here is the process:
    
    a) install pbu::

        $ easy_install buildutils

    b) build the egg using the 'pbu' utility::

        $ cd ./fruit/docs
        $ pbu dbist_egg
    
1. So that's exactly what the docs do. So, to see all this in action, build
 the docs ::

    $ vim readme.rest -s runvim.vim

    BTW - runvim.vim is just a quickie script to execute :Vsti within vim,
    write, save, and exit vim. 


1. Back to the build system, let's do a build :  
        
    {readpython:/home/tgreenwo/active/SimpleExampleEgg/setup.py bdist_egg}

1. And lastly, let's check to make sure that we have what we expect in the
    output:
    
    ``unzip -l /home/tgreenwo/active/SimpleExampleEgg/dist/SimpleExampleEgg-0.1-py2.4.egg'``

    {readbang:unzip -l '/home/tgreenwo/active/SimpleExampleEgg/dist/SimpleExampleEgg-0.1-py2.4.egg'}

Backtracking
------------

Some things I should mention....

 * apply the svn 'trick' to get the ez_setup file
 * get a freebie ftp account to test uploading to
 * create a pipy account so that you can upload there, too

The ez_setup.py file
++++++++++++++++++++

1. Per the Peak_ website, install ez_setup.py as an svn external thingy. Here are the steps::

    $ cd SimpleExampleEgg/
    $ svn propedit svn:externals .
    # enter this in the editor: 
    ez_setup svn://svn.eby-sarna.com/svnroot/ez_setup
    # slurp down the latest ez_setup file  
    $ svn update
    # you should see the ez_setup dir now..., if you don't, try
    $ svn propget svn:externals
    ez_setup svn://svn.eby-sarna.com/svnroot/ez_setup

1. It would be nice to be able to create a project that just housed the
    ez_setup project, and then just reference that project in all my other
    projects. However, apparently svn does not support chained external
    dependencies. So each project will either have to have a copy of
    ez_setup.py, or this external reference. 

Create a PiPy account:
++++++++++++++++++++++

1. this part is easy::

    $ python setup.py register
    
1. now just follow the instructions..:: 

    running register
    We need to know who you are, so please choose either:
    1. use your existing login,
    2. register as a new user,
    3. have the server generate a new password for you (and email it to you),
      or
    4. quit
    Your selection [default 1]:  

1. you'll need your username and password the first time you deploy.
    subsequent deploys will store your log in info somewhere in your home dir

App Deployment
--------------

Now, we want to do your basic 'app' stuff: 

    * script generation
    * build
    * deploy
    * test


Script Generation
+++++++++++++++++

The idea here is that if I have some cool command line app, then how do I
access it when it's all tucked inside an egg? The generated wrapper scripts do
just that.

1. add entry points to setup.py::

    setup(
    ...
    entry_points = {'console_scripts': [
        'make_apple_pie = fruit.apple:make_pie'
        ]},

1. note that you  cannot pass command line vars to the method::

    tgreenwo@luxor~/active/SimpleExampleEgg$ make_apple_pie
    Traceback (most recent call last):
     File "/usr/bin/make_apple_pie", line 7, in ?
         sys.exit(
         TypeError: make_pie() takes exactly 1 argument (0 given)
         tgreenwo@luxor~/active/SimpleExampleEgg$ python make_apple_pie
         python: can't open file 'make_apple_pie': [Errno 2] No such file or
         directory
    tgreenwo@luxor~/active/SimpleExampleEgg$ which make_apple_pie
         /usr/bin/make_apple_pie
    tgreenwo@luxor~/active/SimpleExampleEgg$ cat /usr/bin/make_apple_pie
         #!/home/tgreenwo/bin/python
         # EASY-INSTALL-ENTRY-SCRIPT:
         # 'SimpleExampleEgg==0.1','console_scripts','make_apple_pie'
         __requires__ = 'SimpleExampleEgg==0.1'
         import sys
         from pkg_resources import load_entry_point

         sys.exit(
            load_entry_point('SimpleExampleEgg==0.1', 'console_scripts',
            'make_apple_pie')()
            )

1. add a method to apple.py w/o params::
    
    #apple.py
    def doConsole(): print make_pie('CONSOLE')

    #setup.py
    entry_points = {'console_scripts': [
        'make_apple_pie = fruit.apple:doConsole'
        ]},

1. install (as root) again

    ``easy_install dist/SimpleExampleEgg-0.1-py2.4.egg``

1. and run again::
    
    tgreenwo@luxor~/active/SimpleExampleEgg$ /usr/bin/make_apple_pie
    CONSOLE likes pie!!!


Building
++++++++++++

We did this already, but, we'll do it again here.


1. Build the app into an egg: 
    
    ``$ python setup bdist_egg``

    {readpython:/home/tgreenwo/active/SimpleExampleEgg/setup.py bdist_egg}

1. And lastly, let's check to make sure that we have what we expect:
    
    ``$ unzip -l /home/tgreenwo/active/SimpleExampleEgg/dist/SimpleExampleEgg-0.1-py2.4.egg``

    {readbang:unzip -l '/home/tgreenwo/active/SimpleExampleEgg/dist/SimpleExampleEgg-0.1-py2.4.egg'}

Deploy Locally (Dev Mode)
+++++++++++++++++++++++++

1. create a deployment directory to house the egg links::
        
    $ cd working
    $ mkdir deploy

1. add the 'deploy' directory to your pythonpath:
    
    {readbang:grep PYTHONPATH /home/tgreenwo/.bashrc}

1. install the egg locally in dev mode:

    ``$ python setup.py develop``

    {readpython:/home/tgreenwo/active/SimpleExampleEgg/setup.py develop}

1. this time, we specify the deploy directory:
        
    ``$ python setup.py develop -d /home/tgreenwo/working/deploy``

    {readpython:/home/tgreenwo/active/SimpleExampleEgg/setup.py develop -d /home/tgreenwo/working/deploy}


Deploy To pipy
++++++++++++++

1. build and deploy in one step::

    $ setup.py register sdist bdist_egg upload

1. I had problems, so I enabled the following::

    $ python setup.py register sdist bdist_egg upload --show-response

1. Once you noodle thru all the errors for your log in, password, and whether
    all the meta information like url and topic are set, then the egg will
    upload.
    


End User App Install
---------------

General steps are:

 * su or sudo
 * easy_install [egg name] or
 * easy_install [pipy project name]
 * run unit tests
 
User Install
+++++++

1. Simple. One step::

    root$ easy_install SimpleExampleEgg
    
    Searching for SimpleExampleEgg
    Reading http://www.python.org/pypi/SimpleExampleEgg/
    Best match: SimpleExampleEgg 0.1
    Downloading
    http://cheeseshop.python.org/packages/2.4/S/SimpleExampleEgg/SimpleExampleEgg-0.1-py2.4.egg#md5=d53e38ea496e03d30b632dc08265128b
    Processing SimpleExampleEgg-0.1-py2.4.egg
    Moving SimpleExampleEgg-0.1-py2.4.egg to /usr/lib/python2.4/site-packages
    Adding SimpleExampleEgg 0.1 to easy-install.pth file
    Installing make_apple_pie script to /usr/bin

    Installed /usr/lib/python2.4/site-packages/SimpleExampleEgg-0.1-py2.4.egg
    Processing dependencies for SimpleExampleEgg

1. done

User Run Unit Tests
++++++++++++++

1. this should run the unit tests for the installed app::

    $ python -c "from unittest import main; main(None)"
    fruit.simpletests.getTestSuite

1. let's try that:

    ``python -c 'from unittest import main; main(None)'
    fruit.simpletests.getTestSuite``

    {readpython:-c 'from unittest import main; main(None)' fruit.simpletests.getTestSuite}
    
Conclusion
----------

1. vim + vst rocks
1. eggs are cool


.. links:
.. _vst:        http://skawina.eu.org/mikolaj/vst.html
.. _peak:   http://peak.telecommunity.com/DevCenter/setuptools

