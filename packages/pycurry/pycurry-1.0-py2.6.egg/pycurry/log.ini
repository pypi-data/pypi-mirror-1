; The pycurry defined logging configuration. The idea is to only log in case of
; an error situation. All log records are logged into a rotating memory 
; handler. This in-memory logging is only written to a file in case of a 
; record with a minimal level. Each record with this minimal level will be 
; logged to a separate file together with all its history.
;
; Copyright (c) 2008 Fons Dijkstra

; Permission is hereby granted, free of charge, to any person obtaining a copy
; of this software and associated documentation files (the "Software"), to deal
; in the Software without restriction, including without limitation the rights
; to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
; copies of the Software, and to permit persons to whom the Software is
; furnished to do so, subject to the following conditions:

; The above copyright notice and this permission notice shall be included in
; all copies or substantial portions of the Software.

; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
; AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
; LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
; OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
; THE SOFTWARE.

[loggers]
keys = root

[handlers]
keys = pycurry

[formatters]
keys = pycurry

; The pycurry logger
[logger_root]
level = NOTSET
handlers = pycurry

; The pycurry handler
[handler_pycurry]
level = NOTSET
formatter = pycurry
class = pycurry.log.rotating_memory_handler
args = (1000, WARNING, handlers.RotatingFileHandler, "pycurry.log", "w", 0, 99, None, False)

; The pycurry formatter
[formatter_pycurry]
format = %(asctime)s p@%(process)04d t@%(thread)04d %(pathname)s(%(lineno)d).%(funcName)s -> %(levelname)s: %(message)s

