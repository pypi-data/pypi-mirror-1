Ordered Dict: An persistent container that maintains order
==========================================================

An OrderedDict provides most of the functionality of a Dict, with the
additional feature that it remembers the order in which items were added.
It also provides the API to reorder the items.

   >>> from zc.dict import OrderedDict
   >>> d = OrderedDict()
   >>> d
   <zc.dict.ordered.OrderedDict object at ...>

Let us add a couple of items

   >>> d['one'] = 'One'
   >>> len(d)
   1

   >>> d['two'] = 'Two'
   >>> len(d)
   2

   >>> d.keys()
   ['one', 'two']

   >>> d.values()
   ['One', 'Two']

The order can be changed easily

   >>> d.updateOrder(['two', 'one'])
   >>> d.keys()
   ['two', 'one']

   >>> d.values()
   ['Two', 'One']


`updateOrder` expects the entire list of keys in the new order

   >>> d.updateOrder(['two'])
   Traceback (most recent call last):
   ...
   ValueError: Incompatible key set.


Length is implemented in the same way as a Dict

   >>> d._len
   <BTrees.Length.Length object at ...>
   >>> d._len()
   2


OrderedDict also provides API that return iterators of the above methods.

   >>> iter(d)
   <iterator object at ...>
   >>> d.iterkeys()
   <iterator object at ...>

   >>> d.iteritems()
   <listiterator object at ...>

   >>> d.itervalues()
   <listiterator object at ...>


OrderedDict also provides a copy method

   >>> c = d.copy()
   >>> c.items() == d.items()
   True

The `update` method is also provided. If it is provided with an OrderedDict,
then the new elements are added in the same order as in the argument.

   >>> d2 = OrderedDict()
   >>> d2['five'] = 'Five'
   >>> d2['six'] = 'Six'
   >>> d.update(d2)
   >>> d.items()
   [('two', 'Two'), ('one', 'One'), ('five', 'Five'), ('six', 'Six')]


But if the argument is a regular Dict, then the order of the newly added
elements in the resulting OrderedDict object cannot be guaranteed.

clear removes all the keys from the dict:

   >>> d.clear()
   >>> d.keys()
   []
   >>> len(d)
   0

