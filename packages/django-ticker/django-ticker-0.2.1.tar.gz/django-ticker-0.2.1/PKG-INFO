Metadata-Version: 1.0
Name: django-ticker
Version: 0.2.1
Summary: A simple Django app for newsticker with a row level permission based workflow.
Home-page: http://github.com/jezdez/django-ticker/tree/master
Author: Jannis Leidel
Author-email: jannis@leidel.info
License: UNKNOWN
Description: =============
        django-ticker
        =============
        
        django-ticker is a reusable Django_ application that provides a ticker like
        news section including row level permissions. What does this mean?
        
        In django-ticker you have a fine grained permission control what the
        (administrative) user can do and what not. Besides the default Django
        permissions -- add, change, delete -- there are some extra permissions:
        
        - change_foreign
        - publish
        
        Originally this was created for the news section of the `German Django community`_
        where foreign users could add articles but had no permission to publish
        them, cause a moderator must check these articles first.
        
        It's easy to create a pressroom like workflow, assumed we have different
        people with different permissions:
        
        The freelance journalist:
        Granted permissions: add, change
        
        - can add articles
        - can change his articles (only his own)
        - can not delete his articles
        - can set the status of the article to "closed" or "draft". Draft means,
        that the article is ready for check by a moderator.
        - in the admin list of articles, they see only they own
        
        The journalist:
        Granted permissions: add, change, delete, publish
        
        - can add articles
        - can change and delete his articles (only his own)
        - can set the status of the article to "closed", "draft" or "published"
        - in the admin list of articles, they see only their own
        
        The chief editor (or moderator):
        Granted permissions: add, change, delete, publish, change_foreign
        
        - can add articles
        - can change and delete all (!) articles
        - can set the status of the article to "closed", "draft" or "published"
        - in the admin list of articles, they see all articles
        
        The proofreader (or subject specialist):
        Granted permissions: change, change_foreign
        
        - can not add articles
        - can not delete articles
        - can not publish articles
        - can change all articles (e.g. for correction)
        - in the admin list of articles, they see all articles
        
        So, you can mix these permissions and create a workflow that perfectly
        fits your needs.
        
        .. _`Django`: http://www.djangoproject.com/
        .. _`German Django Community`: http://django-de.org/
Platform: UNKNOWN
Classifier: Development Status :: 3 - Alpha
Classifier: Environment :: Web Environment
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: BSD License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python
Classifier: Framework :: Django
