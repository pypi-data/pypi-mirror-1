__________________________________________________________________________________

 zero

 On Python 2.5.1 (r251:54863, Apr 18 2007, 08:51:08) [MSC v.1310 32 bit (Intel)]

 Reuses session report zero_test_cstgen.ees

__________________________________________________________________________________

>>> from EasyExtend.csttools import*
>>> check_node(CST_Power("a","e4"), langlet)
CST o.k
True
>>>
>>> assert check_node(CST_Power("a","e4"), langlet) == True
CST o.k
>>> assert check_node(CST_Power("a+b-2","e4"), langlet) == True
CST o.k
>>> assert check_node(CST_Power("a+b-2","e_4"), langlet) == True
CST o.k
>>> assert check_node(CST_Power(any_test("a"),"e_4"), langlet) == True
Traceback (most recent call last):
  File "<input>", line 1, in <module>
  File "C:\lang\Python25\Lib\site-packages\EasyExtend\cstdef25.py", line 167, in any_test
    assert isinstance(arg, (tuple,list)), arg
AssertionError: a
>>> assert check_node(CST_Power(any_test(Name("a")),"e_4"), langlet) == True
CST o.k
>>> CST_Add("A","B","C")
[313, [314, [315, [316, [317, [1, 'A']]]]], [14, '+'], [314, [315, [316, [317, [1, 'B']]]]], [14, '+'], [314, [315, [316, [317, [1, 'C']]]]]]
>>> assert check_node(CST_Add("A","B","C"), langlet)
CST o.k
>>> unparse(CST_Add("A","B","C"))
'A + B + C'
?!>>> CST_GetAttr("a", "c", "d")
[316, [317, [7, '('], [319, [303, [304, [305, [306, [307, [309, [310, [311, [312, [313, [314, [315, [316, [317, [1, 'a']]]]]]]]]]]]]]]], [8, ')']], [321, [23, '.'], [1, 'c']], [321, [23, '.'], [1, 'd']]]
>>> assert check_node(CST_GetAttr("a", "c", "d"), langlet) == True
CST o.k
>>> unparse(CST_GetAttr("a", "c", "d"))
'( a ).c.d'
>>> unparse(CST_GetAttr(any_epxr("a"), "c", "d"))
Traceback (most recent call last):
  File "<input>", line 1, in <module>
NameError: name 'any_epxr' is not defined
>>> unparse(CST_GetAttr(any_expr("a"), "c", "d"))
Traceback (most recent call last):
  File "<input>", line 1, in <module>
  File "C:\lang\Python25\Lib\site-packages\EasyExtend\cstdef25.py", line 189, in any_expr
    assert isinstance(arg,(tuple,list)), arg
AssertionError: a
>>> unparse(CST_GetAttr(any_expr(Name("a")), "c", "d"))
'( a ).c.d'
>>> unparse(CST_GetAttr(CST_Add("a","b"), "c", "d"))
'( a + b ).c.d'
>>> unparse(CST_GetAttr(CST_Div("a","b"), "c", "d"))
'( a / b ).c.d'
>>> unparse(CST_GetAttr(CST_Mul("a","b"), "c", "d"))
'( a * b ).c.d'
>>> unparse(CST_GetAttr(CST_Sub("a","b"), "c", "d"))
'( a - b ).c.d'
>>> unparse(CST_GetAttr(CST_BinAdd("a","b"), "c", "d"))
Traceback (most recent call last):
  File "<input>", line 1, in <module>
NameError: name 'CST_BinAdd' is not defined
>>> unparse(CST_GetAttr(CST_BinOr("a","b"), "c", "d"))
Traceback (most recent call last):
  File "<input>", line 1, in <module>
NameError: name 'CST_BinOr' is not defined
>>> unparse(CST_GetAttr(CST_BitOr("a","b"), "c", "d"))
'( a | b ).c.d'
>>> unparse(CST_GetAttr(CST_BitAnd("a","b"), "c", "d"))
'( a & b ).c.d'
>>> unparse(CST_GetAttr(CST_BitAnd("a","b"), "c", CST_FunCall("d",[])))
Traceback (most recent call last):
  File "<input>", line 1, in <module>
NameError: name 'CST_FunCall' is not defined
>>> unparse(CST_GetAttr(CST_BitAnd("a","b"), "c", CST_CallFunc("d",[])))
Traceback (most recent call last):
  File "<input>", line 1, in <module>
  File "C:\lang\Python25\lib\site-packages\EasyExtend\cstgen.py", line 211, in CST_GetAttr
    return power(atom("(",testlist_gexp(any_test(expr)),")"),*trailers)
  File "cst.py", line 84, in cstfunc
  File "cst.py", line 1141, in power
  File "cst.py", line 64, in toText
AssertionError: .
>>> CST_GetAttr(CST_BitAnd("a","b"), "c", CST_CallFunc("d",[]))
Traceback (most recent call last):
  File "<input>", line 1, in <module>
  File "C:\lang\Python25\lib\site-packages\EasyExtend\cstgen.py", line 211, in CST_GetAttr
    return power(atom("(",testlist_gexp(any_test(expr)),")"),*trailers)
  File "cst.py", line 84, in cstfunc
  File "cst.py", line 1141, in power
  File "cst.py", line 64, in toText
AssertionError: .
>>> CST_CallFunc("d",[])
[316, [317, [1, 'd']], [321, [7, '('], [8, ')']]]
>>> unparse(CST_CallFunc("d",[]))
'd( )'
>>> check_node(CST