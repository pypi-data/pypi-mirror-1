# ______________________________________________________________________
# This was automatically generated by nfagen.py.
# Hack at your own risk.

# LANGLET OFFSET

LANGLET_OFFSET = 512

# trail NFAs:

nfas = {768: [['|', ['1', 516], ['1', 779], ['1', 803, 516]],
       'single_input: NEWLINE | simple_stmt | compound_stmt NEWLINE',
       (768, 0, 768),
       {(516, 1, 768): [(None, '-', 768)],
        (516, 4, 768): [(None, '-', 768)],
        (516, 105, 779): [(779, '.', 2, 768)],
        (523, 132, 855): [(811, 133, 855)],
        (524, 143, 783): [(815, 144, 783)],
        (524, 145, 783): [(783, '.', 122, 780)],
        (524, 148, 783): [(815, 149, 783)],
        (524, 150, 783): [(815, 151, 783)],
        (524, 152, 783): [(783, '.', 122, 780)],
        (524, 163, 783): [(815, 164, 783)],
        (524, 165, 783): [(783, '.', 152, 780)],
        (524, 168, 783): [(815, 169, 783)],
        (524, 170, 783): [(815, 171, 783)],
        (524, 172, 783): [(783, '.', 152, 780)],
        (525, 102, 779): [(780, 103, 779)],
        (525, 104, 779): [(516, 105, 779)],
        (547, 146, 783): [(815, 147, 783)],
        (547, 166, 783): [(815, 167, 783)],
        (768, 0, 768): [(516, 1, 768),
                        (807, 114, 803),
                        (773, 115, 803),
                        (804, 111, 803),
                        (806, 113, 803),
                        (854, 118, 803),
                        (840, 116, 803),
                        (853, 117, 803),
                        (805, 112, 803),
                        (781, 121, 780),
                        (802, 129, 780),
                        (792, 126, 780),
                        (784, 123, 780),
                        (800, 127, 780),
                        (801, 128, 780),
                        (786, 125, 780),
                        (785, 124, 780),
                        ('print', 141, 783),
                        (781, 151, 780),
                        (802, 159, 780),
                        (792, 156, 780),
                        (784, 153, 780),
                        (800, 157, 780),
                        (801, 158, 780),
                        (786, 155, 780),
                        (785, 154, 780),
                        ('print', 161, 783)],
        (773, 115, 803): [(803, '.', 3, 768)],
        (779, '.', 2, 768): [(None, '-', 768)],
        (780, 103, 779): [(516, 105, 779), (525, 104, 779), (525, 102, 779)],
        (780, '.', 101, 779): [(516, 105, 779),
                               (525, 104, 779),
                               (525, 102, 779)],
        (780, '.', 131, 855): [(523, 132, 855)],
        (781, 121, 780): [(780, '.', 101, 779)],
        (781, 151, 780): [(780, '.', 131, 855)],
        (783, '.', 122, 780): [(780, '.', 101, 779)],
        (783, '.', 152, 780): [(780, '.', 131, 855)],
        (784, 123, 780): [(780, '.', 101, 779)],
        (784, 153, 780): [(780, '.', 131, 855)],
        (785, 124, 780): [(780, '.', 101, 779)],
        (785, 154, 780): [(780, '.', 131, 855)],
        (786, 125, 780): [(780, '.', 101, 779)],
        (786, 155, 780): [(780, '.', 131, 855)],
        (792, 126, 780): [(780, '.', 101, 779)],
        (792, 156, 780): [(780, '.', 131, 855)],
        (800, 127, 780): [(780, '.', 101, 779)],
        (800, 157, 780): [(780, '.', 131, 855)],
        (801, 128, 780): [(780, '.', 101, 779)],
        (801, 158, 780): [(780, '.', 131, 855)],
        (802, 129, 780): [(780, '.', 101, 779)],
        (802, 159, 780): [(780, '.', 131, 855)],
        (803, '.', 3, 768): [(516, 4, 768)],
        (804, 111, 803): [(803, '.', 3, 768)],
        (805, 112, 803): [(803, '.', 3, 768)],
        (806, 113, 803): [(803, '.', 3, 768)],
        (807, 114, 803): [(803, '.', 3, 768)],
        (811, 133, 855): [(855, '.', 119, 803)],
        (815, 142, 783): [(524, 145, 783),
                          (524, 143, 783),
                          (783, '.', 122, 780)],
        (815, 144, 783): [(524, 145, 783),
                          (524, 143, 783),
                          (783, '.', 122, 780)],
        (815, 147, 783): [(783, '.', 122, 780), (524, 148, 783)],
        (815, 149, 783): [(524, 150, 783),
                          (524, 152, 783),
                          (783, '.', 122, 780)],
        (815, 151, 783): [(524, 150, 783),
                          (524, 152, 783),
                          (783, '.', 122, 780)],
        (815, 162, 783): [(524, 165, 783),
                          (524, 163, 783),
                          (783, '.', 152, 780)],
        (815, 164, 783): [(524, 165, 783),
                          (524, 163, 783),
                          (783, '.', 152, 780)],
        (815, 167, 783): [(783, '.', 152, 780), (524, 168, 783)],
        (815, 169, 783): [(524, 170, 783),
                          (524, 172, 783),
                          (783, '.', 152, 780)],
        (815, 171, 783): [(524, 170, 783),
                          (524, 172, 783),
                          (783, '.', 152, 780)],
        (840, 116, 803): [(803, '.', 3, 768)],
        (853, 117, 803): [(803, '.', 3, 768)],
        (854, 118, 803): [(803, '.', 3, 768)],
        (855, '.', 119, 803): [(803, '.', 3, 768)],
        ('print', 141, 783): [(547, 146, 783),
                              (815, 142, 783),
                              (783, '.', 122, 780)],
        ('print', 161, 783): [(547, 166, 783),
                              (815, 162, 783),
                              (783, '.', 152, 780)]}],
 769: [['1', ['*', ['|', ['1', 516], ['1', 778]]], 512],
       'file_input: ( NEWLINE | stmt ) * ENDMARKER',
       (769, 0, 769),
       {(512, 3, 769): [(None, '-', 769)],
        (516, 1, 769): [(512, 3, 769), (516, 1, 769), (778, 2, 769)],
        (769, 0, 769): [(512, 3, 769), (516, 1, 769), (778, 2, 769)],
        (778, 2, 769): [(512, 3, 769), (516, 1, 769), (778, 2, 769)]}],
 770: [['1', 838, ['*', 516], 512],
       'eval_input: testlist NEWLINE * ENDMARKER',
       (770, 0, 770),
       {(512, 3, 770): [(None, '-', 770)],
        (516, 2, 770): [(516, 2, 770), (512, 3, 770)],
        (770, 0, 770): [(838, 1, 770)],
        (838, 1, 770): [(516, 2, 770), (512, 3, 770)]}],
 771: [['1', 562, 799, ['?', 519, ['?', 841], 520], 516],
       "decorator: '@' dotted_name[ '(' [ arglist ] ')' ] NEWLINE",
       (771, 0, 771),
       {(516, 6, 771): [(None, '-', 771)],
        (519, 3, 771): [(520, 5, 771), (841, 4, 771)],
        (520, 5, 771): [(516, 6, 771)],
        (562, 1, 771): [(799, 2, 771)],
        (771, 0, 771): [(562, 1, 771)],
        (799, 2, 771): [(519, 3, 771), (516, 6, 771)],
        (841, 4, 771): [(520, 5, 771)]}],
 772: [['1', 771, ['*', 771]],
       'decorators: decorator +',
       (772, 0, 772),
       {(771, 1, 772): [(771, 2, 772), (None, '-', 772)],
        (771, 2, 772): [(771, 2, 772), (None, '-', 772)],
        (772, 0, 772): [(771, 1, 772)]}],
 773: [['1', ['?', 772], 'def', 513, 774, 523, 811],
       "funcdef: [ decorators ] 'def' NAME parameters ':' suite",
       (773, 0, 773),
       {(513, 3, 773): [(774, 4, 773)],
        (523, 5, 773): [(811, 6, 773)],
        (772, 1, 773): [('def', 2, 773)],
        (773, 0, 773): [('def', 2, 773), (772, 1, 773)],
        (774, 4, 773): [(523, 5, 773)],
        (811, 6, 773): [(None, '-', 773)],
        ('def', 2, 773): [(513, 3, 773)]}],
 774: [['1', 519, ['?', 775], 520],
       "parameters: '(' [ varargslist ] ')'",
       (774, 0, 774),
       {(519, 1, 774): [(520, 3, 774), (775, 2, 774)],
        (520, 3, 774): [(None, '-', 774)],
        (774, 0, 774): [(519, 1, 774)],
        (775, 2, 774): [(520, 3, 774)]}],
 775: [['|',
        ['1',
         ['*', 776, ['?', 534, 815], 524],
         ['|', ['1', 528, 513, ['?', 524, 548, 513]], ['1', 548, 513]]],
        ['1',
         776,
         ['?', 534, 815],
         ['*', 524, 776, ['?', 534, 815]],
         ['?', 524]]],
       "varargslist: (( fpdef[ '=' test ] ',' ) * ( '*' NAME[ ',' '**' NAME ] | '**' NAME ) | fpdef[ '=' test ]( ',' fpdef[ '=' test ]) * [ ',' ])",
       (775, 0, 775),
       {(513, 6, 775): [(524, 7, 775), (None, '-', 775)],
        (513, 9, 775): [(None, '-', 775)],
        (513, 11, 775): [(None, '-', 775)],
        (524, 4, 775): [(776, 1, 775), (548, 10, 775), (528, 5, 775)],
        (524, 7, 775): [(548, 8, 775)],
        (524, 15, 775): [(776, 16, 775)],
        (524, 19, 775): [(None, '-', 775)],
        (528, 5, 775): [(513, 6, 775)],
        (534, 2, 775): [(815, 3, 775)],
        (534, 13, 775): [(815, 14, 775)],
        (534, 17, 775): [(815, 18, 775)],
        (548, 8, 775): [(513, 9, 775)],
        (548, 10, 775): [(513, 11, 775)],
        (775, 0, 775): [(776, 1, 775),
                        (548, 10, 775),
                        (528, 5, 775),
                        (776, 12, 775)],
        (776, 1, 775): [(524, 4, 775), (534, 2, 775)],
        (776, 12, 775): [(524, 15, 775),
                         (534, 13, 775),
                         (524, 19, 775),
                         (None, '-', 775)],
        (776, 16, 775): [(534, 17, 775),
                         (524, 15, 775),
                         (524, 19, 775),
                         (None, '-', 775)],
        (815, 3, 775): [(524, 4, 775)],
        (815, 14, 775): [(524, 15, 775), (524, 19, 775), (None, '-', 775)],
        (815, 18, 775): [(524, 15, 775), (524, 19, 775), (None, '-', 775)]}],
 776: [['|', ['1', 513], ['1', 519, 777, 520]],
       "fpdef: NAME | '(' fplist ')'",
       (776, 0, 776),
       {(513, 1, 776): [(None, '-', 776)],
        (519, 2, 776): [(777, 3, 776)],
        (520, 4, 776): [(None, '-', 776)],
        (776, 0, 776): [(513, 1, 776), (519, 2, 776)],
        (777, 3, 776): [(520, 4, 776)]}],
 777: [['1', 776, ['*', 524, 776], ['?', 524]],
       "fplist: fpdef( ',' fpdef ) * [ ',' ]",
       (777, 0, 777),
       {(524, 2, 777): [(776, 3, 777)],
        (524, 4, 777): [(None, '-', 777)],
        (776, 1, 777): [(524, 2, 777), (524, 4, 777), (None, '-', 777)],
        (776, 3, 777): [(524, 2, 777), (524, 4, 777), (None, '-', 777)],
        (777, 0, 777): [(776, 1, 777)]}],
 778: [['|', ['1', 779], ['1', 803]],
       'stmt: simple_stmt | compound_stmt',
       (778, 0, 778),
       {(516, 185, 779): [(779, '.', 1, 778)],
        (523, 192, 855): [(811, 193, 855)],
        (524, 213, 802): [(815, 214, 802)],
        (524, 233, 802): [(815, 234, 802)],
        (525, 182, 779): [(780, 183, 779)],
        (525, 184, 779): [(516, 185, 779)],
        (773, 175, 803): [(803, '.', 2, 778)],
        (778, 0, 778): [(807, 174, 803),
                        (773, 175, 803),
                        (804, 171, 803),
                        (806, 173, 803),
                        (854, 178, 803),
                        (840, 176, 803),
                        (853, 177, 803),
                        (805, 172, 803),
                        (781, 201, 780),
                        (783, 202, 780),
                        (792, 206, 780),
                        (784, 203, 780),
                        (800, 207, 780),
                        (801, 208, 780),
                        (786, 205, 780),
                        (785, 204, 780),
                        ('assert', 211, 802),
                        (781, 221, 780),
                        (783, 222, 780),
                        (792, 226, 780),
                        (784, 223, 780),
                        (800, 227, 780),
                        (801, 228, 780),
                        (786, 225, 780),
                        (785, 224, 780),
                        ('assert', 231, 802)],
        (779, '.', 1, 778): [(None, '-', 778)],
        (780, 183, 779): [(516, 185, 779), (525, 184, 779), (525, 182, 779)],
        (780, '.', 181, 779): [(516, 185, 779),
                               (525, 184, 779),
                               (525, 182, 779)],
        (780, '.', 191, 855): [(523, 192, 855)],
        (781, 201, 780): [(780, '.', 181, 779)],
        (781, 221, 780): [(780, '.', 191, 855)],
        (783, 202, 780): [(780, '.', 181, 779)],
        (783, 222, 780): [(780, '.', 191, 855)],
        (784, 203, 780): [(780, '.', 181, 779)],
        (784, 223, 780): [(780, '.', 191, 855)],
        (785, 204, 780): [(780, '.', 181, 779)],
        (785, 224, 780): [(780, '.', 191, 855)],
        (786, 205, 780): [(780, '.', 181, 779)],
        (786, 225, 780): [(780, '.', 191, 855)],
        (792, 206, 780): [(780, '.', 181, 779)],
        (792, 226, 780): [(780, '.', 191, 855)],
        (800, 207, 780): [(780, '.', 181, 779)],
        (800, 227, 780): [(780, '.', 191, 855)],
        (801, 208, 780): [(780, '.', 181, 779)],
        (801, 228, 780): [(780, '.', 191, 855)],
        (802, '.', 209, 780): [(780, '.', 181, 779)],
        (802, '.', 229, 780): [(780, '.', 191, 855)],
        (803, '.', 2, 778): [(None, '-', 778)],
        (804, 171, 803): [(803, '.', 2, 778)],
        (805, 172, 803): [(803, '.', 2, 778)],
        (806, 173, 803): [(803, '.', 2, 778)],
        (807, 174, 803): [(803, '.', 2, 778)],
        (811, 193, 855): [(855, '.', 179, 803)],
        (815, 212, 802): [(524, 213, 802), (802, '.', 209, 780)],
        (815, 214, 802): [(802, '.', 209, 780)],
        (815, 232, 802): [(524, 233, 802), (802, '.', 229, 780)],
        (815, 234, 802): [(802, '.', 229, 780)],
        (840, 176, 803): [(803, '.', 2, 778)],
        (853, 177, 803): [(803, '.', 2, 778)],
        (854, 178, 803): [(803, '.', 2, 778)],
        (855, '.', 179, 803): [(803, '.', 2, 778)],
        ('assert', 211, 802): [(815, 212, 802)],
        ('assert', 231, 802): [(815, 232, 802)]}],
 779: [['1', 780, ['*', 525, 780], ['?', 525], 516],
       "simple_stmt: small_stmt( ';' small_stmt ) * [ ';' ] NEWLINE",
       (779, 0, 779),
       {(516, 5, 779): [(None, '-', 779)],
        (525, 2, 779): [(780, 3, 779)],
        (525, 4, 779): [(516, 5, 779)],
        (779, 0, 779): [(780, 1, 779)],
        (780, 1, 779): [(516, 5, 779), (525, 4, 779), (525, 2, 779)],
        (780, 3, 779): [(516, 5, 779), (525, 4, 779), (525, 2, 779)]}],
 780: [['|',
        ['1', 781],
        ['1', 783],
        ['1', 784],
        ['1', 785],
        ['1', 786],
        ['1', 792],
        ['1', 800],
        ['1', 801],
        ['1', 802]],
       'small_stmt: ( expr_stmt | print_stmt | del_stmt | pass_stmt | flow_stmt | import_stmt | global_stmt | exec_stmt | assert_stmt )',
       (780, 0, 780),
       {(780, 0, 780): [(781, 1, 780),
                        (802, 9, 780),
                        (783, 2, 780),
                        (792, 6, 780),
                        (784, 3, 780),
                        (800, 7, 780),
                        (801, 8, 780),
                        (786, 5, 780),
                        (785, 4, 780)],
        (781, 1, 780): [(None, '-', 780)],
        (783, 2, 780): [(None, '-', 780)],
        (784, 3, 780): [(None, '-', 780)],
        (785, 4, 780): [(None, '-', 780)],
        (786, 5, 780): [(None, '-', 780)],
        (792, 6, 780): [(None, '-', 780)],
        (800, 7, 780): [(None, '-', 780)],
        (801, 8, 780): [(None, '-', 780)],
        (802, 9, 780): [(None, '-', 780)]}],
 781: [['1',
        838,
        ['|',
         ['1', 782, ['|', ['1', 851], ['1', 838]]],
         ['*', 534, ['|', ['1', 851], ['1', 838]]]]],
       "expr_stmt: testlist( augassign( yield_expr | testlist ) | ( '=' ( yield_expr | testlist )) * )",
       (781, 0, 781),
       {(534, 5, 781): [(838, 7, 781), (851, 6, 781)],
        (781, 0, 781): [(838, 1, 781)],
        (782, 2, 781): [(838, 4, 781), (851, 3, 781)],
        (838, 1, 781): [(782, 2, 781), (534, 5, 781), (None, '-', 781)],
        (838, 4, 781): [(None, '-', 781)],
        (838, 7, 781): [(534, 5, 781), (None, '-', 781)],
        (851, 3, 781): [(None, '-', 781)],
        (851, 6, 781): [(534, 5, 781), (None, '-', 781)]}],
 782: [['|',
        ['1', 549],
        ['1', 550],
        ['1', 551],
        ['1', 552],
        ['1', 553],
        ['1', 554],
        ['1', 555],
        ['1', 556],
        ['1', 557],
        ['1', 558],
        ['1', 559],
        ['1', 561]],
       "augassign: ( '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '|=' | '^=' | '<<=' | '>>=' | '**=' | '//=' )",
       (782, 0, 782),
       {(549, 1, 782): [(None, '-', 782)],
        (550, 2, 782): [(None, '-', 782)],
        (551, 3, 782): [(None, '-', 782)],
        (552, 4, 782): [(None, '-', 782)],
        (553, 5, 782): [(None, '-', 782)],
        (554, 6, 782): [(None, '-', 782)],
        (555, 7, 782): [(None, '-', 782)],
        (556, 8, 782): [(None, '-', 782)],
        (557, 9, 782): [(None, '-', 782)],
        (558, 10, 782): [(None, '-', 782)],
        (559, 11, 782): [(None, '-', 782)],
        (561, 12, 782): [(None, '-', 782)],
        (782, 0, 782): [(551, 3, 782),
                        (558, 10, 782),
                        (557, 9, 782),
                        (555, 7, 782),
                        (554, 6, 782),
                        (559, 11, 782),
                        (550, 2, 782),
                        (561, 12, 782),
                        (553, 5, 782),
                        (549, 1, 782),
                        (556, 8, 782),
                        (552, 4, 782)]}],
 783: [['1',
        'print',
        ['|',
         ['?', 815, ['*', 524, 815], ['?', 524]],
         ['1',
          547,
          815,
          ['?', ['1', 524, 815], ['*', 524, 815], ['?', 524]]]]],
       "print_stmt: 'print' ([ test( ',' test ) * [ ',' ]] | '>>' test[( ',' test ) + [ ',' ]])",
       (783, 0, 783),
       {(524, 3, 783): [(815, 4, 783)],
        (524, 5, 783): [(None, '-', 783)],
        (524, 8, 783): [(815, 9, 783)],
        (524, 10, 783): [(815, 11, 783)],
        (524, 12, 783): [(None, '-', 783)],
        (547, 6, 783): [(815, 7, 783)],
        (783, 0, 783): [('print', 1, 783)],
        (815, 2, 783): [(524, 5, 783), (524, 3, 783), (None, '-', 783)],
        (815, 4, 783): [(524, 5, 783), (524, 3, 783), (None, '-', 783)],
        (815, 7, 783): [(None, '-', 783), (524, 8, 783)],
        (815, 9, 783): [(524, 10, 783), (524, 12, 783), (None, '-', 783)],
        (815, 11, 783): [(524, 10, 783), (524, 12, 783), (None, '-', 783)],
        ('print', 1, 783): [(547, 6, 783), (815, 2, 783), (None, '-', 783)]}],
 784: [['1', 'del', 837],
       "del_stmt: 'del' exprlist",
       (784, 0, 784),
       {(784, 0, 784): [('del', 1, 784)],
        (837, 2, 784): [(None, '-', 784)],
        ('del', 1, 784): [(837, 2, 784)]}],
 785: [['1', 'pass'],
       "pass_stmt: 'pass'",
       (785, 0, 785),
       {(785, 0, 785): [('pass', 1, 785)],
        ('pass', 1, 785): [(None, '-', 785)]}],
 786: [['|', ['1', 787], ['1', 788], ['1', 789], ['1', 791], ['1', 790]],
       'flow_stmt: break_stmt | continue_stmt | return_stmt | raise_stmt | yield_stmt',
       (786, 0, 786),
       {(786, 0, 786): [(791, 4, 786),
                        (788, 2, 786),
                        (787, 1, 786),
                        (790, 5, 786),
                        (789, 3, 786)],
        (787, 1, 786): [(None, '-', 786)],
        (788, 2, 786): [(None, '-', 786)],
        (789, 3, 786): [(None, '-', 786)],
        (790, 5, 786): [(None, '-', 786)],
        (791, 4, 786): [(None, '-', 786)]}],
 787: [['1', 'break'],
       "break_stmt: 'break'",
       (787, 0, 787),
       {(787, 0, 787): [('break', 1, 787)],
        ('break', 1, 787): [(None, '-', 787)]}],
 788: [['1', 'continue'],
       "continue_stmt: 'continue'",
       (788, 0, 788),
       {(788, 0, 788): [('continue', 1, 788)],
        ('continue', 1, 788): [(None, '-', 788)]}],
 789: [['1', 'return', ['?', 838]],
       "return_stmt: 'return' [ testlist ]",
       (789, 0, 789),
       {(789, 0, 789): [('return', 1, 789)],
        (838, 2, 789): [(None, '-', 789)],
        ('return', 1, 789): [(838, 2, 789), (None, '-', 789)]}],
 790: [['1', 851],
       'yield_stmt: yield_expr',
       (790, 0, 790),
       {(790, 0, 790): [(851, 1, 790)], (851, 1, 790): [(None, '-', 790)]}],
 791: [['1', 'raise', ['?', 815, ['?', 524, 815, ['?', 524, 815]]]],
       "raise_stmt: 'raise' [ test[ ',' test[ ',' test ]]]",
       (791, 0, 791),
       {(524, 3, 791): [(815, 4, 791)],
        (524, 5, 791): [(815, 6, 791)],
        (791, 0, 791): [('raise', 1, 791)],
        (815, 2, 791): [(524, 3, 791), (None, '-', 791)],
        (815, 4, 791): [(524, 5, 791), (None, '-', 791)],
        (815, 6, 791): [(None, '-', 791)],
        ('raise', 1, 791): [(815, 2, 791), (None, '-', 791)]}],
 792: [['|', ['1', 793], ['1', 794]],
       'import_stmt: import_name | import_from',
       (792, 0, 792),
       {(792, 0, 792): [(793, 1, 792), (794, 2, 792)],
        (793, 1, 792): [(None, '-', 792)],
        (794, 2, 792): [(None, '-', 792)]}],
 793: [['1', 'import', 798],
       "import_name: 'import' dotted_as_names",
       (793, 0, 793),
       {(793, 0, 793): [('import', 1, 793)],
        (798, 2, 793): [(None, '-', 793)],
        ('import', 1, 793): [(798, 2, 793)]}],
 794: [['1',
        'from',
        ['|', ['1', ['*', 535], 799], ['1', 535, ['*', 535]]],
        'import',
        ['|', ['1', 528], ['1', 519, 797, 520], ['1', 797]]],
       "import_from: ( 'from' ( '.' * dotted_name | '.' + ) 'import' ( '*' | '(' import_as_names ')' | import_as_names ))",
       (794, 0, 794),
       {(519, 8, 794): [(797, 9, 794)],
        (520, 10, 794): [(None, '-', 794)],
        (528, 7, 794): [(None, '-', 794)],
        (535, 2, 794): [(799, 3, 794), (535, 2, 794)],
        (535, 4, 794): [(535, 5, 794), ('import', 6, 794)],
        (535, 5, 794): [(535, 5, 794), ('import', 6, 794)],
        (794, 0, 794): [('from', 1, 794)],
        (797, 9, 794): [(520, 10, 794)],
        (797, 11, 794): [(None, '-', 794)],
        (799, 3, 794): [('import', 6, 794)],
        ('from', 1, 794): [(535, 4, 794), (799, 3, 794), (535, 2, 794)],
        ('import', 6, 794): [(519, 8, 794), (528, 7, 794), (797, 11, 794)]}],
 795: [['1', 513, ['?', ['|', ['1', 'as'], ['1', 513]], 513]],
       "import_as_name: NAME[( 'as' | NAME ) NAME ]",
       (795, 0, 795),
       {(513, 1, 795): [(513, 3, 795), (None, '-', 795), ('as', 2, 795)],
        (513, 3, 795): [(513, 4, 795)],
        (513, 4, 795): [(None, '-', 795)],
        (795, 0, 795): [(513, 1, 795)],
        ('as', 2, 795): [(513, 4, 795)]}],
 796: [['1', 799, ['?', ['|', ['1', 'as'], ['1', 513]], 513]],
       "dotted_as_name: dotted_name[( 'as' | NAME ) NAME ]",
       (796, 0, 796),
       {(513, 3, 796): [(513, 4, 796)],
        (513, 4, 796): [(None, '-', 796)],
        (796, 0, 796): [(799, 1, 796)],
        (799, 1, 796): [(513, 3, 796), (None, '-', 796), ('as', 2, 796)],
        ('as', 2, 796): [(513, 4, 796)]}],
 797: [['1', 795, ['*', 524, 795], ['?', 524]],
       "import_as_names: import_as_name( ',' import_as_name ) * [ ',' ]",
       (797, 0, 797),
       {(524, 2, 797): [(795, 3, 797)],
        (524, 4, 797): [(None, '-', 797)],
        (795, 1, 797): [(524, 2, 797), (524, 4, 797), (None, '-', 797)],
        (795, 3, 797): [(524, 2, 797), (524, 4, 797), (None, '-', 797)],
        (797, 0, 797): [(795, 1, 797)]}],
 798: [['1', 796, ['*', 524, 796]],
       "dotted_as_names: dotted_as_name( ',' dotted_as_name ) *",
       (798, 0, 798),
       {(524, 2, 798): [(796, 3, 798)],
        (796, 1, 798): [(524, 2, 798), (None, '-', 798)],
        (796, 3, 798): [(524, 2, 798), (None, '-', 798)],
        (798, 0, 798): [(796, 1, 798)]}],
 799: [['1', 513, ['*', 535, 513]],
       "dotted_name: NAME( '.' NAME ) *",
       (799, 0, 799),
       {(513, 1, 799): [(535, 2, 799), (None, '-', 799)],
        (513, 3, 799): [(535, 2, 799), (None, '-', 799)],
        (535, 2, 799): [(513, 3, 799)],
        (799, 0, 799): [(513, 1, 799)]}],
 800: [['1', 'global', 513, ['*', 524, 513]],
       "global_stmt: 'global' NAME( ',' NAME ) *",
       (800, 0, 800),
       {(513, 2, 800): [(524, 3, 800), (None, '-', 800)],
        (513, 4, 800): [(524, 3, 800), (None, '-', 800)],
        (524, 3, 800): [(513, 4, 800)],
        (800, 0, 800): [('global', 1, 800)],
        ('global', 1, 800): [(513, 2, 800)]}],
 801: [['1', 'exec', 821, ['?', 'in', 815, ['?', 524, 815]]],
       "exec_stmt: 'exec' expr[ 'in' test[ ',' test ]]",
       (801, 0, 801),
       {(524, 5, 801): [(815, 6, 801)],
        (801, 0, 801): [('exec', 1, 801)],
        (815, 4, 801): [(524, 5, 801), (None, '-', 801)],
        (815, 6, 801): [(None, '-', 801)],
        (821, 2, 801): [('in', 3, 801), (None, '-', 801)],
        ('exec', 1, 801): [(821, 2, 801)],
        ('in', 3, 801): [(815, 4, 801)]}],
 802: [['1', 'assert', 815, ['?', 524, 815]],
       "assert_stmt: 'assert' test[ ',' test ]",
       (802, 0, 802),
       {(524, 3, 802): [(815, 4, 802)],
        (802, 0, 802): [('assert', 1, 802)],
        (815, 2, 802): [(524, 3, 802), (None, '-', 802)],
        (815, 4, 802): [(None, '-', 802)],
        ('assert', 1, 802): [(815, 2, 802)]}],
 803: [['|',
        ['1', 804],
        ['1', 805],
        ['1', 806],
        ['1', 807],
        ['1', 773],
        ['1', 840],
        ['1', 853],
        ['1', 854],
        ['1', 855]],
       'compound_stmt: if_stmt | while_stmt | for_stmt | try_stmt | funcdef | classdef | repeat_stmt | switch_stmt | thunk_stmt',
       (803, 0, 803),
       {(773, 5, 803): [(None, '-', 803)],
        (803, 0, 803): [(807, 4, 803),
                        (773, 5, 803),
                        (804, 1, 803),
                        (855, 9, 803),
                        (806, 3, 803),
                        (854, 8, 803),
                        (840, 6, 803),
                        (853, 7, 803),
                        (805, 2, 803)],
        (804, 1, 803): [(None, '-', 803)],
        (805, 2, 803): [(None, '-', 803)],
        (806, 3, 803): [(None, '-', 803)],
        (807, 4, 803): [(None, '-', 803)],
        (840, 6, 803): [(None, '-', 803)],
        (853, 7, 803): [(None, '-', 803)],
        (854, 8, 803): [(None, '-', 803)],
        (855, 9, 803): [(None, '-', 803)]}],
 804: [['1',
        'if',
        815,
        ['?', 856],
        523,
        811,
        ['*', 'elif', 815, ['?', 856], 523, 811],
        ['?', 'else', 523, 811]],
       "if_stmt: 'if' test[ as_name ] ':' suite( 'elif' test[ as_name ] ':' suite ) * [ 'else' ':' suite ]",
       (804, 0, 804),
       {(523, 4, 804): [(811, 5, 804)],
        (523, 9, 804): [(811, 10, 804)],
        (523, 12, 804): [(811, 13, 804)],
        (804, 0, 804): [('if', 1, 804)],
        (811, 5, 804): [('else', 11, 804),
                        ('elif', 6, 804),
                        (None, '-', 804)],
        (811, 10, 804): [('else', 11, 804),
                         ('elif', 6, 804),
                         (None, '-', 804)],
        (811, 13, 804): [(None, '-', 804)],
        (815, 2, 804): [(856, 3, 804), (523, 4, 804)],
        (815, 7, 804): [(523, 9, 804), (856, 8, 804)],
        (856, 3, 804): [(523, 4, 804)],
        (856, 8, 804): [(523, 9, 804)],
        ('elif', 6, 804): [(815, 7, 804)],
        ('else', 11, 804): [(523, 12, 804)],
        ('if', 1, 804): [(815, 2, 804)]}],
 805: [['1', 'while', 815, 523, 811, ['?', 'else', 523, 811]],
       "while_stmt: 'while' test ':' suite[ 'else' ':' suite ]",
       (805, 0, 805),
       {(523, 3, 805): [(811, 4, 805)],
        (523, 6, 805): [(811, 7, 805)],
        (805, 0, 805): [('while', 1, 805)],
        (811, 4, 805): [('else', 5, 805), (None, '-', 805)],
        (811, 7, 805): [(None, '-', 805)],
        (815, 2, 805): [(523, 3, 805)],
        ('else', 5, 805): [(523, 6, 805)],
        ('while', 1, 805): [(815, 2, 805)]}],
 806: [['1', 'for', 837, 'in', 838, 523, 811, ['?', 'else', 523, 811]],
       "for_stmt: 'for' exprlist 'in' testlist ':' suite[ 'else' ':' suite ]",
       (806, 0, 806),
       {(523, 5, 806): [(811, 6, 806)],
        (523, 8, 806): [(811, 9, 806)],
        (806, 0, 806): [('for', 1, 806)],
        (811, 6, 806): [('else', 7, 806), (None, '-', 806)],
        (811, 9, 806): [(None, '-', 806)],
        (837, 2, 806): [('in', 3, 806)],
        (838, 4, 806): [(523, 5, 806)],
        ('else', 7, 806): [(523, 8, 806)],
        ('for', 1, 806): [(837, 2, 806)],
        ('in', 3, 806): [(838, 4, 806)]}],
 807: [['1',
        'try',
        523,
        811,
        ['|',
         ['1',
          ['1', 810, 523, 811],
          ['*', 810, 523, 811],
          ['?', 'else', 523, 811],
          ['?', 'finally', 523, 811]],
         ['1', 'finally', 523, 811]]],
       "try_stmt: ( 'try' ':' suite(( except_clause ':' suite ) + [ 'else' ':' suite ][ 'finally' ':' suite ] | 'finally' ':' suite ))",
       (807, 0, 807),
       {(523, 2, 807): [(811, 3, 807)],
        (523, 5, 807): [(811, 6, 807)],
        (523, 8, 807): [(811, 9, 807)],
        (523, 11, 807): [(811, 12, 807)],
        (523, 14, 807): [(811, 15, 807)],
        (523, 17, 807): [(811, 18, 807)],
        (807, 0, 807): [('try', 1, 807)],
        (810, 4, 807): [(523, 5, 807)],
        (810, 7, 807): [(523, 8, 807)],
        (811, 3, 807): [('finally', 16, 807), (810, 4, 807)],
        (811, 6, 807): [(810, 7, 807),
                        ('finally', 13, 807),
                        ('else', 10, 807),
                        (None, '-', 807)],
        (811, 9, 807): [(810, 7, 807),
                        ('finally', 13, 807),
                        ('else', 10, 807),
                        (None, '-', 807)],
        (811, 12, 807): [('finally', 13, 807), (None, '-', 807)],
        (811, 15, 807): [(None, '-', 807)],
        (811, 18, 807): [(None, '-', 807)],
        ('else', 10, 807): [(523, 11, 807)],
        ('finally', 13, 807): [(523, 14, 807)],
        ('finally', 16, 807): [(523, 17, 807)],
        ('try', 1, 807): [(523, 2, 807)]}],
 808: [['1', 'with', 815, ['?', 809], 523, 811],
       "with_stmt: 'with' test[ with_var ] ':' suite",
       (808, 0, 808),
       {(523, 4, 808): [(811, 5, 808)],
        (808, 0, 808): [('with', 1, 808)],
        (809, 3, 808): [(523, 4, 808)],
        (811, 5, 808): [(None, '-', 808)],
        (815, 2, 808): [(809, 3, 808), (523, 4, 808)],
        ('with', 1, 808): [(815, 2, 808)]}],
 809: [['1', ['|', ['1', 'as'], ['1', 513]], 821],
       "with_var: ( 'as' | NAME ) expr",
       (809, 0, 809),
       {(513, 2, 809): [(821, 3, 809)],
        (809, 0, 809): [(513, 2, 809), ('as', 1, 809)],
        (821, 3, 809): [(None, '-', 809)],
        ('as', 1, 809): [(821, 3, 809)]}],
 810: [['1', 'except', ['?', 815, ['?', 524, 815]]],
       "except_clause: 'except' [ test[ ',' test ]]",
       (810, 0, 810),
       {(524, 3, 810): [(815, 4, 810)],
        (810, 0, 810): [('except', 1, 810)],
        (815, 2, 810): [(524, 3, 810), (None, '-', 810)],
        (815, 4, 810): [(None, '-', 810)],
        ('except', 1, 810): [(815, 2, 810), (None, '-', 810)]}],
 811: [['|', ['1', 779], ['1', 516, 517, 778, ['*', 778], 518]],
       'suite: simple_stmt | NEWLINE INDENT stmt + DEDENT',
       (811, 0, 811),
       {(516, 2, 811): [(517, 3, 811)],
        (517, 3, 811): [(778, 4, 811)],
        (518, 6, 811): [(None, '-', 811)],
        (778, 4, 811): [(778, 5, 811), (518, 6, 811)],
        (778, 5, 811): [(778, 5, 811), (518, 6, 811)],
        (779, 1, 811): [(None, '-', 811)],
        (811, 0, 811): [(516, 2, 811), (779, 1, 811)]}],
 812: [['1', 813, ['?', ['1', 524, 813], ['*', 524, 813], ['?', 524]]],
       "testlist_safe: old_test[( ',' old_test ) + [ ',' ]]",
       (812, 0, 812),
       {(524, 2, 812): [(813, 3, 812)],
        (524, 4, 812): [(813, 5, 812)],
        (524, 6, 812): [(None, '-', 812)],
        (812, 0, 812): [(813, 1, 812)],
        (813, 1, 812): [(524, 2, 812), (None, '-', 812)],
        (813, 3, 812): [(524, 4, 812), (524, 6, 812), (None, '-', 812)],
        (813, 5, 812): [(524, 4, 812), (524, 6, 812), (None, '-', 812)]}],
 813: [['|', ['1', 816], ['1', 814]],
       'old_test: or_test | old_lambdef',
       (813, 0, 813),
       {(813, 0, 813): [(816, 1, 813), (814, 2, 813)],
        (814, 2, 813): [(None, '-', 813)],
        (816, 1, 813): [(None, '-', 813)]}],
 814: [['1', 'lambda', ['?', 775], 523, 813],
       "old_lambdef: 'lambda' [ varargslist ] ':' old_test",
       (814, 0, 814),
       {(523, 3, 814): [(813, 4, 814)],
        (775, 2, 814): [(523, 3, 814)],
        (813, 4, 814): [(None, '-', 814)],
        (814, 0, 814): [('lambda', 1, 814)],
        ('lambda', 1, 814): [(523, 3, 814), (775, 2, 814)]}],
 815: [['|', ['1', 816, ['?', 'if', 816, 'else', 815]], ['1', 832]],
       "test: or_test[ 'if' or_test 'else' test ] | lambdef",
       (815, 0, 815),
       {(815, 0, 815): [(816, 1, 815), (832, 6, 815)],
        (815, 5, 815): [(None, '-', 815)],
        (816, 1, 815): [('if', 2, 815), (None, '-', 815)],
        (816, 3, 815): [('else', 4, 815)],
        (832, 6, 815): [(None, '-', 815)],
        ('else', 4, 815): [(815, 5, 815)],
        ('if', 2, 815): [(816, 3, 815)]}],
 816: [['1', 817, ['*', 'or', 817]],
       "or_test: and_test( 'or' and_test ) *",
       (816, 0, 816),
       {(816, 0, 816): [(817, 1, 816)],
        (817, 1, 816): [('or', 2, 816), (None, '-', 816)],
        (817, 3, 816): [('or', 2, 816), (None, '-', 816)],
        ('or', 2, 816): [(817, 3, 816)]}],
 817: [['1', 818, ['*', 'and', 818]],
       "and_test: not_test( 'and' not_test ) *",
       (817, 0, 817),
       {(817, 0, 817): [(818, 1, 817)],
        (818, 1, 817): [('and', 2, 817), (None, '-', 817)],
        (818, 3, 817): [('and', 2, 817), (None, '-', 817)],
        ('and', 2, 817): [(818, 3, 817)]}],
 818: [['|', ['1', 'not', 818], ['1', 819]],
       "not_test: 'not' not_test | comparison",
       (818, 0, 818),
       {(818, 0, 818): [('not', 1, 818), (819, 3, 818)],
        (818, 2, 818): [(None, '-', 818)],
        (819, 3, 818): [(None, '-', 818)],
        ('not', 1, 818): [(818, 2, 818)]}],
 819: [['1', 821, ['*', 820, 821]],
       'comparison: expr( comp_op expr ) *',
       (819, 0, 819),
       {(819, 0, 819): [(821, 1, 819)],
        (820, 2, 819): [(821, 3, 819)],
        (821, 1, 819): [(820, 2, 819), (None, '-', 819)],
        (821, 3, 819): [(820, 2, 819), (None, '-', 819)]}],
 820: [['|',
        ['1', 532],
        ['1', 533],
        ['1', 540],
        ['1', 543],
        ['1', 542],
        ['1', '<>'],
        ['1', 541],
        ['1', 'in'],
        ['1', 'not', 'in'],
        ['1', 'is'],
        ['1', 'is', 'not']],
       "comp_op: '<' | '>' | '==' | '>=' | '<=' | '<>' | '!=' | 'in' | 'not' 'in' | 'is' | 'is' 'not'",
       (820, 0, 820),
       {(532, 1, 820): [(None, '-', 820)],
        (533, 2, 820): [(None, '-', 820)],
        (540, 3, 820): [(None, '-', 820)],
        (541, 7, 820): [(None, '-', 820)],
        (542, 5, 820): [(None, '-', 820)],
        (543, 4, 820): [(None, '-', 820)],
        (820, 0, 820): [('not', 9, 820),
                        (541, 7, 820),
                        ('is', 11, 820),
                        (543, 4, 820),
                        (532, 1, 820),
                        ('in', 8, 820),
                        (533, 2, 820),
                        ('is', 12, 820),
                        (540, 3, 820),
                        (542, 5, 820),
                        ('<>', 6, 820)],
        ('<>', 6, 820): [(None, '-', 820)],
        ('in', 8, 820): [(None, '-', 820)],
        ('in', 10, 820): [(None, '-', 820)],
        ('is', 11, 820): [(None, '-', 820)],
        ('is', 12, 820): [('not', 13, 820)],
        ('not', 9, 820): [('in', 10, 820)],
        ('not', 13, 820): [(None, '-', 820)]}],
 821: [['1', 822, ['*', 530, 822]],
       "expr: xor_expr( '|' xor_expr ) *",
       (821, 0, 821),
       {(530, 2, 821): [(822, 3, 821)],
        (821, 0, 821): [(822, 1, 821)],
        (822, 1, 821): [(None, '-', 821), (530, 2, 821)],
        (822, 3, 821): [(530, 2, 821), (None, '-', 821)]}],
 822: [['1', 823, ['*', 545, 823]],
       "xor_expr: and_expr( '^' and_expr ) *",
       (822, 0, 822),
       {(545, 2, 822): [(823, 3, 822)],
        (822, 0, 822): [(823, 1, 822)],
        (823, 1, 822): [(545, 2, 822), (None, '-', 822)],
        (823, 3, 822): [(545, 2, 822), (None, '-', 822)]}],
 823: [['1', 824, ['*', 531, 824]],
       "and_expr: shift_expr( '&' shift_expr ) *",
       (823, 0, 823),
       {(531, 2, 823): [(824, 3, 823)],
        (823, 0, 823): [(824, 1, 823)],
        (824, 1, 823): [(531, 2, 823), (None, '-', 823)],
        (824, 3, 823): [(531, 2, 823), (None, '-', 823)]}],
 824: [['1', 825, ['*', ['|', ['1', 546], ['1', 547]], 825]],
       "shift_expr: arith_expr(( '<<' | '>>' ) arith_expr ) *",
       (824, 0, 824),
       {(546, 2, 824): [(825, 4, 824)],
        (547, 3, 824): [(825, 4, 824)],
        (824, 0, 824): [(825, 1, 824)],
        (825, 1, 824): [(None, '-', 824), (547, 3, 824), (546, 2, 824)],
        (825, 4, 824): [(546, 2, 824), (547, 3, 824), (None, '-', 824)]}],
 825: [['1', 826, ['*', ['|', ['1', 526], ['1', 527]], 826]],
       "arith_expr: term(( '+' | '-' ) term ) *",
       (825, 0, 825),
       {(526, 2, 825): [(826, 4, 825)],
        (527, 3, 825): [(826, 4, 825)],
        (825, 0, 825): [(826, 1, 825)],
        (826, 1, 825): [(527, 3, 825), (526, 2, 825), (None, '-', 825)],
        (826, 4, 825): [(527, 3, 825), (526, 2, 825), (None, '-', 825)]}],
 826: [['1',
        827,
        ['*', ['|', ['1', 528], ['1', 529], ['1', 536], ['1', 560]], 827]],
       "term: factor(( '*' | '/' | '%' | '//' ) factor ) *",
       (826, 0, 826),
       {(528, 2, 826): [(827, 6, 826)],
        (529, 3, 826): [(827, 6, 826)],
        (536, 4, 826): [(827, 6, 826)],
        (560, 5, 826): [(827, 6, 826)],
        (826, 0, 826): [(827, 1, 826)],
        (827, 1, 826): [(529, 3, 826),
                        (560, 5, 826),
                        (528, 2, 826),
                        (None, '-', 826),
                        (536, 4, 826)],
        (827, 6, 826): [(536, 4, 826),
                        (529, 3, 826),
                        (560, 5, 826),
                        (528, 2, 826),
                        (None, '-', 826)]}],
 827: [['|',
        ['1', ['|', ['1', 526], ['1', 527], ['1', 544]], 827],
        ['1', 828]],
       "factor: ( '+' | '-' | '~' ) factor | power",
       (827, 0, 827),
       {(526, 1, 827): [(827, 4, 827)],
        (527, 2, 827): [(827, 4, 827)],
        (544, 3, 827): [(827, 4, 827)],
        (827, 0, 827): [(828, 5, 827),
                        (526, 1, 827),
                        (544, 3, 827),
                        (527, 2, 827)],
        (827, 4, 827): [(None, '-', 827)],
        (828, 5, 827): [(None, '-', 827)]}],
 828: [['1', 829, ['*', 833], ['?', 548, 827]],
       "power: atom trailer * [ '**' factor ]",
       (828, 0, 828),
       {(548, 3, 828): [(827, 4, 828)],
        (827, 4, 828): [(None, '-', 828)],
        (828, 0, 828): [(829, 1, 828)],
        (829, 1, 828): [(833, 2, 828), (548, 3, 828), (None, '-', 828)],
        (833, 2, 828): [(833, 2, 828), (548, 3, 828), (None, '-', 828)]}],
 829: [['|',
        ['1', 519, ['?', ['|', ['1', 851], ['1', 831]]], 520],
        ['1', 521, ['?', 830], 522],
        ['1', 538, ['?', 839], 539],
        ['1', 537, 849, 537],
        ['1', 513],
        ['1', 514],
        ['1', 600],
        ['1', 515, ['*', 515]]],
       "atom: ( '(' [ yield_expr | testlist_gexp ] ')' | '[' [ listmaker ] ']' | '{' [ dictmaker ] '}' | '`' testlist1 '`' | NAME | NUMBER | IPv4Address | STRING + )",
       (829, 0, 829),
       {(513, 14, 829): [(None, '-', 829)],
        (514, 15, 829): [(None, '-', 829)],
        (515, 17, 829): [(515, 18, 829), (None, '-', 829)],
        (515, 18, 829): [(515, 18, 829), (None, '-', 829)],
        (519, 1, 829): [(831, 3, 829), (851, 2, 829), (520, 4, 829)],
        (520, 4, 829): [(None, '-', 829)],
        (521, 5, 829): [(522, 7, 829), (830, 6, 829)],
        (522, 7, 829): [(None, '-', 829)],
        (537, 11, 829): [(849, 12, 829)],
        (537, 13, 829): [(None, '-', 829)],
        (538, 8, 829): [(539, 10, 829), (839, 9, 829)],
        (539, 10, 829): [(None, '-', 829)],
        (600, 16, 829): [(None, '-', 829)],
        (829, 0, 829): [(537, 11, 829),
                        (519, 1, 829),
                        (600, 16, 829),
                        (513, 14, 829),
                        (538, 8, 829),
                        (514, 15, 829),
                        (521, 5, 829),
                        (515, 17, 829)],
        (830, 6, 829): [(522, 7, 829)],
        (831, 3, 829): [(520, 4, 829)],
        (839, 9, 829): [(539, 10, 829)],
        (849, 12, 829): [(537, 13, 829)],
        (851, 2, 829): [(520, 4, 829)]}],
 830: [['1', 815, ['|', ['1', 844], ['1', ['*', 524, 815], ['?', 524]]]],
       "listmaker: test( list_for | ( ',' test ) * [ ',' ])",
       (830, 0, 830),
       {(524, 3, 830): [(815, 4, 830)],
        (524, 5, 830): [(None, '-', 830)],
        (815, 1, 830): [(524, 5, 830),
                        (844, 2, 830),
                        (524, 3, 830),
                        (None, '-', 830)],
        (815, 4, 830): [(524, 5, 830), (524, 3, 830), (None, '-', 830)],
        (830, 0, 830): [(815, 1, 830)],
        (844, 2, 830): [(None, '-', 830)]}],
 831: [['1', 815, ['|', ['1', 847], ['1', ['*', 524, 815], ['?', 524]]]],
       "testlist_gexp: test( gen_for | ( ',' test ) * [ ',' ])",
       (831, 0, 831),
       {(524, 3, 831): [(815, 4, 831)],
        (524, 5, 831): [(None, '-', 831)],
        (815, 1, 831): [(524, 5, 831),
                        (847, 2, 831),
                        (524, 3, 831),
                        (None, '-', 831)],
        (815, 4, 831): [(524, 5, 831), (524, 3, 831), (None, '-', 831)],
        (831, 0, 831): [(815, 1, 831)],
        (847, 2, 831): [(None, '-', 831)]}],
 832: [['1', 'lambda', ['?', 775], 523, 815],
       "lambdef: 'lambda' [ varargslist ] ':' test",
       (832, 0, 832),
       {(523, 3, 832): [(815, 4, 832)],
        (775, 2, 832): [(523, 3, 832)],
        (815, 4, 832): [(None, '-', 832)],
        (832, 0, 832): [('lambda', 1, 832)],
        ('lambda', 1, 832): [(523, 3, 832), (775, 2, 832)]}],
 833: [['|',
        ['1', 519, ['?', 841], 520],
        ['1', 521, 834, 522],
        ['1', 535, 513]],
       "trailer: '(' [ arglist ] ')' | '[' subscriptlist ']' | '.' NAME",
       (833, 0, 833),
       {(513, 8, 833): [(None, '-', 833)],
        (519, 1, 833): [(841, 2, 833), (520, 3, 833)],
        (520, 3, 833): [(None, '-', 833)],
        (521, 4, 833): [(834, 5, 833)],
        (522, 6, 833): [(None, '-', 833)],
        (535, 7, 833): [(513, 8, 833)],
        (833, 0, 833): [(535, 7, 833), (521, 4, 833), (519, 1, 833)],
        (834, 5, 833): [(522, 6, 833)],
        (841, 2, 833): [(520, 3, 833)]}],
 834: [['1', 835, ['*', 524, 835], ['?', 524]],
       "subscriptlist: subscript( ',' subscript ) * [ ',' ]",
       (834, 0, 834),
       {(524, 2, 834): [(835, 3, 834)],
        (524, 4, 834): [(None, '-', 834)],
        (834, 0, 834): [(835, 1, 834)],
        (835, 1, 834): [(524, 2, 834), (524, 4, 834), (None, '-', 834)],
        (835, 3, 834): [(524, 2, 834), (524, 4, 834), (None, '-', 834)]}],
 835: [['|',
        ['1', 535, 535, 535],
        ['1', 815],
        ['1', ['?', 815], 523, ['?', 815], ['?', 836]]],
       "subscript: '.' '.' '.' | test | [ test ] ':' [ test ][ sliceop ]",
       (835, 0, 835),
       {(523, 6, 835): [(None, '-', 835), (815, 7, 835), (836, 8, 835)],
        (535, 1, 835): [(535, 2, 835)],
        (535, 2, 835): [(535, 3, 835)],
        (535, 3, 835): [(None, '-', 835)],
        (815, 4, 835): [(None, '-', 835)],
        (815, 5, 835): [(523, 6, 835)],
        (815, 7, 835): [(None, '-', 835), (836, 8, 835)],
        (835, 0, 835): [(815, 4, 835),
                        (815, 5, 835),
                        (523, 6, 835),
                        (535, 1, 835)],
        (836, 8, 835): [(None, '-', 835)]}],
 836: [['1', 523, ['?', 815]],
       "sliceop: ':' [ test ]",
       (836, 0, 836),
       {(523, 1, 836): [(815, 2, 836), (None, '-', 836)],
        (815, 2, 836): [(None, '-', 836)],
        (836, 0, 836): [(523, 1, 836)]}],
 837: [['1', 821, ['*', 524, 821], ['?', 524]],
       "exprlist: expr( ',' expr ) * [ ',' ]",
       (837, 0, 837),
       {(524, 2, 837): [(821, 3, 837)],
        (524, 4, 837): [(None, '-', 837)],
        (821, 1, 837): [(524, 2, 837), (524, 4, 837), (None, '-', 837)],
        (821, 3, 837): [(524, 2, 837), (524, 4, 837), (None, '-', 837)],
        (837, 0, 837): [(821, 1, 837)]}],
 838: [['1', 815, ['*', 524, 815], ['?', 524]],
       "testlist: test( ',' test ) * [ ',' ]",
       (838, 0, 838),
       {(524, 2, 838): [(815, 3, 838)],
        (524, 4, 838): [(None, '-', 838)],
        (815, 1, 838): [(524, 2, 838), (524, 4, 838), (None, '-', 838)],
        (815, 3, 838): [(524, 2, 838), (524, 4, 838), (None, '-', 838)],
        (838, 0, 838): [(815, 1, 838)]}],
 839: [['1', 815, 523, 815, ['*', 524, 815, 523, 815], ['?', 524]],
       "dictmaker: test ':' test( ',' test ':' test ) * [ ',' ]",
       (839, 0, 839),
       {(523, 2, 839): [(815, 3, 839)],
        (523, 6, 839): [(815, 7, 839)],
        (524, 4, 839): [(815, 5, 839)],
        (524, 8, 839): [(None, '-', 839)],
        (815, 1, 839): [(523, 2, 839)],
        (815, 3, 839): [(None, '-', 839), (524, 4, 839), (524, 8, 839)],
        (815, 5, 839): [(523, 6, 839)],
        (815, 7, 839): [(None, '-', 839), (524, 4, 839), (524, 8, 839)],
        (839, 0, 839): [(815, 1, 839)]}],
 840: [['1', 'class', 513, ['?', 519, ['?', 838], 520], 523, 811],
       "classdef: 'class' NAME[ '(' [ testlist ] ')' ] ':' suite",
       (840, 0, 840),
       {(513, 2, 840): [(519, 3, 840), (523, 6, 840)],
        (519, 3, 840): [(838, 4, 840), (520, 5, 840)],
        (520, 5, 840): [(523, 6, 840)],
        (523, 6, 840): [(811, 7, 840)],
        (811, 7, 840): [(None, '-', 840)],
        (838, 4, 840): [(520, 5, 840)],
        (840, 0, 840): [('class', 1, 840)],
        ('class', 1, 840): [(513, 2, 840)]}],
 841: [['1',
        ['*', 842, 524],
        ['|',
         ['1', 842, ['?', 524]],
         ['1', 528, 815, ['?', 524, 548, 815]],
         ['1', 548, 815]]],
       "arglist: ( argument ',' ) * ( argument[ ',' ] | '*' test[ ',' '**' test ] | '**' test )",
       (841, 0, 841),
       {(524, 2, 841): [(528, 5, 841),
                        (842, 3, 841),
                        (842, 1, 841),
                        (548, 10, 841)],
        (524, 4, 841): [(None, '-', 841)],
        (524, 7, 841): [(548, 8, 841)],
        (528, 5, 841): [(815, 6, 841)],
        (548, 8, 841): [(815, 9, 841)],
        (548, 10, 841): [(815, 11, 841)],
        (815, 6, 841): [(524, 7, 841), (None, '-', 841)],
        (815, 9, 841): [(None, '-', 841)],
        (815, 11, 841): [(None, '-', 841)],
        (841, 0, 841): [(528, 5, 841),
                        (842, 3, 841),
                        (842, 1, 841),
                        (548, 10, 841)],
        (842, 1, 841): [(524, 2, 841)],
        (842, 3, 841): [(524, 4, 841), (None, '-', 841)]}],
 842: [['|', ['1', 815, ['?', 847]], ['1', 815, 534, 815]],
       "argument: test[ gen_for ] | test '=' test",
       (842, 0, 842),
       {(534, 4, 842): [(815, 5, 842)],
        (815, 1, 842): [(847, 2, 842), (None, '-', 842)],
        (815, 3, 842): [(534, 4, 842)],
        (815, 5, 842): [(None, '-', 842)],
        (842, 0, 842): [(815, 3, 842), (815, 1, 842)],
        (847, 2, 842): [(None, '-', 842)]}],
 843: [['|', ['1', 844], ['1', 845]],
       'list_iter: list_for | list_if',
       (843, 0, 843),
       {(843, 0, 843): [(845, 2, 843), (844, 1, 843)],
        (844, 1, 843): [(None, '-', 843)],
        (845, 2, 843): [(None, '-', 843)]}],
 844: [['1', 'for', 837, 'in', 812, ['?', 843]],
       "list_for: 'for' exprlist 'in' testlist_safe[ list_iter ]",
       (844, 0, 844),
       {(812, 4, 844): [(None, '-', 844), (843, 5, 844)],
        (837, 2, 844): [('in', 3, 844)],
        (843, 5, 844): [(None, '-', 844)],
        (844, 0, 844): [('for', 1, 844)],
        ('for', 1, 844): [(837, 2, 844)],
        ('in', 3, 844): [(812, 4, 844)]}],
 845: [['1', 'if', 813, ['?', 843]],
       "list_if: 'if' old_test[ list_iter ]",
       (845, 0, 845),
       {(813, 2, 845): [(843, 3, 845), (None, '-', 845)],
        (843, 3, 845): [(None, '-', 845)],
        (845, 0, 845): [('if', 1, 845)],
        ('if', 1, 845): [(813, 2, 845)]}],
 846: [['|', ['1', 847], ['1', 848]],
       'gen_iter: gen_for | gen_if',
       (846, 0, 846),
       {(846, 0, 846): [(848, 2, 846), (847, 1, 846)],
        (847, 1, 846): [(None, '-', 846)],
        (848, 2, 846): [(None, '-', 846)]}],
 847: [['1', 'for', 837, 'in', 816, ['?', 846]],
       "gen_for: 'for' exprlist 'in' or_test[ gen_iter ]",
       (847, 0, 847),
       {(816, 4, 847): [(846, 5, 847), (None, '-', 847)],
        (837, 2, 847): [('in', 3, 847)],
        (846, 5, 847): [(None, '-', 847)],
        (847, 0, 847): [('for', 1, 847)],
        ('for', 1, 847): [(837, 2, 847)],
        ('in', 3, 847): [(816, 4, 847)]}],
 848: [['1', 'if', 813, ['?', 846]],
       "gen_if: 'if' old_test[ gen_iter ]",
       (848, 0, 848),
       {(813, 2, 848): [(846, 3, 848), (None, '-', 848)],
        (846, 3, 848): [(None, '-', 848)],
        (848, 0, 848): [('if', 1, 848)],
        ('if', 1, 848): [(813, 2, 848)]}],
 849: [['1', 815, ['*', 524, 815]],
       "testlist1: test( ',' test ) *",
       (849, 0, 849),
       {(524, 2, 849): [(815, 3, 849)],
        (815, 1, 849): [(524, 2, 849), (None, '-', 849)],
        (815, 3, 849): [(524, 2, 849), (None, '-', 849)],
        (849, 0, 849): [(815, 1, 849)]}],
 850: [['1', 513],
       'encoding_decl: NAME',
       (850, 0, 850),
       {(513, 1, 850): [(None, '-', 850)], (850, 0, 850): [(513, 1, 850)]}],
 851: [['1', 'yield', ['?', 838]],
       "yield_expr: 'yield' [ testlist ]",
       (851, 0, 851),
       {(838, 2, 851): [(None, '-', 851)],
        (851, 0, 851): [('yield', 1, 851)],
        ('yield', 1, 851): [(838, 2, 851), (None, '-', 851)]}],
 852: [['1', 'case', 821, 523, 811, ['*', 'case', 821, 523, 811]],
       "case_stmt: 'case' expr ':' suite( 'case' expr ':' suite ) *",
       (852, 0, 852),
       {(523, 3, 852): [(811, 4, 852)],
        (523, 7, 852): [(811, 8, 852)],
        (811, 4, 852): [('case', 5, 852), (None, '-', 852)],
        (811, 8, 852): [('case', 5, 852), (None, '-', 852)],
        (821, 2, 852): [(523, 3, 852)],
        (821, 6, 852): [(523, 7, 852)],
        (852, 0, 852): [('case', 1, 852)],
        ('case', 1, 852): [(821, 2, 852)],
        ('case', 5, 852): [(821, 6, 852)]}],
 853: [['1',
        'repeat',
        523,
        811,
        'until',
        523,
        ['|', ['1', 516, 517, 815, 516, 518], ['1', 815, 516]]],
       "repeat_stmt: 'repeat' ':' suite 'until' ':' ( NEWLINE INDENT test NEWLINE DEDENT | test NEWLINE )",
       (853, 0, 853),
       {(516, 6, 853): [(517, 7, 853)],
        (516, 9, 853): [(518, 10, 853)],
        (516, 12, 853): [(None, '-', 853)],
        (517, 7, 853): [(815, 8, 853)],
        (518, 10, 853): [(None, '-', 853)],
        (523, 2, 853): [(811, 3, 853)],
        (523, 5, 853): [(815, 11, 853), (516, 6, 853)],
        (811, 3, 853): [('until', 4, 853)],
        (815, 8, 853): [(516, 9, 853)],
        (815, 11, 853): [(516, 12, 853)],
        (853, 0, 853): [('repeat', 1, 853)],
        ('repeat', 1, 853): [(523, 2, 853)],
        ('until', 4, 853): [(523, 5, 853)]}],
 854: [['1', 'switch', 821, 523, 516, 517, 852, 518, ['?', 'else', 523, 811]],
       "switch_stmt: 'switch' expr ':' NEWLINE INDENT case_stmt DEDENT[ 'else' ':' suite ]",
       (854, 0, 854),
       {(516, 4, 854): [(517, 5, 854)],
        (517, 5, 854): [(852, 6, 854)],
        (518, 7, 854): [('else', 8, 854), (None, '-', 854)],
        (523, 3, 854): [(516, 4, 854)],
        (523, 9, 854): [(811, 10, 854)],
        (811, 10, 854): [(None, '-', 854)],
        (821, 2, 854): [(523, 3, 854)],
        (852, 6, 854): [(518, 7, 854)],
        (854, 0, 854): [('switch', 1, 854)],
        ('else', 8, 854): [(523, 9, 854)],
        ('switch', 1, 854): [(821, 2, 854)]}],
 855: [['1', 780, 523, 811],
       "thunk_stmt: small_stmt ':' suite",
       (855, 0, 855),
       {(523, 2, 855): [(811, 3, 855)],
        (780, 1, 855): [(523, 2, 855)],
        (811, 3, 855): [(None, '-', 855)],
        (855, 0, 855): [(780, 1, 855)]}],
 856: [['1', 'as', 513],
       "as_name: 'as' NAME",
       (856, 0, 856),
       {(513, 2, 856): [(None, '-', 856)],
        (856, 0, 856): [('as', 1, 856)],
        ('as', 1, 856): [(513, 2, 856)]}]}

# expansion targets:

expanded  = {768: [['|', ['1', 516], ['1', 779], ['1', 803, 516]],
       'single_input: NEWLINE | simple_stmt | compound_stmt NEWLINE',
       (768, 0, 768),
       {(516, 1, 768): [(None, '-', 768)],
        (516, 4, 768): [(None, '-', 768)],
        (768, 0, 768): [(779, 2, 768), (516, 1, 768), (803, 3, 768)],
        (779, 2, 768): [(None, '-', 768)],
        (803, 3, 768): [(516, 4, 768)]}],
 778: [['|', ['1', 779], ['1', 803]],
       'stmt: simple_stmt | compound_stmt',
       (778, 0, 778),
       {(778, 0, 778): [(803, 2, 778), (779, 1, 778)],
        (779, 1, 778): [(None, '-', 778)],
        (803, 2, 778): [(None, '-', 778)]}]}

# reachables:

reachables = {768: set([513, 514, 515, 516, 773, 519, 521, 779, 780, 781, 526, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 772, 538, 800, 801, 802, 803, 804, 805, 806, 807, 818, 815, 816, 817, 562, 819, 821, 822, 823, 824, 825, 826, 827, 828, 793, 832, 'global', 'return', 838, 840, 'assert', 851, 853, 854, 855, 'not', 527, 600, 'yield', 829, 'try', 'while', 'continue', 'del', 771, 'def', 'pass', 537, 794, 'if', 'for', 'print', 'import', 544, 'repeat', 'exec', 'from', 'class', 'raise', 'break', 'switch', 'lambda']),
 769: set([512, 513, 514, 515, 516, 773, 519, 521, 778, 'global', 780, 781, 526, 527, 784, 'not', 786, 771, 788, 789, 790, 791, 792, 537, 538, 544, 801, 802, 803, 804, 805, 806, 807, 818, 815, 816, 817, 562, 819, 821, 822, 823, 824, 825, 826, 827, 828, 793, 832, 779, 'return', 838, 840, 'break', 851, 853, 854, 855, 600, 783, 785, 'yield', 829, 'try', 'while', 'continue', 'del', 'def', 772, 'pass', 794, 787, 'if', 'for', 'print', 'import', 800, 'repeat', 'exec', 'from', 'class', 'raise', 'assert', 'switch', 'lambda']),
 770: set([832, 513, 514, 515, 838, 519, 521, 526, 527, 'not', 600, 537, 538, 544, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 'lambda']),
 771: set([562]),
 772: set([562, 771]),
 773: set([562, 771, 772, 'def']),
 774: set([519]),
 775: set([776, 528, 519, 548, 513]),
 776: set([513, 519]),
 777: set([776, 513, 519]),
 778: set([513, 514, 515, 519, 521, 'global', 526, 527, 600, 537, 538, 544, 562, 'return', 'break', 'not', 'yield', 'try', 'continue', 'pass', 'for', 'print', 'import', 804, 805, 'lambda', 771, 772, 773, 779, 780, 781, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 800, 801, 802, 803, 'from', 'raise', 806, 807, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 832, 838, 840, 'assert', 851, 853, 854, 855, 'while', 'del', 'def', 'if', 'repeat', 'exec', 'class', 'switch']),
 779: set([513, 514, 515, 537, 519, 521, 'global', 780, 781, 526, 783, 784, 785, 786, 787, 788, 789, 790, 'pass', 792, 793, 538, 794, 800, 801, 802, 'from', 'raise', 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 832, 544, 'return', 838, 'exec', 'assert', 'print', 851, 791, 'import', 'not', 527, 'break', 600, 'yield', 'continue', 'del', 'lambda']),
 780: set([513, 514, 515, 519, 521, 'global', 793, 781, 526, 783, 784, 785, 786, 787, 788, 789, 790, 'pass', 792, 537, 538, 794, 800, 801, 802, 'from', 'raise', 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 832, 544, 'return', 838, 'exec', 'assert', 'print', 851, 791, 'import', 'not', 527, 'break', 600, 'yield', 'continue', 'del', 'lambda']),
 781: set([832, 513, 514, 515, 838, 519, 521, 526, 527, 'not', 600, 537, 538, 544, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 'lambda']),
 782: set([549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 561]),
 783: set(['print']),
 784: set(['del']),
 785: set(['pass']),
 786: set(['return', 'continue', 'yield', 'break', 787, 788, 789, 790, 791, 851, 'raise']),
 787: set(['break']),
 788: set(['continue']),
 789: set(['return']),
 790: set([851, 'yield']),
 791: set(['raise']),
 792: set([793, 794, 'from', 'import']),
 793: set(['import']),
 794: set(['from']),
 795: set([513]),
 796: set([513, 799]),
 797: set([513, 795]),
 798: set([513, 796, 799]),
 799: set([513]),
 800: set(['global']),
 801: set(['exec']),
 802: set(['assert']),
 803: set([513, 514, 515, 772, 773, 519, 521, 'global', 780, 781, 526, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 537, 538, 800, 801, 802, 804, 805, 806, 807, 562, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 793, 832, 'return', 838, 840, 'assert', 851, 853, 854, 855, 'not', 527, 600, 'yield', 829, 'try', 'while', 'continue', 'del', 771, 'def', 'pass', 794, 'if', 'for', 'print', 'import', 544, 'repeat', 'exec', 'from', 'class', 'raise', 'break', 'switch', 'lambda']),
 804: set(['if']),
 805: set(['while']),
 806: set(['for']),
 807: set(['try']),
 808: set(['with']),
 809: set([513, 'as']),
 810: set(['except']),
 811: set([513, 514, 515, 516, 519, 521, 779, 780, 781, 526, 783, 784, 785, 786, 787, 788, 789, 790, 'pass', 792, 537, 538, 794, 800, 801, 802, 'from', 'raise', 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 793, 832, 544, 'global', 'return', 838, 'exec', 'assert', 'print', 851, 791, 'import', 'not', 527, 'break', 600, 'yield', 829, 'continue', 'del', 'lambda']),
 812: set([513, 514, 515, 519, 521, 526, 527, 600, 'not', 537, 538, 544, 813, 814, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 'lambda']),
 813: set([513, 514, 515, 519, 521, 526, 527, 'not', 600, 537, 538, 544, 814, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 'lambda']),
 814: set(['lambda']),
 815: set([832, 513, 514, 515, 519, 521, 526, 527, 'not', 600, 537, 538, 544, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 'lambda']),
 816: set([513, 514, 515, 519, 521, 526, 527, 600, 'not', 537, 538, 544, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829]),
 817: set([513, 514, 515, 519, 521, 526, 527, 'not', 600, 537, 538, 544, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829]),
 818: set([513, 514, 515, 519, 521, 526, 527, 600, 'not', 537, 538, 544, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829]),
 819: set([513, 514, 515, 519, 521, 526, 527, 600, 537, 538, 544, 821, 822, 823, 824, 825, 826, 827, 828, 829]),
 820: set(['<>', 'is', 532, 533, 'in', 'not', 540, 541, 542, 543]),
 821: set([513, 514, 515, 519, 521, 526, 527, 600, 537, 538, 544, 822, 823, 824, 825, 826, 827, 828, 829]),
 822: set([513, 514, 515, 519, 521, 526, 527, 600, 537, 538, 544, 823, 824, 825, 826, 827, 828, 829]),
 823: set([513, 514, 515, 519, 521, 526, 527, 600, 537, 538, 544, 824, 825, 826, 827, 828, 829]),
 824: set([513, 514, 515, 519, 521, 526, 527, 600, 537, 538, 544, 825, 826, 827, 828, 829]),
 825: set([544, 513, 514, 515, 829, 519, 521, 526, 527, 600, 537, 826, 827, 828, 538]),
 826: set([544, 513, 514, 515, 519, 521, 526, 527, 600, 537, 538, 827, 828, 829]),
 827: set([544, 513, 514, 515, 519, 521, 526, 527, 600, 537, 538, 828, 829]),
 828: set([513, 514, 515, 519, 521, 600, 537, 538, 829]),
 829: set([513, 514, 515, 519, 521, 600, 537, 538]),
 830: set([832, 513, 514, 515, 519, 521, 526, 527, 600, 'not', 537, 538, 544, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 'lambda']),
 831: set([832, 513, 514, 515, 519, 521, 526, 527, 600, 'not', 537, 538, 544, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 'lambda']),
 832: set(['lambda']),
 833: set([521, 519, 535]),
 834: set([832, 513, 514, 835, 519, 521, 523, 526, 527, 'not', 515, 535, 600, 537, 538, 544, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 'lambda']),
 835: set([832, 513, 514, 515, 519, 521, 523, 526, 527, 600, 535, 'not', 537, 538, 544, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 'lambda']),
 836: set([523]),
 837: set([513, 514, 515, 519, 521, 526, 527, 600, 537, 538, 544, 821, 822, 823, 824, 825, 826, 827, 828, 829]),
 838: set([832, 513, 514, 515, 519, 521, 526, 527, 600, 'not', 537, 538, 544, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 'lambda']),
 839: set([832, 513, 514, 515, 519, 521, 526, 527, 600, 'not', 537, 538, 544, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 'lambda']),
 840: set(['class']),
 841: set([832, 513, 514, 515, 519, 521, 842, 526, 527, 528, 'not', 600, 537, 538, 544, 548, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 'lambda']),
 842: set([832, 513, 514, 515, 519, 521, 526, 527, 600, 'not', 537, 538, 544, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 'lambda']),
 843: set([844, 845, 'for', 'if']),
 844: set(['for']),
 845: set(['if']),
 846: set([848, 'if', 'for', 847]),
 847: set(['for']),
 848: set(['if']),
 849: set([832, 513, 514, 515, 519, 521, 526, 527, 600, 'not', 537, 538, 544, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 'lambda']),
 850: set([513]),
 851: set(['yield']),
 852: set(['case']),
 853: set(['repeat']),
 854: set(['switch']),
 855: set([513, 514, 515, 537, 519, 521, 'global', 780, 781, 526, 783, 784, 785, 786, 787, 788, 789, 790, 'pass', 792, 793, 538, 794, 800, 801, 802, 'from', 'raise', 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 832, 544, 'return', 838, 'exec', 'assert', 'print', 851, 791, 'import', 'not', 527, 'break', 600, 'yield', 'continue', 'del', 'lambda']),
 856: set(['as'])}

# terminals:

terminals  = set([512, 513, 'elif', 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 'finally', 'global', 'return', 'break', 514, 'not', 600, 'yield', 'try', 'continue', 'pass', 'for', 'print', 'import', 'or', 'lambda', 'except', 'from', 'raise', 562, 'until', 'else', 'assert', 'with', 'case', 'while', 'del', 'def', 'and', '<>', 'is', 'as', 'in', 'if', 'repeat', 'exec', 'class', 'switch'])

# symbols of:

symbols_of  = {768: set([803, 779, 516]),
 769: set([512, 778, 516]),
 770: set([512, 516, 838]),
 771: set([516, 519, 520, 841, 562, 799]),
 772: set([771]),
 773: set([513, 811, 772, 774, 523, 'def']),
 774: set([520, 775, 519]),
 775: set([513, 548, 776, 524, 815, 528, 534]),
 776: set([520, 513, 519, 777]),
 777: set([776, 524]),
 778: set([803, 779]),
 779: set([516, 780, 525]),
 780: set([784, 785, 786, 801, 792, 802, 800, 781, 783]),
 781: set([782, 851, 534, 838]),
 782: set([549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 561]),
 783: set(['print', 547, 524, 815]),
 784: set(['del', 837]),
 785: set(['pass']),
 786: set([787, 788, 789, 790, 791]),
 787: set(['break']),
 788: set(['continue']),
 789: set(['return', 838]),
 790: set([851]),
 791: set([524, 'raise', 815]),
 792: set([793, 794]),
 793: set(['import', 798]),
 794: set(['from', 519, 520, 528, 535, 'import', 797, 799]),
 795: set([513, 'as']),
 796: set([513, 'as', 799]),
 797: set([795, 524]),
 798: set([524, 796]),
 799: set([513, 535]),
 800: set([513, 'global', 524]),
 801: set([815, 524, 821, 'in', 'exec']),
 802: set(['assert', 524, 815]),
 803: set([804, 773, 806, 807, 840, 854, 855, 853, 805]),
 804: set(['elif', 811, 523, 815, 856, 'else', 'if']),
 805: set(['while', 523, 'else', 811, 815]),
 806: set([523, 837, 838, 811, 'for', 'in', 'else']),
 807: set([523, 810, 811, 'else', 'try', 'finally']),
 808: set([809, 523, 'with', 811, 815]),
 809: set([513, 'as', 821]),
 810: set([524, 'except', 815]),
 811: set([778, 779, 516, 517, 518]),
 812: set([524, 813]),
 813: set([816, 814]),
 814: set([523, 775, 813, 'lambda']),
 815: set([816, 815, 'if', 832, 'else']),
 816: set([817, 'or']),
 817: set(['and', 818]),
 818: set(['not', 818, 819]),
 819: set([820, 821]),
 820: set(['<>', 'is', 532, 533, 'in', 'not', 540, 541, 542, 543]),
 821: set([530, 822]),
 822: set([545, 823]),
 823: set([824, 531]),
 824: set([825, 546, 547]),
 825: set([826, 526, 527]),
 826: set([528, 529, 560, 536, 827]),
 827: set([544, 827, 828, 526, 527]),
 828: set([833, 827, 548, 829]),
 829: set([513, 514, 515, 839, 520, 521, 522, 519, 849, 851, 600, 537, 538, 539, 830, 831]),
 830: set([844, 524, 815]),
 831: set([847, 524, 815]),
 832: set([523, 815, 775, 'lambda']),
 833: set([513, 834, 521, 519, 520, 841, 522, 535]),
 834: set([835, 524]),
 835: set([523, 815, 836, 535]),
 836: set([523, 815]),
 837: set([524, 821]),
 838: set([524, 815]),
 839: set([523, 524, 815]),
 840: set([513, 811, 838, 519, 520, 523, 'class']),
 841: set([528, 548, 842, 524, 815]),
 842: set([815, 534, 847]),
 843: set([844, 845]),
 844: set([843, 812, 837, 'for', 'in']),
 845: set([843, 813, 'if']),
 846: set([848, 847]),
 847: set([816, 846, 837, 'for', 'in']),
 848: set([813, 846, 'if']),
 849: set([524, 815]),
 850: set([513]),
 851: set([838, 'yield']),
 852: set(['case', 523, 811, 821]),
 853: set([811, 516, 517, 518, 523, 815, 'repeat', 'until']),
 854: set([811, 516, 517, 518, 523, 'else', 'switch', 852, 821]),
 855: set([811, 523, 780]),
 856: set([513, 'as'])}

# keywords:

keywords  = set(['and', 'elif', '<>', 'is', 'global', 'as', 'pass', 'if', 'from', 'raise', 'for', 'except', 'switch', 'finally', 'print', 'import', 'until', 'repeat', 'return', 'exec', 'else', 'assert', 'not', 'with', 'class', 'case', 'break', 'in', 'yield', 'try', 'while', 'continue', 'del', 'or', 'def', 'lambda'])

