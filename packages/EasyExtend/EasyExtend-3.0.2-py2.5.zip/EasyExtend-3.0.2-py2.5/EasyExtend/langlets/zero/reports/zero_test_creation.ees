__________________________________________________________________________________

 zero

 On Python 2.5.1 (r251:54863, Apr 18 2007, 08:51:08) [MSC v.1310 32 bit (Intel)]

 Reuses session report zero_creation_test.eerp

__________________________________________________________________________________

>>> from EasyExtend.util.minicommands import*
>>> from EasyExtend.util.path import path
>>> EasyExtend.new_langlet("blub", prompt = "blb> ", source_ext = "blb")
*** Modify C:\lang\Python25\lib\site-packages\EasyExtend\langlets\blub\parsedef\parse_nfa.py ***
*** Modify C:\lang\Python25\lib\site-packages\EasyExtend\langlets\blub\lexdef\lex_nfa.py ***
New langlet 'blub' created:

    [EasyExtend]+-[langlets]
                   +- [blub]
                       +- __init__.py
                       +- run_blub.py
                       +- conf.py
                       +- langlet.py
                       +- [lexdef]
                           +- __init__.py
                           +- lex_symbol.py
                           +- lex_token.py
                           +- lex_nfa.py
                           +- Token.ext
                       +- [parsedef]
                           +- __init__.py
                           +- parse_symbol.py
                           +- parse_token.py
                           +- parse_nfa.py
                           +- Grammar.ext
                       +- [reports]
                       +- [tests]
>>>
>>> import EasyExtend.langlets.blub.langlet as blub
>>> assert blub.symbol.single_input % 512 == 256
>>> blub.tokenize("1+2")
[[33794, '1', 1, (0, 1)], [33806, '+', 1, (1, 2)], [33794, '2', 1, (2, 3)], [33792, '', 2, (0, 0)]]
>>> blub.LANGLET_OFFSET
33792
>>> blub_path = path(blub.__file__).dirname()
>>>
>>> _
33792
>>> demo = blub_path.joinpath("demo.blb")
>>> f_demo = open(demo, "w")
>>> f_demo.write("print 'Hello `blub` langlet!'\n")
>>> f_demo.close()
>>> f = None
>>> f = open(blub_path.joinpath("lexdef", "Token.ext"),"w")
>>> assert f
>>> f.write("  ")
>>> f.close()
>>> pycmd = PythonCmd()
>>> pycmd.prefix_args = [blub_path.joinpath("run_blub.py")]
>>> rc = pycmd("demo.blb")
>>> assert rc == 0
>>> blub.tokenize("+")[0][1]
'+'
>>>
>>> assert blub.tokenize("+=")[0][1] == '+='
>>> assert blub.tokenize("111")[0][1] == '111'
>>> assert blub.tokenize("11.1")[0][1] == '11.1'
>>> assert blub.tokenize("2e4")[0][1] == '2e4'
>>> assert blub.tokenize("2 1")[0][1] == '2'
>>> assert blub.tokenize("2+1")[0][1] == '2'
>>> assert blub.tokenize("u'2'")[0][1] == "u'2'"
>>> cmd = DeltreeCmd()
>>> cmd(blub_path)
0
>>>

--------------------.
Recorded assertions |
--------------------------------------------------------------------------------------------------
Status |eerp ln|repl ln| Assertion
-------+-------+-------+--------------------------------------------------------------------------
OK     | 40    | 40    | assert blub.symbol.single_input % 512 == 256
OK     | 55    | 55    | assert f
OK     | 61    | 61    | assert rc == 0
OK     | 65    | 65    | assert blub.tokenize("+=")[0][1] == '+='
OK     | 66    | 66    | assert blub.tokenize("111")[0][1] == '111'
OK     | 67    | 67    | assert blub.tokenize("11.1")[0][1] == '11.1'
OK     | 68    | 68    | assert blub.tokenize("2e4")[0][1] == '2e4'
OK     | 69    | 69    | assert blub.tokenize("2 1")[0][1] == '2'
OK     | 70    | 70    | assert blub.tokenize("2+1")[0][1] == '2'
OK     | 71    | 71    | assert blub.tokenize("u'2'")[0][1] == "u'2'"
-------+-------+-------+--------------------------------------------------------------------------
__________________________________________________________________________________

