#  This file is automatically generated; please don't muck it up!

#--begin constants--

single_input = 768
file_input = 769
eval_input = 770
decorator = 771
decorators = 772
funcdef = 773
parameters = 774
varargslist = 775
fpdef = 776
fplist = 777
stmt = 778
simple_stmt = 779
small_stmt = 780
expr_stmt = 781
augassign = 782
print_stmt = 783
del_stmt = 784
pass_stmt = 785
flow_stmt = 786
break_stmt = 787
continue_stmt = 788
return_stmt = 789
yield_stmt = 790
raise_stmt = 791
import_stmt = 792
import_name = 793
import_from = 794
import_as_name = 795
dotted_as_name = 796
import_as_names = 797
dotted_as_names = 798
dotted_name = 799
global_stmt = 800
exec_stmt = 801
assert_stmt = 802
compound_stmt = 803
if_stmt = 804
while_stmt = 805
for_stmt = 806
try_stmt = 807
with_stmt = 808
with_var = 809
except_clause = 810
suite = 811
testlist_safe = 812
old_test = 813
old_lambdef = 814
test = 815
or_test = 816
and_test = 817
not_test = 818
comparison = 819
comp_op = 820
expr = 821
xor_expr = 822
and_expr = 823
shift_expr = 824
arith_expr = 825
term = 826
factor = 827
power = 828
atom = 829
listmaker = 830
testlist_gexp = 831
lambdef = 832
trailer = 833
subscriptlist = 834
subscript = 835
sliceop = 836
exprlist = 837
testlist = 838
dictmaker = 839
classdef = 840
arglist = 841
argument = 842
list_iter = 843
list_for = 844
list_if = 845
gen_iter = 846
gen_for = 847
gen_if = 848
testlist1 = 849
encoding_decl = 850
yield_expr = 851
case_stmt = 852
repeat_stmt = 853
switch_stmt = 854
thunk_stmt = 855
as_name = 856
tiny_stmt = 857

#--end constants--

tok_name = sym_name = {}
for _name, _value in globals().items():
    if type(_value) is type(0):
        sym_name[_value] = _name

