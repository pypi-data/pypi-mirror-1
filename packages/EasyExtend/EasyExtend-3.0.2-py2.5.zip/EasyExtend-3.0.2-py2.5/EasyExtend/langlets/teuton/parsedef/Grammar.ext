# Grammar.ext fuer Teuton


print_stmt: 'drucke' ( [ test (',' test)* [','] ] |
                      '>>' test [ (',' test)+ [','] ] )
del_stmt: 'entf' exprlist
pass_stmt: 'pass'
break_stmt: 'abbrechen'
continue_stmt: 'weiter'
return_stmt: ZURUECK [testlist]
raise_stmt: 'behandle' [test [',' test [',' test]]]
import_name: 'import' dotted_as_names
import_from: ('von' ('.'* dotted_name | '.'+)
              'import' ('*' | '(' import_as_names ')' | import_as_names))
exec_stmt: ('ausfuehren'|AUSFUEHREN) expr ['in' test [',' test]]
assert_stmt: 'behaupte' test [',' test]
if_stmt: 'wenn' test ':' suite ('wennsonst' test ':' suite)* ['sonst' ':' suite]
while_stmt: 'solange' test ':' suite ['sonst' ':' suite]
for_stmt: FUER exprlist ('in'|'im') testlist ':' suite ['else' ':' suite]
try_stmt: ('versuche' ':' suite
           ((except_clause ':' suite)+
	    ['sonst' ':' suite]
	    ['schliesslich' ':' suite] |
	   'schliesslich' ':' suite))
with_stmt: 'mit' test [ with_var ] ':' suite
with_var: ('als' | NAME) expr

except_clause: 'ausser' [test [',' test]]
test: or_test ['wenn' or_test 'sonst' test] | lambdef
or_test: and_test ('oder' and_test)*
and_test: not_test ('und' not_test)*
not_test: 'nicht' not_test | comparison
comp_op: '<'|'>'|'=='|'>='|'<='|'<>'|'!='|'in'|'not' 'im'|'in'|'ist'|'ist' 'nicht'
classdef: 'klasse' NAME ['(' [testlist] ')'] ':' suite

list_for: FUER exprlist ('im'|'in') testlist_safe [list_iter]
list_if: 'wenn' old_test [list_iter]

gen_for: FUER exprlist ('im'|'in') or_test [gen_iter]
gen_if: 'wenn' old_test [gen_iter]

yield_expr: 'ergibt' [testlist]


