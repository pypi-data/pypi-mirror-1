# ______________________________________________________________________
# This was automatically generated by nfagen.py.
# Hack at your own risk.

# LANGLET OFFSET

LANGLET_OFFSET = 38912

# trail NFAs:

nfas = {39168: [['|', ['1', 38916], ['1', 39179], ['1', 39203, 38916]],
         'single_input: NEWLINE | simple_stmt | compound_stmt NEWLINE',
         (39168, 0, 39168),
         {(38916, 1, 39168): [(None, '-', 39168)],
          (38916, 4, 39168): [(None, '-', 39168)],
          (39168, 0, 39168): [(39179, 2, 39168),
                              (38916, 1, 39168),
                              (39203, 3, 39168)],
          (39179, 2, 39168): [(None, '-', 39168)],
          (39203, 3, 39168): [(38916, 4, 39168)]}],
 39169: [['1', ['*', ['|', ['1', 38916], ['1', 39178]]], 38912],
         'file_input: ( NEWLINE | stmt ) * ENDMARKER',
         (39169, 0, 39169),
         {(38912, 3, 39169): [(None, '-', 39169)],
          (38916, 1, 39169): [(38912, 3, 39169),
                              (38916, 1, 39169),
                              (39178, 2, 39169)],
          (39169, 0, 39169): [(38912, 3, 39169),
                              (38916, 1, 39169),
                              (39178, 2, 39169)],
          (39178, 2, 39169): [(38912, 3, 39169),
                              (38916, 1, 39169),
                              (39178, 2, 39169)]}],
 39170: [['1', 39238, ['*', 38916], 38912],
         'eval_input: testlist NEWLINE * ENDMARKER',
         (39170, 0, 39170),
         {(38912, 3, 39170): [(None, '-', 39170)],
          (38916, 2, 39170): [(38916, 2, 39170), (38912, 3, 39170)],
          (39170, 0, 39170): [(39238, 1, 39170)],
          (39238, 1, 39170): [(38916, 2, 39170), (38912, 3, 39170)]}],
 39171: [['1', 38962, 39199, ['?', 38919, ['?', 39241], 38920], 38916],
         "decorator: '@' dotted_name[ '(' [ arglist ] ')' ] NEWLINE",
         (39171, 0, 39171),
         {(38916, 6, 39171): [(None, '-', 39171)],
          (38919, 3, 39171): [(38920, 5, 39171), (39241, 4, 39171)],
          (38920, 5, 39171): [(38916, 6, 39171)],
          (38962, 1, 39171): [(39199, 2, 39171)],
          (39171, 0, 39171): [(38962, 1, 39171)],
          (39199, 2, 39171): [(38919, 3, 39171), (38916, 6, 39171)],
          (39241, 4, 39171): [(38920, 5, 39171)]}],
 39172: [['1', 39171, ['*', 39171]],
         'decorators: decorator +',
         (39172, 0, 39172),
         {(39171, 1, 39172): [(39171, 2, 39172), (None, '-', 39172)],
          (39171, 2, 39172): [(39171, 2, 39172), (None, '-', 39172)],
          (39172, 0, 39172): [(39171, 1, 39172)]}],
 39173: [['1', ['?', 39172], 'def', 38913, 39174, 38923, 39211],
         "funcdef: [ decorators ] 'def' NAME parameters ':' suite",
         (39173, 0, 39173),
         {(38913, 3, 39173): [(39174, 4, 39173)],
          (38923, 5, 39173): [(39211, 6, 39173)],
          (39172, 1, 39173): [('def', 2, 39173)],
          (39173, 0, 39173): [('def', 2, 39173), (39172, 1, 39173)],
          (39174, 4, 39173): [(38923, 5, 39173)],
          (39211, 6, 39173): [(None, '-', 39173)],
          ('def', 2, 39173): [(38913, 3, 39173)]}],
 39174: [['1', 38919, ['?', 39175], 38920],
         "parameters: '(' [ varargslist ] ')'",
         (39174, 0, 39174),
         {(38919, 1, 39174): [(38920, 3, 39174), (39175, 2, 39174)],
          (38920, 3, 39174): [(None, '-', 39174)],
          (39174, 0, 39174): [(38919, 1, 39174)],
          (39175, 2, 39174): [(38920, 3, 39174)]}],
 39175: [['|',
          ['1',
           ['*', 39176, ['?', 38934, 39215], 38924],
           ['|',
            ['1', 38928, 38913, ['?', 38924, 38948, 38913]],
            ['1', 38948, 38913]]],
          ['1',
           39176,
           ['?', 38934, 39215],
           ['*', 38924, 39176, ['?', 38934, 39215]],
           ['?', 38924]]],
         "varargslist: (( fpdef[ '=' test ] ',' ) * ( '*' NAME[ ',' '**' NAME ] | '**' NAME ) | fpdef[ '=' test ]( ',' fpdef[ '=' test ]) * [ ',' ])",
         (39175, 0, 39175),
         {(38913, 6, 39175): [(38924, 7, 39175), (None, '-', 39175)],
          (38913, 9, 39175): [(None, '-', 39175)],
          (38913, 11, 39175): [(None, '-', 39175)],
          (38924, 4, 39175): [(39176, 1, 39175),
                              (38948, 10, 39175),
                              (38928, 5, 39175)],
          (38924, 7, 39175): [(38948, 8, 39175)],
          (38924, 15, 39175): [(39176, 16, 39175)],
          (38924, 19, 39175): [(None, '-', 39175)],
          (38928, 5, 39175): [(38913, 6, 39175)],
          (38934, 2, 39175): [(39215, 3, 39175)],
          (38934, 13, 39175): [(39215, 14, 39175)],
          (38934, 17, 39175): [(39215, 18, 39175)],
          (38948, 8, 39175): [(38913, 9, 39175)],
          (38948, 10, 39175): [(38913, 11, 39175)],
          (39175, 0, 39175): [(39176, 1, 39175),
                              (38948, 10, 39175),
                              (38928, 5, 39175),
                              (39176, 12, 39175)],
          (39176, 1, 39175): [(38924, 4, 39175), (38934, 2, 39175)],
          (39176, 12, 39175): [(38924, 15, 39175),
                               (38934, 13, 39175),
                               (38924, 19, 39175),
                               (None, '-', 39175)],
          (39176, 16, 39175): [(38934, 17, 39175),
                               (38924, 15, 39175),
                               (38924, 19, 39175),
                               (None, '-', 39175)],
          (39215, 3, 39175): [(38924, 4, 39175)],
          (39215, 14, 39175): [(38924, 15, 39175),
                               (38924, 19, 39175),
                               (None, '-', 39175)],
          (39215, 18, 39175): [(38924, 15, 39175),
                               (38924, 19, 39175),
                               (None, '-', 39175)]}],
 39176: [['|', ['1', 38913], ['1', 38919, 39177, 38920]],
         "fpdef: NAME | '(' fplist ')'",
         (39176, 0, 39176),
         {(38913, 1, 39176): [(None, '-', 39176)],
          (38919, 2, 39176): [(39177, 3, 39176)],
          (38920, 4, 39176): [(None, '-', 39176)],
          (39176, 0, 39176): [(38913, 1, 39176), (38919, 2, 39176)],
          (39177, 3, 39176): [(38920, 4, 39176)]}],
 39177: [['1', 39176, ['*', 38924, 39176], ['?', 38924]],
         "fplist: fpdef( ',' fpdef ) * [ ',' ]",
         (39177, 0, 39177),
         {(38924, 2, 39177): [(39176, 3, 39177)],
          (38924, 4, 39177): [(None, '-', 39177)],
          (39176, 1, 39177): [(38924, 2, 39177),
                              (38924, 4, 39177),
                              (None, '-', 39177)],
          (39176, 3, 39177): [(38924, 2, 39177),
                              (38924, 4, 39177),
                              (None, '-', 39177)],
          (39177, 0, 39177): [(39176, 1, 39177)]}],
 39178: [['|', ['1', 39179], ['1', 39203]],
         'stmt: simple_stmt | compound_stmt',
         (39178, 0, 39178),
         {(39178, 0, 39178): [(39203, 2, 39178), (39179, 1, 39178)],
          (39179, 1, 39178): [(None, '-', 39178)],
          (39203, 2, 39178): [(None, '-', 39178)]}],
 39179: [['1', 39180, ['*', 38925, 39180], ['?', 38925], 38916],
         "simple_stmt: small_stmt( ';' small_stmt ) * [ ';' ] NEWLINE",
         (39179, 0, 39179),
         {(38916, 5, 39179): [(None, '-', 39179)],
          (38925, 2, 39179): [(39180, 3, 39179)],
          (38925, 4, 39179): [(38916, 5, 39179)],
          (39179, 0, 39179): [(39180, 1, 39179)],
          (39180, 1, 39179): [(38916, 5, 39179),
                              (38925, 4, 39179),
                              (38925, 2, 39179)],
          (39180, 3, 39179): [(38916, 5, 39179),
                              (38925, 4, 39179),
                              (38925, 2, 39179)]}],
 39180: [['|',
          ['1', 39181],
          ['1', 39183],
          ['1', 39184],
          ['1', 39185],
          ['1', 39186],
          ['1', 39192],
          ['1', 39200],
          ['1', 39201],
          ['1', 39202]],
         'small_stmt: ( expr_stmt | print_stmt | del_stmt | pass_stmt | flow_stmt | import_stmt | global_stmt | exec_stmt | assert_stmt )',
         (39180, 0, 39180),
         {(39180, 0, 39180): [(39181, 1, 39180),
                              (39202, 9, 39180),
                              (39183, 2, 39180),
                              (39192, 6, 39180),
                              (39184, 3, 39180),
                              (39200, 7, 39180),
                              (39201, 8, 39180),
                              (39186, 5, 39180),
                              (39185, 4, 39180)],
          (39181, 1, 39180): [(None, '-', 39180)],
          (39183, 2, 39180): [(None, '-', 39180)],
          (39184, 3, 39180): [(None, '-', 39180)],
          (39185, 4, 39180): [(None, '-', 39180)],
          (39186, 5, 39180): [(None, '-', 39180)],
          (39192, 6, 39180): [(None, '-', 39180)],
          (39200, 7, 39180): [(None, '-', 39180)],
          (39201, 8, 39180): [(None, '-', 39180)],
          (39202, 9, 39180): [(None, '-', 39180)]}],
 39181: [['1',
          39238,
          ['|',
           ['1', 39182, ['|', ['1', 39251], ['1', 39238]]],
           ['*', 38934, ['|', ['1', 39251], ['1', 39238]]]]],
         "expr_stmt: testlist( augassign( yield_expr | testlist ) | ( '=' ( yield_expr | testlist )) * )",
         (39181, 0, 39181),
         {(38934, 5, 39181): [(39238, 7, 39181), (39251, 6, 39181)],
          (39181, 0, 39181): [(39238, 1, 39181)],
          (39182, 2, 39181): [(39238, 4, 39181), (39251, 3, 39181)],
          (39238, 1, 39181): [(39182, 2, 39181),
                              (38934, 5, 39181),
                              (None, '-', 39181)],
          (39238, 4, 39181): [(None, '-', 39181)],
          (39238, 7, 39181): [(38934, 5, 39181), (None, '-', 39181)],
          (39251, 3, 39181): [(None, '-', 39181)],
          (39251, 6, 39181): [(38934, 5, 39181), (None, '-', 39181)]}],
 39182: [['|',
          ['1', 38949],
          ['1', 38950],
          ['1', 38951],
          ['1', 38952],
          ['1', 38953],
          ['1', 38954],
          ['1', 38955],
          ['1', 38956],
          ['1', 38957],
          ['1', 38958],
          ['1', 38959],
          ['1', 38961]],
         "augassign: ( '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '|=' | '^=' | '<<=' | '>>=' | '**=' | '//=' )",
         (39182, 0, 39182),
         {(38949, 1, 39182): [(None, '-', 39182)],
          (38950, 2, 39182): [(None, '-', 39182)],
          (38951, 3, 39182): [(None, '-', 39182)],
          (38952, 4, 39182): [(None, '-', 39182)],
          (38953, 5, 39182): [(None, '-', 39182)],
          (38954, 6, 39182): [(None, '-', 39182)],
          (38955, 7, 39182): [(None, '-', 39182)],
          (38956, 8, 39182): [(None, '-', 39182)],
          (38957, 9, 39182): [(None, '-', 39182)],
          (38958, 10, 39182): [(None, '-', 39182)],
          (38959, 11, 39182): [(None, '-', 39182)],
          (38961, 12, 39182): [(None, '-', 39182)],
          (39182, 0, 39182): [(38951, 3, 39182),
                              (38958, 10, 39182),
                              (38955, 7, 39182),
                              (38954, 6, 39182),
                              (38959, 11, 39182),
                              (38950, 2, 39182),
                              (38957, 9, 39182),
                              (38961, 12, 39182),
                              (38953, 5, 39182),
                              (38949, 1, 39182),
                              (38956, 8, 39182),
                              (38952, 4, 39182)]}],
 39183: [['1',
          'drucke',
          ['|',
           ['?', 39215, ['*', 38924, 39215], ['?', 38924]],
           ['1',
            38947,
            39215,
            ['?', ['1', 38924, 39215], ['*', 38924, 39215], ['?', 38924]]]]],
         "print_stmt: 'drucke' ([ test( ',' test ) * [ ',' ]] | '>>' test[( ',' test ) + [ ',' ]])",
         (39183, 0, 39183),
         {(38924, 3, 39183): [(39215, 4, 39183)],
          (38924, 5, 39183): [(None, '-', 39183)],
          (38924, 8, 39183): [(39215, 9, 39183)],
          (38924, 10, 39183): [(39215, 11, 39183)],
          (38924, 12, 39183): [(None, '-', 39183)],
          (38947, 6, 39183): [(39215, 7, 39183)],
          (39183, 0, 39183): [('drucke', 1, 39183)],
          (39215, 2, 39183): [(38924, 5, 39183),
                              (38924, 3, 39183),
                              (None, '-', 39183)],
          (39215, 4, 39183): [(38924, 5, 39183),
                              (38924, 3, 39183),
                              (None, '-', 39183)],
          (39215, 7, 39183): [(None, '-', 39183), (38924, 8, 39183)],
          (39215, 9, 39183): [(38924, 10, 39183),
                              (38924, 12, 39183),
                              (None, '-', 39183)],
          (39215, 11, 39183): [(38924, 10, 39183),
                               (38924, 12, 39183),
                               (None, '-', 39183)],
          ('drucke', 1, 39183): [(38947, 6, 39183),
                                 (39215, 2, 39183),
                                 (None, '-', 39183)]}],
 39184: [['1', 'entf', 39237],
         "del_stmt: 'entf' exprlist",
         (39184, 0, 39184),
         {(39184, 0, 39184): [('entf', 1, 39184)],
          (39237, 2, 39184): [(None, '-', 39184)],
          ('entf', 1, 39184): [(39237, 2, 39184)]}],
 39185: [['1', 'pass'],
         "pass_stmt: 'pass'",
         (39185, 0, 39185),
         {(39185, 0, 39185): [('pass', 1, 39185)],
          ('pass', 1, 39185): [(None, '-', 39185)]}],
 39186: [['|',
          ['1', 39187],
          ['1', 39188],
          ['1', 39189],
          ['1', 39191],
          ['1', 39190]],
         'flow_stmt: break_stmt | continue_stmt | return_stmt | raise_stmt | yield_stmt',
         (39186, 0, 39186),
         {(39186, 0, 39186): [(39191, 4, 39186),
                              (39188, 2, 39186),
                              (39187, 1, 39186),
                              (39190, 5, 39186),
                              (39189, 3, 39186)],
          (39187, 1, 39186): [(None, '-', 39186)],
          (39188, 2, 39186): [(None, '-', 39186)],
          (39189, 3, 39186): [(None, '-', 39186)],
          (39190, 5, 39186): [(None, '-', 39186)],
          (39191, 4, 39186): [(None, '-', 39186)]}],
 39187: [['1', 'abbrechen'],
         "break_stmt: 'abbrechen'",
         (39187, 0, 39187),
         {(39187, 0, 39187): [('abbrechen', 1, 39187)],
          ('abbrechen', 1, 39187): [(None, '-', 39187)]}],
 39188: [['1', 'weiter'],
         "continue_stmt: 'weiter'",
         (39188, 0, 39188),
         {(39188, 0, 39188): [('weiter', 1, 39188)],
          ('weiter', 1, 39188): [(None, '-', 39188)]}],
 39189: [['1', 39001, ['?', 39238]],
         'return_stmt: ZURUECK[ testlist ]',
         (39189, 0, 39189),
         {(39001, 1, 39189): [(39238, 2, 39189), (None, '-', 39189)],
          (39189, 0, 39189): [(39001, 1, 39189)],
          (39238, 2, 39189): [(None, '-', 39189)]}],
 39190: [['1', 39251],
         'yield_stmt: yield_expr',
         (39190, 0, 39190),
         {(39190, 0, 39190): [(39251, 1, 39190)],
          (39251, 1, 39190): [(None, '-', 39190)]}],
 39191: [['1',
          'behandle',
          ['?', 39215, ['?', 38924, 39215, ['?', 38924, 39215]]]],
         "raise_stmt: 'behandle' [ test[ ',' test[ ',' test ]]]",
         (39191, 0, 39191),
         {(38924, 3, 39191): [(39215, 4, 39191)],
          (38924, 5, 39191): [(39215, 6, 39191)],
          (39191, 0, 39191): [('behandle', 1, 39191)],
          (39215, 2, 39191): [(38924, 3, 39191), (None, '-', 39191)],
          (39215, 4, 39191): [(38924, 5, 39191), (None, '-', 39191)],
          (39215, 6, 39191): [(None, '-', 39191)],
          ('behandle', 1, 39191): [(39215, 2, 39191), (None, '-', 39191)]}],
 39192: [['|', ['1', 39193], ['1', 39194]],
         'import_stmt: import_name | import_from',
         (39192, 0, 39192),
         {(39192, 0, 39192): [(39193, 1, 39192), (39194, 2, 39192)],
          (39193, 1, 39192): [(None, '-', 39192)],
          (39194, 2, 39192): [(None, '-', 39192)]}],
 39193: [['1', 'import', 39198],
         "import_name: 'import' dotted_as_names",
         (39193, 0, 39193),
         {(39193, 0, 39193): [('import', 1, 39193)],
          (39198, 2, 39193): [(None, '-', 39193)],
          ('import', 1, 39193): [(39198, 2, 39193)]}],
 39194: [['1',
          'von',
          ['|', ['1', ['*', 38935], 39199], ['1', 38935, ['*', 38935]]],
          'import',
          ['|', ['1', 38928], ['1', 38919, 39197, 38920], ['1', 39197]]],
         "import_from: ( 'von' ( '.' * dotted_name | '.' + ) 'import' ( '*' | '(' import_as_names ')' | import_as_names ))",
         (39194, 0, 39194),
         {(38919, 8, 39194): [(39197, 9, 39194)],
          (38920, 10, 39194): [(None, '-', 39194)],
          (38928, 7, 39194): [(None, '-', 39194)],
          (38935, 2, 39194): [(39199, 3, 39194), (38935, 2, 39194)],
          (38935, 4, 39194): [(38935, 5, 39194), ('import', 6, 39194)],
          (38935, 5, 39194): [(38935, 5, 39194), ('import', 6, 39194)],
          (39194, 0, 39194): [('von', 1, 39194)],
          (39197, 9, 39194): [(38920, 10, 39194)],
          (39197, 11, 39194): [(None, '-', 39194)],
          (39199, 3, 39194): [('import', 6, 39194)],
          ('import', 6, 39194): [(38919, 8, 39194),
                                 (38928, 7, 39194),
                                 (39197, 11, 39194)],
          ('von', 1, 39194): [(38935, 4, 39194),
                              (39199, 3, 39194),
                              (38935, 2, 39194)]}],
 39195: [['1', 38913, ['?', ['|', ['1', 'as'], ['1', 38913]], 38913]],
         "import_as_name: NAME[( 'as' | NAME ) NAME ]",
         (39195, 0, 39195),
         {(38913, 1, 39195): [(38913, 3, 39195),
                              (None, '-', 39195),
                              ('as', 2, 39195)],
          (38913, 3, 39195): [(38913, 4, 39195)],
          (38913, 4, 39195): [(None, '-', 39195)],
          (39195, 0, 39195): [(38913, 1, 39195)],
          ('as', 2, 39195): [(38913, 4, 39195)]}],
 39196: [['1', 39199, ['?', ['|', ['1', 'as'], ['1', 38913]], 38913]],
         "dotted_as_name: dotted_name[( 'as' | NAME ) NAME ]",
         (39196, 0, 39196),
         {(38913, 3, 39196): [(38913, 4, 39196)],
          (38913, 4, 39196): [(None, '-', 39196)],
          (39196, 0, 39196): [(39199, 1, 39196)],
          (39199, 1, 39196): [(38913, 3, 39196),
                              (None, '-', 39196),
                              ('as', 2, 39196)],
          ('as', 2, 39196): [(38913, 4, 39196)]}],
 39197: [['1', 39195, ['*', 38924, 39195], ['?', 38924]],
         "import_as_names: import_as_name( ',' import_as_name ) * [ ',' ]",
         (39197, 0, 39197),
         {(38924, 2, 39197): [(39195, 3, 39197)],
          (38924, 4, 39197): [(None, '-', 39197)],
          (39195, 1, 39197): [(38924, 2, 39197),
                              (38924, 4, 39197),
                              (None, '-', 39197)],
          (39195, 3, 39197): [(38924, 2, 39197),
                              (38924, 4, 39197),
                              (None, '-', 39197)],
          (39197, 0, 39197): [(39195, 1, 39197)]}],
 39198: [['1', 39196, ['*', 38924, 39196]],
         "dotted_as_names: dotted_as_name( ',' dotted_as_name ) *",
         (39198, 0, 39198),
         {(38924, 2, 39198): [(39196, 3, 39198)],
          (39196, 1, 39198): [(38924, 2, 39198), (None, '-', 39198)],
          (39196, 3, 39198): [(38924, 2, 39198), (None, '-', 39198)],
          (39198, 0, 39198): [(39196, 1, 39198)]}],
 39199: [['1', 38913, ['*', 38935, 38913]],
         "dotted_name: NAME( '.' NAME ) *",
         (39199, 0, 39199),
         {(38913, 1, 39199): [(38935, 2, 39199), (None, '-', 39199)],
          (38913, 3, 39199): [(38935, 2, 39199), (None, '-', 39199)],
          (38935, 2, 39199): [(38913, 3, 39199)],
          (39199, 0, 39199): [(38913, 1, 39199)]}],
 39200: [['1', 'global', 38913, ['*', 38924, 38913]],
         "global_stmt: 'global' NAME( ',' NAME ) *",
         (39200, 0, 39200),
         {(38913, 2, 39200): [(38924, 3, 39200), (None, '-', 39200)],
          (38913, 4, 39200): [(38924, 3, 39200), (None, '-', 39200)],
          (38924, 3, 39200): [(38913, 4, 39200)],
          (39200, 0, 39200): [('global', 1, 39200)],
          ('global', 1, 39200): [(38913, 2, 39200)]}],
 39201: [['1',
          ['|', ['1', 'ausfuehren'], ['1', 39000]],
          39221,
          ['?', 'in', 39215, ['?', 38924, 39215]]],
         "exec_stmt: ( 'ausfuehren' | AUSFUEHREN ) expr[ 'in' test[ ',' test ]]",
         (39201, 0, 39201),
         {(38924, 6, 39201): [(39215, 7, 39201)],
          (39000, 2, 39201): [(39221, 3, 39201)],
          (39201, 0, 39201): [('ausfuehren', 1, 39201), (39000, 2, 39201)],
          (39215, 5, 39201): [(38924, 6, 39201), (None, '-', 39201)],
          (39215, 7, 39201): [(None, '-', 39201)],
          (39221, 3, 39201): [('in', 4, 39201), (None, '-', 39201)],
          ('ausfuehren', 1, 39201): [(39221, 3, 39201)],
          ('in', 4, 39201): [(39215, 5, 39201)]}],
 39202: [['1', 'behaupte', 39215, ['?', 38924, 39215]],
         "assert_stmt: 'behaupte' test[ ',' test ]",
         (39202, 0, 39202),
         {(38924, 3, 39202): [(39215, 4, 39202)],
          (39202, 0, 39202): [('behaupte', 1, 39202)],
          (39215, 2, 39202): [(38924, 3, 39202), (None, '-', 39202)],
          (39215, 4, 39202): [(None, '-', 39202)],
          ('behaupte', 1, 39202): [(39215, 2, 39202)]}],
 39203: [['|',
          ['1', 39204],
          ['1', 39205],
          ['1', 39206],
          ['1', 39207],
          ['1', 39208],
          ['1', 39173],
          ['1', 39240]],
         'compound_stmt: if_stmt | while_stmt | for_stmt | try_stmt | with_stmt | funcdef | classdef',
         (39203, 0, 39203),
         {(39173, 6, 39203): [(None, '-', 39203)],
          (39203, 0, 39203): [(39207, 4, 39203),
                              (39173, 6, 39203),
                              (39204, 1, 39203),
                              (39208, 5, 39203),
                              (39206, 3, 39203),
                              (39240, 7, 39203),
                              (39205, 2, 39203)],
          (39204, 1, 39203): [(None, '-', 39203)],
          (39205, 2, 39203): [(None, '-', 39203)],
          (39206, 3, 39203): [(None, '-', 39203)],
          (39207, 4, 39203): [(None, '-', 39203)],
          (39208, 5, 39203): [(None, '-', 39203)],
          (39240, 7, 39203): [(None, '-', 39203)]}],
 39204: [['1',
          'wenn',
          39215,
          38923,
          39211,
          ['*', 'wennsonst', 39215, 38923, 39211],
          ['?', 'sonst', 38923, 39211]],
         "if_stmt: 'wenn' test ':' suite( 'wennsonst' test ':' suite ) * [ 'sonst' ':' suite ]",
         (39204, 0, 39204),
         {(38923, 3, 39204): [(39211, 4, 39204)],
          (38923, 7, 39204): [(39211, 8, 39204)],
          (38923, 10, 39204): [(39211, 11, 39204)],
          (39204, 0, 39204): [('wenn', 1, 39204)],
          (39211, 4, 39204): [('wennsonst', 5, 39204),
                              ('sonst', 9, 39204),
                              (None, '-', 39204)],
          (39211, 8, 39204): [('wennsonst', 5, 39204),
                              ('sonst', 9, 39204),
                              (None, '-', 39204)],
          (39211, 11, 39204): [(None, '-', 39204)],
          (39215, 2, 39204): [(38923, 3, 39204)],
          (39215, 6, 39204): [(38923, 7, 39204)],
          ('sonst', 9, 39204): [(38923, 10, 39204)],
          ('wenn', 1, 39204): [(39215, 2, 39204)],
          ('wennsonst', 5, 39204): [(39215, 6, 39204)]}],
 39205: [['1', 'solange', 39215, 38923, 39211, ['?', 'sonst', 38923, 39211]],
         "while_stmt: 'solange' test ':' suite[ 'sonst' ':' suite ]",
         (39205, 0, 39205),
         {(38923, 3, 39205): [(39211, 4, 39205)],
          (38923, 6, 39205): [(39211, 7, 39205)],
          (39205, 0, 39205): [('solange', 1, 39205)],
          (39211, 4, 39205): [('sonst', 5, 39205), (None, '-', 39205)],
          (39211, 7, 39205): [(None, '-', 39205)],
          (39215, 2, 39205): [(38923, 3, 39205)],
          ('solange', 1, 39205): [(39215, 2, 39205)],
          ('sonst', 5, 39205): [(38923, 6, 39205)]}],
 39206: [['1',
          39002,
          39237,
          ['|', ['1', 'in'], ['1', 'im']],
          39238,
          38923,
          39211,
          ['?', 'else', 38923, 39211]],
         "for_stmt: FUER exprlist( 'in' | 'im' ) testlist ':' suite[ 'else' ':' suite ]",
         (39206, 0, 39206),
         {(38923, 6, 39206): [(39211, 7, 39206)],
          (38923, 9, 39206): [(39211, 10, 39206)],
          (39002, 1, 39206): [(39237, 2, 39206)],
          (39206, 0, 39206): [(39002, 1, 39206)],
          (39211, 7, 39206): [('else', 8, 39206), (None, '-', 39206)],
          (39211, 10, 39206): [(None, '-', 39206)],
          (39237, 2, 39206): [('in', 3, 39206), ('im', 4, 39206)],
          (39238, 5, 39206): [(38923, 6, 39206)],
          ('else', 8, 39206): [(38923, 9, 39206)],
          ('im', 4, 39206): [(39238, 5, 39206)],
          ('in', 3, 39206): [(39238, 5, 39206)]}],
 39207: [['1',
          'versuche',
          38923,
          39211,
          ['|',
           ['1',
            ['1', 39210, 38923, 39211],
            ['*', 39210, 38923, 39211],
            ['?', 'sonst', 38923, 39211],
            ['?', 'schliesslich', 38923, 39211]],
           ['1', 'schliesslich', 38923, 39211]]],
         "try_stmt: ( 'versuche' ':' suite(( except_clause ':' suite ) + [ 'sonst' ':' suite ][ 'schliesslich' ':' suite ] | 'schliesslich' ':' suite ))",
         (39207, 0, 39207),
         {(38923, 2, 39207): [(39211, 3, 39207)],
          (38923, 5, 39207): [(39211, 6, 39207)],
          (38923, 8, 39207): [(39211, 9, 39207)],
          (38923, 11, 39207): [(39211, 12, 39207)],
          (38923, 14, 39207): [(39211, 15, 39207)],
          (38923, 17, 39207): [(39211, 18, 39207)],
          (39207, 0, 39207): [('versuche', 1, 39207)],
          (39210, 4, 39207): [(38923, 5, 39207)],
          (39210, 7, 39207): [(38923, 8, 39207)],
          (39211, 3, 39207): [('schliesslich', 16, 39207),
                              (39210, 4, 39207)],
          (39211, 6, 39207): [(39210, 7, 39207),
                              ('sonst', 10, 39207),
                              ('schliesslich', 13, 39207),
                              (None, '-', 39207)],
          (39211, 9, 39207): [(39210, 7, 39207),
                              ('sonst', 10, 39207),
                              ('schliesslich', 13, 39207),
                              (None, '-', 39207)],
          (39211, 12, 39207): [('schliesslich', 13, 39207),
                               (None, '-', 39207)],
          (39211, 15, 39207): [(None, '-', 39207)],
          (39211, 18, 39207): [(None, '-', 39207)],
          ('schliesslich', 13, 39207): [(38923, 14, 39207)],
          ('schliesslich', 16, 39207): [(38923, 17, 39207)],
          ('sonst', 10, 39207): [(38923, 11, 39207)],
          ('versuche', 1, 39207): [(38923, 2, 39207)]}],
 39208: [['1', 'mit', 39215, ['?', 39209], 38923, 39211],
         "with_stmt: 'mit' test[ with_var ] ':' suite",
         (39208, 0, 39208),
         {(38923, 4, 39208): [(39211, 5, 39208)],
          (39208, 0, 39208): [('mit', 1, 39208)],
          (39209, 3, 39208): [(38923, 4, 39208)],
          (39211, 5, 39208): [(None, '-', 39208)],
          (39215, 2, 39208): [(39209, 3, 39208), (38923, 4, 39208)],
          ('mit', 1, 39208): [(39215, 2, 39208)]}],
 39209: [['1', ['|', ['1', 'als'], ['1', 38913]], 39221],
         "with_var: ( 'als' | NAME ) expr",
         (39209, 0, 39209),
         {(38913, 2, 39209): [(39221, 3, 39209)],
          (39209, 0, 39209): [(38913, 2, 39209), ('als', 1, 39209)],
          (39221, 3, 39209): [(None, '-', 39209)],
          ('als', 1, 39209): [(39221, 3, 39209)]}],
 39210: [['1', 'ausser', ['?', 39215, ['?', 38924, 39215]]],
         "except_clause: 'ausser' [ test[ ',' test ]]",
         (39210, 0, 39210),
         {(38924, 3, 39210): [(39215, 4, 39210)],
          (39210, 0, 39210): [('ausser', 1, 39210)],
          (39215, 2, 39210): [(38924, 3, 39210), (None, '-', 39210)],
          (39215, 4, 39210): [(None, '-', 39210)],
          ('ausser', 1, 39210): [(39215, 2, 39210), (None, '-', 39210)]}],
 39211: [['|', ['1', 39179], ['1', 38916, 38917, 39178, ['*', 39178], 38918]],
         'suite: simple_stmt | NEWLINE INDENT stmt + DEDENT',
         (39211, 0, 39211),
         {(38916, 2, 39211): [(38917, 3, 39211)],
          (38917, 3, 39211): [(39178, 4, 39211)],
          (38918, 6, 39211): [(None, '-', 39211)],
          (39178, 4, 39211): [(39178, 5, 39211), (38918, 6, 39211)],
          (39178, 5, 39211): [(39178, 5, 39211), (38918, 6, 39211)],
          (39179, 1, 39211): [(None, '-', 39211)],
          (39211, 0, 39211): [(38916, 2, 39211), (39179, 1, 39211)]}],
 39212: [['1',
          39213,
          ['?', ['1', 38924, 39213], ['*', 38924, 39213], ['?', 38924]]],
         "testlist_safe: old_test[( ',' old_test ) + [ ',' ]]",
         (39212, 0, 39212),
         {(38924, 2, 39212): [(39213, 3, 39212)],
          (38924, 4, 39212): [(39213, 5, 39212)],
          (38924, 6, 39212): [(None, '-', 39212)],
          (39212, 0, 39212): [(39213, 1, 39212)],
          (39213, 1, 39212): [(38924, 2, 39212), (None, '-', 39212)],
          (39213, 3, 39212): [(38924, 4, 39212),
                              (38924, 6, 39212),
                              (None, '-', 39212)],
          (39213, 5, 39212): [(38924, 4, 39212),
                              (38924, 6, 39212),
                              (None, '-', 39212)]}],
 39213: [['|', ['1', 39216], ['1', 39214]],
         'old_test: or_test | old_lambdef',
         (39213, 0, 39213),
         {(39213, 0, 39213): [(39216, 1, 39213), (39214, 2, 39213)],
          (39214, 2, 39213): [(None, '-', 39213)],
          (39216, 1, 39213): [(None, '-', 39213)]}],
 39214: [['1', 'lambda', ['?', 39175], 38923, 39213],
         "old_lambdef: 'lambda' [ varargslist ] ':' old_test",
         (39214, 0, 39214),
         {(38923, 3, 39214): [(39213, 4, 39214)],
          (39175, 2, 39214): [(38923, 3, 39214)],
          (39213, 4, 39214): [(None, '-', 39214)],
          (39214, 0, 39214): [('lambda', 1, 39214)],
          ('lambda', 1, 39214): [(38923, 3, 39214), (39175, 2, 39214)]}],
 39215: [['|',
          ['1', 39216, ['?', 'wenn', 39216, 'sonst', 39215]],
          ['1', 39232]],
         "test: or_test[ 'wenn' or_test 'sonst' test ] | lambdef",
         (39215, 0, 39215),
         {(39215, 0, 39215): [(39216, 1, 39215), (39232, 6, 39215)],
          (39215, 5, 39215): [(None, '-', 39215)],
          (39216, 1, 39215): [('wenn', 2, 39215), (None, '-', 39215)],
          (39216, 3, 39215): [('sonst', 4, 39215)],
          (39232, 6, 39215): [(None, '-', 39215)],
          ('sonst', 4, 39215): [(39215, 5, 39215)],
          ('wenn', 2, 39215): [(39216, 3, 39215)]}],
 39216: [['1', 39217, ['*', 'oder', 39217]],
         "or_test: and_test( 'oder' and_test ) *",
         (39216, 0, 39216),
         {(39216, 0, 39216): [(39217, 1, 39216)],
          (39217, 1, 39216): [('oder', 2, 39216), (None, '-', 39216)],
          (39217, 3, 39216): [('oder', 2, 39216), (None, '-', 39216)],
          ('oder', 2, 39216): [(39217, 3, 39216)]}],
 39217: [['1', 39218, ['*', 'und', 39218]],
         "and_test: not_test( 'und' not_test ) *",
         (39217, 0, 39217),
         {(39217, 0, 39217): [(39218, 1, 39217)],
          (39218, 1, 39217): [('und', 2, 39217), (None, '-', 39217)],
          (39218, 3, 39217): [('und', 2, 39217), (None, '-', 39217)],
          ('und', 2, 39217): [(39218, 3, 39217)]}],
 39218: [['|', ['1', 'nicht', 39218], ['1', 39219]],
         "not_test: 'nicht' not_test | comparison",
         (39218, 0, 39218),
         {(39218, 0, 39218): [('nicht', 1, 39218), (39219, 3, 39218)],
          (39218, 2, 39218): [(None, '-', 39218)],
          (39219, 3, 39218): [(None, '-', 39218)],
          ('nicht', 1, 39218): [(39218, 2, 39218)]}],
 39219: [['1', 39221, ['*', 39220, 39221]],
         'comparison: expr( comp_op expr ) *',
         (39219, 0, 39219),
         {(39219, 0, 39219): [(39221, 1, 39219)],
          (39220, 2, 39219): [(39221, 3, 39219)],
          (39221, 1, 39219): [(39220, 2, 39219), (None, '-', 39219)],
          (39221, 3, 39219): [(39220, 2, 39219), (None, '-', 39219)]}],
 39220: [['|',
          ['1', 38932],
          ['1', 38933],
          ['1', 38940],
          ['1', 38943],
          ['1', 38942],
          ['1', '<>'],
          ['1', 38941],
          ['1', 'in'],
          ['1', 'not', 'im'],
          ['1', 'in'],
          ['1', 'ist'],
          ['1', 'ist', 'nicht']],
         "comp_op: '<' | '>' | '==' | '>=' | '<=' | '<>' | '!=' | 'in' | 'not' 'im' | 'in' | 'ist' | 'ist' 'nicht'",
         (39220, 0, 39220),
         {(38932, 1, 39220): [(None, '-', 39220)],
          (38933, 2, 39220): [(None, '-', 39220)],
          (38940, 3, 39220): [(None, '-', 39220)],
          (38941, 7, 39220): [(None, '-', 39220)],
          (38942, 5, 39220): [(None, '-', 39220)],
          (38943, 4, 39220): [(None, '-', 39220)],
          (39220, 0, 39220): [('not', 9, 39220),
                              ('ist', 12, 39220),
                              (38941, 7, 39220),
                              (38943, 4, 39220),
                              (38932, 1, 39220),
                              ('in', 8, 39220),
                              (38933, 2, 39220),
                              (38940, 3, 39220),
                              ('ist', 13, 39220),
                              (38942, 5, 39220),
                              ('in', 11, 39220),
                              ('<>', 6, 39220)],
          ('<>', 6, 39220): [(None, '-', 39220)],
          ('im', 10, 39220): [(None, '-', 39220)],
          ('in', 8, 39220): [(None, '-', 39220)],
          ('in', 11, 39220): [(None, '-', 39220)],
          ('ist', 12, 39220): [(None, '-', 39220)],
          ('ist', 13, 39220): [('nicht', 14, 39220)],
          ('nicht', 14, 39220): [(None, '-', 39220)],
          ('not', 9, 39220): [('im', 10, 39220)]}],
 39221: [['1', 39222, ['*', 38930, 39222]],
         "expr: xor_expr( '|' xor_expr ) *",
         (39221, 0, 39221),
         {(38930, 2, 39221): [(39222, 3, 39221)],
          (39221, 0, 39221): [(39222, 1, 39221)],
          (39222, 1, 39221): [(None, '-', 39221), (38930, 2, 39221)],
          (39222, 3, 39221): [(38930, 2, 39221), (None, '-', 39221)]}],
 39222: [['1', 39223, ['*', 38945, 39223]],
         "xor_expr: and_expr( '^' and_expr ) *",
         (39222, 0, 39222),
         {(38945, 2, 39222): [(39223, 3, 39222)],
          (39222, 0, 39222): [(39223, 1, 39222)],
          (39223, 1, 39222): [(38945, 2, 39222), (None, '-', 39222)],
          (39223, 3, 39222): [(38945, 2, 39222), (None, '-', 39222)]}],
 39223: [['1', 39224, ['*', 38931, 39224]],
         "and_expr: shift_expr( '&' shift_expr ) *",
         (39223, 0, 39223),
         {(38931, 2, 39223): [(39224, 3, 39223)],
          (39223, 0, 39223): [(39224, 1, 39223)],
          (39224, 1, 39223): [(38931, 2, 39223), (None, '-', 39223)],
          (39224, 3, 39223): [(38931, 2, 39223), (None, '-', 39223)]}],
 39224: [['1', 39225, ['*', ['|', ['1', 38946], ['1', 38947]], 39225]],
         "shift_expr: arith_expr(( '<<' | '>>' ) arith_expr ) *",
         (39224, 0, 39224),
         {(38946, 2, 39224): [(39225, 4, 39224)],
          (38947, 3, 39224): [(39225, 4, 39224)],
          (39224, 0, 39224): [(39225, 1, 39224)],
          (39225, 1, 39224): [(None, '-', 39224),
                              (38947, 3, 39224),
                              (38946, 2, 39224)],
          (39225, 4, 39224): [(38946, 2, 39224),
                              (38947, 3, 39224),
                              (None, '-', 39224)]}],
 39225: [['1', 39226, ['*', ['|', ['1', 38926], ['1', 38927]], 39226]],
         "arith_expr: term(( '+' | '-' ) term ) *",
         (39225, 0, 39225),
         {(38926, 2, 39225): [(39226, 4, 39225)],
          (38927, 3, 39225): [(39226, 4, 39225)],
          (39225, 0, 39225): [(39226, 1, 39225)],
          (39226, 1, 39225): [(38927, 3, 39225),
                              (38926, 2, 39225),
                              (None, '-', 39225)],
          (39226, 4, 39225): [(38927, 3, 39225),
                              (38926, 2, 39225),
                              (None, '-', 39225)]}],
 39226: [['1',
          39227,
          ['*',
           ['|', ['1', 38928], ['1', 38929], ['1', 38936], ['1', 38960]],
           39227]],
         "term: factor(( '*' | '/' | '%' | '//' ) factor ) *",
         (39226, 0, 39226),
         {(38928, 2, 39226): [(39227, 6, 39226)],
          (38929, 3, 39226): [(39227, 6, 39226)],
          (38936, 4, 39226): [(39227, 6, 39226)],
          (38960, 5, 39226): [(39227, 6, 39226)],
          (39226, 0, 39226): [(39227, 1, 39226)],
          (39227, 1, 39226): [(38929, 3, 39226),
                              (38960, 5, 39226),
                              (38928, 2, 39226),
                              (None, '-', 39226),
                              (38936, 4, 39226)],
          (39227, 6, 39226): [(38936, 4, 39226),
                              (38929, 3, 39226),
                              (38960, 5, 39226),
                              (38928, 2, 39226),
                              (None, '-', 39226)]}],
 39227: [['|',
          ['1', ['|', ['1', 38926], ['1', 38927], ['1', 38944]], 39227],
          ['1', 39228]],
         "factor: ( '+' | '-' | '~' ) factor | power",
         (39227, 0, 39227),
         {(38926, 1, 39227): [(39227, 4, 39227)],
          (38927, 2, 39227): [(39227, 4, 39227)],
          (38944, 3, 39227): [(39227, 4, 39227)],
          (39227, 0, 39227): [(39228, 5, 39227),
                              (38926, 1, 39227),
                              (38944, 3, 39227),
                              (38927, 2, 39227)],
          (39227, 4, 39227): [(None, '-', 39227)],
          (39228, 5, 39227): [(None, '-', 39227)]}],
 39228: [['1', 39229, ['*', 39233], ['?', 38948, 39227]],
         "power: atom trailer * [ '**' factor ]",
         (39228, 0, 39228),
         {(38948, 3, 39228): [(39227, 4, 39228)],
          (39227, 4, 39228): [(None, '-', 39228)],
          (39228, 0, 39228): [(39229, 1, 39228)],
          (39229, 1, 39228): [(39233, 2, 39228),
                              (38948, 3, 39228),
                              (None, '-', 39228)],
          (39233, 2, 39228): [(39233, 2, 39228),
                              (38948, 3, 39228),
                              (None, '-', 39228)]}],
 39229: [['|',
          ['1', 38919, ['?', ['|', ['1', 39251], ['1', 39231]]], 38920],
          ['1', 38921, ['?', 39230], 38922],
          ['1', 38938, ['?', 39239], 38939],
          ['1', 38937, 39249, 38937],
          ['1', 38913],
          ['1', 38914],
          ['1', 38915, ['*', 38915]]],
         "atom: ( '(' [ yield_expr | testlist_gexp ] ')' | '[' [ listmaker ] ']' | '{' [ dictmaker ] '}' | '`' testlist1 '`' | NAME | NUMBER | STRING + )",
         (39229, 0, 39229),
         {(38913, 14, 39229): [(None, '-', 39229)],
          (38914, 15, 39229): [(None, '-', 39229)],
          (38915, 16, 39229): [(38915, 17, 39229), (None, '-', 39229)],
          (38915, 17, 39229): [(38915, 17, 39229), (None, '-', 39229)],
          (38919, 1, 39229): [(39231, 3, 39229),
                              (39251, 2, 39229),
                              (38920, 4, 39229)],
          (38920, 4, 39229): [(None, '-', 39229)],
          (38921, 5, 39229): [(38922, 7, 39229), (39230, 6, 39229)],
          (38922, 7, 39229): [(None, '-', 39229)],
          (38937, 11, 39229): [(39249, 12, 39229)],
          (38937, 13, 39229): [(None, '-', 39229)],
          (38938, 8, 39229): [(38939, 10, 39229), (39239, 9, 39229)],
          (38939, 10, 39229): [(None, '-', 39229)],
          (39229, 0, 39229): [(38937, 11, 39229),
                              (38919, 1, 39229),
                              (38913, 14, 39229),
                              (38938, 8, 39229),
                              (38914, 15, 39229),
                              (38921, 5, 39229),
                              (38915, 16, 39229)],
          (39230, 6, 39229): [(38922, 7, 39229)],
          (39231, 3, 39229): [(38920, 4, 39229)],
          (39239, 9, 39229): [(38939, 10, 39229)],
          (39249, 12, 39229): [(38937, 13, 39229)],
          (39251, 2, 39229): [(38920, 4, 39229)]}],
 39230: [['1',
          39215,
          ['|', ['1', 39244], ['1', ['*', 38924, 39215], ['?', 38924]]]],
         "listmaker: test( list_for | ( ',' test ) * [ ',' ])",
         (39230, 0, 39230),
         {(38924, 3, 39230): [(39215, 4, 39230)],
          (38924, 5, 39230): [(None, '-', 39230)],
          (39215, 1, 39230): [(38924, 5, 39230),
                              (39244, 2, 39230),
                              (38924, 3, 39230),
                              (None, '-', 39230)],
          (39215, 4, 39230): [(38924, 5, 39230),
                              (38924, 3, 39230),
                              (None, '-', 39230)],
          (39230, 0, 39230): [(39215, 1, 39230)],
          (39244, 2, 39230): [(None, '-', 39230)]}],
 39231: [['1',
          39215,
          ['|', ['1', 39247], ['1', ['*', 38924, 39215], ['?', 38924]]]],
         "testlist_gexp: test( gen_for | ( ',' test ) * [ ',' ])",
         (39231, 0, 39231),
         {(38924, 3, 39231): [(39215, 4, 39231)],
          (38924, 5, 39231): [(None, '-', 39231)],
          (39215, 1, 39231): [(38924, 5, 39231),
                              (39247, 2, 39231),
                              (38924, 3, 39231),
                              (None, '-', 39231)],
          (39215, 4, 39231): [(38924, 5, 39231),
                              (38924, 3, 39231),
                              (None, '-', 39231)],
          (39231, 0, 39231): [(39215, 1, 39231)],
          (39247, 2, 39231): [(None, '-', 39231)]}],
 39232: [['1', 'lambda', ['?', 39175], 38923, 39215],
         "lambdef: 'lambda' [ varargslist ] ':' test",
         (39232, 0, 39232),
         {(38923, 3, 39232): [(39215, 4, 39232)],
          (39175, 2, 39232): [(38923, 3, 39232)],
          (39215, 4, 39232): [(None, '-', 39232)],
          (39232, 0, 39232): [('lambda', 1, 39232)],
          ('lambda', 1, 39232): [(38923, 3, 39232), (39175, 2, 39232)]}],
 39233: [['|',
          ['1', 38919, ['?', 39241], 38920],
          ['1', 38921, 39234, 38922],
          ['1', 38935, 38913]],
         "trailer: '(' [ arglist ] ')' | '[' subscriptlist ']' | '.' NAME",
         (39233, 0, 39233),
         {(38913, 8, 39233): [(None, '-', 39233)],
          (38919, 1, 39233): [(39241, 2, 39233), (38920, 3, 39233)],
          (38920, 3, 39233): [(None, '-', 39233)],
          (38921, 4, 39233): [(39234, 5, 39233)],
          (38922, 6, 39233): [(None, '-', 39233)],
          (38935, 7, 39233): [(38913, 8, 39233)],
          (39233, 0, 39233): [(38935, 7, 39233),
                              (38921, 4, 39233),
                              (38919, 1, 39233)],
          (39234, 5, 39233): [(38922, 6, 39233)],
          (39241, 2, 39233): [(38920, 3, 39233)]}],
 39234: [['1', 39235, ['*', 38924, 39235], ['?', 38924]],
         "subscriptlist: subscript( ',' subscript ) * [ ',' ]",
         (39234, 0, 39234),
         {(38924, 2, 39234): [(39235, 3, 39234)],
          (38924, 4, 39234): [(None, '-', 39234)],
          (39234, 0, 39234): [(39235, 1, 39234)],
          (39235, 1, 39234): [(38924, 2, 39234),
                              (38924, 4, 39234),
                              (None, '-', 39234)],
          (39235, 3, 39234): [(38924, 2, 39234),
                              (38924, 4, 39234),
                              (None, '-', 39234)]}],
 39235: [['|',
          ['1', 38935, 38935, 38935],
          ['1', 39215],
          ['1', ['?', 39215], 38923, ['?', 39215], ['?', 39236]]],
         "subscript: '.' '.' '.' | test | [ test ] ':' [ test ][ sliceop ]",
         (39235, 0, 39235),
         {(38923, 6, 39235): [(None, '-', 39235),
                              (39215, 7, 39235),
                              (39236, 8, 39235)],
          (38935, 1, 39235): [(38935, 2, 39235)],
          (38935, 2, 39235): [(38935, 3, 39235)],
          (38935, 3, 39235): [(None, '-', 39235)],
          (39215, 4, 39235): [(None, '-', 39235)],
          (39215, 5, 39235): [(38923, 6, 39235)],
          (39215, 7, 39235): [(None, '-', 39235), (39236, 8, 39235)],
          (39235, 0, 39235): [(39215, 4, 39235),
                              (39215, 5, 39235),
                              (38923, 6, 39235),
                              (38935, 1, 39235)],
          (39236, 8, 39235): [(None, '-', 39235)]}],
 39236: [['1', 38923, ['?', 39215]],
         "sliceop: ':' [ test ]",
         (39236, 0, 39236),
         {(38923, 1, 39236): [(39215, 2, 39236), (None, '-', 39236)],
          (39215, 2, 39236): [(None, '-', 39236)],
          (39236, 0, 39236): [(38923, 1, 39236)]}],
 39237: [['1', 39221, ['*', 38924, 39221], ['?', 38924]],
         "exprlist: expr( ',' expr ) * [ ',' ]",
         (39237, 0, 39237),
         {(38924, 2, 39237): [(39221, 3, 39237)],
          (38924, 4, 39237): [(None, '-', 39237)],
          (39221, 1, 39237): [(38924, 2, 39237),
                              (38924, 4, 39237),
                              (None, '-', 39237)],
          (39221, 3, 39237): [(38924, 2, 39237),
                              (38924, 4, 39237),
                              (None, '-', 39237)],
          (39237, 0, 39237): [(39221, 1, 39237)]}],
 39238: [['1', 39215, ['*', 38924, 39215], ['?', 38924]],
         "testlist: test( ',' test ) * [ ',' ]",
         (39238, 0, 39238),
         {(38924, 2, 39238): [(39215, 3, 39238)],
          (38924, 4, 39238): [(None, '-', 39238)],
          (39215, 1, 39238): [(38924, 2, 39238),
                              (38924, 4, 39238),
                              (None, '-', 39238)],
          (39215, 3, 39238): [(38924, 2, 39238),
                              (38924, 4, 39238),
                              (None, '-', 39238)],
          (39238, 0, 39238): [(39215, 1, 39238)]}],
 39239: [['1',
          39215,
          38923,
          39215,
          ['*', 38924, 39215, 38923, 39215],
          ['?', 38924]],
         "dictmaker: test ':' test( ',' test ':' test ) * [ ',' ]",
         (39239, 0, 39239),
         {(38923, 2, 39239): [(39215, 3, 39239)],
          (38923, 6, 39239): [(39215, 7, 39239)],
          (38924, 4, 39239): [(39215, 5, 39239)],
          (38924, 8, 39239): [(None, '-', 39239)],
          (39215, 1, 39239): [(38923, 2, 39239)],
          (39215, 3, 39239): [(None, '-', 39239),
                              (38924, 4, 39239),
                              (38924, 8, 39239)],
          (39215, 5, 39239): [(38923, 6, 39239)],
          (39215, 7, 39239): [(None, '-', 39239),
                              (38924, 4, 39239),
                              (38924, 8, 39239)],
          (39239, 0, 39239): [(39215, 1, 39239)]}],
 39240: [['1',
          'klasse',
          38913,
          ['?', 38919, ['?', 39238], 38920],
          38923,
          39211],
         "classdef: 'klasse' NAME[ '(' [ testlist ] ')' ] ':' suite",
         (39240, 0, 39240),
         {(38913, 2, 39240): [(38919, 3, 39240), (38923, 6, 39240)],
          (38919, 3, 39240): [(39238, 4, 39240), (38920, 5, 39240)],
          (38920, 5, 39240): [(38923, 6, 39240)],
          (38923, 6, 39240): [(39211, 7, 39240)],
          (39211, 7, 39240): [(None, '-', 39240)],
          (39238, 4, 39240): [(38920, 5, 39240)],
          (39240, 0, 39240): [('klasse', 1, 39240)],
          ('klasse', 1, 39240): [(38913, 2, 39240)]}],
 39241: [['1',
          ['*', 39242, 38924],
          ['|',
           ['1', 39242, ['?', 38924]],
           ['1', 38928, 39215, ['?', 38924, 38948, 39215]],
           ['1', 38948, 39215]]],
         "arglist: ( argument ',' ) * ( argument[ ',' ] | '*' test[ ',' '**' test ] | '**' test )",
         (39241, 0, 39241),
         {(38924, 2, 39241): [(38928, 5, 39241),
                              (39242, 3, 39241),
                              (39242, 1, 39241),
                              (38948, 10, 39241)],
          (38924, 4, 39241): [(None, '-', 39241)],
          (38924, 7, 39241): [(38948, 8, 39241)],
          (38928, 5, 39241): [(39215, 6, 39241)],
          (38948, 8, 39241): [(39215, 9, 39241)],
          (38948, 10, 39241): [(39215, 11, 39241)],
          (39215, 6, 39241): [(38924, 7, 39241), (None, '-', 39241)],
          (39215, 9, 39241): [(None, '-', 39241)],
          (39215, 11, 39241): [(None, '-', 39241)],
          (39241, 0, 39241): [(38928, 5, 39241),
                              (39242, 3, 39241),
                              (39242, 1, 39241),
                              (38948, 10, 39241)],
          (39242, 1, 39241): [(38924, 2, 39241)],
          (39242, 3, 39241): [(38924, 4, 39241), (None, '-', 39241)]}],
 39242: [['|', ['1', 39215, ['?', 39247]], ['1', 39215, 38934, 39215]],
         "argument: test[ gen_for ] | test '=' test",
         (39242, 0, 39242),
         {(38934, 4, 39242): [(39215, 5, 39242)],
          (39215, 1, 39242): [(39247, 2, 39242), (None, '-', 39242)],
          (39215, 3, 39242): [(38934, 4, 39242)],
          (39215, 5, 39242): [(None, '-', 39242)],
          (39242, 0, 39242): [(39215, 3, 39242), (39215, 1, 39242)],
          (39247, 2, 39242): [(None, '-', 39242)]}],
 39243: [['|', ['1', 39244], ['1', 39245]],
         'list_iter: list_for | list_if',
         (39243, 0, 39243),
         {(39243, 0, 39243): [(39245, 2, 39243), (39244, 1, 39243)],
          (39244, 1, 39243): [(None, '-', 39243)],
          (39245, 2, 39243): [(None, '-', 39243)]}],
 39244: [['1',
          39002,
          39237,
          ['|', ['1', 'im'], ['1', 'in']],
          39212,
          ['?', 39243]],
         "list_for: FUER exprlist( 'im' | 'in' ) testlist_safe[ list_iter ]",
         (39244, 0, 39244),
         {(39002, 1, 39244): [(39237, 2, 39244)],
          (39212, 5, 39244): [(39243, 6, 39244), (None, '-', 39244)],
          (39237, 2, 39244): [('in', 4, 39244), ('im', 3, 39244)],
          (39243, 6, 39244): [(None, '-', 39244)],
          (39244, 0, 39244): [(39002, 1, 39244)],
          ('im', 3, 39244): [(39212, 5, 39244)],
          ('in', 4, 39244): [(39212, 5, 39244)]}],
 39245: [['1', 'wenn', 39213, ['?', 39243]],
         "list_if: 'wenn' old_test[ list_iter ]",
         (39245, 0, 39245),
         {(39213, 2, 39245): [(39243, 3, 39245), (None, '-', 39245)],
          (39243, 3, 39245): [(None, '-', 39245)],
          (39245, 0, 39245): [('wenn', 1, 39245)],
          ('wenn', 1, 39245): [(39213, 2, 39245)]}],
 39246: [['|', ['1', 39247], ['1', 39248]],
         'gen_iter: gen_for | gen_if',
         (39246, 0, 39246),
         {(39246, 0, 39246): [(39248, 2, 39246), (39247, 1, 39246)],
          (39247, 1, 39246): [(None, '-', 39246)],
          (39248, 2, 39246): [(None, '-', 39246)]}],
 39247: [['1',
          39002,
          39237,
          ['|', ['1', 'im'], ['1', 'in']],
          39216,
          ['?', 39246]],
         "gen_for: FUER exprlist( 'im' | 'in' ) or_test[ gen_iter ]",
         (39247, 0, 39247),
         {(39002, 1, 39247): [(39237, 2, 39247)],
          (39216, 5, 39247): [(None, '-', 39247), (39246, 6, 39247)],
          (39237, 2, 39247): [('in', 4, 39247), ('im', 3, 39247)],
          (39246, 6, 39247): [(None, '-', 39247)],
          (39247, 0, 39247): [(39002, 1, 39247)],
          ('im', 3, 39247): [(39216, 5, 39247)],
          ('in', 4, 39247): [(39216, 5, 39247)]}],
 39248: [['1', 'wenn', 39213, ['?', 39246]],
         "gen_if: 'wenn' old_test[ gen_iter ]",
         (39248, 0, 39248),
         {(39213, 2, 39248): [(39246, 3, 39248), (None, '-', 39248)],
          (39246, 3, 39248): [(None, '-', 39248)],
          (39248, 0, 39248): [('wenn', 1, 39248)],
          ('wenn', 1, 39248): [(39213, 2, 39248)]}],
 39249: [['1', 39215, ['*', 38924, 39215]],
         "testlist1: test( ',' test ) *",
         (39249, 0, 39249),
         {(38924, 2, 39249): [(39215, 3, 39249)],
          (39215, 1, 39249): [(38924, 2, 39249), (None, '-', 39249)],
          (39215, 3, 39249): [(38924, 2, 39249), (None, '-', 39249)],
          (39249, 0, 39249): [(39215, 1, 39249)]}],
 39250: [['1', 38913],
         'encoding_decl: NAME',
         (39250, 0, 39250),
         {(38913, 1, 39250): [(None, '-', 39250)],
          (39250, 0, 39250): [(38913, 1, 39250)]}],
 39251: [['1', 'ergibt', ['?', 39238]],
         "yield_expr: 'ergibt' [ testlist ]",
         (39251, 0, 39251),
         {(39238, 2, 39251): [(None, '-', 39251)],
          (39251, 0, 39251): [('ergibt', 1, 39251)],
          ('ergibt', 1, 39251): [(39238, 2, 39251), (None, '-', 39251)]}]}

# expansion targets:

expanded  = {}

# reachables:

reachables = {39168: set(['behaupte', 38913, 38914, 39171, 38916, 39173, 38919, 38921, 39179, 39180, 39181, 38926, 39183, 39184, 39185, 39186, 38915, 39188, 39189, 39190, 39191, 39192, 39172, 38938, 39200, 39201, 39202, 39203, 39204, 39205, 39206, 39207, 39208, 39218, 39215, 39216, 39217, 38962, 39219, 39221, 39222, 39223, 39224, 39225, 39226, 39227, 39228, 39229, 39232, 'global', 39238, 39240, 'versuche', 39000, 39001, 39002, 38927, 'wenn', 'abbrechen', 'ausfuehren', 39187, 'def', 'behandle', 'entf', 'von', 'pass', 39194, 'ergibt', 'weiter', 'klasse', 38937, 'import', 'solange', 'mit', 'drucke', 38944, 39193, 39251, 'nicht', 'lambda']),
 39169: set([38912, 'behaupte', 38914, 38915, 38916, 39173, 38913, 38921, 39178, 39179, 39180, 39181, 38926, 39183, 39184, 39185, 39186, 39187, 39188, 39189, 39190, 39191, 39192, 39172, 38938, 39200, 39201, 39202, 39203, 39204, 39205, 39206, 39207, 39171, 38919, 39218, 39215, 39216, 39217, 38962, 39219, 39221, 39222, 39223, 39224, 39225, 39226, 39227, 39228, 39229, 39232, 'global', 39238, 39240, 39251, 39000, 39001, 39002, 38927, 'wenn', 'solange', 'abbrechen', 'ausfuehren', 'def', 'behandle', 'entf', 'von', 'pass', 39194, 'ergibt', 'weiter', 'klasse', 38937, 'import', 39193, 'mit', 'drucke', 38944, 'nicht', 39208, 'versuche', 'lambda']),
 39170: set([39232, 38913, 38914, 38915, 39238, 38919, 38921, 38926, 38927, 'nicht', 38937, 38938, 38944, 39215, 39216, 39217, 39218, 39219, 39221, 39222, 39223, 39224, 39225, 39226, 39227, 39228, 39229, 'lambda']),
 39171: set([38962]),
 39172: set([38962, 39171]),
 39173: set([38962, 39171, 39172, 'def']),
 39174: set([38919]),
 39175: set([39176, 38928, 38919, 38948, 38913]),
 39176: set([38913, 38919]),
 39177: set([39176, 38913, 38919]),
 39178: set(['behaupte', 38913, 38914, 38915, 39172, 'behandle', 38919, 38921, 'von', 39179, 39180, 39181, 38926, 39183, 39184, 39185, 39186, 39187, 39188, 39189, 39190, 'pass', 39192, 38937, 38938, 39194, 39173, 39200, 39201, 39202, 39203, 39204, 39205, 39206, 39191, 39171, 'ergibt', 'entf', 'weiter', 38962, 39215, 39216, 39217, 39218, 39219, 39221, 39222, 39223, 39224, 39225, 39226, 39227, 39193, 39229, 'drucke', 38944, 'global', 39238, 39240, 39232, 'nicht', 'import', 39000, 39001, 39002, 38927, 'klasse', 'wenn', 39207, 39228, 'abbrechen', 'ausfuehren', 'mit', 39208, 39251, 'versuche', 'solange', 'def', 'lambda']),
 39179: set(['behaupte', 38913, 38914, 38915, 'behandle', 38919, 38921, 'von', 'global', 39180, 39181, 38926, 39183, 39184, 39185, 39186, 39187, 39188, 39189, 39190, 'pass', 39192, 38937, 38938, 39194, 39200, 39201, 39202, 39191, 'ergibt', 'entf', 'weiter', 39215, 39216, 39217, 39218, 39219, 39221, 39222, 39223, 39224, 39225, 39226, 39227, 39193, 39229, 'drucke', 38944, 39238, 39232, 'nicht', 'import', 39000, 39001, 38927, 39228, 'abbrechen', 'ausfuehren', 39251, 'lambda']),
 39180: set(['behaupte', 38913, 38914, 38915, 'behandle', 38919, 38921, 'von', 'global', 39181, 38926, 39183, 39184, 39185, 39186, 39187, 39188, 39189, 39190, 'pass', 39192, 38937, 38938, 39194, 39200, 39201, 39202, 39193, 39191, 'ergibt', 'entf', 'drucke', 39215, 39216, 39217, 39218, 39219, 39221, 39222, 39223, 39224, 39225, 39226, 39227, 39228, 39229, 39232, 38944, 39238, 'nicht', 'import', 39000, 39001, 38927, 'weiter', 'abbrechen', 'ausfuehren', 39251, 'lambda']),
 39181: set([39232, 38913, 38914, 38915, 39238, 38919, 38921, 38926, 38927, 'nicht', 38937, 38938, 38944, 39215, 39216, 39217, 39218, 39219, 39221, 39222, 39223, 39224, 39225, 39226, 39227, 39228, 39229, 'lambda']),
 39182: set([38949, 38950, 38951, 38952, 38953, 38954, 38955, 38956, 38957, 38958, 38959, 38961]),
 39183: set(['drucke']),
 39184: set(['entf']),
 39185: set(['pass']),
 39186: set(['behandle', 'ergibt', 39251, 'abbrechen', 'weiter', 39187, 39188, 39189, 39190, 39191, 39001]),
 39187: set(['abbrechen']),
 39188: set(['weiter']),
 39189: set([39001]),
 39190: set(['ergibt', 39251]),
 39191: set(['behandle']),
 39192: set([39193, 39194, 'von', 'import']),
 39193: set(['import']),
 39194: set(['von']),
 39195: set([38913]),
 39196: set([38913, 39199]),
 39197: set([38913, 39195]),
 39198: set([38913, 39196, 39199]),
 39199: set([38913]),
 39200: set(['global']),
 39201: set([39000, 'ausfuehren']),
 39202: set(['behaupte']),
 39203: set(['wenn', 39171, 39204, 39173, 39206, 39207, 39208, 39240, 38962, 'versuche', 'klasse', 39172, 39002, 'solange', 'mit', 'def', 39205]),
 39204: set(['wenn']),
 39205: set(['solange']),
 39206: set([39002]),
 39207: set(['versuche']),
 39208: set(['mit']),
 39209: set([38913, 'als']),
 39210: set(['ausser']),
 39211: set(['behaupte', 38913, 38914, 38915, 38916, 'behandle', 38919, 38921, 'von', 39179, 39180, 39181, 38926, 39183, 39184, 39185, 39186, 39187, 39188, 39189, 39190, 'pass', 39192, 38937, 38938, 39194, 39200, 39201, 39202, 39191, 'ergibt', 'entf', 'weiter', 39215, 39216, 39217, 39218, 39219, 39221, 39222, 39223, 39224, 39225, 39226, 39227, 39193, 39229, 'drucke', 38944, 'global', 39238, 39232, 'nicht', 'import', 39000, 39001, 38927, 39228, 'abbrechen', 'ausfuehren', 39251, 'lambda']),
 39212: set([38913, 38914, 38915, 38919, 38921, 38926, 38927, 'nicht', 38937, 38938, 38944, 39213, 39214, 39216, 39217, 39218, 39219, 39221, 39222, 39223, 39224, 39225, 39226, 39227, 39228, 39229, 'lambda']),
 39213: set([38913, 38914, 38915, 38919, 38921, 38926, 38927, 'nicht', 38937, 38938, 38944, 39214, 39216, 39217, 39218, 39219, 39221, 39222, 39223, 39224, 39225, 39226, 39227, 39228, 39229, 'lambda']),
 39214: set(['lambda']),
 39215: set([39232, 38913, 38914, 38915, 38919, 38921, 38926, 38927, 'nicht', 38937, 38938, 38944, 39216, 39217, 39218, 39219, 39221, 39222, 39223, 39224, 39225, 39226, 39227, 39228, 39229, 'lambda']),
 39216: set([38913, 38914, 38915, 38919, 38921, 38926, 38927, 'nicht', 38937, 38938, 38944, 39217, 39218, 39219, 39221, 39222, 39223, 39224, 39225, 39226, 39227, 39228, 39229]),
 39217: set([38913, 38914, 38915, 38919, 38921, 38926, 38927, 'nicht', 38937, 38938, 38944, 39218, 39219, 39221, 39222, 39223, 39224, 39225, 39226, 39227, 39228, 39229]),
 39218: set([38913, 38914, 38915, 38919, 38921, 38926, 38927, 'nicht', 38937, 38938, 38944, 39219, 39221, 39222, 39223, 39224, 39225, 39226, 39227, 39228, 39229]),
 39219: set([38913, 38914, 38915, 38919, 38921, 38926, 38927, 38937, 38938, 38944, 39221, 39222, 39223, 39224, 39225, 39226, 39227, 39228, 39229]),
 39220: set(['<>', 'ist', 38932, 38933, 'in', 'not', 38940, 38941, 38942, 38943]),
 39221: set([38913, 38914, 38915, 38919, 38921, 38926, 38927, 38937, 38938, 38944, 39222, 39223, 39224, 39225, 39226, 39227, 39228, 39229]),
 39222: set([38913, 38914, 38915, 38919, 38921, 38926, 38927, 38937, 38938, 38944, 39223, 39224, 39225, 39226, 39227, 39228, 39229]),
 39223: set([38913, 38914, 38915, 38919, 38921, 38926, 38927, 38937, 38938, 38944, 39224, 39225, 39226, 39227, 39228, 39229]),
 39224: set([38944, 38913, 38914, 38915, 38919, 38921, 38926, 38927, 38938, 38937, 39225, 39226, 39227, 39228, 39229]),
 39225: set([38944, 38913, 38914, 38915, 38919, 38921, 38926, 38927, 39229, 38937, 39226, 39227, 39228, 38938]),
 39226: set([38944, 38913, 38914, 38915, 38919, 38921, 38926, 38927, 38937, 38938, 39227, 39228, 39229]),
 39227: set([38944, 38913, 38914, 38915, 38919, 38921, 38926, 38927, 38937, 38938, 39228, 39229]),
 39228: set([38913, 38914, 38915, 38919, 38921, 38937, 38938, 39229]),
 39229: set([38913, 38914, 38915, 38919, 38921, 38937, 38938]),
 39230: set([39232, 38913, 38914, 38915, 38919, 38921, 38926, 38927, 'nicht', 38937, 38938, 38944, 39215, 39216, 39217, 39218, 39219, 39221, 39222, 39223, 39224, 39225, 39226, 39227, 39228, 39229, 'lambda']),
 39231: set([39232, 38913, 38914, 38915, 38919, 38921, 38926, 38927, 'nicht', 38937, 38938, 38944, 39215, 39216, 39217, 39218, 39219, 39221, 39222, 39223, 39224, 39225, 39226, 39227, 39228, 39229, 'lambda']),
 39232: set(['lambda']),
 39233: set([38921, 38919, 38935]),
 39234: set([39232, 38913, 38914, 39235, 38919, 38921, 38923, 38926, 38927, 38915, 39219, 38935, 38937, 38938, 38944, 39215, 39216, 39217, 39218, 'nicht', 39221, 39222, 39223, 39224, 39225, 39226, 39227, 39228, 39229, 'lambda']),
 39235: set([39232, 38913, 38914, 38915, 38919, 38921, 38923, 38926, 38927, 'nicht', 38935, 38937, 38938, 38944, 39215, 39216, 39217, 39218, 39219, 39221, 39222, 39223, 39224, 39225, 39226, 39227, 39228, 39229, 'lambda']),
 39236: set([38923]),
 39237: set([38913, 38914, 38915, 38919, 38921, 38926, 38927, 38937, 38938, 38944, 39221, 39222, 39223, 39224, 39225, 39226, 39227, 39228, 39229]),
 39238: set([39232, 38913, 38914, 38915, 38919, 38921, 38926, 38927, 'nicht', 38937, 38938, 38944, 39215, 39216, 39217, 39218, 39219, 39221, 39222, 39223, 39224, 39225, 39226, 39227, 39228, 39229, 'lambda']),
 39239: set([39232, 38913, 38914, 38915, 38919, 38921, 38926, 38927, 'nicht', 38937, 38938, 38944, 39215, 39216, 39217, 39218, 39219, 39221, 39222, 39223, 39224, 39225, 39226, 39227, 39228, 39229, 'lambda']),
 39240: set(['klasse']),
 39241: set([39232, 38913, 38914, 38915, 38919, 38921, 39242, 38926, 38927, 38928, 'nicht', 38937, 38938, 38944, 38948, 39215, 39216, 39217, 39218, 39219, 39221, 39222, 39223, 39224, 39225, 39226, 39227, 39228, 39229, 'lambda']),
 39242: set([39232, 38913, 38914, 38915, 38919, 38921, 38926, 38927, 'nicht', 38937, 38938, 38944, 39215, 39216, 39217, 39218, 39219, 39221, 39222, 39223, 39224, 39225, 39226, 39227, 39228, 39229, 'lambda']),
 39243: set(['wenn', 39002, 39244, 39245]),
 39244: set([39002]),
 39245: set(['wenn']),
 39246: set([39248, 'wenn', 39002, 39247]),
 39247: set([39002]),
 39248: set(['wenn']),
 39249: set([39232, 38913, 38914, 38915, 38919, 38921, 38926, 38927, 'nicht', 38937, 38938, 38944, 39215, 39216, 39217, 39218, 39219, 39221, 39222, 39223, 39224, 39225, 39226, 39227, 39228, 39229, 'lambda']),
 39250: set([38913]),
 39251: set(['ergibt'])}

# terminals:

terminals  = set([38912, 38913, 38914, 38915, 38916, 38917, 38918, 38919, 38920, 38921, 38922, 38923, 38924, 38925, 38926, 38927, 38928, 38929, 38930, 38931, 38932, 38933, 38934, 38935, 38936, 38937, 38938, 38939, 38940, 38941, 38942, 38943, 38944, 38945, 38946, 38947, 38948, 38949, 38950, 38951, 38952, 38953, 38954, 38955, 38956, 38957, 38958, 38959, 38960, 38961, 38962, 'global', 'not', 39001, 39002, 'wenn', 'abbrechen', 'entf', 'pass', 'weiter', 'als', 'sonst', 'import', 'drucke', 'nicht', 'schliesslich', 'wennsonst', 'ist', 'und', 'lambda', 39000, 'oder', 'else', 'versuche', 'ausfuehren', 'def', 'behandle', '<>', 'von', 'as', 'im', 'behaupte', 'in', 'ergibt', 'klasse', 'ausser', 'solange', 'mit'])

# terminal ancestors:

ancestors  = {38912: set([39169]),
 38913: set([39168, 39169, 39170, 39175, 39176, 39177, 39178, 39179, 39180, 39181, 39195, 39196, 39197, 39198, 39199, 39209, 39211, 39212, 39213, 39215, 39216, 39217, 39218, 39219, 39221, 39222, 39223, 39224, 39225, 39226, 39227, 39228, 39229, 39230, 39231, 39234, 39235, 39237, 39238, 39239, 39241, 39242, 39249, 39250]),
 38914: set([39168, 39169, 39170, 39178, 39179, 39180, 39181, 39211, 39212, 39213, 39215, 39216, 39217, 39218, 39219, 39221, 39222, 39223, 39224, 39225, 39226, 39227, 39228, 39229, 39230, 39231, 39234, 39235, 39237, 39238, 39239, 39241, 39242, 39249]),
 38915: set([39168, 39169, 39170, 39178, 39179, 39180, 39181, 39211, 39212, 39213, 39215, 39216, 39217, 39218, 39219, 39221, 39222, 39223, 39224, 39225, 39226, 39227, 39228, 39229, 39230, 39231, 39234, 39235, 39237, 39238, 39239, 39241, 39242, 39249]),
 38916: set([39168, 39169, 39211]),
 38919: set([39168, 39169, 39170, 39174, 39175, 39176, 39177, 39178, 39179, 39180, 39181, 39211, 39212, 39213, 39215, 39216, 39217, 39218, 39219, 39221, 39222, 39223, 39224, 39225, 39226, 39227, 39228, 39229, 39230, 39231, 39233, 39234, 39235, 39237, 39238, 39239, 39241, 39242, 39249]),
 38921: set([39168, 39169, 39170, 39178, 39179, 39180, 39181, 39211, 39212, 39213, 39215, 39216, 39217, 39218, 39219, 39221, 39222, 39223, 39224, 39225, 39226, 39227, 39228, 39229, 39230, 39231, 39233, 39234, 39235, 39237, 39238, 39239, 39241, 39242, 39249]),
 38923: set([39234, 39235, 39236]),
 38926: set([39168, 39169, 39170, 39178, 39179, 39180, 39181, 39211, 39212, 39213, 39215, 39216, 39217, 39218, 39219, 39221, 39222, 39223, 39224, 39225, 39226, 39227, 39230, 39231, 39234, 39235, 39237, 39238, 39239, 39241, 39242, 39249]),
 38927: set([39168, 39169, 39170, 39178, 39179, 39180, 39181, 39211, 39212, 39213, 39215, 39216, 39217, 39218, 39219, 39221, 39222, 39223, 39224, 39225, 39226, 39227, 39230, 39231, 39234, 39235, 39237, 39238, 39239, 39241, 39242, 39249]),
 38928: set([39241, 39175]),
 38932: set([39220]),
 38933: set([39220]),
 38935: set([39233, 39234, 39235]),
 38937: set([39168, 39169, 39170, 39178, 39179, 39180, 39181, 39211, 39212, 39213, 39215, 39216, 39217, 39218, 39219, 39221, 39222, 39223, 39224, 39225, 39226, 39227, 39228, 39229, 39230, 39231, 39234, 39235, 39237, 39238, 39239, 39241, 39242, 39249]),
 38938: set([39168, 39169, 39170, 39178, 39179, 39180, 39181, 39211, 39212, 39213, 39215, 39216, 39217, 39218, 39219, 39221, 39222, 39223, 39224, 39225, 39226, 39227, 39228, 39229, 39230, 39231, 39234, 39235, 39237, 39238, 39239, 39241, 39242, 39249]),
 38940: set([39220]),
 38941: set([39220]),
 38942: set([39220]),
 38943: set([39220]),
 38944: set([39168, 39169, 39170, 39178, 39179, 39180, 39181, 39211, 39212, 39213, 39215, 39216, 39217, 39218, 39219, 39221, 39222, 39223, 39224, 39225, 39226, 39227, 39230, 39231, 39234, 39235, 39237, 39238, 39239, 39241, 39242, 39249]),
 38948: set([39241, 39175]),
 38949: set([39182]),
 38950: set([39182]),
 38951: set([39182]),
 38952: set([39182]),
 38953: set([39182]),
 38954: set([39182]),
 38955: set([39182]),
 38956: set([39182]),
 38957: set([39182]),
 38958: set([39182]),
 38959: set([39182]),
 38961: set([39182]),
 38962: set([39168, 39169, 39171, 39172, 39173, 39178, 39203]),
 39000: set([39168, 39169, 39211, 39201, 39178, 39179, 39180]),
 39001: set([39168, 39169, 39211, 39178, 39179, 39180, 39186, 39189]),
 39002: set([39168, 39169, 39203, 39206, 39178, 39243, 39244, 39246, 39247]),
 '<>': set([39220]),
 'abbrechen': set([39168, 39169, 39211, 39178, 39179, 39180, 39186, 39187]),
 'als': set([39209]),
 'ausfuehren': set([39168, 39169, 39211, 39201, 39178, 39179, 39180]),
 'ausser': set([39210]),
 'behandle': set([39168, 39169, 39211, 39178, 39179, 39180, 39186, 39191]),
 'behaupte': set([39168, 39169, 39202, 39211, 39178, 39179, 39180]),
 'def': set([39168, 39169, 39178, 39203, 39173]),
 'drucke': set([39168, 39169, 39211, 39178, 39179, 39180, 39183]),
 'entf': set([39168, 39169, 39211, 39178, 39179, 39180, 39184]),
 'ergibt': set([39168, 39169, 39211, 39178, 39179, 39180, 39186, 39251, 39190]),
 'global': set([39168, 39169, 39211, 39178, 39179, 39180, 39200]),
 'import': set([39168, 39169, 39211, 39178, 39179, 39180, 39192, 39193]),
 'in': set([39220]),
 'ist': set([39220]),
 'klasse': set([39168, 39169, 39178, 39203, 39240]),
 'lambda': set([39168, 39169, 39170, 39178, 39179, 39180, 39181, 39211, 39212, 39213, 39214, 39215, 39230, 39231, 39232, 39234, 39235, 39238, 39239, 39241, 39242, 39249]),
 'mit': set([39168, 39169, 39178, 39203, 39208]),
 'nicht': set([39168, 39169, 39170, 39178, 39179, 39180, 39181, 39211, 39212, 39213, 39215, 39216, 39217, 39218, 39230, 39231, 39234, 39235, 39238, 39239, 39241, 39242, 39249]),
 'not': set([39220]),
 'pass': set([39168, 39169, 39211, 39178, 39179, 39180, 39185]),
 'solange': set([39168, 39169, 39178, 39203, 39205]),
 'versuche': set([39168, 39169, 39178, 39203, 39207]),
 'von': set([39168, 39169, 39211, 39178, 39179, 39180, 39192, 39194]),
 'weiter': set([39168, 39169, 39211, 39178, 39179, 39180, 39186, 39188]),
 'wenn': set([39168, 39169, 39203, 39204, 39178, 39243, 39245, 39246, 39248])}

# symbols of:

symbols_of  = {39168: set([39203, 39179, 38916]),
 39169: set([38912, 39178, 38916]),
 39170: set([38912, 38916, 39238]),
 39171: set([38916, 38919, 38920, 39241, 38962, 39199]),
 39172: set([39171]),
 39173: set([38913, 39211, 39172, 39174, 38923, 'def']),
 39174: set([38920, 39175, 38919]),
 39175: set([38913, 38948, 39176, 38924, 39215, 38928, 38934]),
 39176: set([38920, 38913, 38919, 39177]),
 39177: set([39176, 38924]),
 39178: set([39203, 39179]),
 39179: set([38916, 39180, 38925]),
 39180: set([39184, 39185, 39186, 39201, 39192, 39202, 39200, 39181, 39183]),
 39181: set([39182, 39251, 38934, 39238]),
 39182: set([38949, 38950, 38951, 38952, 38953, 38954, 38955, 38956, 38957, 38958, 38959, 38961]),
 39183: set(['drucke', 38947, 38924, 39215]),
 39184: set([39237, 'entf']),
 39185: set(['pass']),
 39186: set([39187, 39188, 39189, 39190, 39191]),
 39187: set(['abbrechen']),
 39188: set(['weiter']),
 39189: set([39001, 39238]),
 39190: set([39251]),
 39191: set([38924, 'behandle', 39215]),
 39192: set([39193, 39194]),
 39193: set(['import', 39198]),
 39194: set([38919, 38920, 'von', 38928, 38935, 'import', 39197, 39199]),
 39195: set([38913, 'as']),
 39196: set([38913, 'as', 39199]),
 39197: set([39195, 38924]),
 39198: set([38924, 39196]),
 39199: set([38913, 38935]),
 39200: set([38913, 'global', 38924]),
 39201: set([39221, 'in', 39000, 38924, 'ausfuehren', 39215]),
 39202: set(['behaupte', 38924, 39215]),
 39203: set([39240, 39204, 39205, 39206, 39207, 39208, 39173]),
 39204: set(['wenn', 38923, 39211, 'wennsonst', 39215, 'sonst']),
 39205: set([38923, 'sonst', 39211, 'solange', 39215]),
 39206: set([39211, 39237, 39238, 38923, 'else', 'im', 'in', 39002]),
 39207: set([39211, 39210, 38923, 'versuche', 'sonst', 'schliesslich']),
 39208: set([39209, 38923, 39211, 'mit', 39215]),
 39209: set([38913, 'als', 39221]),
 39210: set(['ausser', 38924, 39215]),
 39211: set([39178, 39179, 38916, 38917, 38918]),
 39212: set([38924, 39213]),
 39213: set([39216, 39214]),
 39214: set([38923, 39175, 39213, 'lambda']),
 39215: set([39216, 'wenn', 'sonst', 39232, 39215]),
 39216: set([39217, 'oder']),
 39217: set([39218, 'und']),
 39218: set([39219, 39218, 'nicht']),
 39219: set([39220, 39221]),
 39220: set(['<>', 'ist', 'nicht', 38932, 38933, 'in', 'not', 'im', 38940, 38941, 38942, 38943]),
 39221: set([38930, 39222]),
 39222: set([38945, 39223]),
 39223: set([39224, 38931]),
 39224: set([39225, 38946, 38947]),
 39225: set([39226, 38926, 38927]),
 39226: set([38928, 38929, 38960, 38936, 39227]),
 39227: set([38944, 39227, 39228, 38926, 38927]),
 39228: set([39233, 39227, 38948, 39229]),
 39229: set([38913, 38914, 38915, 39239, 38920, 38921, 38922, 38919, 39249, 39251, 38937, 38938, 38939, 39230, 39231]),
 39230: set([39244, 38924, 39215]),
 39231: set([39247, 38924, 39215]),
 39232: set([38923, 39215, 39175, 'lambda']),
 39233: set([38913, 39234, 38921, 38919, 38920, 39241, 38922, 38935]),
 39234: set([39235, 38924]),
 39235: set([38923, 39215, 39236, 38935]),
 39236: set([38923, 39215]),
 39237: set([38924, 39221]),
 39238: set([38924, 39215]),
 39239: set([38923, 38924, 39215]),
 39240: set([38913, 39211, 39238, 38919, 38920, 38923, 'klasse']),
 39241: set([38928, 38948, 39242, 38924, 39215]),
 39242: set([39215, 38934, 39247]),
 39243: set([39244, 39245]),
 39244: set(['im', 39237, 'in', 39002, 39243, 39212]),
 39245: set(['wenn', 39243, 39213]),
 39246: set([39248, 39247]),
 39247: set([39216, 'im', 39237, 'in', 39002, 39246]),
 39248: set(['wenn', 39213, 39246]),
 39249: set([38924, 39215]),
 39250: set([38913]),
 39251: set(['ergibt', 39238])}

# keywords:

keywords  = set(['behaupte', 'behandle', 'entf', '<>', 'oder', 'von', 'global', 'as', 'im', 'pass', 'als', 'ergibt', 'weiter', 'klasse', 'sonst', 'import', 'ausser', 'solange', 'mit', 'drucke', 'else', 'nicht', 'not', 'wenn', 'in', 'schliesslich', 'abbrechen', 'wennsonst', 'ausfuehren', 'ist', 'versuche', 'und', 'def', 'lambda'])

