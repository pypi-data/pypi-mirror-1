import random
import cPickle
import types
import time
from EasyExtend.util.path import path

def create_new_fiber_offset(fiber):
    '''
    '''
    cnt = 0
    if fiber.FIBER_OFFSET == -1:
        import EasyExtend
        from EasyExtend.util.path import path
        fs_path = path(EasyExtend.__file__).dirname().joinpath("fs")
        fs_lines  = open(fs_path).readlines()
        cnt_line  = fs_lines[4]
        cnt = int(cnt_line.split("=")[-1].strip())
        cnt +=1
        fs = open(fs_path,"w")
        print >> fs, "# -- defines offset multiplicity counter --"
        print >> fs, "# This was automatically generated by fs.py"
        print >> fs, "# Hack at your own risk."
        print >> fs, ""
        print >> fs, "offset_cnt = %d"%cnt
        conf_path = path(fiber.__file__).dirname().joinpath("conf.py")
        lines  = open(conf_path).readlines()
        f_conf = open(conf_path,"w")
        for i,line in enumerate(lines):
            if line.startswith("FIBER_OFFSET = -1"):
                fiber.FIBER_OFFSET = 512*cnt
                lines[i] = "FIBER_OFFSET = %d\n"%fiber.FIBER_OFFSET
                break
        f_conf.writelines(lines)
    return cnt


#############################################
##
##  crossfiber is not ready yet !
##  TODO: enhance fiberspace by crossfibers.
##
#############################################

class fs_crossfiber(object):
    def __init__(self, crossfiber_name, fibers):
        self.crossfiber_name = crossfiber_name
        assert len(fibers) >=2
        self.fibers = fibers
        self.principal = self.fibers[0]
        import EasyExtend.fibers.grammar_fiber.fiber
        self.grammar_fiber = EasyExtend.fibers.grammar_fiber.fiber

    def cross_transformer(self, F1, F2):
        pass

    def new_conf(self, F1, F2):
        pass

    def cross_fiber(self):
        return [self.grammar_fiber.load_fiber_grammar(F) for F in self.fibers]


if __name__ == '__main__':
    import EasyExtend.fibers.Py25Lite.fiber as Py25Lite
    import EasyExtend.fibers.gallery.fiber as gallery

    fusion = fs_crossfiber("Py25GalleryLite",[Py25Lite, gallery])
    G = fusion.cross_fiber()
    fusion.grammar_fiber.unparse(G[0])
    #fusion.grammar_fiber.pprint(G[0])
    G = fusion.grammar_fiber.join_grammars(G[0],G[1])
    fusion.grammar_fiber.unparse(G)


