# ______________________________________________________________________
# This was automatically generated by nfagen.py.
# Hack at your own risk.

# LANGLET OFFSET

LANGLET_OFFSET = 3072

# trail NFAs:

nfas = {3328: [['|', ['1', 3076], ['1', 3339], ['1', 3363, 3076]],
        'single_input: NEWLINE | simple_stmt | compound_stmt NEWLINE',
        (3328, 0, 3328),
        {(3076, 1, 3328): [(None, '-', 3328)],
         (3076, 4, 3328): [(None, '-', 3328)],
         (3328, 0, 3328): [(3339, 2, 3328),
                           (3076, 1, 3328),
                           (3363, 3, 3328)],
         (3339, 2, 3328): [(None, '-', 3328)],
         (3363, 3, 3328): [(3076, 4, 3328)]}],
 3329: [['1', ['*', ['|', ['1', 3076], ['1', 3338]]], 3072],
        'file_input: ( NEWLINE | stmt ) * ENDMARKER',
        (3329, 0, 3329),
        {(3072, 3, 3329): [(None, '-', 3329)],
         (3076, 1, 3329): [(3072, 3, 3329),
                           (3076, 1, 3329),
                           (3338, 2, 3329)],
         (3329, 0, 3329): [(3072, 3, 3329),
                           (3076, 1, 3329),
                           (3338, 2, 3329)],
         (3338, 2, 3329): [(3072, 3, 3329),
                           (3076, 1, 3329),
                           (3338, 2, 3329)]}],
 3330: [['1', 3398, ['*', 3076], 3072],
        'eval_input: testlist NEWLINE * ENDMARKER',
        (3330, 0, 3330),
        {(3072, 3, 3330): [(None, '-', 3330)],
         (3076, 2, 3330): [(3076, 2, 3330), (3072, 3, 3330)],
         (3330, 0, 3330): [(3398, 1, 3330)],
         (3398, 1, 3330): [(3076, 2, 3330), (3072, 3, 3330)]}],
 3331: [['1', 3122, 3359, ['?', 3079, ['?', 3401], 3080], 3076],
        "decorator: '@' dotted_name[ '(' [ arglist ] ')' ] NEWLINE",
        (3331, 0, 3331),
        {(3076, 6, 3331): [(None, '-', 3331)],
         (3079, 3, 3331): [(3080, 5, 3331), (3401, 4, 3331)],
         (3080, 5, 3331): [(3076, 6, 3331)],
         (3122, 1, 3331): [(3359, 2, 3331)],
         (3331, 0, 3331): [(3122, 1, 3331)],
         (3359, 2, 3331): [(3079, 3, 3331), (3076, 6, 3331)],
         (3401, 4, 3331): [(3080, 5, 3331)]}],
 3332: [['1', 3331, ['*', 3331]],
        'decorators: decorator +',
        (3332, 0, 3332),
        {(3331, 1, 3332): [(3331, 2, 3332), (None, '-', 3332)],
         (3331, 2, 3332): [(3331, 2, 3332), (None, '-', 3332)],
         (3332, 0, 3332): [(3331, 1, 3332)]}],
 3333: [['1', ['?', 3332], 'def', 3073, 3334, 3083, 3371],
        "funcdef: [ decorators ] 'def' NAME parameters ':' suite",
        (3333, 0, 3333),
        {(3073, 3, 3333): [(3334, 4, 3333)],
         (3083, 5, 3333): [(3371, 6, 3333)],
         (3332, 1, 3333): [('def', 2, 3333)],
         (3333, 0, 3333): [('def', 2, 3333), (3332, 1, 3333)],
         (3334, 4, 3333): [(3083, 5, 3333)],
         (3371, 6, 3333): [(None, '-', 3333)],
         ('def', 2, 3333): [(3073, 3, 3333)]}],
 3334: [['1', 3079, ['?', 3335], 3080],
        "parameters: '(' [ varargslist ] ')'",
        (3334, 0, 3334),
        {(3079, 1, 3334): [(3080, 3, 3334), (3335, 2, 3334)],
         (3080, 3, 3334): [(None, '-', 3334)],
         (3334, 0, 3334): [(3079, 1, 3334)],
         (3335, 2, 3334): [(3080, 3, 3334)]}],
 3335: [['|',
         ['1',
          ['*', 3336, ['?', 3094, 3375], 3084],
          ['|',
           ['1', 3088, 3073, ['?', 3084, 3108, 3073]],
           ['1', 3108, 3073]]],
         ['1',
          3336,
          ['?', 3094, 3375],
          ['*', 3084, 3336, ['?', 3094, 3375]],
          ['?', 3084]]],
        "varargslist: (( fpdef[ '=' test ] ',' ) * ( '*' NAME[ ',' '**' NAME ] | '**' NAME ) | fpdef[ '=' test ]( ',' fpdef[ '=' test ]) * [ ',' ])",
        (3335, 0, 3335),
        {(3073, 6, 3335): [(3084, 7, 3335), (None, '-', 3335)],
         (3073, 9, 3335): [(None, '-', 3335)],
         (3073, 11, 3335): [(None, '-', 3335)],
         (3084, 4, 3335): [(3336, 1, 3335),
                           (3108, 10, 3335),
                           (3088, 5, 3335)],
         (3084, 7, 3335): [(3108, 8, 3335)],
         (3084, 15, 3335): [(3336, 16, 3335)],
         (3084, 19, 3335): [(None, '-', 3335)],
         (3088, 5, 3335): [(3073, 6, 3335)],
         (3094, 2, 3335): [(3375, 3, 3335)],
         (3094, 13, 3335): [(3375, 14, 3335)],
         (3094, 17, 3335): [(3375, 18, 3335)],
         (3108, 8, 3335): [(3073, 9, 3335)],
         (3108, 10, 3335): [(3073, 11, 3335)],
         (3335, 0, 3335): [(3336, 1, 3335),
                           (3108, 10, 3335),
                           (3088, 5, 3335),
                           (3336, 12, 3335)],
         (3336, 1, 3335): [(3084, 4, 3335), (3094, 2, 3335)],
         (3336, 12, 3335): [(3084, 15, 3335),
                            (3094, 13, 3335),
                            (3084, 19, 3335),
                            (None, '-', 3335)],
         (3336, 16, 3335): [(3094, 17, 3335),
                            (3084, 15, 3335),
                            (3084, 19, 3335),
                            (None, '-', 3335)],
         (3375, 3, 3335): [(3084, 4, 3335)],
         (3375, 14, 3335): [(3084, 15, 3335),
                            (3084, 19, 3335),
                            (None, '-', 3335)],
         (3375, 18, 3335): [(3084, 15, 3335),
                            (3084, 19, 3335),
                            (None, '-', 3335)]}],
 3336: [['|', ['1', 3073], ['1', 3079, 3337, 3080]],
        "fpdef: NAME | '(' fplist ')'",
        (3336, 0, 3336),
        {(3073, 1, 3336): [(None, '-', 3336)],
         (3079, 2, 3336): [(3337, 3, 3336)],
         (3080, 4, 3336): [(None, '-', 3336)],
         (3336, 0, 3336): [(3073, 1, 3336), (3079, 2, 3336)],
         (3337, 3, 3336): [(3080, 4, 3336)]}],
 3337: [['1', 3336, ['*', 3084, 3336], ['?', 3084]],
        "fplist: fpdef( ',' fpdef ) * [ ',' ]",
        (3337, 0, 3337),
        {(3084, 2, 3337): [(3336, 3, 3337)],
         (3084, 4, 3337): [(None, '-', 3337)],
         (3336, 1, 3337): [(3084, 2, 3337),
                           (3084, 4, 3337),
                           (None, '-', 3337)],
         (3336, 3, 3337): [(3084, 2, 3337),
                           (3084, 4, 3337),
                           (None, '-', 3337)],
         (3337, 0, 3337): [(3336, 1, 3337)]}],
 3338: [['|', ['1', 3339], ['1', 3363]],
        'stmt: simple_stmt | compound_stmt',
        (3338, 0, 3338),
        {(3338, 0, 3338): [(3363, 2, 3338), (3339, 1, 3338)],
         (3339, 1, 3338): [(None, '-', 3338)],
         (3363, 2, 3338): [(None, '-', 3338)]}],
 3339: [['1', 3340, ['*', 3085, 3340], ['?', 3085], 3076],
        "simple_stmt: small_stmt( ';' small_stmt ) * [ ';' ] NEWLINE",
        (3339, 0, 3339),
        {(3076, 5, 3339): [(None, '-', 3339)],
         (3085, 2, 3339): [(3340, 3, 3339)],
         (3085, 4, 3339): [(3076, 5, 3339)],
         (3339, 0, 3339): [(3340, 1, 3339)],
         (3340, 1, 3339): [(3076, 5, 3339),
                           (3085, 4, 3339),
                           (3085, 2, 3339)],
         (3340, 3, 3339): [(3076, 5, 3339),
                           (3085, 4, 3339),
                           (3085, 2, 3339)]}],
 3340: [['|',
         ['1', 3341],
         ['1', 3343],
         ['1', 3344],
         ['1', 3345],
         ['1', 3346],
         ['1', 3352],
         ['1', 3360],
         ['1', 3361],
         ['1', 3362]],
        'small_stmt: ( expr_stmt | print_stmt | del_stmt | pass_stmt | flow_stmt | import_stmt | global_stmt | exec_stmt | assert_stmt )',
        (3340, 0, 3340),
        {(3340, 0, 3340): [(3341, 1, 3340),
                           (3362, 9, 3340),
                           (3343, 2, 3340),
                           (3352, 6, 3340),
                           (3344, 3, 3340),
                           (3360, 7, 3340),
                           (3361, 8, 3340),
                           (3346, 5, 3340),
                           (3345, 4, 3340)],
         (3341, 1, 3340): [(None, '-', 3340)],
         (3343, 2, 3340): [(None, '-', 3340)],
         (3344, 3, 3340): [(None, '-', 3340)],
         (3345, 4, 3340): [(None, '-', 3340)],
         (3346, 5, 3340): [(None, '-', 3340)],
         (3352, 6, 3340): [(None, '-', 3340)],
         (3360, 7, 3340): [(None, '-', 3340)],
         (3361, 8, 3340): [(None, '-', 3340)],
         (3362, 9, 3340): [(None, '-', 3340)]}],
 3341: [['1',
         3398,
         ['|',
          ['1', 3342, ['|', ['1', 3411], ['1', 3398]]],
          ['*', 3094, ['|', ['1', 3411], ['1', 3398]]]]],
        "expr_stmt: testlist( augassign( yield_expr | testlist ) | ( '=' ( yield_expr | testlist )) * )",
        (3341, 0, 3341),
        {(3094, 5, 3341): [(3398, 7, 3341), (3411, 6, 3341)],
         (3341, 0, 3341): [(3398, 1, 3341)],
         (3342, 2, 3341): [(3398, 4, 3341), (3411, 3, 3341)],
         (3398, 1, 3341): [(3342, 2, 3341),
                           (3094, 5, 3341),
                           (None, '-', 3341)],
         (3398, 4, 3341): [(None, '-', 3341)],
         (3398, 7, 3341): [(3094, 5, 3341), (None, '-', 3341)],
         (3411, 3, 3341): [(None, '-', 3341)],
         (3411, 6, 3341): [(3094, 5, 3341), (None, '-', 3341)]}],
 3342: [['|',
         ['1', 3109],
         ['1', 3110],
         ['1', 3111],
         ['1', 3112],
         ['1', 3113],
         ['1', 3114],
         ['1', 3115],
         ['1', 3116],
         ['1', 3117],
         ['1', 3118],
         ['1', 3119],
         ['1', 3121]],
        "augassign: ( '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '|=' | '^=' | '<<=' | '>>=' | '**=' | '//=' )",
        (3342, 0, 3342),
        {(3109, 1, 3342): [(None, '-', 3342)],
         (3110, 2, 3342): [(None, '-', 3342)],
         (3111, 3, 3342): [(None, '-', 3342)],
         (3112, 4, 3342): [(None, '-', 3342)],
         (3113, 5, 3342): [(None, '-', 3342)],
         (3114, 6, 3342): [(None, '-', 3342)],
         (3115, 7, 3342): [(None, '-', 3342)],
         (3116, 8, 3342): [(None, '-', 3342)],
         (3117, 9, 3342): [(None, '-', 3342)],
         (3118, 10, 3342): [(None, '-', 3342)],
         (3119, 11, 3342): [(None, '-', 3342)],
         (3121, 12, 3342): [(None, '-', 3342)],
         (3342, 0, 3342): [(3111, 3, 3342),
                           (3118, 10, 3342),
                           (3115, 7, 3342),
                           (3114, 6, 3342),
                           (3119, 11, 3342),
                           (3110, 2, 3342),
                           (3117, 9, 3342),
                           (3121, 12, 3342),
                           (3113, 5, 3342),
                           (3109, 1, 3342),
                           (3116, 8, 3342),
                           (3112, 4, 3342)]}],
 3343: [['1',
         'print',
         ['|',
          ['?', 3375, ['*', 3084, 3375], ['?', 3084]],
          ['1',
           3107,
           3375,
           ['?', ['1', 3084, 3375], ['*', 3084, 3375], ['?', 3084]]]]],
        "print_stmt: 'print' ([ test( ',' test ) * [ ',' ]] | '>>' test[( ',' test ) + [ ',' ]])",
        (3343, 0, 3343),
        {(3084, 3, 3343): [(3375, 4, 3343)],
         (3084, 5, 3343): [(None, '-', 3343)],
         (3084, 8, 3343): [(3375, 9, 3343)],
         (3084, 10, 3343): [(3375, 11, 3343)],
         (3084, 12, 3343): [(None, '-', 3343)],
         (3107, 6, 3343): [(3375, 7, 3343)],
         (3343, 0, 3343): [('print', 1, 3343)],
         (3375, 2, 3343): [(3084, 5, 3343),
                           (3084, 3, 3343),
                           (None, '-', 3343)],
         (3375, 4, 3343): [(3084, 5, 3343),
                           (3084, 3, 3343),
                           (None, '-', 3343)],
         (3375, 7, 3343): [(None, '-', 3343), (3084, 8, 3343)],
         (3375, 9, 3343): [(3084, 10, 3343),
                           (3084, 12, 3343),
                           (None, '-', 3343)],
         (3375, 11, 3343): [(3084, 10, 3343),
                            (3084, 12, 3343),
                            (None, '-', 3343)],
         ('print', 1, 3343): [(3107, 6, 3343),
                              (3375, 2, 3343),
                              (None, '-', 3343)]}],
 3344: [['1', 'del', 3397],
        "del_stmt: 'del' exprlist",
        (3344, 0, 3344),
        {(3344, 0, 3344): [('del', 1, 3344)],
         (3397, 2, 3344): [(None, '-', 3344)],
         ('del', 1, 3344): [(3397, 2, 3344)]}],
 3345: [['1', 'pass'],
        "pass_stmt: 'pass'",
        (3345, 0, 3345),
        {(3345, 0, 3345): [('pass', 1, 3345)],
         ('pass', 1, 3345): [(None, '-', 3345)]}],
 3346: [['|',
         ['1', 3347],
         ['1', 3348],
         ['1', 3349],
         ['1', 3351],
         ['1', 3350]],
        'flow_stmt: break_stmt | continue_stmt | return_stmt | raise_stmt | yield_stmt',
        (3346, 0, 3346),
        {(3346, 0, 3346): [(3351, 4, 3346),
                           (3348, 2, 3346),
                           (3347, 1, 3346),
                           (3350, 5, 3346),
                           (3349, 3, 3346)],
         (3347, 1, 3346): [(None, '-', 3346)],
         (3348, 2, 3346): [(None, '-', 3346)],
         (3349, 3, 3346): [(None, '-', 3346)],
         (3350, 5, 3346): [(None, '-', 3346)],
         (3351, 4, 3346): [(None, '-', 3346)]}],
 3347: [['1', 'break'],
        "break_stmt: 'break'",
        (3347, 0, 3347),
        {(3347, 0, 3347): [('break', 1, 3347)],
         ('break', 1, 3347): [(None, '-', 3347)]}],
 3348: [['1', 'continue'],
        "continue_stmt: 'continue'",
        (3348, 0, 3348),
        {(3348, 0, 3348): [('continue', 1, 3348)],
         ('continue', 1, 3348): [(None, '-', 3348)]}],
 3349: [['1', 'return', ['?', 3398]],
        "return_stmt: 'return' [ testlist ]",
        (3349, 0, 3349),
        {(3349, 0, 3349): [('return', 1, 3349)],
         (3398, 2, 3349): [(None, '-', 3349)],
         ('return', 1, 3349): [(3398, 2, 3349), (None, '-', 3349)]}],
 3350: [['1', 3411],
        'yield_stmt: yield_expr',
        (3350, 0, 3350),
        {(3350, 0, 3350): [(3411, 1, 3350)],
         (3411, 1, 3350): [(None, '-', 3350)]}],
 3351: [['1', 'raise', ['?', 3375, ['?', 3084, 3375, ['?', 3084, 3375]]]],
        "raise_stmt: 'raise' [ test[ ',' test[ ',' test ]]]",
        (3351, 0, 3351),
        {(3084, 3, 3351): [(3375, 4, 3351)],
         (3084, 5, 3351): [(3375, 6, 3351)],
         (3351, 0, 3351): [('raise', 1, 3351)],
         (3375, 2, 3351): [(3084, 3, 3351), (None, '-', 3351)],
         (3375, 4, 3351): [(3084, 5, 3351), (None, '-', 3351)],
         (3375, 6, 3351): [(None, '-', 3351)],
         ('raise', 1, 3351): [(3375, 2, 3351), (None, '-', 3351)]}],
 3352: [['|', ['1', 3353], ['1', 3354]],
        'import_stmt: import_name | import_from',
        (3352, 0, 3352),
        {(3352, 0, 3352): [(3353, 1, 3352), (3354, 2, 3352)],
         (3353, 1, 3352): [(None, '-', 3352)],
         (3354, 2, 3352): [(None, '-', 3352)]}],
 3353: [['1', 'import', 3358],
        "import_name: 'import' dotted_as_names",
        (3353, 0, 3353),
        {(3353, 0, 3353): [('import', 1, 3353)],
         (3358, 2, 3353): [(None, '-', 3353)],
         ('import', 1, 3353): [(3358, 2, 3353)]}],
 3354: [['1',
         'from',
         ['|', ['1', ['*', 3095], 3359], ['1', 3095, ['*', 3095]]],
         'import',
         ['|', ['1', 3088], ['1', 3079, 3357, 3080], ['1', 3357]]],
        "import_from: ( 'from' ( '.' * dotted_name | '.' + ) 'import' ( '*' | '(' import_as_names ')' | import_as_names ))",
        (3354, 0, 3354),
        {(3079, 8, 3354): [(3357, 9, 3354)],
         (3080, 10, 3354): [(None, '-', 3354)],
         (3088, 7, 3354): [(None, '-', 3354)],
         (3095, 2, 3354): [(3359, 3, 3354), (3095, 2, 3354)],
         (3095, 4, 3354): [(3095, 5, 3354), ('import', 6, 3354)],
         (3095, 5, 3354): [(3095, 5, 3354), ('import', 6, 3354)],
         (3354, 0, 3354): [('from', 1, 3354)],
         (3357, 9, 3354): [(3080, 10, 3354)],
         (3357, 11, 3354): [(None, '-', 3354)],
         (3359, 3, 3354): [('import', 6, 3354)],
         ('from', 1, 3354): [(3095, 4, 3354),
                             (3359, 3, 3354),
                             (3095, 2, 3354)],
         ('import', 6, 3354): [(3079, 8, 3354),
                               (3088, 7, 3354),
                               (3357, 11, 3354)]}],
 3355: [['1', 3073, ['?', ['|', ['1', 'as'], ['1', 3073]], 3073]],
        "import_as_name: NAME[( 'as' | NAME ) NAME ]",
        (3355, 0, 3355),
        {(3073, 1, 3355): [(3073, 3, 3355),
                           (None, '-', 3355),
                           ('as', 2, 3355)],
         (3073, 3, 3355): [(3073, 4, 3355)],
         (3073, 4, 3355): [(None, '-', 3355)],
         (3355, 0, 3355): [(3073, 1, 3355)],
         ('as', 2, 3355): [(3073, 4, 3355)]}],
 3356: [['1', 3359, ['?', ['|', ['1', 'as'], ['1', 3073]], 3073]],
        "dotted_as_name: dotted_name[( 'as' | NAME ) NAME ]",
        (3356, 0, 3356),
        {(3073, 3, 3356): [(3073, 4, 3356)],
         (3073, 4, 3356): [(None, '-', 3356)],
         (3356, 0, 3356): [(3359, 1, 3356)],
         (3359, 1, 3356): [(3073, 3, 3356),
                           (None, '-', 3356),
                           ('as', 2, 3356)],
         ('as', 2, 3356): [(3073, 4, 3356)]}],
 3357: [['1', 3355, ['*', 3084, 3355], ['?', 3084]],
        "import_as_names: import_as_name( ',' import_as_name ) * [ ',' ]",
        (3357, 0, 3357),
        {(3084, 2, 3357): [(3355, 3, 3357)],
         (3084, 4, 3357): [(None, '-', 3357)],
         (3355, 1, 3357): [(3084, 2, 3357),
                           (3084, 4, 3357),
                           (None, '-', 3357)],
         (3355, 3, 3357): [(3084, 2, 3357),
                           (3084, 4, 3357),
                           (None, '-', 3357)],
         (3357, 0, 3357): [(3355, 1, 3357)]}],
 3358: [['1', 3356, ['*', 3084, 3356]],
        "dotted_as_names: dotted_as_name( ',' dotted_as_name ) *",
        (3358, 0, 3358),
        {(3084, 2, 3358): [(3356, 3, 3358)],
         (3356, 1, 3358): [(3084, 2, 3358), (None, '-', 3358)],
         (3356, 3, 3358): [(3084, 2, 3358), (None, '-', 3358)],
         (3358, 0, 3358): [(3356, 1, 3358)]}],
 3359: [['1', 3073, ['*', 3095, 3073]],
        "dotted_name: NAME( '.' NAME ) *",
        (3359, 0, 3359),
        {(3073, 1, 3359): [(3095, 2, 3359), (None, '-', 3359)],
         (3073, 3, 3359): [(3095, 2, 3359), (None, '-', 3359)],
         (3095, 2, 3359): [(3073, 3, 3359)],
         (3359, 0, 3359): [(3073, 1, 3359)]}],
 3360: [['1', 'global', 3073, ['*', 3084, 3073]],
        "global_stmt: 'global' NAME( ',' NAME ) *",
        (3360, 0, 3360),
        {(3073, 2, 3360): [(3084, 3, 3360), (None, '-', 3360)],
         (3073, 4, 3360): [(3084, 3, 3360), (None, '-', 3360)],
         (3084, 3, 3360): [(3073, 4, 3360)],
         (3360, 0, 3360): [('global', 1, 3360)],
         ('global', 1, 3360): [(3073, 2, 3360)]}],
 3361: [['1', 'exec', 3381, ['?', 'in', 3375, ['?', 3084, 3375]]],
        "exec_stmt: 'exec' expr[ 'in' test[ ',' test ]]",
        (3361, 0, 3361),
        {(3084, 5, 3361): [(3375, 6, 3361)],
         (3361, 0, 3361): [('exec', 1, 3361)],
         (3375, 4, 3361): [(3084, 5, 3361), (None, '-', 3361)],
         (3375, 6, 3361): [(None, '-', 3361)],
         (3381, 2, 3361): [('in', 3, 3361), (None, '-', 3361)],
         ('exec', 1, 3361): [(3381, 2, 3361)],
         ('in', 3, 3361): [(3375, 4, 3361)]}],
 3362: [['1', 'assert', 3375, ['?', 3084, 3375]],
        "assert_stmt: 'assert' test[ ',' test ]",
        (3362, 0, 3362),
        {(3084, 3, 3362): [(3375, 4, 3362)],
         (3362, 0, 3362): [('assert', 1, 3362)],
         (3375, 2, 3362): [(3084, 3, 3362), (None, '-', 3362)],
         (3375, 4, 3362): [(None, '-', 3362)],
         ('assert', 1, 3362): [(3375, 2, 3362)]}],
 3363: [['|',
         ['1', 3364],
         ['1', 3365],
         ['1', 3366],
         ['1', 3367],
         ['1', 3368],
         ['1', 3333],
         ['1', 3400]],
        'compound_stmt: if_stmt | while_stmt | for_stmt | try_stmt | with_stmt | funcdef | classdef',
        (3363, 0, 3363),
        {(3333, 6, 3363): [(None, '-', 3363)],
         (3363, 0, 3363): [(3367, 4, 3363),
                           (3333, 6, 3363),
                           (3364, 1, 3363),
                           (3368, 5, 3363),
                           (3366, 3, 3363),
                           (3400, 7, 3363),
                           (3365, 2, 3363)],
         (3364, 1, 3363): [(None, '-', 3363)],
         (3365, 2, 3363): [(None, '-', 3363)],
         (3366, 3, 3363): [(None, '-', 3363)],
         (3367, 4, 3363): [(None, '-', 3363)],
         (3368, 5, 3363): [(None, '-', 3363)],
         (3400, 7, 3363): [(None, '-', 3363)]}],
 3364: [['1',
         'if',
         3375,
         3083,
         3371,
         ['*', 'elif', 3375, 3083, 3371],
         ['?', 'else', 3083, 3371]],
        "if_stmt: 'if' test ':' suite( 'elif' test ':' suite ) * [ 'else' ':' suite ]",
        (3364, 0, 3364),
        {(3083, 3, 3364): [(3371, 4, 3364)],
         (3083, 7, 3364): [(3371, 8, 3364)],
         (3083, 10, 3364): [(3371, 11, 3364)],
         (3364, 0, 3364): [('if', 1, 3364)],
         (3371, 4, 3364): [('elif', 5, 3364),
                           (None, '-', 3364),
                           ('else', 9, 3364)],
         (3371, 8, 3364): [('elif', 5, 3364),
                           (None, '-', 3364),
                           ('else', 9, 3364)],
         (3371, 11, 3364): [(None, '-', 3364)],
         (3375, 2, 3364): [(3083, 3, 3364)],
         (3375, 6, 3364): [(3083, 7, 3364)],
         ('elif', 5, 3364): [(3375, 6, 3364)],
         ('else', 9, 3364): [(3083, 10, 3364)],
         ('if', 1, 3364): [(3375, 2, 3364)]}],
 3365: [['1', 'while', 3375, 3083, 3371, ['?', 'else', 3083, 3371]],
        "while_stmt: 'while' test ':' suite[ 'else' ':' suite ]",
        (3365, 0, 3365),
        {(3083, 3, 3365): [(3371, 4, 3365)],
         (3083, 6, 3365): [(3371, 7, 3365)],
         (3365, 0, 3365): [('while', 1, 3365)],
         (3371, 4, 3365): [('else', 5, 3365), (None, '-', 3365)],
         (3371, 7, 3365): [(None, '-', 3365)],
         (3375, 2, 3365): [(3083, 3, 3365)],
         ('else', 5, 3365): [(3083, 6, 3365)],
         ('while', 1, 3365): [(3375, 2, 3365)]}],
 3366: [['1', 'for', 3397, 'in', 3398, 3083, 3371, ['?', 'else', 3083, 3371]],
        "for_stmt: 'for' exprlist 'in' testlist ':' suite[ 'else' ':' suite ]",
        (3366, 0, 3366),
        {(3083, 5, 3366): [(3371, 6, 3366)],
         (3083, 8, 3366): [(3371, 9, 3366)],
         (3366, 0, 3366): [('for', 1, 3366)],
         (3371, 6, 3366): [('else', 7, 3366), (None, '-', 3366)],
         (3371, 9, 3366): [(None, '-', 3366)],
         (3397, 2, 3366): [('in', 3, 3366)],
         (3398, 4, 3366): [(3083, 5, 3366)],
         ('else', 7, 3366): [(3083, 8, 3366)],
         ('for', 1, 3366): [(3397, 2, 3366)],
         ('in', 3, 3366): [(3398, 4, 3366)]}],
 3367: [['1',
         'try',
         3083,
         3371,
         ['|',
          ['1',
           ['1', 3370, 3083, 3371],
           ['*', 3370, 3083, 3371],
           ['?', 'else', 3083, 3371],
           ['?', 'finally', 3083, 3371]],
          ['1', 'finally', 3083, 3371]]],
        "try_stmt: ( 'try' ':' suite(( except_clause ':' suite ) + [ 'else' ':' suite ][ 'finally' ':' suite ] | 'finally' ':' suite ))",
        (3367, 0, 3367),
        {(3083, 2, 3367): [(3371, 3, 3367)],
         (3083, 5, 3367): [(3371, 6, 3367)],
         (3083, 8, 3367): [(3371, 9, 3367)],
         (3083, 11, 3367): [(3371, 12, 3367)],
         (3083, 14, 3367): [(3371, 15, 3367)],
         (3083, 17, 3367): [(3371, 18, 3367)],
         (3367, 0, 3367): [('try', 1, 3367)],
         (3370, 4, 3367): [(3083, 5, 3367)],
         (3370, 7, 3367): [(3083, 8, 3367)],
         (3371, 3, 3367): [('finally', 16, 3367), (3370, 4, 3367)],
         (3371, 6, 3367): [(3370, 7, 3367),
                           ('finally', 13, 3367),
                           ('else', 10, 3367),
                           (None, '-', 3367)],
         (3371, 9, 3367): [(3370, 7, 3367),
                           ('finally', 13, 3367),
                           ('else', 10, 3367),
                           (None, '-', 3367)],
         (3371, 12, 3367): [('finally', 13, 3367), (None, '-', 3367)],
         (3371, 15, 3367): [(None, '-', 3367)],
         (3371, 18, 3367): [(None, '-', 3367)],
         ('else', 10, 3367): [(3083, 11, 3367)],
         ('finally', 13, 3367): [(3083, 14, 3367)],
         ('finally', 16, 3367): [(3083, 17, 3367)],
         ('try', 1, 3367): [(3083, 2, 3367)]}],
 3368: [['1', 'with', 3375, ['?', 3369], 3083, 3371],
        "with_stmt: 'with' test[ with_var ] ':' suite",
        (3368, 0, 3368),
        {(3083, 4, 3368): [(3371, 5, 3368)],
         (3368, 0, 3368): [('with', 1, 3368)],
         (3369, 3, 3368): [(3083, 4, 3368)],
         (3371, 5, 3368): [(None, '-', 3368)],
         (3375, 2, 3368): [(3369, 3, 3368), (3083, 4, 3368)],
         ('with', 1, 3368): [(3375, 2, 3368)]}],
 3369: [['1', ['|', ['1', 'as'], ['1', 3073]], 3381],
        "with_var: ( 'as' | NAME ) expr",
        (3369, 0, 3369),
        {(3073, 2, 3369): [(3381, 3, 3369)],
         (3369, 0, 3369): [(3073, 2, 3369), ('as', 1, 3369)],
         (3381, 3, 3369): [(None, '-', 3369)],
         ('as', 1, 3369): [(3381, 3, 3369)]}],
 3370: [['1', 'except', ['?', 3375, ['?', 3084, 3375]]],
        "except_clause: 'except' [ test[ ',' test ]]",
        (3370, 0, 3370),
        {(3084, 3, 3370): [(3375, 4, 3370)],
         (3370, 0, 3370): [('except', 1, 3370)],
         (3375, 2, 3370): [(3084, 3, 3370), (None, '-', 3370)],
         (3375, 4, 3370): [(None, '-', 3370)],
         ('except', 1, 3370): [(3375, 2, 3370), (None, '-', 3370)]}],
 3371: [['|', ['1', 3339], ['1', 3076, 3077, 3338, ['*', 3338], 3078]],
        'suite: simple_stmt | NEWLINE INDENT stmt + DEDENT',
        (3371, 0, 3371),
        {(3076, 2, 3371): [(3077, 3, 3371)],
         (3077, 3, 3371): [(3338, 4, 3371)],
         (3078, 6, 3371): [(None, '-', 3371)],
         (3338, 4, 3371): [(3338, 5, 3371), (3078, 6, 3371)],
         (3338, 5, 3371): [(3338, 5, 3371), (3078, 6, 3371)],
         (3339, 1, 3371): [(None, '-', 3371)],
         (3371, 0, 3371): [(3076, 2, 3371), (3339, 1, 3371)]}],
 3372: [['1', 3373, ['?', ['1', 3084, 3373], ['*', 3084, 3373], ['?', 3084]]],
        "testlist_safe: old_test[( ',' old_test ) + [ ',' ]]",
        (3372, 0, 3372),
        {(3084, 2, 3372): [(3373, 3, 3372)],
         (3084, 4, 3372): [(3373, 5, 3372)],
         (3084, 6, 3372): [(None, '-', 3372)],
         (3372, 0, 3372): [(3373, 1, 3372)],
         (3373, 1, 3372): [(3084, 2, 3372), (None, '-', 3372)],
         (3373, 3, 3372): [(3084, 4, 3372),
                           (3084, 6, 3372),
                           (None, '-', 3372)],
         (3373, 5, 3372): [(3084, 4, 3372),
                           (3084, 6, 3372),
                           (None, '-', 3372)]}],
 3373: [['|', ['1', 3376], ['1', 3374]],
        'old_test: or_test | old_lambdef',
        (3373, 0, 3373),
        {(3373, 0, 3373): [(3376, 1, 3373), (3374, 2, 3373)],
         (3374, 2, 3373): [(None, '-', 3373)],
         (3376, 1, 3373): [(None, '-', 3373)]}],
 3374: [['1', 'lambda', ['?', 3335], 3083, 3373],
        "old_lambdef: 'lambda' [ varargslist ] ':' old_test",
        (3374, 0, 3374),
        {(3083, 3, 3374): [(3373, 4, 3374)],
         (3335, 2, 3374): [(3083, 3, 3374)],
         (3373, 4, 3374): [(None, '-', 3374)],
         (3374, 0, 3374): [('lambda', 1, 3374)],
         ('lambda', 1, 3374): [(3083, 3, 3374), (3335, 2, 3374)]}],
 3375: [['|', ['1', 3376, ['?', 'if', 3376, 'else', 3375]], ['1', 3392]],
        "test: or_test[ 'if' or_test 'else' test ] | lambdef",
        (3375, 0, 3375),
        {(3375, 0, 3375): [(3376, 1, 3375), (3392, 6, 3375)],
         (3375, 5, 3375): [(None, '-', 3375)],
         (3376, 1, 3375): [('if', 2, 3375), (None, '-', 3375)],
         (3376, 3, 3375): [('else', 4, 3375)],
         (3392, 6, 3375): [(None, '-', 3375)],
         ('else', 4, 3375): [(3375, 5, 3375)],
         ('if', 2, 3375): [(3376, 3, 3375)]}],
 3376: [['1', 3377, ['*', 'or', 3377]],
        "or_test: and_test( 'or' and_test ) *",
        (3376, 0, 3376),
        {(3376, 0, 3376): [(3377, 1, 3376)],
         (3377, 1, 3376): [('or', 2, 3376), (None, '-', 3376)],
         (3377, 3, 3376): [('or', 2, 3376), (None, '-', 3376)],
         ('or', 2, 3376): [(3377, 3, 3376)]}],
 3377: [['1', 3378, ['*', 'and', 3378]],
        "and_test: not_test( 'and' not_test ) *",
        (3377, 0, 3377),
        {(3377, 0, 3377): [(3378, 1, 3377)],
         (3378, 1, 3377): [('and', 2, 3377), (None, '-', 3377)],
         (3378, 3, 3377): [('and', 2, 3377), (None, '-', 3377)],
         ('and', 2, 3377): [(3378, 3, 3377)]}],
 3378: [['|', ['1', 'not', 3378], ['1', 3379]],
        "not_test: 'not' not_test | comparison",
        (3378, 0, 3378),
        {(3378, 0, 3378): [('not', 1, 3378), (3379, 3, 3378)],
         (3378, 2, 3378): [(None, '-', 3378)],
         (3379, 3, 3378): [(None, '-', 3378)],
         ('not', 1, 3378): [(3378, 2, 3378)]}],
 3379: [['1', 3381, ['*', 3380, 3381]],
        'comparison: expr( comp_op expr ) *',
        (3379, 0, 3379),
        {(3379, 0, 3379): [(3381, 1, 3379)],
         (3380, 2, 3379): [(3381, 3, 3379)],
         (3381, 1, 3379): [(3380, 2, 3379), (None, '-', 3379)],
         (3381, 3, 3379): [(3380, 2, 3379), (None, '-', 3379)]}],
 3380: [['|',
         ['1', 3092],
         ['1', 3093],
         ['1', 3100],
         ['1', 3103],
         ['1', 3102],
         ['1', '<>'],
         ['1', 3101],
         ['1', 'in'],
         ['1', 'not', 'in'],
         ['1', 'is'],
         ['1', 'is', 'not']],
        "comp_op: '<' | '>' | '==' | '>=' | '<=' | '<>' | '!=' | 'in' | 'not' 'in' | 'is' | 'is' 'not'",
        (3380, 0, 3380),
        {(3092, 1, 3380): [(None, '-', 3380)],
         (3093, 2, 3380): [(None, '-', 3380)],
         (3100, 3, 3380): [(None, '-', 3380)],
         (3101, 7, 3380): [(None, '-', 3380)],
         (3102, 5, 3380): [(None, '-', 3380)],
         (3103, 4, 3380): [(None, '-', 3380)],
         (3380, 0, 3380): [('not', 9, 3380),
                           (3101, 7, 3380),
                           ('is', 11, 3380),
                           (3103, 4, 3380),
                           (3092, 1, 3380),
                           ('in', 8, 3380),
                           (3093, 2, 3380),
                           ('is', 12, 3380),
                           (3100, 3, 3380),
                           (3102, 5, 3380),
                           ('<>', 6, 3380)],
         ('<>', 6, 3380): [(None, '-', 3380)],
         ('in', 8, 3380): [(None, '-', 3380)],
         ('in', 10, 3380): [(None, '-', 3380)],
         ('is', 11, 3380): [(None, '-', 3380)],
         ('is', 12, 3380): [('not', 13, 3380)],
         ('not', 9, 3380): [('in', 10, 3380)],
         ('not', 13, 3380): [(None, '-', 3380)]}],
 3381: [['1', 3382, ['*', 3090, 3382]],
        "expr: xor_expr( '|' xor_expr ) *",
        (3381, 0, 3381),
        {(3090, 2, 3381): [(3382, 3, 3381)],
         (3381, 0, 3381): [(3382, 1, 3381)],
         (3382, 1, 3381): [(None, '-', 3381), (3090, 2, 3381)],
         (3382, 3, 3381): [(3090, 2, 3381), (None, '-', 3381)]}],
 3382: [['1', 3383, ['*', 3105, 3383]],
        "xor_expr: and_expr( '^' and_expr ) *",
        (3382, 0, 3382),
        {(3105, 2, 3382): [(3383, 3, 3382)],
         (3382, 0, 3382): [(3383, 1, 3382)],
         (3383, 1, 3382): [(3105, 2, 3382), (None, '-', 3382)],
         (3383, 3, 3382): [(3105, 2, 3382), (None, '-', 3382)]}],
 3383: [['1', 3384, ['*', 3091, 3384]],
        "and_expr: shift_expr( '&' shift_expr ) *",
        (3383, 0, 3383),
        {(3091, 2, 3383): [(3384, 3, 3383)],
         (3383, 0, 3383): [(3384, 1, 3383)],
         (3384, 1, 3383): [(3091, 2, 3383), (None, '-', 3383)],
         (3384, 3, 3383): [(3091, 2, 3383), (None, '-', 3383)]}],
 3384: [['1', 3385, ['*', ['|', ['1', 3106], ['1', 3107]], 3385]],
        "shift_expr: arith_expr(( '<<' | '>>' ) arith_expr ) *",
        (3384, 0, 3384),
        {(3106, 2, 3384): [(3385, 4, 3384)],
         (3107, 3, 3384): [(3385, 4, 3384)],
         (3384, 0, 3384): [(3385, 1, 3384)],
         (3385, 1, 3384): [(None, '-', 3384),
                           (3107, 3, 3384),
                           (3106, 2, 3384)],
         (3385, 4, 3384): [(3106, 2, 3384),
                           (3107, 3, 3384),
                           (None, '-', 3384)]}],
 3385: [['1', 3386, ['*', ['|', ['1', 3086], ['1', 3087]], 3386]],
        "arith_expr: term(( '+' | '-' ) term ) *",
        (3385, 0, 3385),
        {(3086, 2, 3385): [(3386, 4, 3385)],
         (3087, 3, 3385): [(3386, 4, 3385)],
         (3385, 0, 3385): [(3386, 1, 3385)],
         (3386, 1, 3385): [(3087, 3, 3385),
                           (3086, 2, 3385),
                           (None, '-', 3385)],
         (3386, 4, 3385): [(3087, 3, 3385),
                           (3086, 2, 3385),
                           (None, '-', 3385)]}],
 3386: [['1',
         3387,
         ['*',
          ['|', ['1', 3088], ['1', 3089], ['1', 3096], ['1', 3120]],
          3387]],
        "term: factor(( '*' | '/' | '%' | '//' ) factor ) *",
        (3386, 0, 3386),
        {(3088, 2, 3386): [(3387, 6, 3386)],
         (3089, 3, 3386): [(3387, 6, 3386)],
         (3096, 4, 3386): [(3387, 6, 3386)],
         (3120, 5, 3386): [(3387, 6, 3386)],
         (3386, 0, 3386): [(3387, 1, 3386)],
         (3387, 1, 3386): [(3089, 3, 3386),
                           (3120, 5, 3386),
                           (3088, 2, 3386),
                           (None, '-', 3386),
                           (3096, 4, 3386)],
         (3387, 6, 3386): [(3096, 4, 3386),
                           (3089, 3, 3386),
                           (3120, 5, 3386),
                           (3088, 2, 3386),
                           (None, '-', 3386)]}],
 3387: [['|',
         ['1', ['|', ['1', 3086], ['1', 3087], ['1', 3104]], 3387],
         ['1', 3388]],
        "factor: ( '+' | '-' | '~' ) factor | power",
        (3387, 0, 3387),
        {(3086, 1, 3387): [(3387, 4, 3387)],
         (3087, 2, 3387): [(3387, 4, 3387)],
         (3104, 3, 3387): [(3387, 4, 3387)],
         (3387, 0, 3387): [(3388, 5, 3387),
                           (3086, 1, 3387),
                           (3104, 3, 3387),
                           (3087, 2, 3387)],
         (3387, 4, 3387): [(None, '-', 3387)],
         (3388, 5, 3387): [(None, '-', 3387)]}],
 3388: [['1', 3389, ['*', 3393], ['?', 3108, 3387]],
        "power: atom trailer * [ '**' factor ]",
        (3388, 0, 3388),
        {(3108, 3, 3388): [(3387, 4, 3388)],
         (3387, 4, 3388): [(None, '-', 3388)],
         (3388, 0, 3388): [(3389, 1, 3388)],
         (3389, 1, 3388): [(3393, 2, 3388),
                           (3108, 3, 3388),
                           (None, '-', 3388)],
         (3393, 2, 3388): [(3393, 2, 3388),
                           (3108, 3, 3388),
                           (None, '-', 3388)]}],
 3389: [['|',
         ['1', 3079, ['?', ['|', ['1', 3411], ['1', 3391]]], 3080],
         ['1', 3081, ['?', 3390], 3082],
         ['1', 3098, ['?', 3399], 3099],
         ['1', 3097, 3409, 3097],
         ['1', 3073],
         ['1', 3074],
         ['1', 3075, ['*', 3075]]],
        "atom: ( '(' [ yield_expr | testlist_gexp ] ')' | '[' [ listmaker ] ']' | '{' [ dictmaker ] '}' | '`' testlist1 '`' | NAME | NUMBER | STRING + )",
        (3389, 0, 3389),
        {(3073, 14, 3389): [(None, '-', 3389)],
         (3074, 15, 3389): [(None, '-', 3389)],
         (3075, 16, 3389): [(3075, 17, 3389), (None, '-', 3389)],
         (3075, 17, 3389): [(3075, 17, 3389), (None, '-', 3389)],
         (3079, 1, 3389): [(3391, 3, 3389),
                           (3411, 2, 3389),
                           (3080, 4, 3389)],
         (3080, 4, 3389): [(None, '-', 3389)],
         (3081, 5, 3389): [(3082, 7, 3389), (3390, 6, 3389)],
         (3082, 7, 3389): [(None, '-', 3389)],
         (3097, 11, 3389): [(3409, 12, 3389)],
         (3097, 13, 3389): [(None, '-', 3389)],
         (3098, 8, 3389): [(3099, 10, 3389), (3399, 9, 3389)],
         (3099, 10, 3389): [(None, '-', 3389)],
         (3389, 0, 3389): [(3097, 11, 3389),
                           (3079, 1, 3389),
                           (3073, 14, 3389),
                           (3098, 8, 3389),
                           (3074, 15, 3389),
                           (3081, 5, 3389),
                           (3075, 16, 3389)],
         (3390, 6, 3389): [(3082, 7, 3389)],
         (3391, 3, 3389): [(3080, 4, 3389)],
         (3399, 9, 3389): [(3099, 10, 3389)],
         (3409, 12, 3389): [(3097, 13, 3389)],
         (3411, 2, 3389): [(3080, 4, 3389)]}],
 3390: [['1',
         3375,
         ['|', ['1', 3404], ['1', ['*', 3084, 3375], ['?', 3084]]]],
        "listmaker: test( list_for | ( ',' test ) * [ ',' ])",
        (3390, 0, 3390),
        {(3084, 3, 3390): [(3375, 4, 3390)],
         (3084, 5, 3390): [(None, '-', 3390)],
         (3375, 1, 3390): [(3084, 5, 3390),
                           (3404, 2, 3390),
                           (3084, 3, 3390),
                           (None, '-', 3390)],
         (3375, 4, 3390): [(3084, 5, 3390),
                           (3084, 3, 3390),
                           (None, '-', 3390)],
         (3390, 0, 3390): [(3375, 1, 3390)],
         (3404, 2, 3390): [(None, '-', 3390)]}],
 3391: [['1',
         3375,
         ['|', ['1', 3407], ['1', ['*', 3084, 3375], ['?', 3084]]]],
        "testlist_gexp: test( gen_for | ( ',' test ) * [ ',' ])",
        (3391, 0, 3391),
        {(3084, 3, 3391): [(3375, 4, 3391)],
         (3084, 5, 3391): [(None, '-', 3391)],
         (3375, 1, 3391): [(3084, 5, 3391),
                           (3407, 2, 3391),
                           (3084, 3, 3391),
                           (None, '-', 3391)],
         (3375, 4, 3391): [(3084, 5, 3391),
                           (3084, 3, 3391),
                           (None, '-', 3391)],
         (3391, 0, 3391): [(3375, 1, 3391)],
         (3407, 2, 3391): [(None, '-', 3391)]}],
 3392: [['1', 'lambda', ['?', 3335], 3083, 3375],
        "lambdef: 'lambda' [ varargslist ] ':' test",
        (3392, 0, 3392),
        {(3083, 3, 3392): [(3375, 4, 3392)],
         (3335, 2, 3392): [(3083, 3, 3392)],
         (3375, 4, 3392): [(None, '-', 3392)],
         (3392, 0, 3392): [('lambda', 1, 3392)],
         ('lambda', 1, 3392): [(3083, 3, 3392), (3335, 2, 3392)]}],
 3393: [['|',
         ['1', 3079, ['?', 3401], 3080],
         ['1', 3081, 3394, 3082],
         ['1', 3095, 3073]],
        "trailer: '(' [ arglist ] ')' | '[' subscriptlist ']' | '.' NAME",
        (3393, 0, 3393),
        {(3073, 8, 3393): [(None, '-', 3393)],
         (3079, 1, 3393): [(3401, 2, 3393), (3080, 3, 3393)],
         (3080, 3, 3393): [(None, '-', 3393)],
         (3081, 4, 3393): [(3394, 5, 3393)],
         (3082, 6, 3393): [(None, '-', 3393)],
         (3095, 7, 3393): [(3073, 8, 3393)],
         (3393, 0, 3393): [(3095, 7, 3393),
                           (3081, 4, 3393),
                           (3079, 1, 3393)],
         (3394, 5, 3393): [(3082, 6, 3393)],
         (3401, 2, 3393): [(3080, 3, 3393)]}],
 3394: [['1', 3395, ['*', 3084, 3395], ['?', 3084]],
        "subscriptlist: subscript( ',' subscript ) * [ ',' ]",
        (3394, 0, 3394),
        {(3084, 2, 3394): [(3395, 3, 3394)],
         (3084, 4, 3394): [(None, '-', 3394)],
         (3394, 0, 3394): [(3395, 1, 3394)],
         (3395, 1, 3394): [(3084, 2, 3394),
                           (3084, 4, 3394),
                           (None, '-', 3394)],
         (3395, 3, 3394): [(3084, 2, 3394),
                           (3084, 4, 3394),
                           (None, '-', 3394)]}],
 3395: [['|',
         ['1', 3095, 3095, 3095],
         ['1', 3375],
         ['1', ['?', 3375], 3083, ['?', 3375], ['?', 3396]]],
        "subscript: '.' '.' '.' | test | [ test ] ':' [ test ][ sliceop ]",
        (3395, 0, 3395),
        {(3083, 6, 3395): [(None, '-', 3395),
                           (3375, 7, 3395),
                           (3396, 8, 3395)],
         (3095, 1, 3395): [(3095, 2, 3395)],
         (3095, 2, 3395): [(3095, 3, 3395)],
         (3095, 3, 3395): [(None, '-', 3395)],
         (3375, 4, 3395): [(None, '-', 3395)],
         (3375, 5, 3395): [(3083, 6, 3395)],
         (3375, 7, 3395): [(None, '-', 3395), (3396, 8, 3395)],
         (3395, 0, 3395): [(3375, 4, 3395),
                           (3375, 5, 3395),
                           (3083, 6, 3395),
                           (3095, 1, 3395)],
         (3396, 8, 3395): [(None, '-', 3395)]}],
 3396: [['1', 3083, ['?', 3375]],
        "sliceop: ':' [ test ]",
        (3396, 0, 3396),
        {(3083, 1, 3396): [(3375, 2, 3396), (None, '-', 3396)],
         (3375, 2, 3396): [(None, '-', 3396)],
         (3396, 0, 3396): [(3083, 1, 3396)]}],
 3397: [['1', 3381, ['*', 3084, 3381], ['?', 3084]],
        "exprlist: expr( ',' expr ) * [ ',' ]",
        (3397, 0, 3397),
        {(3084, 2, 3397): [(3381, 3, 3397)],
         (3084, 4, 3397): [(None, '-', 3397)],
         (3381, 1, 3397): [(3084, 2, 3397),
                           (3084, 4, 3397),
                           (None, '-', 3397)],
         (3381, 3, 3397): [(3084, 2, 3397),
                           (3084, 4, 3397),
                           (None, '-', 3397)],
         (3397, 0, 3397): [(3381, 1, 3397)]}],
 3398: [['1', 3375, ['*', 3084, 3375], ['?', 3084]],
        "testlist: test( ',' test ) * [ ',' ]",
        (3398, 0, 3398),
        {(3084, 2, 3398): [(3375, 3, 3398)],
         (3084, 4, 3398): [(None, '-', 3398)],
         (3375, 1, 3398): [(3084, 2, 3398),
                           (3084, 4, 3398),
                           (None, '-', 3398)],
         (3375, 3, 3398): [(3084, 2, 3398),
                           (3084, 4, 3398),
                           (None, '-', 3398)],
         (3398, 0, 3398): [(3375, 1, 3398)]}],
 3399: [['1', 3375, 3083, 3375, ['*', 3084, 3375, 3083, 3375], ['?', 3084]],
        "dictmaker: test ':' test( ',' test ':' test ) * [ ',' ]",
        (3399, 0, 3399),
        {(3083, 2, 3399): [(3375, 3, 3399)],
         (3083, 6, 3399): [(3375, 7, 3399)],
         (3084, 4, 3399): [(3375, 5, 3399)],
         (3084, 8, 3399): [(None, '-', 3399)],
         (3375, 1, 3399): [(3083, 2, 3399)],
         (3375, 3, 3399): [(3084, 4, 3399),
                           (None, '-', 3399),
                           (3084, 8, 3399)],
         (3375, 5, 3399): [(3083, 6, 3399)],
         (3375, 7, 3399): [(3084, 4, 3399),
                           (None, '-', 3399),
                           (3084, 8, 3399)],
         (3399, 0, 3399): [(3375, 1, 3399)]}],
 3400: [['1', 'class', 3073, ['?', 3079, ['?', 3398], 3080], 3083, 3371],
        "classdef: 'class' NAME[ '(' [ testlist ] ')' ] ':' suite",
        (3400, 0, 3400),
        {(3073, 2, 3400): [(3079, 3, 3400), (3083, 6, 3400)],
         (3079, 3, 3400): [(3398, 4, 3400), (3080, 5, 3400)],
         (3080, 5, 3400): [(3083, 6, 3400)],
         (3083, 6, 3400): [(3371, 7, 3400)],
         (3371, 7, 3400): [(None, '-', 3400)],
         (3398, 4, 3400): [(3080, 5, 3400)],
         (3400, 0, 3400): [('class', 1, 3400)],
         ('class', 1, 3400): [(3073, 2, 3400)]}],
 3401: [['1',
         ['*', 3402, 3084],
         ['|',
          ['1', 3402, ['?', 3084]],
          ['1', 3088, 3375, ['?', 3084, 3108, 3375]],
          ['1', 3108, 3375]]],
        "arglist: ( argument ',' ) * ( argument[ ',' ] | '*' test[ ',' '**' test ] | '**' test )",
        (3401, 0, 3401),
        {(3084, 2, 3401): [(3088, 5, 3401),
                           (3402, 3, 3401),
                           (3402, 1, 3401),
                           (3108, 10, 3401)],
         (3084, 4, 3401): [(None, '-', 3401)],
         (3084, 7, 3401): [(3108, 8, 3401)],
         (3088, 5, 3401): [(3375, 6, 3401)],
         (3108, 8, 3401): [(3375, 9, 3401)],
         (3108, 10, 3401): [(3375, 11, 3401)],
         (3375, 6, 3401): [(3084, 7, 3401), (None, '-', 3401)],
         (3375, 9, 3401): [(None, '-', 3401)],
         (3375, 11, 3401): [(None, '-', 3401)],
         (3401, 0, 3401): [(3088, 5, 3401),
                           (3402, 3, 3401),
                           (3402, 1, 3401),
                           (3108, 10, 3401)],
         (3402, 1, 3401): [(3084, 2, 3401)],
         (3402, 3, 3401): [(3084, 4, 3401), (None, '-', 3401)]}],
 3402: [['|', ['1', 3375, ['?', 3407]], ['1', 3375, 3094, 3375]],
        "argument: test[ gen_for ] | test '=' test",
        (3402, 0, 3402),
        {(3094, 4, 3402): [(3375, 5, 3402)],
         (3375, 1, 3402): [(3407, 2, 3402), (None, '-', 3402)],
         (3375, 3, 3402): [(3094, 4, 3402)],
         (3375, 5, 3402): [(None, '-', 3402)],
         (3402, 0, 3402): [(3375, 3, 3402), (3375, 1, 3402)],
         (3407, 2, 3402): [(None, '-', 3402)]}],
 3403: [['|', ['1', 3404], ['1', 3405]],
        'list_iter: list_for | list_if',
        (3403, 0, 3403),
        {(3403, 0, 3403): [(3405, 2, 3403), (3404, 1, 3403)],
         (3404, 1, 3403): [(None, '-', 3403)],
         (3405, 2, 3403): [(None, '-', 3403)]}],
 3404: [['1', 'for', 3397, 'in', 3372, ['?', 3403]],
        "list_for: 'for' exprlist 'in' testlist_safe[ list_iter ]",
        (3404, 0, 3404),
        {(3372, 4, 3404): [(None, '-', 3404), (3403, 5, 3404)],
         (3397, 2, 3404): [('in', 3, 3404)],
         (3403, 5, 3404): [(None, '-', 3404)],
         (3404, 0, 3404): [('for', 1, 3404)],
         ('for', 1, 3404): [(3397, 2, 3404)],
         ('in', 3, 3404): [(3372, 4, 3404)]}],
 3405: [['1', 'if', 3373, ['?', 3403]],
        "list_if: 'if' old_test[ list_iter ]",
        (3405, 0, 3405),
        {(3373, 2, 3405): [(3403, 3, 3405), (None, '-', 3405)],
         (3403, 3, 3405): [(None, '-', 3405)],
         (3405, 0, 3405): [('if', 1, 3405)],
         ('if', 1, 3405): [(3373, 2, 3405)]}],
 3406: [['|', ['1', 3407], ['1', 3408]],
        'gen_iter: gen_for | gen_if',
        (3406, 0, 3406),
        {(3406, 0, 3406): [(3408, 2, 3406), (3407, 1, 3406)],
         (3407, 1, 3406): [(None, '-', 3406)],
         (3408, 2, 3406): [(None, '-', 3406)]}],
 3407: [['1', 'for', 3397, 'in', 3376, ['?', 3406]],
        "gen_for: 'for' exprlist 'in' or_test[ gen_iter ]",
        (3407, 0, 3407),
        {(3376, 4, 3407): [(3406, 5, 3407), (None, '-', 3407)],
         (3397, 2, 3407): [('in', 3, 3407)],
         (3406, 5, 3407): [(None, '-', 3407)],
         (3407, 0, 3407): [('for', 1, 3407)],
         ('for', 1, 3407): [(3397, 2, 3407)],
         ('in', 3, 3407): [(3376, 4, 3407)]}],
 3408: [['1', 'if', 3373, ['?', 3406]],
        "gen_if: 'if' old_test[ gen_iter ]",
        (3408, 0, 3408),
        {(3373, 2, 3408): [(3406, 3, 3408), (None, '-', 3408)],
         (3406, 3, 3408): [(None, '-', 3408)],
         (3408, 0, 3408): [('if', 1, 3408)],
         ('if', 1, 3408): [(3373, 2, 3408)]}],
 3409: [['1', 3375, ['*', 3084, 3375]],
        "testlist1: test( ',' test ) *",
        (3409, 0, 3409),
        {(3084, 2, 3409): [(3375, 3, 3409)],
         (3375, 1, 3409): [(3084, 2, 3409), (None, '-', 3409)],
         (3375, 3, 3409): [(3084, 2, 3409), (None, '-', 3409)],
         (3409, 0, 3409): [(3375, 1, 3409)]}],
 3410: [['1', 3073],
        'encoding_decl: NAME',
        (3410, 0, 3410),
        {(3073, 1, 3410): [(None, '-', 3410)],
         (3410, 0, 3410): [(3073, 1, 3410)]}],
 3411: [['1', 'yield', ['?', 3398]],
        "yield_expr: 'yield' [ testlist ]",
        (3411, 0, 3411),
        {(3398, 2, 3411): [(None, '-', 3411)],
         (3411, 0, 3411): [('yield', 1, 3411)],
         ('yield', 1, 3411): [(3398, 2, 3411), (None, '-', 3411)]}]}

# expansion targets:

expanded  = {}

# reachables:

reachables = {3328: set([3073, 3074, 3331, 3076, 3333, 3079, 3081, 3339, 3340, 3341, 3086, 3343, 3344, 3345, 3346, 3075, 3348, 3349, 3350, 3351, 3352, 3332, 3098, 3360, 3361, 3362, 3363, 3364, 3365, 3366, 3367, 3368, 3378, 3375, 3376, 3377, 3122, 3379, 3381, 3382, 3383, 3384, 3385, 3386, 3387, 3388, 3389, 3392, 'global', 'return', 3398, 3400, 'assert', 3411, 3097, 'not', 3087, 'with', 'yield', 'try', 'while', 3347, 'del', 'def', 'pass', 3354, 'if', 'for', 'continue', 'print', 'import', 3104, 'exec', 3353, 'from', 'class', 'raise', 'break', 'lambda']),
 3329: set([3072, 3073, 3074, 3075, 3076, 3333, 3079, 3081, 3338, 3339, 3340, 3341, 3086, 3343, 3344, 3345, 3346, 3347, 3348, 3349, 3350, 3351, 3352, 3332, 3098, 3360, 3361, 3362, 3363, 3364, 'raise', 3366, 3367, 3368, 3378, 3375, 3376, 3377, 3122, 3379, 3381, 3382, 3383, 3384, 3385, 3386, 3387, 3388, 3389, 3392, 'global', 'return', 3398, 3400, 'assert', 3411, 3097, 'not', 3087, 'with', 'yield', 'try', 'while', 'continue', 'del', 'def', 'pass', 3354, 'if', 'for', 'print', 'import', 3104, 'exec', 3331, 3353, 'from', 'class', 3365, 'break', 'lambda']),
 3330: set([3392, 3073, 3074, 3075, 3398, 3079, 3081, 3086, 3087, 'not', 3097, 3098, 3104, 3375, 3376, 3377, 3378, 3379, 3381, 3382, 3383, 3384, 3385, 3386, 3387, 3388, 3389, 'lambda']),
 3331: set([3122]),
 3332: set([3122, 3331]),
 3333: set([3122, 3331, 3332, 'def']),
 3334: set([3079]),
 3335: set([3336, 3088, 3079, 3108, 3073]),
 3336: set([3073, 3079]),
 3337: set([3336, 3073, 3079]),
 3338: set([3073, 3074, 3075, 3332, 3333, 3079, 3081, 3339, 3340, 3341, 3086, 3343, 3344, 3345, 3346, 3347, 3348, 3349, 3350, 'pass', 3352, 3097, 3098, 3354, 'if', 3360, 3361, 3362, 3363, 3351, 'raise', 3366, 3364, 3368, 'with', 3122, 3375, 3376, 3377, 3378, 3379, 3381, 3382, 3383, 3384, 3385, 3386, 3387, 3388, 3389, 3392, 3104, 'global', 'return', 3398, 'exec', 3331, 'assert', 'print', 3411, 'import', 'not', 'from', 3087, 3353, 'class', 3365, 3400, 'break', 'for', 3367, 'yield', 'try', 'while', 'continue', 'del', 'def', 'lambda']),
 3339: set([3073, 3074, 3075, 3079, 3081, 'global', 3340, 3341, 3086, 3343, 3344, 3345, 3346, 3347, 3348, 3349, 3350, 'pass', 3352, 3097, 3098, 3354, 3360, 3361, 3362, 3351, 'raise', 3375, 3376, 3377, 3378, 3379, 3381, 3382, 3383, 3384, 3385, 3386, 3387, 3388, 3389, 3392, 3104, 'return', 3398, 'exec', 'assert', 'print', 3411, 'import', 'not', 'from', 3087, 3353, 'break', 'yield', 'continue', 'del', 'lambda']),
 3340: set([3073, 3074, 3075, 3079, 3081, 'global', 3341, 3086, 3343, 3344, 3345, 3346, 3347, 3348, 3349, 3350, 'pass', 3352, 3097, 3098, 3354, 3360, 3361, 3362, 3351, 'raise', 3375, 3376, 3377, 3378, 3379, 3381, 3382, 3383, 3384, 3385, 3386, 3387, 3388, 3389, 3392, 3104, 'return', 3398, 'exec', 'assert', 'print', 3411, 'import', 'not', 'from', 3087, 3353, 'break', 'yield', 'continue', 'del', 'lambda']),
 3341: set([3392, 3073, 3074, 3075, 3398, 3079, 3081, 3086, 3087, 'not', 3097, 3098, 3104, 3375, 3376, 3377, 3378, 3379, 3381, 3382, 3383, 3384, 3385, 3386, 3387, 3388, 3389, 'lambda']),
 3342: set([3109, 3110, 3111, 3112, 3113, 3114, 3115, 3116, 3117, 3118, 3119, 3121]),
 3343: set(['print']),
 3344: set(['del']),
 3345: set(['pass']),
 3346: set(['return', 'continue', 3411, 'yield', 'break', 3347, 3348, 3349, 3350, 3351, 'raise']),
 3347: set(['break']),
 3348: set(['continue']),
 3349: set(['return']),
 3350: set([3411, 'yield']),
 3351: set(['raise']),
 3352: set([3353, 3354, 'from', 'import']),
 3353: set(['import']),
 3354: set(['from']),
 3355: set([3073]),
 3356: set([3073, 3359]),
 3357: set([3073, 3355]),
 3358: set([3073, 3356, 3359]),
 3359: set([3073]),
 3360: set(['global']),
 3361: set(['exec']),
 3362: set(['assert']),
 3363: set([3331, 3364, 3333, 3366, 3367, 3368, 'while', 'for', 'try', 3400, 3122, 3332, 'if', 'with', 'class', 'def', 3365]),
 3364: set(['if']),
 3365: set(['while']),
 3366: set(['for']),
 3367: set(['try']),
 3368: set(['with']),
 3369: set([3073, 'as']),
 3370: set(['except']),
 3371: set([3073, 3074, 3075, 3076, 3079, 3081, 3339, 3340, 3341, 3086, 3343, 3344, 3345, 3346, 3347, 3348, 3349, 3350, 'pass', 3352, 3097, 3098, 3354, 3360, 3361, 3362, 3351, 'raise', 3375, 3376, 3377, 3378, 3379, 3381, 3382, 3383, 3384, 3385, 3386, 3387, 3388, 3389, 3392, 3104, 'global', 'return', 3398, 'exec', 'assert', 'print', 3411, 'import', 'not', 'from', 3087, 3353, 'break', 'yield', 'continue', 'del', 'lambda']),
 3372: set([3073, 3074, 3075, 3079, 3081, 3086, 3087, 'not', 3097, 3098, 3104, 3373, 3374, 3376, 3377, 3378, 3379, 3381, 3382, 3383, 3384, 3385, 3386, 3387, 3388, 3389, 'lambda']),
 3373: set([3073, 3074, 3075, 3079, 3081, 3086, 3087, 'not', 3097, 3098, 3104, 3374, 3376, 3377, 3378, 3379, 3381, 3382, 3383, 3384, 3385, 3386, 3387, 3388, 3389, 'lambda']),
 3374: set(['lambda']),
 3375: set([3392, 3073, 3074, 3075, 3079, 3081, 3086, 3087, 'not', 3097, 3098, 3104, 3376, 3377, 3378, 3379, 3381, 3382, 3383, 3384, 3385, 3386, 3387, 3388, 3389, 'lambda']),
 3376: set([3073, 3074, 3075, 3079, 3081, 3086, 3087, 'not', 3097, 3098, 3104, 3377, 3378, 3379, 3381, 3382, 3383, 3384, 3385, 3386, 3387, 3388, 3389]),
 3377: set([3073, 3074, 3075, 3079, 3081, 3086, 3087, 'not', 3097, 3098, 3104, 3378, 3379, 3381, 3382, 3383, 3384, 3385, 3386, 3387, 3388, 3389]),
 3378: set([3073, 3074, 3075, 3079, 3081, 3086, 3087, 'not', 3097, 3098, 3104, 3379, 3381, 3382, 3383, 3384, 3385, 3386, 3387, 3388, 3389]),
 3379: set([3073, 3074, 3075, 3079, 3081, 3086, 3087, 3097, 3098, 3104, 3381, 3382, 3383, 3384, 3385, 3386, 3387, 3388, 3389]),
 3380: set(['<>', 'is', 3092, 3093, 'in', 'not', 3100, 3101, 3102, 3103]),
 3381: set([3073, 3074, 3075, 3079, 3081, 3086, 3087, 3097, 3098, 3104, 3382, 3383, 3384, 3385, 3386, 3387, 3388, 3389]),
 3382: set([3073, 3074, 3075, 3079, 3081, 3086, 3087, 3097, 3098, 3104, 3383, 3384, 3385, 3386, 3387, 3388, 3389]),
 3383: set([3073, 3074, 3075, 3079, 3081, 3086, 3087, 3097, 3098, 3104, 3384, 3385, 3386, 3387, 3388, 3389]),
 3384: set([3104, 3073, 3074, 3075, 3079, 3081, 3086, 3087, 3098, 3097, 3385, 3386, 3387, 3388, 3389]),
 3385: set([3104, 3073, 3074, 3075, 3079, 3081, 3086, 3087, 3389, 3097, 3386, 3387, 3388, 3098]),
 3386: set([3104, 3073, 3074, 3075, 3079, 3081, 3086, 3087, 3097, 3098, 3387, 3388, 3389]),
 3387: set([3104, 3073, 3074, 3075, 3079, 3081, 3086, 3087, 3097, 3098, 3388, 3389]),
 3388: set([3073, 3074, 3075, 3079, 3081, 3097, 3098, 3389]),
 3389: set([3073, 3074, 3075, 3079, 3081, 3097, 3098]),
 3390: set([3392, 3073, 3074, 3075, 3079, 3081, 3086, 3087, 'not', 3097, 3098, 3104, 3375, 3376, 3377, 3378, 3379, 3381, 3382, 3383, 3384, 3385, 3386, 3387, 3388, 3389, 'lambda']),
 3391: set([3392, 3073, 3074, 3075, 3079, 3081, 3086, 3087, 'not', 3097, 3098, 3104, 3375, 3376, 3377, 3378, 3379, 3381, 3382, 3383, 3384, 3385, 3386, 3387, 3388, 3389, 'lambda']),
 3392: set(['lambda']),
 3393: set([3081, 3079, 3095]),
 3394: set([3392, 3073, 3074, 3395, 3079, 3081, 3083, 3086, 3087, 3075, 3095, 'not', 3097, 3098, 3104, 3375, 3376, 3377, 3378, 3379, 3381, 3382, 3383, 3384, 3385, 3386, 3387, 3388, 3389, 'lambda']),
 3395: set([3392, 3073, 3074, 3075, 3079, 3081, 3083, 3086, 3087, 3095, 'not', 3097, 3098, 3104, 3375, 3376, 3377, 3378, 3379, 3381, 3382, 3383, 3384, 3385, 3386, 3387, 3388, 3389, 'lambda']),
 3396: set([3083]),
 3397: set([3073, 3074, 3075, 3079, 3081, 3086, 3087, 3097, 3098, 3104, 3381, 3382, 3383, 3384, 3385, 3386, 3387, 3388, 3389]),
 3398: set([3392, 3073, 3074, 3075, 3079, 3081, 3086, 3087, 'not', 3097, 3098, 3104, 3375, 3376, 3377, 3378, 3379, 3381, 3382, 3383, 3384, 3385, 3386, 3387, 3388, 3389, 'lambda']),
 3399: set([3392, 3073, 3074, 3075, 3079, 3081, 3086, 3087, 'not', 3097, 3098, 3104, 3375, 3376, 3377, 3378, 3379, 3381, 3382, 3383, 3384, 3385, 3386, 3387, 3388, 3389, 'lambda']),
 3400: set(['class']),
 3401: set([3392, 3073, 3074, 3075, 3079, 3081, 3402, 3086, 3087, 3088, 'not', 3097, 3098, 3104, 3108, 3375, 3376, 3377, 3378, 3379, 3381, 3382, 3383, 3384, 3385, 3386, 3387, 3388, 3389, 'lambda']),
 3402: set([3392, 3073, 3074, 3075, 3079, 3081, 3086, 3087, 'not', 3097, 3098, 3104, 3375, 3376, 3377, 3378, 3379, 3381, 3382, 3383, 3384, 3385, 3386, 3387, 3388, 3389, 'lambda']),
 3403: set([3404, 3405, 'for', 'if']),
 3404: set(['for']),
 3405: set(['if']),
 3406: set([3408, 'if', 'for', 3407]),
 3407: set(['for']),
 3408: set(['if']),
 3409: set([3392, 3073, 3074, 3075, 3079, 3081, 3086, 3087, 'not', 3097, 3098, 3104, 3375, 3376, 3377, 3378, 3379, 3381, 3382, 3383, 3384, 3385, 3386, 3387, 3388, 3389, 'lambda']),
 3410: set([3073]),
 3411: set(['yield'])}

# terminals:

terminals  = set([3072, 3073, 'elif', 3075, 3076, 3077, 3078, 3079, 3080, 3081, 'is', 3083, 3084, 3085, 3086, 3087, 3088, 3089, 3090, 3091, 3092, 3093, 3094, 3095, 3096, 3097, 3098, 3099, 3100, 3101, 3102, 'if', 3104, 3105, 3074, 'finally', 3108, 3109, 3110, 3111, 3112, 3113, 3114, 3115, 3116, 3117, 3118, 3119, 3120, '<>', 3122, 'except', 'print', 'import', 3103, 'pass', 3121, 'global', 'return', 'exec', 3106, 'else', 'assert', 3107, 'not', 'from', 'with', 'class', 3082, 'raise', 'break', 'and', 'in', 'for', 'as', 'yield', 'try', 'while', 'continue', 'del', 'or', 'def', 'lambda'])

# symbols of:

symbols_of  = {3328: set([3363, 3339, 3076]),
 3329: set([3072, 3338, 3076]),
 3330: set([3072, 3076, 3398]),
 3331: set([3076, 3079, 3080, 3401, 3122, 3359]),
 3332: set([3331]),
 3333: set([3073, 3371, 3332, 3334, 3083, 'def']),
 3334: set([3080, 3335, 3079]),
 3335: set([3073, 3108, 3336, 3084, 3375, 3088, 3094]),
 3336: set([3080, 3073, 3079, 3337]),
 3337: set([3336, 3084]),
 3338: set([3363, 3339]),
 3339: set([3076, 3340, 3085]),
 3340: set([3344, 3345, 3346, 3361, 3352, 3362, 3360, 3341, 3343]),
 3341: set([3342, 3411, 3094, 3398]),
 3342: set([3109, 3110, 3111, 3112, 3113, 3114, 3115, 3116, 3117, 3118, 3119, 3121]),
 3343: set(['print', 3107, 3084, 3375]),
 3344: set(['del', 3397]),
 3345: set(['pass']),
 3346: set([3347, 3348, 3349, 3350, 3351]),
 3347: set(['break']),
 3348: set(['continue']),
 3349: set(['return', 3398]),
 3350: set([3411]),
 3351: set([3084, 'raise', 3375]),
 3352: set([3353, 3354]),
 3353: set(['import', 3358]),
 3354: set(['from', 3079, 3080, 3088, 3095, 'import', 3357, 3359]),
 3355: set([3073, 'as']),
 3356: set([3073, 'as', 3359]),
 3357: set([3355, 3084]),
 3358: set([3084, 3356]),
 3359: set([3073, 3095]),
 3360: set([3073, 'global', 3084]),
 3361: set([3375, 3084, 3381, 'in', 'exec']),
 3362: set(['assert', 3084, 3375]),
 3363: set([3400, 3364, 3365, 3366, 3367, 3368, 3333]),
 3364: set(['elif', 3371, 3083, 3375, 'else', 'if']),
 3365: set(['while', 3083, 'else', 3371, 3375]),
 3366: set([3083, 3397, 3398, 3371, 'for', 'in', 'else']),
 3367: set([3083, 3370, 3371, 'else', 'try', 'finally']),
 3368: set([3369, 3083, 'with', 3371, 3375]),
 3369: set([3073, 'as', 3381]),
 3370: set([3084, 'except', 3375]),
 3371: set([3338, 3339, 3076, 3077, 3078]),
 3372: set([3084, 3373]),
 3373: set([3376, 3374]),
 3374: set([3083, 3335, 3373, 'lambda']),
 3375: set([3376, 3375, 'if', 3392, 'else']),
 3376: set([3377, 'or']),
 3377: set(['and', 3378]),
 3378: set(['not', 3378, 3379]),
 3379: set([3380, 3381]),
 3380: set(['<>', 'is', 3092, 3093, 'in', 'not', 3100, 3101, 3102, 3103]),
 3381: set([3090, 3382]),
 3382: set([3105, 3383]),
 3383: set([3384, 3091]),
 3384: set([3385, 3106, 3107]),
 3385: set([3386, 3086, 3087]),
 3386: set([3088, 3089, 3120, 3096, 3387]),
 3387: set([3104, 3387, 3388, 3086, 3087]),
 3388: set([3393, 3387, 3108, 3389]),
 3389: set([3073, 3074, 3075, 3399, 3080, 3081, 3082, 3079, 3409, 3411, 3097, 3098, 3099, 3390, 3391]),
 3390: set([3404, 3084, 3375]),
 3391: set([3407, 3084, 3375]),
 3392: set([3083, 3375, 3335, 'lambda']),
 3393: set([3073, 3394, 3081, 3079, 3080, 3401, 3082, 3095]),
 3394: set([3395, 3084]),
 3395: set([3083, 3375, 3396, 3095]),
 3396: set([3083, 3375]),
 3397: set([3084, 3381]),
 3398: set([3084, 3375]),
 3399: set([3083, 3084, 3375]),
 3400: set([3073, 3371, 3398, 3079, 3080, 3083, 'class']),
 3401: set([3088, 3108, 3402, 3084, 3375]),
 3402: set([3375, 3094, 3407]),
 3403: set([3404, 3405]),
 3404: set([3403, 3372, 3397, 'for', 'in']),
 3405: set([3403, 3373, 'if']),
 3406: set([3408, 3407]),
 3407: set([3376, 3406, 3397, 'for', 'in']),
 3408: set([3373, 3406, 'if']),
 3409: set([3084, 3375]),
 3410: set([3073]),
 3411: set([3398, 'yield'])}

# keywords:

keywords  = set(['and', 'elif', '<>', 'is', 'global', 'as', 'pass', 'if', 'from', 'raise', 'for', 'except', 'finally', 'print', 'import', 'return', 'exec', 'else', 'assert', 'not', 'with', 'class', 'break', 'in', 'yield', 'try', 'while', 'continue', 'del', 'or', 'def', 'lambda'])

