single_input: NEWLINE | simple_stmt | compound_stmt NEWLINE
file_input: (NEWLINE | stmt)* ENDMARKER
eval_input: testlist NEWLINE* ENDMARKER
decorator: '@' dotted_name [ '(' [arglist] ')' ] NEWLINE
decorators: decorator+
funcdef: [decorators] 'def' NAME parameters ':' suite
parameters: '(' [varargslist] ')'
varargslist: ((fpdef ['=' test] ',')*('*' NAME [',' '**' NAME] | '**' NAME) |fpdef ['=' test] (',' fpdef ['=' test])* [','])
fpdef: NAME | '(' fplist ')'
fplist: fpdef (',' fpdef)* [',']
stmt: simple_stmt | compound_stmt
simple_stmt: small_stmt (';' small_stmt)* [';'] NEWLINE
small_stmt: (expr_stmt | print_stmt  | del_stmt | pass_stmt | flow_stmt |import_stmt | global_stmt | exec_stmt | assert_stmt)
expr_stmt: testlist (augassign (yield_expr|testlist) |('=' (yield_expr|testlist))*)
augassign: ('+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '|=' | '^=' |'<<=' | '>>=' | '**=' | '//=')
print_stmt: 'drucke' ( [ test (',' test)* [','] ] |'>>' test [ (',' test)+ [','] ] )
del_stmt: 'entf' exprlist
pass_stmt: 'pass'
flow_stmt: break_stmt | continue_stmt | return_stmt | raise_stmt | yield_stmt
break_stmt: 'abbrechen'
continue_stmt: 'weiter'
return_stmt: ZURUECK [testlist]
yield_stmt: yield_expr
raise_stmt: 'behandle' [test [',' test [',' test]]]
import_stmt: import_name | import_from
import_name: 'import' dotted_as_names
import_from: ('von' ('.'* dotted_name | '.'+)'import' ('*' | '(' import_as_names ')' | import_as_names))
import_as_name: NAME [('as' | NAME) NAME]
dotted_as_name: dotted_name [('as' | NAME) NAME]
import_as_names: import_as_name (',' import_as_name)* [',']
dotted_as_names: dotted_as_name (',' dotted_as_name)*
dotted_name: NAME ('.' NAME)*
global_stmt: 'global' NAME (',' NAME)*
exec_stmt: ('ausfuehren'|AUSFUEHREN) expr ['in' test [',' test]]
assert_stmt: 'behaupte' test [',' test]
compound_stmt: if_stmt | while_stmt | for_stmt | try_stmt | with_stmt | funcdef | classdef
if_stmt: 'wenn' test ':' suite ('wennsonst' test ':' suite)* ['sonst' ':' suite]
while_stmt: 'solange' test ':' suite ['sonst' ':' suite]
for_stmt: FUER exprlist ('in'|'im') testlist ':' suite ['else' ':' suite]
try_stmt: ('versuche' ':' suite ((except_clause ':' suite)+ ['sonst' ':' suite] ['schliesslich' ':' suite] | 'schliesslich' ':' suite))
with_stmt: 'mit' test [ with_var ] ':' suite
with_var: ('als' | NAME) expr
except_clause: 'ausser' [test [',' test]]
suite: simple_stmt | NEWLINE INDENT stmt+ DEDENT
testlist_safe: old_test [(',' old_test)+ [',']]
old_test: or_test | old_lambdef
old_lambdef: 'lambda' [varargslist] ':' old_test
test: or_test ['wenn' or_test 'sonst' test] | lambdef
or_test: and_test ('oder' and_test)*
and_test: not_test ('und' not_test)*
not_test: 'nicht' not_test | comparison
comparison: expr (comp_op expr)*
comp_op: '<'|'>'|'=='|'>='|'<='|'<>'|'!='|'in'|'not' 'im'|'in'|'ist'|'ist' 'nicht'
expr: xor_expr ('|' xor_expr)*
xor_expr: and_expr ('^' and_expr)*
and_expr: shift_expr ('&' shift_expr)*
shift_expr: arith_expr (('<<'|'>>') arith_expr)*
arith_expr: term (('+'|'-') term)*
term: factor (('*'|'/'|'%'|'//') factor)*
factor: ('+'|'-'|'~') factor | power
power: atom trailer* ['**' factor]
atom: ('(' [yield_expr|testlist_gexp] ')' |'[' [listmaker] ']' |'{' [dictmaker] '}' |'`' testlist1 '`' |NAME | NUMBER | STRING+)
listmaker: test ( list_for | (',' test)* [','] )
testlist_gexp: test ( gen_for | (',' test)* [','] )
lambdef: 'lambda' [varargslist] ':' test
trailer: '(' [arglist] ')' | '[' subscriptlist ']' | '.' NAME
subscriptlist: subscript (',' subscript)* [',']
subscript: '.' '.' '.' | test | [test] ':' [test] [sliceop]
sliceop: ':' [test]
exprlist: expr (',' expr)* [',']
testlist: test (',' test)* [',']
dictmaker: test ':' test (',' test ':' test)* [',']
classdef: 'klasse' NAME ['(' [testlist] ')'] ':' suite
arglist: (argument ',')* (argument [',']| '*' test [',' '**' test] | '**' test)
argument: test [gen_for] | test '=' test  
list_iter: list_for | list_if
list_for: FUER exprlist ('im'|'in') testlist_safe [list_iter]
list_if: 'wenn' old_test [list_iter]
gen_iter: gen_for | gen_if
gen_for: FUER exprlist ('im'|'in') or_test [gen_iter]
gen_if: 'wenn' old_test [gen_iter]
testlist1: test (',' test)*
encoding_decl: NAME
yield_expr: 'ergibt' [testlist]
