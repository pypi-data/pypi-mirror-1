#echo '##############################################################################\n'
# PLONE 3 BUILDOUT
# To develop your application, run the dev.cfg buildout, it extends this one with
# development tools.
#echo '#\n'
#echo '#\n'
# Think you have the most important file of the buildout in etc/versions.cfg
# For your convenience, just download it from :
#     http://dist.plone.org/release/3.x.x/versions.cfg
#     EG: http://dist.plone.org/release/3.2.2/versions.cfg  for this buildout
# And add the custom verion in the following version part.
# Think also that this versions file controls the zope2-url unless you make
# changes.
#echo '#\n'
# FOR RELSTORAGE SUPPORT
# * We use the ZODB as an egg which is patched during installation, please see
# the zoopy section and also the minitage.recipe documentation on patching an
# egg.
# The egg is on your cache with a particular version, the classical ZODB3 egg
# wont be touched if you have one.
#echo '#\n'
#  As we support WSGI, there is an important thing to know:
#   'zopelib' is an egg from repoze where live the zope code, we
#   totally do not NEED it, it's useless and make things buggy.
#   We build zopelib as a fake egg, as we have already zope in our
#   PYTHONPATH.
#   If you raelly want zopelib as an egg, (un)comment things in the buildout(develop, patch). But i am use, you dont have to !
#echo '#\n'
#   TO run in wsgi:
#      paster serve etc/dev.ini
#      paster serve etc/prod.ini
#echo '#\n'
#   You can use the minitage.profils.paste-initd to generate init scripts
#   wrappers for paste.
#echo '#\n'
#echo '##############################################################################\n'

#if $inside_minitage:
[minitage]
location=\${buildout:directory}/../..
#end if

# site-packages
[libxml2]
# the path to find the libxml2 python bindings, maybe your global site-packages?
site-packages=$xml2
[libxslt]
# the path to find the libxslt python bindings, maybe your global site-packages?
site-packages=$xslt

[python2.4]
executable=$python
name=python2.4

[versions]
# bin/buildout -Nvvvvv |sed -ne "s/.*satisfies '//p" |sed -re "s/==/=/g"| sed -re "s/'.//g"|sort | uniq
# the one packaged in minitage !
PILwoTK  = 1.1.6.4
# zope 2.10.7 compatible version of the ZODB where the RelStorage patch applies
ZODB3 = 3.7.1
#for $product, $version in $plone_versions:
${product}=${version}
Spawning=0.8.11-minitage
#end for

[buildout]
extensions = buildout.minitagificator mr.developer
python=python2.4
#executable=\${python2.4:executable}
# the ${project}.cfg file can be generated via the kgs part, it will fix all
# eggs versions used.
extends=etc/versions.cfg
    etc/${mode}.cfg
#if $with_sgdcg:
    etc/dancing.cfg
#end if
#   ${project}.cfg

#if $mode != 'zeo':
#   etc/zeo.cfg
#end if
#if $mode != 'relstorage':
#    etc/relstorage.cfg
#end if
#if $mode != 'zodb':
#    etc/zodb.cfg
#end if
versions = versions
parts =
    zope2
    zopepy
    productdistros
#if $mode == 'zeo':
    zeoserver
#end if
#if $with_fss:
    create-fss-dirs
    fss
#end if
    instance
extra-paths=
    \${libxml2:site-packages}
    \${libxslt:site-packages}
#
# on Upgrades
# Think to change the plone release URL !!!
#
find-links =
    http://distfiles.minitage.org/public/externals/minitage/
    http://dist.plone.org/release/3.2
    http://\${mirrors:zope}/ppix/
    http://\${mirrors:zope}/distribution/
    http://effbot.org/downloads
#if $with_wsgi_support:
    http://dist.repoze.org/zope2/latest/
#else
#    http://dist.repoze.org/zope2/latest/
#end if
eggs =
develop =fake-eggs/zopelib
#if $inside_minitage:
eggs-directory=\${minitage:location}/eggs/cache
#end if
# see http://pypi.python.org/pypi/mr.developer for documentation
sources = sources
#auto-checkout = my.package

# Zope operating instances are created elsewhere.
# For options see http://pypi.python.org/pypi/plone.recipe.zope2install
[zope2]
recipe = plone.recipe.zope2install
# update zope by updating this URL:
url = \${versions:zope2-url}
# fake eggs are required to satisfy Zope dependencies while
# zope is not yet eggified.
fake-zope-eggs = true
additional-fake-eggs =
    ZConfig
    pytz
# to facillitate RelStorage Integration, we just install an egg version of the
# ZODB
skip-fake-eggs =
    ZODB3
    zope.location

[zopepy]
python-openid-patch-options = -Np1
recipe = minitage.recipe:scripts
executable=\${python2.4:executable}
#if $with_ldap:
includes-dirs = $includesdirs
#end if
# Important for you to note the installation of the ZODB as an egg . We will not
# use the zodb code from the zope source distribution !!!!!!!
eggs +=
    \${buildout:eggs}
    ZODB3
    PILwoTK
    Plone
#slurp
#for $product in $plone_eggs.split():
    ${product}
#end for
# if you really want zopelib un comment that:
interpreter = zopepy
extra-paths = \${zope2:location}/lib/python
     \${buildout:extra-paths}

#
# Traditionnal Plone products to install
#
[productdistros]
recipe = plone.recipe.distros
urls = #slurp
#for $product in $plone_products.split():
       ${product}
#end for

nested-packages = #slurp
#for $product in $plone_np.split():
       ${product}
#end for

version-suffix-packages = #slurp
#for $product in $plone_vsp.split():
       ${product}
#end for

#
# here is defined the Zope instance running your plone site
#
[instance]
order=\${zopepy:recipe}
recipe = plone.recipe.zope2instance
http-address=$address:$port
zope2-location = \${zope2:location}
user = $login:$password
session-timeout-minutes = 90
verbose-security = off
debug-mode=OFF
event-log-level=ERROR
z2-log-level=ERROR
# attacking zopepy:eggs make instance be built after zopepy
# in any case thx to the buildout automatic parts sort.
eggs =
    \${zopepy:eggs}
products+=\${buildout:directory}/Products
    \${buildout:directory}/parts/productdistros
extra-paths+=
    \${zopepy:extra-paths}
zcml = #slurp
#for $product in $plone_zcml.split():
       ${product}
#end for


#
# auto tracked developement products
#
[sources]
# see http://pypi.python.org/pypi/mr.developer for documentation
#my.package = svn http://example.com/svn/my.package/trunk
#some.other.package = git git://example.com/git/some.other.package.git

#
# KGS generation
#
[kgs]
order=\${zopepy:recipe}

recipe=minitage.recipe:printer
quiet=
eggs=\${instance:eggs}
file=${project}.cfg

#
# FSS Support
# See: http://plone.org/products/filesystemstorage
#
#if $with_fss
[create-fss-dirs]
recipe = plone.recipe.command
update-command = \${create-fss-dirs:command}
command =
    mkdir -p \${buildout:directory}/var/fss_storage_${project} ;
    mkdir -p \${buildout:directory}/var/fss_backup_${project} ;

[fss]
recipe = iw.recipe.fss
zope-instances=\${instance:location}
storages =
    global /
    ${project} /${project} directory
#else
# [create-fss-dirs]
# recipe = plone.recipe.command
#zope-instances=\${instance:location}
# update-command = \${create-fss-dirs:command}
# command =
#   mkdir -p \${buildout:directory}/var/fss_storage_${project} ;
#   mkdir -p \${buildout:directory}/var/fss_backup_${project} ;
#
# [fss]
# recipe = iw.recipe.fss
# storages =
#     global /
#     ${project} /${project} directory
#end if

[mirrors]
sourceforge = ovh.dl.sourceforge.net
minitage = distfiles.minitage.org/public/externals/minitage
plone = plone.org
zope = download.zope.org
