\#!/usr/bin/env python

\# Copyright (C) 2008, Mathieu PASQUET <kiorky@cryptelium.net>
\# This program is free software; you can redistribute it and/or modify
\# it under the terms of the GNU General Public License as published by
\# the Free Software Foundation; either version 2 of the License, or
\# (at your option) any later version.
\# This program is distributed in the hope that it will be useful,
\# but WITHOUT ANY WARRANTY; without even the implied warranty of
\# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
\# GNU General Public License for more details.

__docformat__ = 'restructuredtext en'

import sys
import re
import os

def main():
    patch_buildout()
    cd = os.path.dirname(sys.argv[0])
    args = []
    if len(sys.argv) > 1:
        args = sys.argv[1:]
    cwd = os.getcwd()
    os.chdir(cd)
    if not os.path.isdir('$project'):
#if $sqlachemy == 'y':
        args.append('-o')
#elif $sqlobject == 'y':
        args.append('-s')
#elif $elixir == 'y':
        args.append('-e')
#end if
        os.system('cd ../src '
        '&& ../bin/tg-admin quickstart -p $project %s $project '
        '&& cd ../bin' % (' '.join(args)))
    fic = open('../buildout.cfg').read()
    fic = re.sub('# $project', '    $project', fic)
    fic = re.sub('# src/$project', '    src/$project', fic)
    open('../buildout.cfg', 'w').write(fic)
    os.system('chmod +x tgbuildout && cd .. '
              '&& ./bin/tgbuildout -vvvvv install deferred')
    os.chdir(os.path.join('..', 'src'))
    for cfg in ['dev.cfg', 'sample-prod.cfg']:
        ficp = os.path.join('$project', cfg)
        fic = open(ficp).read()
        fic = re.sub('.*server.socket_port.*', """server.socket_port = $port
server.socket_host=\"$address\"""", fic)
        if '$autoreload' == 'on':
            fic = re.sub('.*autoreload.on.*', 'autoreload.on = True', fic)
        if '$sqlobject' == 'y':
            fic = re.sub('sql.*dburi.*', 'sqlobject.dburi="$dburi"', fic)
        else:
            fic = re.sub('sql.*dburi.*', 'sqlalchemy.dburi="$dburi"', fic)
        open(ficp, 'w').write(fic)

    ficp = os.path.join('$project', 'setup.py')
    fic = open(ficp).read()
    fic = re.sub('.*author=.*', '    author="$author",', fic)
    fic = re.sub('.*author_email.*', '    author="$email",', fic)
    fic = re.sub('.*version.*', '    version="$version",', fic)
    open(ficp, 'w').write(fic)
    os.chdir(cwd)

def patch_buildout():
    cd = os.path.dirname(sys.argv[0])
    cwd = os.getcwd()
    os.chdir(cd)
    runsetup_template = """
import sys
sys.path = [ '%%SYSPATH%%' ]
import os, setuptools

__file__ = %(__file__)r

os.chdir(%(setupdir)r)
sys.argv[0] = %(setup)r
execfile(%(setup)r)
"""
    runsetup_template = re.sub('%%SYSPATH%%', "','".join(sys.path) , runsetup_template)
    fic = open('buildout').read()
    fic = re.sub('import zc.buildout.buildout', """import zc.buildout.buildout
import zc.buildout.easy_install
zc.buildout.easy_install.runsetup_template = \"\"\"%s\"\"\"
"""  % runsetup_template , fic)
    open('tgbuildout', 'w').write(fic)
    os.chdir(cwd)

if __name__ == '__main__':
    patch_buildout()
    main()

\# vim:set et sts=4 ts=4 tw=80 ft=python:
