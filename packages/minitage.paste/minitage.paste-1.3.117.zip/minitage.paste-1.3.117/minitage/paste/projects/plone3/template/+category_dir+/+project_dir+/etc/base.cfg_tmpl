#echo '##############################################################################\n'
# PLONE  BUILDOUT
#echo '#\n'
#echo '#\n'
# WARNING ABOUT BUILOOUT BOOTSTRAP WARNING
# ---------------------------------------
# If you are using the standalone (choose to answer inside_minitage=no), you must ensure to do the
# \$python bootstrap.py dance with a python compatible with the targeted zope installation (python 2.4/plone3 python 2.6/plone4)
# eg: cd $project && python2.4 bootstrap.py && bin/buildout -vvvvvvc <CONFIG_FILE>
#echo '#\n'
#echo '#\n'
# Minitage users, don't worry about that, all is setted for you.
#echo '#\n'
# Create a first plonesite object
# ---------------------------------
# run buildout -c <CONFIG_FILE> install plonesite
#echo '#\n'
#echo '#\n'
# DEVELOP MODE
# ---------------
# To develop your application, run the buildout-dev.cfg buildout, it extends this one but:
#   * has development tools.
#   * configure the instance to be more verbose (debug mode)
#echo '#\n'
#echo '#\n'
# PRODUCTION MODE
# ---------------
# To make your application safe for production, run the buildout-prod.cfg buildout, it extends this one with additionnal crontabs and backup scripts and some additionnal instances creation.
#echo '#\n'
#echo '#\n'
# PLONE Official buildouts Integration
# --------------------------------------------
# The original etc/plone/plone3.version.cfg is the original pinned version file for your plone3 release maintened in the official package.
# The original etc/plone/plone3.buildout.cfg is the one maintened by the plone.org's guys through the package ZopeSkel (plone3_buildout).
# The parts in this buildout extends/overwrite this file, you can read it to get additionnal documentation.
# You must enter speicfic project settings in the etc/${project}.cfg file.
#echo '#\n'
#echo '#\n'
# LAYOUT
# ---------
# Think you have the most important sections of this buildout configuration in etc/${project}.cfg
#
#
# Base buildouts:
# |-- buildout-dev.cfg   -> buildout for development
# |-- buildout-prod.cfg  -> buildout for production
#echo '#\n'
# Remaining layout:
# |-- cron_scripts=
# |   |-- fss_daily.sh -> backup script for fss
#echo '#\n'
# |-- etc
# |-- |-- base.cfg   -> this base buildout
# |   |-- sys.cfg    -> Sysadmin relative informations like ports, users and log levels
#echo '#\n'
# Per os install helpers to install popular tools around zope/plone dev (not supported, just here for your conveniance, READ BEFORE USING THEM)
# And you'd  better have to learn how to bootstrap some minitage environement out there, funny and secure!
# |   |-- os/debian.sh
# |   |-- os/opensuse-dev.sh
# |   |-- os/opensuse.sh
# |   |-- os/osx.sh
# |   `-- os/ubuntu.sh
#echo '#\n'
# Minitage support
# |   |-- minitage/minitage.cfg               -> some buildout tweaks to run in the best of the world with minitage
# |   |-- minitage/minitage.buildout-dev.cfg  -> buildout for development with minitage support (including xml libs, ldap, dbs; python, dependencies & common eggs cache for things like lxml or PIL)
# |   |-- minitage/minitage.buildout-prod.cfg -> buildout for production  with minitage support (including xml libs, ldap, dbs; python, dependencies & common eggs cache for things like lxml or PIL)
#echo '#\n'
# Project specific
# |   |-- project/cluster.cfg        -> define new zope instances here
# |   |-- project/sources.cfg        -> externals sources of your project
# |   |-- project/patches.cfg        -> patches used on the project
# |   |-- project/versions.cfg       -> minimal version pinning for installing your project
# |   |-- project/${project}.cfg     -> your project needs (packages, sources, products
# |   |-- project/${project}-kgs.cfg -> Generated KGS for your project (minitage's printer or buildout.dumppickledversion)
#echo '#\n'
# Configuration templates
# |   |-- templates/balancer.conf.template_tmpl  -> haproxy template
# |   |-- templates/fss_daily.sh.in_tmpl         -> FSS daily backup script template
# |   |-- templates/logrotate.conf.template_tmpl -> logrotate configuration file template
#echo '#\n'
# Plone specific
# |   |-- plone/plone3.buildout.cfg -> official plone3 buildout
# |   |-- plone/plone3.versions.cfg -> official plone3 buildout kgs
# |   |-- plone/experimental.cfg    -> experimental plone code
# |   |-- plone/dancing.cfg         -> singing & dancing  particular buildout
#echo '#\n'
# Paster (WSGI)
# |   |-- wsgi/prod.ini -> paster production configuration for running in wsgi mode
# |   |-- wsgi/dev.ini  -> paster development configuration for running in wsgi mode
#echo '#\n'
# Backends
# |   |-- backends/relstorage.cfg -> relstorage configuration if any
# |   |-- backends/zeo.cfg        -> zeoserver configuration if any
# |   |-- backends/zodb.cfg       -> Filestorage configuration if any
# |   |-- backends/solr.cfg       -> Solr configuration if any
# |   `-- backends/fss.cfg        -> FSS configuration if any
#echo '#\n'
#echo '#\n'
# KGS FILE
# ----------
# We provide a part to generate the etc/${project}-kgs.cfg file.
# This will allow you to freeze software versions known to work with your project and make reproducible environment.
# This file will be generated the first time that you run buildout.
# To un it, just run bin/buildout -vvvvvvv  -c <CONFIG_FILE> install kgs
# To unlock the versions, cmment out the according statement "etc/${project}-kgs}.cfg in the extends option of the ${project}.cfg gile.
#echo '#\n'
#echo '#\n'
# FOR RELSTORAGE SUPPORT
# -------------------------
# * We use the ZODB as an egg which is patched during installation, please see
# the zoopy section and also the minitage.recipe documentation on patching an
# egg.
# The egg is on your cache with a particular version, the classical ZODB3 egg wont be touched if you have one.
# WHAT IS VERY IMPORTANT is that [zopepy] part must run BEFORE [instance] to get the version with appropriate patches pinned.
#echo '#\n'
#echo '#\n'
#  As we support WSGI, there is an important thing to know:
#   'zopelib' is an egg from repoze where live the zope code, we
#   totally do not NEED it, it's useless and make things buggy.
#   We build zopelib as a fake egg, as we have already zope in our
#   PYTHONPATH.
#   If you raelly want zopelib as an egg, (un)comment things in the buildout(develop, patch). But i am use, you dont have to !
#   TO run in WSGI with repoze.zope2:
#   bin/paster serve etc/wsgi/dev.ini
#   bin/paster serve etc/wsgi/prod.ini
#echo '#\n'
#echo '#\n'
#   You can use the minitage.instances.paste-initd paster template to generate init scripts

#echo '##############################################################################\n'

# PROJECT SPECIFIC SETTINGS
#if 'zeo' in $mode:
#set $zeocomment=''
#else
#set $zeocomment='#'
#end if
#if $with_ploneproduct_fss
#set $fsscomment=''
#else
#set $fsscomment='#'
#end if
#if $with_indexing_solr
#set $solrcomment=''
#else
#set $solrcomment='#'
#end if
#if $with_ploneproduct_sgdcg
#set $sgdgcomment=''
#else
#set $sgdgcomment='#'
#end if
 

[buildout]
timeout=3
extensions = buildout.minitagificator mr.developer
extends-cache = \${buildout:directory}/etc/cache
# this allow you to run buildout on offline mode and to use only the downloaded plonev3.versions.cfg
extends -= http://dist.plone.org/1elease/${plone_version}/versions.cfg
extends = plone/plone3.versions.cfg plone/plone3.buildout.cfg project/patches.cfg project/sources.cfg sys.cfg project/versions.cfg project/${project}-kgs.cfg project/${project}.cfg #slurp
#if $with_indexing_solr:
    backends/solr.cfg#slurp
#end if
#if $with_ploneproduct_fss:
    backends/fss.cfg#slurp
#end if
#if $with_ploneproduct_sgdcg:
    project/newsletter.cfg#slurp
#end if
#if $with_experimental:
    plone/experimental.cfg#slurp
#end if

parts += backup
    omelette
    mkdirs
${sgdgcomment}    instance-newsletter
${fsscomment}    fss
${solrcomment}    solr
${solrcomment}    solrinstance

find-links = \${groups:find-links}
eggs += zopelib
develop += \${buildout:directory}/src.mrdeveloper/zopelib
# see http://pypi.python.org/pypi/mr.developer for documentation
versions = versions
sources = sources

# auto tracked developement products, see ${project}.cfg
[sources]

# Zope operating instances are created elsewhere.
# For options see http://pypi.python.org/pypi/plone.recipe.zope2install
[zope2]
# fake eggs are required to satisfy Zope dependencies while
# zope is not yet eggified.
fake-zope-eggs = true
additional-fake-eggs +=
    ZConfig
    pytz
skip-fake-eggs +=
    ZODB3

# eggs & scripts installation
[zopepy]
recipe = minitage.recipe.scripts
# Important for you to note the installation of the ZODB as an egg . We will not
# use the zodb code from the zope source distribution !!!!!!!
#if not $inside_minitage:
urls=http://download.zope.org/distribution/PILwoTk-1.1.6.4.tar.gz
#end if
eggs = \${instance:eggs}
interpreter = zopepy
env-file=\${buildout:directory}/etc/${project}.env

# here is defined the Zope instance running your plone site
# beware that zopepy part must run before isntance in order to have the right version
# pinned for relstorage
[instance]
order=\${zopepy:recipe}
http-address=\${hosts:instance}:\${ports:instance}
user = \${zope:user}:\${zope:password}
session-timeout-minutes = \${cache:session-timeout-minutes}
verbose-security=\${zope:verbose-security}
debug-mode=\${zope:debug-mode}
event-log-level=\${zope:event-log-level}
z2-log-level=\${zope:z2-log-level}
extra-paths+=
    \${zope2:location}/lib/python
    \${buildout:extra-paths}

# KGS generation
[kgs]
recipe=minitage.recipe.printer
quiet=
eggs=\${instance:eggs}

#if not $inside_minitage:
#[openldap]
#recipe = minitage.recipe.cmmi
#url = ftp://gd.tuwien.ac.at/infosys/network/OpenLDAP/openldap-stable/openldap-stable-20090411.tgz
#
#[python-ldap]
#recipe = minitage.recipe.egg
#egg = python-ldap
#include-dirs  = \${openldap:location}/include
#library-dirs  = \${openldap:location}/lib
#end if

[backup]
recipe = collective.recipe.backup

# Traditionnal Plone products to install
[productdistros]
recipe = plone.recipe.distros
urls=\${groups:products-urls}
version-suffix-packages = \${groups:version-suffix-packages}
nested-packages = \${groups:nested-packages}

[omelette]
recipe = collective.recipe.omelette
eggs = \${instance:eggs}
products = \${instance:products}
packages = \${zope2:location}/lib/python ./

# Command below is important
# if not, fss tests or tests using fss in their configuration will fail
[mkdirs]
recipe = plone.recipe.command
update-command = \${mkdirs:command}
command =
    mkdir -pv \${plone:testfss-backup};
    mkdir -pv \${plone:testfss-storage};
    mkdir -pv \${plone:fss-storage};
    mkdir -pv \${plone:fss-backup};
${sgdgcomment}    mkdir -pv \${plone:testfss-backup-newsletter}
${sgdgcomment}    mkdir -pv \${plone:testfss-storage-newsletter}
${sgdgcomment}    mkdir -pv \${plone:testfss-backup-newsletter}
${sgdgcomment}    mkdir -pv \${plone:testfss-storage-newsletter}
${sgdgcomment}    mkdir -pv \${buildout:directory}/src/nmd/newsletter/nmd/newsletter/mailqueue/cur;
${sgdgcomment}    mkdir -pv \${buildout:directory}/src/nmd/newsletter/nmd/newsletter/mailqueue/tmp;
${sgdgcomment}    mkdir -pv \${buildout:directory}/src/nmd/newsletter/nmd/newsletter/mailqueue/new;

\# vim: set ft=cfg:
