import os
import sys
import unittest

dirname = os.path.dirname(__file__)
if dirname not in sys.path:
    sys.path.append(os.path.split(dirname)[0])

from emencia.ecscart import Cart
from emencia.ecscart.tests import database

class CartTest(unittest.TestCase):
    def setUp(self):
        pass

    def tearDown(self):
        pass

    def test_add_product(self):
        cart = Cart('user_test', database)

        cart.add_product('cheeseburger', 3.50)
        cart.add_product('coca light', '1.4', 1)
        cart.add_product('glace', 4, '3')
        
        self.assertEquals(cart._products['cheeseburger']['quantity'], 1)
        self.assertEquals(cart._products['coca light']['price'], 1.4)
        self.assertEquals(cart._products['glace']['quantity'], 3)
        self.assertRaises(ValueError, cart.add_product)

    def test_del_product(self):
        cart = Cart('user_test', database)

        cart.add_product('cheeseburger', 3.50)
        cart.add_product('coca light', '1.4', 1)
        cart.add_product('glace', 4, '3')

        cart.del_product('cheeseburger')
        cart.del_product('coca light')
        cart.del_product('fantaisic object')

        self.assertRaises(ValueError,
                          cart.get_product_property, 'cheesebuger',
                          'price')
        self.assertRaises(ValueError,
                          cart.get_product_property, 'coca light',
                          'quantity')
        self.assertEquals(cart.get_product_property('glace',
                          'quantity'), 3)

    def test_set_quantity(self):
        cart = Cart('user_test', database)

        cart.add_product('cheeseburger', 3.50)
        cart.set_quantity('cheeseburger', 10)
        self.assertEquals(cart.get_product_property('cheeseburger',
                          'quantity'), 10)
        self.assertRaises(ValueError, cart.set_quantity,
                          'fantaisic object', 42)
        
    def test_get_cart_amount(self):
        cart = Cart('user_test', database)

        cart.add_product('cheeseburger', 3.50)
        cart.add_product('coca light', '1.4', 1)
        cart.add_product('glace', 4, '3')
        
        self.assertEquals(cart.get_cart_amount(), 16.90)
        
    def test_persistence(self):
        pass
        
    

def test_suite():
    tests = [unittest.makeSuite(CartTest)]
    return unittest.TestSuite(tests)

if __name__ == '__main__':
    unittest.main()
