/*
 * ul2finder
 * written by Christian Heilmann (http://icant.co.uk)
 * turns the nested list with the ID "finder" into a dynamic list
 * uses the CSS classes defined in the variables
 *
 * Adapted for PortalTaxonomy CategoryWidget by:
 * Jeremy Stark <jeremy@deximer.com>
 */
function ul2finder()
{
    // Define variables used and classes to be applied/removed
    var i,uls,als,finder;
    var parentClass='parent';
    var showClass='shown';
    var hideClass='hidden';
    var openClass='open';

    // Find all the category fields
    var elements, fields = new Array(), i = 0;
    elements = document.getElementsByTagName('ul') || document.all;
    for (i; i < elements.length; i++)
        if (elements[i].className == 'categorySelector')
            fields[fields.length] = elements[i].id.substring(elements[i].id.lastIndexOf('_'));

    // add the class domenabled to the body
    cssjs('add',document.body,'domenabled')

    // Loop over each category field
    fieldIndex = 0;
    for(fieldIndex; fieldIndex < fields.length; fieldIndex++)
    {
    fieldID = fields[fieldIndex];
    finderID = 'finder' + fieldID;

    finder=document.getElementById(finderID);

    // check if our finder list exists, if not, stop all activities
    if(!finder){return;}

    // loop through all lists inside finder, position and hide them 
    // by applying the class hidden
    uls=document.getElementById(finderID).getElementsByTagName('ul');
    for(i=0;i<uls.length;i++)
    {
        cssjs('add',uls[i],hideClass);
    }	

    selectAllItems(fieldID);

	// loop through all links of inside finder
	lis=document.getElementById(finderID).getElementsByTagName('li');
	for(i=0;i<lis.length;i++)
	{
		// if the li containing the link has no nested list, skip this one
		if(!lis[i].getElementsByTagName('ul')[0])
		{
			// if the list item is one of the final options
			lis[i].getElementsByTagName('input')[0].onclick=function()
			{
				// test for the order list element and the order form field
				
				// grab the order id and add it to the final order field
				nodeHREF=this.name;
                                var fieldID = nodeHREF.substring(nodeHREF.lastIndexOf('__') + 1);
				var items=document.getElementById('items' + fieldID);
                                var selected=document.getElementById('selected_categories' + fieldID);
                                nodeUID = nodeHREF.substring(0, nodeHREF.indexOf('_'));
                                if(! this.checked) {
                                  for (var x=0; x < selected.length; x++) {
                                    if(selected[x].value==nodeUID)
                                        selected.remove(x);
                                  }
                                } else {
                                  for (var x=0; x < selected.length; x++) {
                                    if(selected[x].value==nodeUID)
                                        return true;
                                  }
                                  sel = new Option(this.value, nodeUID);
                                  sel.selected = 1
                                  selected.options[selected.length] = sel;
                                  selectAllItems(fieldID);
                                }
                                return true;
			}	
			lis[i].getElementsByTagName('a')[0].onclick=function()
                        { return false; }
			continue;
		}
		var newa=document.createElement('a');
		newa.href='#';
		newa.appendChild(document.createTextNode(lis[i].childNodes.item(1).nodeValue));
		lis[i].replaceChild(newa,lis[i].childNodes.item(1));
		// otherwise apply the parent class
		cssjs('add',newa,parentClass);
		
			lis[i].getElementsByTagName('input')[0].onclick=function()
			{
				// test for the order list element and the order form field
				
				// grab the order id and add it to the final order field
				nodeHREF=this.name;
                                var fieldID = nodeHREF.substring(nodeHREF.lastIndexOf('__') + 1);
				var items=document.getElementById('items' + fieldID);
                                var selected=document.getElementById('selected_categories' + fieldID);
                                nodeUID = nodeHREF.substring(0, nodeHREF.indexOf('_'));
                                if(! this.checked) {
                                  for (var x=0; x < selected.length; x++) {
                                    if(selected[x].value==nodeUID)
                                        selected.remove(x);
                                  }
                                } else {
                                  for (var x=0; x < selected.length; x++) {
                                    if(selected[x].value==nodeUID)
                                        return true;
                                  }
                                  sel = new Option(this.value, nodeUID);
                                  sel.selected = 1
                                  selected.options[selected.length] = sel;
                                  selectAllItems(fieldID);
                                }
                                return true;
			}	
		// if the user clicks on the link
		lis[i].getElementsByTagName('a')[0].onclick=function()
		{
		// loop through all lists inside finder
			for(var i=0;i<uls.length;i++)
			{
				// avoid the list connected to this link
				var found=false;
				for(j=0;j<uls[i].getElementsByTagName('ul').length;j++)
				{
					if(uls[i].getElementsByTagName('ul')[j] == 		
						this.parentNode.getElementsByTagName('ul')[0])
					{
						found=true;
						break;
					}
				}
				// and hide all others
				if(!found)
				{
					cssjs('add',uls[i],hideClass)
					cssjs('remove',uls[i],showClass)
					cssjs('remove',uls[i].parentNode.getElementsByTagName('a')[0],openClass)
					cssjs('add',uls[i].parentNode.getElementsByTagName('a')[0],parentClass)
				}
			}	
			// change the current link from parent to open 	
			cssjs('swap',this,parentClass,openClass)
			// show the current nested list 
			cssjs('add',this.parentNode.getElementsByTagName('ul')[0],showClass)

			// don't follow the real HREF of the link
			return false;
		}
	}	
        }
	/*
	 * cssjs
	 * written by Christian Heilmann (http://icant.co.uk)
	 * eases the dynamic application of CSS classes via DOM
	 * parameters: action a, object o and class names c1 and c2 (c2 optional)
	 * actions: swap exchanges c1 and c2 in object o
	 *			add adds class c1 to object o
	 *			remove removes class c1 from object o
	 *			check tests if class c1 is applied to object o
	 * example:	cssjs('swap',document.getElementById('foo'),'bar','baz');
	 */
	function cssjs(a,o,c1,c2)
	{
		switch (a){
			case 'swap':
				o.className=!cssjs('check',o,c1)?o.className.replace(c2,c1):o.className.replace(c1,c2);
			break;
			case 'add':
				if(!cssjs('check',o,c1)){o.className+=o.className?' '+c1:c1;}
			break;
			case 'remove':
				var rep=o.className.match(' '+c1)?' '+c1:c1;
				o.className=o.className.replace(rep,'');
			break;
			case 'check':
				return new RegExp('\\b'+c1+'\\b').test(o.className)
			break;
		}
	}
}

function removeSelectedOptions(theSel, fieldID)
{
  var selIndex = theSel.selectedIndex;
  if (selIndex != -1) {
    for(i=theSel.length-1; i>=0; i--)
    {
      if(theSel.options[i].selected)
      {
        theSel.options[i] = null;
      }
    }
    if (theSel.length > 0) {
      theSel.selectedIndex = selIndex == 0 ? 0 : selIndex - 1;
    }
  }
  selectAllItems(fieldID);
}

function selectAllItems(fieldID) {
    var widgetID = 'selected_categories' + fieldID;
    selected = document.getElementById(widgetID);
    for (var x=0; x < selected.length; x++) {
      selected[x].selected=1;
    }
}

// Check if the browser supports DOM, and start the script if it does.
if(document.getElementById && document.createTextNode)
{
    window.onload=ul2finder;
}
