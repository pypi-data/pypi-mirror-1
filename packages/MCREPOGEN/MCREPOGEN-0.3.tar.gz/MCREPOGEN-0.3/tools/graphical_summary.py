#!/usr/bin/env python

# Copyright 2009 Neil Martinsen-Burrell

# This file is part of mcrepogen
#
# mcrepogen is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

from optparse import OptionParser
import logging
from logging import DEBUG, INFO, debug, info
import numpy as np
from scipy import stats
from matplotlib import pyplot as plt

from mcrepogen.version_info import version_str
from summary import data_keys

def _key_to_title(key):
    return key.replace('_',' ').title()


def summarize_col(data, title='Column Summary', axes=None):
    if axes is None:
        axes = plt.Axes(plt.figure(), [0,1,0,1])
    axes.hist(data, np.arange(1, options.nbins+1), normed=True)
    axes.set_title(title)
    axes.set_ylim([0,1])
    return axes


def graphical_summary(summary_array=None, summary_filename=None):
    """Summarize with histograms all of the given data

    If summary_array is given, use that data, otherwise, summary_filename
    should be given as the name of a file that contains a .npy-format array of
    the type generated by `summary.summarize_branch`

    """
    if summary_array is None:
        if summary_filename is None:
            raise ValueError("One of summary_array or summary_filename"
                             " must be specified.")
        else:
            summary_array = np.load(summary_filename)
    debug("Summarizing %d rows", summary_array.shape[0])
    plt.figure(figsize=(11,6));
    for i, key in enumerate(data_keys):
        ax = summarize_col(summary_array[key], title=_key_to_title(key),
                                               axes=plt.subplot(2,4,i+1))
        if i % 4 != 0:
            ax.set_yticklabels([])
    plt.show()


if __name__ == '__main__':
    parser = OptionParser(usage="%prog [-v] [-n NBINS] SUMMARY_FILE",
                          version="%prog " + version_str)
    parser.add_option('-v', '--verbose', dest='verbose',
                      default=False, action='store_true',
                      help='Show more information during the analysis')
    parser.add_option('-n', '--num-bins', dest='nbins',
                      default=40, action='store', type=int,
                      help='Number of bins to use in histograms')
    options, args = parser.parse_args()
    FORMAT = '%(levelname)s: %(message)s'
    if options.verbose:
        logging.basicConfig(level=DEBUG, format=FORMAT)
    else:
        logging.basicConfig(level=INFO, format=FORMAT)
    if len(args) > 1 or len(args) == 0:
        parser.error("Wrong arguments.  Please specify the path"
                     "to a file with a saved summary array.")
    graphical_summary(summary_filename=args[0])
