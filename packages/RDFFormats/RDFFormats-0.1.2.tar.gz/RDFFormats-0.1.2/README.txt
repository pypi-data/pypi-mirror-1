Introduction
------------

RDFFormats provides support for the parsing and writing of information that is
to be stored in RDF-oriented data stores. The central element of RDFFormats is
the Store module which contains a class that can be subclassed by other
software in order to implement parsing and writing frameworks. An example of
such a framework is RDFCalendar, from which RDFFormats has been derived.

RDFFormats is not useful in itself and does not provide any tools or
applications.

Contact, Copyright and Licence Information
------------------------------------------

The current Web page for RDFFormats at the time of release is:

http://www.boddie.org.uk/python/RDFFormats.html

Copyright and licence information can be found in the docs directory - see
docs/COPYING.txt, docs/gpl-3.0.txt and docs/lgpl-3.0.txt for more information.

Dependencies
------------

RDFFormats has the following basic dependencies:

Package                     Release Information
-------                     -------------------

sqltriples                  0.3

URLs
----

sqltriples                  http://www.boddie.org.uk/python/sqltriples.html

New in RDFFormats 0.1.2 (Changes since RDFFormats 0.1.1)
--------------------------------------------------------

  * Relicensed under the LGPL version 3 or later.
  * Added Ubuntu Feisty (7.04) package support.

New in RDFFormats 0.1.1 (Changes since RDFFormats 0.1)
------------------------------------------------------

  * Fixed deep node removal so that connector labels are detected correctly.

Release Procedures
------------------

Update the RDFFormats/__init__.py __version__ attributes.
Change the version number and package filename/directory in the documentation.
Change code examples in the documentation if appropriate.
Update the release notes (see above).
Check the setup.py file and ensure that all package directories are mentioned.
Check the release information in the PKG-INFO file and in the package
changelog (and other files).
Tag, export.
Generate the API documentation.
Remove generated .pyc files: rm `find . -name "*.pyc"`
Archive, upload.
(Upload the introductory documentation.)
Update PyPI entry.

Generating the API Documentation
--------------------------------

In order to prepare the API documentation, it is necessary to generate some
Web pages from the Python source code. For this, the epydoc application must
be available on your system. Then, inside the distribution directory, run the
apidocs.sh tool script as follows:

./tools/apidocs.sh

Some warnings may be generated by the script, but the result should be a new
apidocs directory within the distribution directory.

Making Packages
---------------

To make Debian-based packages:

  1. Create new package directories under packages if necessary.
  2. Make a symbolic link in the distribution's root directory to keep the
     Debian tools happy:

     ln -s packages/ubuntu-hoary/python2.4-rdfformats/debian/

  3. Run the package builder:

     dpkg-buildpackage -rfakeroot

  4. Locate and tidy up the packages in the parent directory of the
     distribution's root directory.
