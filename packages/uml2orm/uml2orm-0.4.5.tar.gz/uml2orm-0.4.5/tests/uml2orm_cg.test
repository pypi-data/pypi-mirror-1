uml2orm_cg optparse testing
===========================


Setup
-----

    >>> import sys
    >>> sys.path.insert(0, '.')
    >>> app = 'testing'
    >>> import uml2orm_cg


Incomplete options
------------------
    
    >>> # incomplete, missing input
    >>> uml2orm_cg.main([app, '-m', 'storm'])
    Traceback (most recent call last):
    ...
    SystemExit: 1
    >>> uml2orm_cg.main([app, '--stdout'])
    Traceback (most recent call last):
    ...
    SystemExit: 1
    
    
Conflicting options
-------------------

    >>> uml2orm_cg.main([app, '-o', '--orm-output="test"', '-m', 'storm', 
    ...                  'buh'])
    Traceback (most recent call last):
    ...
    SystemExit: 1
    
    >>> uml2orm_cg.main([app, '-o', '--sql-output="test"', '-m', 'storm', 
    ...                  'samples/ex3.dia'])
    Traceback (most recent call last):
    ...
    SystemExit: 1
    
    >>> uml2orm_cg.main([app, '-o', '--sql-output="test"', 
    ...                  '--orm-output="test"', '-m', 'storm', 'buh'])
    Traceback (most recent call last):
    ...
    SystemExit: 1
    
    
Inexistent options
------------------
    
    >>> # invalid option
    >>> uml2orm_cg.main([app, '-x', "buh"])
    Traceback (most recent call last):
    ...
    SystemExit: 2
    

Bad options values
------------------
    
    >>> # bad orm
    >>> uml2orm_cg.main([app, '-m', 'invalidorm', '--stdout', 
    ...                  'samples/ex3.dia'])
    Traceback (most recent call last):
    ...
    ImportError: No module named invalidorm
    
    >>> # bad sql (orm is still invalid here, but sql is checked first)
    >>> uml2orm_cg.main([app, '-m', 'invalidorm', '--stdout', '-s', 'badsql',
    ...                  'samples/ex3.dia'])
    Traceback (most recent call last):
    ...
    ImportError: No module named badsql
    
    >>> # bad input
    >>> uml2orm_cg.main([app, '-m', 'storm', 'invalid_input'])
    Traceback (most recent call last):
    ...
    IOError: [Errno 2] No such file or directory: 'invalid_input'
    

Good options
------------
    
    >>> sample = 'samples/rawdb.py'
    
    >>> uml2orm_cg.main([app, '-m', 'storm', sample, '-o'])
    Created file 'testing_storm.py'
    >>> uml2orm_cg.main([app, '-m', 'storm', '--orm-output=testing', sample])
    Created file 'testing'
    >>> uml2orm_cg.main([app, '-s', 'sqlite', '--sql-output=testing',
    ...                  '--orm-output=testing', sample])
    Created file 'testing.sql'
    Created file 'testing-drops.sql'
    >>> uml2orm_cg.main([app, '-s', 'sqlite', '-o', sample])
    Created file 'testing_sqlite.sql'
    Created file 'testing_sqlite-drops.sql'
    >>> uml2orm_cg.main([app, '-m', 'storm', '-s', 'sqlite', '-o', sample])
    Created file 'testing_sqlite.sql'
    Created file 'testing_sqlite-drops.sql'
    Created file 'testing_storm.py'
    >>> uml2orm_cg.main([app, '-s', 'sqlite', '-m', 'storm', 
    ...                  '--orm-output=ormout', '--sql-output=sqlout', sample])
    Created file 'sqlout.sql'
    Created file 'sqlout-drops.sql'
    Created file 'ormout'
    >>> uml2orm_cg.main([app, '-s', 'sqlite', '--orm-output=youwontseethis',
    ...                  sample])
    >>> uml2orm_cg.main([app, '-m', 'storm', '--sql-output=anything', sample])
    
    >>> # cleanup
    >>> import os
    >>> to_clean = ['testing_storm.py', 'testing', 'testing.sql', 
    ...             'testing-drops.sql', 'testing_sqlite.sql', 
    ...             'testing_sqlite-drops.sql', 'sqlout.sql', 
    ...             'sqlout-drops.sql', 'ormout']
    >>> for testfile in to_clean:
    ...     os.unlink(testfile)
    
    >>> # stdout test
    >>> sample = 'samples/minimal.py'
    
    >>> uml2orm_cg.main([app, '-m', 'storm', '-s', 'sqlite', sample])
    Database 'minimal'
    ****************************************
    CREATE TABLE minimal (
            name  TEXT
    );
    DROP TABLE minimal;
    ****************************************
    import storm.locals as sl
    class Minimal(sl.Storm):
        __storm_table__ = "minimal"
        name = sl.Unicode()
    <BLANKLINE>
        def __init__(self, name=None):
            self.name = name
    >>> uml2orm_cg.main([app, '-s', 'sqlite', sample])
    Database 'minimal'
    ****************************************
    CREATE TABLE minimal (
            name  TEXT
    );
    DROP TABLE minimal;
    ****************************************
    >>> uml2orm_cg.main([app, '-m', 'storm', sample, '--stdout'])
    Database 'minimal'
    ****************************************
    import storm.locals as sl
    class Minimal(sl.Storm):
        __storm_table__ = "minimal"
        name = sl.Unicode()
    <BLANKLINE>
        def __init__(self, name=None):
            self.name = name