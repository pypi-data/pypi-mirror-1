= Working with circuits.web =

[[TOC]]

== Overview ==
This article describes the concepts involved in using circuits for
building websites and web applications.
circuits is a consistent, robust and well designed event-driven framework
with a component architecture, it just so happens that building
'''Web Components''' is fairly trivial.
[source:circuits/lib/web.py circuits.web] contains components suitable
for building all things web based, from:
 * Web Applications
 * AJAX Servers
 * RPC Servers
 * Websites
 * ''and more...''

'''NOTE:''' You can download the [attachment:demos.tar.gz Full Source Code] to all the demos described here.

== A Basic Hello World ==
The simplest example of using circuits, is to demonstrate the classical
"Hello World!" in a web-based way.

{{{
#!python
#!/usr/bin/env python

from circuits.web import Server, Controller

class Root(Controller):

    def index(self):
        return "Hello World!"

server = Server(8000)
server += Root()
server.run()
}}}

That's it! To run this simple example, run the following on your shell or
command prompt: (''Save the above example as {{{hello.py}}}''')

{{{
#!sh
$ python hello.py 
circuits/37b0cce1ad99 listening on http://localhost:8000

}}}

Now point your favourite Web Browser to: http://localhost:8000/

'''NOTE:''' On your environment, you may get a different message and it may be
listening on a different hostname than '''localhost'''.

== Deploying with Apache + mod_wsgi ==
Here's how to deploy your new Circuits powered Web Application on
[http://httpd.apache.org Apache] using 
[http://code.google.com/p/modwsgi/ mod_wsgi].

Let's say you have a Web Hosting account with some provider.
 * Your Username is: "joblogs"
 * Your URL is: http://example.com/~joeblogs/
 * Your Docroot is: /home/joeblogs/www/

=== Configuring Apache ===
The first step is to add in the following {{{.htaccess}}}
file to tell Apache that we want any and all requests to
http://example.com/~joeblogs/ to be served up by our
circuits.web application.

Created the {{{.htaccess}}} file in your '''Docroot''':
{{{
ReWriteEngine On
ReWriteCond %{REQUEST_FILENAME} !-f
ReWriteCond %{REQUEST_FILENAME} !-d
RewriteRule ^(.*)$ /~joeblogs/index.wsgi/$1 [QSA,PT,L]
}}}

=== Running your Application with Apache/mod_wsgi ===
The get your Web Application working and deployed on
[http://httpd.apache.org Apache] using 
[http://code.google.com/p/modwsgi/ mod_wsgi], you need
to make a few changes to your code. Based on our [#A Basic Hello World example]
earlier, we modify it to the following:

{{{
#!python
#!/usr/bin/env python

from circuits.web import Application, Controller

class Root(Controller):

    def index(self):
        return "Hello World!"

application = Application() + Root()
}}}

That's it! To run this, save it as {{{index.wsgi}}} and place it in your
Web Root ({{{public-html}}} or {{{www}}} directory) as per the above
guidelines and point your favourite Web Browser to: http://example.com/~joeblogs/

== Basic Form Handling ==
circuits.web which builds upon the [source:circuits/lib/http.py HTTP] Component
parses all '''POST''' data as a '''request''' comes through and creates
a dictionary of '''kwargs''' (''Keyword Arguments'') that are passed to
'''Request Handlers'''.

Here is a simple example of handling form data:

{{{
#!python
#!/usr/bin/env python

from circuits.web import Server, Controller

class Root(Controller):

    html = """\
<html>
 <head>
  <title>Basic Form Handling</title>
 </head>
 <body>
  <h1>Basic Form Handling</h1>
  <p>
   Example of using
   <a href="http://trac.softcircuit.com.au/circuits/">circuits</a> and it's
   <b>Web Components</b> to build a simple web application that handles
   some basic form data.
  </p>
  <form action="submit" method="POST">
   <table border="0" rules="none">
    <tr>
     <td>First Name:</td>
     <td><input type="text" name="firstName"></td>
    </tr>
    <tr>
     <td>Last Name:</td>
     <td><input type="text" name="lastName"></td>
    </tr>
     <tr>
      <td colspan=2" align="center">
       <input type="submit" value="Submit">
     </td>
     </tr>
   </table>
  </form>
 </body>
</html>"""

    def index(self):
        return self.html

    def submit(self, firstName, lastName):
        return "Hello %s %s" % (firstName, lastName)

(Server(8000) + Root()).run()
}}}

=== Handling File Uploads ===
You can easily handle '''File Uploads''' as well using the same techniques
as [#Basic Form Handlnig Basic Form Handling]. Basically the "name" you give
your {{{<input>}}} tag of {{{tyoe="file"}}} will get passed as the Keyword
Argument to your Request Handler. It has the following two attributes:
 * .filename - The name of the uploaded file.
 * .value - The contents of the uploaded file.

Here's the code!

{{{upload.py}}}:
{{{
#!python
#!/usr/bin/env python

from circuits.web import Server, Controller

UPLOAD_FORM = """
<html>
 <head>
  <title>Upload Form</title>
 </head>
 <body>
  <h1>Upload Form</h1>
  <form method="POST" action="/" enctype="multipart/form-data">
   Description: <input type="text" name="desc"><br>
   <input type="file" name="file">
   <input type="submit" value="Submit">
  </form>
 </body>
</html>
"""

UPLOADED_FILE = """
<html>
 <head>
  <title>Uploaded File</title>
 </head>
 <body>
  <h1>Uploaded File</h1>
  <p>
   Filename: %s<br>
   Description: %s
  </p>
  <p><b>File Contents:</b></p>
  <pre>
  %s
  </pre>
 </body>
</html>
"""

class Root(Controller):

    def index(self, file=None, desc=""):
        if file is None:
            return UPLOAD_FORM
        else:
            filename = file.filename
            return UPLOADED_FILE % (file.filename, desc, file.value)

(Server(8000) + Root()).run()
}}}

== Basic Templating ==
circuits.web tries to stay out of your way as much as possible and doesn't
impose any restrictions on what external libraries and tools you can use
throughout your web application or website. As such you can use any
templating language/engine you wish.

=== Using Mako ===
This basic example of using the [http://www.makotemplates.org/ Mako]
Templating Language. First a {{{TemplateLookup}}} instance is created.
Finally a function called {{{render(name, **d)}}} is created that is
used by '''Request Handlers''' to render a given template and apply
data to it.

Here is the basic example:

{{{
#!/usr/bin/env python

import os

import mako
from mako.lookup import TemplateLookup

from circuits.web import Server, Controller

DEFAULTS = {}

templates = TemplateLookup(
	directories=[os.path.join(os.path.dirname(__file__), "tpl")],
	module_directory="/tmp",
	output_encoding="utf-8")

def render(name, **d):
	try:
		d.update(DEFAULTS)
		tpl = templates.get_template(name)
		return tpl.render(**d)
	except:
		return mako.exceptions.html_error_template().render()

class Root(Controller):

	tpl = "index.html"

	def index(self):
		return render(self.tpl)

	def submit(self, firstName, lastName):
		msg = "Thank you %s %s" % (firstName, lastName)
		return render(self.tpl, message=msg)

(Server(8000) + Root()).run()
}}}

== Other Tasks ==
Performing other tasks in circuits.web such as filtering
requests and logging are fairly trivial. Here are some
examples of other tasks you might perform in a web application.

=== Logging ===
Basic logging can easily be performed by implementing a
{{{Logger}}} Component that simply prints the response
before it's sent to the client (''The Browser'').

Example:
{{{
#!python
#!/usr/bin/env python

from circuits import Component
from circuits.web import Server, Controller

class Logger(Component):

    def response(self, response):
        print response

class Root(Controller):

    def index(self):
        return "Hello World!"

(Server(8000) + Root() + Logger()).run()
}}}

This works be creating and adding a new Component into the system called
Logger which contains 1 Event Handler. The Event Handler listens for
{{{Response}}} events on the "response" channel. When it receives such an
event, it simply prints the {{{response}}} object containing the response
to be sent to the client (''The Browser'').

== Other Examples ==
[[TitleIndex(docs/CircuitsWeb)]]

The source code to all examples can be found here:
 * [source:examples/web/ Web Examples]
----
[.. Up]