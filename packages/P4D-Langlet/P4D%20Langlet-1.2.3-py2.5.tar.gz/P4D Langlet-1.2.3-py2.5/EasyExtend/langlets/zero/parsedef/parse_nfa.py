# ______________________________________________________________________
# This was automatically generated by nfagen.py.
# Hack at your own risk.

# LANGLET OFFSET

LANGLET_OFFSET = 0

# trail NFAs:

nfas = {256: [['|', ['1', 4], ['1', 267], ['1', 291, 4]],
       'single_input: NEWLINE | simple_stmt | compound_stmt NEWLINE',
       (256, 0, 256),
       {(4, 1, 256): [(None, '-', 256)],
        (4, 4, 256): [(None, '-', 256)],
        (256, 0, 256): [(267, 2, 256), (4, 1, 256), (291, 3, 256)],
        (267, 2, 256): [(None, '-', 256)],
        (291, 3, 256): [(4, 4, 256)]}],
 257: [['1', ['*', ['|', ['1', 4], ['1', 266]]], 0],
       'file_input: ( NEWLINE | stmt ) * ENDMARKER',
       (257, 0, 257),
       {(0, 3, 257): [(None, '-', 257)],
        (4, 1, 257): [(0, 3, 257), (4, 1, 257), (266, 2, 257)],
        (257, 0, 257): [(0, 3, 257), (4, 1, 257), (266, 2, 257)],
        (266, 2, 257): [(0, 3, 257), (4, 1, 257), (266, 2, 257)]}],
 258: [['1', 326, ['*', 4], 0],
       'eval_input: testlist NEWLINE * ENDMARKER',
       (258, 0, 258),
       {(0, 3, 258): [(None, '-', 258)],
        (4, 2, 258): [(4, 2, 258), (0, 3, 258)],
        (258, 0, 258): [(326, 1, 258)],
        (326, 1, 258): [(4, 2, 258), (0, 3, 258)]}],
 259: [['1', 50, 287, ['?', 7, ['?', 329], 8], 4],
       "decorator: '@' dotted_name[ '(' [ arglist ] ')' ] NEWLINE",
       (259, 0, 259),
       {(4, 6, 259): [(None, '-', 259)],
        (7, 3, 259): [(8, 5, 259), (329, 4, 259)],
        (8, 5, 259): [(4, 6, 259)],
        (50, 1, 259): [(287, 2, 259)],
        (259, 0, 259): [(50, 1, 259)],
        (287, 2, 259): [(7, 3, 259), (4, 6, 259)],
        (329, 4, 259): [(8, 5, 259)]}],
 260: [['1', 259, ['*', 259]],
       'decorators: decorator +',
       (260, 0, 260),
       {(259, 1, 260): [(259, 2, 260), (None, '-', 260)],
        (259, 2, 260): [(259, 2, 260), (None, '-', 260)],
        (260, 0, 260): [(259, 1, 260)]}],
 261: [['1', ['?', 260], 'def', 1, 262, 11, 299],
       "funcdef: [ decorators ] 'def' NAME parameters ':' suite",
       (261, 0, 261),
       {(1, 3, 261): [(262, 4, 261)],
        (11, 5, 261): [(299, 6, 261)],
        (260, 1, 261): [('def', 2, 261)],
        (261, 0, 261): [('def', 2, 261), (260, 1, 261)],
        (262, 4, 261): [(11, 5, 261)],
        (299, 6, 261): [(None, '-', 261)],
        ('def', 2, 261): [(1, 3, 261)]}],
 262: [['1', 7, ['?', 263], 8],
       "parameters: '(' [ varargslist ] ')'",
       (262, 0, 262),
       {(7, 1, 262): [(8, 3, 262), (263, 2, 262)],
        (8, 3, 262): [(None, '-', 262)],
        (262, 0, 262): [(7, 1, 262)],
        (263, 2, 262): [(8, 3, 262)]}],
 263: [['|',
        ['1',
         ['*', 264, ['?', 22, 303], 12],
         ['|', ['1', 16, 1, ['?', 12, 36, 1]], ['1', 36, 1]]],
        ['1',
         264,
         ['?', 22, 303],
         ['*', 12, 264, ['?', 22, 303]],
         ['?', 12]]],
       "varargslist: (( fpdef[ '=' test ] ',' ) * ( '*' NAME[ ',' '**' NAME ] | '**' NAME ) | fpdef[ '=' test ]( ',' fpdef[ '=' test ]) * [ ',' ])",
       (263, 0, 263),
       {(1, 6, 263): [(12, 7, 263), (None, '-', 263)],
        (1, 9, 263): [(None, '-', 263)],
        (1, 11, 263): [(None, '-', 263)],
        (12, 4, 263): [(264, 1, 263), (36, 10, 263), (16, 5, 263)],
        (12, 7, 263): [(36, 8, 263)],
        (12, 15, 263): [(264, 16, 263)],
        (12, 19, 263): [(None, '-', 263)],
        (16, 5, 263): [(1, 6, 263)],
        (22, 2, 263): [(303, 3, 263)],
        (22, 13, 263): [(303, 14, 263)],
        (22, 17, 263): [(303, 18, 263)],
        (36, 8, 263): [(1, 9, 263)],
        (36, 10, 263): [(1, 11, 263)],
        (263, 0, 263): [(264, 1, 263),
                        (36, 10, 263),
                        (16, 5, 263),
                        (264, 12, 263)],
        (264, 1, 263): [(12, 4, 263), (22, 2, 263)],
        (264, 12, 263): [(12, 15, 263),
                         (22, 13, 263),
                         (12, 19, 263),
                         (None, '-', 263)],
        (264, 16, 263): [(22, 17, 263),
                         (12, 15, 263),
                         (12, 19, 263),
                         (None, '-', 263)],
        (303, 3, 263): [(12, 4, 263)],
        (303, 14, 263): [(12, 15, 263), (12, 19, 263), (None, '-', 263)],
        (303, 18, 263): [(12, 15, 263), (12, 19, 263), (None, '-', 263)]}],
 264: [['|', ['1', 1], ['1', 7, 265, 8]],
       "fpdef: NAME | '(' fplist ')'",
       (264, 0, 264),
       {(1, 1, 264): [(None, '-', 264)],
        (7, 2, 264): [(265, 3, 264)],
        (8, 4, 264): [(None, '-', 264)],
        (264, 0, 264): [(1, 1, 264), (7, 2, 264)],
        (265, 3, 264): [(8, 4, 264)]}],
 265: [['1', 264, ['*', 12, 264], ['?', 12]],
       "fplist: fpdef( ',' fpdef ) * [ ',' ]",
       (265, 0, 265),
       {(12, 2, 265): [(264, 3, 265)],
        (12, 4, 265): [(None, '-', 265)],
        (264, 1, 265): [(12, 2, 265), (12, 4, 265), (None, '-', 265)],
        (264, 3, 265): [(12, 2, 265), (12, 4, 265), (None, '-', 265)],
        (265, 0, 265): [(264, 1, 265)]}],
 266: [['|', ['1', 267], ['1', 291]],
       'stmt: simple_stmt | compound_stmt',
       (266, 0, 266),
       {(266, 0, 266): [(291, 2, 266), (267, 1, 266)],
        (267, 1, 266): [(None, '-', 266)],
        (291, 2, 266): [(None, '-', 266)]}],
 267: [['1', 268, ['*', 13, 268], ['?', 13], 4],
       "simple_stmt: small_stmt( ';' small_stmt ) * [ ';' ] NEWLINE",
       (267, 0, 267),
       {(4, 5, 267): [(None, '-', 267)],
        (13, 2, 267): [(268, 3, 267)],
        (13, 4, 267): [(4, 5, 267)],
        (267, 0, 267): [(268, 1, 267)],
        (268, 1, 267): [(4, 5, 267), (13, 4, 267), (13, 2, 267)],
        (268, 3, 267): [(4, 5, 267), (13, 4, 267), (13, 2, 267)]}],
 268: [['|',
        ['1', 269],
        ['1', 271],
        ['1', 272],
        ['1', 273],
        ['1', 274],
        ['1', 280],
        ['1', 288],
        ['1', 289],
        ['1', 290]],
       'small_stmt: ( expr_stmt | print_stmt | del_stmt | pass_stmt | flow_stmt | import_stmt | global_stmt | exec_stmt | assert_stmt )',
       (268, 0, 268),
       {(268, 0, 268): [(269, 1, 268),
                        (290, 9, 268),
                        (271, 2, 268),
                        (280, 6, 268),
                        (272, 3, 268),
                        (288, 7, 268),
                        (289, 8, 268),
                        (274, 5, 268),
                        (273, 4, 268)],
        (269, 1, 268): [(None, '-', 268)],
        (271, 2, 268): [(None, '-', 268)],
        (272, 3, 268): [(None, '-', 268)],
        (273, 4, 268): [(None, '-', 268)],
        (274, 5, 268): [(None, '-', 268)],
        (280, 6, 268): [(None, '-', 268)],
        (288, 7, 268): [(None, '-', 268)],
        (289, 8, 268): [(None, '-', 268)],
        (290, 9, 268): [(None, '-', 268)]}],
 269: [['1',
        326,
        ['|',
         ['1', 270, ['|', ['1', 339], ['1', 326]]],
         ['*', 22, ['|', ['1', 339], ['1', 326]]]]],
       "expr_stmt: testlist( augassign( yield_expr | testlist ) | ( '=' ( yield_expr | testlist )) * )",
       (269, 0, 269),
       {(22, 5, 269): [(326, 7, 269), (339, 6, 269)],
        (269, 0, 269): [(326, 1, 269)],
        (270, 2, 269): [(326, 4, 269), (339, 3, 269)],
        (326, 1, 269): [(270, 2, 269), (22, 5, 269), (None, '-', 269)],
        (326, 4, 269): [(None, '-', 269)],
        (326, 7, 269): [(22, 5, 269), (None, '-', 269)],
        (339, 3, 269): [(None, '-', 269)],
        (339, 6, 269): [(22, 5, 269), (None, '-', 269)]}],
 270: [['|',
        ['1', 37],
        ['1', 38],
        ['1', 39],
        ['1', 40],
        ['1', 41],
        ['1', 42],
        ['1', 43],
        ['1', 44],
        ['1', 45],
        ['1', 46],
        ['1', 47],
        ['1', 49]],
       "augassign: ( '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '|=' | '^=' | '<<=' | '>>=' | '**=' | '//=' )",
       (270, 0, 270),
       {(37, 1, 270): [(None, '-', 270)],
        (38, 2, 270): [(None, '-', 270)],
        (39, 3, 270): [(None, '-', 270)],
        (40, 4, 270): [(None, '-', 270)],
        (41, 5, 270): [(None, '-', 270)],
        (42, 6, 270): [(None, '-', 270)],
        (43, 7, 270): [(None, '-', 270)],
        (44, 8, 270): [(None, '-', 270)],
        (45, 9, 270): [(None, '-', 270)],
        (46, 10, 270): [(None, '-', 270)],
        (47, 11, 270): [(None, '-', 270)],
        (49, 12, 270): [(None, '-', 270)],
        (270, 0, 270): [(39, 3, 270),
                        (46, 10, 270),
                        (43, 7, 270),
                        (42, 6, 270),
                        (47, 11, 270),
                        (38, 2, 270),
                        (45, 9, 270),
                        (49, 12, 270),
                        (41, 5, 270),
                        (37, 1, 270),
                        (44, 8, 270),
                        (40, 4, 270)]}],
 271: [['1',
        'print',
        ['|',
         ['?', 303, ['*', 12, 303], ['?', 12]],
         ['1', 35, 303, ['?', ['1', 12, 303], ['*', 12, 303], ['?', 12]]]]],
       "print_stmt: 'print' ([ test( ',' test ) * [ ',' ]] | '>>' test[( ',' test ) + [ ',' ]])",
       (271, 0, 271),
       {(12, 3, 271): [(303, 4, 271)],
        (12, 5, 271): [(None, '-', 271)],
        (12, 8, 271): [(303, 9, 271)],
        (12, 10, 271): [(303, 11, 271)],
        (12, 12, 271): [(None, '-', 271)],
        (35, 6, 271): [(303, 7, 271)],
        (271, 0, 271): [('print', 1, 271)],
        (303, 2, 271): [(12, 5, 271), (12, 3, 271), (None, '-', 271)],
        (303, 4, 271): [(12, 5, 271), (12, 3, 271), (None, '-', 271)],
        (303, 7, 271): [(None, '-', 271), (12, 8, 271)],
        (303, 9, 271): [(12, 10, 271), (12, 12, 271), (None, '-', 271)],
        (303, 11, 271): [(12, 10, 271), (12, 12, 271), (None, '-', 271)],
        ('print', 1, 271): [(35, 6, 271), (303, 2, 271), (None, '-', 271)]}],
 272: [['1', 'del', 325],
       "del_stmt: 'del' exprlist",
       (272, 0, 272),
       {(272, 0, 272): [('del', 1, 272)],
        (325, 2, 272): [(None, '-', 272)],
        ('del', 1, 272): [(325, 2, 272)]}],
 273: [['1', 'pass'],
       "pass_stmt: 'pass'",
       (273, 0, 273),
       {(273, 0, 273): [('pass', 1, 273)],
        ('pass', 1, 273): [(None, '-', 273)]}],
 274: [['|', ['1', 275], ['1', 276], ['1', 277], ['1', 279], ['1', 278]],
       'flow_stmt: break_stmt | continue_stmt | return_stmt | raise_stmt | yield_stmt',
       (274, 0, 274),
       {(274, 0, 274): [(279, 4, 274),
                        (276, 2, 274),
                        (275, 1, 274),
                        (278, 5, 274),
                        (277, 3, 274)],
        (275, 1, 274): [(None, '-', 274)],
        (276, 2, 274): [(None, '-', 274)],
        (277, 3, 274): [(None, '-', 274)],
        (278, 5, 274): [(None, '-', 274)],
        (279, 4, 274): [(None, '-', 274)]}],
 275: [['1', 'break'],
       "break_stmt: 'break'",
       (275, 0, 275),
       {(275, 0, 275): [('break', 1, 275)],
        ('break', 1, 275): [(None, '-', 275)]}],
 276: [['1', 'continue'],
       "continue_stmt: 'continue'",
       (276, 0, 276),
       {(276, 0, 276): [('continue', 1, 276)],
        ('continue', 1, 276): [(None, '-', 276)]}],
 277: [['1', 'return', ['?', 326]],
       "return_stmt: 'return' [ testlist ]",
       (277, 0, 277),
       {(277, 0, 277): [('return', 1, 277)],
        (326, 2, 277): [(None, '-', 277)],
        ('return', 1, 277): [(326, 2, 277), (None, '-', 277)]}],
 278: [['1', 339],
       'yield_stmt: yield_expr',
       (278, 0, 278),
       {(278, 0, 278): [(339, 1, 278)], (339, 1, 278): [(None, '-', 278)]}],
 279: [['1', 'raise', ['?', 303, ['?', 12, 303, ['?', 12, 303]]]],
       "raise_stmt: 'raise' [ test[ ',' test[ ',' test ]]]",
       (279, 0, 279),
       {(12, 3, 279): [(303, 4, 279)],
        (12, 5, 279): [(303, 6, 279)],
        (279, 0, 279): [('raise', 1, 279)],
        (303, 2, 279): [(12, 3, 279), (None, '-', 279)],
        (303, 4, 279): [(12, 5, 279), (None, '-', 279)],
        (303, 6, 279): [(None, '-', 279)],
        ('raise', 1, 279): [(303, 2, 279), (None, '-', 279)]}],
 280: [['|', ['1', 281], ['1', 282]],
       'import_stmt: import_name | import_from',
       (280, 0, 280),
       {(280, 0, 280): [(281, 1, 280), (282, 2, 280)],
        (281, 1, 280): [(None, '-', 280)],
        (282, 2, 280): [(None, '-', 280)]}],
 281: [['1', 'import', 286],
       "import_name: 'import' dotted_as_names",
       (281, 0, 281),
       {(281, 0, 281): [('import', 1, 281)],
        (286, 2, 281): [(None, '-', 281)],
        ('import', 1, 281): [(286, 2, 281)]}],
 282: [['1',
        'from',
        ['|', ['1', ['*', 23], 287], ['1', 23, ['*', 23]]],
        'import',
        ['|', ['1', 16], ['1', 7, 285, 8], ['1', 285]]],
       "import_from: ( 'from' ( '.' * dotted_name | '.' + ) 'import' ( '*' | '(' import_as_names ')' | import_as_names ))",
       (282, 0, 282),
       {(7, 8, 282): [(285, 9, 282)],
        (8, 10, 282): [(None, '-', 282)],
        (16, 7, 282): [(None, '-', 282)],
        (23, 2, 282): [(287, 3, 282), (23, 2, 282)],
        (23, 4, 282): [(23, 5, 282), ('import', 6, 282)],
        (23, 5, 282): [(23, 5, 282), ('import', 6, 282)],
        (282, 0, 282): [('from', 1, 282)],
        (285, 9, 282): [(8, 10, 282)],
        (285, 11, 282): [(None, '-', 282)],
        (287, 3, 282): [('import', 6, 282)],
        ('from', 1, 282): [(23, 4, 282), (287, 3, 282), (23, 2, 282)],
        ('import', 6, 282): [(7, 8, 282), (16, 7, 282), (285, 11, 282)]}],
 283: [['1', 1, ['?', ['|', ['1', 'as'], ['1', 1]], 1]],
       "import_as_name: NAME[( 'as' | NAME ) NAME ]",
       (283, 0, 283),
       {(1, 1, 283): [(1, 3, 283), (None, '-', 283), ('as', 2, 283)],
        (1, 3, 283): [(1, 4, 283)],
        (1, 4, 283): [(None, '-', 283)],
        (283, 0, 283): [(1, 1, 283)],
        ('as', 2, 283): [(1, 4, 283)]}],
 284: [['1', 287, ['?', ['|', ['1', 'as'], ['1', 1]], 1]],
       "dotted_as_name: dotted_name[( 'as' | NAME ) NAME ]",
       (284, 0, 284),
       {(1, 3, 284): [(1, 4, 284)],
        (1, 4, 284): [(None, '-', 284)],
        (284, 0, 284): [(287, 1, 284)],
        (287, 1, 284): [(1, 3, 284), (None, '-', 284), ('as', 2, 284)],
        ('as', 2, 284): [(1, 4, 284)]}],
 285: [['1', 283, ['*', 12, 283], ['?', 12]],
       "import_as_names: import_as_name( ',' import_as_name ) * [ ',' ]",
       (285, 0, 285),
       {(12, 2, 285): [(283, 3, 285)],
        (12, 4, 285): [(None, '-', 285)],
        (283, 1, 285): [(12, 2, 285), (12, 4, 285), (None, '-', 285)],
        (283, 3, 285): [(12, 2, 285), (12, 4, 285), (None, '-', 285)],
        (285, 0, 285): [(283, 1, 285)]}],
 286: [['1', 284, ['*', 12, 284]],
       "dotted_as_names: dotted_as_name( ',' dotted_as_name ) *",
       (286, 0, 286),
       {(12, 2, 286): [(284, 3, 286)],
        (284, 1, 286): [(12, 2, 286), (None, '-', 286)],
        (284, 3, 286): [(12, 2, 286), (None, '-', 286)],
        (286, 0, 286): [(284, 1, 286)]}],
 287: [['1', 1, ['*', 23, 1]],
       "dotted_name: NAME( '.' NAME ) *",
       (287, 0, 287),
       {(1, 1, 287): [(23, 2, 287), (None, '-', 287)],
        (1, 3, 287): [(23, 2, 287), (None, '-', 287)],
        (23, 2, 287): [(1, 3, 287)],
        (287, 0, 287): [(1, 1, 287)]}],
 288: [['1', 'global', 1, ['*', 12, 1]],
       "global_stmt: 'global' NAME( ',' NAME ) *",
       (288, 0, 288),
       {(1, 2, 288): [(12, 3, 288), (None, '-', 288)],
        (1, 4, 288): [(12, 3, 288), (None, '-', 288)],
        (12, 3, 288): [(1, 4, 288)],
        (288, 0, 288): [('global', 1, 288)],
        ('global', 1, 288): [(1, 2, 288)]}],
 289: [['1', 'exec', 309, ['?', 'in', 303, ['?', 12, 303]]],
       "exec_stmt: 'exec' expr[ 'in' test[ ',' test ]]",
       (289, 0, 289),
       {(12, 5, 289): [(303, 6, 289)],
        (289, 0, 289): [('exec', 1, 289)],
        (303, 4, 289): [(12, 5, 289), (None, '-', 289)],
        (303, 6, 289): [(None, '-', 289)],
        (309, 2, 289): [('in', 3, 289), (None, '-', 289)],
        ('exec', 1, 289): [(309, 2, 289)],
        ('in', 3, 289): [(303, 4, 289)]}],
 290: [['1', 'assert', 303, ['?', 12, 303]],
       "assert_stmt: 'assert' test[ ',' test ]",
       (290, 0, 290),
       {(12, 3, 290): [(303, 4, 290)],
        (290, 0, 290): [('assert', 1, 290)],
        (303, 2, 290): [(12, 3, 290), (None, '-', 290)],
        (303, 4, 290): [(None, '-', 290)],
        ('assert', 1, 290): [(303, 2, 290)]}],
 291: [['|',
        ['1', 292],
        ['1', 293],
        ['1', 294],
        ['1', 295],
        ['1', 296],
        ['1', 261],
        ['1', 328]],
       'compound_stmt: if_stmt | while_stmt | for_stmt | try_stmt | with_stmt | funcdef | classdef',
       (291, 0, 291),
       {(261, 6, 291): [(None, '-', 291)],
        (291, 0, 291): [(295, 4, 291),
                        (261, 6, 291),
                        (292, 1, 291),
                        (296, 5, 291),
                        (294, 3, 291),
                        (328, 7, 291),
                        (293, 2, 291)],
        (292, 1, 291): [(None, '-', 291)],
        (293, 2, 291): [(None, '-', 291)],
        (294, 3, 291): [(None, '-', 291)],
        (295, 4, 291): [(None, '-', 291)],
        (296, 5, 291): [(None, '-', 291)],
        (328, 7, 291): [(None, '-', 291)]}],
 292: [['1',
        'if',
        303,
        11,
        299,
        ['*', 'elif', 303, 11, 299],
        ['?', 'else', 11, 299]],
       "if_stmt: 'if' test ':' suite( 'elif' test ':' suite ) * [ 'else' ':' suite ]",
       (292, 0, 292),
       {(11, 3, 292): [(299, 4, 292)],
        (11, 7, 292): [(299, 8, 292)],
        (11, 10, 292): [(299, 11, 292)],
        (292, 0, 292): [('if', 1, 292)],
        (299, 4, 292): [('elif', 5, 292),
                        (None, '-', 292),
                        ('else', 9, 292)],
        (299, 8, 292): [('elif', 5, 292),
                        (None, '-', 292),
                        ('else', 9, 292)],
        (299, 11, 292): [(None, '-', 292)],
        (303, 2, 292): [(11, 3, 292)],
        (303, 6, 292): [(11, 7, 292)],
        ('elif', 5, 292): [(303, 6, 292)],
        ('else', 9, 292): [(11, 10, 292)],
        ('if', 1, 292): [(303, 2, 292)]}],
 293: [['1', 'while', 303, 11, 299, ['?', 'else', 11, 299]],
       "while_stmt: 'while' test ':' suite[ 'else' ':' suite ]",
       (293, 0, 293),
       {(11, 3, 293): [(299, 4, 293)],
        (11, 6, 293): [(299, 7, 293)],
        (293, 0, 293): [('while', 1, 293)],
        (299, 4, 293): [('else', 5, 293), (None, '-', 293)],
        (299, 7, 293): [(None, '-', 293)],
        (303, 2, 293): [(11, 3, 293)],
        ('else', 5, 293): [(11, 6, 293)],
        ('while', 1, 293): [(303, 2, 293)]}],
 294: [['1', 'for', 325, 'in', 326, 11, 299, ['?', 'else', 11, 299]],
       "for_stmt: 'for' exprlist 'in' testlist ':' suite[ 'else' ':' suite ]",
       (294, 0, 294),
       {(11, 5, 294): [(299, 6, 294)],
        (11, 8, 294): [(299, 9, 294)],
        (294, 0, 294): [('for', 1, 294)],
        (299, 6, 294): [('else', 7, 294), (None, '-', 294)],
        (299, 9, 294): [(None, '-', 294)],
        (325, 2, 294): [('in', 3, 294)],
        (326, 4, 294): [(11, 5, 294)],
        ('else', 7, 294): [(11, 8, 294)],
        ('for', 1, 294): [(325, 2, 294)],
        ('in', 3, 294): [(326, 4, 294)]}],
 295: [['1',
        'try',
        11,
        299,
        ['|',
         ['1',
          ['1', 298, 11, 299],
          ['*', 298, 11, 299],
          ['?', 'else', 11, 299],
          ['?', 'finally', 11, 299]],
         ['1', 'finally', 11, 299]]],
       "try_stmt: ( 'try' ':' suite(( except_clause ':' suite ) + [ 'else' ':' suite ][ 'finally' ':' suite ] | 'finally' ':' suite ))",
       (295, 0, 295),
       {(11, 2, 295): [(299, 3, 295)],
        (11, 5, 295): [(299, 6, 295)],
        (11, 8, 295): [(299, 9, 295)],
        (11, 11, 295): [(299, 12, 295)],
        (11, 14, 295): [(299, 15, 295)],
        (11, 17, 295): [(299, 18, 295)],
        (295, 0, 295): [('try', 1, 295)],
        (298, 4, 295): [(11, 5, 295)],
        (298, 7, 295): [(11, 8, 295)],
        (299, 3, 295): [('finally', 16, 295), (298, 4, 295)],
        (299, 6, 295): [(298, 7, 295),
                        ('finally', 13, 295),
                        ('else', 10, 295),
                        (None, '-', 295)],
        (299, 9, 295): [(298, 7, 295),
                        ('finally', 13, 295),
                        ('else', 10, 295),
                        (None, '-', 295)],
        (299, 12, 295): [('finally', 13, 295), (None, '-', 295)],
        (299, 15, 295): [(None, '-', 295)],
        (299, 18, 295): [(None, '-', 295)],
        ('else', 10, 295): [(11, 11, 295)],
        ('finally', 13, 295): [(11, 14, 295)],
        ('finally', 16, 295): [(11, 17, 295)],
        ('try', 1, 295): [(11, 2, 295)]}],
 296: [['1', 'with', 303, ['?', 297], 11, 299],
       "with_stmt: 'with' test[ with_var ] ':' suite",
       (296, 0, 296),
       {(11, 4, 296): [(299, 5, 296)],
        (296, 0, 296): [('with', 1, 296)],
        (297, 3, 296): [(11, 4, 296)],
        (299, 5, 296): [(None, '-', 296)],
        (303, 2, 296): [(297, 3, 296), (11, 4, 296)],
        ('with', 1, 296): [(303, 2, 296)]}],
 297: [['1', ['|', ['1', 'as'], ['1', 1]], 309],
       "with_var: ( 'as' | NAME ) expr",
       (297, 0, 297),
       {(1, 2, 297): [(309, 3, 297)],
        (297, 0, 297): [(1, 2, 297), ('as', 1, 297)],
        (309, 3, 297): [(None, '-', 297)],
        ('as', 1, 297): [(309, 3, 297)]}],
 298: [['1', 'except', ['?', 303, ['?', 12, 303]]],
       "except_clause: 'except' [ test[ ',' test ]]",
       (298, 0, 298),
       {(12, 3, 298): [(303, 4, 298)],
        (298, 0, 298): [('except', 1, 298)],
        (303, 2, 298): [(12, 3, 298), (None, '-', 298)],
        (303, 4, 298): [(None, '-', 298)],
        ('except', 1, 298): [(303, 2, 298), (None, '-', 298)]}],
 299: [['|', ['1', 267], ['1', 4, 5, 266, ['*', 266], 6]],
       'suite: simple_stmt | NEWLINE INDENT stmt + DEDENT',
       (299, 0, 299),
       {(4, 2, 299): [(5, 3, 299)],
        (5, 3, 299): [(266, 4, 299)],
        (6, 6, 299): [(None, '-', 299)],
        (266, 4, 299): [(266, 5, 299), (6, 6, 299)],
        (266, 5, 299): [(266, 5, 299), (6, 6, 299)],
        (267, 1, 299): [(None, '-', 299)],
        (299, 0, 299): [(4, 2, 299), (267, 1, 299)]}],
 300: [['1', 301, ['?', ['1', 12, 301], ['*', 12, 301], ['?', 12]]],
       "testlist_safe: old_test[( ',' old_test ) + [ ',' ]]",
       (300, 0, 300),
       {(12, 2, 300): [(301, 3, 300)],
        (12, 4, 300): [(301, 5, 300)],
        (12, 6, 300): [(None, '-', 300)],
        (300, 0, 300): [(301, 1, 300)],
        (301, 1, 300): [(12, 2, 300), (None, '-', 300)],
        (301, 3, 300): [(12, 4, 300), (12, 6, 300), (None, '-', 300)],
        (301, 5, 300): [(12, 4, 300), (12, 6, 300), (None, '-', 300)]}],
 301: [['|', ['1', 304], ['1', 302]],
       'old_test: or_test | old_lambdef',
       (301, 0, 301),
       {(301, 0, 301): [(304, 1, 301), (302, 2, 301)],
        (302, 2, 301): [(None, '-', 301)],
        (304, 1, 301): [(None, '-', 301)]}],
 302: [['1', 'lambda', ['?', 263], 11, 301],
       "old_lambdef: 'lambda' [ varargslist ] ':' old_test",
       (302, 0, 302),
       {(11, 3, 302): [(301, 4, 302)],
        (263, 2, 302): [(11, 3, 302)],
        (301, 4, 302): [(None, '-', 302)],
        (302, 0, 302): [('lambda', 1, 302)],
        ('lambda', 1, 302): [(11, 3, 302), (263, 2, 302)]}],
 303: [['|', ['1', 304, ['?', 'if', 304, 'else', 303]], ['1', 320]],
       "test: or_test[ 'if' or_test 'else' test ] | lambdef",
       (303, 0, 303),
       {(303, 0, 303): [(304, 1, 303), (320, 6, 303)],
        (303, 5, 303): [(None, '-', 303)],
        (304, 1, 303): [('if', 2, 303), (None, '-', 303)],
        (304, 3, 303): [('else', 4, 303)],
        (320, 6, 303): [(None, '-', 303)],
        ('else', 4, 303): [(303, 5, 303)],
        ('if', 2, 303): [(304, 3, 303)]}],
 304: [['1', 305, ['*', 'or', 305]],
       "or_test: and_test( 'or' and_test ) *",
       (304, 0, 304),
       {(304, 0, 304): [(305, 1, 304)],
        (305, 1, 304): [('or', 2, 304), (None, '-', 304)],
        (305, 3, 304): [('or', 2, 304), (None, '-', 304)],
        ('or', 2, 304): [(305, 3, 304)]}],
 305: [['1', 306, ['*', 'and', 306]],
       "and_test: not_test( 'and' not_test ) *",
       (305, 0, 305),
       {(305, 0, 305): [(306, 1, 305)],
        (306, 1, 305): [('and', 2, 305), (None, '-', 305)],
        (306, 3, 305): [('and', 2, 305), (None, '-', 305)],
        ('and', 2, 305): [(306, 3, 305)]}],
 306: [['|', ['1', 'not', 306], ['1', 307]],
       "not_test: 'not' not_test | comparison",
       (306, 0, 306),
       {(306, 0, 306): [('not', 1, 306), (307, 3, 306)],
        (306, 2, 306): [(None, '-', 306)],
        (307, 3, 306): [(None, '-', 306)],
        ('not', 1, 306): [(306, 2, 306)]}],
 307: [['1', 309, ['*', 308, 309]],
       'comparison: expr( comp_op expr ) *',
       (307, 0, 307),
       {(307, 0, 307): [(309, 1, 307)],
        (308, 2, 307): [(309, 3, 307)],
        (309, 1, 307): [(308, 2, 307), (None, '-', 307)],
        (309, 3, 307): [(308, 2, 307), (None, '-', 307)]}],
 308: [['|',
        ['1', 20],
        ['1', 21],
        ['1', 28],
        ['1', 31],
        ['1', 30],
        ['1', '<>'],
        ['1', 29],
        ['1', 'in'],
        ['1', 'not', 'in'],
        ['1', 'is'],
        ['1', 'is', 'not']],
       "comp_op: '<' | '>' | '==' | '>=' | '<=' | '<>' | '!=' | 'in' | 'not' 'in' | 'is' | 'is' 'not'",
       (308, 0, 308),
       {(20, 1, 308): [(None, '-', 308)],
        (21, 2, 308): [(None, '-', 308)],
        (28, 3, 308): [(None, '-', 308)],
        (29, 7, 308): [(None, '-', 308)],
        (30, 5, 308): [(None, '-', 308)],
        (31, 4, 308): [(None, '-', 308)],
        (308, 0, 308): [('not', 9, 308),
                        (29, 7, 308),
                        ('is', 11, 308),
                        (31, 4, 308),
                        (20, 1, 308),
                        ('in', 8, 308),
                        (21, 2, 308),
                        ('is', 12, 308),
                        (28, 3, 308),
                        (30, 5, 308),
                        ('<>', 6, 308)],
        ('<>', 6, 308): [(None, '-', 308)],
        ('in', 8, 308): [(None, '-', 308)],
        ('in', 10, 308): [(None, '-', 308)],
        ('is', 11, 308): [(None, '-', 308)],
        ('is', 12, 308): [('not', 13, 308)],
        ('not', 9, 308): [('in', 10, 308)],
        ('not', 13, 308): [(None, '-', 308)]}],
 309: [['1', 310, ['*', 18, 310]],
       "expr: xor_expr( '|' xor_expr ) *",
       (309, 0, 309),
       {(18, 2, 309): [(310, 3, 309)],
        (309, 0, 309): [(310, 1, 309)],
        (310, 1, 309): [(None, '-', 309), (18, 2, 309)],
        (310, 3, 309): [(18, 2, 309), (None, '-', 309)]}],
 310: [['1', 311, ['*', 33, 311]],
       "xor_expr: and_expr( '^' and_expr ) *",
       (310, 0, 310),
       {(33, 2, 310): [(311, 3, 310)],
        (310, 0, 310): [(311, 1, 310)],
        (311, 1, 310): [(33, 2, 310), (None, '-', 310)],
        (311, 3, 310): [(33, 2, 310), (None, '-', 310)]}],
 311: [['1', 312, ['*', 19, 312]],
       "and_expr: shift_expr( '&' shift_expr ) *",
       (311, 0, 311),
       {(19, 2, 311): [(312, 3, 311)],
        (311, 0, 311): [(312, 1, 311)],
        (312, 1, 311): [(19, 2, 311), (None, '-', 311)],
        (312, 3, 311): [(19, 2, 311), (None, '-', 311)]}],
 312: [['1', 313, ['*', ['|', ['1', 34], ['1', 35]], 313]],
       "shift_expr: arith_expr(( '<<' | '>>' ) arith_expr ) *",
       (312, 0, 312),
       {(34, 2, 312): [(313, 4, 312)],
        (35, 3, 312): [(313, 4, 312)],
        (312, 0, 312): [(313, 1, 312)],
        (313, 1, 312): [(None, '-', 312), (35, 3, 312), (34, 2, 312)],
        (313, 4, 312): [(34, 2, 312), (35, 3, 312), (None, '-', 312)]}],
 313: [['1', 314, ['*', ['|', ['1', 14], ['1', 15]], 314]],
       "arith_expr: term(( '+' | '-' ) term ) *",
       (313, 0, 313),
       {(14, 2, 313): [(314, 4, 313)],
        (15, 3, 313): [(314, 4, 313)],
        (313, 0, 313): [(314, 1, 313)],
        (314, 1, 313): [(15, 3, 313), (14, 2, 313), (None, '-', 313)],
        (314, 4, 313): [(15, 3, 313), (14, 2, 313), (None, '-', 313)]}],
 314: [['1',
        315,
        ['*', ['|', ['1', 16], ['1', 17], ['1', 24], ['1', 48]], 315]],
       "term: factor(( '*' | '/' | '%' | '//' ) factor ) *",
       (314, 0, 314),
       {(16, 2, 314): [(315, 6, 314)],
        (17, 3, 314): [(315, 6, 314)],
        (24, 4, 314): [(315, 6, 314)],
        (48, 5, 314): [(315, 6, 314)],
        (314, 0, 314): [(315, 1, 314)],
        (315, 1, 314): [(17, 3, 314),
                        (48, 5, 314),
                        (16, 2, 314),
                        (None, '-', 314),
                        (24, 4, 314)],
        (315, 6, 314): [(24, 4, 314),
                        (17, 3, 314),
                        (48, 5, 314),
                        (16, 2, 314),
                        (None, '-', 314)]}],
 315: [['|', ['1', ['|', ['1', 14], ['1', 15], ['1', 32]], 315], ['1', 316]],
       "factor: ( '+' | '-' | '~' ) factor | power",
       (315, 0, 315),
       {(14, 1, 315): [(315, 4, 315)],
        (15, 2, 315): [(315, 4, 315)],
        (32, 3, 315): [(315, 4, 315)],
        (315, 0, 315): [(316, 5, 315),
                        (14, 1, 315),
                        (32, 3, 315),
                        (15, 2, 315)],
        (315, 4, 315): [(None, '-', 315)],
        (316, 5, 315): [(None, '-', 315)]}],
 316: [['1', 317, ['*', 321], ['?', 36, 315]],
       "power: atom trailer * [ '**' factor ]",
       (316, 0, 316),
       {(36, 3, 316): [(315, 4, 316)],
        (315, 4, 316): [(None, '-', 316)],
        (316, 0, 316): [(317, 1, 316)],
        (317, 1, 316): [(321, 2, 316), (36, 3, 316), (None, '-', 316)],
        (321, 2, 316): [(321, 2, 316), (36, 3, 316), (None, '-', 316)]}],
 317: [['|',
        ['1', 7, ['?', ['|', ['1', 339], ['1', 319]]], 8],
        ['1', 9, ['?', 318], 10],
        ['1', 26, ['?', 327], 27],
        ['1', 25, 337, 25],
        ['1', 1],
        ['1', 2],
        ['1', 3, ['*', 3]]],
       "atom: ( '(' [ yield_expr | testlist_gexp ] ')' | '[' [ listmaker ] ']' | '{' [ dictmaker ] '}' | '`' testlist1 '`' | NAME | NUMBER | STRING + )",
       (317, 0, 317),
       {(1, 14, 317): [(None, '-', 317)],
        (2, 15, 317): [(None, '-', 317)],
        (3, 16, 317): [(3, 17, 317), (None, '-', 317)],
        (3, 17, 317): [(3, 17, 317), (None, '-', 317)],
        (7, 1, 317): [(319, 3, 317), (339, 2, 317), (8, 4, 317)],
        (8, 4, 317): [(None, '-', 317)],
        (9, 5, 317): [(10, 7, 317), (318, 6, 317)],
        (10, 7, 317): [(None, '-', 317)],
        (25, 11, 317): [(337, 12, 317)],
        (25, 13, 317): [(None, '-', 317)],
        (26, 8, 317): [(27, 10, 317), (327, 9, 317)],
        (27, 10, 317): [(None, '-', 317)],
        (317, 0, 317): [(25, 11, 317),
                        (7, 1, 317),
                        (1, 14, 317),
                        (26, 8, 317),
                        (2, 15, 317),
                        (9, 5, 317),
                        (3, 16, 317)],
        (318, 6, 317): [(10, 7, 317)],
        (319, 3, 317): [(8, 4, 317)],
        (327, 9, 317): [(27, 10, 317)],
        (337, 12, 317): [(25, 13, 317)],
        (339, 2, 317): [(8, 4, 317)]}],
 318: [['1', 303, ['|', ['1', 332], ['1', ['*', 12, 303], ['?', 12]]]],
       "listmaker: test( list_for | ( ',' test ) * [ ',' ])",
       (318, 0, 318),
       {(12, 3, 318): [(303, 4, 318)],
        (12, 5, 318): [(None, '-', 318)],
        (303, 1, 318): [(12, 5, 318),
                        (332, 2, 318),
                        (12, 3, 318),
                        (None, '-', 318)],
        (303, 4, 318): [(12, 5, 318), (12, 3, 318), (None, '-', 318)],
        (318, 0, 318): [(303, 1, 318)],
        (332, 2, 318): [(None, '-', 318)]}],
 319: [['1', 303, ['|', ['1', 335], ['1', ['*', 12, 303], ['?', 12]]]],
       "testlist_gexp: test( gen_for | ( ',' test ) * [ ',' ])",
       (319, 0, 319),
       {(12, 3, 319): [(303, 4, 319)],
        (12, 5, 319): [(None, '-', 319)],
        (303, 1, 319): [(12, 5, 319),
                        (335, 2, 319),
                        (12, 3, 319),
                        (None, '-', 319)],
        (303, 4, 319): [(12, 5, 319), (12, 3, 319), (None, '-', 319)],
        (319, 0, 319): [(303, 1, 319)],
        (335, 2, 319): [(None, '-', 319)]}],
 320: [['1', 'lambda', ['?', 263], 11, 303],
       "lambdef: 'lambda' [ varargslist ] ':' test",
       (320, 0, 320),
       {(11, 3, 320): [(303, 4, 320)],
        (263, 2, 320): [(11, 3, 320)],
        (303, 4, 320): [(None, '-', 320)],
        (320, 0, 320): [('lambda', 1, 320)],
        ('lambda', 1, 320): [(11, 3, 320), (263, 2, 320)]}],
 321: [['|', ['1', 7, ['?', 329], 8], ['1', 9, 322, 10], ['1', 23, 1]],
       "trailer: '(' [ arglist ] ')' | '[' subscriptlist ']' | '.' NAME",
       (321, 0, 321),
       {(1, 8, 321): [(None, '-', 321)],
        (7, 1, 321): [(329, 2, 321), (8, 3, 321)],
        (8, 3, 321): [(None, '-', 321)],
        (9, 4, 321): [(322, 5, 321)],
        (10, 6, 321): [(None, '-', 321)],
        (23, 7, 321): [(1, 8, 321)],
        (321, 0, 321): [(23, 7, 321), (9, 4, 321), (7, 1, 321)],
        (322, 5, 321): [(10, 6, 321)],
        (329, 2, 321): [(8, 3, 321)]}],
 322: [['1', 323, ['*', 12, 323], ['?', 12]],
       "subscriptlist: subscript( ',' subscript ) * [ ',' ]",
       (322, 0, 322),
       {(12, 2, 322): [(323, 3, 322)],
        (12, 4, 322): [(None, '-', 322)],
        (322, 0, 322): [(323, 1, 322)],
        (323, 1, 322): [(12, 2, 322), (12, 4, 322), (None, '-', 322)],
        (323, 3, 322): [(12, 2, 322), (12, 4, 322), (None, '-', 322)]}],
 323: [['|',
        ['1', 23, 23, 23],
        ['1', 303],
        ['1', ['?', 303], 11, ['?', 303], ['?', 324]]],
       "subscript: '.' '.' '.' | test | [ test ] ':' [ test ][ sliceop ]",
       (323, 0, 323),
       {(11, 6, 323): [(None, '-', 323), (303, 7, 323), (324, 8, 323)],
        (23, 1, 323): [(23, 2, 323)],
        (23, 2, 323): [(23, 3, 323)],
        (23, 3, 323): [(None, '-', 323)],
        (303, 4, 323): [(None, '-', 323)],
        (303, 5, 323): [(11, 6, 323)],
        (303, 7, 323): [(None, '-', 323), (324, 8, 323)],
        (323, 0, 323): [(303, 4, 323),
                        (303, 5, 323),
                        (11, 6, 323),
                        (23, 1, 323)],
        (324, 8, 323): [(None, '-', 323)]}],
 324: [['1', 11, ['?', 303]],
       "sliceop: ':' [ test ]",
       (324, 0, 324),
       {(11, 1, 324): [(303, 2, 324), (None, '-', 324)],
        (303, 2, 324): [(None, '-', 324)],
        (324, 0, 324): [(11, 1, 324)]}],
 325: [['1', 309, ['*', 12, 309], ['?', 12]],
       "exprlist: expr( ',' expr ) * [ ',' ]",
       (325, 0, 325),
       {(12, 2, 325): [(309, 3, 325)],
        (12, 4, 325): [(None, '-', 325)],
        (309, 1, 325): [(12, 2, 325), (12, 4, 325), (None, '-', 325)],
        (309, 3, 325): [(12, 2, 325), (12, 4, 325), (None, '-', 325)],
        (325, 0, 325): [(309, 1, 325)]}],
 326: [['1', 303, ['*', 12, 303], ['?', 12]],
       "testlist: test( ',' test ) * [ ',' ]",
       (326, 0, 326),
       {(12, 2, 326): [(303, 3, 326)],
        (12, 4, 326): [(None, '-', 326)],
        (303, 1, 326): [(12, 2, 326), (12, 4, 326), (None, '-', 326)],
        (303, 3, 326): [(12, 2, 326), (12, 4, 326), (None, '-', 326)],
        (326, 0, 326): [(303, 1, 326)]}],
 327: [['1', 303, 11, 303, ['*', 12, 303, 11, 303], ['?', 12]],
       "dictmaker: test ':' test( ',' test ':' test ) * [ ',' ]",
       (327, 0, 327),
       {(11, 2, 327): [(303, 3, 327)],
        (11, 6, 327): [(303, 7, 327)],
        (12, 4, 327): [(303, 5, 327)],
        (12, 8, 327): [(None, '-', 327)],
        (303, 1, 327): [(11, 2, 327)],
        (303, 3, 327): [(12, 4, 327), (None, '-', 327), (12, 8, 327)],
        (303, 5, 327): [(11, 6, 327)],
        (303, 7, 327): [(12, 4, 327), (None, '-', 327), (12, 8, 327)],
        (327, 0, 327): [(303, 1, 327)]}],
 328: [['1', 'class', 1, ['?', 7, ['?', 326], 8], 11, 299],
       "classdef: 'class' NAME[ '(' [ testlist ] ')' ] ':' suite",
       (328, 0, 328),
       {(1, 2, 328): [(7, 3, 328), (11, 6, 328)],
        (7, 3, 328): [(326, 4, 328), (8, 5, 328)],
        (8, 5, 328): [(11, 6, 328)],
        (11, 6, 328): [(299, 7, 328)],
        (299, 7, 328): [(None, '-', 328)],
        (326, 4, 328): [(8, 5, 328)],
        (328, 0, 328): [('class', 1, 328)],
        ('class', 1, 328): [(1, 2, 328)]}],
 329: [['1',
        ['*', 330, 12],
        ['|',
         ['1', 330, ['?', 12]],
         ['1', 16, 303, ['?', 12, 36, 303]],
         ['1', 36, 303]]],
       "arglist: ( argument ',' ) * ( argument[ ',' ] | '*' test[ ',' '**' test ] | '**' test )",
       (329, 0, 329),
       {(12, 2, 329): [(16, 5, 329),
                       (330, 3, 329),
                       (330, 1, 329),
                       (36, 10, 329)],
        (12, 4, 329): [(None, '-', 329)],
        (12, 7, 329): [(36, 8, 329)],
        (16, 5, 329): [(303, 6, 329)],
        (36, 8, 329): [(303, 9, 329)],
        (36, 10, 329): [(303, 11, 329)],
        (303, 6, 329): [(12, 7, 329), (None, '-', 329)],
        (303, 9, 329): [(None, '-', 329)],
        (303, 11, 329): [(None, '-', 329)],
        (329, 0, 329): [(16, 5, 329),
                        (330, 3, 329),
                        (330, 1, 329),
                        (36, 10, 329)],
        (330, 1, 329): [(12, 2, 329)],
        (330, 3, 329): [(12, 4, 329), (None, '-', 329)]}],
 330: [['|', ['1', 303, ['?', 335]], ['1', 303, 22, 303]],
       "argument: test[ gen_for ] | test '=' test",
       (330, 0, 330),
       {(22, 4, 330): [(303, 5, 330)],
        (303, 1, 330): [(335, 2, 330), (None, '-', 330)],
        (303, 3, 330): [(22, 4, 330)],
        (303, 5, 330): [(None, '-', 330)],
        (330, 0, 330): [(303, 3, 330), (303, 1, 330)],
        (335, 2, 330): [(None, '-', 330)]}],
 331: [['|', ['1', 332], ['1', 333]],
       'list_iter: list_for | list_if',
       (331, 0, 331),
       {(331, 0, 331): [(333, 2, 331), (332, 1, 331)],
        (332, 1, 331): [(None, '-', 331)],
        (333, 2, 331): [(None, '-', 331)]}],
 332: [['1', 'for', 325, 'in', 300, ['?', 331]],
       "list_for: 'for' exprlist 'in' testlist_safe[ list_iter ]",
       (332, 0, 332),
       {(300, 4, 332): [(None, '-', 332), (331, 5, 332)],
        (325, 2, 332): [('in', 3, 332)],
        (331, 5, 332): [(None, '-', 332)],
        (332, 0, 332): [('for', 1, 332)],
        ('for', 1, 332): [(325, 2, 332)],
        ('in', 3, 332): [(300, 4, 332)]}],
 333: [['1', 'if', 301, ['?', 331]],
       "list_if: 'if' old_test[ list_iter ]",
       (333, 0, 333),
       {(301, 2, 333): [(331, 3, 333), (None, '-', 333)],
        (331, 3, 333): [(None, '-', 333)],
        (333, 0, 333): [('if', 1, 333)],
        ('if', 1, 333): [(301, 2, 333)]}],
 334: [['|', ['1', 335], ['1', 336]],
       'gen_iter: gen_for | gen_if',
       (334, 0, 334),
       {(334, 0, 334): [(336, 2, 334), (335, 1, 334)],
        (335, 1, 334): [(None, '-', 334)],
        (336, 2, 334): [(None, '-', 334)]}],
 335: [['1', 'for', 325, 'in', 304, ['?', 334]],
       "gen_for: 'for' exprlist 'in' or_test[ gen_iter ]",
       (335, 0, 335),
       {(304, 4, 335): [(334, 5, 335), (None, '-', 335)],
        (325, 2, 335): [('in', 3, 335)],
        (334, 5, 335): [(None, '-', 335)],
        (335, 0, 335): [('for', 1, 335)],
        ('for', 1, 335): [(325, 2, 335)],
        ('in', 3, 335): [(304, 4, 335)]}],
 336: [['1', 'if', 301, ['?', 334]],
       "gen_if: 'if' old_test[ gen_iter ]",
       (336, 0, 336),
       {(301, 2, 336): [(334, 3, 336), (None, '-', 336)],
        (334, 3, 336): [(None, '-', 336)],
        (336, 0, 336): [('if', 1, 336)],
        ('if', 1, 336): [(301, 2, 336)]}],
 337: [['1', 303, ['*', 12, 303]],
       "testlist1: test( ',' test ) *",
       (337, 0, 337),
       {(12, 2, 337): [(303, 3, 337)],
        (303, 1, 337): [(12, 2, 337), (None, '-', 337)],
        (303, 3, 337): [(12, 2, 337), (None, '-', 337)],
        (337, 0, 337): [(303, 1, 337)]}],
 338: [['1', 1],
       'encoding_decl: NAME',
       (338, 0, 338),
       {(1, 1, 338): [(None, '-', 338)], (338, 0, 338): [(1, 1, 338)]}],
 339: [['1', 'yield', ['?', 326]],
       "yield_expr: 'yield' [ testlist ]",
       (339, 0, 339),
       {(326, 2, 339): [(None, '-', 339)],
        (339, 0, 339): [('yield', 1, 339)],
        ('yield', 1, 339): [(326, 2, 339), (None, '-', 339)]}]}

# expansion targets:

expanded  = {}

# reachables:

reachables = {256: set([1, 2, 259, 4, 261, 7, 9, 267, 268, 269, 14, 271, 272, 273, 274, 3, 276, 277, 278, 279, 280, 260, 26, 288, 289, 290, 291, 292, 293, 294, 295, 296, 306, 303, 304, 305, 50, 307, 309, 310, 311, 312, 313, 314, 315, 316, 317, 320, 'global', 'return', 326, 328, 'assert', 339, 'not', 15, 'with', 'yield', 'try', 'while', 275, 'del', 'def', 'pass', 282, 'if', 'for', 'continue', 'print', 'import', 32, 'exec', 'from', 'class', 'raise', 'break', 25, 281, 'lambda']),
 257: set([0, 1, 2, 3, 4, 261, 7, 9, 266, 267, 268, 269, 14, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 260, 26, 288, 289, 290, 291, 'from', 'raise', 294, 295, 296, 306, 303, 304, 305, 50, 307, 309, 310, 311, 312, 313, 314, 315, 316, 317, 320, 'global', 'return', 326, 328, 'assert', 339, 'not', 15, 'with', 259, 'yield', 'try', 'while', 'continue', 'del', 'def', 'pass', 282, 'if', 'for', 'print', 'import', 32, 'exec', 292, 'class', 293, 'break', 25, 281, 'lambda']),
 258: set([320, 1, 2, 3, 326, 7, 9, 14, 15, 'not', 25, 26, 32, 303, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 317, 'lambda']),
 259: set([50]),
 260: set([50, 259]),
 261: set([50, 259, 260, 'def']),
 262: set([7]),
 263: set([264, 16, 7, 36, 1]),
 264: set([1, 7]),
 265: set([264, 1, 7]),
 266: set([1, 2, 3, 260, 261, 7, 9, 267, 268, 269, 14, 271, 272, 273, 274, 275, 276, 277, 278, 'pass', 280, 25, 26, 282, 'if', 288, 289, 290, 291, 'from', 'raise', 294, 295, 296, 50, 303, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 317, 320, 32, 'global', 'return', 326, 'exec', 328, 'assert', 'print', 339, 'for', 'import', 'not', 292, 15, 'with', 'class', 279, 'break', 293, 259, 'yield', 'try', 'while', 'continue', 'del', 281, 'def', 'lambda']),
 267: set([1, 2, 3, 7, 9, 'global', 268, 269, 14, 271, 272, 273, 274, 275, 276, 277, 278, 'pass', 280, 25, 26, 282, 288, 289, 290, 'from', 'raise', 303, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 317, 320, 32, 'return', 326, 'exec', 'assert', 'print', 339, 'import', 'not', 15, 279, 'break', 'yield', 'continue', 'del', 281, 'lambda']),
 268: set([1, 2, 3, 7, 9, 'global', 269, 14, 271, 272, 273, 274, 275, 276, 277, 278, 'pass', 280, 25, 26, 282, 288, 289, 290, 'from', 'raise', 303, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 317, 320, 32, 'return', 326, 'exec', 'assert', 'print', 339, 'import', 'not', 15, 279, 'break', 'yield', 'continue', 'del', 281, 'lambda']),
 269: set([320, 1, 2, 3, 326, 7, 9, 14, 15, 'not', 25, 26, 32, 303, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 317, 'lambda']),
 270: set([37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49]),
 271: set(['print']),
 272: set(['del']),
 273: set(['pass']),
 274: set(['return', 'continue', 339, 'yield', 'break', 275, 276, 277, 278, 279, 'raise']),
 275: set(['break']),
 276: set(['continue']),
 277: set(['return']),
 278: set([339, 'yield']),
 279: set(['raise']),
 280: set([281, 282, 'from', 'import']),
 281: set(['import']),
 282: set(['from']),
 283: set([1]),
 284: set([1, 287]),
 285: set([1, 283]),
 286: set([1, 284, 287]),
 287: set([1]),
 288: set(['global']),
 289: set(['exec']),
 290: set(['assert']),
 291: set([259, 292, 293, 294, 295, 296, 50, 'for', 'try', 328, 'while', 260, 'if', 'with', 'class', 'def', 261]),
 292: set(['if']),
 293: set(['while']),
 294: set(['for']),
 295: set(['try']),
 296: set(['with']),
 297: set([1, 'as']),
 298: set(['except']),
 299: set([1, 2, 3, 4, 7, 9, 267, 268, 269, 14, 271, 272, 273, 274, 275, 276, 277, 278, 'pass', 280, 25, 26, 282, 288, 289, 290, 'from', 'raise', 303, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 317, 320, 32, 'global', 'return', 326, 'exec', 'assert', 'print', 339, 'import', 'not', 15, 279, 'break', 'yield', 'continue', 'del', 281, 'lambda']),
 300: set([1, 2, 3, 7, 9, 14, 15, 'not', 25, 26, 32, 301, 302, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 317, 'lambda']),
 301: set([1, 2, 3, 7, 9, 14, 15, 'not', 25, 26, 32, 302, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 317, 'lambda']),
 302: set(['lambda']),
 303: set([320, 1, 2, 3, 7, 9, 14, 15, 'not', 25, 26, 32, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 317, 'lambda']),
 304: set([1, 2, 3, 7, 9, 14, 15, 'not', 25, 26, 32, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 317]),
 305: set([1, 2, 3, 7, 9, 14, 15, 'not', 25, 26, 32, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 317]),
 306: set([1, 2, 3, 7, 9, 14, 15, 'not', 25, 26, 32, 307, 309, 310, 311, 312, 313, 314, 315, 316, 317]),
 307: set([1, 2, 3, 7, 9, 14, 15, 25, 26, 32, 309, 310, 311, 312, 313, 314, 315, 316, 317]),
 308: set(['<>', 'is', 20, 21, 'in', 'not', 28, 29, 30, 31]),
 309: set([1, 2, 3, 7, 9, 14, 15, 25, 26, 32, 310, 311, 312, 313, 314, 315, 316, 317]),
 310: set([1, 2, 3, 7, 9, 14, 15, 25, 26, 32, 311, 312, 313, 314, 315, 316, 317]),
 311: set([1, 2, 3, 7, 9, 14, 15, 25, 26, 32, 312, 313, 314, 315, 316, 317]),
 312: set([32, 1, 2, 3, 7, 9, 14, 15, 26, 25, 313, 314, 315, 316, 317]),
 313: set([32, 1, 2, 3, 7, 9, 14, 15, 317, 25, 314, 315, 316, 26]),
 314: set([32, 1, 2, 3, 7, 9, 14, 15, 25, 26, 315, 316, 317]),
 315: set([32, 1, 2, 3, 7, 9, 14, 15, 25, 26, 316, 317]),
 316: set([1, 2, 3, 7, 9, 25, 26, 317]),
 317: set([1, 2, 3, 7, 9, 25, 26]),
 318: set([320, 1, 2, 3, 7, 9, 14, 15, 'not', 25, 26, 32, 303, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 317, 'lambda']),
 319: set([320, 1, 2, 3, 7, 9, 14, 15, 'not', 25, 26, 32, 303, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 317, 'lambda']),
 320: set(['lambda']),
 321: set([9, 7, 23]),
 322: set([320, 1, 2, 323, 7, 9, 11, 14, 15, 3, 23, 'not', 25, 26, 32, 303, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 317, 'lambda']),
 323: set([320, 1, 2, 3, 7, 9, 11, 14, 15, 23, 'not', 25, 26, 32, 303, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 317, 'lambda']),
 324: set([11]),
 325: set([1, 2, 3, 7, 9, 14, 15, 25, 26, 32, 309, 310, 311, 312, 313, 314, 315, 316, 317]),
 326: set([320, 1, 2, 3, 7, 9, 14, 15, 'not', 25, 26, 32, 303, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 317, 'lambda']),
 327: set([320, 1, 2, 3, 7, 9, 14, 15, 'not', 25, 26, 32, 303, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 317, 'lambda']),
 328: set(['class']),
 329: set([320, 1, 2, 3, 7, 9, 330, 14, 15, 16, 'not', 25, 26, 32, 36, 303, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 317, 'lambda']),
 330: set([320, 1, 2, 3, 7, 9, 14, 15, 'not', 25, 26, 32, 303, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 317, 'lambda']),
 331: set([332, 333, 'for', 'if']),
 332: set(['for']),
 333: set(['if']),
 334: set([336, 'if', 'for', 335]),
 335: set(['for']),
 336: set(['if']),
 337: set([320, 1, 2, 3, 7, 9, 14, 15, 'not', 25, 26, 32, 303, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 317, 'lambda']),
 338: set([1]),
 339: set(['yield'])}

# terminals:

terminals  = set([0, 1, 'elif', 3, 4, 5, 6, 7, 8, 9, 'is', 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 'in', 24, 25, 26, 27, 28, 29, 30, 'if', 32, 33, 34, 'finally', 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, '<>', 50, 23, 'import', 31, 'pass', 'except', 2, 'global', 'return', 49, 'exec', 'else', 'assert', 'print', 35, 'not', 'from', 'with', 'class', 'raise', 'break', 'and', 'for', 'as', 'yield', 'try', 'while', 'continue', 'del', 10, 'or', 'def', 'lambda'])

# terminal ancestors:

ancestors  = {0: set([257]),
 1: set([256, 257, 258, 263, 264, 265, 266, 267, 268, 269, 283, 284, 285, 286, 287, 297, 299, 300, 301, 303, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 322, 323, 325, 326, 327, 329, 330, 337, 338]),
 2: set([256, 257, 258, 266, 267, 268, 269, 299, 300, 301, 303, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 322, 323, 325, 326, 327, 329, 330, 337]),
 3: set([256, 257, 258, 266, 267, 268, 269, 299, 300, 301, 303, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 322, 323, 325, 326, 327, 329, 330, 337]),
 4: set([256, 257, 299]),
 7: set([256, 257, 258, 262, 263, 264, 265, 266, 267, 268, 269, 299, 300, 301, 303, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 321, 322, 323, 325, 326, 327, 329, 330, 337]),
 9: set([256, 257, 258, 266, 267, 268, 269, 299, 300, 301, 303, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 321, 322, 323, 325, 326, 327, 329, 330, 337]),
 11: set([322, 323, 324]),
 14: set([256, 257, 258, 266, 267, 268, 269, 299, 300, 301, 303, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 318, 319, 322, 323, 325, 326, 327, 329, 330, 337]),
 15: set([256, 257, 258, 266, 267, 268, 269, 299, 300, 301, 303, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 318, 319, 322, 323, 325, 326, 327, 329, 330, 337]),
 16: set([329, 263]),
 20: set([308]),
 21: set([308]),
 23: set([321, 322, 323]),
 25: set([256, 257, 258, 266, 267, 268, 269, 299, 300, 301, 303, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 322, 323, 325, 326, 327, 329, 330, 337]),
 26: set([256, 257, 258, 266, 267, 268, 269, 299, 300, 301, 303, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 322, 323, 325, 326, 327, 329, 330, 337]),
 28: set([308]),
 29: set([308]),
 30: set([308]),
 31: set([308]),
 32: set([256, 257, 258, 266, 267, 268, 269, 299, 300, 301, 303, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 318, 319, 322, 323, 325, 326, 327, 329, 330, 337]),
 36: set([329, 263]),
 37: set([270]),
 38: set([270]),
 39: set([270]),
 40: set([270]),
 41: set([270]),
 42: set([270]),
 43: set([270]),
 44: set([270]),
 45: set([270]),
 46: set([270]),
 47: set([270]),
 49: set([270]),
 50: set([256, 257, 259, 260, 261, 266, 291]),
 '<>': set([308]),
 'as': set([297]),
 'assert': set([256, 257, 290, 299, 266, 267, 268]),
 'break': set([256, 257, 299, 266, 267, 268, 274, 275]),
 'class': set([256, 257, 266, 291, 328]),
 'continue': set([256, 257, 299, 266, 267, 268, 274, 276]),
 'def': set([256, 257, 266, 291, 261]),
 'del': set([256, 257, 299, 266, 267, 268, 272]),
 'except': set([298]),
 'exec': set([256, 257, 299, 289, 266, 267, 268]),
 'for': set([256, 257, 291, 294, 266, 331, 332, 334, 335]),
 'from': set([256, 257, 299, 266, 267, 268, 280, 282]),
 'global': set([256, 257, 299, 266, 267, 268, 288]),
 'if': set([256, 257, 291, 292, 266, 331, 333, 334, 336]),
 'import': set([256, 257, 299, 266, 267, 268, 280, 281]),
 'in': set([308]),
 'is': set([308]),
 'lambda': set([256, 257, 258, 266, 267, 268, 269, 299, 300, 301, 302, 303, 318, 319, 320, 322, 323, 326, 327, 329, 330, 337]),
 'not': set([256, 257, 258, 266, 267, 268, 269, 299, 300, 301, 303, 304, 305, 306, 308, 318, 319, 322, 323, 326, 327, 329, 330, 337]),
 'pass': set([256, 257, 299, 266, 267, 268, 273]),
 'print': set([256, 257, 299, 266, 267, 268, 271]),
 'raise': set([256, 257, 299, 266, 267, 268, 274, 279]),
 'return': set([256, 257, 299, 266, 267, 268, 274, 277]),
 'try': set([256, 257, 266, 291, 295]),
 'while': set([256, 257, 266, 291, 293]),
 'with': set([256, 257, 266, 291, 296]),
 'yield': set([256, 257, 299, 266, 267, 268, 274, 339, 278])}

# symbols of:

symbols_of  = {256: set([291, 267, 4]),
 257: set([0, 266, 4]),
 258: set([0, 4, 326]),
 259: set([4, 7, 8, 329, 50, 287]),
 260: set([259]),
 261: set([1, 299, 260, 262, 11, 'def']),
 262: set([8, 263, 7]),
 263: set([1, 36, 264, 12, 303, 16, 22]),
 264: set([8, 1, 7, 265]),
 265: set([264, 12]),
 266: set([291, 267]),
 267: set([4, 268, 13]),
 268: set([272, 273, 274, 289, 280, 290, 288, 269, 271]),
 269: set([270, 339, 22, 326]),
 270: set([37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49]),
 271: set(['print', 35, 12, 303]),
 272: set(['del', 325]),
 273: set(['pass']),
 274: set([275, 276, 277, 278, 279]),
 275: set(['break']),
 276: set(['continue']),
 277: set(['return', 326]),
 278: set([339]),
 279: set([12, 'raise', 303]),
 280: set([281, 282]),
 281: set(['import', 286]),
 282: set(['from', 7, 8, 16, 23, 'import', 285, 287]),
 283: set([1, 'as']),
 284: set([1, 'as', 287]),
 285: set([283, 12]),
 286: set([12, 284]),
 287: set([1, 23]),
 288: set([1, 'global', 12]),
 289: set([303, 12, 309, 'in', 'exec']),
 290: set(['assert', 12, 303]),
 291: set([328, 292, 293, 294, 295, 296, 261]),
 292: set(['elif', 299, 11, 303, 'else', 'if']),
 293: set(['while', 11, 'else', 299, 303]),
 294: set([11, 325, 326, 299, 'for', 'in', 'else']),
 295: set([11, 298, 299, 'else', 'try', 'finally']),
 296: set([297, 11, 'with', 299, 303]),
 297: set([1, 'as', 309]),
 298: set([12, 'except', 303]),
 299: set([266, 267, 4, 5, 6]),
 300: set([12, 301]),
 301: set([304, 302]),
 302: set([11, 263, 301, 'lambda']),
 303: set([304, 303, 'if', 320, 'else']),
 304: set([305, 'or']),
 305: set(['and', 306]),
 306: set(['not', 306, 307]),
 307: set([308, 309]),
 308: set(['<>', 'is', 20, 21, 'in', 'not', 28, 29, 30, 31]),
 309: set([18, 310]),
 310: set([33, 311]),
 311: set([312, 19]),
 312: set([313, 34, 35]),
 313: set([314, 14, 15]),
 314: set([16, 17, 48, 24, 315]),
 315: set([32, 315, 316, 14, 15]),
 316: set([321, 315, 36, 317]),
 317: set([1, 2, 3, 327, 8, 9, 10, 7, 337, 339, 25, 26, 27, 318, 319]),
 318: set([332, 12, 303]),
 319: set([335, 12, 303]),
 320: set([11, 303, 263, 'lambda']),
 321: set([1, 322, 9, 7, 8, 329, 10, 23]),
 322: set([323, 12]),
 323: set([11, 303, 324, 23]),
 324: set([11, 303]),
 325: set([12, 309]),
 326: set([12, 303]),
 327: set([11, 12, 303]),
 328: set([1, 299, 326, 7, 8, 11, 'class']),
 329: set([16, 36, 330, 12, 303]),
 330: set([303, 22, 335]),
 331: set([332, 333]),
 332: set([331, 300, 325, 'for', 'in']),
 333: set([331, 301, 'if']),
 334: set([336, 335]),
 335: set([304, 334, 325, 'for', 'in']),
 336: set([301, 334, 'if']),
 337: set([12, 303]),
 338: set([1]),
 339: set([326, 'yield'])}

# keywords:

keywords  = set(['and', 'elif', '<>', 'is', 'global', 'as', 'pass', 'if', 'from', 'raise', 'for', 'except', 'finally', 'print', 'import', 'return', 'exec', 'else', 'assert', 'not', 'with', 'class', 'break', 'in', 'yield', 'try', 'while', 'continue', 'del', 'or', 'def', 'lambda'])

