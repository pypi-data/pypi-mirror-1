/*
// +----------------------------------------------------------------------+
// | Copyright (c) 2004 Bitflux GmbH                                      |
// +----------------------------------------------------------------------+
// | Licensed under the Apache License, Version 2.0 (the "License");      |
// | you may not use this file except in compliance with the License.     |
// | You may obtain a copy of the License at                              |
// | http://www.apache.org/licenses/LICENSE-2.0                           |
// | Unless required by applicable law or agreed to in writing, software  |
// | distributed under the License is distributed on an "AS IS" BASIS,    |
// | WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or      |
// | implied. See the License for the specific language governing         |
// | permissions and limitations under the License.                       |
// +----------------------------------------------------------------------+
// | Author: Bitflux GmbH <devel@bitflux.ch>                              |
// +----------------------------------------------------------------------+

*/
var isIE = false;

var widthOffset=1;


function chimeraLiveInit(searchId, fontId, sizeId, resultContainerId) {
    var self = this;
    var searchInput = document.getElementById(searchId);
    var fontInput = document.getElementById(fontId);
    var sizeInput = document.getElementById(sizeId);
    var resultContainer = document.getElementById(resultContainerId);
    var chimeraLiveReq = null;
    var _cache = new Object();
    var t = null;
    var chimeraLiveLast = "";
    
  if (searchInput == null || fontInput == null || sizeInput == null || resultContainer == null ) {
    return false;
  }
  
  function hookEvents() {

    searchInput.addEventListener("keypress", chimeraLiveStart,false);
    
    sizeInput.addEventListener("change", chimeraLiveStart, false);
    fontInput.addEventListener("change", chimeraLiveStart, false);

    sizeInput.addEventListener("blur", chimeraLiveStart, false);
    fontInput.addEventListener("blur", chimeraLiveStart, false);

    searchInput.onkeypress = this.chimeraLiveStart;

    searchInput.setAttribute("autocomplete","off");
  }
  
  function chimeraLiveDoSearch() {
    if (chimeraLiveLast != this.getKey()) {
      if (chimeraLiveReq && chimeraLiveReq.readyState < 4) {
	chimeraLiveReq.abort();
      }
      if ( searchInput.value == "") {
	return false;
      }

      // Do we have cached results
      var result = _cache[this.getKey()];
      if (result) {
	showResult(result);	
	return;
      }
      
      chimeraLiveReq = Sarissa.getXmlHttpRequest();
      chimeraLiveReq.onreadystatechange= chimeraLiveProcessReqChange;
      chimeraLiveReq.open("GET", this.getKey());
      chimeraLiveLast = this.getKey();
      chimeraLiveReq.send(null);
    }
  }

  this.chimeraLiveStart = function chimeraLiveStart() {
    if(this != arguments.callee._scope){
      return arguments.callee.apply(arguments.callee._scope, arguments);
    };
    
    if (t) {
      window.clearTimeout(t);
    }
    t = window.setTimeout(chimeraLiveDoSearch,200);
  }

  this.getKey = function getKey() {
    return "chimeraL?text=" + URLEncode(searchInput.value) + "&font=" + URLEncode(fontInput.value) + "+" + sizeInput.value +"&width=200";  
  }
  
  function showResult(result) {
    var parts = result.split(",");
    var src = parts[0];
    resultContainer.src = src;
  }
  
  function chimeraLiveProcessReqChange() {
    if (chimeraLiveReq.readyState == 4) {
      if (chimeraLiveReq.status > 299 || chimeraLiveReq.status < 200  ||
	  chimeraLiveReq.responseText.length < 10) {
	return;	
      }
      showResult(chimeraLiveReq.responseText);
      _cache[getKey()] = chimeraLiveReq.responseText;
    }
  }
  

  /* Inject scope into events methods */
  this.chimeraLiveStart._scope = this;
  
  hookEvents();

}

// ====================================================================
function URLEncode(plaintext)
{
  // The Javascript escape and unescape functions do not correspond
  // with what browsers actually do...
  var SAFECHARS = "0123456789" +// Numeric
    "ABCDEFGHIJKLMNOPQRSTUVWXYZ" +// Alphabetic
    "abcdefghijklmnopqrstuvwxyz" +
    "-_.!~*'()";// RFC2396 Mark characters
  var HEX = "0123456789ABCDEF";

  var encoded = "";
  for (var i = 0; i < plaintext.length; i++ ) {
    var ch = plaintext.charAt(i);
    if (ch == " ") {
      encoded += "+";// x-www-urlencoded, rather than %20
    } else if (SAFECHARS.indexOf(ch) != -1) {
      encoded += ch;
    } else {
      var charCode = ch.charCodeAt(0);
      if (charCode > 255) {
	encoded += "+";
      } else {
	encoded += "%";
	encoded += HEX.charAt((charCode >> 4) & 0xF);
	encoded += HEX.charAt(charCode & 0xF);
      }
    }
  } // for

  return encoded;
};


