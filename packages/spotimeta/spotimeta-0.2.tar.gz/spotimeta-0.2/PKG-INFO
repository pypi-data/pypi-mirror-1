Metadata-Version: 1.0
Name: spotimeta
Version: 0.2
Summary: "Library for querying the Spotify metadata service
Home-page: http://bitbucket.org/runeh/spotimeta/
Author: Rune Halvorsen
Author-email: runefh@gmail.com
License: BSD
Description: .. -*- restructuredtext -*-
        
        ##############################################
        Spotimeta - Spotify metadata search and lookup
        ##############################################
        
        Introduction
        ------------
        
        Spotimeta is a simple library for getting data from Spotify's metadata API.
        Available functions is searching for artists, albums and tracks, as well
        as looking up the same based on Spotify URIs. The data is returned as
        simple python dictionaries.
        
        NOTE:
        
        This product uses a SPOTIFY API but is not endorsed, certified or otherwise
        approved in any way by Spotify. Spotify is the registered trade mark of the
        Spotify Group.
        
        For more information about the metadata API, see
        http://developer.spotify.com/en/metadata-api/overview/
        
        Examples
        --------
        
        >>> import spotimeta
        
        
        Search for a track
        
        >>> search = spotimeta.search_track("Trip back to childhood")
        >>> search["total_results"]
        1
        
        Print the artist of that track
        
        >>> artist = search["result"][0]["artist"]
        >>> artist["name"]
        u'St-Petersburg Ska-Jazz Review'
        
        Look up more information about that artist:
        
        >>> lookup = spotimeta.lookup(artist["href"], detail=1)
        >>> for album in lookup["result"]["albums"]:
        ...     album["name"]
        u'Too Good To Be True'
        u'Too Good To Be True'
        u'Live At The Red Club'
        
        It's also possible to look up metadata using spotify URLs:
        
        >>> track = spotimeta.lookup("http://open.spotify.com/track/3Z8cX6y0SeJIsI3yxoaQ8K")
        >>> print track["result"]["artist"]["name"], "-", track["result"]["name"]
        Kings Of Leon - Closer
        
        For anything but the simples use-cases one should use caching.
        Caching is enabled by making a Metadata instance and passing it
        something that is a mapping type. For instance a dictionary:
        
        >>> metacache = {}
        >>> metadata = spotimeta.Metadata(cache=metacache)
        
        The metadata instance has exactly the same methods as the module itself.
        Caching happens automatically as long as there is a cache object set.
        
        >>> data = metadata.lookup("spotify:track:3kofFW93aMr28qx1BKps7A")
        >>> data = metadata.lookup("spotify:track:3kofFW93aMr28qx1BKps7A")
        
        This will only cause a single request. Data is cached for as long
        as the Expiry header on the first request says it should.
        
        
        Todo
        ----
        
        - Sphinxify docs
        - Testcases for search, not just search parser
        - Deal with all the fixmes
        
        
        Changelog
        ---------
        
        See the CHANGELOG file
        
        Contact
        -------
        
        The author is Rune Halvorsen <runefh@gmail.com>. The project resides at
        http://bitbucket.org/runeh/spotimeta . If you find bugs, or have feature
        requests, please report them in the project site issue tracker. Patches
        very welcome.
        
        Also, see AUTHORS file for full list of contributors
        
        License
        -------
        
        This software is licensed under the ``New BSD License``. See the ``LICENCE``
        file in the top distribution directory for the full license text.
        
Keywords: Spotify
Platform: UNKNOWN
Classifier: Programming Language :: Python
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: BSD License
