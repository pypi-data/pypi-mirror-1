#!/usr/bin/env pytho
# -*- coding: UTF-8 -*-
"""Xmpp connection panel."""
# generated by wxGlade 0.4cvs on Sat Nov  4 16:49:39 2006

import wx
import events
import juxmpp
import pyxmpp.all
import dns.resolver
import dns.exception
import threading
import commands
import logging
import util

class StartSessionPanel(wx.Panel):
    busyCursor = None
    def __init__(self, *args, **kwds):
        # begin wxGlade: StartSessionPanel.__init__
        kwds["style"] = wx.DOUBLE_BORDER|wx.TAB_TRAVERSAL
        wx.Panel.__init__(self, *args, **kwds)
        self.startSessionNotebook = wx.Notebook(self, -1, style=0)
        self.notebook_1_pane_1 = wx.Panel(self.startSessionNotebook, -1)
        self.label_1 = wx.StaticText(self.notebook_1_pane_1, -1, _("Server:"))
        self.serverTextCtrl = wx.TextCtrl(self.notebook_1_pane_1, -1, "")
        self.label_2 = wx.StaticText(self.notebook_1_pane_1, -1, _("User:"))
        self.userTextCtrl = wx.TextCtrl(self.notebook_1_pane_1, -1, "")
        self.label_3 = wx.StaticText(self.notebook_1_pane_1, -1, _("Password:"))
        self.passwordTextCtrl = wx.TextCtrl(self.notebook_1_pane_1, -1, "", style=wx.TE_PASSWORD)
        self.startSessionButton = wx.Button(self, -1, _("Start session"))
        self.cancelButton = wx.Button(self, -1, _("Cancel"))
        self.closeButton = wx.Button(self, -1, _("Close"))

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_BUTTON, self.start_session, self.startSessionButton)
        self.Bind(wx.EVT_BUTTON, self.cancel, self.cancelButton)
        # end wxGlade

        wx.GetApp().Bind(events.EVT_SASL_AUTHENTICATION_FAILED, self.sasl_authentication_failed)
        wx.GetApp().Bind(events.EVT_DNS_DXDOMAIN, self.dns_dxdomain)
        wx.GetApp().Bind(events.EVT_DNS_TIMEOUT, self.dns_timeout)
        wx.GetApp().Bind(events.EVT_SOCKET_ERROR, self.socket_error)
        
    def __set_properties(self):
        # begin wxGlade: StartSessionPanel.__set_properties
        self.serverTextCtrl.SetFocus()
        self.cancelButton.Enable(False)
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: StartSessionPanel.__do_layout
        sizer_1 = wx.BoxSizer(wx.VERTICAL)
        sizer_4 = wx.BoxSizer(wx.HORIZONTAL)
        grid_sizer_1 = wx.FlexGridSizer(3, 2, 6, 3)
        grid_sizer_1.Add(self.label_1, 0, wx.ADJUST_MINSIZE, 0)
        grid_sizer_1.Add(self.serverTextCtrl, 0, wx.EXPAND, 0)
        grid_sizer_1.Add(self.label_2, 0, wx.ADJUST_MINSIZE, 0)
        grid_sizer_1.Add(self.userTextCtrl, 0, wx.EXPAND, 0)
        grid_sizer_1.Add(self.label_3, 0, wx.ADJUST_MINSIZE, 0)
        grid_sizer_1.Add(self.passwordTextCtrl, 0, wx.EXPAND, 0)
        self.notebook_1_pane_1.SetAutoLayout(True)
        self.notebook_1_pane_1.SetSizer(grid_sizer_1)
        grid_sizer_1.Fit(self.notebook_1_pane_1)
        grid_sizer_1.SetSizeHints(self.notebook_1_pane_1)
        grid_sizer_1.AddGrowableCol(1)
        self.startSessionNotebook.AddPage(self.notebook_1_pane_1, _("Account"))
        sizer_1.Add(self.startSessionNotebook, 1, wx.EXPAND, 0)
        sizer_4.Add(self.startSessionButton, 0, wx.ADJUST_MINSIZE, 0)
        sizer_4.Add((4, 0), 0, wx.EXPAND, 0)
        sizer_4.Add(self.cancelButton, 0, wx.ADJUST_MINSIZE, 0)
        sizer_4.Add((0, 0), 1, wx.ADJUST_MINSIZE, 0)
        sizer_4.Add(self.closeButton, 0, wx.ADJUST_MINSIZE, 0)
        sizer_1.Add(sizer_4, 0, wx.EXPAND, 0)
        self.SetAutoLayout(True)
        self.SetSizer(sizer_1)
        sizer_1.Fit(self)
        sizer_1.SetSizeHints(self)
        # end wxGlade

    def start_session(self, event): # wxGlade: StartSessionPanel.<event_handler>
        """Check the data and ask the communication thread to stablish a xmpp connection.
        
        All the data is checked for 'a priori' rightness and, if all is right,
        a connection is asked by sending a JuXmppConnectCommand.
        """
        
        self.password = self.passwordTextCtrl.GetValue()
        self.server = self.serverTextCtrl.GetValue()
        try:
            bareJid = self.userTextCtrl.GetValue()+'@'+self.serverTextCtrl.GetValue()
            self.jid = pyxmpp.JID(bareJid+'/jubatu')
            if self.jid.node==None or self.jid.resource==None:
                raise pyxmpp.jid.JIDError
            if self.jid.domain != self.server or self.server.find('@')!=-1:
                raise pyxmpp.jid.JIDError
        except pyxmpp.jid.JIDError:
            errorMessage = _(
ur'''"%s" is not a valid JID. Check the user and server.

Example:

If your JID is mike_smith@jabberserver.net,
put "jabberserver.net" in the "Server" field and
'mike_smith' in the "User" field.'''
                ) % bareJid
            errorDialog = wx.MessageDialog(self, errorMessage, _("Wrong JID"), wx.OK|wx.CENTRE|wx.ICON_ERROR)
            errorDialog.ShowModal()
            return

        self.startSessionButton.Enable(False)
        self.cancelButton.Enable(True)
        self.busyCursor= wx.BusyCursor()
        
        initializeCommand = commands.JuXmppInitializeCommand(self.jid, self.password, self.server)
        wx.GetApp().localJid = self.jid
        wx.GetApp().xmppThread.commandsQueue.put(initializeCommand)
        wx.GetApp().xmppThread.commandsQueue.put(commands.JuXmppConnectCommand())
        
        self.ProcessEvent(events.JuStatusMessageEvent(_(u"Connecting...")))
        event.Skip()

    def cancel(self, event): # wxGlade: StartSessionPanel.<event_handler>
        """Cancel the xmpp connection"""
        
        wx.GetApp().xmppThread.commandsQueue.put(commands.JuXmppCancelConnectCommand())
        del self.busyCursor
        self.cancelButton.Enable(False)
        self.startSessionButton.Enable(True)
        self.ProcessEvent(events.JuStatusMessageEvent(_(u"Session start cancelled."), 3000))
        event.Skip()
        
    def sasl_authentication_failed(self, event):
        """Handle a sasl authentication error produced at connection time."""
        
        if self.busyCursor:
            del self.busyCursor
        errorMessage = _(u'The SASL authentication process has failed. Check than both the user and the password are right.')
        errorDialog = wx.MessageDialog(self, errorMessage, _(u"SASL error"), wx.OK|wx.CENTRE|wx.ICON_ERROR)
        errorDialog.ShowModal()
        self.cancelButton.Enable(False)
        self.startSessionButton.Enable(True)
        self.ProcessEvent(events.JuStatusMessageEvent(_(u"Session start aborted."), 3000))
        logging.getLogger("core").debug("Session initialization aborted.")
        event.Skip()
        
    def dns_dxdomain(self, event):
        """Handle a 'dns dxdomain' error produced at connection time."""
        
        if self.busyCursor:
            del self.busyCursor
        errorMessage = _(u'The server "%s" wasn''t found.') % self.server
        errorDialog = wx.MessageDialog(self, errorMessage, _(u"DNS error"), wx.OK|wx.CENTRE|wx.ICON_ERROR)
        errorDialog.ShowModal()
        self.cancelButton.Enable(False)
        self.startSessionButton.Enable(True)
        event.Skip()
        
    def dns_timeout(self, event):
        """Handle a 'dns timeout' error produced at connection time."""
        
        if self.busyCursor:
            del self.busyCursor
        self.cancelButton.Enable(False)
        self.startSessionButton.Enable(True)
        self.ProcessEvent(events.JuStatusMessageEvent(_(u"The connection attempt timed-out."), 3000))
        event.Skip()
        
    def socket_error(self, event):
        """Handle a socket error produced at connection time."""
        
        if self.busyCursor:
            del self.busyCursor
        errorMessage = _(u"Connection error. Server problems maybe?")
        errorDialog = wx.MessageDialog(self, errorMessage, _(u"Socket error"), wx.OK|wx.CENTRE|wx.ICON_ERROR)
        errorDialog.ShowModal()
        self.cancelButton.Enable(False)
        self.startSessionButton.Enable(True)
        event.Skip()

# end of class StartSessionPanel
