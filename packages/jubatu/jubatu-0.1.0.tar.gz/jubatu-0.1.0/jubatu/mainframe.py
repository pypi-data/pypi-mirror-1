# -*- coding: UTF-8 -*-
"""Jubatu main frame (core's GUI)."""
# generated by wxGlade 0.4cvs on Wed Nov  1 21:18:29 2006

import wx
import events
import commands
import startsession
import os
import util
import imp
import sys
import gameengine
import newgamebase
import logging

# begin wxGlade: dependencies
# end wxGlade

class MainFrame(wx.Frame):
    SET_PRESENCE_ID = wx.NewId()
    SET_PRESENCE_AVAILABLE_ID = wx.NewId()
    SET_PRESENCE_AWAY_ID = wx.NewId()
    SET_PRESENCE_DND_ID = wx.NewId()
    START_SESSION_ID = wx.NewId()
    CLOSE_SESSION_ID = wx.NewId()
    EXIT_ID = wx.NewId()

    SET_ENGLISH_LANG_ID = wx.NewId()
    SET_SPANISH_LANG_ID = wx.NewId()
    
    iconIndex = {}
    colorPriority = {'grey':0, 'red':1, 'yellow':2, 'green':3}

    
    def __init__(self, *args, **kwds):
        # begin wxGlade: MainFrame.__init__
        kwds["style"] = wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.window_1 = wx.SplitterWindow(self, -1, style=wx.SP_3D|wx.SP_BORDER)
        self.panel_2 = wx.Panel(self.window_1, -1)
        self.mainNotebook = wx.Notebook(self.window_1, -1, style=0)
        self.panel_1 = wx.Panel(self.mainNotebook, -1)
        self.window_2 = wx.SplitterWindow(self.panel_1, -1, style=wx.SP_3D|wx.SP_BORDER)
        
        # Menu Bar
        self.mainMenuBar = wx.MenuBar()
        self.SetMenuBar(self.mainMenuBar)
        wxglade_tmp_menu = wx.Menu()
        wxglade_tmp_menu_sub = wx.Menu()
        wxglade_tmp_menu_sub.Append(self.SET_PRESENCE_AVAILABLE_ID, _("Available"), "", wx.ITEM_NORMAL)
        wxglade_tmp_menu_sub.Append(self.SET_PRESENCE_AWAY_ID, _("Away"), "", wx.ITEM_NORMAL)
        wxglade_tmp_menu_sub.Append(self.SET_PRESENCE_DND_ID, _("Do not disturb"), "", wx.ITEM_NORMAL)
        wxglade_tmp_menu.AppendMenu(self.SET_PRESENCE_ID, _("Set presence"), wxglade_tmp_menu_sub, "")
        wxglade_tmp_menu.Append(self.START_SESSION_ID, _("Start session"), "", wx.ITEM_NORMAL)
        wxglade_tmp_menu.Append(self.CLOSE_SESSION_ID, _("Close session"), "", wx.ITEM_NORMAL)
        wxglade_tmp_menu.AppendSeparator()
        wxglade_tmp_menu.Append(self.EXIT_ID, _("Exit"), "", wx.ITEM_NORMAL)
        self.mainMenuBar.Append(wxglade_tmp_menu, _("Jubatu"))
        wxglade_tmp_menu = wx.Menu()
        wxglade_tmp_menu.Append(self.SET_ENGLISH_LANG_ID, _("English"), "", wx.ITEM_NORMAL)
        wxglade_tmp_menu.Append(self.SET_SPANISH_LANG_ID, _(u"Español"), "", wx.ITEM_NORMAL)
        self.mainMenuBar.Append(wxglade_tmp_menu, _("Language"))
        # Menu Bar end
        self.mainStatusBar = self.CreateStatusBar(1, 0)
        self.gamesListBox = wx.ListBox(self.window_2, -1, choices=[], style=wx.LB_SINGLE|wx.LB_SORT)
        self.gameInfoTextCtrl = wx.TextCtrl(self.window_2, -1, "", style=wx.TE_MULTILINE|wx.TE_READONLY|wx.TE_WORDWRAP)
        self.presenceIcon = wx.StaticBitmap(self.panel_2, -1, wx.Bitmap("./icons/grey.xpm", wx.BITMAP_TYPE_ANY))
        self.rosterTreeCtrl = wx.TreeCtrl(self.panel_2, -1, style=wx.TR_HAS_BUTTONS|wx.TR_NO_LINES|wx.TR_HIDE_ROOT|wx.TR_DEFAULT_STYLE|wx.SUNKEN_BORDER)

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_MENU, self.set_presence_available, id=self.SET_PRESENCE_AVAILABLE_ID)
        self.Bind(wx.EVT_MENU, self.set_presence_away, id=self.SET_PRESENCE_AWAY_ID)
        self.Bind(wx.EVT_MENU, self.set_presence_do_not_disturb, id=self.SET_PRESENCE_DND_ID)
        self.Bind(wx.EVT_MENU, self.start_session, id=self.START_SESSION_ID)
        self.Bind(wx.EVT_MENU, self.close_session, id=self.CLOSE_SESSION_ID)
        self.Bind(wx.EVT_MENU, self.exit, id=self.EXIT_ID)
        self.Bind(wx.EVT_MENU, self.set_english_lang, id=self.SET_ENGLISH_LANG_ID)
        self.Bind(wx.EVT_MENU, self.set_spanish_lang, id=self.SET_SPANISH_LANG_ID)
        # end wxGlade
        
        # Construct icons' list
        self.load_icons()
        self.rosterTreeCtrl.AssignImageList(self.icons)
        self.rosterRoot = self.rosterTreeCtrl.AddRoot(_("Roster"))

        # StatusBar's message events
        wx.GetApp().Bind(events.EVT_STATUS_MESSAGE, self.statusbar_message)
        self.timeout_message = wx.Timer(self)
        self.Bind(wx.EVT_TIMER, self.clear_statusbar_message)

        # Session status events
        wx.GetApp().Bind(events.EVT_CONNECTED, self.connected)
        wx.GetApp().Bind(events.EVT_SESSION_STARTED, self.session_started)
        wx.GetApp().Bind(events.EVT_DISCONNECTED, self.disconnected)

        # Contacts' events
        wx.GetApp().Bind(events.EVT_ROSTER_ITEM, self.roster_item)
        wx.GetApp().Bind(events.EVT_PRESENCE, self.presence)
        wx.GetApp().Bind(events.EVT_ENGINE_LIST, self.engine_list)

        # Gamelist's events
        self.Bind(wx.EVT_LISTBOX, self.game_selected, self.gamesListBox)
        self.Bind(wx.EVT_LISTBOX_DCLICK, self.new_game, self.gamesListBox)
        
        # Notebook's events
        self.Bind(events.EVT_CLOSE_CURRENT_TAB, self.close_current_tab)
        
        # MessageBoxes
        self.Bind(events.EVT_MESSAGE_BOX, self.message_box)

        self.load_game_list()
        
        self.mainMenuBar.GetMenu(0).UpdateUI()
        
    def __set_properties(self):
        # begin wxGlade: MainFrame.__set_properties
        self.SetTitle(_("Jubatu"))
        self.SetSize((800, 600))
        self.mainStatusBar.SetStatusWidths([-1])
        # statusbar fields
        mainStatusBar_fields = [""]
        for i in range(len(mainStatusBar_fields)):
            self.mainStatusBar.SetStatusText(mainStatusBar_fields[i], i)
        # end wxGlade

        # disable close session menu entry
        self.mainMenuBar.Enable(self.CLOSE_SESSION_ID, False)
        self.mainMenuBar.Enable(self.SET_PRESENCE_ID, False)
        
        # disable the currently selected language
        defaultLanguage = util.get_preferred_languages()[0]
        if defaultLanguage=='en':
            self.mainMenuBar.Enable(self.SET_ENGLISH_LANG_ID, False)
        elif defaultLanguage=='sp':
            self.mainMenuBar.Enable(self.SET_SPANISH_LANG_ID, False)
        
    def __do_layout(self):
        self.window_1.SetMinimumPaneSize(1)
        self.window_2.SetMinimumPaneSize(1)
        self.window_2.SetSashGravity(0.95)

        # begin wxGlade: MainFrame.__do_layout
        sizer_1 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_3 = wx.BoxSizer(wx.VERTICAL)
        sizer_4 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_2 = wx.BoxSizer(wx.VERTICAL)
        self.window_2.SplitHorizontally(self.gamesListBox, self.gameInfoTextCtrl)
        sizer_2.Add(self.window_2, 1, wx.EXPAND, 0)
        self.panel_1.SetAutoLayout(True)
        self.panel_1.SetSizer(sizer_2)
        sizer_2.Fit(self.panel_1)
        sizer_2.SetSizeHints(self.panel_1)
        self.mainNotebook.AddPage(self.panel_1, _("Games"))
        sizer_4.Add((0, 0), 1, wx.EXPAND, 0)
        sizer_4.Add(self.presenceIcon, 0, 0, 0)
        sizer_3.Add(sizer_4, 0, wx.EXPAND|wx.ADJUST_MINSIZE, 0)
        sizer_3.Add(self.rosterTreeCtrl, 1, wx.EXPAND, 0)
        self.panel_2.SetAutoLayout(True)
        self.panel_2.SetSizer(sizer_3)
        sizer_3.Fit(self.panel_2)
        sizer_3.SetSizeHints(self.panel_2)
        self.window_1.SplitVertically(self.mainNotebook, self.panel_2)
        sizer_1.Add(self.window_1, 1, wx.EXPAND, 0)
        self.SetAutoLayout(True)
        self.SetSizer(sizer_1)
        self.Layout()
        # end wxGlade

    def load_game_list(self):
        """Locate the games' engines, load them and show them in the games list.
        
        The engines are searched in a couple of locations: the 'games' subdirectory of the
        working directory and an user directorie dependant of the OS.
        For further reference, the engines will be loaded in the engineDict structure
        of Jubatu's root class."""
        logging.getLogger("core").debug("Starting the search for game engines.")
        gameDirs = util.get_game_dirs()
        gameModules = []

        for dir in gameDirs:
            logging.getLogger("core").info("Looking for engines in dir %s", dir)
            for item in os.listdir(dir):
                fullPathItem = os.path.join(dir,item)
                if os.path.isdir(fullPathItem):
                    entryPoint = os.path.join(fullPathItem, "jubatugame.py")
                    if (os.path.isfile(entryPoint)):
                        fp, pathname, description = imp.find_module(item,[dir])
                        try:
                            imp.load_module(item, fp, pathname, description)
                        finally:
                            if fp:
                                fp.close()
                        module = imp.load_source(item, entryPoint)
                        
                        gameModules.append(module)
                        logging.getLogger("core").debug("Game found: %s\n%s", module.gameEngine.name(), module.gameEngine.description())
        
        for game in gameModules:
            self.gamesListBox.Append(game.gameEngine.name(), game.gameEngine)  # The engine itself is the associated data
            wx.GetApp().engineDict[game.gameEngine.id()]=game.gameEngine
            #game.gameEngine.start()
            
        # inicializa la selección
        if self.gamesListBox.GetCount() > 0:
            self.gamesListBox.Select(0)
            self.gameInfoTextCtrl.SetValue(gameModules[0].gameEngine.description())
            
        self.rosterTreeCtrl.Bind(wx.EVT_TREE_ITEM_ACTIVATED, self.buddy_selected)
    
    def game_selected(self, event):
        """Triggered when the user click a game in the games list"""
        
        self.gameInfoTextCtrl.SetValue(event.GetClientData().description())
        
        engineId = self.get_selected_engine_id()

        (buddyNode, cookie) = self.rosterTreeCtrl.GetFirstChild(self.rosterRoot)
        while buddyNode and buddyNode.IsOk():
            self.update_status_icon(buddyNode, engineId)

            (resource, cookieRes) = self.rosterTreeCtrl.GetFirstChild(buddyNode)
            while resource and resource.IsOk():
                self.update_status_icon(resource, engineId)
                (resource, cookieRes) = self.rosterTreeCtrl.GetNextChild(buddyNode, cookieRes)
            (buddyNode, cookie) = self.rosterTreeCtrl.GetNextChild(self.rosterRoot, cookie)
        
        event.Skip()
        
    def new_game(self, event):
        """Ask the corresponding engine to open the 'new game proposal' panel"""
        
        logging.getLogger("core").debug("Ready to ask to open the 'new game proposal' panel to engine: %s", event.GetClientData().name())
        ngp = newgamebase.NewGameBasePanel(parent=self.mainNotebook)
        ngp.gameDescriptionLabel.SetLabel(event.GetClientData().description())
        ngp.GetSizer().Insert(0, event.GetClientData().new_game_panel(ngp), 1, wx.EXPAND, 0)
        self.mainNotebook.AddPage(ngp, event.GetClientData().name(), True)
        event.Skip()
        
    def buddy_selected(self, event):
        """Send a signal system-wide to report than a buddy has been selected in the buddy list
        
        The signal set is intended to be used mostly by 'new game proposal' panels; this should allow for
        a comfortable way of selecting people for the game proposal.
        """

        dict = self.rosterTreeCtrl.GetPyData(event.GetItem())
        jid = dict['jid']
        
        engineId = self.get_selected_engine_id()
        (availability, engineSupport) = self.get_resource_status(event.GetItem(), engineId)
        
        if engineSupport=='green' and jid.resource is not None:
            wx.GetApp().AddPendingEvent(events.JuBuddySelected(jid))
            logging.getLogger("core").debug("'Buddy selected' signal sent. %s", jid.as_unicode())
        event.Skip()
        
    def load_icons(self):
        """Load the icons used in Jubatu's buddy list."""
        
        self.icons = wx.ImageList(40,20)
        self.iconIndex['grey_grey'] = self.icons.Add(wx.Bitmap(os.path.join(os.getcwd(), 'icons/grey_grey.xpm'), wx.BITMAP_TYPE_XPM))
        self.iconIndex['red_grey'] = self.icons.Add(wx.Bitmap(os.path.join(os.getcwd(), 'icons/red_grey.xpm'), wx.BITMAP_TYPE_XPM))
        self.iconIndex['yellow_grey'] = self.icons.Add(wx.Bitmap(os.path.join(os.getcwd(), 'icons/yellow_grey.xpm'), wx.BITMAP_TYPE_XPM))
        self.iconIndex['green_grey'] = self.icons.Add(wx.Bitmap(os.path.join(os.getcwd(), 'icons/green_grey.xpm'), wx.BITMAP_TYPE_XPM))

        self.iconIndex['red_yellow'] = self.icons.Add(wx.Bitmap(os.path.join(os.getcwd(), 'icons/red_yellow.xpm'), wx.BITMAP_TYPE_XPM))
        self.iconIndex['yellow_yellow'] = self.icons.Add(wx.Bitmap(os.path.join(os.getcwd(), 'icons/yellow_yellow.xpm'), wx.BITMAP_TYPE_XPM))
        self.iconIndex['green_yellow'] = self.icons.Add(wx.Bitmap(os.path.join(os.getcwd(), 'icons/green_yellow.xpm'), wx.BITMAP_TYPE_XPM))

        self.iconIndex['red_red'] = self.icons.Add(wx.Bitmap(os.path.join(os.getcwd(), 'icons/red_red.xpm'), wx.BITMAP_TYPE_XPM))
        self.iconIndex['yellow_red'] = self.icons.Add(wx.Bitmap(os.path.join(os.getcwd(), 'icons/yellow_red.xpm'), wx.BITMAP_TYPE_XPM))
        self.iconIndex['green_red'] = self.icons.Add(wx.Bitmap(os.path.join(os.getcwd(), 'icons/green_red.xpm'), wx.BITMAP_TYPE_XPM))

        self.iconIndex['red_green'] = self.icons.Add(wx.Bitmap(os.path.join(os.getcwd(), 'icons/red_green.xpm'), wx.BITMAP_TYPE_XPM))
        self.iconIndex['yellow_green'] = self.icons.Add(wx.Bitmap(os.path.join(os.getcwd(), 'icons/yellow_green.xpm'), wx.BITMAP_TYPE_XPM))
        self.iconIndex['green_green'] = self.icons.Add(wx.Bitmap(os.path.join(os.getcwd(), 'icons/green_green.xpm'), wx.BITMAP_TYPE_XPM))

    def start_session(self, event): # wxGlade: MainFrame.<event_handler>
        """Launch the 'start session' panel"""
        
        # Open the panel if it doesn't exist...
        if wx.FindWindowById(id=self.START_SESSION_ID) is None:
            ssp = startsession.StartSessionPanel(parent=self.mainNotebook, id=self.START_SESSION_ID)
            self.mainNotebook.AddPage(ssp, _(u"Start session"), True)
            self.Bind(wx.EVT_BUTTON, self.close_current_tab, ssp.closeButton)
        # ...or select it if it was previously opened
        else:
            for i in range(self.mainNotebook.GetPageCount()):
                if self.mainNotebook.GetPage(i).GetId()==self.START_SESSION_ID:
                    self.mainNotebook.SetSelection(i)
                    break
        logging.getLogger("core").debug("Start session panel supposedly opened or selected")
        event.Skip()
        
    def close_current_tab(self,event):
        """Helper function to close the tabs in the notebook"""
        
        if event.GetEventObject()!=self:  # we won't close it directly, as we would be in trouble if we close the window originating the event
            event=events.JuCloseCurrentTab()
            event.SetEventObject(self)
            self.AddPendingEvent(event)
        else:
            self.mainNotebook.DeletePage(self.mainNotebook.GetSelection())
        event.Skip()
        
    def exit(self, event): # wxGlade: MainFrame.<event_handler>
        """Exit the app (by user's petition)"""
        
        logging.getLogger("core").info("Exiting the app...")
        self.Close()
        event.Skip()
        
    def statusbar_message(self, event):
        """Display a info message in the status bar."""
        
        self.mainStatusBar.SetStatusText(event.message, 0)
        if event.timeout != 0:
            self.timeout_message.Start(event.timeout, wx.TIMER_ONE_SHOT)
        event.Skip()
        
    def clear_statusbar_message(self, event=None):
        """Clear the status bar."""
        self.mainStatusBar.SetStatusText("", 0)
        
    def message_box(self, event):
        """Show a modal message box in Jubatu's main frame.
        
        event -- object containing the needed parameters to be used by the message box (message, caption, style, ...)
        The showing of this message box could have been asked for whatever other part of the program, so
        the answer is returned to a queue decided by the caller.
        """
        
        logging.getLogger("core").debug("Message shown to the user: %s", event.message)
        answer = wx.MessageBox(event.message, event.caption, event.style, self)
        logging.getLogger("core").debug("Answer from the user: %d", answer)
        if event.commandQueue is not None:
            event.commandQueue.put(commands.JuUserAnswer(answer, event.returnObject))

    def close_session(self, event): # wxGlade: MainFrame.<event_handler>
        """Ask Jubatu to close the current xmpp session"""
        
        wx.GetApp().xmppThread.commandsQueue.put(commands.JuXmppDisconnectCommand())
        logging.getLogger("core").debug("Trying to close the current xmpp session...")
        self.ProcessEvent(events.JuStatusMessageEvent(_u("Disconnecting..."), 10000))
        event.Skip()
    
    def connected(self, event):
        """Callback for a succesful xmpp connection."""
        
        logging.getLogger("core").info("Succesful xmpp connection.")
        self.ProcessEvent(events.JuStatusMessageEvent(_("Successful connection. Starting session...")))
        event.Skip()
        
    def session_started(self, event):
        """Callback for a 'session started' event"""
        
        for i in range(self.mainNotebook.GetPageCount()):
            if self.mainNotebook.GetPage(i).GetId()==self.START_SESSION_ID:
                self.mainNotebook.DeletePage(i)
                break

        self.mainMenuBar.Enable(self.START_SESSION_ID, False)
        self.mainMenuBar.Enable(self.CLOSE_SESSION_ID, True)
        self.mainMenuBar.Enable(self.SET_PRESENCE_ID, True)

        # hack to solve a problem when disabling menu items in the __init__ function
        self.refresh_menu_item(self.mainMenuBar.FindItemById(self.CLOSE_SESSION_ID))
        self.refresh_menu_item(self.mainMenuBar.FindItemById(self.SET_PRESENCE_ID))
        
        logging.getLogger("core").info("Xmpp session started.")
        self.presenceIcon.SetIcon(wx.Icon(os.path.join(os.getcwd(), 'icons/green.xpm'), wx.BITMAP_TYPE_XPM))
        self.ProcessEvent(events.JuStatusMessageEvent(_(u"Session started."), 5000))
        event.Skip()
        
    def refresh_menu_item(self, item):
        text = item.GetText()
        item.SetText(" ")
        item.SetText(text)
        
    def disconnected(self, event):
        """Callback for a 'xmpp disconnection' event."""
        
        self.rosterTreeCtrl.DeleteChildren(self.rosterRoot)
        self.mainMenuBar.Enable(self.SET_PRESENCE_ID, False)
        self.mainMenuBar.Enable(self.CLOSE_SESSION_ID, False)
        self.mainMenuBar.Enable(self.START_SESSION_ID, True)
        wx.GetApp().xmppClient = None
        logging.getLogger("core").info("Xmpp session closed. We are disconnected now.")
        self.presenceIcon.SetIcon(wx.Icon(os.path.join(os.getcwd(), 'icons/grey.xpm'), wx.BITMAP_TYPE_XPM))
        self.ProcessEvent(events.JuStatusMessageEvent(_(u"Session closed. The connection has ended.")))
        event.Skip()
        
    def roster_item(self, event):
        """Handle the reception of a roster item.
        
        event -- wxEvent object containing the info received
        If needed, the buddy list is updated and refreshed.
        """
        
        logging.getLogger("core").debug("Roster item received:\n%s", event.rosterItem.as_xml())
        jid = event.rosterItem.jid
        child = self.get_buddy_node(jid)
           
        # If we haven't found it, we create a new tree node 
        if not child.IsOk():
            buddy = self.rosterTreeCtrl.AppendItem(self.rosterRoot, jid.as_unicode(), self.iconIndex['grey_grey'])
            self.rosterTreeCtrl.SetPyData(buddy, {"jid":jid, "availability":"grey"})
            self.rosterTreeCtrl.EnsureVisible(buddy)
        event.Skip()
        
    def presence(self, event):
        """Handle the reception of a xmpp 'presence' stanza.
        
        event -- wxEvent object containing the presence stanza
        When needed, the buddy list is updated to match the new information received.
        """
        
        logging.getLogger("core").debug("Presence stanza received:\n%s", event.stanza.serialize())
        event.stanza.get_from_jid().as_unicode()
                
        show = event.stanza.get_show()
        type = event.stanza.get_stanza_type()
        if type=='unavailable':
            statusCode = 'grey'
        elif not show or show=='chat':
            statusCode = 'green'
        elif show=='away' or show=='xa':
            statusCode = 'yellow'
        elif show=='dnd':
            statusCode = 'red'
        else:
            logging.getLogger("core").warning("Unrecognized show status. type:%s, show:%s.", type, show)
        
        self.refresh_resource_status(event.stanza.get_from_jid(), statusCode)
            
        event.Skip()
        
    def engine_list(self, event):
        """Handle the receipt of a engine list corresponding to one of our buddies.
        
        The engines list is associated with the tree node corresponding to the specific xmpp resource
        which have been queried (through 'Service Discovery' --see the juxmpp.py module--)
        """
        
        buddyNode = self.get_buddy_node(event.jid)
        if buddyNode.IsOk():
            resourceNode = self.get_resource_node(buddyNode, event.jid)
            if resourceNode.IsOk():
                # Update the engine list in the resource node
                dict = self.rosterTreeCtrl.GetPyData(resourceNode)
                dict['engines']=event.engineList
                self.rosterTreeCtrl.SetPyData(resourceNode, dict)
                logging.getLogger("core").debug("New engine list associated to %s : %s", event.jid.as_unicode(), dict['engines'])
                
                # Refresh both the resource node's icon and the parent node's icon
                engineId = self.get_selected_engine_id()
                self.update_status_icon(resourceNode, engineId)
                self.update_status_icon(buddyNode, engineId)

    def refresh_resource_status(self, jid, availability):
        """Helper class to refresh a 'resource' node  in the buddy list after a change in his availability.
        
        jid -- The xmpp JID corresponding to the resource.
        availability -- The availability status code ('grey', 'green', etc) for the resource.
        """
        
        # Recover the id for the currently selected game
        engineId = self.get_selected_engine_id()

        # find the buddy node
        buddyNode = self.get_buddy_node(jid)
        # if it doesn't exist, create it
        if not buddyNode.IsOk():
            logging.getLogger("core").debug("Creating new buddy node for %s", jid.bare().as_unicode())
            buddyNode = self.rosterTreeCtrl.AppendItem(self.rosterRoot, jid.bare().as_unicode(), self.iconIndex['grey_grey'])

        # Find the resource node
        resourceNode = self.get_resource_node(buddyNode, jid)
        # if the resource node doesn't exist, create it
        if not resourceNode.IsOk():
            logging.getLogger("core").debug("Creating new resource node for %s", jid.as_unicode())
            resourceNode = self.rosterTreeCtrl.AppendItem(buddyNode, jid.resource, -1)
            self.rosterTreeCtrl.SetPyData(resourceNode, {"jid":jid, "availability":availability})
            self.rosterTreeCtrl.EnsureVisible(resourceNode)
        else:
            logging.getLogger("core").debug("Updating the resource node for %s", jid.as_unicode())
            # Update the availability status
            dict = self.rosterTreeCtrl.GetPyData(resourceNode)
            dict['availability']=availability
            self.rosterTreeCtrl.SetPyData(resourceNode, dict)

        # Set the appropriate icon status in the resource node (color codes)
        if availability=='grey':
            # disconnected! Drop the node.
            self.rosterTreeCtrl.Delete(resourceNode)
        else:
            self.update_status_icon(resourceNode, engineId)
        # Now set the icon in the buddy node
        self.update_status_icon(buddyNode, engineId)
        
    def get_selected_engine_id(self):
        """Return the id for the currently selected engine (in the games list); None if there is no selection."""

        selectedGame = self.gamesListBox.GetSelection()
        if selectedGame!=wx.NOT_FOUND:
            engineId = self.gamesListBox.GetClientData(selectedGame).id()
        else:
            engineId = None
            
        logging.getLogger("core").debug("Selected engine's id: %s", engineId)
        return engineId
        
    def update_status_icon(self, treeNode, engineId):
        """Update the icon in a given node from the buddies' tree.
        
        treeNode -- the node to update
        engineId -- id of the currently selected engine; None if there is no selection.
        """
        
        if self.rosterTreeCtrl.GetItemParent(treeNode)==self.rosterTreeCtrl.GetRootItem():  # buddy node
            availability=engineSupport='grey'
            
            # Navigate the child nodes and choose the higher priority status for both the availability
            # and the engine support.
            (child, cookie) = self.rosterTreeCtrl.GetFirstChild(treeNode)
            while child and child.IsOk():
                (childAvailability, childEngineSupport) = self.get_resource_status(child, engineId)
                
                if self.colorPriority[childAvailability]>self.colorPriority[availability]:
                    availability=childAvailability
                if self.colorPriority[childEngineSupport]>self.colorPriority[engineSupport]:
                    engineSupport=childEngineSupport

                (child, cookie) = self.rosterTreeCtrl.GetNextChild(treeNode, cookie)

            # Set the appropriate icon
            self.rosterTreeCtrl.SetItemImage(treeNode, self.iconIndex[availability+'_'+engineSupport])
            
        else:   # resource node
            (availability, engineSupport) = self.get_resource_status(treeNode, engineId)
            status = availability+'_'+engineSupport
            
            #logging.getLogger("core").debug("Updating resource node's status to: %s", status)
            self.rosterTreeCtrl.SetItemImage(treeNode, self.iconIndex[status])
            
    def get_resource_status(self, resourceNode, engineId):
        """Return the status (availability plus engine support) of a given resource in the buddies list.
        
        resourceNode -- The tree node containing the resource.
        engineId -- The id for the currently selected engine.
        """

        dict = self.rosterTreeCtrl.GetPyData(resourceNode)
        availability = dict.get('availability', 'grey')
        if availability=='grey':
            engineSupport='grey'
        elif engineId is None:
            engineSupport='grey'
        else:
            engineList = dict.get('engines', None)
            if engineList is None:
                engineSupport='red'
            elif engineId in engineList:
                engineSupport='green'
            else:
                engineSupport='yellow'
                
        return (availability, engineSupport)
            
    def get_buddy_node(self, jid):
        """Return the tree node corresponding to a given jid.
        
        jid -- The xmpp JID from the buddy we are looking for.
        """

        (child, cookie) = self.rosterTreeCtrl.GetFirstChild(self.rosterRoot)
        while child and child.IsOk():
            if self.rosterTreeCtrl.GetItemText(child)==jid.bare().as_unicode():
                break
            (child, cookie) = self.rosterTreeCtrl.GetNextChild(self.rosterRoot, cookie)
            
        return child
    
    def get_resource_node(self, buddyNode, jid):
        """Return the tree node corresponding to a given resource.
        
        buddyNode -- The parent node for the resource.
        jid -- The full xmpp JID corresponding to the resource.
        """
        
        (child, cookie) = self.rosterTreeCtrl.GetFirstChild(buddyNode)
        while child and child.IsOk():
            if self.rosterTreeCtrl.GetItemText(child)==jid.resource:
                break
            (child, cookie) = self.rosterTreeCtrl.GetNextChild(buddyNode, cookie)
            
        return child

    def set_presence_available(self, event): # wxGlade: MainFrame.<event_handler>
        """Set the user's status to 'available'"""
        
        wx.GetApp().xmppThread.commandsQueue.put(commands.JuXmppSetPresence())
        self.presenceIcon.SetIcon(wx.Icon(os.path.join(os.getcwd(), 'icons/green.xpm'), wx.BITMAP_TYPE_XPM))
        logging.getLogger("core").debug("User's status set to 'available'")
        event.Skip()

    def set_presence_away(self, event): # wxGlade: MainFrame.<event_handler>
        """Set the user's status to 'away'"""

        wx.GetApp().xmppThread.commandsQueue.put(commands.JuXmppSetPresence("away"))
        self.presenceIcon.SetIcon(wx.Icon(os.path.join(os.getcwd(), 'icons/yellow.xpm'), wx.BITMAP_TYPE_XPM))
        logging.getLogger("core").debug("User's status set to 'away'")
        event.Skip()

    def set_presence_do_not_disturb(self, event): # wxGlade: MainFrame.<event_handler>
        """Set the user's status to 'do not disturb'"""

        wx.GetApp().xmppThread.commandsQueue.put(commands.JuXmppSetPresence("dnd"))
        self.presenceIcon.SetIcon(wx.Icon(os.path.join(os.getcwd(), 'icons/red.xpm'), wx.BITMAP_TYPE_XPM))
        logging.getLogger("core").debug("User's status set to 'do not disturb'")
        event.Skip()

    def set_english_lang(self, event): # wxGlade: MainFrame.<event_handler>
        if util.get_preferred_languages()[0]!='en':
            title =  _(u"Change of language")+u"/Change of language"
            answer = wx.MessageBox(_(u"You are going to change the application default language to english. Are you sure?")+(u"\n\nYou are going to change the application default language to english. Are you sure?")
                , title, wx.YES_NO|wx.ICON_QUESTION, self)
            if answer==wx.YES:
                wx.GetApp().userData.set('configuration', 'language', 'en')
                logging.getLogger("core").debug("Default language set to english.")
                wx.GetApp().save_user_data()
                wx.MessageBox(u"Settings stored. The change will be effective after rebooting the application.", title, wx.OK|wx.ICON_INFORMATION, self)
        event.Skip()

    def set_spanish_lang(self, event): # wxGlade: MainFrame.<event_handler>
        if util.get_preferred_languages()[0]!='sp':
            title =  _(u"Change of language")+u"/Cambio de idioma"
            answer = wx.MessageBox(_(u"You are going to change the application default language to spanish. Are you sure?")+(u"\n\nEstá a punto de cambiar el idioma por defecto a español. ¿Está seguro de querer continuar?")
                , title, wx.YES_NO|wx.ICON_QUESTION, self)
            if answer==wx.YES:
                wx.GetApp().userData.set('configuration', 'language', 'sp')
                logging.getLogger("core").debug("Default language set to spanish.")
                wx.GetApp().save_user_data()
                wx.MessageBox(u"Preferencias guardadas. El cambio se hará efectivo al reiniciar el programa.", title, wx.OK|wx.ICON_INFORMATION, self)
        event.Skip()

# end of class MainFrame
