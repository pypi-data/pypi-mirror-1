#!/usr/bin/env python
# -*- coding: UTF-8 -*-
"""Main module for Jubatu."""
# generated by wxGlade 0.4cvs on Wed Nov  1 22:21:11 2006

import wx
import time
from mainframe import MainFrame
import juxmpp
import util
import events
import signal
import logging
import gettext
import ConfigParser
import os

# Panda3D's imports
from pandac.PandaModules import loadPrcFileData
loadPrcFileData("", "window-type none")
loadPrcFileData("", "text-minfilter linear")
loadPrcFileData("", "text-pixels-per-unit 50")
import direct.directbase.DirectStart

class Jubatu(wx.App):
    """Jubatu's main class.
    
    This class is the root for the Jubatu program, handle the control flux, and stores
    some globally referenced objects, like:
    
    xmppThread: the communication thread that manages the xmpp protocol
    engineDict: a dictionary containing all the gaming engines dinamically loaded by Jubatu
    localJid: the Jabber/xmpp JID of the user (None if the user is not currently logged)
    buddySelectionManager: an util object intended to ease the selection of opponents in games' match proposal panels
    userData: standar 'SafeConfigParser' object containing user preferences and user data
    """

    xmppThread = None
    buddySelectionManager = util.BuddySelectionManager()
    engineDict = {}
    localJid = None
    userData = ConfigParser.SafeConfigParser()
    
    def OnInit(self):
        # Set the logging verbosity for the standard and the general formatting options here. This will be useful
        # for controlling the verbosity of the used libraries (mainly pyxmpp).
        logging.basicConfig(level=logging.WARNING,
                            format='%(asctime)s %(levelname)s %(name)s %(filename)s %(lineno)d %(message)s')
        # Set the logging verbosity for the main window here. Take into account that both the communication thread
        # and the game engines use their own loggers, so this won't affect them.
        logging.getLogger("core").setLevel(logging.WARNING)

        # If the directory for user data and configuration don't exist, we create it now
        if not os.path.exists(util.get_user_dir()):
            os.mkdir(util.get_user_dir())
        if not os.path.exists(os.path.join(util.get_user_dir(), 'games')):
            os.mkdir(os.path.join(util.get_user_dir(), 'games'))

        # Change the working directory to the one where this file is contained
        modDir = os.path.dirname(__file__)
        if modDir != '':
            os.chdir(modDir)

        # Load the user data (includes user's configuration)
        self.userData.readfp(open('default.cfg'))
        self.userData.read(util.get_user_data_path())

        self.setup_language_support()
                            
        wx.InitAllImageHandlers()

        # Launch the xmpp communication thread
        self.xmppThread = juxmpp.XmppClientThread()
        self.xmppThread.start()

        wx.GetApp().Bind(events.EVT_BUDDY_SELECTED, self.buddySelectionManager.buddy_selection_received)

        logging.getLogger("core").debug("Creating Jubatu's MainFrame")
        mainFrame = MainFrame(None, -1, "")
        self.SetTopWindow(mainFrame)
        mainFrame.Show()
        
        signal.signal = signal_override  # ugly hack to avoid that Panda3D's task manager takes control over the SIGINT signal (KeyboardInterrupt)
        logging.getLogger("core").debug("Disabling standard Panda3d windows' event handler")
        base.ignore('window-event')     # disable Panda3D's normal windows events handling
        #messenger.toggleVerbose()  #debug messages for panda3d (drwr dixit)

        return 1
    
    def MainLoop(self):
        evtloop = wx.EventLoop()
        wx.EventLoop.SetActive(evtloop)

        while True:
            # close app?
            if self.GetTopWindow()==None:
                self.save_user_data()    # Store user's preferences and data
                time.sleep(0.1)
                base.userExit()     # Panda3D's exit petition
                return;

            # This inner loop will process any wxpython's GUI events
            # until there are no more events waiting.
            while evtloop.Pending():
                evtloop.Dispatch()
                
            for engine in self.engineDict.values():
                engine.run_step()
                
            # Run Panda3D's events handler
            taskMgr.step()

            # Send idle events to wxpython's idle handlers.
            time.sleep(0.01)
            #time.sleep(0.001)
            self.ProcessIdle()
            
    def save_user_data(self):
        """Saves in file user' data and settings."""
        
        logging.getLogger("core").debug("Saving user's data.")
        try:
            self.userData.write(open(util.get_user_data_path(), 'w'))
        except IOError:
            logging.getLogger("core").error("It was impossible to save the user data file. Probably the user haven't enough permissions to create the user's directory or file.")
            
    def setup_language_support(self):
        """Recover the default language from user's profile and prepare Jubatu to use it."""
        
         # Recover user's preferred language
        userLang = util.get_preferred_languages()
        logging.getLogger("core").debug("User's preferred language: %s", userLang)
        
        #self.locale = wx.Locale()
        #self.locale.Init(wx.LANGUAGE_SPANISH)

        # Load the translations file for the selected language
        lang = gettext.translation('core', 'i18n', languages=userLang, fallback=True)
        lang.install(unicode=1)
           

# end of class Jubatu

def signal_override(f, s):
    pass

if __name__ == "__main__":
    jubatu = Jubatu(0)
    jubatu.MainLoop()
    
def run():
    jubatu = Jubatu(0)
    jubatu.MainLoop()
