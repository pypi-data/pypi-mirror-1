/*

In this file you can put your own custom Javascript. In the following
sections you can find examples on how to create the most common
plugins.

Lines beginning with `;;;` are automatically stripped when served in
production mode. Put these in front of lines with code like assertions
statements or logging calls. (But never put ;;; embedded inside multiline
(), [] or {} constructs like an "if" condition or a "switch" statement.)

*/

// CLOSURE for plugin ${namespace}
// The closure makes all the embedded code private.
new function () {
// >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

//-----------------------------------------------------------
//                   Action example
//-----------------------------------------------------------
kukit.actionsGlobalRegistry.register('${namespace}-exampleAction', function (oper) {
    // The following is used for logging
;;; oper.componentName = '[${namespace}-exampleAction] action';
    
    // Validate the parameters to this action, you can add multiple
    // required or optional parameters. Optional parameters will be
    // initialized with a default when not passed.
    oper.evaluateParameters(['requiredParameter'], 
                            {'optionalParameter': 'default'});

    // optionally, you can check if a parameter is of a given data type,
    // and convert to it.
    oper.evalBool('requiredParameter');

    // You can get at the node for which this action is executed like
    // this. An action is always invoked on a single node. Even when
    // it applies to multiple nodes (then it will be invoked multiple
    // times on each node).
    var node = oper.node;

    // Read a parameter from the parameters
    var required = oper.parms.requiredParameter;

    // Add your specific action code here
});
// The line above registers the action under the name
// `${namespace}-exampleAction`. 

kukit.commandsGlobalRegistry.registerFromAction(
    '${namespace}-exampleAction', kukit.cr.makeSelectorCommand);
// The line above also defines the action as a command
// with selectors. To make a global command that executes
// without a selector, exactly once, use makeGlobalCommand.
// It is a good idea to always make an action into a command as well.

//-----------------------------------------------------------
//                      Value provider
//-----------------------------------------------------------
var ExampleProvider = function() {};
ExampleProvider.prototype = {
    // The check function is executed during the parsing of KSS. Use
    // this to make sure the arguments are correct.
    // Use ;;; in the beginning of each line in check.
;;; check: function(args) {
;;; // An example of what you could check is the argument length
;;;     if (args.length != 2) {
;;;         // Raise an error in case something is wrong
;;;         throw new Error('exampleProvider provider needs 2 arguments [one, two]');
;;;     }
;;; },
    eval: function(args, node) {
        // Return the value which for this provider
        return 'example';
    }
};
kukit.pprovidersGlobalRegistry.register(
    '${namespace}-exampleProvider', ExampleProvider);
// The line above registers the value provider under the name
// `${namespace}-exampleProvider`



//-----------------------------------------------------------
//              Simple event binder for stateful events
//-----------------------------------------------------------

var ExampleEventBinder = function() {
    // Add your initialization stuff here
    this.exampleVar = {};
};
ExampleEventBinder.prototype.__bind__ =
    function(name, func_to_bind, oper) {
    // The following is used for logging
;;; oper.componentName = '[${namespace}-exampleEvent] event binding';

    // Validate the parameters to this action, you can add multiple
    // required or optional parameters. Optional parameters will be
    // initialized with a default when not passed.
    oper.evaluateParameters(['delay'], {'repeat': 'true'});

    // optionally, you can check if a parameter is of a given data type,
    // and convert to it.
    oper.evalInt('delay');
    oper.evalBool('repeat');

    // Add your specific event code here
};

kukit.eventsGlobalRegistry.register('${namespace}', 'exampleEvent',
    ExampleEventBinder, '__bind__', null);
// The above line registers the ${namespace}-exampleEvent
// with the binder method __bind__.


// <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
}();
// END CLOSURE plugin ${namespace}
