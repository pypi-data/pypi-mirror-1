#!/usr/bin/python

# Copyright (c) 2009, Purdue University
# All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# 
# Redistributions of source code must retain the above copyright notice, this
# list of conditions and the following disclaimer.
#
# Redistributions in binary form must reproduce the above copyright notice, this
# list of conditions and the following disclaimer in the documentation and/or
# other materials provided with the distribution.
# 
# Neither the name of the Purdue University nor the names of its contributors
# may be used to endorse or promote products derived from this software without
# specific prior written permission.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

"""Make dns servers and dns server sets for roster"""


__copyright__ = 'Copyright (C) 2009, Purdue University'
__license__ = 'BSD'
__version__ = '0.10'


import os
import sys
import getpass

from optparse import OptionParser

from roster_user_tools import cli_common_lib
from roster_user_tools import roster_client_lib


def main(args):
  """Collects command line arguments.

  Inputs:
    args: list of arguments from the command line
  """
  parser = OptionParser(version='%%prog (Roster %s)' % __version__)

  parser.add_option('-d', '--dns-server', action='store', dest='dns_server',
                    help='Modify a DNS server.', default=None)
  parser.add_option('-e', '--dns-server-set', action='store',
                    dest='dns_server_set', help='Modify a DNS server set.',
                    default=None)
  parser.add_option('-s', '--server', action='store', dest='server',
                    help='XML RPC Server URL.', metavar='<server>',
                    default=None)
  parser.add_option('--config-file', action='store', dest='config_file',
                    help='Config file location.', metavar='<file>',
                    default=None)
  parser.add_option('-u', '--username', action='store', dest='username',
                    help='Run as a different username.', metavar='<username>',
                    default=unicode(getpass.getuser()))
  parser.add_option('-p', '--password', action='store', dest='password',
                    help='Password string, NOTE: It is insecure to use this '
                         'flag on the command line.', metavar='<password>',
                    default=None)
  parser.add_option('-c', '--cred-file', action='store', dest='credfile',
                    help='Location of credential file.', metavar='<cred-file>',
                    default=None)
  parser.add_option('--cred-string', action='store', dest='credstring',
                    help='String of credential.', metavar='<cred-string>',
                    default=None)
  parser.add_option('-q', '--quiet', action='store_true', dest='quiet',
                    help='Suppress program output.', default=False)

  (globals()["options"], args) = parser.parse_args(args)

  try:
    cli_common_lib_instance = cli_common_lib.CliCommonLib(options)
  except cli_common_lib.ArgumentError, e:
    print 'ERROR: %s' % e
    sys.exit(1)

  dns_servers = roster_client_lib.RunFunction(
      u'ListDnsServers', options.username,
      credfile=options.credfile, credstring=options.credstring,
      server_name=options.server,
      kwargs={'dns_server_name': options.dns_server})['core_return']
  dns_server_sets = roster_client_lib.RunFunction(
      u'ListDnsServerSets', options.username,
      credfile=options.credfile, credstring=options.credstring,
      server_name=options.server,
      kwargs={'dns_server_set_name': options.dns_server_set})['core_return']

  if( options.dns_server and not options.dns_server_set
        and options.dns_server not in dns_servers ):
    roster_client_lib.RunFunction(
        u'MakeDnsServer', options.username,
        credfile=options.credfile, credstring=options.credstring,
        server_name=options.server,
        args=[options.dns_server])
    if( not options.quiet ):
      print 'ADDED DNS SERVER: %s' % options.dns_server
  elif( options.dns_server and options.dns_server_set ):
    if( options.dns_server not in dns_servers ):
      cli_common_lib_instance.DnsError(
          'DNS Server "%s" does not exist.' % options.dns_server, 1)
    if( options.dns_server_set not in dns_server_sets ):
      cli_common_lib_instance.DnsError(
          'DNS Server Set "%s" does not exist.' % options.dns_server_set, 1)


    roster_client_lib.RunFunction(
        u'MakeDnsServerSetAssignments', options.username,
        credfile=options.credfile, credstring=options.credstring,
        server_name=options.server,
        args=[options.dns_server, options.dns_server_set])
    if( not options.quiet ):
      print ('ADDED DNS SERVER SET ASSIGNMENT: dns_server: %s '
            'dns_server_set: %s' % (options.dns_server, options.dns_server_set))
  elif( options.dns_server_set and not options.dns_server ):
    roster_client_lib.RunFunction(
        u'MakeDnsServerSet', options.username,
        credfile=options.credfile, credstring=options.credstring,
        server_name=options.server,
        args=[options.dns_server_set])
    if( not options.quiet ):
      print 'ADDED DNS SERVER SET: %s' % options.dns_server_set


if __name__ == "__main__":
  main(sys.argv[1:])
