#!/usr/bin/python

# Copyright (c) 2009, Purdue University
# All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# 
# Redistributions of source code must retain the above copyright notice, this
# list of conditions and the following disclaimer.
#
# Redistributions in binary form must reproduce the above copyright notice, this
# list of conditions and the following disclaimer in the documentation and/or
# other materials provided with the distribution.
# 
# Neither the name of the Purdue University nor the names of its contributors
# may be used to endorse or promote products derived from this software without
# specific prior written permission.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

"""make views and dns server set view assignments for roster"""


__copyright__ = 'Copyright (C) 2009, Purdue University'
__license__ = 'BSD'
__version__ = '0.10'


import os
import sys
import getpass

from optparse import OptionParser

from roster_user_tools import cli_common_lib
from roster_user_tools import roster_client_lib


def main(args):
  """Collects command line arguments.

  Inputs:
    args: list of arguments from the command line
  """
  parser = OptionParser(version='%%prog (Roster %s)' % __version__)

  parser.add_option('-v', '--view', action='store', dest='view',
                    help='Specifies a view.', default=None)
  parser.add_option('-V', '--view-dep', action='store', dest='view_subset',
                    help='Specifies a view dependency.', default=None)
  parser.add_option('-o', '--options', action='store', dest='options',
                    help='View options.', metavar='<options>', default=None)
  parser.add_option('-e', '--dns-server-set', action='store',
                    dest='dns_server_set',
                    help='Specifies a certain DNS server set.', default=None)
  parser.add_option('-a', '--acl', action='store', dest='acl',
                    help='Modify an access control list. (name)', default=None)
  parser.add_option('--cidr-block', action='store', dest='cidr_block',
                    help='Cidr block or single IP address. Used for making'
                         ' ACLs.', default=None)
  parser.add_option('--allow', action='store_true', dest='allow',
                    help='Allow access for specified ACL.', default=None)
  parser.add_option('--deny', action='store_false', dest='deny',
                    help='Deny access for specified ACL.', default=None)
  parser.add_option('-s', '--server', action='store', dest='server',
                    help='XML RPC Server URL.', metavar='<server>',
                    default=None)
  parser.add_option('--config-file', action='store', dest='config_file',
                    help='Config file location.', metavar='<file>',
                    default=None)
  parser.add_option('-u', '--username', action='store', dest='username',
                    help='Run as a different username.', metavar='<username>',
                    default=unicode(getpass.getuser()))
  parser.add_option('-p', '--password', action='store', dest='password',
                    help='Password string, NOTE: It is insecure to use this '
                         'flag on the command line.', metavar='<password>',
                    default=None)
  parser.add_option('-c', '--cred-file', action='store', dest='credfile',
                    help='Location of credential file.', metavar='<cred-file>',
                    default=None)
  parser.add_option('--cred-string', action='store', dest='credstring',
                    help='String of credential.', metavar='<cred-string>',
                    default=None)
  parser.add_option('--no-header', action='store_true', dest='no_header',
                    help='Do not display a header.', default=False)
  parser.add_option('-q', '--quiet', action='store_true', dest='quiet',
                    help='Suppress program output.', default=False)

  (globals()["options"], args) = parser.parse_args(args)
  try:
    cli_common_lib_instance = cli_common_lib.CliCommonLib(options)
  except cli_common_lib.ArgumentError, e:
    print 'ERROR: %s' % e
    sys.exit(1)

  if( options.view_subset and not options.view ):
    cli_common_lib_instance.DnsError('Using -V/--view-dep requires the use of '
                            '-v/--view.', 1)
  elif( options.dns_server_set and not options.view ):
    cli_common_lib_instance.DnsError('Using -e/--dns-server-set requires the use '
                            'of -v/--view.', 1)
  elif( options.view and not options.view_subset
        and not options.dns_server_set and not options.acl ):
    cli_common_lib_instance.DnsError('To make a view, an ACL must be specified with '
                            '--acl.', 1)
  elif( options.acl ):
    acls = roster_client_lib.RunFunction(u'ListACLs', options.username,
                                         credfile=options.credfile,
                                         credstring=options.credstring,
                                         server_name=options.server,
                                         kwargs={u'acl_name': options.acl})[
                                                         'core_return']
    if( acls == {} ):
      cli_common_lib_instance.DnsError('ACL "%s" does not exist.' % options.acl, 1)
  elif( options.view and options.view_subset and not options.dns_server_set ):
    pass
  elif( options.view and options.dns_server_set and not options.view_subset ):
    pass
  elif( options.view and not options.view_subset
          and not options.dns_server_set ):
    pass
  else:
    cli_common_lib_instance.DnsError('Incorrect arguments.', 1)

  views = roster_client_lib.RunFunction(
      u'ListViews', options.username,
      credfile=options.credfile, credstring=options.credstring,
      server_name=options.server,
      args=[options.view, options.options])['core_return']
  dns_server_sets = roster_client_lib.RunFunction(
      u'ListDnsServerSets', options.username,
      credfile=options.credfile, credstring=options.credstring,
      server_name=options.server,
      args=[options.view, options.options])['core_return']
  view_assignments = roster_client_lib.RunFunction(
      u'ListViewAssignments', options.username,
      credfile=options.credfile, credstring=options.credstring,
      server_name=options.server,
      kwargs={'view_superset': options.view, 'view_subset': options.view_subset})[
          'core_return']

  if( options.view_subset and options.view and not options.dns_server_set ):
    if( options.view not in views ):
      cli_common_lib_instance.DnsError('View "%s" does not exist.' % options.view, 1)
    if( options.view_subset not in views ):
      cli_common_lib_instance.DnsError(
          'View "%s" does not exist.' % options.view_subset, 1)
  elif( options.view and options.dns_server_set and not options.view_subset ):
    if( options.view not in views ):
      cli_common_lib_instance.DnsError('View "%s" does not exist.' % options.view, 1)
    if( options.dns_server_set not in dns_server_sets ):
      cli_common_lib_instance.DnsError(
          'Dns Server Set "%s" does not exist.' % options.dns_server_set, 1)

  if( options.view not in views and options.view and not options.view_subset ):
    return_dict = roster_client_lib.RunFunction(
        u'MakeView', options.username,
        credfile=options.credfile, credstring=options.credstring,
        server_name=options.server,
        args=[options.view, options.options])

    if( not options.quiet ):
      print 'ADDED VIEW: view_name: %s options %s' % (options.view,
                                                      options.options)
  if( options.acl ):
    view_acl_assignments = roster_client_lib.RunFunction(
        u'ListViewToACLAssignments', options.username,
        credfile=options.credfile, credstring=options.credstring,
        server_name=options.server, kwargs={'view_name': options.view,
                                            u'acl_name': options.acl})[
                                                'core_return']
    if( view_acl_assignments == [] ):
      roster_client_lib.RunFunction(u'MakeViewToACLAssignments',
                                    options.username,
                                    credfile=options.credfile,
                                    credstring=options.credstring,
                                    server_name=options.server,
                                      args=[options.view, options.acl])
      if( not options.quiet ):
        print 'ADDED VIEW ACL ASSIGNMENT: view: %s acl: %s' % (
            options.view, options.acl)

  if( options.view_subset not in views and options.view_subset ):
    return_dict = roster_client_lib.RunFunction(
        u'MakeView', options.username,
        credfile=options.credfile, credstring=options.credstring,
        server_name=options.server,
        args=[options.view_subset, options.options_dep])

    if( not options.quiet ):
      print 'ADDED VIEW: view_name: %s options %s' % (options.view_subset,
                                                      options.options_dep)

  view_assignment_exists = True
  if( options.view not in view_assignments ):
    view_assignment_exists = False
  elif( options.view_subset not in view_assignments[options.view] ):
      view_assignment_exists = False

  if( options.view_subset and not view_assignment_exists ):
    roster_client_lib.RunFunction(
        u'MakeViewAssignment', options.username,
        credfile=options.credfile, credstring=options.credstring,
        server_name=options.server,
        args=[options.view, options.view_subset])
    if( not options.quiet ):
      print 'ADDED VIEW ASSIGNMENT: view_name: %s view_subset: %s' % (
          options.view, options.view_subset)
  if( options.dns_server_set ):
    roster_client_lib.RunFunction(
        u'MakeDnsServerSetViewAssignments', options.username,
        credfile=options.credfile, credstring=options.credstring,
        server_name=options.server,
        args=[options.view, options.dns_server_set])
    if( not options.quiet ):
      print ('ADDED DNS SERVER SET VIEW ASSIGNMENT: view_name: %s '
             'dns_server_set: %s' % (options.view, options.dns_server_set))


if __name__ == "__main__":
  main(sys.argv[1:])
