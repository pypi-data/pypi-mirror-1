#!/usr/bin/python

# Copyright (c) 2009, Purdue University
# All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# 
# Redistributions of source code must retain the above copyright notice, this
# list of conditions and the following disclaimer.
#
# Redistributions in binary form must reproduce the above copyright notice, this
# list of conditions and the following disclaimer in the documentation and/or
# other materials provided with the distribution.
# 
# Neither the name of the Purdue University nor the names of its contributors
# may be used to endorse or promote products derived from this software without
# specific prior written permission.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

"""Remove host tool for dnsmanagement"""


__copyright__ = 'Copyright (C) 2009, Purdue University'
__license__ = 'BSD'
__version__ = '0.6'


import os
import sys
import getpass
import xmlrpclib

from optparse import OptionParser
from roster_user_tools import cli_record_lib
from roster_user_tools import cli_common_lib
from roster_user_tools import roster_client_lib

def main(args):
  """Collects command line arguments, checks ip addresses and adds records.

  Inputs:
    args: list of arguments from the command line
  """
  parser = OptionParser(version='%%prog (Roster %s)' % __version__)

  parser.add_option('-i', '--ip-address', action='store', dest='ip_address',
                    help='Full IP address of machine.', metavar='<ip-address>',
                    default=None)
  parser.add_option('-r', '--range', action='store', dest='range',
                    help='CIDR block range of IP addresses. Assumes -l, will'
                    'only print a list of ip addresses. Example:'
                    '10.10.0.0/24', metavar='<range>', default=None)
  parser.add_option('-s', '--server', action='store', dest='server',
                    help='XML RPC Server address.', metavar='<server>',
                    default=None)
  parser.add_option('--config-file', action='store', dest='config_file',
                    help='Config file location.', metavar='<file>',
                    default=None)
  parser.add_option('-t', '--target', action='store', dest='target',
                    help='Target machine host name.', metavar='<target>',
                    default=None)
  parser.add_option('-l', '--list', action='store_true', dest='list_data',
                    help='Set this flag to only list DNS configuration without'
                         ' making any changes.', default=False)
  parser.add_option('--ttl', action='store', dest='ttl',
                    help='Time to live.', metavar='<ttl>', default=3600)
  parser.add_option('-z', '--zone', action='store', dest='zone_name',
                    help='String of the zone name.', metavar='<view-name>',
                    default=None)
  parser.add_option('-v', '--view-name', action='store', dest='view_name',
                    help=('String of the view name <view-name>. Example: '
                    '"internal"'), metavar='<view-name>', default='any')
  parser.add_option('-u', '--username', action='store', dest='username',
                    help='Run as a different username.', metavar='<username>',
                    default=unicode(getpass.getuser()))
  parser.add_option('-p', '--password', action='store', dest='password',
                    help='Password string, NOTE: It is insecure to use this '
                    'flag on the command line.', metavar='<password>',
                    default=None)
  parser.add_option('-c', '--cred-file', action='store', dest='credfile',
                    help='Location of credential file.', metavar='<cred-file>',
                    default=None)
  parser.add_option('-q', '--quiet', action='store_true', dest='quiet',
                    help='Suppress program output.', default=False)


  (globals()["options"], args) = parser.parse_args(args)

  try:
    cli_common_lib_instance = cli_common_lib.CliCommonLib(options)
  except cli_common_lib.ArgumentError, e:
    print 'ERROR: %s' % e
    sys.exit(1)
  cli_record_lib_instance = cli_record_lib.CliRecordLib(cli_common_lib_instance)

  if( options.ip_address is not None ):
    if( options.ip_address.find('.') != -1 ):
      version = 4
    elif( options.ip_address.find(':') != -1 ):
      version = 6
    else:
      cli_common_lib_instance.DnsError('Incorrectly formatted IP address.', 1)

    if( options.list_data ):
      records_dict = roster_client_lib.RunFunction(
          'ListRecordsByCIDRBlock', options.username, credfile=options.credfile,
          server_name=options.server, args=[options.ip_address])['core_return']
      print cli_common_lib_instance.PrintRecords(records_dict, [options.ip_address])
    else:
      records_dict = roster_client_lib.RunFunction(
          'ListRecordsByCIDRBlock', options.username, credfile=options.credfile,
          server_name=options.server, args=[options.ip_address])['core_return']
      reverse_zone_name = roster_client_lib.RunFunction(
          'ListZoneByIPAddress', options.username, credfile=options.credfile,
          server_name=options.server, args=[options.ip_address])['core_return']
      zone_info = roster_client_lib.RunFunction(
          'ListZones', options.username, credfile=options.credfile,
          server_name=options.server, kwargs={'zone_name': reverse_zone_name})[
              'core_return']
      try:
        reverse_zone_origin = zone_info[reverse_zone_name][
            options.view_name]['zone_origin']
      except KeyError:
        cli_common_lib_instance.DnsError('Reverse zone not found.', 1)
      try:
        records_list = records_dict[options.view_name][options.ip_address]
      except KeyError:
        cli_common_lib_instance.DnsError('Record not found.', 1)
      if( len(records_list) == 1 ):
        hostname = records_list[0]['host']
        if( not hostname.endswith('.') ):
          hostname = '%s.' % hostname
      else:
        cli_common_lib_instance.DnsError('Multiple records found.')
      record_type = u'a'
      if( version == 6 ):
        record_type = u'aaaa'
      try:
        cli_record_lib_instance.RemoveRecord(record_type, options,
                                    {u'assignment_ip': options.ip_address},
                                    quiet=options.quiet, raise_errors=True)
        removed_type = True
      except xmlrpclib.Fault, error:
        error_string = error.faultString.split(':')[1]
        if(  error_string == 'Record not found.' ):
          removed_type = False
        else:
          raise
      reverse_ip = roster_client_lib.RunFunction(
          'ReverseIP', options.username, credfile=options.credfile,
          server_name=options.server, args=[options.ip_address])['core_return']
      options.zone_name = reverse_zone_name
      options.target = reverse_ip
      try:
        cli_record_lib_instance.RemoveRecord(u'ptr', options,
                                    {u'assignment_host': hostname},
                                    quiet=options.quiet, raise_errors=True)
        removed_ptr = True
      except xmlrpclib.Fault, error:
        error_string = error.faultString.split(':')[1]
        if( error_string == 'No records found.' ):
          removed_ptr = False
        else:
          raise
      if( not removed_type and not removed_ptr ):
        cli_common_lib_instance.DnsError('Record not found.')


  elif( options.range is not None ):
    records_dict = roster_client_lib.RunFunction(
        'ListRecordsByCIDRBlock', options.username, credfile=options.credfile,
        server_name=options.server, args=[options.range],
        kwargs={'view_name': options.view_name})['core_return']
    ip_address_list = roster_client_lib.RunFunction(
        'CIDRExpand', options.username, credfile=options.credfile,
        server_name=options.server, args=[options.range])['core_return']
    print cli_common_lib_instance.PrintRecords(records_dict, ip_address_list)
  else:
    cli_common_lib_instance.DnsError('An ip address or range must be specified.', 1)


if __name__ == "__main__":
    main(sys.argv[1:])
