#!/usr/bin/python

# Copyright (c) 2009, Purdue University
# All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# 
# Redistributions of source code must retain the above copyright notice, this
# list of conditions and the following disclaimer.
#
# Redistributions in binary form must reproduce the above copyright notice, this
# list of conditions and the following disclaimer in the documentation and/or
# other materials provided with the distribution.
# 
# Neither the name of the Purdue University nor the names of its contributors
# may be used to endorse or promote products derived from this software without
# specific prior written permission.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

"""list views and dns server set view assignments for roster"""


__copyright__ = 'Copyright (C) 2009, Purdue University'
__license__ = 'BSD'
__version__ = '0.5'


import os
import sys
import getpass

from optparse import OptionParser

from roster_user_tools import cli_common_lib
from roster_user_tools import roster_client_lib


def main(args):
  """Collects command line arguments.

  Inputs:
    args: list of arguments from the command line
  """
  parser = OptionParser()

  parser.add_option('-v', '--view', action='store', dest='view',
                    help='List a certain view', default=None)
  parser.add_option('-V', '--view-dependency', action='store', dest='view_dep',
                    help='List a certain view dependency', default=None)
  parser.add_option('-e', '--dns-server-set', action='store',
                    dest='dns_server_set',
                    help='List a certain DNS server set.', default=None)
  parser.add_option('-s', '--server', action='store', dest='server',
                    help='XML RPC Server URL.', metavar='<server>',
                    default='https://localhost:8000')
  parser.add_option('-u', '--username', action='store', dest='username',
                    help='Run as a different username.', metavar='<username>',
                    default=unicode(getpass.getuser()))
  parser.add_option('-p', '--password', action='store', dest='password',
                    help='Password string, NOTE: It is insecure to use this '
                         'flag on the command line.', metavar='<password>',
                    default=None)
  parser.add_option('-c', '--cred-file', action='store', dest='credfile',
                    help='Location of credential file.', metavar='<cred-file>',
                    default=os.path.join(os.path.expanduser('~'), '.dnscred'))
  parser.add_option('--cred-string', action='store', dest='credstring',
                    help='String of credential.', metavar='<cred-string>',
                    default=None)
  parser.add_option('--no-header', action='store_true', dest='no_header',
                    help='Do not display a header.', default=False)

  (globals()["options"], args) = parser.parse_args(args)

  cli_common_lib.CheckCredentials(options)

  views = roster_client_lib.RunFunction(
      u'ListViews', options.username,
      credfile=options.credfile, credstring=options.credstring,
      server_name=options.server,
      kwargs={'view_name': options.view})['core_return']

  view_dependencies = roster_client_lib.RunFunction(
      u'ListViewAssignments', options.username,
      credfile=options.credfile, credstring=options.credstring,
      server_name=options.server,
      kwargs={'view_superset': options.view,
              'view_subset': options.view_dep})['core_return']

  dns_set_view_assignments = roster_client_lib.RunFunction(
      u'ListDnsServerSetViewAssignments', options.username,
      credfile=options.credfile, credstring=options.credstring,
      server_name=options.server,
      kwargs={'view_name': options.view,
              'dns_server_set_name': options.dns_server_set,
              'key_by_view': True})['core_return']
  print_list = []
  if( not options.no_header ):
    print_list = [['view', 'view_dependencies', 'view_options',
                   'dns_server_sets']]
  for view in views:
    if( view not in view_dependencies and view != 'any' ):
      continue
    print_list.append([view, ','.join(view_dependencies[view]), views[view],
                       ','.join(dns_set_view_assignments[view])])
  print cli_common_lib.PrintColumns(print_list,
                                    first_line_header=(not options.no_header))


if __name__ == "__main__":
  main(sys.argv[1:])
