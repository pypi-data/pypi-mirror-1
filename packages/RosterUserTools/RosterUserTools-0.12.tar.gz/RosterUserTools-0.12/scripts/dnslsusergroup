#!/usr/bin/python

# Copyright (c) 2009, Purdue University
# All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# 
# Redistributions of source code must retain the above copyright notice, this
# list of conditions and the following disclaimer.
#
# Redistributions in binary form must reproduce the above copyright notice, this
# list of conditions and the following disclaimer in the documentation and/or
# other materials provided with the distribution.
# 
# Neither the name of the Purdue University nor the names of its contributors
# may be used to endorse or promote products derived from this software without
# specific prior written permission.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

"""List user tool for roster"""


__copyright__ = 'Copyright (C) 2009, Purdue University'
__license__ = 'BSD'
__version__ = '0.12'


import os
import sys
import getpass

from optparse import OptionParser

from roster_user_tools import cli_common_lib
from roster_user_tools import roster_client_lib


def main(args):
  """Collects command line arguments, adds users/groups/assignments

  Inputs:
    args: list of arguments from the command line
  """
  parser = OptionParser(version='%%prog (Roster %s)' % __version__)

  parser.add_option('-U', '--Username', action='store', dest='user_name',
                    help='String of the user to search for.',
                    metavar='<new-user>', default=None)
  parser.add_option('-a', '--access-level', action='store', dest='access_level',
                    help='Access level of the search user.',
                    metavar='<access-level>', default=None)
  parser.add_option('-g', '--group', action='store', dest='group',
                    help='String of the group of users.',
                    metavar='<group>', default=None)
  parser.add_option('-s', '--server', action='store', dest='server',
                    help='XML RPC Server address.', metavar='<server>',
                    default=None)
  parser.add_option('--config-file', action='store', dest='config_file',
                    help='Config file location.', metavar='<file>',
                    default=None)
  parser.add_option('-u', '--username', action='store', dest='username',
                    help='Run as a different username.', metavar='<username>',
                    default=unicode(getpass.getuser()))
  parser.add_option('-p', '--password', action='store', dest='password',
                    help='Password string, NOTE: It is insecure to use this '
                    'flag on the command line.', metavar='<password>',
                    default=None)
  parser.add_option('-c', '--cred-file', action='store', dest='credfile',
                    help='Location of credential file.', metavar='<cred-file>',
                    default=None)
  parser.add_option('--cred-string', action='store', dest='credstring',
                    help='String of credential.', metavar='<cred-string>',
                    default=None)

  (globals()["options"], args) = parser.parse_args(args)

  try:
    cli_common_lib_instance = cli_common_lib.CliCommonLib(options)
  except cli_common_lib.ArgumentError, e:
    print 'ERROR: %s' % e
    sys.exit(1)

  if( options.access_level ):
    options.access_level = int(options.access_level)

  users = roster_client_lib.RunFunction(
      u'ListUsers', options.username, credfile=options.credfile,
      credstring=options.credstring, server_name=options.server,
      kwargs={'user_name': options.user_name,
              'access_level': options.access_level})['core_return']

  user_group = roster_client_lib.RunFunction(
      u'ListUserGroupAssignments', options.username, credfile=options.credfile,
      credstring=options.credstring, server_name=options.server,
      kwargs={'user_name': options.user_name, u'group_name': options.group})[
          'core_return']
  print_list = [['Username', 'Groups', 'Access Level']]
  for user in users:
    if( options.group and user not in user_group ):
      continue
    group = []
    if( user in user_group ):
      group = user_group[user]
    print_list.append([user, ','.join(group), users[user]])
  print cli_common_lib_instance.PrintColumns(print_list, first_line_header=True)

if __name__ == "__main__":
    main(sys.argv[1:])
