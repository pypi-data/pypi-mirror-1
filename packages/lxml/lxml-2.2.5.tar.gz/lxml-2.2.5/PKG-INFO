Metadata-Version: 1.0
Name: lxml
Version: 2.2.5
Summary: Powerful and Pythonic XML processing library combining libxml2/libxslt with the ElementTree API.
Home-page: http://codespeak.net/lxml
Author: lxml dev team
Author-email: lxml-dev@codespeak.net
License: UNKNOWN
Download-URL: http://pypi.python.org/packages/source/l/lxml/lxml-2.2.5.tar.gz
Description: lxml is a Pythonic, mature binding for the libxml2 and libxslt libraries.  It
        provides safe and convenient access to these libraries using the ElementTree
        API.
        
        It extends the ElementTree API significantly to offer support for XPath,
        RelaxNG, XML Schema, XSLT, C14N and much more.
        
        To contact the project, go to the `project home page
        <http://codespeak.net>`_ or see our bug tracker at
        https://launchpad.net/lxml
        
        In case you want to use the current in-development version of lxml, you can
        get it from the subversion repository at http://codespeak.net/svn/lxml/trunk .
        Running ``easy_install lxml==dev`` will install it from
        http://codespeak.net/svn/lxml/trunk#egg=lxml-dev
        
        
        After an official release of a new stable series, bug fixes may become
        available at
        http://codespeak.net/svn/lxml/branch/lxml-2.2 .
        Running ``easy_install lxml==2.2bugfix`` will install
        the unreleased branch state from
        http://codespeak.net/svn/lxml/branch/lxml-2.2#egg=lxml-2.2bugfix
        as soon as a maintenance branch has been established.
        2.2.5 (2010-02-28)
        ==================
        
        Features added
        --------------
        
        * Support for running XSLT extension elements on the input root node
        (e.g. in a template matching on "/").
        
        Bugs fixed
        ----------
        
        * Crash in XPath evaluation when reading smart strings from a document
        other than the original context document.
        
        * Support recent versions of html5lib by not requiring its
        ``XHTMLParser`` in ``htmlparser.py`` anymore.
        
        * Manually instantiating the custom element classes in
        ``lxml.objectify`` could crash.
        
        * Invalid XML text characters were not rejected by the API when they
        appeared in unicode strings directly after non-ASCII characters.
        
        * lxml.html.open_http_urllib() did not work in Python 3.
        
        * The functions ``strip_tags()`` and ``strip_elements()`` in
        ``lxml.etree`` did not remove all occurrences of a tag in all cases.
        
        * Crash in XSLT extension elements when the XSLT context node is not
        an element.
        
        
        
Platform: UNKNOWN
Classifier: Development Status :: 5 - Production/Stable
Classifier: Intended Audience :: Developers
Classifier: Intended Audience :: Information Technology
Classifier: License :: OSI Approved :: BSD License
Classifier: Programming Language :: Cython
Classifier: Programming Language :: Python :: 2
Classifier: Programming Language :: Python :: 2.3
Classifier: Programming Language :: Python :: 2.4
Classifier: Programming Language :: Python :: 2.5
Classifier: Programming Language :: Python :: 2.6
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.0
Classifier: Programming Language :: C
Classifier: Operating System :: OS Independent
Classifier: Topic :: Text Processing :: Markup :: HTML
Classifier: Topic :: Text Processing :: Markup :: XML
Classifier: Topic :: Software Development :: Libraries :: Python Modules
