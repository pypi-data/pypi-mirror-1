.TH logilab-vm "1" "February 2009" logilab-vm
.SH NAME
.B logilab-vm
\- manage virtual machines
.SH SYNOPSIS
usage: <command> [OPTIONS]
.PP
examples:
.PP
logilab-vm-show --all 
.br
logilab-vm-start myvm
.br
logilab-vm-create --help
.br
logilab-vm-create --type=help
.SS "Commands:"
.TP
\fBlogilab\-vm\fR
Show the help message and exit
.TP
\fBlogilab\-vm\-show\fR
Show a list of existing VMs
.TP
\fBlogilab\-vm\-start\fR
Start one or more existing VMs
.TP
\fBlogilab\-vm\-stop\fR
Stop one or more existing VMs
.TP
\fBlogilab\-vm\-migrate\fR
Migrate an existing VM
.TP
\fBlogilab\-vm\-create\fR
Create a VM
.TP
\fBlogilab\-vm\-archives\fR
Show the archive list of an existing VM
.TP
\fBlogilab\-vm\-save\fR
Save an active VM (this shuts down the VM)
.TP
\fBlogilab\-vm\-restore\fR
Restore an inactive VM
.TP
\fBlogilab\-vm\-suspend\fR
Suspend an active VM
.TP
\fBlogilab\-vm\-resume\fR
Resume an active VM
.TP
\fBlogilab\-vm\-delete\fR
Delete an inactive VM
.SH CONFIGURATION
You can find the configuration into /etc/logilab-vm/settings.ini
.PP
You will find those sections:
.PP
[MAIN]
.PP
Common configuration as hooksdir, scriptsdir, archivesdir, etc.
.PP
[FUNCTIONALITY] (Hooks)
.PP
Hooks can replace any logilab-common behavior.
.br
For example, if you set a hook "hookqemu=myhook.sh" on the "SHOW" functionality for the hypervisor "qemu", the script "myhook.sh" will be called on each "logilab-vm-show" (for each Qemu/KVM VM) instead of the standard behavior.
.PP
[FUNCTIONALITY] (Scripts)
.PP
For certain functionalities (as I'm wrinting, only "CREATE"), scripts might be called when the functionality is called. The purpose of scripts is to get a more flexible software architecture so that you can set your own procedures to those complex functionalities. Here is the list and the description of scripts for each functionality concerned:
.PP
*CREATE*
.br
For each option the system calls a script. If everthing went fine, the libvirt domain (file that describes the content of the VM) that was created before is then processed by the libvirt manager.
.br
Any argument given to an option is also given to the related script as an environment variable and in the command line.
.br
For example (script is "myscript.sh"): "--sys name=mykvm,mem=128000,vcpu=1,myflag,myoption=value" results the following environment "NAME=kvm MEM=128000 VCPU=1 MYFLAG='' MYOPTION=value" while running "myscript.sh name=mykvm mem=128000 vcpu=1 myflag myoption=value".
.br
Here is the list of those scripts ordered by execution step:
.PP
<hypervisory>_pre     : called before anything else
.br
<hypervisory>_sys     : called on the sys option
.br
<hypervisory>_dev     : called on each dev option
.br
<hypervisory>_net     : called on each (possible) net option
.br
<hypervisory>_other   : called on the (possible) other option
.br
<hypervisory>_post    : called last. Even after libvirt processed the libvirt domain.
.br
<hypervisory>_failure : called if anything went wrong. For example, if on 2nd iteration of dev, the related script fails (2nd iteration means the second option --dev), the failure script is called with those arguments : <name of the VM> dev (name of the step) 2 (iteration: only for dev and net) <same arguments as given to the dev script> and with the same environment.
