AstroGrid-D Information Service
-------------------------------

See http://stellaris.zib.de for more documentation.

Installation
------------

Non-python dependencies:
Python >= 2.5
swig >= 1.3.31
openssl-devel >= 0.9.8b

1) Download and unpack stellaris
1.1) tar xzfv stellaris-<version>.tar.gz
1.2) cd stellaris-<version>

2) Install the stellaris package. This also downloads and installs 
   python dependencies. Binaries such as 'stellaris' ends up in the $prefix/bin
   directory. A prefix is defined using --prefix=<prefix>, default depends on
   where the python binary used to run setup.py is located.
2.1) python setup.py install

When running python setup.py install the following depencies will be installed:

"rdflib >= 2.4.0"
"simplejson >= 1.7"
"httplib2 >= 0.3.0"
"selector >= 0.8.11"
"kid >= 0.9.4"
"M2Crypto >= 0.17"

See the setup.py script for more details.

The installation is now complete.

Setup a stellaris instance
--------------------------

The stellaris environment contains the configuration files, static, templates 
and log-directory neccessary for running stellaris. This can be created by
running the stellaris command using the -s flag.

$prefix/bin/stellaris -s </path/to/environent directory>

The environment can also be created manually and this is described below. The
prefix for log, templates and static-files can also be configured in the
configuration script in the case of non-standard or system-wide instances.

1) mkdir <stellaris_path>
2) mkdir <stellaris_path>/logs
3) mkdir <stellaris_path>/etc
4) cp -r <stellaris_src>/templates <stellaris_path>
5) cp -r <stellaris_src>/static <stellaris_path>
6) cp <stellaris_src>/etc/stellaris.cfg <stellaris_path>/etc

Running without security
------------------------

1) %prefix/bin/stellaris
Usage: stellaris [options] <config file>

Options:
  -h, --help    show this help message and exit
  -d, --daemon  Runs the program in the background.

See etc/stellaris.cfg for a sample configuration-file.

Note that running without security is not recommended in a production
environment where the stellaris port is not firewalled since this allows
practically anyone to create/update/remove-data.

Running with security (user authorization)
-------------------------------

Starting with v. 0.1.0, stellaris support authorization of users using VOMRS,
a gridmap-file or just a plain text file with one X.509 user DN/line. The 
access limitation is only enforced on the create (HTTP PUT), update (HTTP POST)
and delete (HTTP DELETE)-operations.

In order to run stellaris with security enabled, two options are available. The
first and preferred option is to use the internal HTTPS server. This is turned
on by enabling security in the configuration file. In addition, the path to
the host-key and certificate must be configured. 

The other alternative is to use an HTTP-proxy supporting
SSL. Stellaris have been tested with nginx which supports X.509 
proxy certificates when it is compiled with OpenSSL >= 0.9.8a. Nginx 
can be retrieved from http://sysoev.ru/en/, use at least ver. 0.5.10. Apache
could also be an alternative, but has not yet been tested with stellaris.

The recommended setup when running stellaris behind an HTTP-reverse proxy is to 
start stellaris on a firewalled port and then configure the HTTP-server to 
forward HTTP requests to that port. A sample configuration-file for nginx is 
provided (etc/nginx.conf). Note that the requests from the proxy-server to 
stellaris are not protected, since SSL-session forwarding is not allowed.

Using In-Memory or Persistent storage
-------------------------------------

An In-Memory storage, stores the entire database in the systems memory. The 
main advantage of the in-memory is that it is faster then persistent storage,
but on the other hand, all data is lost when the system is shut-down.

The persistent storage is based on the Berkeley DB (Sleepycat) database. A 
Berkeley DB database stores all the data under a path in the file-system. 
Unlike database systems such as MySQL or Oracle, no prior installation is
necessary since the database is fully handled through the stellaris software. 

Different storage systems are configured by setting the 'backend'-attribute int
the [storage]-section of the used configuration-file. 

Updating an existing version
----------------------------

0.1.5 -> 0.1.6:

Build the 0.1.6 package
1) python setup.py build
2) Run the tests as described under the Testing section below
Install using your common prefix
3) python setup.py install

Update the 0.1.5 configuration file. From 0.1.6 the backend-attribute must be
defined as either rdflib-memory, rdflib-persistence or virtuoso. In addition,
the data_path-attribute must be defined since the lifetime-management depends
on a persistent storage. After config-file has been update, the service can
be restarted. 

Testing
-------

Unit tests are provided in the ./test directory.

Test the stellaris installation:
python test/testNativeStorage.py

Test the HTTP interface:

python test/testCherryPy.py

Test concurrency:

python test/testConcurrency.py

Example usage
-------------

In order to use the information service it is possible to use any HTTP-client 
program such as cURL, wget or a web-browser. Below are some examples using cURL,
a full description of the protocol is available in docs/PROTOCOL.

Upload and replace data:
curl --upload-file <path/to/file> http://<host>:<port>/context/<context name>

Retrieve data:
curl http://<host>:<port>/context/<context name>

Update existing data
curl -d @<path/to/file> http://<host>:<port>/context/<context name>?action=<action>
where <action> is either "add" for adding the triples in the file or "update" for 
updating the context using triples matching on the (subject, predicate).

Delete existing data
curl -X DELETE http://<host>:<port>/context/<context name>

Querying is easiest using the web-interface available at:
http://<host>:<port>/query/
