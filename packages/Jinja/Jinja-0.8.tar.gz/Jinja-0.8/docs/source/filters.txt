===========
Filter List
===========

This is a list of all shipped filters:

addslashes
==========
::

    {{ s|addslashes }}

Adds slashes to s.


autolink
========
::

    {{ s|autolink[ nofollow] }}

Automatically creates <a> tags for recognized links.
If nofollow is True autolink will add a rel=nofollow tag to the
url.


autolinktrunc
=============
::

    {{ s|autolink[ length[ nofollow]] }}

Same as autolink but truncate the url to a given character limit.


capitalize
==========
::

    {{ s|capitalize }}

Return a copy of the string s with only its first character
capitalized.


cleanup
=======
::

    {{ s|cleanup }}

Remove double whitespaces.


count
=====
::

    {{ var|count }}

Return the length of var. In case if getting an integer or float
it will convert it into a string an return the length of the new
string.
If the object doesn't provide a ``__len__`` function it will return
zero.


cut
===
::

    {{ s|cut char }}

Equivalent to ``{{ s|replace char '' }}``.


default
=======
::

    {{ s|default[ default_value] }}

In case of s isn't set or True default will return default_value
which is '' per default.


deletedouble
============
::

    {{ iterable|deletedouble }}

Remove double items in an iterable.


escapexml
=========
::

    {{ s|escapexml }}

XML escape &, <, and > in a string of data.

The default jinja stdlib creates an alias for this filter called ``e``.


filesizeformat
==============
::

    {{ i|filesizeformat }}

Format the value like a 'human-readable' file size (i.e. 13 KB, 4.1 MB,
102 bytes, etc).


format
======
::

    {{ s|format f }}

Apply python string format f on s. The leading "%" is left out.


indent
======
::

    {{ s|indent[ width[ indentfirst[ usetab]]] }}

Return a copy of s, each line indented by width spaces.
If usetab is True it the filter will use tabs for indenting.
If indentfirst is given it will also indent the first line.


join
====
::

    {{ sequence|join[ d] }}

Return a string which is the concatenation of the strings in the
sequence. The separator between elements is d which is an empty
string per default.


lower
=====
::

    {{ s|lower }}

Return a copy of s converted to lowercase.


markdown
========
::

    {{ s|markdown }}

Return a markdown parsed copy of s.

requires the Python-markdown library from
http://www.freewisdom.org/projects/python-markdown/


nl2br
=====
::

    {{ s|nl2br }}

Convert newlines into <br />s.


nl2pbr
======
::

    {{ s|nl2pbr }}

Convert newlines into <p> and <br />s.


regexreplace
============
::

    {{ s|regexreplace search replace }}

Perform a re.sub on s

Example::

    {{ s|regexreplace '\[b\](.*?)\[/b\](?i)' '<strong>\1</strong>' }}


replace
=======
::

    {{ s|replace old new[ count] }}

Return a copy of s with all occurrences of substring
old replaced by new. If the optional argument count is
given, only the first count occurrences are replaced.


reverse
=======
::

    {{ iterable|reverse }}

Return a reversed copy of a given iterable.


rst
===
::

    {{ s|rst }}

Return a reStructuredText parsed copy of s.

requires docutils from http://docutils.sourceforge.net/


slice
=====
::

    {{ iterable|slice start, end, step }}

Return a slice of an iterable.


sort
====
::

    {{ iterable|sort }}

Return a sorted copy of a given iterable.


strip
=====
::

    {{ s|strip[ tags] }}

Return a copy of s with leading and trailing whitespace removed.
If chars is given and not None, remove characters in chars instead.


striphtml
=========
::

    {{ s|striphtml }}

Return a plaintext version of s. (removes all html tags).


textile
=======
::

    {{ s|textile }}

Return a textfile parsed copy of s.

requires the PyTextile library available at
http://dealmeida.net/projects/textile/


title
=====
::

    {{ s|title }}

Return a titlecased version of s, i.e. words start with uppercase
characters, all remaining cased characters have lowercase.


truncate
========
::

    {{ s|truncate[ length[ killwords[ end]]] }}

Return a truncated copy of s. If killwords is True the filter
will cut the text at length and append end. Otherwise it will
try to save the last word and append end.


upper
=====
::

    {{ s|upper }}

Return a copy of s converted to uppercase.


urlencode
=========
::

    {{ s|urlencode[ plus] }}

Return the urlencoded value of s. For detailed informations have
a look at the help page of "urllib.quote"

If plus is set to 1 it will use the "urllib.quote_plus" method.


wordcount
=========
::

    {{ s|wordcount }}

Return the number of words.


wordwrap
========
::

    {{ s|wordwrap[ hard] }}

Return a copy of s, word get wrapped at pos, if hard is True
word might get split.

