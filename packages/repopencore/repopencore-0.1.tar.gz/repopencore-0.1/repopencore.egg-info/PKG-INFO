Metadata-Version: 1.0
Name: repopencore
Version: 0.1
Summary: run opencore with repoze.zope2
Home-page: UNKNOWN
Author: Ethan Jucovy
Author-email: ejucovy@gmail.com
License: GPL
Description: == What is it? ==
        
        The intent of this package is to provide a (mostly) automated setup
        for running OpenCore on the WSGI-compliant repoze.zope2 stack.
        
        This is still experimental; OpenCore is **not** guaranteed to run
        smoothly in this setup. Please report bugs unique to this setup at
        
        http://trac.openplans.org/openplans/newticket?component=repopencore
        
        This package is intended to be installed into an existing OpenCore
        build. It will not build OpenCore itself. Please read
        
        http://www.coactivate.org/projects/opencore/getting-started
        
        for OpenCore installation instructions.
        
        == How do I use it? ==
        
        1. Install this package into your OpenCore environment.
        
        2. Generate a configuration file for your deployment:
        
        `mkopencoreconfig 8080 zope/etc/zope.conf > opencore.ini`
        
        The first argument is the port to serve from; this
        does not need to be the same port that you serve
        your standard OpenCore setup from, and in fact the
        two setups can theoretically run in parallel.
        
        The second argument is the (absolute or relative) path
        to your Zope configuration file, usually found in
        {build_dir}/opencore/zope/etc/zope.conf
        
        3. Start the server:
        
        `run-opencore-wsgi zope/bin/zopectl opencore.ini`
        
        The first argument is the (absolute or relative) path to
        your `zopectl` executable, usually found in
        {build_dir}/opencore/zope/bin/zopectl
        
        The second argument is the path to the configuration file
        generated by `mkopencoreconfig`.
        
        Additional arguments like --reload or --daemon can be provided.
        They will be passed to the `paster serve` command executed
        here; run `paster serve --help` for available options.
        
        If you're ambitious you should be able to hook this into your
        Supervisor setup and/or a repeatable Fassembler build. I haven't
        tried either.
        
Platform: UNKNOWN
