<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:tal="http://xml.zope.org/namespaces/tal"
      xmlns:metal="http://xml.zope.org/namespaces/metal"
      xmlns:i18n="http://xml.zope.org/namespaces/i18n"
      i18n:domain="plone">
  <head><title></title></head>
  <body>

    <!-- Incremental Search Keyword Widgets -->

    <metal:view_macro define-macro="view">
      Muestra los conceptos en modo de visualizaci&oacute;n.<br />
    </metal:view_macro>

    <metal:define define-macro="edit">

<script language="JavaScript">
<!--
	var currentExpression = '';
	var currentSelectedIndex = '';

	function updateSearchExpression(input_id) {
		input_box = document.getElementById(input_id);
		currentExpression = input_box.value;
		currentSelectedIndex = input_box.getAttribute("selectedindex");
		document.getElementById(safe_name(input_id) + "_concepts").value = input_box.getAttribute("concepts");
		document.getElementById(input_id + "_autocompleteConceptsAction").value = currentExpression;
		document.getElementById(input_id + "_autocompleteConceptsAction").setAttribute("concepts", input_box.getAttribute("concepts"));
		document.getElementById(input_id + "_autocompleteConceptsAction").setAttribute("selectedindex", currentSelectedIndex);
		document.getElementById(input_id + "_chooseSelectedConceptAction").value = currentExpression;
		document.getElementById(input_id + "_chooseSelectedConceptAction").setAttribute("concepts", input_box.getAttribute("concepts"))
		document.getElementById(input_id + "_chooseSelectedConceptAction").setAttribute("selectedindex", currentSelectedIndex)
	}

	function keypressed(input_id, e) {
		if(window.event)
		  keynum = e.keyCode;
		else if(e.keyCode)
		  keynum = e.keyCode;
		else if(e.which)
		  keynum = e.which;
		keychar = String.fromCharCode(keynum);
		updateSearchExpression(input_id);
		if(keychar == ",") {
			raiseChooseSelectedConceptEvent(input_id);
			proceedAction = false;
		}
		else if(keynum == 38) { // Up arrow
			increment_selectedIndex(input_id, -1);
			proceedAction = false;
		}
		else if(keynum == 40) { // Down arrow
			increment_selectedIndex(input_id, +1);
			proceedAction = false;
		}
		else {
			proceedAction = true;
		}
		return proceedAction;
	}

	function increment_selectedIndex(input_id, count) {
		input_box = document.getElementById(input_id);
		selectedIndex = input_box.getAttribute("selectedindex");
		if(selectedIndex != "")
			selectedIndex = parseInt(selectedIndex) + count;
		else
			selectedIndex = "1";
		input_box.setAttribute("selectedindex", selectedIndex);
	}

	function timerIncrementalSearchSelect(input_id)
	{
		input_box = document.getElementById(input_id);
		if(input_box.value != currentExpression)
			input_box.setAttribute("selectedindex", "");
		if(input_box.value != currentExpression || input_box.getAttribute("selectedindex") != currentSelectedIndex) {		
			updateSearchExpression(input_id);
			raiseListConceptsEvent(input_id);
		}
		autocomplete(input_id);
		correct_selected_index(input_id);
		setTimeout("timerIncrementalSearchSelect('" + input_id + "')", 100);
	}

	function autocomplete(input_id) {
		input_box = document.getElementById(input_id);
		autocompleted_box = document.getElementById(safe_name(input_id) + "_autocompletedExpression");
		if(autocompleted_box.value != "") {
			input_box.value = autocompleted_box.value;
			autocompleted_box.value = "";
			updateSearchExpression(input_id);
		}
		if(autocompleted_box.getAttribute("concepts") != "") {
			input_box.setAttribute("concepts", autocompleted_box.getAttribute("concepts"));
			autocompleted_box.setAttribute("concepts", "");
		}
	}

	function correct_selected_index(input_id) {
		input_box = document.getElementById(input_id);
		selectedIndex_field = document.getElementById(safe_name(input_id) + "_selectedIndex");
		if(selectedIndex_field.value != "") {
			input_box.setAttribute("selectedindex", selectedIndex_field.value);
			selectedIndex_field.value = "";
			updateSearchExpression(input_id);
		}
	}

	function raiseListConceptsEvent(input_id) {
		actionField = document.getElementById(input_id + "_autocompleteConceptsAction");
		dispatchClickEvent(actionField);
	}

	function raiseChooseSelectedConceptEvent(input_id) {
		actionField = document.getElementById(input_id + "_chooseSelectedConceptAction");
		dispatchClickEvent(actionField);
	}
	
	function dispatchClickEvent(targetElement)
	{
		var event = document.createEvent("MouseEvents");
		event.initMouseEvent("click", true, true, window, 0, 0, 0, 0, 0, false, false, false, false, null, null);
		targetElement.dispatchEvent(event);
	}

	function safe_name(nombre) {
		return nombre.replace(".", "")
	}

	// not succesfull function:
	function setKukitStateVar(variable, valor) {
		oper = kukit.op.Oper.prototype.clone();
		dict = { 'parms' : { 'varname': variable, 'value': valor } };
		oper.unrestrictedUpdate(dict, false);
		kukit.ar.actionRegistry.get("setStateVar")(oper);
	}

	function getKukitStateVar(variable) {
		return kukit.statevars[variable];
	}

	function replace_debug(str) {
		document.getElementById("debug_text").value = str;
	}

//-->
</script>

		<tal:field-context tal:define="field_name python: field.getName();
										safe_name python: field_name.replace('.', '');
										terms_list python: field.getAccessor(here)();
										value python: field.widget.listToString(terms_list);
										concepts python: ','.join(field.widget.termsToConcepts(terms_list))">
<label tal:attributes="for string:${field_name};" i18n:translate="label_keywords">Keywords:</label><br>
			<input type="text" tal:attributes="name string:${field_name}; id string:${field_name}; value string:${value}; concepts string:${concepts}" autocomplete="off" selectedindex="" onfocus="timerIncrementalSearchSelect(this.id);" onkeypress="return keypressed(this.id, event)" size="100" class="incrementalSearchSelectInputBox">
			<input type="hidden" tal:attributes="name string:${safe_name}_autocompletedExpression; id string:${safe_name}_autocompletedExpression" value="" concepts="" selectedindex="">
			<input type="hidden" tal:attributes="name string:${safe_name}_concepts; id string:${safe_name}_concepts" value="">
			<input type="hidden" tal:attributes="name string:${safe_name}_selectedIndex; id string:${safe_name}_selectedIndex" value="">
			<input type="hidden" tal:attributes="name string:${field_name}_autocompleteConceptsAction; id string:${field_name}_autocompleteConceptsAction; widgetname string:${field_name}" class="incrementalSearchSelect" value="" concepts="">
			<input type="hidden" tal:attributes="name string:${field_name}_chooseSelectedConceptAction; id string:${field_name}_chooseSelectedConceptAction; widgetname string:${field_name}" class="chooseSelectedConcept" value="" concepts="">
			<div tal:attributes="id string:div_${safe_name}"></div>
<br>
		</tal:field-context>

    </metal:define>

  </body>

</html>
