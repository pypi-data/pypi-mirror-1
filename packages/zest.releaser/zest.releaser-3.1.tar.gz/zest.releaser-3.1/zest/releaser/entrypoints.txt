Entrypoints documentation
=========================

**Warning**: *entry points were added in 3.0, I'm reserving the right to make
backwards-incompatible changes to the entry point mechanism in the next couple
of releases.  It is a major new piece of functionality for zest.releaser and
getting all the details right at the first attempt isn't guaranteed.*

A zest.releaser entrypoint gets passed a dictionary and that's about it.  You
can do tasks like generating documentation.  Or downloading external files you
don't want to store in your repository but that you do want to have included
in your egg.

Every release step (prerelease, release and postrelease) has three points
where you can hook in an entry point:

before
    Only the ``workingdir`` and ``name`` are available in the data
    dictionary, nothing has happened yet.

middle
    All data dictionary items are available and some questions (like new
    version number) have been asked.  No filesystem changes have been made
    yet.

after
    The action has happened, everything has been written to disk or uploaded
    to pypi or whatever.


Entry point specification
-------------------------

An entry point is configured like this in your setup.py::

      entry_points={
          #'console_scripts': [
          #    'myscript = my.package.scripts:main'],
          'zest.releaser.prereleaser.middle': [
              'dosomething = my.package.some:some_entrypoint,
              ]},

Replace ``prereleaser`` and ``middle`` in ``zest.releaser.prereleaser.middle``
with prerelease/release/postrelease and before/middle/after where needed.


.. ### AUTOGENERATED FROM HERE ###

Prerelease data dict items
--------------------------

commit_msg
    Message template used when committing

history_file
    Filename of history/changelog file

history_header
    Header template used for 1st history header

history_lines
    List with all history file lines

name
    Name of the project being released

new_version
    New version (so 1.0 instead of 1.0dev)

original_version
    Version before prereleasing (e.g. 1.0dev)

today
    Date string used in history header

workingdir
    Original working directory

Release data dict items
-----------------------

name
    Name of the project being released

tag_already_exists
    Internal detail

tagdir
    Directory where the tag checkout is placed

version
    Version we're releasing

workingdir
    Original working directory

Postrelease data dict items
---------------------------

commit_msg
    Message template used when committing

dev_version
    New development version with dev marker (so 1.1dev)

dev_version_template
    Template for dev version number

history_header
    Header template used for 1st history header

name
    Name of the project being released

new_version
    New development version (so 1.1)

nothing_changed_yet
    First line in new changelog section

workingdir
    Original working directory
