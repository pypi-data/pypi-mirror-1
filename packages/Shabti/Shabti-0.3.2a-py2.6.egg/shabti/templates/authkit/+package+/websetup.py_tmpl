
from sqlalchemy import *
from {{package}}.model import *
import {{package}}.lib.helpers as h
from paste.deploy import appconfig

def setup_config(command, filename, section, vars):
    app_conf = appconfig('config:'+filename)
    fine = True
    
    # Most likely to go wrong so do first
    if app_conf['use_passurl'].lower() == 'true':
        try:
            import openid
        except ImportError:
            print "ERROR: Could not import the openid library"
            fine = False
        else:
            if not app_conf.get('passurl_store'):
                print "ERROR: No 'passurl_store' option specified"
                fine = False
            elif app_conf['passurl_store'] == "'file'":
                import sys
                if sys.platform == 'win32':
                    print "ERROR: The 'file' option for 'passurl_store' doesn't work on Windows"
                    fine = False
                elif app_conf['passurl_store'] == 'mysql':
                    if raw_input("Create the OpenID store? [Y/n]").lower() in ['y','']:
                    # Check Openid is installed
                    # Check the store type 
                    # If the store type is file check not on windows
                        try:
                            import MySQLdb
                            from DBUtils.PersistentDB import PersistentDB
                            from openid.store.sqlstore import MySQLStore
                            from sqlalchemy.engine.url import make_url
                            
                            def create_conn(dburi):
                                url = make_url(dburi)
                                p={'db':url.database}
                                if url.username:
                                    p['user'] = url.username
                                if url.password:
                                    p['passwd'] = url.password
                                if url.host:
                                    p['host'] = url.host
                                if url.port:
                                    p['port'] = url.port
                                return PersistentDB(MySQLdb, 1, **p).connection()
                                
                            conn = create_conn(CONFIG['app_conf']['passurl_config'])
                            cstore = MySQLStore(conn)
                            cstore.createTables()
                        except:
                            print "ERROR: Setting up the openid database failed"
                            import sys
                            print str(sys.exc_info()[1])
                            fine = False
                else:
                    print "ERROR: Unknown option |%r| for 'passurl_store'"%app_conf['passurl_store']
                    fine = False
    if raw_input("Create the main user store? [Y/n]").lower() in ['y','']:
        try:
            print "Connecting to DSN %s..."%repr(app_conf['sqlalchemy.dburi'])
            conn = meta.connect(app_conf['sqlalchemy.dburi'])
            
            print "Creating tables"
            meta.create_all()
            session = create_session()
            
            print "Adding data..."
            g = Group('Everyone')
            session.save(g)
            r = Role('Role')
            session.save(r)
            a = App('Admin')
            session.save(a)
            session.flush()
            u = User(username='admin', password='pylons', email='admin@example.com', active=True)
            e = Email()
            e.email=u.email
            e.verified=now()
            session.save(e)
            u.emails.append(e)
            
            session.save(u)
            session.flush()
        except:
            print "ERROR: Setting up the account database failed"
            import sys
            print str(sys.exc_info()[1])
            fine = False
    if fine:
        print "Successfully setup. You can now run `paster serve' and sign in"
        print "with username `admin' and password `pylons'."
    else:
        print "Setup failed."
    # Place any other commands to setup {{package}} here.

