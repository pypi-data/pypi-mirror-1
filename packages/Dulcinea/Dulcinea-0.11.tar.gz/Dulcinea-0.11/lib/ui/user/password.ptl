"""$URL: svn+ssh://svn.mems-exchange.org/repos/trunk/dulcinea/lib/ui/user/password.ptl $
$Id: password.ptl 27291 2005-09-02 22:29:04Z rmasse $
"""

from quixote import redirect, get_request, get_user
from quixote.form import Form
from quixote.form.widget import CompositeWidget, PasswordWidget, StringWidget
from quixote.html import href
from dulcinea import local, local_ui
from dulcinea.site_util import get_base_path
from dulcinea.sendmail import sendmail
from dulcinea.ui.util import get_site_url, item_list, feedback_link, page

class NewPasswordWidget(CompositeWidget):

    def __init__(self, name, value=None, validation_function=None,
                 size=None, **kwargs):
        CompositeWidget.__init__(self, name, value=None, **kwargs)
        self.add(PasswordWidget, 'first', value, size=size)
        self.add(PasswordWidget, 'second', value, size=size)
        self.validation_function = validation_function

    def _parse(self, request):
        first = self.get('first')
        second = self.get('second')
        if first != second:
            self.set_error("The two password fields didn't match.")
        else:
            self.value = first
            if None not in (self.value, self.validation_function):
                error = self.validation_function(self.value)
                if error:
                    self.set_error(error)


class ValidPasswordWidget(PasswordWidget):

    def __init__(self, name, validation_function=None, **kwargs):
        PasswordWidget.__init__(self, name, **kwargs)
        self.validation_function = validation_function

    def _parse(self, request):
        PasswordWidget._parse(self, request)
        if None not in (self.value, self.validation_function):
            error = self.validation_function(self.value)
            if error:
                self.set_error(error)


def change_user_password_form [html] (user):
    def validation(password):
        if get_user().valid_password(password):
            return None
        else:
            return 'Wrong password.'
    form = Form()
    form.add(ValidPasswordWidget, 'your_password',
             title='Your password', size=15,
             validation_function=validation,
             required=1)
    form.add(NewPasswordWidget, 'password', title='New password', size=15,
             validation_function=user.check_new_password,
             hint='Make up a password or leave blank to disable user.')
    form.add_submit('change', 'Change password')
    form.add_submit('cancel', 'Cancel')
    if form.get('cancel'):
        return redirect('.')
    if not form.is_submitted() or form.has_errors():
        return page('Change Password: %s' % user.format_realname(),
                    form.render())
    password = form['password']
    if password:
        user.set_password(password)
    else:
        user.password_hash = None
    remote_addr = get_request().get_environ("REMOTE_ADDR")
    user.record_change(user, remote_addr, password=1)
    return page(
        'Password Changed: %s' % user.format_realname(),
        'The password for "%s" has been changed.' % user.format_realname(),
        '<ul><li>',
        href('.', 'View profile for %s' % user.format_realname()),
        '</li></ul>')


def change_password_form [html] ():
    user = get_user()
    def validation(password):
        if user.valid_password(password):
            return None
        else:
            return 'Wrong password.'
    form = Form()
    form.add(ValidPasswordWidget, 'current_password',
             title='Current password', size=15,
             validation_function=validation,
             required=1)
    form.add(NewPasswordWidget, 'password', title='New password', size=15,
             validation_function=user.check_new_password,
             required=1)
    form.add_submit('change', 'Change password')
    form.add_submit('cancel', 'Cancel')

    if form.get('cancel'):
        return redirect('.')

    if not form.is_submitted() or form.has_errors():
        return page('Change Password: %s' % user, form.render())

    user.set_password(form.get('password'))
    remote_addr = get_request().get_environ("REMOTE_ADDR")
    user.record_change(user, remote_addr, password=1)
    return page(
        'Password Changed: %s' % user.format_realname(),
        'The password for "%s" has been changed.' % user.format_realname(),
        '<ul><li>',
        href('.', 'View profile for %s' % user.format_realname()),
        '</li></ul>')


def new_password_form [html] (user=None):
    form = Form()
    if not user:
        form.add(StringWidget, 'user_id',
                 title='User ID',
                 size=20, maxlength=32)
    form.add_submit('send', value='Send password')
    form.add_submit('cancel', value='Cancel')
    if form['cancel']:
        return redirect('..')

    if user:
        def render [html] ():
            title = 'New password: %s' % user.get_id()
            local_ui.header(title)
            local_ui.format_user_profile(user)
            '''
            <p>
            Click "Send password" to email %s a new password to the
            address listed in the the profile.
            </p>
            ''' % user.format()
            form.render()
            local_ui.footer(title)

        def notification [plain] ():
            site_url = get_site_url()
            'Your password has been set at the %s.\n\n' % local.SITE_NAME
            'Your user ID is:  %s\n' % user.get_id()
            'Your password is: %s\n\n' % user.generate_password()
            'Please visit %suser/login to login, ' % site_url
            'and %suser/change_password to change your password.\n\n' % site_url
            'Other information associated with your account:\n'
            '   real name:     %s\n' % user.format_realname()
            '   email address: %s\n' % user.get_email()
            '   phone number:  %s\n\n' % user.get_phone() or "(unknown)"
            'You can visit %suser/edit to update this information.\n' % site_url
        cc_addrs = [get_user().get_email()]

        def confirm [html] ():
            title = 'New Password Confirmation'
            local_ui.header(title)
            '<p>A new password has been sent to %s.</p>' % user.get_id()
            local_ui.footer(title)

    else:
        def render [html] ():
            title = 'Forgot Your Password?'
            local_ui.header(title)
            '''
            <p>
            Just enter your %s user ID below, and we\'ll email a new
            password to the address you supplied when you registered with
            the %s.
            </p>

            <p>
            If you can\'t remember what your user ID is, please %s.
            </p>
            ''' % (local.SITE_NAME,
                   local.SITE_NAME,
                   feedback_link(['webmaster'],
                                 'Forgotten user ID',
                                 'contact us directly'))
            form.render()
            local_ui.footer(title)

        def notification [plain] ():
            'A new password has been requested for your account at '
            'the %s (%s).\n\n' % (local.SITE_NAME, get_request().get_url())
            'Your new password is: %s\n' % user.generate_password()
            'Remember, passwords are case-sensitive.\n\n'
            ' - %s staff\n' % local.SITE_NAME

        cc_addrs = None

        def confirm [html] ():
            title = 'New Password Confirmation'
            local_ui.header(title)
            '<p>Your new password has been sent to you.</p>'
            item_list((get_base_path() + '/user/login', 'Sign In'))
            local_ui.footer(title)

    if not form.is_submitted():
        return render()

    if not user:
        user_db = local.get_user_db()
        user = user_db.get_user(form.get('user_id'))
        if not user:
            form.set_error('user_id', 'Invalid user ID')
            return render()

    email = user.get_email()
    if not email:
        form.set_error('send', 'No email address supplied')

    if form.has_errors():
        return render()

    sendmail('New %s Password' % local.SITE_NAME,
             notification(),
             [email],
             cc_addrs=cc_addrs)
    remote_addr = get_request().get_environ("REMOTE_ADDR")
    user.record_change(user, remote_addr, password=1)
    return confirm()
