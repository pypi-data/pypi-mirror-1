/**************************************************************************
*   Copyright (C) 2008-2008 by Franz Blaim, Oliver Borm                   *
*   franz.blaim@gmx.de, oli.borm@web.de                                   *
*                                                                         *
*   This program is free software; you can redistribute it and/or modify  *
*   it under the terms of the GNU General Public License as published by  *
*   the Free Software Foundation; either version 3 of the License, or     *
*   (at your option) any later version.                                   *
*                                                                         *
*   This program is distributed in the hope that it will be useful,       *
*   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
*   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
*   GNU General Public License for more details.                          *
*                                                                         *
*   You should have received a copy of the GNU General Public License     *
*   along with this program; if not, write to the                         *
*   Free Software Foundation, Inc.,                                       *
*   59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             *
***************************************************************************/

/** Author: Franz Blaim, Oliver Borm
 Date: February 2008
*/

// This file has been generated by Py++.

#include <boost/python.hpp>

#include "__array_1.pypp.hpp"

#include <nurbs++/vector.h>

namespace bp = boost::python;

struct MatrixErr_wrapper : PLib::MatrixErr, bp::wrapper< PLib::MatrixErr > {

    MatrixErr_wrapper(PLib::MatrixErr const & arg )
    : PLib::MatrixErr( arg )
      , bp::wrapper< PLib::MatrixErr >(){
        // copy constructor
        
    }

    MatrixErr_wrapper( )
    : PLib::MatrixErr( )
      , bp::wrapper< PLib::MatrixErr >(){
        // null constructor
    
    }

    virtual void print(  ) {
        if( bp::override func_print = this->get_override( "print" ) )
            func_print(  );
        else
            this->PLib::MatrixErr::print(  );
    }
    
    
    void default_print(  ) {
        PLib::MatrixErr::print( );
    }

};

struct MatrixInputError_wrapper : PLib::MatrixInputError, bp::wrapper< PLib::MatrixInputError > {

    MatrixInputError_wrapper(PLib::MatrixInputError const & arg )
    : PLib::MatrixInputError( arg )
      , bp::wrapper< PLib::MatrixInputError >(){
        // copy constructor
        
    }

    MatrixInputError_wrapper( )
    : PLib::MatrixInputError( )
      , bp::wrapper< PLib::MatrixInputError >(){
        // null constructor
    
    }

    virtual void print(  ) {
        if( bp::override func_print = this->get_override( "print" ) )
            func_print(  );
        else
            this->PLib::MatrixInputError::print(  );
    }
    
    
    void default_print(  ) {
        PLib::MatrixInputError::print( );
    }

};

struct OutOfBound_wrapper : PLib::OutOfBound, bp::wrapper< PLib::OutOfBound > {

    OutOfBound_wrapper(PLib::OutOfBound const & arg )
    : PLib::OutOfBound( arg )
      , bp::wrapper< PLib::OutOfBound >(){
        // copy constructor
        
    }

    OutOfBound_wrapper(int index, int from, int to )
    : PLib::OutOfBound( index, from, to )
      , bp::wrapper< PLib::OutOfBound >(){
        // constructor
    
    }

    virtual void print(  ) {
        if( bp::override func_print = this->get_override( "print" ) )
            func_print(  );
        else
            this->PLib::OutOfBound::print(  );
    }
    
    
    void default_print(  ) {
        PLib::OutOfBound::print( );
    }

};

struct OutOfBound2D_wrapper : PLib::OutOfBound2D, bp::wrapper< PLib::OutOfBound2D > {

    OutOfBound2D_wrapper(PLib::OutOfBound2D const & arg )
    : PLib::OutOfBound2D( arg )
      , bp::wrapper< PLib::OutOfBound2D >(){
        // copy constructor
        
    }

    OutOfBound2D_wrapper(int I, int J, int fI, int tI, int fJ, int tJ )
    : PLib::OutOfBound2D( I, J, fI, tI, fJ, tJ )
      , bp::wrapper< PLib::OutOfBound2D >(){
        // constructor
    
    }

    virtual void print(  ) {
        if( bp::override func_print = this->get_override( "print" ) )
            func_print(  );
        else
            this->PLib::OutOfBound2D::print(  );
    }
    
    
    void default_print(  ) {
        PLib::OutOfBound2D::print( );
    }

};

struct Point_nD_less__double_comma__2__grate__wrapper : PLib::Point_nD< double, 2 >, bp::wrapper< PLib::Point_nD< double, 2 > > {

    Point_nD_less__double_comma__2__grate__wrapper( )
    : PLib::Point_nD<double, 2>( )
      , bp::wrapper< PLib::Point_nD< double, 2 > >(){
        // null constructor
    
    }

    Point_nD_less__double_comma__2__grate__wrapper(double a )
    : PLib::Point_nD<double, 2>( a )
      , bp::wrapper< PLib::Point_nD< double, 2 > >(){
        // constructor
    
    }

    Point_nD_less__double_comma__2__grate__wrapper(double X, double Y )
    : PLib::Point_nD<double, 2>( X, Y )
      , bp::wrapper< PLib::Point_nD< double, 2 > >(){
        // constructor
    
    }

    Point_nD_less__double_comma__2__grate__wrapper(::PLib::Point_nD< double, 2 > const & a )
    : PLib::Point_nD<double, 2>( boost::ref(a) )
      , bp::wrapper< PLib::Point_nD< double, 2 > >(){
        // copy constructor
    
    }

    static pyplusplus::containers::static_sized::array_1_t< double, 2>
    pyplusplus_data_wrapper( ::PLib::Point_nD<double, 2> & inst ){
        return pyplusplus::containers::static_sized::array_1_t< double, 2>( inst.data );
    }

};

struct Point_nD_less__double_comma__3__grate__wrapper : PLib::Point_nD< double, 3 >, bp::wrapper< PLib::Point_nD< double, 3 > > {

    Point_nD_less__double_comma__3__grate__wrapper( )
    : PLib::Point_nD<double, 3>( )
      , bp::wrapper< PLib::Point_nD< double, 3 > >(){
        // null constructor
    
    }

    Point_nD_less__double_comma__3__grate__wrapper(double a )
    : PLib::Point_nD<double, 3>( a )
      , bp::wrapper< PLib::Point_nD< double, 3 > >(){
        // constructor
    
    }

    Point_nD_less__double_comma__3__grate__wrapper(double X, double Y, double Z )
    : PLib::Point_nD<double, 3>( X, Y, Z )
      , bp::wrapper< PLib::Point_nD< double, 3 > >(){
        // constructor
    
    }

    Point_nD_less__double_comma__3__grate__wrapper(::PLib::Point_nD< double, 3 > const & a )
    : PLib::Point_nD<double, 3>( boost::ref(a) )
      , bp::wrapper< PLib::Point_nD< double, 3 > >(){
        // copy constructor
    
    }

    static pyplusplus::containers::static_sized::array_1_t< double, 3>
    pyplusplus_data_wrapper( ::PLib::Point_nD<double, 3> & inst ){
        return pyplusplus::containers::static_sized::array_1_t< double, 3>( inst.data );
    }

};

// struct Point_nD_less__float_comma__2__grate__wrapper : PLib::Point_nD< float, 2 >, bp::wrapper< PLib::Point_nD< float, 2 > > {
// 
//     Point_nD_less__float_comma__2__grate__wrapper( )
//     : PLib::Point_nD<float, 2>( )
//       , bp::wrapper< PLib::Point_nD< float, 2 > >(){
//         // null constructor
//     
//     }
// 
//     Point_nD_less__float_comma__2__grate__wrapper(float a )
//     : PLib::Point_nD<float, 2>( a )
//       , bp::wrapper< PLib::Point_nD< float, 2 > >(){
//         // constructor
//     
//     }
// 
//     Point_nD_less__float_comma__2__grate__wrapper(float X, float Y )
//     : PLib::Point_nD<float, 2>( X, Y )
//       , bp::wrapper< PLib::Point_nD< float, 2 > >(){
//         // constructor
//     
//     }
// 
//     Point_nD_less__float_comma__2__grate__wrapper(::PLib::Point_nD< float, 2 > const & a )
//     : PLib::Point_nD<float, 2>( boost::ref(a) )
//       , bp::wrapper< PLib::Point_nD< float, 2 > >(){
//         // copy constructor
//     
//     }
// 
//     static pyplusplus::containers::static_sized::array_1_t< float, 2>
//     pyplusplus_data_wrapper( ::PLib::Point_nD<float, 2> & inst ){
//         return pyplusplus::containers::static_sized::array_1_t< float, 2>( inst.data );
//     }
// 
// };
// 
// struct Point_nD_less__float_comma__3__grate__wrapper : PLib::Point_nD< float, 3 >, bp::wrapper< PLib::Point_nD< float, 3 > > {
// 
//     Point_nD_less__float_comma__3__grate__wrapper( )
//     : PLib::Point_nD<float, 3>( )
//       , bp::wrapper< PLib::Point_nD< float, 3 > >(){
//         // null constructor
//     
//     }
// 
//     Point_nD_less__float_comma__3__grate__wrapper(float a )
//     : PLib::Point_nD<float, 3>( a )
//       , bp::wrapper< PLib::Point_nD< float, 3 > >(){
//         // constructor
//     
//     }
// 
//     Point_nD_less__float_comma__3__grate__wrapper(float X, float Y, float Z )
//     : PLib::Point_nD<float, 3>( X, Y, Z )
//       , bp::wrapper< PLib::Point_nD< float, 3 > >(){
//         // constructor
//     
//     }
// 
//     Point_nD_less__float_comma__3__grate__wrapper(::PLib::Point_nD< float, 3 > const & a )
//     : PLib::Point_nD<float, 3>( boost::ref(a) )
//       , bp::wrapper< PLib::Point_nD< float, 3 > >(){
//         // copy constructor
//     
//     }
// 
//     static pyplusplus::containers::static_sized::array_1_t< float, 3>
//     pyplusplus_data_wrapper( ::PLib::Point_nD<float, 3> & inst ){
//         return pyplusplus::containers::static_sized::array_1_t< float, 3>( inst.data );
//     }
// 
// };

struct WrongSize_wrapper : PLib::WrongSize, bp::wrapper< PLib::WrongSize > {

    WrongSize_wrapper(PLib::WrongSize const & arg )
    : PLib::WrongSize( arg )
      , bp::wrapper< PLib::WrongSize >(){
        // copy constructor
        
    }

    WrongSize_wrapper(int a, int b )
    : PLib::WrongSize( a, b )
      , bp::wrapper< PLib::WrongSize >(){
        // constructor
    
    }

    virtual void print(  ) {
        if( bp::override func_print = this->get_override( "print" ) )
            func_print(  );
        else
            this->PLib::WrongSize::print(  );
    }
    
    
    void default_print(  ) {
        PLib::WrongSize::print( );
    }

};

struct WrongSize2D_wrapper : PLib::WrongSize2D, bp::wrapper< PLib::WrongSize2D > {

    WrongSize2D_wrapper(PLib::WrongSize2D const & arg )
    : PLib::WrongSize2D( arg )
      , bp::wrapper< PLib::WrongSize2D >(){
        // copy constructor
        
    }

    WrongSize2D_wrapper(int r, int c, int br, int bc )
    : PLib::WrongSize2D( r, c, br, bc )
      , bp::wrapper< PLib::WrongSize2D >(){
        // constructor
    
    }

    virtual void print(  ) {
        if( bp::override func_print = this->get_override( "print" ) )
            func_print(  );
        else
            this->PLib::WrongSize2D::print(  );
    }
    
    
    void default_print(  ) {
        PLib::WrongSize2D::print( );
    }

};

BOOST_PYTHON_MODULE(NurbsHPointD){
    bp::class_< PLib::Error, boost::noncopyable >( "Error" )    
        .def( bp::init< >() )    
        .def( bp::init< char const * >(( bp::arg("s") )) )    
        .def( 
            "fatal"
            , &::PLib::Error::fatal
            , ( bp::arg("arg0")=bp::object() ) )    
        .def( 
            "memory"
            , &::PLib::Error::memory
            , ( bp::arg("arg0")=bp::object() ) )    
        .def( 
            "nonfatal"
            , &::PLib::Error::nonfatal
            , ( bp::arg("msg")=bp::object() ) )    
        .def( 
            "warning"
            , &::PLib::Error::warning
            , ( bp::arg("msg")=bp::object() ) );

    bp::implicitly_convertible< char const *, PLib::Error >();

    { //::PLib::HPoint_nD< double, 2 >
        typedef bp::class_< PLib::HPoint_nD< double, 2 > > HPoint2Dd_exposer_t;
        HPoint2Dd_exposer_t HPoint2Dd_exposer = HPoint2Dd_exposer_t( "HPoint2Dd" );
        bp::scope HPoint2Dd_scope( HPoint2Dd_exposer );
        HPoint2Dd_exposer.def( bp::init< >() );
        HPoint2Dd_exposer.def( bp::init< double *, int >(( bp::arg("d"), bp::arg("c") )) );
        HPoint2Dd_exposer.def( bp::init< double >(( bp::arg("a") )) );
        HPoint2Dd_exposer.def( bp::init< double, double, double >(( bp::arg("X"), bp::arg("Y"), bp::arg("W") )) );
        HPoint2Dd_exposer.def( bp::init< double, double, double, double >(( bp::arg("X"), bp::arg("Y"), bp::arg("Z"), bp::arg("W") )) );
        HPoint2Dd_exposer.def( bp::init< PLib::HPoint_nD< double, 2 > const & >(( bp::arg("a") )) );
        HPoint2Dd_exposer.def( bp::init< PLib::Point_nD< double, 2 > const & >(( bp::arg("a") )) );
        { //::PLib::HPoint_nD< double, 2 >::move
        
            typedef PLib::HPoint_nD< double, 2 > exported_class_t;
            typedef void ( exported_class_t::*move_function_type )( ::PLib::Point_nD< double, 2 > const & ) ;
            
            HPoint2Dd_exposer.def( 
                "move"
                , move_function_type( &::PLib::HPoint_nD< double, 2 >::move )
                , ( bp::arg("m") ) );
        
        }
        HPoint2Dd_exposer.def( bp::self *= bp::other< double >() );
        HPoint2Dd_exposer.def( bp::self += bp::self );
        HPoint2Dd_exposer.def( bp::self -= bp::self );
        HPoint2Dd_exposer.def( bp::self /= bp::other< double >() );
        { //::PLib::HPoint_nD< double, 2 >::operator=
        
            typedef PLib::HPoint_nD< double, 2 > exported_class_t;
            typedef ::PLib::HPoint_nD< double, 2 > & ( exported_class_t::*assign_function_type )( ::PLib::HPoint_nD< double, 2 > const & ) ;
            
            HPoint2Dd_exposer.def( 
                "assign"
                , assign_function_type( &::PLib::HPoint_nD< double, 2 >::operator= )
                , ( bp::arg("v") )
                , bp::return_self< >() );
        
        }
        { //::PLib::HPoint_nD< double, 2 >::operator=
        
            typedef PLib::HPoint_nD< double, 2 > exported_class_t;
            typedef ::PLib::HPoint_nD< double, 2 > & ( exported_class_t::*assign_function_type )( ::PLib::Point_nD< double, 2 > const & ) ;
            
            HPoint2Dd_exposer.def( 
                "assign"
                , assign_function_type( &::PLib::HPoint_nD< double, 2 >::operator= )
                , ( bp::arg("v") )
                , bp::return_self< >() );
        
        }
        { //::PLib::HPoint_nD< double, 2 >::operator=
        
            typedef PLib::HPoint_nD< double, 2 > exported_class_t;
            typedef ::PLib::HPoint_nD< double, 2 > & ( exported_class_t::*assign_function_type )( double const ) ;
            
            HPoint2Dd_exposer.def( 
                "assign"
                , assign_function_type( &::PLib::HPoint_nD< double, 2 >::operator= )
                , ( bp::arg("v") )
                , bp::return_self< >() );
        
        }
        { //::PLib::HPoint_nD< double, 2 >::projectW
        
            typedef PLib::HPoint_nD< double, 2 > exported_class_t;
            typedef ::PLib::Point_nD< double, 2 > ( exported_class_t::*projectW_function_type )(  ) ;
            
            HPoint2Dd_exposer.def( 
                "projectW"
                , projectW_function_type( &::PLib::HPoint_nD< double, 2 >::projectW ) );
        
        }
      
        { //::PLib::HPoint_nD< double, 2 >::w
        
            typedef PLib::HPoint_nD< double, 2 > exported_class_t;
            typedef double ( exported_class_t::*w_function_type )(  ) const;
            
            HPoint2Dd_exposer.def( 
                "w"
                , w_function_type( &::PLib::HPoint_nD< double, 2 >::w ) );
        
        }
 
        { //::PLib::HPoint_nD< double, 2 >::x
        
            typedef PLib::HPoint_nD< double, 2 > exported_class_t;
            typedef double ( exported_class_t::*x_function_type )(  ) const;
            
            HPoint2Dd_exposer.def( 
                "x"
                , x_function_type( &::PLib::HPoint_nD< double, 2 >::x ) );
        
        }
        { //::PLib::HPoint_nD< double, 2 >::y
        
            typedef PLib::HPoint_nD< double, 2 > exported_class_t;
            typedef double ( exported_class_t::*y_function_type )(  ) const;
            
            HPoint2Dd_exposer.def( 
                "y"
                , y_function_type( &::PLib::HPoint_nD< double, 2 >::y ) );
        
        }
        { //::PLib::HPoint_nD< double, 2 >::z
        
            typedef PLib::HPoint_nD< double, 2 > exported_class_t;
            typedef double ( exported_class_t::*z_function_type )(  ) const;
            
            HPoint2Dd_exposer.def( 
                "z"
                , z_function_type( &::PLib::HPoint_nD< double, 2 >::z ) );
        
        }
        HPoint2Dd_exposer.def_readwrite( "created", &PLib::HPoint_nD< double, 2 >::created );
    }

    bp::implicitly_convertible< double, PLib::HPoint_nD< double, 2 > >();

    bp::implicitly_convertible< PLib::Point_nD< double, 2 > const &, PLib::HPoint_nD< double, 2 > >();

    { //::PLib::HPoint_nD< double, 3 >
        typedef bp::class_< PLib::HPoint_nD< double, 3 > > HPoint3Dd_exposer_t;
        HPoint3Dd_exposer_t HPoint3Dd_exposer = HPoint3Dd_exposer_t( "HPoint3Dd" );
        bp::scope HPoint3Dd_scope( HPoint3Dd_exposer );
        HPoint3Dd_exposer.def( bp::init< >() );
        HPoint3Dd_exposer.def( bp::init< double *, int >(( bp::arg("d"), bp::arg("c") )) );
        HPoint3Dd_exposer.def( bp::init< double >(( bp::arg("a") )) );
        HPoint3Dd_exposer.def( bp::init< double, double, double, double >(( bp::arg("X"), bp::arg("Y"), bp::arg("Z"), bp::arg("W") )) );
        HPoint3Dd_exposer.def( bp::init< PLib::HPoint_nD< double, 3 > const & >(( bp::arg("a") )) );
        HPoint3Dd_exposer.def( bp::init< PLib::Point_nD< double, 3 > const & >(( bp::arg("a") )) );
        { //::PLib::HPoint_nD< double, 3 >::move
        
            typedef PLib::HPoint_nD< double, 3 > exported_class_t;
            typedef void ( exported_class_t::*move_function_type )( ::PLib::Point_nD< double, 3 > const & ) ;
            
            HPoint3Dd_exposer.def( 
                "move"
                , move_function_type( &::PLib::HPoint_nD< double, 3 >::move )
                , ( bp::arg("m") ) );
        
        }
        HPoint3Dd_exposer.def( bp::self *= bp::other< double >() );
        HPoint3Dd_exposer.def( bp::self += bp::self );
        HPoint3Dd_exposer.def( bp::self -= bp::self );
        HPoint3Dd_exposer.def( bp::self /= bp::other< double >() );
        { //::PLib::HPoint_nD< double, 3 >::operator=
        
            typedef PLib::HPoint_nD< double, 3 > exported_class_t;
            typedef ::PLib::HPoint_nD< double, 3 > & ( exported_class_t::*assign_function_type )( ::PLib::HPoint_nD< double, 3 > const & ) ;
            
            HPoint3Dd_exposer.def( 
                "assign"
                , assign_function_type( &::PLib::HPoint_nD< double, 3 >::operator= )
                , ( bp::arg("v") )
                , bp::return_self< >() );
        
        }
        { //::PLib::HPoint_nD< double, 3 >::operator=
        
            typedef PLib::HPoint_nD< double, 3 > exported_class_t;
            typedef ::PLib::HPoint_nD< double, 3 > & ( exported_class_t::*assign_function_type )( ::PLib::Point_nD< double, 3 > const & ) ;
            
            HPoint3Dd_exposer.def( 
                "assign"
                , assign_function_type( &::PLib::HPoint_nD< double, 3 >::operator= )
                , ( bp::arg("v") )
                , bp::return_self< >() );
        
        }
        { //::PLib::HPoint_nD< double, 3 >::operator=
        
            typedef PLib::HPoint_nD< double, 3 > exported_class_t;
            typedef ::PLib::HPoint_nD< double, 3 > & ( exported_class_t::*assign_function_type )( double const ) ;
            
            HPoint3Dd_exposer.def( 
                "assign"
                , assign_function_type( &::PLib::HPoint_nD< double, 3 >::operator= )
                , ( bp::arg("v") )
                , bp::return_self< >() );
        
        }
        { //::PLib::HPoint_nD< double, 3 >::projectW
        
            typedef PLib::HPoint_nD< double, 3 > exported_class_t;
            typedef ::PLib::Point_nD< double, 3 > ( exported_class_t::*projectW_function_type )(  ) ;
            
            HPoint3Dd_exposer.def( 
                "projectW"
                , projectW_function_type( &::PLib::HPoint_nD< double, 3 >::projectW ) );
        
        }
        { //::PLib::HPoint_nD< double, 3 >::w
        
            typedef PLib::HPoint_nD< double, 3 > exported_class_t;
            typedef double ( exported_class_t::*w_function_type )(  ) const;
            
            HPoint3Dd_exposer.def( 
                "w"
                , w_function_type( &::PLib::HPoint_nD< double, 3 >::w ) );
        
        }
        { //::PLib::HPoint_nD< double, 3 >::x
        
            typedef PLib::HPoint_nD< double, 3 > exported_class_t;
            typedef double ( exported_class_t::*x_function_type )(  ) const;
            
            HPoint3Dd_exposer.def( 
                "x"
                , x_function_type( &::PLib::HPoint_nD< double, 3 >::x ) );
        
        }
        { //::PLib::HPoint_nD< double, 3 >::y
        
            typedef PLib::HPoint_nD< double, 3 > exported_class_t;
            typedef double ( exported_class_t::*y_function_type )(  ) const;
            
            HPoint3Dd_exposer.def( 
                "y"
                , y_function_type( &::PLib::HPoint_nD< double, 3 >::y ) );
        
        }
        { //::PLib::HPoint_nD< double, 3 >::z
        
            typedef PLib::HPoint_nD< double, 3 > exported_class_t;
            typedef double ( exported_class_t::*z_function_type )(  ) const;
            
            HPoint3Dd_exposer.def( 
                "z"
                , z_function_type( &::PLib::HPoint_nD< double, 3 >::z ) );
        
        }
        HPoint3Dd_exposer.def_readwrite( "created", &PLib::HPoint_nD< double, 3 >::created );
    }

    bp::implicitly_convertible< double, PLib::HPoint_nD< double, 3 > >();

    bp::implicitly_convertible< PLib::Point_nD< double, 3 > const &, PLib::HPoint_nD< double, 3 > >();

/*    { //::PLib::HPoint_nD< float, 2 >
        typedef bp::class_< PLib::HPoint_nD< float, 2 > > HPoint_nD_less__float_comma__2__grate__exposer_t;
        HPoint_nD_less__float_comma__2__grate__exposer_t HPoint_nD_less__float_comma__2__grate__exposer = HPoint_nD_less__float_comma__2__grate__exposer_t( "HPoint_nD_less__float_comma__2__grate_" );
        bp::scope HPoint_nD_less__float_comma__2__grate__scope( HPoint_nD_less__float_comma__2__grate__exposer );
        HPoint_nD_less__float_comma__2__grate__exposer.def( bp::init< >() );
        HPoint_nD_less__float_comma__2__grate__exposer.def( bp::init< float *, int >(( bp::arg("d"), bp::arg("c") )) );
        HPoint_nD_less__float_comma__2__grate__exposer.def( bp::init< float >(( bp::arg("a") )) );
        HPoint_nD_less__float_comma__2__grate__exposer.def( bp::init< float, float, float >(( bp::arg("X"), bp::arg("Y"), bp::arg("W") )) );
        HPoint_nD_less__float_comma__2__grate__exposer.def( bp::init< float, float, float, float >(( bp::arg("X"), bp::arg("Y"), bp::arg("Z"), bp::arg("W") )) );
        HPoint_nD_less__float_comma__2__grate__exposer.def( bp::init< PLib::HPoint_nD< float, 2 > const & >(( bp::arg("a") )) );
        HPoint_nD_less__float_comma__2__grate__exposer.def( bp::init< PLib::Point_nD< float, 2 > const & >(( bp::arg("a") )) );
        { //::PLib::HPoint_nD< float, 2 >::move
        
            typedef PLib::HPoint_nD< float, 2 > exported_class_t;
            typedef void ( exported_class_t::*move_function_type )( ::PLib::Point_nD< float, 2 > const & ) ;
            
            HPoint_nD_less__float_comma__2__grate__exposer.def( 
                "move"
                , move_function_type( &::PLib::HPoint_nD< float, 2 >::move )
                , ( bp::arg("m") ) );
        
        }
        HPoint_nD_less__float_comma__2__grate__exposer.def( bp::self *= bp::other< float >() );
        HPoint_nD_less__float_comma__2__grate__exposer.def( bp::self += bp::self );
        HPoint_nD_less__float_comma__2__grate__exposer.def( bp::self -= bp::self );
        HPoint_nD_less__float_comma__2__grate__exposer.def( bp::self /= bp::other< float >() );
        { //::PLib::HPoint_nD< float, 2 >::operator=
        
            typedef PLib::HPoint_nD< float, 2 > exported_class_t;
            typedef ::PLib::HPoint_nD< float, 2 > & ( exported_class_t::*assign_function_type )( ::PLib::HPoint_nD< float, 2 > const & ) ;
            
            HPoint_nD_less__float_comma__2__grate__exposer.def( 
                "assign"
                , assign_function_type( &::PLib::HPoint_nD< float, 2 >::operator= )
                , ( bp::arg("v") )
                , bp::return_self< >() );
        
        }
        { //::PLib::HPoint_nD< float, 2 >::operator=
        
            typedef PLib::HPoint_nD< float, 2 > exported_class_t;
            typedef ::PLib::HPoint_nD< float, 2 > & ( exported_class_t::*assign_function_type )( ::PLib::Point_nD< float, 2 > const & ) ;
            
            HPoint_nD_less__float_comma__2__grate__exposer.def( 
                "assign"
                , assign_function_type( &::PLib::HPoint_nD< float, 2 >::operator= )
                , ( bp::arg("v") )
                , bp::return_self< >() );
        
        }
        { //::PLib::HPoint_nD< float, 2 >::operator=
        
            typedef PLib::HPoint_nD< float, 2 > exported_class_t;
            typedef ::PLib::HPoint_nD< float, 2 > & ( exported_class_t::*assign_function_type )( float const ) ;
            
            HPoint_nD_less__float_comma__2__grate__exposer.def( 
                "assign"
                , assign_function_type( &::PLib::HPoint_nD< float, 2 >::operator= )
                , ( bp::arg("v") )
                , bp::return_self< >() );
        
        }
        { //::PLib::HPoint_nD< float, 2 >::projectW
        
            typedef PLib::HPoint_nD< float, 2 > exported_class_t;
            typedef ::PLib::Point_nD< float, 2 > ( exported_class_t::*projectW_function_type )(  ) ;
            
            HPoint_nD_less__float_comma__2__grate__exposer.def( 
                "projectW"
                , projectW_function_type( &::PLib::HPoint_nD< float, 2 >::projectW ) );
        
        }
        { //::PLib::HPoint_nD< float, 2 >::w
        
            typedef PLib::HPoint_nD< float, 2 > exported_class_t;
            typedef float ( exported_class_t::*w_function_type )(  ) const;
            
            HPoint_nD_less__float_comma__2__grate__exposer.def( 
                "w"
                , w_function_type( &::PLib::HPoint_nD< float, 2 >::w ) );
        
        }
        { //::PLib::HPoint_nD< float, 2 >::x
        
            typedef PLib::HPoint_nD< float, 2 > exported_class_t;
            typedef float ( exported_class_t::*x_function_type )(  ) const;
            
            HPoint_nD_less__float_comma__2__grate__exposer.def( 
                "x"
                , x_function_type( &::PLib::HPoint_nD< float, 2 >::x ) );
        
        }
        { //::PLib::HPoint_nD< float, 2 >::y
        
            typedef PLib::HPoint_nD< float, 2 > exported_class_t;
            typedef float ( exported_class_t::*y_function_type )(  ) const;
            
            HPoint_nD_less__float_comma__2__grate__exposer.def( 
                "y"
                , y_function_type( &::PLib::HPoint_nD< float, 2 >::y ) );
        
        }
        { //::PLib::HPoint_nD< float, 2 >::z
        
            typedef PLib::HPoint_nD< float, 2 > exported_class_t;
            typedef float ( exported_class_t::*z_function_type )(  ) const;
            
            HPoint_nD_less__float_comma__2__grate__exposer.def( 
                "z"
                , z_function_type( &::PLib::HPoint_nD< float, 2 >::z ) );
        
        }
        HPoint_nD_less__float_comma__2__grate__exposer.def_readwrite( "created", &PLib::HPoint_nD< float, 2 >::created );
        HPoint_nD_less__float_comma__2__grate__exposer.def( bp::other< double >() * bp::self );
        HPoint_nD_less__float_comma__2__grate__exposer.def( bp::self / bp::other< double >() );
    }

    bp::implicitly_convertible< float, PLib::HPoint_nD< float, 2 > >();

    bp::implicitly_convertible< PLib::Point_nD< float, 2 > const &, PLib::HPoint_nD< float, 2 > >();

    { //::PLib::HPoint_nD< float, 3 >
        typedef bp::class_< PLib::HPoint_nD< float, 3 > > HPoint_nD_less__float_comma__3__grate__exposer_t;
        HPoint_nD_less__float_comma__3__grate__exposer_t HPoint_nD_less__float_comma__3__grate__exposer = HPoint_nD_less__float_comma__3__grate__exposer_t( "HPoint_nD_less__float_comma__3__grate_" );
        bp::scope HPoint_nD_less__float_comma__3__grate__scope( HPoint_nD_less__float_comma__3__grate__exposer );
        HPoint_nD_less__float_comma__3__grate__exposer.def( bp::init< >() );
        HPoint_nD_less__float_comma__3__grate__exposer.def( bp::init< float *, int >(( bp::arg("d"), bp::arg("c") )) );
        HPoint_nD_less__float_comma__3__grate__exposer.def( bp::init< float >(( bp::arg("a") )) );
        HPoint_nD_less__float_comma__3__grate__exposer.def( bp::init< float, float, float, float >(( bp::arg("X"), bp::arg("Y"), bp::arg("Z"), bp::arg("W") )) );
        HPoint_nD_less__float_comma__3__grate__exposer.def( bp::init< PLib::HPoint_nD< float, 3 > const & >(( bp::arg("a") )) );
        HPoint_nD_less__float_comma__3__grate__exposer.def( bp::init< PLib::Point_nD< float, 3 > const & >(( bp::arg("a") )) );
        { //::PLib::HPoint_nD< float, 3 >::move
        
            typedef PLib::HPoint_nD< float, 3 > exported_class_t;
            typedef void ( exported_class_t::*move_function_type )( ::PLib::Point_nD< float, 3 > const & ) ;
            
            HPoint_nD_less__float_comma__3__grate__exposer.def( 
                "move"
                , move_function_type( &::PLib::HPoint_nD< float, 3 >::move )
                , ( bp::arg("m") ) );
        
        }
        HPoint_nD_less__float_comma__3__grate__exposer.def( bp::self *= bp::other< float >() );
        HPoint_nD_less__float_comma__3__grate__exposer.def( bp::self += bp::self );
        HPoint_nD_less__float_comma__3__grate__exposer.def( bp::self -= bp::self );
        HPoint_nD_less__float_comma__3__grate__exposer.def( bp::self /= bp::other< float >() );
        { //::PLib::HPoint_nD< float, 3 >::operator=
        
            typedef PLib::HPoint_nD< float, 3 > exported_class_t;
            typedef ::PLib::HPoint_nD< float, 3 > & ( exported_class_t::*assign_function_type )( ::PLib::HPoint_nD< float, 3 > const & ) ;
            
            HPoint_nD_less__float_comma__3__grate__exposer.def( 
                "assign"
                , assign_function_type( &::PLib::HPoint_nD< float, 3 >::operator= )
                , ( bp::arg("v") )
                , bp::return_self< >() );
        
        }
        { //::PLib::HPoint_nD< float, 3 >::operator=
        
            typedef PLib::HPoint_nD< float, 3 > exported_class_t;
            typedef ::PLib::HPoint_nD< float, 3 > & ( exported_class_t::*assign_function_type )( ::PLib::Point_nD< float, 3 > const & ) ;
            
            HPoint_nD_less__float_comma__3__grate__exposer.def( 
                "assign"
                , assign_function_type( &::PLib::HPoint_nD< float, 3 >::operator= )
                , ( bp::arg("v") )
                , bp::return_self< >() );
        
        }
        { //::PLib::HPoint_nD< float, 3 >::operator=
        
            typedef PLib::HPoint_nD< float, 3 > exported_class_t;
            typedef ::PLib::HPoint_nD< float, 3 > & ( exported_class_t::*assign_function_type )( float const ) ;
            
            HPoint_nD_less__float_comma__3__grate__exposer.def( 
                "assign"
                , assign_function_type( &::PLib::HPoint_nD< float, 3 >::operator= )
                , ( bp::arg("v") )
                , bp::return_self< >() );
        
        }
        { //::PLib::HPoint_nD< float, 3 >::projectW
        
            typedef PLib::HPoint_nD< float, 3 > exported_class_t;
            typedef ::PLib::Point_nD< float, 3 > ( exported_class_t::*projectW_function_type )(  ) ;
            
            HPoint_nD_less__float_comma__3__grate__exposer.def( 
                "projectW"
                , projectW_function_type( &::PLib::HPoint_nD< float, 3 >::projectW ) );
        
        }
        { //::PLib::HPoint_nD< float, 3 >::w
        
            typedef PLib::HPoint_nD< float, 3 > exported_class_t;
            typedef float ( exported_class_t::*w_function_type )(  ) const;
            
            HPoint_nD_less__float_comma__3__grate__exposer.def( 
                "w"
                , w_function_type( &::PLib::HPoint_nD< float, 3 >::w ) );
        
        }
        { //::PLib::HPoint_nD< float, 3 >::x
        
            typedef PLib::HPoint_nD< float, 3 > exported_class_t;
            typedef float ( exported_class_t::*x_function_type )(  ) const;
            
            HPoint_nD_less__float_comma__3__grate__exposer.def( 
                "x"
                , x_function_type( &::PLib::HPoint_nD< float, 3 >::x ) );
        
        }
        { //::PLib::HPoint_nD< float, 3 >::y
        
            typedef PLib::HPoint_nD< float, 3 > exported_class_t;
            typedef float ( exported_class_t::*y_function_type )(  ) const;
            
            HPoint_nD_less__float_comma__3__grate__exposer.def( 
                "y"
                , y_function_type( &::PLib::HPoint_nD< float, 3 >::y ) );
        
        }
        { //::PLib::HPoint_nD< float, 3 >::z
        
            typedef PLib::HPoint_nD< float, 3 > exported_class_t;
            typedef float ( exported_class_t::*z_function_type )(  ) const;
            
            HPoint_nD_less__float_comma__3__grate__exposer.def( 
                "z"
                , z_function_type( &::PLib::HPoint_nD< float, 3 >::z ) );
        
        }
        HPoint_nD_less__float_comma__3__grate__exposer.def_readwrite( "created", &PLib::HPoint_nD< float, 3 >::created );
        HPoint_nD_less__float_comma__3__grate__exposer.def( bp::other< double >() * bp::self );
        HPoint_nD_less__float_comma__3__grate__exposer.def( bp::self / bp::other< double >() );
    }

    bp::implicitly_convertible< float, PLib::HPoint_nD< float, 3 > >();

    bp::implicitly_convertible< PLib::Point_nD< float, 3 > const &, PLib::HPoint_nD< float, 3 > >();
*/
    bp::class_< MatrixErr_wrapper >( "MatrixErr" )    
        .def( bp::init< >() )    
        .def( 
            "print"
            , &::PLib::MatrixErr::print
            , &MatrixErr_wrapper::default_print )    
        .def( 
            "print_debug"
            , &::PLib::MatrixErr::print_debug );

    bp::class_< MatrixInputError_wrapper, bp::bases< PLib::MatrixErr > >( "MatrixInputError" )    
        .def( bp::init< >() )    
        .def( 
            "print"
            , &::PLib::MatrixInputError::print
            , &MatrixInputError_wrapper::default_print );

    bp::class_< OutOfBound_wrapper, bp::bases< PLib::MatrixInputError > >( "OutOfBound", bp::init< int, int, int >(( bp::arg("index"), bp::arg("from"), bp::arg("to") )) )    
        .def( 
            "print"
            , &::PLib::OutOfBound::print
            , &OutOfBound_wrapper::default_print )    
        .def_readwrite( "e", &PLib::OutOfBound::e )    
        .def_readwrite( "i", &PLib::OutOfBound::i )    
        .def_readwrite( "s", &PLib::OutOfBound::s );

    bp::class_< OutOfBound2D_wrapper, bp::bases< PLib::MatrixInputError > >( "OutOfBound2D", bp::init< int, int, int, int, int, int >(( bp::arg("I"), bp::arg("J"), bp::arg("fI"), bp::arg("tI"), bp::arg("fJ"), bp::arg("tJ") )) )    
        .def( 
            "print"
            , &::PLib::OutOfBound2D::print
            , &OutOfBound2D_wrapper::default_print )    
        .def_readwrite( "e_i", &PLib::OutOfBound2D::e_i )    
        .def_readwrite( "e_j", &PLib::OutOfBound2D::e_j )    
        .def_readwrite( "i", &PLib::OutOfBound2D::i )    
        .def_readwrite( "j", &PLib::OutOfBound2D::j )    
        .def_readwrite( "s_i", &PLib::OutOfBound2D::s_i )    
        .def_readwrite( "s_j", &PLib::OutOfBound2D::s_j );

//     { //::PLib::Point_nD< double, 2 >
//         typedef bp::class_< Point_nD_less__double_comma__2__grate__wrapper > Point_nD_less__double_comma__2__grate__exposer_t;
//         Point_nD_less__double_comma__2__grate__exposer_t Point_nD_less__double_comma__2__grate__exposer = Point_nD_less__double_comma__2__grate__exposer_t( "Point_nD_less__double_comma__2__grate_" );
//         bp::scope Point_nD_less__double_comma__2__grate__scope( Point_nD_less__double_comma__2__grate__exposer );
//         Point_nD_less__double_comma__2__grate__exposer.def( bp::init< >() );
//         Point_nD_less__double_comma__2__grate__exposer.def( bp::init< double >(( bp::arg("a") )) );
//         Point_nD_less__double_comma__2__grate__exposer.def( bp::init< double, double >(( bp::arg("X"), bp::arg("Y") )) );
//         Point_nD_less__double_comma__2__grate__exposer.def( bp::init< PLib::Point_nD< double, 2 > const & >(( bp::arg("a") )) );
//         { //::PLib::Point_nD< double, 2 >::norm
//         
//             typedef PLib::Point_nD< double, 2 > exported_class_t;
//             typedef double ( exported_class_t::*norm_function_type )(  ) const;
//             
//             Point_nD_less__double_comma__2__grate__exposer.def( 
//                 "norm"
//                 , norm_function_type( &::PLib::Point_nD< double, 2 >::norm ) );
//         
//         }
//         { //::PLib::Point_nD< double, 2 >::norm2
//         
//             typedef PLib::Point_nD< double, 2 > exported_class_t;
//             typedef double ( exported_class_t::*norm2_function_type )(  ) const;
//             
//             Point_nD_less__double_comma__2__grate__exposer.def( 
//                 "norm2"
//                 , norm2_function_type( &::PLib::Point_nD< double, 2 >::norm2 ) );
//         
//         }
//         Point_nD_less__double_comma__2__grate__exposer.def( bp::self *= bp::other< double >() );
//         Point_nD_less__double_comma__2__grate__exposer.def( bp::self += bp::self );
//         Point_nD_less__double_comma__2__grate__exposer.def( bp::self -= bp::self );
//         Point_nD_less__double_comma__2__grate__exposer.def( bp::self /= bp::other< double >() );
//         { //::PLib::Point_nD< double, 2 >::operator=
//         
//             typedef PLib::Point_nD< double, 2 > exported_class_t;
//             typedef ::PLib::Point_nD< double, 2 > & ( exported_class_t::*assign_function_type )( ::PLib::Point_nD< double, 2 > const & ) ;
//             
//             Point_nD_less__double_comma__2__grate__exposer.def( 
//                 "assign"
//                 , assign_function_type( &::PLib::Point_nD< double, 2 >::operator= )
//                 , ( bp::arg("v") )
//                 , bp::return_self< >() );
//         
//         }
//         { //::PLib::Point_nD< double, 2 >::unitLength
//         
//             typedef PLib::Point_nD< double, 2 > exported_class_t;
//             typedef ::PLib::Point_nD< double, 2 > ( exported_class_t::*unitLength_function_type )(  ) const;
//             
//             Point_nD_less__double_comma__2__grate__exposer.def( 
//                 "unitLength"
//                 , unitLength_function_type( &::PLib::Point_nD< double, 2 >::unitLength ) );
//         
//         }
//         { //::PLib::Point_nD< double, 2 >::x
//         
//             typedef PLib::Point_nD< double, 2 > exported_class_t;
//             typedef double ( exported_class_t::*x_function_type )(  ) const;
//             
//             Point_nD_less__double_comma__2__grate__exposer.def( 
//                 "x"
//                 , x_function_type( &::PLib::Point_nD< double, 2 >::x ) );
//         
//         }
//         { //::PLib::Point_nD< double, 2 >::y
//         
//             typedef PLib::Point_nD< double, 2 > exported_class_t;
//             typedef double ( exported_class_t::*y_function_type )(  ) const;
//             
//             Point_nD_less__double_comma__2__grate__exposer.def( 
//                 "y"
//                 , y_function_type( &::PLib::Point_nD< double, 2 >::y ) );
//         
//         }
//         { //::PLib::Point_nD< double, 2 >::z
//         
//             typedef PLib::Point_nD< double, 2 > exported_class_t;
//             typedef double ( exported_class_t::*z_function_type )(  ) const;
//             
//             Point_nD_less__double_comma__2__grate__exposer.def( 
//                 "z"
//                 , z_function_type( &::PLib::Point_nD< double, 2 >::z ) );
//         
//         }
//         pyplusplus::containers::static_sized::register_array_1< double, 2 >( "__array_1_double_2" );
//         { //PLib::Point_nD<double, 2>::data [variable], type=double[2]
//         
//             typedef pyplusplus::containers::static_sized::array_1_t< double, 2> ( *array_wrapper_creator )( ::PLib::Point_nD<double, 2> & );
//             
//             Point_nD_less__double_comma__2__grate__exposer.add_property( "data"
//                 , bp::make_function( array_wrapper_creator(&Point_nD_less__double_comma__2__grate__wrapper::pyplusplus_data_wrapper)
//                                     , bp::with_custodian_and_ward_postcall< 0, 1 >() ) );
//         }
//     }
// 
//     bp::implicitly_convertible< double, PLib::Point_nD< double, 2 > >();
// 
//     { //::PLib::Point_nD< double, 3 >
//         typedef bp::class_< Point_nD_less__double_comma__3__grate__wrapper > Point_nD_less__double_comma__3__grate__exposer_t;
//         Point_nD_less__double_comma__3__grate__exposer_t Point_nD_less__double_comma__3__grate__exposer = Point_nD_less__double_comma__3__grate__exposer_t( "Point_nD_less__double_comma__3__grate_" );
//         bp::scope Point_nD_less__double_comma__3__grate__scope( Point_nD_less__double_comma__3__grate__exposer );
//         Point_nD_less__double_comma__3__grate__exposer.def( bp::init< >() );
//         Point_nD_less__double_comma__3__grate__exposer.def( bp::init< double >(( bp::arg("a") )) );
//         Point_nD_less__double_comma__3__grate__exposer.def( bp::init< double, double, double >(( bp::arg("X"), bp::arg("Y"), bp::arg("Z") )) );
//         Point_nD_less__double_comma__3__grate__exposer.def( bp::init< PLib::Point_nD< double, 3 > const & >(( bp::arg("a") )) );
//         { //::PLib::Point_nD< double, 3 >::norm
//         
//             typedef PLib::Point_nD< double, 3 > exported_class_t;
//             typedef double ( exported_class_t::*norm_function_type )(  ) const;
//             
//             Point_nD_less__double_comma__3__grate__exposer.def( 
//                 "norm"
//                 , norm_function_type( &::PLib::Point_nD< double, 3 >::norm ) );
//         
//         }
//         { //::PLib::Point_nD< double, 3 >::norm2
//         
//             typedef PLib::Point_nD< double, 3 > exported_class_t;
//             typedef double ( exported_class_t::*norm2_function_type )(  ) const;
//             
//             Point_nD_less__double_comma__3__grate__exposer.def( 
//                 "norm2"
//                 , norm2_function_type( &::PLib::Point_nD< double, 3 >::norm2 ) );
//         
//         }
//         Point_nD_less__double_comma__3__grate__exposer.def( bp::self *= bp::other< double >() );
//         Point_nD_less__double_comma__3__grate__exposer.def( bp::self += bp::self );
//         Point_nD_less__double_comma__3__grate__exposer.def( bp::self -= bp::self );
//         Point_nD_less__double_comma__3__grate__exposer.def( bp::self /= bp::other< double >() );
//         { //::PLib::Point_nD< double, 3 >::operator=
//         
//             typedef PLib::Point_nD< double, 3 > exported_class_t;
//             typedef ::PLib::Point_nD< double, 3 > & ( exported_class_t::*assign_function_type )( ::PLib::Point_nD< double, 3 > const & ) ;
//             
//             Point_nD_less__double_comma__3__grate__exposer.def( 
//                 "assign"
//                 , assign_function_type( &::PLib::Point_nD< double, 3 >::operator= )
//                 , ( bp::arg("v") )
//                 , bp::return_self< >() );
//         
//         }
//         { //::PLib::Point_nD< double, 3 >::unitLength
//         
//             typedef PLib::Point_nD< double, 3 > exported_class_t;
//             typedef ::PLib::Point_nD< double, 3 > ( exported_class_t::*unitLength_function_type )(  ) const;
//             
//             Point_nD_less__double_comma__3__grate__exposer.def( 
//                 "unitLength"
//                 , unitLength_function_type( &::PLib::Point_nD< double, 3 >::unitLength ) );
//         
//         }
//         { //::PLib::Point_nD< double, 3 >::x
//         
//             typedef PLib::Point_nD< double, 3 > exported_class_t;
//             typedef double ( exported_class_t::*x_function_type )(  ) const;
//             
//             Point_nD_less__double_comma__3__grate__exposer.def( 
//                 "x"
//                 , x_function_type( &::PLib::Point_nD< double, 3 >::x ) );
//         
//         }
//         { //::PLib::Point_nD< double, 3 >::y
//         
//             typedef PLib::Point_nD< double, 3 > exported_class_t;
//             typedef double ( exported_class_t::*y_function_type )(  ) const;
//             
//             Point_nD_less__double_comma__3__grate__exposer.def( 
//                 "y"
//                 , y_function_type( &::PLib::Point_nD< double, 3 >::y ) );
//         
//         }
//         { //::PLib::Point_nD< double, 3 >::z
//         
//             typedef PLib::Point_nD< double, 3 > exported_class_t;
//             typedef double ( exported_class_t::*z_function_type )(  ) const;
//             
//             Point_nD_less__double_comma__3__grate__exposer.def( 
//                 "z"
//                 , z_function_type( &::PLib::Point_nD< double, 3 >::z ) );
//         
//         }
//         pyplusplus::containers::static_sized::register_array_1< double, 3 >( "__array_1_double_3" );
//         { //PLib::Point_nD<double, 3>::data [variable], type=double[3]
//         
//             typedef pyplusplus::containers::static_sized::array_1_t< double, 3> ( *array_wrapper_creator )( ::PLib::Point_nD<double, 3> & );
//             
//             Point_nD_less__double_comma__3__grate__exposer.add_property( "data"
//                 , bp::make_function( array_wrapper_creator(&Point_nD_less__double_comma__3__grate__wrapper::pyplusplus_data_wrapper)
//                                     , bp::with_custodian_and_ward_postcall< 0, 1 >() ) );
//         }
//     }
// 
//     bp::implicitly_convertible< double, PLib::Point_nD< double, 3 > >();

//     { //::PLib::Point_nD< float, 2 >
//         typedef bp::class_< Point_nD_less__float_comma__2__grate__wrapper > Point_nD_less__float_comma__2__grate__exposer_t;
//         Point_nD_less__float_comma__2__grate__exposer_t Point_nD_less__float_comma__2__grate__exposer = Point_nD_less__float_comma__2__grate__exposer_t( "Point_nD_less__float_comma__2__grate_" );
//         bp::scope Point_nD_less__float_comma__2__grate__scope( Point_nD_less__float_comma__2__grate__exposer );
//         Point_nD_less__float_comma__2__grate__exposer.def( bp::init< >() );
//         Point_nD_less__float_comma__2__grate__exposer.def( bp::init< float >(( bp::arg("a") )) );
//         Point_nD_less__float_comma__2__grate__exposer.def( bp::init< float, float >(( bp::arg("X"), bp::arg("Y") )) );
//         Point_nD_less__float_comma__2__grate__exposer.def( bp::init< PLib::Point_nD< float, 2 > const & >(( bp::arg("a") )) );
//         { //::PLib::Point_nD< float, 2 >::norm
//         
//             typedef PLib::Point_nD< float, 2 > exported_class_t;
//             typedef float ( exported_class_t::*norm_function_type )(  ) const;
//             
//             Point_nD_less__float_comma__2__grate__exposer.def( 
//                 "norm"
//                 , norm_function_type( &::PLib::Point_nD< float, 2 >::norm ) );
//         
//         }
//         { //::PLib::Point_nD< float, 2 >::norm2
//         
//             typedef PLib::Point_nD< float, 2 > exported_class_t;
//             typedef float ( exported_class_t::*norm2_function_type )(  ) const;
//             
//             Point_nD_less__float_comma__2__grate__exposer.def( 
//                 "norm2"
//                 , norm2_function_type( &::PLib::Point_nD< float, 2 >::norm2 ) );
//         
//         }
//         Point_nD_less__float_comma__2__grate__exposer.def( bp::self *= bp::other< float >() );
//         Point_nD_less__float_comma__2__grate__exposer.def( bp::self += bp::self );
//         Point_nD_less__float_comma__2__grate__exposer.def( bp::self -= bp::self );
//         Point_nD_less__float_comma__2__grate__exposer.def( bp::self /= bp::other< float >() );
//         { //::PLib::Point_nD< float, 2 >::operator=
//         
//             typedef PLib::Point_nD< float, 2 > exported_class_t;
//             typedef ::PLib::Point_nD< float, 2 > & ( exported_class_t::*assign_function_type )( ::PLib::Point_nD< float, 2 > const & ) ;
//             
//             Point_nD_less__float_comma__2__grate__exposer.def( 
//                 "assign"
//                 , assign_function_type( &::PLib::Point_nD< float, 2 >::operator= )
//                 , ( bp::arg("v") )
//                 , bp::return_self< >() );
//         
//         }
//         { //::PLib::Point_nD< float, 2 >::unitLength
//         
//             typedef PLib::Point_nD< float, 2 > exported_class_t;
//             typedef ::PLib::Point_nD< float, 2 > ( exported_class_t::*unitLength_function_type )(  ) const;
//             
//             Point_nD_less__float_comma__2__grate__exposer.def( 
//                 "unitLength"
//                 , unitLength_function_type( &::PLib::Point_nD< float, 2 >::unitLength ) );
//         
//         }
//         { //::PLib::Point_nD< float, 2 >::x
//         
//             typedef PLib::Point_nD< float, 2 > exported_class_t;
//             typedef float ( exported_class_t::*x_function_type )(  ) const;
//             
//             Point_nD_less__float_comma__2__grate__exposer.def( 
//                 "x"
//                 , x_function_type( &::PLib::Point_nD< float, 2 >::x ) );
//         
//         }
//      
//         { //::PLib::Point_nD< float, 2 >::y
//         
//             typedef PLib::Point_nD< float, 2 > exported_class_t;
//             typedef float ( exported_class_t::*y_function_type )(  ) const;
//             
//             Point_nD_less__float_comma__2__grate__exposer.def( 
//                 "y"
//                 , y_function_type( &::PLib::Point_nD< float, 2 >::y ) );
//         
//         }
//         { //::PLib::Point_nD< float, 2 >::z
//         
//             typedef PLib::Point_nD< float, 2 > exported_class_t;
//             typedef float ( exported_class_t::*z_function_type )(  ) const;
//             
//             Point_nD_less__float_comma__2__grate__exposer.def( 
//                 "z"
//                 , z_function_type( &::PLib::Point_nD< float, 2 >::z ) );
//         
//         }
//         pyplusplus::containers::static_sized::register_array_1< float, 2 >( "__array_1_float_2" );
//         { //PLib::Point_nD<float, 2>::data [variable], type=float[2]
//         
//             typedef pyplusplus::containers::static_sized::array_1_t< float, 2> ( *array_wrapper_creator )( ::PLib::Point_nD<float, 2> & );
//             
//             Point_nD_less__float_comma__2__grate__exposer.add_property( "data"
//                 , bp::make_function( array_wrapper_creator(&Point_nD_less__float_comma__2__grate__wrapper::pyplusplus_data_wrapper)
//                                     , bp::with_custodian_and_ward_postcall< 0, 1 >() ) );
//         }
//         Point_nD_less__float_comma__2__grate__exposer.def( bp::self * bp::other< double >() );
//         Point_nD_less__float_comma__2__grate__exposer.def( bp::other< double >() * bp::self );
//         Point_nD_less__float_comma__2__grate__exposer.def( bp::self / bp::other< double >() );
//     }
// 
//     bp::implicitly_convertible< float, PLib::Point_nD< float, 2 > >();
// 
//     { //::PLib::Point_nD< float, 3 >
//         typedef bp::class_< Point_nD_less__float_comma__3__grate__wrapper > Point_nD_less__float_comma__3__grate__exposer_t;
//         Point_nD_less__float_comma__3__grate__exposer_t Point_nD_less__float_comma__3__grate__exposer = Point_nD_less__float_comma__3__grate__exposer_t( "Point_nD_less__float_comma__3__grate_" );
//         bp::scope Point_nD_less__float_comma__3__grate__scope( Point_nD_less__float_comma__3__grate__exposer );
//         Point_nD_less__float_comma__3__grate__exposer.def( bp::init< >() );
//         Point_nD_less__float_comma__3__grate__exposer.def( bp::init< float >(( bp::arg("a") )) );
//         Point_nD_less__float_comma__3__grate__exposer.def( bp::init< float, float, float >(( bp::arg("X"), bp::arg("Y"), bp::arg("Z") )) );
//         Point_nD_less__float_comma__3__grate__exposer.def( bp::init< PLib::Point_nD< float, 3 > const & >(( bp::arg("a") )) );
//         { //::PLib::Point_nD< float, 3 >::norm
//         
//             typedef PLib::Point_nD< float, 3 > exported_class_t;
//             typedef float ( exported_class_t::*norm_function_type )(  ) const;
//             
//             Point_nD_less__float_comma__3__grate__exposer.def( 
//                 "norm"
//                 , norm_function_type( &::PLib::Point_nD< float, 3 >::norm ) );
//         
//         }
//         { //::PLib::Point_nD< float, 3 >::norm2
//         
//             typedef PLib::Point_nD< float, 3 > exported_class_t;
//             typedef float ( exported_class_t::*norm2_function_type )(  ) const;
//             
//             Point_nD_less__float_comma__3__grate__exposer.def( 
//                 "norm2"
//                 , norm2_function_type( &::PLib::Point_nD< float, 3 >::norm2 ) );
//         
//         }
//         Point_nD_less__float_comma__3__grate__exposer.def( bp::self *= bp::other< float >() );
//         Point_nD_less__float_comma__3__grate__exposer.def( bp::self += bp::self );
//         Point_nD_less__float_comma__3__grate__exposer.def( bp::self -= bp::self );
//         Point_nD_less__float_comma__3__grate__exposer.def( bp::self /= bp::other< float >() );
//         { //::PLib::Point_nD< float, 3 >::operator=
//         
//             typedef PLib::Point_nD< float, 3 > exported_class_t;
//             typedef ::PLib::Point_nD< float, 3 > & ( exported_class_t::*assign_function_type )( ::PLib::Point_nD< float, 3 > const & ) ;
//             
//             Point_nD_less__float_comma__3__grate__exposer.def( 
//                 "assign"
//                 , assign_function_type( &::PLib::Point_nD< float, 3 >::operator= )
//                 , ( bp::arg("v") )
//                 , bp::return_self< >() );
//         
//         }
//         { //::PLib::Point_nD< float, 3 >::unitLength
//         
//             typedef PLib::Point_nD< float, 3 > exported_class_t;
//             typedef ::PLib::Point_nD< float, 3 > ( exported_class_t::*unitLength_function_type )(  ) const;
//             
//             Point_nD_less__float_comma__3__grate__exposer.def( 
//                 "unitLength"
//                 , unitLength_function_type( &::PLib::Point_nD< float, 3 >::unitLength ) );
//         
//         }
//         { //::PLib::Point_nD< float, 3 >::x
//         
//             typedef PLib::Point_nD< float, 3 > exported_class_t;
//             typedef float ( exported_class_t::*x_function_type )(  ) const;
//             
//             Point_nD_less__float_comma__3__grate__exposer.def( 
//                 "x"
//                 , x_function_type( &::PLib::Point_nD< float, 3 >::x ) );
//         
//         }
//         { //::PLib::Point_nD< float, 3 >::y
//         
//             typedef PLib::Point_nD< float, 3 > exported_class_t;
//             typedef float ( exported_class_t::*y_function_type )(  ) const;
//             
//             Point_nD_less__float_comma__3__grate__exposer.def( 
//                 "y"
//                 , y_function_type( &::PLib::Point_nD< float, 3 >::y ) );
//         
//         }
//         { //::PLib::Point_nD< float, 3 >::z
//         
//             typedef PLib::Point_nD< float, 3 > exported_class_t;
//             typedef float ( exported_class_t::*z_function_type )(  ) const;
//             
//             Point_nD_less__float_comma__3__grate__exposer.def( 
//                 "z"
//                 , z_function_type( &::PLib::Point_nD< float, 3 >::z ) );
//         
//         }
//         pyplusplus::containers::static_sized::register_array_1< float, 3 >( "__array_1_float_3" );
//         { //PLib::Point_nD<float, 3>::data [variable], type=float[3]
//         
//             typedef pyplusplus::containers::static_sized::array_1_t< float, 3> ( *array_wrapper_creator )( ::PLib::Point_nD<float, 3> & );
//             
//             Point_nD_less__float_comma__3__grate__exposer.add_property( "data"
//                 , bp::make_function( array_wrapper_creator(&Point_nD_less__float_comma__3__grate__wrapper::pyplusplus_data_wrapper)
//                                     , bp::with_custodian_and_ward_postcall< 0, 1 >() ) );
//         }
//         Point_nD_less__float_comma__3__grate__exposer.def( bp::self * bp::other< double >() );
//         Point_nD_less__float_comma__3__grate__exposer.def( bp::other< double >() * bp::self );
//         Point_nD_less__float_comma__3__grate__exposer.def( bp::self / bp::other< double >() );
//     }
// 
//     bp::implicitly_convertible< float, PLib::Point_nD< float, 3 > >();

    bp::class_< WrongSize_wrapper, bp::bases< PLib::MatrixInputError > >( "WrongSize", bp::init< int, int >(( bp::arg("a"), bp::arg("b") )) )    
        .def( 
            "print"
            , &::PLib::WrongSize::print
            , &WrongSize_wrapper::default_print )    
        .def_readwrite( "s1", &PLib::WrongSize::s1 )    
        .def_readwrite( "s2", &PLib::WrongSize::s2 );

    bp::class_< WrongSize2D_wrapper, bp::bases< PLib::MatrixInputError > >( "WrongSize2D", bp::init< int, int, int, int >(( bp::arg("r"), bp::arg("c"), bp::arg("br"), bp::arg("bc") )) )    
        .def( 
            "print"
            , &::PLib::WrongSize2D::print
            , &WrongSize2D_wrapper::default_print )    
        .def_readwrite( "bad_cols", &PLib::WrongSize2D::bad_cols )    
        .def_readwrite( "bad_rows", &PLib::WrongSize2D::bad_rows )    
        .def_readwrite( "cols", &PLib::WrongSize2D::cols )    
        .def_readwrite( "rows", &PLib::WrongSize2D::rows );

//     { //::PLib::maximum
//     
//         typedef ::PLib::Point_nD< double, 2 > ( *maximum_function_type )( ::PLib::Point_nD< double, 2 >,::PLib::Point_nD< double, 2 > );
//         
//         bp::def( 
//             "maximum"
//             , maximum_function_type( &::PLib::maximum )
//             , ( bp::arg("a"), bp::arg("b") ) );
//     
//     }

//     { //::PLib::maximum
//     
//         typedef ::PLib::Point_nD< float, 2 > ( *maximum_function_type )( ::PLib::Point_nD< float, 2 >,::PLib::Point_nD< float, 2 > );
//         
//         bp::def( 
//             "maximum"
//             , maximum_function_type( &::PLib::maximum )
//             , ( bp::arg("a"), bp::arg("b") ) );
//     
//     }

//     { //::PLib::maximum
//     
//         typedef ::PLib::Point_nD< double, 3 > ( *maximum_function_type )( ::PLib::Point_nD< double, 3 >,::PLib::Point_nD< double, 3 > );
//         
//         bp::def( 
//             "maximum"
//             , maximum_function_type( &::PLib::maximum )
//             , ( bp::arg("a"), bp::arg("b") ) );
//     
//     }

//     { //::PLib::maximum
//     
//         typedef ::PLib::Point_nD< float, 3 > ( *maximum_function_type )( ::PLib::Point_nD< float, 3 >,::PLib::Point_nD< float, 3 > );
//         
//         bp::def( 
//             "maximum"
//             , maximum_function_type( &::PLib::maximum )
//             , ( bp::arg("a"), bp::arg("b") ) );
//     
//     }

//     { //::PLib::maximum
//     
//         typedef double ( *maximum_function_type )( double,double );
//         
//         bp::def( 
//             "maximum"
//             , maximum_function_type( &::PLib::maximum )
//             , ( bp::arg("a"), bp::arg("b") ) );
//     
//     }

//     { //::PLib::maximum
//     
//         typedef float ( *maximum_function_type )( float,float );
//         
//         bp::def( 
//             "maximum"
//             , maximum_function_type( &::PLib::maximum )
//             , ( bp::arg("a"), bp::arg("b") ) );
//     
//     }

//     { //::PLib::minimum
//     
//         typedef ::PLib::Point_nD< double, 2 > ( *minimum_function_type )( ::PLib::Point_nD< double, 2 >,::PLib::Point_nD< double, 2 > );
//         
//         bp::def( 
//             "minimum"
//             , minimum_function_type( &::PLib::minimum )
//             , ( bp::arg("a"), bp::arg("b") ) );
//     
//     }

//     { //::PLib::minimum
//     
//         typedef ::PLib::Point_nD< float, 2 > ( *minimum_function_type )( ::PLib::Point_nD< float, 2 >,::PLib::Point_nD< float, 2 > );
//         
//         bp::def( 
//             "minimum"
//             , minimum_function_type( &::PLib::minimum )
//             , ( bp::arg("a"), bp::arg("b") ) );
//     
//     }

//     { //::PLib::minimum
//     
//         typedef ::PLib::Point_nD< double, 3 > ( *minimum_function_type )( ::PLib::Point_nD< double, 3 >,::PLib::Point_nD< double, 3 > );
//         
//         bp::def( 
//             "minimum"
//             , minimum_function_type( &::PLib::minimum )
//             , ( bp::arg("a"), bp::arg("b") ) );
//     
//     }

//     { //::PLib::minimum
//     
//         typedef ::PLib::Point_nD< float, 3 > ( *minimum_function_type )( ::PLib::Point_nD< float, 3 >,::PLib::Point_nD< float, 3 > );
//         
//         bp::def( 
//             "minimum"
//             , minimum_function_type( &::PLib::minimum )
//             , ( bp::arg("a"), bp::arg("b") ) );
//     
//     }

//     { //::PLib::minimum
//     
//         typedef double ( *minimum_function_type )( double,double );
//         
//         bp::def( 
//             "minimum"
//             , minimum_function_type( &::PLib::minimum )
//             , ( bp::arg("a"), bp::arg("b") ) );
//     
//     }

//     { //::PLib::minimum
//     
//         typedef float ( *minimum_function_type )( float,float );
//         
//         bp::def( 
//             "minimum"
//             , minimum_function_type( &::PLib::minimum )
//             , ( bp::arg("a"), bp::arg("b") ) );
//     
//     }
}
