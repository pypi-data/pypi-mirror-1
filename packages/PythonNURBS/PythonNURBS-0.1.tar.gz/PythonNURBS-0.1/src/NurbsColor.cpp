/**************************************************************************
*   Copyright (C) 2008-2008 by Oliver Borm                                *
*   oli.borm@web.de                                                       *
*                                                                         *
*   This program is free software; you can redistribute it and/or modify  *
*   it under the terms of the GNU General Public License as published by  *
*   the Free Software Foundation; either version 3 of the License, or     *
*   (at your option) any later version.                                   *
*                                                                         *
*   This program is distributed in the hope that it will be useful,       *
*   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
*   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
*   GNU General Public License for more details.                          *
*                                                                         *
*   You should have received a copy of the GNU General Public License     *
*   along with this program; if not, write to the                         *
*   Free Software Foundation, Inc.,                                       *
*   59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             *
***************************************************************************/

/** Author: Oliver Borm
 Date: February 2008
*/

// This file has been generated by Py++.

#include <boost/python.hpp>

#include <nurbs++/nurbsS.h>

namespace bp = boost::python;

// struct Basic2DArray_less__double__grate__wrapper : PLib::Basic2DArray< double >, bp::wrapper< PLib::Basic2DArray< double > > {
// 
//     Basic2DArray_less__double__grate__wrapper( )
//     : PLib::Basic2DArray<double>( )
//       , bp::wrapper< PLib::Basic2DArray< double > >(){
//         // null constructor
//     
//     }
// 
//     Basic2DArray_less__double__grate__wrapper(int const r, int const c )
//     : PLib::Basic2DArray<double>( r, c )
//       , bp::wrapper< PLib::Basic2DArray< double > >(){
//         // constructor
//     
//     }
// 
//     Basic2DArray_less__double__grate__wrapper(::PLib::Basic2DArray< double > const & f2 )
//     : PLib::Basic2DArray<double>( boost::ref(f2) )
//       , bp::wrapper< PLib::Basic2DArray< double > >(){
//         // copy constructor
//     
//     }
// 
//     Basic2DArray_less__double__grate__wrapper(double * p, int const r, int const c )
//     : PLib::Basic2DArray<double>( p, r, c )
//       , bp::wrapper< PLib::Basic2DArray< double > >(){
//         // constructor
//     
//     }
// 
//     void init( int const r=1, int const c=1 ){
//         PLib::Basic2DArray< double >::init( r, c );
//     }
// 
// };

struct BasicArray_less__int__grate__wrapper : PLib::BasicArray< int >, bp::wrapper< PLib::BasicArray< int > > {

    BasicArray_less__int__grate__wrapper( )
    : PLib::BasicArray<int>( )
      , bp::wrapper< PLib::BasicArray< int > >(){
        // null constructor
    
    }

    BasicArray_less__int__grate__wrapper(int const ni )
    : PLib::BasicArray<int>( ni )
      , bp::wrapper< PLib::BasicArray< int > >(){
        // constructor
    
    }

    BasicArray_less__int__grate__wrapper(::PLib::BasicArray< int > const & f2 )
    : PLib::BasicArray<int>( boost::ref(f2) )
      , bp::wrapper< PLib::BasicArray< int > >(){
        // copy constructor
    
    }

    BasicArray_less__int__grate__wrapper(int * ap, int const size )
    : PLib::BasicArray<int>( ap, size )
      , bp::wrapper< PLib::BasicArray< int > >(){
        // constructor
    
    }

    BasicArray_less__int__grate__wrapper(::BasicList< int > & list )
    : PLib::BasicArray<int>( boost::ref(list) )
      , bp::wrapper< PLib::BasicArray< int > >(){
        // constructor
    
    }

    virtual void reset( int const val=0.0 ) {
        if( bp::override func_reset = this->get_override( "reset" ) )
            func_reset( val );
        else
            this->PLib::BasicArray< int >::reset( val );
    }
    
    
    void default_reset( int const val=0.0 ) {
        PLib::BasicArray< int >::reset( val );
    }

};

// struct Matrix_less__double__grate__wrapper : PLib::Matrix< double >, bp::wrapper< PLib::Matrix< double > > {
// 
//     Matrix_less__double__grate__wrapper(int const r, int const c )
//     : PLib::Matrix<double>( r, c )
//       , bp::wrapper< PLib::Matrix< double > >(){
//         // constructor
//     
//     }
// 
//     Matrix_less__double__grate__wrapper( )
//     : PLib::Matrix<double>( )
//       , bp::wrapper< PLib::Matrix< double > >(){
//         // null constructor
//     
//     }
// 
//     Matrix_less__double__grate__wrapper(::PLib::Matrix< double > const & M )
//     : PLib::Matrix<double>( boost::ref(M) )
//       , bp::wrapper< PLib::Matrix< double > >(){
//         // copy constructor
//     
//     }
// 
//     Matrix_less__double__grate__wrapper(double * p, int const r, int const c )
//     : PLib::Matrix<double>( p, r, c )
//       , bp::wrapper< PLib::Matrix< double > >(){
//         // constructor
//     
//     }
// 
//     void init( int const r=1, int const c=1 ){
//         PLib::Basic2DArray< double >::init( r, c );
//     }
// 
// };

// struct MatrixErr_wrapper : PLib::MatrixErr, bp::wrapper< PLib::MatrixErr > {
// 
//     MatrixErr_wrapper(PLib::MatrixErr const & arg )
//     : PLib::MatrixErr( arg )
//       , bp::wrapper< PLib::MatrixErr >(){
//         // copy constructor
//         
//     }
// 
//     MatrixErr_wrapper( )
//     : PLib::MatrixErr( )
//       , bp::wrapper< PLib::MatrixErr >(){
//         // null constructor
//     
//     }
// 
//     virtual void print(  ) {
//         if( bp::override func_print = this->get_override( "print" ) )
//             func_print(  );
//         else
//             this->PLib::MatrixErr::print(  );
//     }
//     
//     
//     void default_print(  ) {
//         PLib::MatrixErr::print( );
//     }
// 
// };

// struct MatrixInputError_wrapper : PLib::MatrixInputError, bp::wrapper< PLib::MatrixInputError > {
// 
//     MatrixInputError_wrapper(PLib::MatrixInputError const & arg )
//     : PLib::MatrixInputError( arg )
//       , bp::wrapper< PLib::MatrixInputError >(){
//         // copy constructor
//         
//     }
// 
//     MatrixInputError_wrapper( )
//     : PLib::MatrixInputError( )
//       , bp::wrapper< PLib::MatrixInputError >(){
//         // null constructor
//     
//     }
// 
//     virtual void print(  ) {
//         if( bp::override func_print = this->get_override( "print" ) )
//             func_print(  );
//         else
//             this->PLib::MatrixInputError::print(  );
//     }
//     
//     
//     void default_print(  ) {
//         PLib::MatrixInputError::print( );
//     }
// 
// };

// struct MatrixRT_less__double__grate__wrapper : PLib::MatrixRT< double >, bp::wrapper< PLib::MatrixRT< double > > {
// 
//     MatrixRT_less__double__grate__wrapper(PLib::MatrixRT<double> const & arg )
//     : PLib::MatrixRT<double>( arg )
//       , bp::wrapper< PLib::MatrixRT< double > >(){
//         // copy constructor
//         
//     }
// 
//     MatrixRT_less__double__grate__wrapper(double ax, double ay, double az, double x, double y, double z )
//     : PLib::MatrixRT<double>( ax, ay, az, x, y, z )
//       , bp::wrapper< PLib::MatrixRT< double > >(){
//         // constructor
//     
//     }
// 
//     MatrixRT_less__double__grate__wrapper( )
//     : PLib::MatrixRT<double>( )
//       , bp::wrapper< PLib::MatrixRT< double > >(){
//         // null constructor
//     
//     }
// 
//     MatrixRT_less__double__grate__wrapper(double * p )
//     : PLib::MatrixRT<double>( p )
//       , bp::wrapper< PLib::MatrixRT< double > >(){
//         // constructor
//     
//     }
// 
//     MatrixRT_less__double__grate__wrapper(::PLib::Matrix< double > const & plM )
//     : PLib::MatrixRT<double>( boost::ref(plM) )
//       , bp::wrapper< PLib::MatrixRT< double > >(){
//         // constructor
//     
//     }
// 
//     void init( int const r=1, int const c=1 ){
//         PLib::Basic2DArray< double >::init( r, c );
//     }
// 
// };

// struct OutOfBound_wrapper : PLib::OutOfBound, bp::wrapper< PLib::OutOfBound > {
// 
//     OutOfBound_wrapper(PLib::OutOfBound const & arg )
//     : PLib::OutOfBound( arg )
//       , bp::wrapper< PLib::OutOfBound >(){
//         // copy constructor
//         
//     }
// 
//     OutOfBound_wrapper(int index, int from, int to )
//     : PLib::OutOfBound( index, from, to )
//       , bp::wrapper< PLib::OutOfBound >(){
//         // constructor
//     
//     }
// 
//     virtual void print(  ) {
//         if( bp::override func_print = this->get_override( "print" ) )
//             func_print(  );
//         else
//             this->PLib::OutOfBound::print(  );
//     }
//     
//     
//     void default_print(  ) {
//         PLib::OutOfBound::print( );
//     }
// 
// };

// struct OutOfBound2D_wrapper : PLib::OutOfBound2D, bp::wrapper< PLib::OutOfBound2D > {
// 
//     OutOfBound2D_wrapper(PLib::OutOfBound2D const & arg )
//     : PLib::OutOfBound2D( arg )
//       , bp::wrapper< PLib::OutOfBound2D >(){
//         // copy constructor
//         
//     }
// 
//     OutOfBound2D_wrapper(int I, int J, int fI, int tI, int fJ, int tJ )
//     : PLib::OutOfBound2D( I, J, fI, tI, fJ, tJ )
//       , bp::wrapper< PLib::OutOfBound2D >(){
//         // constructor
//     
//     }
// 
//     virtual void print(  ) {
//         if( bp::override func_print = this->get_override( "print" ) )
//             func_print(  );
//         else
//             this->PLib::OutOfBound2D::print(  );
//     }
//     
//     
//     void default_print(  ) {
//         PLib::OutOfBound2D::print( );
//     }
// 
// };

// struct Point_nD_less__double_comma__2__grate__wrapper : PLib::Point_nD< double, 2 >, bp::wrapper< PLib::Point_nD< double, 2 > > {
// 
//     Point_nD_less__double_comma__2__grate__wrapper( )
//     : PLib::Point_nD<double, 2>( )
//       , bp::wrapper< PLib::Point_nD< double, 2 > >(){
//         // null constructor
//     
//     }
// 
//     Point_nD_less__double_comma__2__grate__wrapper(double a )
//     : PLib::Point_nD<double, 2>( a )
//       , bp::wrapper< PLib::Point_nD< double, 2 > >(){
//         // constructor
//     
//     }
// 
//     Point_nD_less__double_comma__2__grate__wrapper(double X, double Y )
//     : PLib::Point_nD<double, 2>( X, Y )
//       , bp::wrapper< PLib::Point_nD< double, 2 > >(){
//         // constructor
//     
//     }
// 
//     Point_nD_less__double_comma__2__grate__wrapper(::PLib::Point_nD< double, 2 > const & a )
//     : PLib::Point_nD<double, 2>( boost::ref(a) )
//       , bp::wrapper< PLib::Point_nD< double, 2 > >(){
//         // copy constructor
//     
//     }
// 
//     static pyplusplus::containers::static_sized::array_1_t< double, 2>
//     pyplusplus_data_wrapper( ::PLib::Point_nD<double, 2> & inst ){
//         return pyplusplus::containers::static_sized::array_1_t< double, 2>( inst.data );
//     }
// 
// };
// 
// struct Point_nD_less__double_comma__3__grate__wrapper : PLib::Point_nD< double, 3 >, bp::wrapper< PLib::Point_nD< double, 3 > > {
// 
//     Point_nD_less__double_comma__3__grate__wrapper( )
//     : PLib::Point_nD<double, 3>( )
//       , bp::wrapper< PLib::Point_nD< double, 3 > >(){
//         // null constructor
//     
//     }
// 
//     Point_nD_less__double_comma__3__grate__wrapper(double a )
//     : PLib::Point_nD<double, 3>( a )
//       , bp::wrapper< PLib::Point_nD< double, 3 > >(){
//         // constructor
//     
//     }
// 
//     Point_nD_less__double_comma__3__grate__wrapper(double X, double Y, double Z )
//     : PLib::Point_nD<double, 3>( X, Y, Z )
//       , bp::wrapper< PLib::Point_nD< double, 3 > >(){
//         // constructor
//     
//     }
// 
//     Point_nD_less__double_comma__3__grate__wrapper(::PLib::Point_nD< double, 3 > const & a )
//     : PLib::Point_nD<double, 3>( boost::ref(a) )
//       , bp::wrapper< PLib::Point_nD< double, 3 > >(){
//         // copy constructor
//     
//     }
// 
//     static pyplusplus::containers::static_sized::array_1_t< double, 3>
//     pyplusplus_data_wrapper( ::PLib::Point_nD<double, 3> & inst ){
//         return pyplusplus::containers::static_sized::array_1_t< double, 3>( inst.data );
//     }
// 
// };

// struct Point_nD_less__float_comma__2__grate__wrapper : PLib::Point_nD< float, 2 >, bp::wrapper< PLib::Point_nD< float, 2 > > {
// 
//     Point_nD_less__float_comma__2__grate__wrapper( )
//     : PLib::Point_nD<float, 2>( )
//       , bp::wrapper< PLib::Point_nD< float, 2 > >(){
//         // null constructor
//     
//     }
// 
//     Point_nD_less__float_comma__2__grate__wrapper(float a )
//     : PLib::Point_nD<float, 2>( a )
//       , bp::wrapper< PLib::Point_nD< float, 2 > >(){
//         // constructor
//     
//     }
// 
//     Point_nD_less__float_comma__2__grate__wrapper(float X, float Y )
//     : PLib::Point_nD<float, 2>( X, Y )
//       , bp::wrapper< PLib::Point_nD< float, 2 > >(){
//         // constructor
//     
//     }
// 
//     Point_nD_less__float_comma__2__grate__wrapper(::PLib::Point_nD< float, 2 > const & a )
//     : PLib::Point_nD<float, 2>( boost::ref(a) )
//       , bp::wrapper< PLib::Point_nD< float, 2 > >(){
//         // copy constructor
//     
//     }
// 
//     static pyplusplus::containers::static_sized::array_1_t< float, 2>
//     pyplusplus_data_wrapper( ::PLib::Point_nD<float, 2> & inst ){
//         return pyplusplus::containers::static_sized::array_1_t< float, 2>( inst.data );
//     }
// 
// };
// 
// struct Point_nD_less__float_comma__3__grate__wrapper : PLib::Point_nD< float, 3 >, bp::wrapper< PLib::Point_nD< float, 3 > > {
// 
//     Point_nD_less__float_comma__3__grate__wrapper( )
//     : PLib::Point_nD<float, 3>( )
//       , bp::wrapper< PLib::Point_nD< float, 3 > >(){
//         // null constructor
//     
//     }
// 
//     Point_nD_less__float_comma__3__grate__wrapper(float a )
//     : PLib::Point_nD<float, 3>( a )
//       , bp::wrapper< PLib::Point_nD< float, 3 > >(){
//         // constructor
//     
//     }
// 
//     Point_nD_less__float_comma__3__grate__wrapper(float X, float Y, float Z )
//     : PLib::Point_nD<float, 3>( X, Y, Z )
//       , bp::wrapper< PLib::Point_nD< float, 3 > >(){
//         // constructor
//     
//     }
// 
//     Point_nD_less__float_comma__3__grate__wrapper(::PLib::Point_nD< float, 3 > const & a )
//     : PLib::Point_nD<float, 3>( boost::ref(a) )
//       , bp::wrapper< PLib::Point_nD< float, 3 > >(){
//         // copy constructor
//     
//     }
// 
//     static pyplusplus::containers::static_sized::array_1_t< float, 3>
//     pyplusplus_data_wrapper( ::PLib::Point_nD<float, 3> & inst ){
//         return pyplusplus::containers::static_sized::array_1_t< float, 3>( inst.data );
//     }
// 
// };

// struct WrongSize_wrapper : PLib::WrongSize, bp::wrapper< PLib::WrongSize > {
// 
//     WrongSize_wrapper(PLib::WrongSize const & arg )
//     : PLib::WrongSize( arg )
//       , bp::wrapper< PLib::WrongSize >(){
//         // copy constructor
//         
//     }
// 
//     WrongSize_wrapper(int a, int b )
//     : PLib::WrongSize( a, b )
//       , bp::wrapper< PLib::WrongSize >(){
//         // constructor
//     
//     }
// 
//     virtual void print(  ) {
//         if( bp::override func_print = this->get_override( "print" ) )
//             func_print(  );
//         else
//             this->PLib::WrongSize::print(  );
//     }
//     
//     
//     void default_print(  ) {
//         PLib::WrongSize::print( );
//     }
// 
// };
// 
// struct WrongSize2D_wrapper : PLib::WrongSize2D, bp::wrapper< PLib::WrongSize2D > {
// 
//     WrongSize2D_wrapper(PLib::WrongSize2D const & arg )
//     : PLib::WrongSize2D( arg )
//       , bp::wrapper< PLib::WrongSize2D >(){
//         // copy constructor
//         
//     }
// 
//     WrongSize2D_wrapper(int r, int c, int br, int bc )
//     : PLib::WrongSize2D( r, c, br, bc )
//       , bp::wrapper< PLib::WrongSize2D >(){
//         // constructor
//     
//     }
// 
//     virtual void print(  ) {
//         if( bp::override func_print = this->get_override( "print" ) )
//             func_print(  );
//         else
//             this->PLib::WrongSize2D::print(  );
//     }
//     
//     
//     void default_print(  ) {
//         PLib::WrongSize2D::print( );
//     }
// 
// };

BOOST_PYTHON_MODULE(NurbsColor){
    bp::enum_< PLib::Direction>("Direction")
        .value("u_direction", PLib::u_direction)
        .value("v_direction", PLib::v_direction)
        .value("both_direction", PLib::both_direction)
        .export_values()
        ;

//     { //::PLib::Basic2DArray< double >
//         typedef bp::class_< Basic2DArray_less__double__grate__wrapper > Array2D_DOUBLE_exposer_t;
//         Array2D_DOUBLE_exposer_t Array2D_DOUBLE_exposer = Array2D_DOUBLE_exposer_t( "Array2D_DOUBLE" );
//         bp::scope Array2D_DOUBLE_scope( Array2D_DOUBLE_exposer );
//         Array2D_DOUBLE_exposer.def( bp::init< >() );
//         Array2D_DOUBLE_exposer.def( bp::init< int, int >(( bp::arg("r"), bp::arg("c") )) );
//         Array2D_DOUBLE_exposer.def( bp::init< PLib::Basic2DArray< double > const & >(( bp::arg("f2") )) );
//         Array2D_DOUBLE_exposer.def( bp::init< double *, int, int >(( bp::arg("p"), bp::arg("r"), bp::arg("c") )) );
//         { //::PLib::Basic2DArray< double >::cols
//         
//             typedef PLib::Basic2DArray< double > exported_class_t;
//             typedef int ( exported_class_t::*cols_function_type )(  ) const;
//             
//             Array2D_DOUBLE_exposer.def( 
//                 "cols"
//                 , cols_function_type( &::PLib::Basic2DArray< double >::cols ) );
//         
//         }
//         { //::PLib::Basic2DArray< double >::elem
//         
//             typedef PLib::Basic2DArray< double > exported_class_t;
//             typedef double & ( exported_class_t::*elem_function_type )( int const,int const ) ;
//             
//             Array2D_DOUBLE_exposer.def( 
//                 "elem"
//                 , elem_function_type( &::PLib::Basic2DArray< double >::elem )
//                 , ( bp::arg("i"), bp::arg("j") )
//                     /* undefined call policies */ );
//         
//         }
//         { //::PLib::Basic2DArray< double >::elem
//         
//             typedef PLib::Basic2DArray< double > exported_class_t;
//             typedef double ( exported_class_t::*elem_function_type )( int const,int const ) const;
//             
//             Array2D_DOUBLE_exposer.def( 
//                 "elem"
//                 , elem_function_type( &::PLib::Basic2DArray< double >::elem )
//                 , ( bp::arg("i"), bp::arg("j") ) );
//         
//         }
//         { //::PLib::Basic2DArray< double >::init
//         
//             typedef PLib::Basic2DArray< double > exported_class_t;
//             typedef void ( Basic2DArray_less__double__grate__wrapper::*init_function_type )( int const,int const ) ;
//             
//             Array2D_DOUBLE_exposer.def( 
//                 "init"
//                 , init_function_type( &Basic2DArray_less__double__grate__wrapper::init )
//                 , ( bp::arg("r")=(int const)(1), bp::arg("c")=(int const)(1) ) );
//         
//         }
//         { //::PLib::Basic2DArray< double >::io_by_columns
//         
//             typedef PLib::Basic2DArray< double > exported_class_t;
//             typedef void ( exported_class_t::*io_by_columns_function_type )(  ) ;
//             
//             Array2D_DOUBLE_exposer.def( 
//                 "io_by_columns"
//                 , io_by_columns_function_type( &::PLib::Basic2DArray< double >::io_by_columns ) );
//         
//         }
//         { //::PLib::Basic2DArray< double >::io_by_rows
//         
//             typedef PLib::Basic2DArray< double > exported_class_t;
//             typedef void ( exported_class_t::*io_by_rows_function_type )(  ) ;
//             
//             Array2D_DOUBLE_exposer.def( 
//                 "io_by_rows"
//                 , io_by_rows_function_type( &::PLib::Basic2DArray< double >::io_by_rows ) );
//         
//         }
//         { //::PLib::Basic2DArray< double >::io_elem_width
//         
//             typedef PLib::Basic2DArray< double > exported_class_t;
//             typedef void ( exported_class_t::*io_elem_width_function_type )( int ) ;
//             
//             Array2D_DOUBLE_exposer.def( 
//                 "io_elem_width"
//                 , io_elem_width_function_type( &::PLib::Basic2DArray< double >::io_elem_width )
//                 , ( bp::arg("w") ) );
//         
//         }
//         { //::PLib::Basic2DArray< double >::operator()
//         
//             typedef PLib::Basic2DArray< double > exported_class_t;
//             typedef double & ( exported_class_t::*__call___function_type )( int const,int const ) ;
//             
//             Array2D_DOUBLE_exposer.def( 
//                 "__call__"
//                 , __call___function_type( &::PLib::Basic2DArray< double >::operator() )
//                 , ( bp::arg("i"), bp::arg("j") )
//                     /* undefined call policies */ );
//         
//         }
//         { //::PLib::Basic2DArray< double >::operator()
//         
//             typedef PLib::Basic2DArray< double > exported_class_t;
//             typedef double ( exported_class_t::*__call___function_type )( int const,int const ) const;
//             
//             Array2D_DOUBLE_exposer.def( 
//                 "__call__"
//                 , __call___function_type( &::PLib::Basic2DArray< double >::operator() )
//                 , ( bp::arg("i"), bp::arg("j") ) );
//         
//         }
//         { //::PLib::Basic2DArray< double >::operator=
//         
//             typedef PLib::Basic2DArray< double > exported_class_t;
//             typedef ::PLib::Basic2DArray< double > & ( exported_class_t::*assign_function_type )( ::PLib::Basic2DArray< double > const & ) ;
//             
//             Array2D_DOUBLE_exposer.def( 
//                 "assign"
//                 , assign_function_type( &::PLib::Basic2DArray< double >::operator= )
//                 , ( bp::arg("f2") )
//                 , bp::return_self< >() );
//         
//         }
//         { //::PLib::Basic2DArray< double >::operator=
//         
//             typedef PLib::Basic2DArray< double > exported_class_t;
//             typedef double ( exported_class_t::*assign_function_type )( double const ) ;
//             
//             Array2D_DOUBLE_exposer.def( 
//                 "assign"
//                 , assign_function_type( &::PLib::Basic2DArray< double >::operator= )
//                 , ( bp::arg("val") ) );
//         
//         }
//         { //::PLib::Basic2DArray< double >::operator[]
//         
//             typedef PLib::Basic2DArray< double > exported_class_t;
//             typedef double * ( exported_class_t::*__getitem___function_type )( int const ) ;
//             
//             Array2D_DOUBLE_exposer.def( 
//                 "__getitem__"
//                 , __getitem___function_type( &::PLib::Basic2DArray< double >::operator[] )
//                 , ( bp::arg("i") )
//                 , bp::return_internal_reference< >() );
//         
//         }
//         { //::PLib::Basic2DArray< double >::operator[]
//         
//             typedef PLib::Basic2DArray< double > exported_class_t;
//             typedef double * ( exported_class_t::*__getitem___function_type )( int const ) const;
//             
//             Array2D_DOUBLE_exposer.def( 
//                 "__getitem__"
//                 , __getitem___function_type( &::PLib::Basic2DArray< double >::operator[] )
//                 , ( bp::arg("i") )
//                 , bp::return_internal_reference< >() );
//         
//         }
//         { //::PLib::Basic2DArray< double >::print
//         
//             typedef PLib::Basic2DArray< double > exported_class_t;
//             typedef ::std::basic_ostream< char, std::char_traits< char > > & ( exported_class_t::*print_function_type )( ::std::basic_ostream< char, std::char_traits< char > > & ) const;
//             
//             Array2D_DOUBLE_exposer.def( 
//                 "print"
//                 , print_function_type( &::PLib::Basic2DArray< double >::print )
//                 , ( bp::arg("os") )
//                     /* undefined call policies */ );
//         
//         }
//         { //::PLib::Basic2DArray< double >::reset
//         
//             typedef PLib::Basic2DArray< double > exported_class_t;
//             typedef void ( exported_class_t::*reset_function_type )( double const ) ;
//             
//             Array2D_DOUBLE_exposer.def( 
//                 "reset"
//                 , reset_function_type( &::PLib::Basic2DArray< double >::reset )
//                 , ( bp::arg("val")=0.0 ) );
//         
//         }
//         { //::PLib::Basic2DArray< double >::resize
//         
//             typedef PLib::Basic2DArray< double > exported_class_t;
//             typedef void ( exported_class_t::*resize_function_type )( int const,int const ) ;
//             
//             Array2D_DOUBLE_exposer.def( 
//                 "resize"
//                 , resize_function_type( &::PLib::Basic2DArray< double >::resize )
//                 , ( bp::arg("nr"), bp::arg("nc") ) );
//         
//         }
//         { //::PLib::Basic2DArray< double >::resize
//         
//             typedef PLib::Basic2DArray< double > exported_class_t;
//             typedef void ( exported_class_t::*resize_function_type )( ::PLib::Basic2DArray< double > const & ) ;
//             
//             Array2D_DOUBLE_exposer.def( 
//                 "resize"
//                 , resize_function_type( &::PLib::Basic2DArray< double >::resize )
//                 , ( bp::arg("A") ) );
//         
//         }
//         { //::PLib::Basic2DArray< double >::resizeKeep
//         
//             typedef PLib::Basic2DArray< double > exported_class_t;
//             typedef void ( exported_class_t::*resizeKeep_function_type )( int const,int const ) ;
//             
//             Array2D_DOUBLE_exposer.def( 
//                 "resizeKeep"
//                 , resizeKeep_function_type( &::PLib::Basic2DArray< double >::resizeKeep )
//                 , ( bp::arg("nr"), bp::arg("nc") ) );
//         
//         }
//         { //::PLib::Basic2DArray< double >::rows
//         
//             typedef PLib::Basic2DArray< double > exported_class_t;
//             typedef int ( exported_class_t::*rows_function_type )(  ) const;
//             
//             Array2D_DOUBLE_exposer.def( 
//                 "rows"
//                 , rows_function_type( &::PLib::Basic2DArray< double >::rows ) );
//         
//         }
//         Array2D_DOUBLE_exposer.def( bp::self_ns::str( bp::self ) );
//     }

    { //::PLib::BasicArray< int >
        typedef bp::class_< BasicArray_less__int__grate__wrapper > BasicArray_INT_exposer_t;
        BasicArray_INT_exposer_t BasicArray_INT_exposer = BasicArray_INT_exposer_t( "BasicArray_INT" );
        bp::scope BasicArray_INT_scope( BasicArray_INT_exposer );
        BasicArray_INT_exposer.def( bp::init< >() );
        BasicArray_INT_exposer.def( bp::init< int >(( bp::arg("ni") )) );
        BasicArray_INT_exposer.def( bp::init< PLib::BasicArray< int > const & >(( bp::arg("f2") )) );
        BasicArray_INT_exposer.def( bp::init< int *, int >(( bp::arg("ap"), bp::arg("size") )) );
        BasicArray_INT_exposer.def( bp::init< BasicList< int > & >(( bp::arg("list") )) );
//         { //::PLib::BasicArray< int >::begin
//         
//             typedef PLib::BasicArray< int > exported_class_t;
//             typedef int * ( exported_class_t::*begin_function_type )(  ) ;
//             
//             BasicArray_INT_exposer.def( 
//                 "begin"
//                 , begin_function_type( &::PLib::BasicArray< int >::begin )
//                     /* undefined call policies */ );
//         
//         }
//         { //::PLib::BasicArray< int >::begin
//         
//             typedef PLib::BasicArray< int > exported_class_t;
//             typedef int const * ( exported_class_t::*begin_function_type )(  ) const;
//             
//             BasicArray_INT_exposer.def( 
//                 "begin"
//                 , begin_function_type( &::PLib::BasicArray< int >::begin )
//                     /* undefined call policies */ );
//         
//         }
        { //::PLib::BasicArray< int >::clear
        
            typedef PLib::BasicArray< int > exported_class_t;
            typedef void ( exported_class_t::*clear_function_type )(  ) ;
            
            BasicArray_INT_exposer.def( 
                "clear"
                , clear_function_type( &::PLib::BasicArray< int >::clear ) );
        
        }
//         { //::PLib::BasicArray< int >::end
//         
//             typedef PLib::BasicArray< int > exported_class_t;
//             typedef int * ( exported_class_t::*end_function_type )(  ) ;
//             
//             BasicArray_INT_exposer.def( 
//                 "end"
//                 , end_function_type( &::PLib::BasicArray< int >::end )
//                     /* undefined call policies */ );
//         
//         }
//         { //::PLib::BasicArray< int >::end
//         
//             typedef PLib::BasicArray< int > exported_class_t;
//             typedef int const * ( exported_class_t::*end_function_type )(  ) const;
//             
//             BasicArray_INT_exposer.def( 
//                 "end"
//                 , end_function_type( &::PLib::BasicArray< int >::end )
//                     /* undefined call policies */ );
//         
//         }
//         { //::PLib::BasicArray< int >::memory
//         
//             typedef PLib::BasicArray< int > exported_class_t;
//             typedef int * ( exported_class_t::*memory_function_type )(  ) const;
//             
//             BasicArray_INT_exposer.def( 
//                 "memory"
//                 , memory_function_type( &::PLib::BasicArray< int >::memory )
//                     /* undefined call policies */ );
//         
//         }
        { //::PLib::BasicArray< int >::n
        
            typedef PLib::BasicArray< int > exported_class_t;
            typedef int ( exported_class_t::*n_function_type )(  ) const;
            
            BasicArray_INT_exposer.def( 
                "n"
                , n_function_type( &::PLib::BasicArray< int >::n ) );
        
        }
        { //::PLib::BasicArray< int >::operator=
        
            typedef PLib::BasicArray< int > exported_class_t;
            typedef ::PLib::BasicArray< int > & ( exported_class_t::*assign_function_type )( ::PLib::BasicArray< int > const & ) ;
            
            BasicArray_INT_exposer.def( 
                "assign"
                , assign_function_type( &::PLib::BasicArray< int >::operator= )
                , ( bp::arg("f2") )
                , bp::return_self< >() );
        
        }
        { //::PLib::BasicArray< int >::operator=
        
            typedef PLib::BasicArray< int > exported_class_t;
            typedef int ( exported_class_t::*assign_function_type )( int const ) ;
            
            BasicArray_INT_exposer.def( 
                "assign"
                , assign_function_type( &::PLib::BasicArray< int >::operator= )
                , ( bp::arg("val") ) );
        
        }
        { //::PLib::BasicArray< int >::operator[]
        
            typedef PLib::BasicArray< int > exported_class_t;
            typedef int & ( exported_class_t::*__getitem___function_type )( int const ) ;
            
            BasicArray_INT_exposer.def( 
                "__getitem__"
                , __getitem___function_type( &::PLib::BasicArray< int >::operator[] )
                , ( bp::arg("i") )
                , bp::return_value_policy< bp::copy_non_const_reference >() );
        
        }
        { //::PLib::BasicArray< int >::operator[]
        
            typedef PLib::BasicArray< int > exported_class_t;
            typedef int ( exported_class_t::*__getitem___function_type )( int const ) const;
            
            BasicArray_INT_exposer.def( 
                "__getitem__"
                , __getitem___function_type( &::PLib::BasicArray< int >::operator[] )
                , ( bp::arg("i") ) );
        
        }
//         { //::PLib::BasicArray< int >::print
//         
//             typedef PLib::BasicArray< int > exported_class_t;
//             typedef ::std::basic_ostream< char, std::char_traits< char > > & ( exported_class_t::*print_function_type )( ::std::basic_ostream< char, std::char_traits< char > > & ) const;
//             
//             BasicArray_INT_exposer.def( 
//                 "print"
//                 , print_function_type( &::PLib::BasicArray< int >::print )
//                 , ( bp::arg("os") )
//                     /* undefined call policies */ );
//         
//         }
//         { //::PLib::BasicArray< int >::push_back
//         
//             typedef PLib::BasicArray< int > exported_class_t;
//             typedef int & ( exported_class_t::*push_back_function_type )( int const,int,double ) ;
//             
//             BasicArray_INT_exposer.def( 
//                 "push_back"
//                 , push_back_function_type( &::PLib::BasicArray< int >::push_back )
//                 , ( bp::arg("i"), bp::arg("end_buffer")=(int)(10), bp::arg("end_mult")=-1 )
//                     /* undefined call policies */ );
//         
//         }
        { //::PLib::BasicArray< int >::reset
        
            typedef PLib::BasicArray< int > exported_class_t;
            typedef void ( exported_class_t::*reset_function_type )( int const ) ;
            typedef void ( BasicArray_less__int__grate__wrapper::*default_reset_function_type )( int const ) ;
            
            BasicArray_INT_exposer.def( 
                "reset"
                , reset_function_type(&::PLib::BasicArray< int >::reset)
                , default_reset_function_type(&BasicArray_less__int__grate__wrapper::default_reset)
                , ( bp::arg("val")=(int const)(0.0) ) );
        
        }
        { //::PLib::BasicArray< int >::resize
        
            typedef PLib::BasicArray< int > exported_class_t;
            typedef void ( exported_class_t::*resize_function_type )( int const ) ;
            
            BasicArray_INT_exposer.def( 
                "resize"
                , resize_function_type( &::PLib::BasicArray< int >::resize )
                , ( bp::arg("nsize") ) );
        
        }
        { //::PLib::BasicArray< int >::resize
        
            typedef PLib::BasicArray< int > exported_class_t;
            typedef void ( exported_class_t::*resize_function_type )( ::PLib::BasicArray< int > const & ) ;
            
            BasicArray_INT_exposer.def( 
                "resize"
                , resize_function_type( &::PLib::BasicArray< int >::resize )
                , ( bp::arg("A") ) );
        
        }
        { //::PLib::BasicArray< int >::size
        
            typedef PLib::BasicArray< int > exported_class_t;
            typedef int ( exported_class_t::*size_function_type )(  ) const;
            
            BasicArray_INT_exposer.def( 
                "size"
                , size_function_type( &::PLib::BasicArray< int >::size ) );
        
        }
        { //::PLib::BasicArray< int >::trim
        
            typedef PLib::BasicArray< int > exported_class_t;
            typedef void ( exported_class_t::*trim_function_type )( int const ) ;
            
            BasicArray_INT_exposer.def( 
                "trim"
                , trim_function_type( &::PLib::BasicArray< int >::trim )
                , ( bp::arg("nsize") ) );
        
        }
        { //::PLib::BasicArray< int >::untrim
        
            typedef PLib::BasicArray< int > exported_class_t;
            typedef void ( exported_class_t::*untrim_function_type )(  ) ;
            
            BasicArray_INT_exposer.def( 
                "untrim"
                , untrim_function_type( &::PLib::BasicArray< int >::untrim ) );
        
        }
        { //::PLib::BasicArray< int >::width
        
            typedef PLib::BasicArray< int > exported_class_t;
            typedef void ( exported_class_t::*width_function_type )( int const ) ;
            
            BasicArray_INT_exposer.def( 
                "width"
                , width_function_type( &::PLib::BasicArray< int >::width )
                , ( bp::arg("w") ) );
        
        }
        BasicArray_INT_exposer.def( bp::self != bp::self );
        BasicArray_INT_exposer.def( bp::self_ns::str( bp::self ) );
        BasicArray_INT_exposer.def( bp::self == bp::self );
    }

    bp::implicitly_convertible< int const, PLib::BasicArray< int > >();

    bp::implicitly_convertible< BasicList< int > &, PLib::BasicArray< int > >();

    { //::PLib::Color
        typedef bp::class_< PLib::Color > Color_exposer_t;
        Color_exposer_t Color_exposer = Color_exposer_t( "Color", bp::init< bp::optional< unsigned char, unsigned char, unsigned char > >(( bp::arg("R")=(unsigned char const)(0), bp::arg("G")=(unsigned char const)(0), bp::arg("B")=(unsigned char const)(0) )) );
        bp::scope Color_scope( Color_exposer );
        { //::PLib::Color::fromHSV
        
            typedef void ( ::PLib::Color::*fromHSV_function_type )( double,double,double ) ;
            
            Color_exposer.def( 
                "fromHSV"
                , fromHSV_function_type( &::PLib::Color::fromHSV )
                , ( bp::arg("h"), bp::arg("s"), bp::arg("v") ) );
        
        }
        { //::PLib::Color::fromXYZ
        
            typedef void ( ::PLib::Color::*fromXYZ_function_type )( double,double,double ) ;
            
            Color_exposer.def( 
                "fromXYZ"
                , fromXYZ_function_type( &::PLib::Color::fromXYZ )
                , ( bp::arg("x"), bp::arg("y"), bp::arg("z") ) );
        
        }
        { //::PLib::Color::fromYIQ
        
            typedef void ( ::PLib::Color::*fromYIQ_function_type )( double,double,double ) ;
            
            Color_exposer.def( 
                "fromYIQ"
                , fromYIQ_function_type( &::PLib::Color::fromYIQ )
                , ( bp::arg("y"), bp::arg("i"), bp::arg("q") ) );
        
        }
        Color_exposer.def( bp::self *= bp::other< double >() );
        Color_exposer.def( bp::self += bp::self );
        Color_exposer.def( bp::self -= bp::self );
        Color_exposer.def( bp::self /= bp::other< double >() );
        { //::PLib::Color::operator=
        
            typedef ::PLib::Color & ( ::PLib::Color::*assign_function_type )( ::PLib::Color const & ) ;
            
            Color_exposer.def( 
                "assign"
                , assign_function_type( &::PLib::Color::operator= )
                , ( bp::arg("a") )
                , bp::return_self< >() );
        
        }
        { //::PLib::Color::toHSV
        
            typedef void ( ::PLib::Color::*toHSV_function_type )( double &,double &,double & ) ;
            
            Color_exposer.def( 
                "toHSV"
                , toHSV_function_type( &::PLib::Color::toHSV )
                , ( bp::arg("h"), bp::arg("s"), bp::arg("v") ) );
        
        }
        { //::PLib::Color::toXYZ
        
            typedef void ( ::PLib::Color::*toXYZ_function_type )( double &,double &,double & ) ;
            
            Color_exposer.def( 
                "toXYZ"
                , toXYZ_function_type( &::PLib::Color::toXYZ )
                , ( bp::arg("x"), bp::arg("y"), bp::arg("z") ) );
        
        }
        { //::PLib::Color::toYIQ
        
            typedef void ( ::PLib::Color::*toYIQ_function_type )( double &,double &,double & ) ;
            
            Color_exposer.def( 
                "toYIQ"
                , toYIQ_function_type( &::PLib::Color::toYIQ )
                , ( bp::arg("y"), bp::arg("i"), bp::arg("q") ) );
        
        }
        Color_exposer.def_readwrite( "b", &PLib::Color::b );
        Color_exposer.def_readwrite( "g", &PLib::Color::g );
        Color_exposer.def_readwrite( "r", &PLib::Color::r );
        Color_exposer.def( bp::self != bp::self );
        Color_exposer.def( bp::self * bp::self );
        Color_exposer.def( bp::other< double >() * bp::self );
        Color_exposer.def( bp::self + bp::self );
        Color_exposer.def( bp::self < bp::self );
        Color_exposer.def( bp::self_ns::str( bp::self ) );
        Color_exposer.def( bp::self <= bp::self );
        Color_exposer.def( bp::self == bp::self );
        Color_exposer.def( bp::self > bp::self );
        Color_exposer.def( bp::self >= bp::self );
    }

    { //::PLib::ColorF
        typedef bp::class_< PLib::ColorF > ColorF_exposer_t;
        ColorF_exposer_t ColorF_exposer = ColorF_exposer_t( "ColorF", bp::init< bp::optional< float, float, float > >(( bp::arg("R")=0.0, bp::arg("G")=0.0, bp::arg("B")=0.0 )) );
        bp::scope ColorF_scope( ColorF_exposer );
        { //::PLib::ColorF::operator=
        
            typedef ::PLib::ColorF & ( ::PLib::ColorF::*assign_function_type )( ::PLib::ColorF const & ) ;
            
            ColorF_exposer.def( 
                "assign"
                , assign_function_type( &::PLib::ColorF::operator= )
                , ( bp::arg("a") )
                , bp::return_self< >() );
        
        }
        ColorF_exposer.def_readwrite( "b", &PLib::ColorF::b );
        ColorF_exposer.def_readwrite( "g", &PLib::ColorF::g );
        ColorF_exposer.def_readwrite( "r", &PLib::ColorF::r );
    }

//     { //::PLib::Coordinate
//         typedef bp::class_< PLib::Coordinate > Coordinate_exposer_t;
//         Coordinate_exposer_t Coordinate_exposer = Coordinate_exposer_t( "Coordinate" );
//         bp::scope Coordinate_scope( Coordinate_exposer );
//         Coordinate_exposer.def( bp::init< >() );
//         Coordinate_exposer.def( bp::init< int, int >(( bp::arg("I"), bp::arg("J") )) );
//         Coordinate_exposer.def( bp::init< int >(( bp::arg("a") )) );
//         { //::PLib::Coordinate::operator=
//         
//             typedef ::PLib::Coordinate const & ( ::PLib::Coordinate::*assign_function_type )( ::PLib::Coordinate const & ) ;
//             
//             Coordinate_exposer.def( 
//                 "assign"
//                 , assign_function_type( &::PLib::Coordinate::operator= )
//                 , ( bp::arg("c") )
//                 , bp::return_value_policy< bp::copy_const_reference >() );
//         
//         }
//         Coordinate_exposer.def_readwrite( "i", &PLib::Coordinate::i );
//         Coordinate_exposer.def_readwrite( "j", &PLib::Coordinate::j );
//         Coordinate_exposer.def( bp::self + bp::self );
//         Coordinate_exposer.def( bp::self - bp::self );
//         Coordinate_exposer.def( bp::self < bp::self );
//         Coordinate_exposer.def( bp::self_ns::str( bp::self ) );
//         Coordinate_exposer.def( bp::self <= bp::self );
//         Coordinate_exposer.def( bp::self == bp::self );
//         Coordinate_exposer.def( bp::self > bp::self );
//         Coordinate_exposer.def( bp::self >= bp::self );
//     }
// 
//     bp::implicitly_convertible< int, PLib::Coordinate >();

//     bp::class_< PLib::Error, boost::noncopyable >( "Error" )    
//         .def( bp::init< >() )    
//         .def( bp::init< char const * >(( bp::arg("s") )) )    
//         .def( 
//             "fatal"
//             , &::PLib::Error::fatal
//             , ( bp::arg("arg0")=bp::object() ) )    
//         .def( 
//             "memory"
//             , &::PLib::Error::memory
//             , ( bp::arg("arg0")=bp::object() ) )    
//         .def( 
//             "nonfatal"
//             , &::PLib::Error::nonfatal
//             , ( bp::arg("msg")=bp::object() ) )    
//         .def( 
//             "warning"
//             , &::PLib::Error::warning
//             , ( bp::arg("msg")=bp::object() ) );
// 
//     bp::implicitly_convertible< char const *, PLib::Error >();

//     { //::PLib::HPoint_nD< double, 2 >
//         typedef bp::class_< PLib::HPoint_nD< double, 2 > > HPoint_nD_less__double_comma__2__grate__exposer_t;
//         HPoint_nD_less__double_comma__2__grate__exposer_t HPoint_nD_less__double_comma__2__grate__exposer = HPoint_nD_less__double_comma__2__grate__exposer_t( "HPoint_nD_less__double_comma__2__grate_" );
//         bp::scope HPoint_nD_less__double_comma__2__grate__scope( HPoint_nD_less__double_comma__2__grate__exposer );
//         HPoint_nD_less__double_comma__2__grate__exposer.def( bp::init< >() );
//         HPoint_nD_less__double_comma__2__grate__exposer.def( bp::init< double *, int >(( bp::arg("d"), bp::arg("c") )) );
//         HPoint_nD_less__double_comma__2__grate__exposer.def( bp::init< double >(( bp::arg("a") )) );
//         HPoint_nD_less__double_comma__2__grate__exposer.def( bp::init< double, double, double >(( bp::arg("X"), bp::arg("Y"), bp::arg("W") )) );
//         HPoint_nD_less__double_comma__2__grate__exposer.def( bp::init< double, double, double, double >(( bp::arg("X"), bp::arg("Y"), bp::arg("Z"), bp::arg("W") )) );
//         HPoint_nD_less__double_comma__2__grate__exposer.def( bp::init< PLib::HPoint_nD< double, 2 > const & >(( bp::arg("a") )) );
//         HPoint_nD_less__double_comma__2__grate__exposer.def( bp::init< PLib::Point_nD< double, 2 > const & >(( bp::arg("a") )) );
//         { //::PLib::HPoint_nD< double, 2 >::move
//         
//             typedef PLib::HPoint_nD< double, 2 > exported_class_t;
//             typedef void ( exported_class_t::*move_function_type )( ::PLib::Point_nD< double, 2 > const & ) ;
//             
//             HPoint_nD_less__double_comma__2__grate__exposer.def( 
//                 "move"
//                 , move_function_type( &::PLib::HPoint_nD< double, 2 >::move )
//                 , ( bp::arg("m") ) );
//         
//         }
//         HPoint_nD_less__double_comma__2__grate__exposer.def( bp::self *= bp::other< double >() );
//         HPoint_nD_less__double_comma__2__grate__exposer.def( bp::self += bp::self );
//         HPoint_nD_less__double_comma__2__grate__exposer.def( bp::self -= bp::self );
//         HPoint_nD_less__double_comma__2__grate__exposer.def( bp::self /= bp::other< double >() );
//         { //::PLib::HPoint_nD< double, 2 >::operator=
//         
//             typedef PLib::HPoint_nD< double, 2 > exported_class_t;
//             typedef ::PLib::HPoint_nD< double, 2 > & ( exported_class_t::*assign_function_type )( ::PLib::HPoint_nD< double, 2 > const & ) ;
//             
//             HPoint_nD_less__double_comma__2__grate__exposer.def( 
//                 "assign"
//                 , assign_function_type( &::PLib::HPoint_nD< double, 2 >::operator= )
//                 , ( bp::arg("v") )
//                 , bp::return_self< >() );
//         
//         }
//         { //::PLib::HPoint_nD< double, 2 >::operator=
//         
//             typedef PLib::HPoint_nD< double, 2 > exported_class_t;
//             typedef ::PLib::HPoint_nD< double, 2 > & ( exported_class_t::*assign_function_type )( ::PLib::Point_nD< double, 2 > const & ) ;
//             
//             HPoint_nD_less__double_comma__2__grate__exposer.def( 
//                 "assign"
//                 , assign_function_type( &::PLib::HPoint_nD< double, 2 >::operator= )
//                 , ( bp::arg("v") )
//                 , bp::return_self< >() );
//         
//         }
//         { //::PLib::HPoint_nD< double, 2 >::operator=
//         
//             typedef PLib::HPoint_nD< double, 2 > exported_class_t;
//             typedef ::PLib::HPoint_nD< double, 2 > & ( exported_class_t::*assign_function_type )( double const ) ;
//             
//             HPoint_nD_less__double_comma__2__grate__exposer.def( 
//                 "assign"
//                 , assign_function_type( &::PLib::HPoint_nD< double, 2 >::operator= )
//                 , ( bp::arg("v") )
//                 , bp::return_self< >() );
//         
//         }
//         { //::PLib::HPoint_nD< double, 2 >::projectW
//         
//             typedef PLib::HPoint_nD< double, 2 > exported_class_t;
//             typedef ::PLib::Point_nD< double, 2 > ( exported_class_t::*projectW_function_type )(  ) ;
//             
//             HPoint_nD_less__double_comma__2__grate__exposer.def( 
//                 "projectW"
//                 , projectW_function_type( &::PLib::HPoint_nD< double, 2 >::projectW ) );
//         
//         }
//         { //::PLib::HPoint_nD< double, 2 >::w
//         
//             typedef PLib::HPoint_nD< double, 2 > exported_class_t;
//             typedef double & ( exported_class_t::*w_function_type )(  ) ;
//             
//             HPoint_nD_less__double_comma__2__grate__exposer.def( 
//                 "w"
//                 , w_function_type( &::PLib::HPoint_nD< double, 2 >::w )
//                     /* undefined call policies */ );
//         
//         }
//         { //::PLib::HPoint_nD< double, 2 >::w
//         
//             typedef PLib::HPoint_nD< double, 2 > exported_class_t;
//             typedef double ( exported_class_t::*w_function_type )(  ) const;
//             
//             HPoint_nD_less__double_comma__2__grate__exposer.def( 
//                 "w"
//                 , w_function_type( &::PLib::HPoint_nD< double, 2 >::w ) );
//         
//         }
//         { //::PLib::HPoint_nD< double, 2 >::x
//         
//             typedef PLib::HPoint_nD< double, 2 > exported_class_t;
//             typedef double & ( exported_class_t::*x_function_type )(  ) ;
//             
//             HPoint_nD_less__double_comma__2__grate__exposer.def( 
//                 "x"
//                 , x_function_type( &::PLib::HPoint_nD< double, 2 >::x )
//                     /* undefined call policies */ );
//         
//         }
//         { //::PLib::HPoint_nD< double, 2 >::x
//         
//             typedef PLib::HPoint_nD< double, 2 > exported_class_t;
//             typedef double ( exported_class_t::*x_function_type )(  ) const;
//             
//             HPoint_nD_less__double_comma__2__grate__exposer.def( 
//                 "x"
//                 , x_function_type( &::PLib::HPoint_nD< double, 2 >::x ) );
//         
//         }
//         { //::PLib::HPoint_nD< double, 2 >::y
//         
//             typedef PLib::HPoint_nD< double, 2 > exported_class_t;
//             typedef double & ( exported_class_t::*y_function_type )(  ) ;
//             
//             HPoint_nD_less__double_comma__2__grate__exposer.def( 
//                 "y"
//                 , y_function_type( &::PLib::HPoint_nD< double, 2 >::y )
//                     /* undefined call policies */ );
//         
//         }
//         { //::PLib::HPoint_nD< double, 2 >::y
//         
//             typedef PLib::HPoint_nD< double, 2 > exported_class_t;
//             typedef double ( exported_class_t::*y_function_type )(  ) const;
//             
//             HPoint_nD_less__double_comma__2__grate__exposer.def( 
//                 "y"
//                 , y_function_type( &::PLib::HPoint_nD< double, 2 >::y ) );
//         
//         }
//         { //::PLib::HPoint_nD< double, 2 >::z
//         
//             typedef PLib::HPoint_nD< double, 2 > exported_class_t;
//             typedef double & ( exported_class_t::*z_function_type )(  ) ;
//             
//             HPoint_nD_less__double_comma__2__grate__exposer.def( 
//                 "z"
//                 , z_function_type( &::PLib::HPoint_nD< double, 2 >::z )
//                     /* undefined call policies */ );
//         
//         }
//         { //::PLib::HPoint_nD< double, 2 >::z
//         
//             typedef PLib::HPoint_nD< double, 2 > exported_class_t;
//             typedef double ( exported_class_t::*z_function_type )(  ) const;
//             
//             HPoint_nD_less__double_comma__2__grate__exposer.def( 
//                 "z"
//                 , z_function_type( &::PLib::HPoint_nD< double, 2 >::z ) );
//         
//         }
//         HPoint_nD_less__double_comma__2__grate__exposer.def_readwrite( "created", &PLib::HPoint_nD< double, 2 >::created );
//     }
// 
//     bp::implicitly_convertible< double, PLib::HPoint_nD< double, 2 > >();
// 
//     bp::implicitly_convertible< PLib::Point_nD< double, 2 > const &, PLib::HPoint_nD< double, 2 > >();
// 
//     { //::PLib::HPoint_nD< double, 3 >
//         typedef bp::class_< PLib::HPoint_nD< double, 3 > > HPoint_nD_less__double_comma__3__grate__exposer_t;
//         HPoint_nD_less__double_comma__3__grate__exposer_t HPoint_nD_less__double_comma__3__grate__exposer = HPoint_nD_less__double_comma__3__grate__exposer_t( "HPoint_nD_less__double_comma__3__grate_" );
//         bp::scope HPoint_nD_less__double_comma__3__grate__scope( HPoint_nD_less__double_comma__3__grate__exposer );
//         HPoint_nD_less__double_comma__3__grate__exposer.def( bp::init< >() );
//         HPoint_nD_less__double_comma__3__grate__exposer.def( bp::init< double *, int >(( bp::arg("d"), bp::arg("c") )) );
//         HPoint_nD_less__double_comma__3__grate__exposer.def( bp::init< double >(( bp::arg("a") )) );
//         HPoint_nD_less__double_comma__3__grate__exposer.def( bp::init< double, double, double, double >(( bp::arg("X"), bp::arg("Y"), bp::arg("Z"), bp::arg("W") )) );
//         HPoint_nD_less__double_comma__3__grate__exposer.def( bp::init< PLib::HPoint_nD< double, 3 > const & >(( bp::arg("a") )) );
//         HPoint_nD_less__double_comma__3__grate__exposer.def( bp::init< PLib::Point_nD< double, 3 > const & >(( bp::arg("a") )) );
//         { //::PLib::HPoint_nD< double, 3 >::move
//         
//             typedef PLib::HPoint_nD< double, 3 > exported_class_t;
//             typedef void ( exported_class_t::*move_function_type )( ::PLib::Point_nD< double, 3 > const & ) ;
//             
//             HPoint_nD_less__double_comma__3__grate__exposer.def( 
//                 "move"
//                 , move_function_type( &::PLib::HPoint_nD< double, 3 >::move )
//                 , ( bp::arg("m") ) );
//         
//         }
//         HPoint_nD_less__double_comma__3__grate__exposer.def( bp::self *= bp::other< double >() );
//         HPoint_nD_less__double_comma__3__grate__exposer.def( bp::self += bp::self );
//         HPoint_nD_less__double_comma__3__grate__exposer.def( bp::self -= bp::self );
//         HPoint_nD_less__double_comma__3__grate__exposer.def( bp::self /= bp::other< double >() );
//         { //::PLib::HPoint_nD< double, 3 >::operator=
//         
//             typedef PLib::HPoint_nD< double, 3 > exported_class_t;
//             typedef ::PLib::HPoint_nD< double, 3 > & ( exported_class_t::*assign_function_type )( ::PLib::HPoint_nD< double, 3 > const & ) ;
//             
//             HPoint_nD_less__double_comma__3__grate__exposer.def( 
//                 "assign"
//                 , assign_function_type( &::PLib::HPoint_nD< double, 3 >::operator= )
//                 , ( bp::arg("v") )
//                 , bp::return_self< >() );
//         
//         }
//         { //::PLib::HPoint_nD< double, 3 >::operator=
//         
//             typedef PLib::HPoint_nD< double, 3 > exported_class_t;
//             typedef ::PLib::HPoint_nD< double, 3 > & ( exported_class_t::*assign_function_type )( ::PLib::Point_nD< double, 3 > const & ) ;
//             
//             HPoint_nD_less__double_comma__3__grate__exposer.def( 
//                 "assign"
//                 , assign_function_type( &::PLib::HPoint_nD< double, 3 >::operator= )
//                 , ( bp::arg("v") )
//                 , bp::return_self< >() );
//         
//         }
//         { //::PLib::HPoint_nD< double, 3 >::operator=
//         
//             typedef PLib::HPoint_nD< double, 3 > exported_class_t;
//             typedef ::PLib::HPoint_nD< double, 3 > & ( exported_class_t::*assign_function_type )( double const ) ;
//             
//             HPoint_nD_less__double_comma__3__grate__exposer.def( 
//                 "assign"
//                 , assign_function_type( &::PLib::HPoint_nD< double, 3 >::operator= )
//                 , ( bp::arg("v") )
//                 , bp::return_self< >() );
//         
//         }
//         { //::PLib::HPoint_nD< double, 3 >::projectW
//         
//             typedef PLib::HPoint_nD< double, 3 > exported_class_t;
//             typedef ::PLib::Point_nD< double, 3 > ( exported_class_t::*projectW_function_type )(  ) ;
//             
//             HPoint_nD_less__double_comma__3__grate__exposer.def( 
//                 "projectW"
//                 , projectW_function_type( &::PLib::HPoint_nD< double, 3 >::projectW ) );
//         
//         }
//         { //::PLib::HPoint_nD< double, 3 >::w
//         
//             typedef PLib::HPoint_nD< double, 3 > exported_class_t;
//             typedef double & ( exported_class_t::*w_function_type )(  ) ;
//             
//             HPoint_nD_less__double_comma__3__grate__exposer.def( 
//                 "w"
//                 , w_function_type( &::PLib::HPoint_nD< double, 3 >::w )
//                     /* undefined call policies */ );
//         
//         }
//         { //::PLib::HPoint_nD< double, 3 >::w
//         
//             typedef PLib::HPoint_nD< double, 3 > exported_class_t;
//             typedef double ( exported_class_t::*w_function_type )(  ) const;
//             
//             HPoint_nD_less__double_comma__3__grate__exposer.def( 
//                 "w"
//                 , w_function_type( &::PLib::HPoint_nD< double, 3 >::w ) );
//         
//         }
//         { //::PLib::HPoint_nD< double, 3 >::x
//         
//             typedef PLib::HPoint_nD< double, 3 > exported_class_t;
//             typedef double & ( exported_class_t::*x_function_type )(  ) ;
//             
//             HPoint_nD_less__double_comma__3__grate__exposer.def( 
//                 "x"
//                 , x_function_type( &::PLib::HPoint_nD< double, 3 >::x )
//                     /* undefined call policies */ );
//         
//         }
//         { //::PLib::HPoint_nD< double, 3 >::x
//         
//             typedef PLib::HPoint_nD< double, 3 > exported_class_t;
//             typedef double ( exported_class_t::*x_function_type )(  ) const;
//             
//             HPoint_nD_less__double_comma__3__grate__exposer.def( 
//                 "x"
//                 , x_function_type( &::PLib::HPoint_nD< double, 3 >::x ) );
//         
//         }
//         { //::PLib::HPoint_nD< double, 3 >::y
//         
//             typedef PLib::HPoint_nD< double, 3 > exported_class_t;
//             typedef double & ( exported_class_t::*y_function_type )(  ) ;
//             
//             HPoint_nD_less__double_comma__3__grate__exposer.def( 
//                 "y"
//                 , y_function_type( &::PLib::HPoint_nD< double, 3 >::y )
//                     /* undefined call policies */ );
//         
//         }
//         { //::PLib::HPoint_nD< double, 3 >::y
//         
//             typedef PLib::HPoint_nD< double, 3 > exported_class_t;
//             typedef double ( exported_class_t::*y_function_type )(  ) const;
//             
//             HPoint_nD_less__double_comma__3__grate__exposer.def( 
//                 "y"
//                 , y_function_type( &::PLib::HPoint_nD< double, 3 >::y ) );
//         
//         }
//         { //::PLib::HPoint_nD< double, 3 >::z
//         
//             typedef PLib::HPoint_nD< double, 3 > exported_class_t;
//             typedef double & ( exported_class_t::*z_function_type )(  ) ;
//             
//             HPoint_nD_less__double_comma__3__grate__exposer.def( 
//                 "z"
//                 , z_function_type( &::PLib::HPoint_nD< double, 3 >::z )
//                     /* undefined call policies */ );
//         
//         }
//         { //::PLib::HPoint_nD< double, 3 >::z
//         
//             typedef PLib::HPoint_nD< double, 3 > exported_class_t;
//             typedef double ( exported_class_t::*z_function_type )(  ) const;
//             
//             HPoint_nD_less__double_comma__3__grate__exposer.def( 
//                 "z"
//                 , z_function_type( &::PLib::HPoint_nD< double, 3 >::z ) );
//         
//         }
//         HPoint_nD_less__double_comma__3__grate__exposer.def_readwrite( "created", &PLib::HPoint_nD< double, 3 >::created );
//     }
// 
//     bp::implicitly_convertible< double, PLib::HPoint_nD< double, 3 > >();
// 
//     bp::implicitly_convertible< PLib::Point_nD< double, 3 > const &, PLib::HPoint_nD< double, 3 > >();
// 
//     { //::PLib::HPoint_nD< float, 2 >
//         typedef bp::class_< PLib::HPoint_nD< float, 2 > > HPoint_nD_less__float_comma__2__grate__exposer_t;
//         HPoint_nD_less__float_comma__2__grate__exposer_t HPoint_nD_less__float_comma__2__grate__exposer = HPoint_nD_less__float_comma__2__grate__exposer_t( "HPoint_nD_less__float_comma__2__grate_" );
//         bp::scope HPoint_nD_less__float_comma__2__grate__scope( HPoint_nD_less__float_comma__2__grate__exposer );
//         HPoint_nD_less__float_comma__2__grate__exposer.def( bp::init< >() );
//         HPoint_nD_less__float_comma__2__grate__exposer.def( bp::init< float *, int >(( bp::arg("d"), bp::arg("c") )) );
//         HPoint_nD_less__float_comma__2__grate__exposer.def( bp::init< float >(( bp::arg("a") )) );
//         HPoint_nD_less__float_comma__2__grate__exposer.def( bp::init< float, float, float >(( bp::arg("X"), bp::arg("Y"), bp::arg("W") )) );
//         HPoint_nD_less__float_comma__2__grate__exposer.def( bp::init< float, float, float, float >(( bp::arg("X"), bp::arg("Y"), bp::arg("Z"), bp::arg("W") )) );
//         HPoint_nD_less__float_comma__2__grate__exposer.def( bp::init< PLib::HPoint_nD< float, 2 > const & >(( bp::arg("a") )) );
//         HPoint_nD_less__float_comma__2__grate__exposer.def( bp::init< PLib::Point_nD< float, 2 > const & >(( bp::arg("a") )) );
//         { //::PLib::HPoint_nD< float, 2 >::move
//         
//             typedef PLib::HPoint_nD< float, 2 > exported_class_t;
//             typedef void ( exported_class_t::*move_function_type )( ::PLib::Point_nD< float, 2 > const & ) ;
//             
//             HPoint_nD_less__float_comma__2__grate__exposer.def( 
//                 "move"
//                 , move_function_type( &::PLib::HPoint_nD< float, 2 >::move )
//                 , ( bp::arg("m") ) );
//         
//         }
//         HPoint_nD_less__float_comma__2__grate__exposer.def( bp::self *= bp::other< float >() );
//         HPoint_nD_less__float_comma__2__grate__exposer.def( bp::self += bp::self );
//         HPoint_nD_less__float_comma__2__grate__exposer.def( bp::self -= bp::self );
//         HPoint_nD_less__float_comma__2__grate__exposer.def( bp::self /= bp::other< float >() );
//         { //::PLib::HPoint_nD< float, 2 >::operator=
//         
//             typedef PLib::HPoint_nD< float, 2 > exported_class_t;
//             typedef ::PLib::HPoint_nD< float, 2 > & ( exported_class_t::*assign_function_type )( ::PLib::HPoint_nD< float, 2 > const & ) ;
//             
//             HPoint_nD_less__float_comma__2__grate__exposer.def( 
//                 "assign"
//                 , assign_function_type( &::PLib::HPoint_nD< float, 2 >::operator= )
//                 , ( bp::arg("v") )
//                 , bp::return_self< >() );
//         
//         }
//         { //::PLib::HPoint_nD< float, 2 >::operator=
//         
//             typedef PLib::HPoint_nD< float, 2 > exported_class_t;
//             typedef ::PLib::HPoint_nD< float, 2 > & ( exported_class_t::*assign_function_type )( ::PLib::Point_nD< float, 2 > const & ) ;
//             
//             HPoint_nD_less__float_comma__2__grate__exposer.def( 
//                 "assign"
//                 , assign_function_type( &::PLib::HPoint_nD< float, 2 >::operator= )
//                 , ( bp::arg("v") )
//                 , bp::return_self< >() );
//         
//         }
//         { //::PLib::HPoint_nD< float, 2 >::operator=
//         
//             typedef PLib::HPoint_nD< float, 2 > exported_class_t;
//             typedef ::PLib::HPoint_nD< float, 2 > & ( exported_class_t::*assign_function_type )( float const ) ;
//             
//             HPoint_nD_less__float_comma__2__grate__exposer.def( 
//                 "assign"
//                 , assign_function_type( &::PLib::HPoint_nD< float, 2 >::operator= )
//                 , ( bp::arg("v") )
//                 , bp::return_self< >() );
//         
//         }
//         { //::PLib::HPoint_nD< float, 2 >::projectW
//         
//             typedef PLib::HPoint_nD< float, 2 > exported_class_t;
//             typedef ::PLib::Point_nD< float, 2 > ( exported_class_t::*projectW_function_type )(  ) ;
//             
//             HPoint_nD_less__float_comma__2__grate__exposer.def( 
//                 "projectW"
//                 , projectW_function_type( &::PLib::HPoint_nD< float, 2 >::projectW ) );
//         
//         }
//         { //::PLib::HPoint_nD< float, 2 >::w
//         
//             typedef PLib::HPoint_nD< float, 2 > exported_class_t;
//             typedef float & ( exported_class_t::*w_function_type )(  ) ;
//             
//             HPoint_nD_less__float_comma__2__grate__exposer.def( 
//                 "w"
//                 , w_function_type( &::PLib::HPoint_nD< float, 2 >::w )
//                     /* undefined call policies */ );
//         
//         }
//         { //::PLib::HPoint_nD< float, 2 >::w
//         
//             typedef PLib::HPoint_nD< float, 2 > exported_class_t;
//             typedef float ( exported_class_t::*w_function_type )(  ) const;
//             
//             HPoint_nD_less__float_comma__2__grate__exposer.def( 
//                 "w"
//                 , w_function_type( &::PLib::HPoint_nD< float, 2 >::w ) );
//         
//         }
//         { //::PLib::HPoint_nD< float, 2 >::x
//         
//             typedef PLib::HPoint_nD< float, 2 > exported_class_t;
//             typedef float & ( exported_class_t::*x_function_type )(  ) ;
//             
//             HPoint_nD_less__float_comma__2__grate__exposer.def( 
//                 "x"
//                 , x_function_type( &::PLib::HPoint_nD< float, 2 >::x )
//                     /* undefined call policies */ );
//         
//         }
//         { //::PLib::HPoint_nD< float, 2 >::x
//         
//             typedef PLib::HPoint_nD< float, 2 > exported_class_t;
//             typedef float ( exported_class_t::*x_function_type )(  ) const;
//             
//             HPoint_nD_less__float_comma__2__grate__exposer.def( 
//                 "x"
//                 , x_function_type( &::PLib::HPoint_nD< float, 2 >::x ) );
//         
//         }
//         { //::PLib::HPoint_nD< float, 2 >::y
//         
//             typedef PLib::HPoint_nD< float, 2 > exported_class_t;
//             typedef float & ( exported_class_t::*y_function_type )(  ) ;
//             
//             HPoint_nD_less__float_comma__2__grate__exposer.def( 
//                 "y"
//                 , y_function_type( &::PLib::HPoint_nD< float, 2 >::y )
//                     /* undefined call policies */ );
//         
//         }
//         { //::PLib::HPoint_nD< float, 2 >::y
//         
//             typedef PLib::HPoint_nD< float, 2 > exported_class_t;
//             typedef float ( exported_class_t::*y_function_type )(  ) const;
//             
//             HPoint_nD_less__float_comma__2__grate__exposer.def( 
//                 "y"
//                 , y_function_type( &::PLib::HPoint_nD< float, 2 >::y ) );
//         
//         }
//         { //::PLib::HPoint_nD< float, 2 >::z
//         
//             typedef PLib::HPoint_nD< float, 2 > exported_class_t;
//             typedef float & ( exported_class_t::*z_function_type )(  ) ;
//             
//             HPoint_nD_less__float_comma__2__grate__exposer.def( 
//                 "z"
//                 , z_function_type( &::PLib::HPoint_nD< float, 2 >::z )
//                     /* undefined call policies */ );
//         
//         }
//         { //::PLib::HPoint_nD< float, 2 >::z
//         
//             typedef PLib::HPoint_nD< float, 2 > exported_class_t;
//             typedef float ( exported_class_t::*z_function_type )(  ) const;
//             
//             HPoint_nD_less__float_comma__2__grate__exposer.def( 
//                 "z"
//                 , z_function_type( &::PLib::HPoint_nD< float, 2 >::z ) );
//         
//         }
//         HPoint_nD_less__float_comma__2__grate__exposer.def_readwrite( "created", &PLib::HPoint_nD< float, 2 >::created );
//         HPoint_nD_less__float_comma__2__grate__exposer.def( bp::other< double >() * bp::self );
//         HPoint_nD_less__float_comma__2__grate__exposer.def( bp::self / bp::other< double >() );
//     }
// 
//     bp::implicitly_convertible< float, PLib::HPoint_nD< float, 2 > >();
// 
//     bp::implicitly_convertible< PLib::Point_nD< float, 2 > const &, PLib::HPoint_nD< float, 2 > >();
// 
//     { //::PLib::HPoint_nD< float, 3 >
//         typedef bp::class_< PLib::HPoint_nD< float, 3 > > HPoint_nD_less__float_comma__3__grate__exposer_t;
//         HPoint_nD_less__float_comma__3__grate__exposer_t HPoint_nD_less__float_comma__3__grate__exposer = HPoint_nD_less__float_comma__3__grate__exposer_t( "HPoint_nD_less__float_comma__3__grate_" );
//         bp::scope HPoint_nD_less__float_comma__3__grate__scope( HPoint_nD_less__float_comma__3__grate__exposer );
//         HPoint_nD_less__float_comma__3__grate__exposer.def( bp::init< >() );
//         HPoint_nD_less__float_comma__3__grate__exposer.def( bp::init< float *, int >(( bp::arg("d"), bp::arg("c") )) );
//         HPoint_nD_less__float_comma__3__grate__exposer.def( bp::init< float >(( bp::arg("a") )) );
//         HPoint_nD_less__float_comma__3__grate__exposer.def( bp::init< float, float, float, float >(( bp::arg("X"), bp::arg("Y"), bp::arg("Z"), bp::arg("W") )) );
//         HPoint_nD_less__float_comma__3__grate__exposer.def( bp::init< PLib::HPoint_nD< float, 3 > const & >(( bp::arg("a") )) );
//         HPoint_nD_less__float_comma__3__grate__exposer.def( bp::init< PLib::Point_nD< float, 3 > const & >(( bp::arg("a") )) );
//         { //::PLib::HPoint_nD< float, 3 >::move
//         
//             typedef PLib::HPoint_nD< float, 3 > exported_class_t;
//             typedef void ( exported_class_t::*move_function_type )( ::PLib::Point_nD< float, 3 > const & ) ;
//             
//             HPoint_nD_less__float_comma__3__grate__exposer.def( 
//                 "move"
//                 , move_function_type( &::PLib::HPoint_nD< float, 3 >::move )
//                 , ( bp::arg("m") ) );
//         
//         }
//         HPoint_nD_less__float_comma__3__grate__exposer.def( bp::self *= bp::other< float >() );
//         HPoint_nD_less__float_comma__3__grate__exposer.def( bp::self += bp::self );
//         HPoint_nD_less__float_comma__3__grate__exposer.def( bp::self -= bp::self );
//         HPoint_nD_less__float_comma__3__grate__exposer.def( bp::self /= bp::other< float >() );
//         { //::PLib::HPoint_nD< float, 3 >::operator=
//         
//             typedef PLib::HPoint_nD< float, 3 > exported_class_t;
//             typedef ::PLib::HPoint_nD< float, 3 > & ( exported_class_t::*assign_function_type )( ::PLib::HPoint_nD< float, 3 > const & ) ;
//             
//             HPoint_nD_less__float_comma__3__grate__exposer.def( 
//                 "assign"
//                 , assign_function_type( &::PLib::HPoint_nD< float, 3 >::operator= )
//                 , ( bp::arg("v") )
//                 , bp::return_self< >() );
//         
//         }
//         { //::PLib::HPoint_nD< float, 3 >::operator=
//         
//             typedef PLib::HPoint_nD< float, 3 > exported_class_t;
//             typedef ::PLib::HPoint_nD< float, 3 > & ( exported_class_t::*assign_function_type )( ::PLib::Point_nD< float, 3 > const & ) ;
//             
//             HPoint_nD_less__float_comma__3__grate__exposer.def( 
//                 "assign"
//                 , assign_function_type( &::PLib::HPoint_nD< float, 3 >::operator= )
//                 , ( bp::arg("v") )
//                 , bp::return_self< >() );
//         
//         }
//         { //::PLib::HPoint_nD< float, 3 >::operator=
//         
//             typedef PLib::HPoint_nD< float, 3 > exported_class_t;
//             typedef ::PLib::HPoint_nD< float, 3 > & ( exported_class_t::*assign_function_type )( float const ) ;
//             
//             HPoint_nD_less__float_comma__3__grate__exposer.def( 
//                 "assign"
//                 , assign_function_type( &::PLib::HPoint_nD< float, 3 >::operator= )
//                 , ( bp::arg("v") )
//                 , bp::return_self< >() );
//         
//         }
//         { //::PLib::HPoint_nD< float, 3 >::projectW
//         
//             typedef PLib::HPoint_nD< float, 3 > exported_class_t;
//             typedef ::PLib::Point_nD< float, 3 > ( exported_class_t::*projectW_function_type )(  ) ;
//             
//             HPoint_nD_less__float_comma__3__grate__exposer.def( 
//                 "projectW"
//                 , projectW_function_type( &::PLib::HPoint_nD< float, 3 >::projectW ) );
//         
//         }
//         { //::PLib::HPoint_nD< float, 3 >::w
//         
//             typedef PLib::HPoint_nD< float, 3 > exported_class_t;
//             typedef float & ( exported_class_t::*w_function_type )(  ) ;
//             
//             HPoint_nD_less__float_comma__3__grate__exposer.def( 
//                 "w"
//                 , w_function_type( &::PLib::HPoint_nD< float, 3 >::w )
//                     /* undefined call policies */ );
//         
//         }
//         { //::PLib::HPoint_nD< float, 3 >::w
//         
//             typedef PLib::HPoint_nD< float, 3 > exported_class_t;
//             typedef float ( exported_class_t::*w_function_type )(  ) const;
//             
//             HPoint_nD_less__float_comma__3__grate__exposer.def( 
//                 "w"
//                 , w_function_type( &::PLib::HPoint_nD< float, 3 >::w ) );
//         
//         }
//         { //::PLib::HPoint_nD< float, 3 >::x
//         
//             typedef PLib::HPoint_nD< float, 3 > exported_class_t;
//             typedef float & ( exported_class_t::*x_function_type )(  ) ;
//             
//             HPoint_nD_less__float_comma__3__grate__exposer.def( 
//                 "x"
//                 , x_function_type( &::PLib::HPoint_nD< float, 3 >::x )
//                     /* undefined call policies */ );
//         
//         }
//         { //::PLib::HPoint_nD< float, 3 >::x
//         
//             typedef PLib::HPoint_nD< float, 3 > exported_class_t;
//             typedef float ( exported_class_t::*x_function_type )(  ) const;
//             
//             HPoint_nD_less__float_comma__3__grate__exposer.def( 
//                 "x"
//                 , x_function_type( &::PLib::HPoint_nD< float, 3 >::x ) );
//         
//         }
//         { //::PLib::HPoint_nD< float, 3 >::y
//         
//             typedef PLib::HPoint_nD< float, 3 > exported_class_t;
//             typedef float & ( exported_class_t::*y_function_type )(  ) ;
//             
//             HPoint_nD_less__float_comma__3__grate__exposer.def( 
//                 "y"
//                 , y_function_type( &::PLib::HPoint_nD< float, 3 >::y )
//                     /* undefined call policies */ );
//         
//         }
//         { //::PLib::HPoint_nD< float, 3 >::y
//         
//             typedef PLib::HPoint_nD< float, 3 > exported_class_t;
//             typedef float ( exported_class_t::*y_function_type )(  ) const;
//             
//             HPoint_nD_less__float_comma__3__grate__exposer.def( 
//                 "y"
//                 , y_function_type( &::PLib::HPoint_nD< float, 3 >::y ) );
//         
//         }
//         { //::PLib::HPoint_nD< float, 3 >::z
//         
//             typedef PLib::HPoint_nD< float, 3 > exported_class_t;
//             typedef float & ( exported_class_t::*z_function_type )(  ) ;
//             
//             HPoint_nD_less__float_comma__3__grate__exposer.def( 
//                 "z"
//                 , z_function_type( &::PLib::HPoint_nD< float, 3 >::z )
//                     /* undefined call policies */ );
//         
//         }
//         { //::PLib::HPoint_nD< float, 3 >::z
//         
//             typedef PLib::HPoint_nD< float, 3 > exported_class_t;
//             typedef float ( exported_class_t::*z_function_type )(  ) const;
//             
//             HPoint_nD_less__float_comma__3__grate__exposer.def( 
//                 "z"
//                 , z_function_type( &::PLib::HPoint_nD< float, 3 >::z ) );
//         
//         }
//         HPoint_nD_less__float_comma__3__grate__exposer.def_readwrite( "created", &PLib::HPoint_nD< float, 3 >::created );
//         HPoint_nD_less__float_comma__3__grate__exposer.def( bp::other< double >() * bp::self );
//         HPoint_nD_less__float_comma__3__grate__exposer.def( bp::self / bp::other< double >() );
//     }
// 
//     bp::implicitly_convertible< float, PLib::HPoint_nD< float, 3 > >();
// 
//     bp::implicitly_convertible< PLib::Point_nD< float, 3 > const &, PLib::HPoint_nD< float, 3 > >();

//     { //::PLib::Matrix< double >
//         typedef bp::class_< Matrix_less__double__grate__wrapper, bp::bases< PLib::Basic2DArray< double > > > Matrix_less__double__grate__exposer_t;
//         Matrix_less__double__grate__exposer_t Matrix_less__double__grate__exposer = Matrix_less__double__grate__exposer_t( "Matrix_less__double__grate_" );
//         bp::scope Matrix_less__double__grate__scope( Matrix_less__double__grate__exposer );
//         Matrix_less__double__grate__exposer.def( bp::init< int, int >(( bp::arg("r"), bp::arg("c") )) );
//         Matrix_less__double__grate__exposer.def( bp::init< >() );
//         Matrix_less__double__grate__exposer.def( bp::init< PLib::Matrix< double > const & >(( bp::arg("M") )) );
//         Matrix_less__double__grate__exposer.def( bp::init< double *, int, int >(( bp::arg("p"), bp::arg("r"), bp::arg("c") )) );
//         { //::PLib::Matrix< double >::as
//         
//             typedef PLib::Matrix< double > exported_class_t;
//             typedef void ( exported_class_t::*as_function_type )( int,int,::PLib::Matrix< double > & ) ;
//             
//             Matrix_less__double__grate__exposer.def( 
//                 "as"
//                 , as_function_type( &::PLib::Matrix< double >::as )
//                 , ( bp::arg("rw"), bp::arg("cl"), bp::arg("arg2") ) );
//         
//         }
//         { //::PLib::Matrix< double >::diag
//         
//             typedef PLib::Matrix< double > exported_class_t;
//             typedef void ( exported_class_t::*diag_function_type )( double const ) ;
//             
//             Matrix_less__double__grate__exposer.def( 
//                 "diag"
//                 , diag_function_type( &::PLib::Matrix< double >::diag )
//                 , ( bp::arg("fv") ) );
//         
//         }
//         { //::PLib::Matrix< double >::flop
//         
//             typedef PLib::Matrix< double > exported_class_t;
//             typedef ::PLib::Matrix< double > ( exported_class_t::*flop_function_type )(  ) const;
//             
//             Matrix_less__double__grate__exposer.def( 
//                 "flop"
//                 , flop_function_type( &::PLib::Matrix< double >::flop ) );
//         
//         }
//         { //::PLib::Matrix< double >::get
//         
//             typedef PLib::Matrix< double > exported_class_t;
//             typedef ::PLib::Matrix< double > ( exported_class_t::*get_function_type )( int,int,int,int ) const;
//             
//             Matrix_less__double__grate__exposer.def( 
//                 "get"
//                 , get_function_type( &::PLib::Matrix< double >::get )
//                 , ( bp::arg("rw"), bp::arg("cl"), bp::arg("nr"), bp::arg("nc") ) );
//         
//         }
//         { //::PLib::Matrix< double >::getDiag
//         
//             typedef PLib::Matrix< double > exported_class_t;
//             typedef ::PLib::Vector< double > ( exported_class_t::*getDiag_function_type )(  ) ;
//             
//             Matrix_less__double__grate__exposer.def( 
//                 "getDiag"
//                 , getDiag_function_type( &::PLib::Matrix< double >::getDiag ) );
//         
//         }
//         { //::PLib::Matrix< double >::herm
//         
//             typedef PLib::Matrix< double > exported_class_t;
//             typedef ::PLib::Matrix< double > ( exported_class_t::*herm_function_type )(  ) const;
//             
//             Matrix_less__double__grate__exposer.def( 
//                 "herm"
//                 , herm_function_type( &::PLib::Matrix< double >::herm ) );
//         
//         }
//         { //::PLib::Matrix< double >::norm
//         
//             typedef PLib::Matrix< double > exported_class_t;
//             typedef double ( exported_class_t::*norm_function_type )(  ) ;
//             
//             Matrix_less__double__grate__exposer.def( 
//                 "norm"
//                 , norm_function_type( &::PLib::Matrix< double >::norm ) );
//         
//         }
//         Matrix_less__double__grate__exposer.def( bp::self *= bp::other< double >() );
//         Matrix_less__double__grate__exposer.def( bp::self += bp::self );
//         Matrix_less__double__grate__exposer.def( bp::self += bp::other< double >() );
//         Matrix_less__double__grate__exposer.def( bp::self -= bp::self );
//         Matrix_less__double__grate__exposer.def( bp::self -= bp::other< double >() );
//         Matrix_less__double__grate__exposer.def( bp::self /= bp::other< double >() );
//         { //::PLib::Matrix< double >::operator=
//         
//             typedef PLib::Matrix< double > exported_class_t;
//             typedef ::PLib::Matrix< double > & ( exported_class_t::*assign_function_type )( ::PLib::Matrix< double > const & ) ;
//             
//             Matrix_less__double__grate__exposer.def( 
//                 "assign"
//                 , assign_function_type( &::PLib::Matrix< double >::operator= )
//                 , ( bp::arg("arg0") )
//                 , bp::return_self< >() );
//         
//         }
//         { //::PLib::Matrix< double >::operator=
//         
//             typedef PLib::Matrix< double > exported_class_t;
//             typedef double ( exported_class_t::*assign_function_type )( double const ) ;
//             
//             Matrix_less__double__grate__exposer.def( 
//                 "assign"
//                 , assign_function_type( &::PLib::Matrix< double >::operator= )
//                 , ( bp::arg("v") ) );
//         
//         }
//         { //::PLib::Matrix< double >::qSort
//         
//             typedef PLib::Matrix< double > exported_class_t;
//             typedef void ( exported_class_t::*qSort_function_type )(  ) ;
//             
//             Matrix_less__double__grate__exposer.def( 
//                 "qSort"
//                 , qSort_function_type( &::PLib::Matrix< double >::qSort ) );
//         
//         }
//         { //::PLib::Matrix< double >::read
//         
//             typedef PLib::Matrix< double > exported_class_t;
//             typedef int ( exported_class_t::*read_function_type )( char * ) ;
//             
//             Matrix_less__double__grate__exposer.def( 
//                 "read"
//                 , read_function_type( &::PLib::Matrix< double >::read )
//                 , ( bp::arg("filename") ) );
//         
//         }
//         { //::PLib::Matrix< double >::read
//         
//             typedef PLib::Matrix< double > exported_class_t;
//             typedef int ( exported_class_t::*read_function_type )( char *,int,int ) ;
//             
//             Matrix_less__double__grate__exposer.def( 
//                 "read"
//                 , read_function_type( &::PLib::Matrix< double >::read )
//                 , ( bp::arg("filename"), bp::arg("rows"), bp::arg("cols") ) );
//         
//         }
//         { //::PLib::Matrix< double >::submatrix
//         
//             typedef PLib::Matrix< double > exported_class_t;
//             typedef void ( exported_class_t::*submatrix_function_type )( int,int,::PLib::Matrix< double > & ) ;
//             
//             Matrix_less__double__grate__exposer.def( 
//                 "submatrix"
//                 , submatrix_function_type( &::PLib::Matrix< double >::submatrix )
//                 , ( bp::arg("i"), bp::arg("j"), bp::arg("arg2") ) );
//         
//         }
//         { //::PLib::Matrix< double >::trace
//         
//             typedef PLib::Matrix< double > exported_class_t;
//             typedef double ( exported_class_t::*trace_function_type )(  ) const;
//             
//             Matrix_less__double__grate__exposer.def( 
//                 "trace"
//                 , trace_function_type( &::PLib::Matrix< double >::trace ) );
//         
//         }
//         { //::PLib::Matrix< double >::transpose
//         
//             typedef PLib::Matrix< double > exported_class_t;
//             typedef ::PLib::Matrix< double > ( exported_class_t::*transpose_function_type )(  ) const;
//             
//             Matrix_less__double__grate__exposer.def( 
//                 "transpose"
//                 , transpose_function_type( &::PLib::Matrix< double >::transpose ) );
//         
//         }
//         { //::PLib::Matrix< double >::write
//         
//             typedef PLib::Matrix< double > exported_class_t;
//             typedef int ( exported_class_t::*write_function_type )( char * ) ;
//             
//             Matrix_less__double__grate__exposer.def( 
//                 "write"
//                 , write_function_type( &::PLib::Matrix< double >::write )
//                 , ( bp::arg("filename") ) );
//         
//         }
//         { //::PLib::Matrix< double >::writeRaw
//         
//             typedef PLib::Matrix< double > exported_class_t;
//             typedef int ( exported_class_t::*writeRaw_function_type )( char * ) ;
//             
//             Matrix_less__double__grate__exposer.def( 
//                 "writeRaw"
//                 , writeRaw_function_type( &::PLib::Matrix< double >::writeRaw )
//                 , ( bp::arg("filename") ) );
//         
//         }
//         { //::PLib::Basic2DArray< double >::init
//         
//             typedef PLib::Matrix< double > exported_class_t;
//             typedef void ( Matrix_less__double__grate__wrapper::*init_function_type )( int const,int const ) ;
//             
//             Matrix_less__double__grate__exposer.def( 
//                 "init"
//                 , init_function_type( &Matrix_less__double__grate__wrapper::init )
//                 , ( bp::arg("r")=(int const)(1), bp::arg("c")=(int const)(1) ) );
//         
//         }
// //         Matrix_less__double__grate__exposer.def( bp::self != bp::self );
//         Matrix_less__double__grate__exposer.def( bp::self * bp::other< PLib::Vector< double > >() );
//         Matrix_less__double__grate__exposer.def( bp::other< std::complex< double > >() * bp::self );
//         Matrix_less__double__grate__exposer.def( bp::other< double >() * bp::self );
//         Matrix_less__double__grate__exposer.def( bp::self * bp::self );
//         Matrix_less__double__grate__exposer.def( bp::self + bp::self );
//         Matrix_less__double__grate__exposer.def( bp::self - bp::self );
//         Matrix_less__double__grate__exposer.def( bp::self == bp::self );
//     }

//     bp::class_< MatrixErr_wrapper >( "MatrixErr" )    
//         .def( bp::init< >() )    
//         .def( 
//             "print"
//             , &::PLib::MatrixErr::print
//             , &MatrixErr_wrapper::default_print )    
//         .def( 
//             "print_debug"
//             , &::PLib::MatrixErr::print_debug );
// 
//     bp::class_< MatrixInputError_wrapper, bp::bases< PLib::MatrixErr > >( "MatrixInputError" )    
//         .def( bp::init< >() )    
//         .def( 
//             "print"
//             , &::PLib::MatrixInputError::print
//             , &MatrixInputError_wrapper::default_print );

//     { //::PLib::MatrixRT< double >
//         typedef bp::class_< MatrixRT_less__double__grate__wrapper, bp::bases< PLib::Matrix< double > > > MatrixRT_less__double__grate__exposer_t;
//         MatrixRT_less__double__grate__exposer_t MatrixRT_less__double__grate__exposer = MatrixRT_less__double__grate__exposer_t( "MatrixRT_less__double__grate_" );
//         bp::scope MatrixRT_less__double__grate__scope( MatrixRT_less__double__grate__exposer );
//         MatrixRT_less__double__grate__exposer.def( bp::init< double, double, double, double, double, double >(( bp::arg("ax"), bp::arg("ay"), bp::arg("az"), bp::arg("x"), bp::arg("y"), bp::arg("z") )) );
//         MatrixRT_less__double__grate__exposer.def( bp::init< >() );
//         MatrixRT_less__double__grate__exposer.def( bp::init< double * >(( bp::arg("p") )) );
//         MatrixRT_less__double__grate__exposer.def( bp::init< PLib::Matrix< double > const & >(( bp::arg("plM") )) );
//         { //::PLib::MatrixRT< double >::operator=
//         
//             typedef PLib::MatrixRT< double > exported_class_t;
//             typedef ::PLib::MatrixRT< double > & ( exported_class_t::*assign_function_type )( ::PLib::Matrix< double > const & ) ;
//             
//             MatrixRT_less__double__grate__exposer.def( 
//                 "assign"
//                 , assign_function_type( &::PLib::MatrixRT< double >::operator= )
//                 , ( bp::arg("M") )
//                 , bp::return_self< >() );
//         
//         }
//         { //::PLib::MatrixRT< double >::operator=
//         
//             typedef PLib::MatrixRT< double > exported_class_t;
//             typedef ::PLib::MatrixRT< double > & ( exported_class_t::*assign_function_type )( ::PLib::MatrixRT< double > const & ) ;
//             
//             MatrixRT_less__double__grate__exposer.def( 
//                 "assign"
//                 , assign_function_type( &::PLib::MatrixRT< double >::operator= )
//                 , ( bp::arg("M") )
//                 , bp::return_self< >() );
//         
//         }
//         { //::PLib::MatrixRT< double >::rotate
//         
//             typedef PLib::MatrixRT< double > exported_class_t;
//             typedef ::PLib::MatrixRT< double > & ( exported_class_t::*rotate_function_type )( double,double,double ) ;
//             
//             MatrixRT_less__double__grate__exposer.def( 
//                 "rotate"
//                 , rotate_function_type( &::PLib::MatrixRT< double >::rotate )
//                 , ( bp::arg("ax"), bp::arg("ay"), bp::arg("az") )
//                     /* undefined call policies */ );
//         
//         }
//         { //::PLib::MatrixRT< double >::rotateDeg
//         
//             typedef PLib::MatrixRT< double > exported_class_t;
//             typedef ::PLib::MatrixRT< double > & ( exported_class_t::*rotateDeg_function_type )( double,double,double ) ;
//             
//             MatrixRT_less__double__grate__exposer.def( 
//                 "rotateDeg"
//                 , rotateDeg_function_type( &::PLib::MatrixRT< double >::rotateDeg )
//                 , ( bp::arg("ax"), bp::arg("ay"), bp::arg("az") )
//                     /* undefined call policies */ );
//         
//         }
//         { //::PLib::MatrixRT< double >::rotateDegXYZ
//         
//             typedef PLib::MatrixRT< double > exported_class_t;
//             typedef ::PLib::MatrixRT< double > & ( exported_class_t::*rotateDegXYZ_function_type )( double,double,double ) ;
//             
//             MatrixRT_less__double__grate__exposer.def( 
//                 "rotateDegXYZ"
//                 , rotateDegXYZ_function_type( &::PLib::MatrixRT< double >::rotateDegXYZ )
//                 , ( bp::arg("ax"), bp::arg("ay"), bp::arg("az") )
//                     /* undefined call policies */ );
//         
//         }
//         { //::PLib::MatrixRT< double >::rotateXYZ
//         
//             typedef PLib::MatrixRT< double > exported_class_t;
//             typedef ::PLib::MatrixRT< double > & ( exported_class_t::*rotateXYZ_function_type )( double,double,double ) ;
//             
//             MatrixRT_less__double__grate__exposer.def( 
//                 "rotateXYZ"
//                 , rotateXYZ_function_type( &::PLib::MatrixRT< double >::rotateXYZ )
//                 , ( bp::arg("ax"), bp::arg("ay"), bp::arg("az") )
//                     /* undefined call policies */ );
//         
//         }
//         { //::PLib::MatrixRT< double >::scale
//         
//             typedef PLib::MatrixRT< double > exported_class_t;
//             typedef ::PLib::MatrixRT< double > & ( exported_class_t::*scale_function_type )( double,double,double ) ;
//             
//             MatrixRT_less__double__grate__exposer.def( 
//                 "scale"
//                 , scale_function_type( &::PLib::MatrixRT< double >::scale )
//                 , ( bp::arg("x"), bp::arg("y"), bp::arg("z") )
//                     /* undefined call policies */ );
//         
//         }
//         { //::PLib::MatrixRT< double >::translate
//         
//             typedef PLib::MatrixRT< double > exported_class_t;
//             typedef ::PLib::MatrixRT< double > & ( exported_class_t::*translate_function_type )( double,double,double ) ;
//             
//             MatrixRT_less__double__grate__exposer.def( 
//                 "translate"
//                 , translate_function_type( &::PLib::MatrixRT< double >::translate )
//                 , ( bp::arg("x"), bp::arg("y"), bp::arg("z") )
//                     /* undefined call policies */ );
//         
//         }
//         { //::PLib::Basic2DArray< double >::init
//         
//             typedef PLib::MatrixRT< double > exported_class_t;
//             typedef void ( MatrixRT_less__double__grate__wrapper::*init_function_type )( int const,int const ) ;
//             
//             MatrixRT_less__double__grate__exposer.def( 
//                 "init"
//                 , init_function_type( &MatrixRT_less__double__grate__wrapper::init )
//                 , ( bp::arg("r")=(int const)(1), bp::arg("c")=(int const)(1) ) );
//         
//         }
//         MatrixRT_less__double__grate__exposer.def( bp::self * bp::self );
//     }
// 
//     bp::implicitly_convertible< double *, PLib::MatrixRT< double > >();
// 
//     bp::implicitly_convertible< PLib::Matrix< double > const &, PLib::MatrixRT< double > >();

//     bp::class_< OutOfBound_wrapper, bp::bases< PLib::MatrixInputError > >( "OutOfBound", bp::init< int, int, int >(( bp::arg("index"), bp::arg("from"), bp::arg("to") )) )    
//         .def( 
//             "print"
//             , &::PLib::OutOfBound::print
//             , &OutOfBound_wrapper::default_print )    
//         .def_readwrite( "e", &PLib::OutOfBound::e )    
//         .def_readwrite( "i", &PLib::OutOfBound::i )    
//         .def_readwrite( "s", &PLib::OutOfBound::s );
// 
//     bp::class_< OutOfBound2D_wrapper, bp::bases< PLib::MatrixInputError > >( "OutOfBound2D", bp::init< int, int, int, int, int, int >(( bp::arg("I"), bp::arg("J"), bp::arg("fI"), bp::arg("tI"), bp::arg("fJ"), bp::arg("tJ") )) )    
//         .def( 
//             "print"
//             , &::PLib::OutOfBound2D::print
//             , &OutOfBound2D_wrapper::default_print )    
//         .def_readwrite( "e_i", &PLib::OutOfBound2D::e_i )    
//         .def_readwrite( "e_j", &PLib::OutOfBound2D::e_j )    
//         .def_readwrite( "i", &PLib::OutOfBound2D::i )    
//         .def_readwrite( "j", &PLib::OutOfBound2D::j )    
//         .def_readwrite( "s_i", &PLib::OutOfBound2D::s_i )    
//         .def_readwrite( "s_j", &PLib::OutOfBound2D::s_j );

//     { //::PLib::Point_nD< double, 2 >
//         typedef bp::class_< Point_nD_less__double_comma__2__grate__wrapper > Point_nD_less__double_comma__2__grate__exposer_t;
//         Point_nD_less__double_comma__2__grate__exposer_t Point_nD_less__double_comma__2__grate__exposer = Point_nD_less__double_comma__2__grate__exposer_t( "Point_nD_less__double_comma__2__grate_" );
//         bp::scope Point_nD_less__double_comma__2__grate__scope( Point_nD_less__double_comma__2__grate__exposer );
//         Point_nD_less__double_comma__2__grate__exposer.def( bp::init< >() );
//         Point_nD_less__double_comma__2__grate__exposer.def( bp::init< double >(( bp::arg("a") )) );
//         Point_nD_less__double_comma__2__grate__exposer.def( bp::init< double, double >(( bp::arg("X"), bp::arg("Y") )) );
//         Point_nD_less__double_comma__2__grate__exposer.def( bp::init< PLib::Point_nD< double, 2 > const & >(( bp::arg("a") )) );
//         { //::PLib::Point_nD< double, 2 >::norm
//         
//             typedef PLib::Point_nD< double, 2 > exported_class_t;
//             typedef double ( exported_class_t::*norm_function_type )(  ) const;
//             
//             Point_nD_less__double_comma__2__grate__exposer.def( 
//                 "norm"
//                 , norm_function_type( &::PLib::Point_nD< double, 2 >::norm ) );
//         
//         }
//         { //::PLib::Point_nD< double, 2 >::norm2
//         
//             typedef PLib::Point_nD< double, 2 > exported_class_t;
//             typedef double ( exported_class_t::*norm2_function_type )(  ) const;
//             
//             Point_nD_less__double_comma__2__grate__exposer.def( 
//                 "norm2"
//                 , norm2_function_type( &::PLib::Point_nD< double, 2 >::norm2 ) );
//         
//         }
//         Point_nD_less__double_comma__2__grate__exposer.def( bp::self *= bp::other< double >() );
//         Point_nD_less__double_comma__2__grate__exposer.def( bp::self += bp::self );
//         Point_nD_less__double_comma__2__grate__exposer.def( bp::self -= bp::self );
//         Point_nD_less__double_comma__2__grate__exposer.def( bp::self /= bp::other< double >() );
//         { //::PLib::Point_nD< double, 2 >::operator=
//         
//             typedef PLib::Point_nD< double, 2 > exported_class_t;
//             typedef ::PLib::Point_nD< double, 2 > & ( exported_class_t::*assign_function_type )( ::PLib::Point_nD< double, 2 > const & ) ;
//             
//             Point_nD_less__double_comma__2__grate__exposer.def( 
//                 "assign"
//                 , assign_function_type( &::PLib::Point_nD< double, 2 >::operator= )
//                 , ( bp::arg("v") )
//                 , bp::return_self< >() );
//         
//         }
//         { //::PLib::Point_nD< double, 2 >::unitLength
//         
//             typedef PLib::Point_nD< double, 2 > exported_class_t;
//             typedef ::PLib::Point_nD< double, 2 > ( exported_class_t::*unitLength_function_type )(  ) const;
//             
//             Point_nD_less__double_comma__2__grate__exposer.def( 
//                 "unitLength"
//                 , unitLength_function_type( &::PLib::Point_nD< double, 2 >::unitLength ) );
//         
//         }
//         { //::PLib::Point_nD< double, 2 >::x
//         
//             typedef PLib::Point_nD< double, 2 > exported_class_t;
//             typedef double & ( exported_class_t::*x_function_type )(  ) ;
//             
//             Point_nD_less__double_comma__2__grate__exposer.def( 
//                 "x"
//                 , x_function_type( &::PLib::Point_nD< double, 2 >::x )
//                     /* undefined call policies */ );
//         
//         }
//         { //::PLib::Point_nD< double, 2 >::x
//         
//             typedef PLib::Point_nD< double, 2 > exported_class_t;
//             typedef double ( exported_class_t::*x_function_type )(  ) const;
//             
//             Point_nD_less__double_comma__2__grate__exposer.def( 
//                 "x"
//                 , x_function_type( &::PLib::Point_nD< double, 2 >::x ) );
//         
//         }
//         { //::PLib::Point_nD< double, 2 >::y
//         
//             typedef PLib::Point_nD< double, 2 > exported_class_t;
//             typedef double & ( exported_class_t::*y_function_type )(  ) ;
//             
//             Point_nD_less__double_comma__2__grate__exposer.def( 
//                 "y"
//                 , y_function_type( &::PLib::Point_nD< double, 2 >::y )
//                     /* undefined call policies */ );
//         
//         }
//         { //::PLib::Point_nD< double, 2 >::y
//         
//             typedef PLib::Point_nD< double, 2 > exported_class_t;
//             typedef double ( exported_class_t::*y_function_type )(  ) const;
//             
//             Point_nD_less__double_comma__2__grate__exposer.def( 
//                 "y"
//                 , y_function_type( &::PLib::Point_nD< double, 2 >::y ) );
//         
//         }
//         { //::PLib::Point_nD< double, 2 >::z
//         
//             typedef PLib::Point_nD< double, 2 > exported_class_t;
//             typedef double & ( exported_class_t::*z_function_type )(  ) ;
//             
//             Point_nD_less__double_comma__2__grate__exposer.def( 
//                 "z"
//                 , z_function_type( &::PLib::Point_nD< double, 2 >::z )
//                     /* undefined call policies */ );
//         
//         }
//         { //::PLib::Point_nD< double, 2 >::z
//         
//             typedef PLib::Point_nD< double, 2 > exported_class_t;
//             typedef double ( exported_class_t::*z_function_type )(  ) const;
//             
//             Point_nD_less__double_comma__2__grate__exposer.def( 
//                 "z"
//                 , z_function_type( &::PLib::Point_nD< double, 2 >::z ) );
//         
//         }
//         pyplusplus::containers::static_sized::register_array_1< double, 2 >( "__array_1_double_2" );
//         { //PLib::Point_nD<double, 2>::data [variable], type=double[2]
//         
//             typedef pyplusplus::containers::static_sized::array_1_t< double, 2> ( *array_wrapper_creator )( ::PLib::Point_nD<double, 2> & );
//             
//             Point_nD_less__double_comma__2__grate__exposer.add_property( "data"
//                 , bp::make_function( array_wrapper_creator(&Point_nD_less__double_comma__2__grate__wrapper::pyplusplus_data_wrapper)
//                                     , bp::with_custodian_and_ward_postcall< 0, 1 >() ) );
//         }
//     }
// 
//     bp::implicitly_convertible< double, PLib::Point_nD< double, 2 > >();
// 
//     { //::PLib::Point_nD< double, 3 >
//         typedef bp::class_< Point_nD_less__double_comma__3__grate__wrapper > Point_nD_less__double_comma__3__grate__exposer_t;
//         Point_nD_less__double_comma__3__grate__exposer_t Point_nD_less__double_comma__3__grate__exposer = Point_nD_less__double_comma__3__grate__exposer_t( "Point_nD_less__double_comma__3__grate_" );
//         bp::scope Point_nD_less__double_comma__3__grate__scope( Point_nD_less__double_comma__3__grate__exposer );
//         Point_nD_less__double_comma__3__grate__exposer.def( bp::init< >() );
//         Point_nD_less__double_comma__3__grate__exposer.def( bp::init< double >(( bp::arg("a") )) );
//         Point_nD_less__double_comma__3__grate__exposer.def( bp::init< double, double, double >(( bp::arg("X"), bp::arg("Y"), bp::arg("Z") )) );
//         Point_nD_less__double_comma__3__grate__exposer.def( bp::init< PLib::Point_nD< double, 3 > const & >(( bp::arg("a") )) );
//         { //::PLib::Point_nD< double, 3 >::norm
//         
//             typedef PLib::Point_nD< double, 3 > exported_class_t;
//             typedef double ( exported_class_t::*norm_function_type )(  ) const;
//             
//             Point_nD_less__double_comma__3__grate__exposer.def( 
//                 "norm"
//                 , norm_function_type( &::PLib::Point_nD< double, 3 >::norm ) );
//         
//         }
//         { //::PLib::Point_nD< double, 3 >::norm2
//         
//             typedef PLib::Point_nD< double, 3 > exported_class_t;
//             typedef double ( exported_class_t::*norm2_function_type )(  ) const;
//             
//             Point_nD_less__double_comma__3__grate__exposer.def( 
//                 "norm2"
//                 , norm2_function_type( &::PLib::Point_nD< double, 3 >::norm2 ) );
//         
//         }
//         Point_nD_less__double_comma__3__grate__exposer.def( bp::self *= bp::other< double >() );
//         Point_nD_less__double_comma__3__grate__exposer.def( bp::self += bp::self );
//         Point_nD_less__double_comma__3__grate__exposer.def( bp::self -= bp::self );
//         Point_nD_less__double_comma__3__grate__exposer.def( bp::self /= bp::other< double >() );
//         { //::PLib::Point_nD< double, 3 >::operator=
//         
//             typedef PLib::Point_nD< double, 3 > exported_class_t;
//             typedef ::PLib::Point_nD< double, 3 > & ( exported_class_t::*assign_function_type )( ::PLib::Point_nD< double, 3 > const & ) ;
//             
//             Point_nD_less__double_comma__3__grate__exposer.def( 
//                 "assign"
//                 , assign_function_type( &::PLib::Point_nD< double, 3 >::operator= )
//                 , ( bp::arg("v") )
//                 , bp::return_self< >() );
//         
//         }
//         { //::PLib::Point_nD< double, 3 >::unitLength
//         
//             typedef PLib::Point_nD< double, 3 > exported_class_t;
//             typedef ::PLib::Point_nD< double, 3 > ( exported_class_t::*unitLength_function_type )(  ) const;
//             
//             Point_nD_less__double_comma__3__grate__exposer.def( 
//                 "unitLength"
//                 , unitLength_function_type( &::PLib::Point_nD< double, 3 >::unitLength ) );
//         
//         }
//         { //::PLib::Point_nD< double, 3 >::x
//         
//             typedef PLib::Point_nD< double, 3 > exported_class_t;
//             typedef double & ( exported_class_t::*x_function_type )(  ) ;
//             
//             Point_nD_less__double_comma__3__grate__exposer.def( 
//                 "x"
//                 , x_function_type( &::PLib::Point_nD< double, 3 >::x )
//                     /* undefined call policies */ );
//         
//         }
//         { //::PLib::Point_nD< double, 3 >::x
//         
//             typedef PLib::Point_nD< double, 3 > exported_class_t;
//             typedef double ( exported_class_t::*x_function_type )(  ) const;
//             
//             Point_nD_less__double_comma__3__grate__exposer.def( 
//                 "x"
//                 , x_function_type( &::PLib::Point_nD< double, 3 >::x ) );
//         
//         }
//         { //::PLib::Point_nD< double, 3 >::y
//         
//             typedef PLib::Point_nD< double, 3 > exported_class_t;
//             typedef double & ( exported_class_t::*y_function_type )(  ) ;
//             
//             Point_nD_less__double_comma__3__grate__exposer.def( 
//                 "y"
//                 , y_function_type( &::PLib::Point_nD< double, 3 >::y )
//                     /* undefined call policies */ );
//         
//         }
//         { //::PLib::Point_nD< double, 3 >::y
//         
//             typedef PLib::Point_nD< double, 3 > exported_class_t;
//             typedef double ( exported_class_t::*y_function_type )(  ) const;
//             
//             Point_nD_less__double_comma__3__grate__exposer.def( 
//                 "y"
//                 , y_function_type( &::PLib::Point_nD< double, 3 >::y ) );
//         
//         }
//         { //::PLib::Point_nD< double, 3 >::z
//         
//             typedef PLib::Point_nD< double, 3 > exported_class_t;
//             typedef double & ( exported_class_t::*z_function_type )(  ) ;
//             
//             Point_nD_less__double_comma__3__grate__exposer.def( 
//                 "z"
//                 , z_function_type( &::PLib::Point_nD< double, 3 >::z )
//                     /* undefined call policies */ );
//         
//         }
//         { //::PLib::Point_nD< double, 3 >::z
//         
//             typedef PLib::Point_nD< double, 3 > exported_class_t;
//             typedef double ( exported_class_t::*z_function_type )(  ) const;
//             
//             Point_nD_less__double_comma__3__grate__exposer.def( 
//                 "z"
//                 , z_function_type( &::PLib::Point_nD< double, 3 >::z ) );
//         
//         }
//         pyplusplus::containers::static_sized::register_array_1< double, 3 >( "__array_1_double_3" );
//         { //PLib::Point_nD<double, 3>::data [variable], type=double[3]
//         
//             typedef pyplusplus::containers::static_sized::array_1_t< double, 3> ( *array_wrapper_creator )( ::PLib::Point_nD<double, 3> & );
//             
//             Point_nD_less__double_comma__3__grate__exposer.add_property( "data"
//                 , bp::make_function( array_wrapper_creator(&Point_nD_less__double_comma__3__grate__wrapper::pyplusplus_data_wrapper)
//                                     , bp::with_custodian_and_ward_postcall< 0, 1 >() ) );
//         }
//     }
// 
//     bp::implicitly_convertible< double, PLib::Point_nD< double, 3 > >();
// 
//     { //::PLib::Point_nD< float, 2 >
//         typedef bp::class_< Point_nD_less__float_comma__2__grate__wrapper > Point_nD_less__float_comma__2__grate__exposer_t;
//         Point_nD_less__float_comma__2__grate__exposer_t Point_nD_less__float_comma__2__grate__exposer = Point_nD_less__float_comma__2__grate__exposer_t( "Point_nD_less__float_comma__2__grate_" );
//         bp::scope Point_nD_less__float_comma__2__grate__scope( Point_nD_less__float_comma__2__grate__exposer );
//         Point_nD_less__float_comma__2__grate__exposer.def( bp::init< >() );
//         Point_nD_less__float_comma__2__grate__exposer.def( bp::init< float >(( bp::arg("a") )) );
//         Point_nD_less__float_comma__2__grate__exposer.def( bp::init< float, float >(( bp::arg("X"), bp::arg("Y") )) );
//         Point_nD_less__float_comma__2__grate__exposer.def( bp::init< PLib::Point_nD< float, 2 > const & >(( bp::arg("a") )) );
//         { //::PLib::Point_nD< float, 2 >::norm
//         
//             typedef PLib::Point_nD< float, 2 > exported_class_t;
//             typedef float ( exported_class_t::*norm_function_type )(  ) const;
//             
//             Point_nD_less__float_comma__2__grate__exposer.def( 
//                 "norm"
//                 , norm_function_type( &::PLib::Point_nD< float, 2 >::norm ) );
//         
//         }
//         { //::PLib::Point_nD< float, 2 >::norm2
//         
//             typedef PLib::Point_nD< float, 2 > exported_class_t;
//             typedef float ( exported_class_t::*norm2_function_type )(  ) const;
//             
//             Point_nD_less__float_comma__2__grate__exposer.def( 
//                 "norm2"
//                 , norm2_function_type( &::PLib::Point_nD< float, 2 >::norm2 ) );
//         
//         }
//         Point_nD_less__float_comma__2__grate__exposer.def( bp::self *= bp::other< float >() );
//         Point_nD_less__float_comma__2__grate__exposer.def( bp::self += bp::self );
//         Point_nD_less__float_comma__2__grate__exposer.def( bp::self -= bp::self );
//         Point_nD_less__float_comma__2__grate__exposer.def( bp::self /= bp::other< float >() );
//         { //::PLib::Point_nD< float, 2 >::operator=
//         
//             typedef PLib::Point_nD< float, 2 > exported_class_t;
//             typedef ::PLib::Point_nD< float, 2 > & ( exported_class_t::*assign_function_type )( ::PLib::Point_nD< float, 2 > const & ) ;
//             
//             Point_nD_less__float_comma__2__grate__exposer.def( 
//                 "assign"
//                 , assign_function_type( &::PLib::Point_nD< float, 2 >::operator= )
//                 , ( bp::arg("v") )
//                 , bp::return_self< >() );
//         
//         }
//         { //::PLib::Point_nD< float, 2 >::unitLength
//         
//             typedef PLib::Point_nD< float, 2 > exported_class_t;
//             typedef ::PLib::Point_nD< float, 2 > ( exported_class_t::*unitLength_function_type )(  ) const;
//             
//             Point_nD_less__float_comma__2__grate__exposer.def( 
//                 "unitLength"
//                 , unitLength_function_type( &::PLib::Point_nD< float, 2 >::unitLength ) );
//         
//         }
//         { //::PLib::Point_nD< float, 2 >::x
//         
//             typedef PLib::Point_nD< float, 2 > exported_class_t;
//             typedef float & ( exported_class_t::*x_function_type )(  ) ;
//             
//             Point_nD_less__float_comma__2__grate__exposer.def( 
//                 "x"
//                 , x_function_type( &::PLib::Point_nD< float, 2 >::x )
//                     /* undefined call policies */ );
//         
//         }
//         { //::PLib::Point_nD< float, 2 >::x
//         
//             typedef PLib::Point_nD< float, 2 > exported_class_t;
//             typedef float ( exported_class_t::*x_function_type )(  ) const;
//             
//             Point_nD_less__float_comma__2__grate__exposer.def( 
//                 "x"
//                 , x_function_type( &::PLib::Point_nD< float, 2 >::x ) );
//         
//         }
//         { //::PLib::Point_nD< float, 2 >::y
//         
//             typedef PLib::Point_nD< float, 2 > exported_class_t;
//             typedef float & ( exported_class_t::*y_function_type )(  ) ;
//             
//             Point_nD_less__float_comma__2__grate__exposer.def( 
//                 "y"
//                 , y_function_type( &::PLib::Point_nD< float, 2 >::y )
//                     /* undefined call policies */ );
//         
//         }
//         { //::PLib::Point_nD< float, 2 >::y
//         
//             typedef PLib::Point_nD< float, 2 > exported_class_t;
//             typedef float ( exported_class_t::*y_function_type )(  ) const;
//             
//             Point_nD_less__float_comma__2__grate__exposer.def( 
//                 "y"
//                 , y_function_type( &::PLib::Point_nD< float, 2 >::y ) );
//         
//         }
//         { //::PLib::Point_nD< float, 2 >::z
//         
//             typedef PLib::Point_nD< float, 2 > exported_class_t;
//             typedef float & ( exported_class_t::*z_function_type )(  ) ;
//             
//             Point_nD_less__float_comma__2__grate__exposer.def( 
//                 "z"
//                 , z_function_type( &::PLib::Point_nD< float, 2 >::z )
//                     /* undefined call policies */ );
//         
//         }
//         { //::PLib::Point_nD< float, 2 >::z
//         
//             typedef PLib::Point_nD< float, 2 > exported_class_t;
//             typedef float ( exported_class_t::*z_function_type )(  ) const;
//             
//             Point_nD_less__float_comma__2__grate__exposer.def( 
//                 "z"
//                 , z_function_type( &::PLib::Point_nD< float, 2 >::z ) );
//         
//         }
//         pyplusplus::containers::static_sized::register_array_1< float, 2 >( "__array_1_float_2" );
//         { //PLib::Point_nD<float, 2>::data [variable], type=float[2]
//         
//             typedef pyplusplus::containers::static_sized::array_1_t< float, 2> ( *array_wrapper_creator )( ::PLib::Point_nD<float, 2> & );
//             
//             Point_nD_less__float_comma__2__grate__exposer.add_property( "data"
//                 , bp::make_function( array_wrapper_creator(&Point_nD_less__float_comma__2__grate__wrapper::pyplusplus_data_wrapper)
//                                     , bp::with_custodian_and_ward_postcall< 0, 1 >() ) );
//         }
//         Point_nD_less__float_comma__2__grate__exposer.def( bp::self * bp::other< double >() );
//         Point_nD_less__float_comma__2__grate__exposer.def( bp::other< double >() * bp::self );
//         Point_nD_less__float_comma__2__grate__exposer.def( bp::self / bp::other< double >() );
//     }
// 
//     bp::implicitly_convertible< float, PLib::Point_nD< float, 2 > >();
// 
//     { //::PLib::Point_nD< float, 3 >
//         typedef bp::class_< Point_nD_less__float_comma__3__grate__wrapper > Point_nD_less__float_comma__3__grate__exposer_t;
//         Point_nD_less__float_comma__3__grate__exposer_t Point_nD_less__float_comma__3__grate__exposer = Point_nD_less__float_comma__3__grate__exposer_t( "Point_nD_less__float_comma__3__grate_" );
//         bp::scope Point_nD_less__float_comma__3__grate__scope( Point_nD_less__float_comma__3__grate__exposer );
//         Point_nD_less__float_comma__3__grate__exposer.def( bp::init< >() );
//         Point_nD_less__float_comma__3__grate__exposer.def( bp::init< float >(( bp::arg("a") )) );
//         Point_nD_less__float_comma__3__grate__exposer.def( bp::init< float, float, float >(( bp::arg("X"), bp::arg("Y"), bp::arg("Z") )) );
//         Point_nD_less__float_comma__3__grate__exposer.def( bp::init< PLib::Point_nD< float, 3 > const & >(( bp::arg("a") )) );
//         { //::PLib::Point_nD< float, 3 >::norm
//         
//             typedef PLib::Point_nD< float, 3 > exported_class_t;
//             typedef float ( exported_class_t::*norm_function_type )(  ) const;
//             
//             Point_nD_less__float_comma__3__grate__exposer.def( 
//                 "norm"
//                 , norm_function_type( &::PLib::Point_nD< float, 3 >::norm ) );
//         
//         }
//         { //::PLib::Point_nD< float, 3 >::norm2
//         
//             typedef PLib::Point_nD< float, 3 > exported_class_t;
//             typedef float ( exported_class_t::*norm2_function_type )(  ) const;
//             
//             Point_nD_less__float_comma__3__grate__exposer.def( 
//                 "norm2"
//                 , norm2_function_type( &::PLib::Point_nD< float, 3 >::norm2 ) );
//         
//         }
//         Point_nD_less__float_comma__3__grate__exposer.def( bp::self *= bp::other< float >() );
//         Point_nD_less__float_comma__3__grate__exposer.def( bp::self += bp::self );
//         Point_nD_less__float_comma__3__grate__exposer.def( bp::self -= bp::self );
//         Point_nD_less__float_comma__3__grate__exposer.def( bp::self /= bp::other< float >() );
//         { //::PLib::Point_nD< float, 3 >::operator=
//         
//             typedef PLib::Point_nD< float, 3 > exported_class_t;
//             typedef ::PLib::Point_nD< float, 3 > & ( exported_class_t::*assign_function_type )( ::PLib::Point_nD< float, 3 > const & ) ;
//             
//             Point_nD_less__float_comma__3__grate__exposer.def( 
//                 "assign"
//                 , assign_function_type( &::PLib::Point_nD< float, 3 >::operator= )
//                 , ( bp::arg("v") )
//                 , bp::return_self< >() );
//         
//         }
//         { //::PLib::Point_nD< float, 3 >::unitLength
//         
//             typedef PLib::Point_nD< float, 3 > exported_class_t;
//             typedef ::PLib::Point_nD< float, 3 > ( exported_class_t::*unitLength_function_type )(  ) const;
//             
//             Point_nD_less__float_comma__3__grate__exposer.def( 
//                 "unitLength"
//                 , unitLength_function_type( &::PLib::Point_nD< float, 3 >::unitLength ) );
//         
//         }
//         { //::PLib::Point_nD< float, 3 >::x
//         
//             typedef PLib::Point_nD< float, 3 > exported_class_t;
//             typedef float & ( exported_class_t::*x_function_type )(  ) ;
//             
//             Point_nD_less__float_comma__3__grate__exposer.def( 
//                 "x"
//                 , x_function_type( &::PLib::Point_nD< float, 3 >::x )
//                     /* undefined call policies */ );
//         
//         }
//         { //::PLib::Point_nD< float, 3 >::x
//         
//             typedef PLib::Point_nD< float, 3 > exported_class_t;
//             typedef float ( exported_class_t::*x_function_type )(  ) const;
//             
//             Point_nD_less__float_comma__3__grate__exposer.def( 
//                 "x"
//                 , x_function_type( &::PLib::Point_nD< float, 3 >::x ) );
//         
//         }
//         { //::PLib::Point_nD< float, 3 >::y
//         
//             typedef PLib::Point_nD< float, 3 > exported_class_t;
//             typedef float & ( exported_class_t::*y_function_type )(  ) ;
//             
//             Point_nD_less__float_comma__3__grate__exposer.def( 
//                 "y"
//                 , y_function_type( &::PLib::Point_nD< float, 3 >::y )
//                     /* undefined call policies */ );
//         
//         }
//         { //::PLib::Point_nD< float, 3 >::y
//         
//             typedef PLib::Point_nD< float, 3 > exported_class_t;
//             typedef float ( exported_class_t::*y_function_type )(  ) const;
//             
//             Point_nD_less__float_comma__3__grate__exposer.def( 
//                 "y"
//                 , y_function_type( &::PLib::Point_nD< float, 3 >::y ) );
//         
//         }
//         { //::PLib::Point_nD< float, 3 >::z
//         
//             typedef PLib::Point_nD< float, 3 > exported_class_t;
//             typedef float & ( exported_class_t::*z_function_type )(  ) ;
//             
//             Point_nD_less__float_comma__3__grate__exposer.def( 
//                 "z"
//                 , z_function_type( &::PLib::Point_nD< float, 3 >::z )
//                     /* undefined call policies */ );
//         
//         }
//         { //::PLib::Point_nD< float, 3 >::z
//         
//             typedef PLib::Point_nD< float, 3 > exported_class_t;
//             typedef float ( exported_class_t::*z_function_type )(  ) const;
//             
//             Point_nD_less__float_comma__3__grate__exposer.def( 
//                 "z"
//                 , z_function_type( &::PLib::Point_nD< float, 3 >::z ) );
//         
//         }
//         pyplusplus::containers::static_sized::register_array_1< float, 3 >( "__array_1_float_3" );
//         { //PLib::Point_nD<float, 3>::data [variable], type=float[3]
//         
//             typedef pyplusplus::containers::static_sized::array_1_t< float, 3> ( *array_wrapper_creator )( ::PLib::Point_nD<float, 3> & );
//             
//             Point_nD_less__float_comma__3__grate__exposer.add_property( "data"
//                 , bp::make_function( array_wrapper_creator(&Point_nD_less__float_comma__3__grate__wrapper::pyplusplus_data_wrapper)
//                                     , bp::with_custodian_and_ward_postcall< 0, 1 >() ) );
//         }
//         Point_nD_less__float_comma__3__grate__exposer.def( bp::self * bp::other< double >() );
//         Point_nD_less__float_comma__3__grate__exposer.def( bp::other< double >() * bp::self );
//         Point_nD_less__float_comma__3__grate__exposer.def( bp::self / bp::other< double >() );
//     }
// 
//     bp::implicitly_convertible< float, PLib::Point_nD< float, 3 > >();

    { //::PLib::Vector< int >
        typedef bp::class_< PLib::Vector< int >, bp::bases< PLib::BasicArray< int > > > Vector_INT_exposer_t;
        Vector_INT_exposer_t Vector_INT_exposer = Vector_INT_exposer_t( "Vector_INT" );
        bp::scope Vector_INT_scope( Vector_INT_exposer );
        Vector_INT_exposer.def( bp::init< >() );
        Vector_INT_exposer.def( bp::init< int >(( bp::arg("r") )) );
        Vector_INT_exposer.def( bp::init< PLib::Vector< int > const & >(( bp::arg("v") )) );
        Vector_INT_exposer.def( bp::init< PLib::BasicArray< int > const & >(( bp::arg("v") )) );
        Vector_INT_exposer.def( bp::init< int *, int >(( bp::arg("ap"), bp::arg("size") )) );
        Vector_INT_exposer.def( bp::init< BasicList< int > & >(( bp::arg("list") )) );
        { //::PLib::Vector< int >::as
        
            typedef PLib::Vector< int > exported_class_t;
            typedef void ( exported_class_t::*as_function_type )( int,::PLib::Vector< int > const & ) ;
            
            Vector_INT_exposer.def( 
                "as"
                , as_function_type( &::PLib::Vector< int >::as )
                , ( bp::arg("i"), bp::arg("b") ) );
        
        }
        { //::PLib::Vector< int >::get
        
            typedef PLib::Vector< int > exported_class_t;
            typedef ::PLib::Vector< int > ( exported_class_t::*get_function_type )( int,int ) ;
            
            Vector_INT_exposer.def( 
                "get"
                , get_function_type( &::PLib::Vector< int >::get )
                , ( bp::arg("i"), bp::arg("l") ) );
        
        }
        { //::PLib::Vector< int >::minIndex
        
            typedef PLib::Vector< int > exported_class_t;
            typedef int ( exported_class_t::*minIndex_function_type )(  ) const;
            
            Vector_INT_exposer.def( 
                "minIndex"
                , minIndex_function_type( &::PLib::Vector< int >::minIndex ) );
        
        }
        { //::PLib::Vector< int >::minimum
        
            typedef PLib::Vector< int > exported_class_t;
            typedef int ( exported_class_t::*minimum_function_type )(  ) const;
            
            Vector_INT_exposer.def( 
                "minimum"
                , minimum_function_type( &::PLib::Vector< int >::minimum ) );
        
        }
        Vector_INT_exposer.def( bp::self += bp::self );
        Vector_INT_exposer.def( bp::self -= bp::self );
        { //::PLib::Vector< int >::operator=
        
            typedef PLib::Vector< int > exported_class_t;
            typedef ::PLib::Vector< int > & ( exported_class_t::*assign_function_type )( ::PLib::Vector< int > const & ) ;
            
            Vector_INT_exposer.def( 
                "assign"
                , assign_function_type( &::PLib::Vector< int >::operator= )
                , ( bp::arg("v") )
                , bp::return_self< >() );
        
        }
        { //::PLib::Vector< int >::operator=
        
            typedef PLib::Vector< int > exported_class_t;
            typedef ::PLib::Vector< int > & ( exported_class_t::*assign_function_type )( ::PLib::BasicArray< int > const & ) ;
            
            Vector_INT_exposer.def( 
                "assign"
                , assign_function_type( &::PLib::Vector< int >::operator= )
                , ( bp::arg("b") )
                , bp::return_self< >() );
        
        }
        { //::PLib::Vector< int >::operator=
        
            typedef PLib::Vector< int > exported_class_t;
            typedef int ( exported_class_t::*assign_function_type )( int const ) ;
            
            Vector_INT_exposer.def( 
                "assign"
                , assign_function_type( &::PLib::Vector< int >::operator= )
                , ( bp::arg("d") ) );
        
        }
        { //::PLib::Vector< int >::qSort
        
            typedef PLib::Vector< int > exported_class_t;
            typedef void ( exported_class_t::*qSort_function_type )( int ) ;
            
            Vector_INT_exposer.def( 
                "qSort"
                , qSort_function_type( &::PLib::Vector< int >::qSort )
                , ( bp::arg("M")=(int)(7) ) );
        
        }
        { //::PLib::Vector< int >::qSortStd
        
            typedef PLib::Vector< int > exported_class_t;
            typedef void ( exported_class_t::*qSortStd_function_type )(  ) ;
            
            Vector_INT_exposer.def( 
                "qSortStd"
                , qSortStd_function_type( &::PLib::Vector< int >::qSortStd ) );
        
        }
        { //::PLib::Vector< int >::rows
        
            typedef PLib::Vector< int > exported_class_t;
            typedef int ( exported_class_t::*rows_function_type )(  ) const;
            
            Vector_INT_exposer.def( 
                "rows"
                , rows_function_type( &::PLib::Vector< int >::rows ) );
        
        }
        { //::PLib::Vector< int >::sortIndex
        
            typedef PLib::Vector< int > exported_class_t;
            typedef void ( exported_class_t::*sortIndex_function_type )( ::PLib::Vector< int > &,int ) const;
            
            Vector_INT_exposer.def( 
                "sortIndex"
                , sortIndex_function_type( &::PLib::Vector< int >::sortIndex )
                , ( bp::arg("index"), bp::arg("M")=(int)(7) ) );
        
        }
        Vector_INT_exposer.def( bp::self != bp::self );
        Vector_INT_exposer.def( bp::other< std::complex< double > >() * bp::self );
        Vector_INT_exposer.def( bp::other< double >() * bp::self );
        Vector_INT_exposer.def( bp::self * bp::other< std::complex< double > >() );
        Vector_INT_exposer.def( bp::self * bp::other< double >() );
        Vector_INT_exposer.def( bp::self * bp::self );
        Vector_INT_exposer.def( bp::self + bp::self );
        Vector_INT_exposer.def( bp::self - bp::self );
        Vector_INT_exposer.def( bp::self == bp::self );
    }

    bp::implicitly_convertible< int const, PLib::Vector< int > >();

    bp::implicitly_convertible< PLib::BasicArray< int > const &, PLib::Vector< int > >();

    bp::implicitly_convertible< BasicList< int > &, PLib::Vector< int > >();

//     bp::class_< WrongSize_wrapper, bp::bases< PLib::MatrixInputError > >( "WrongSize", bp::init< int, int >(( bp::arg("a"), bp::arg("b") )) )    
//         .def( 
//             "print"
//             , &::PLib::WrongSize::print
//             , &WrongSize_wrapper::default_print )    
//         .def_readwrite( "s1", &PLib::WrongSize::s1 )    
//         .def_readwrite( "s2", &PLib::WrongSize::s2 );
// 
//     bp::class_< WrongSize2D_wrapper, bp::bases< PLib::MatrixInputError > >( "WrongSize2D", bp::init< int, int, int, int >(( bp::arg("r"), bp::arg("c"), bp::arg("br"), bp::arg("bc") )) )    
//         .def( 
//             "print"
//             , &::PLib::WrongSize2D::print
//             , &WrongSize2D_wrapper::default_print )    
//         .def_readwrite( "bad_cols", &PLib::WrongSize2D::bad_cols )    
//         .def_readwrite( "bad_rows", &PLib::WrongSize2D::bad_rows )    
//         .def_readwrite( "cols", &PLib::WrongSize2D::cols )    
//         .def_readwrite( "rows", &PLib::WrongSize2D::rows );

    { //::PLib::absolute
    
        typedef float ( *absolute_function_type )( float );
        
        bp::def( 
            "absolute"
            , absolute_function_type( &::PLib::absolute )
            , ( bp::arg("a") ) );
    
    }

    { //::PLib::absolute
    
        typedef double ( *absolute_function_type )( double );
        
        bp::def( 
            "absolute"
            , absolute_function_type( &::PLib::absolute )
            , ( bp::arg("a") ) );
    
    }

    { //::PLib::compareDouble
    
        typedef int ( *compareDouble_function_type )( void const *,void const * );
        
        bp::def( 
            "compareDouble"
            , compareDouble_function_type( &::PLib::compareDouble )
            , ( bp::arg("a"), bp::arg("b") ) );
    
    }

    { //::PLib::compareFloat
    
        typedef int ( *compareFloat_function_type )( void const *,void const * );
        
        bp::def( 
            "compareFloat"
            , compareFloat_function_type( &::PLib::compareFloat )
            , ( bp::arg("a"), bp::arg("b") ) );
    
    }

    { //::PLib::compareInt
    
        typedef int ( *compareInt_function_type )( void const *,void const * );
        
        bp::def( 
            "compareInt"
            , compareInt_function_type( &::PLib::compareInt )
            , ( bp::arg("a"), bp::arg("b") ) );
    
    }

    { //::PLib::compareT
    
        typedef int ( *compareT_function_type )( float *,float * );
        
        bp::def( 
            "compareT"
            , compareT_function_type( &::PLib::compareT )
            , ( bp::arg("a"), bp::arg("b") ) );
    
    }

    { //::PLib::compareT
    
        typedef int ( *compareT_function_type )( int *,int * );
        
        bp::def( 
            "compareT"
            , compareT_function_type( &::PLib::compareT )
            , ( bp::arg("a"), bp::arg("b") ) );
    
    }

//     { //::PLib::distance
//     
//         typedef float ( *distance_function_type )( ::PLib::Coordinate const & );
//         
//         bp::def( 
//             "distance"
//             , distance_function_type( &::PLib::distance )
//             , ( bp::arg("a") ) );
//     
//     }
// 
//     { //::PLib::distance2
//     
//         typedef float ( *distance2_function_type )( ::PLib::Coordinate const & );
//         
//         bp::def( 
//             "distance2"
//             , distance2_function_type( &::PLib::distance2 )
//             , ( bp::arg("a") ) );
//     
//     }

    { //::PLib::initBasic2DArray
    
        typedef void ( *initBasic2DArray_function_type )( ::PLib::Basic2DArray< double > &,int const,int const );
        
        bp::def( 
            "initBasic2DArray"
            , initBasic2DArray_function_type( &::PLib::initBasic2DArray )
            , ( bp::arg("ary"), bp::arg("nr"), bp::arg("nc") ) );
    
    }

    { //::PLib::initBasic2DArray
    
        typedef void ( *initBasic2DArray_function_type )( ::PLib::Basic2DArray< PLib::HPoint_nD< double, 2 > > &,int const,int const );
        
        bp::def( 
            "initBasic2DArray"
            , initBasic2DArray_function_type( &::PLib::initBasic2DArray )
            , ( bp::arg("ary"), bp::arg("nr"), bp::arg("nc") ) );
    
    }

    { //::PLib::initBasic2DArray
    
        typedef void ( *initBasic2DArray_function_type )( ::PLib::Basic2DArray< PLib::HPoint_nD< float, 2 > > &,int const,int const );
        
        bp::def( 
            "initBasic2DArray"
            , initBasic2DArray_function_type( &::PLib::initBasic2DArray )
            , ( bp::arg("ary"), bp::arg("nr"), bp::arg("nc") ) );
    
    }

    { //::PLib::initBasic2DArray
    
        typedef void ( *initBasic2DArray_function_type )( ::PLib::Basic2DArray< PLib::HPoint_nD< double, 3 > > &,int const,int const );
        
        bp::def( 
            "initBasic2DArray"
            , initBasic2DArray_function_type( &::PLib::initBasic2DArray )
            , ( bp::arg("ary"), bp::arg("nr"), bp::arg("nc") ) );
    
    }

//     { //::PLib::initBasic2DArray
//     
//         typedef void ( *initBasic2DArray_function_type )( ::PLib::Basic2DArray< PLib::HPoint_nD< float, 3 > > &,int const,int const );
//         
//         bp::def( 
//             "initBasic2DArray"
//             , initBasic2DArray_function_type( &::PLib::initBasic2DArray )
//             , ( bp::arg("ary"), bp::arg("nr"), bp::arg("nc") ) );
//     
//     }

    { //::PLib::initBasic2DArrayHPoint
    
        typedef void ( *initBasic2DArrayHPoint_function_type )( ::PLib::Basic2DArray< PLib::HPoint_nD< double, 2 > > &,int const,int const );
        
        bp::def( 
            "initBasic2DArrayHPoint"
            , initBasic2DArrayHPoint_function_type( &::PLib::initBasic2DArrayHPoint )
            , ( bp::arg("a"), bp::arg("r"), bp::arg("c") ) );
    
    }

//     { //::PLib::initBasic2DArrayHPoint
//     
//         typedef void ( *initBasic2DArrayHPoint_function_type )( ::PLib::Basic2DArray< PLib::HPoint_nD< float, 2 > > &,int const,int const );
//         
//         bp::def( 
//             "initBasic2DArrayHPoint"
//             , initBasic2DArrayHPoint_function_type( &::PLib::initBasic2DArrayHPoint )
//             , ( bp::arg("a"), bp::arg("r"), bp::arg("c") ) );
//     
//     }

    { //::PLib::initBasic2DArrayHPoint
    
        typedef void ( *initBasic2DArrayHPoint_function_type )( ::PLib::Basic2DArray< PLib::HPoint_nD< double, 3 > > &,int const,int const );
        
        bp::def( 
            "initBasic2DArrayHPoint"
            , initBasic2DArrayHPoint_function_type( &::PLib::initBasic2DArrayHPoint )
            , ( bp::arg("a"), bp::arg("r"), bp::arg("c") ) );
    
    }

//     { //::PLib::initBasic2DArrayHPoint
//     
//         typedef void ( *initBasic2DArrayHPoint_function_type )( ::PLib::Basic2DArray< PLib::HPoint_nD< float, 3 > > &,int const,int const );
//         
//         bp::def( 
//             "initBasic2DArrayHPoint"
//             , initBasic2DArrayHPoint_function_type( &::PLib::initBasic2DArrayHPoint )
//             , ( bp::arg("a"), bp::arg("r"), bp::arg("c") ) );
//     
//     }

    { //::PLib::maximum
    
        typedef ::PLib::Point_nD< double, 2 > ( *maximum_function_type )( ::PLib::Point_nD< double, 2 >,::PLib::Point_nD< double, 2 > );
        
        bp::def( 
            "maximum"
            , maximum_function_type( &::PLib::maximum )
            , ( bp::arg("a"), bp::arg("b") ) );
    
    }

//     { //::PLib::maximum
//     
//         typedef ::PLib::Point_nD< float, 2 > ( *maximum_function_type )( ::PLib::Point_nD< float, 2 >,::PLib::Point_nD< float, 2 > );
//         
//         bp::def( 
//             "maximum"
//             , maximum_function_type( &::PLib::maximum )
//             , ( bp::arg("a"), bp::arg("b") ) );
//     
//     }

    { //::PLib::maximum
    
        typedef ::PLib::Point_nD< double, 3 > ( *maximum_function_type )( ::PLib::Point_nD< double, 3 >,::PLib::Point_nD< double, 3 > );
        
        bp::def( 
            "maximum"
            , maximum_function_type( &::PLib::maximum )
            , ( bp::arg("a"), bp::arg("b") ) );
    
    }

//     { //::PLib::maximum
//     
//         typedef ::PLib::Point_nD< float, 3 > ( *maximum_function_type )( ::PLib::Point_nD< float, 3 >,::PLib::Point_nD< float, 3 > );
//         
//         bp::def( 
//             "maximum"
//             , maximum_function_type( &::PLib::maximum )
//             , ( bp::arg("a"), bp::arg("b") ) );
//     
//     }

    { //::PLib::maximum
    
        typedef ::PLib::Coordinate ( *maximum_function_type )( ::PLib::Coordinate,::PLib::Coordinate );
        
        bp::def( 
            "maximum"
            , maximum_function_type( &::PLib::maximum )
            , ( bp::arg("a"), bp::arg("b") ) );
    
    }

    { //::PLib::maximum
    
        typedef ::Complex ( *maximum_function_type )( ::Complex,::Complex );
        
        bp::def( 
            "maximum"
            , maximum_function_type( &::PLib::maximum )
            , ( bp::arg("a"), bp::arg("b") ) );
    
    }

    { //::PLib::maximum
    
        typedef unsigned char ( *maximum_function_type )( unsigned char,unsigned char );
        
        bp::def( 
            "maximum"
            , maximum_function_type( &::PLib::maximum )
            , ( bp::arg("a"), bp::arg("b") ) );
    
    }

    { //::PLib::maximum
    
        typedef double ( *maximum_function_type )( double,double );
        
        bp::def( 
            "maximum"
            , maximum_function_type( &::PLib::maximum )
            , ( bp::arg("a"), bp::arg("b") ) );
    
    }

//     { //::PLib::maximum
//     
//         typedef float ( *maximum_function_type )( float,float );
//         
//         bp::def( 
//             "maximum"
//             , maximum_function_type( &::PLib::maximum )
//             , ( bp::arg("a"), bp::arg("b") ) );
//     
//     }

    { //::PLib::maximum
    
        typedef int ( *maximum_function_type )( int,int );
        
        bp::def( 
            "maximum"
            , maximum_function_type( &::PLib::maximum )
            , ( bp::arg("a"), bp::arg("b") ) );
    
    }

    { //::PLib::maximumByRef
    
        typedef ::PLib::Coordinate ( *maximumByRef_function_type )( ::PLib::Coordinate const &,::PLib::Coordinate const & );
        
        bp::def( 
            "maximumByRef"
            , maximumByRef_function_type( &::PLib::maximumByRef )
            , ( bp::arg("a"), bp::arg("b") ) );
    
    }

    { //::PLib::maximumByRef
    
        typedef ::Complex ( *maximumByRef_function_type )( ::Complex const &,::Complex const & );
        
        bp::def( 
            "maximumByRef"
            , maximumByRef_function_type( &::PLib::maximumByRef )
            , ( bp::arg("a"), bp::arg("b") ) );
    
    }

    { //::PLib::minimum
    
        typedef ::PLib::Point_nD< double, 2 > ( *minimum_function_type )( ::PLib::Point_nD< double, 2 >,::PLib::Point_nD< double, 2 > );
        
        bp::def( 
            "minimum"
            , minimum_function_type( &::PLib::minimum )
            , ( bp::arg("a"), bp::arg("b") ) );
    
    }

//     { //::PLib::minimum
//     
//         typedef ::PLib::Point_nD< float, 2 > ( *minimum_function_type )( ::PLib::Point_nD< float, 2 >,::PLib::Point_nD< float, 2 > );
//         
//         bp::def( 
//             "minimum"
//             , minimum_function_type( &::PLib::minimum )
//             , ( bp::arg("a"), bp::arg("b") ) );
//     
//     }

    { //::PLib::minimum
    
        typedef ::PLib::Point_nD< double, 3 > ( *minimum_function_type )( ::PLib::Point_nD< double, 3 >,::PLib::Point_nD< double, 3 > );
        
        bp::def( 
            "minimum"
            , minimum_function_type( &::PLib::minimum )
            , ( bp::arg("a"), bp::arg("b") ) );
    
    }

//     { //::PLib::minimum
//     
//         typedef ::PLib::Point_nD< float, 3 > ( *minimum_function_type )( ::PLib::Point_nD< float, 3 >,::PLib::Point_nD< float, 3 > );
//         
//         bp::def( 
//             "minimum"
//             , minimum_function_type( &::PLib::minimum )
//             , ( bp::arg("a"), bp::arg("b") ) );
//     
//     }

    { //::PLib::minimum
    
        typedef ::PLib::Coordinate ( *minimum_function_type )( ::PLib::Coordinate,::PLib::Coordinate );
        
        bp::def( 
            "minimum"
            , minimum_function_type( &::PLib::minimum )
            , ( bp::arg("a"), bp::arg("b") ) );
    
    }

    { //::PLib::minimum
    
        typedef ::Complex ( *minimum_function_type )( ::Complex,::Complex );
        
        bp::def( 
            "minimum"
            , minimum_function_type( &::PLib::minimum )
            , ( bp::arg("a"), bp::arg("b") ) );
    
    }

    { //::PLib::minimum
    
        typedef double ( *minimum_function_type )( double,double );
        
        bp::def( 
            "minimum"
            , minimum_function_type( &::PLib::minimum )
            , ( bp::arg("a"), bp::arg("b") ) );
    
    }

//     { //::PLib::minimum
//     
//         typedef float ( *minimum_function_type )( float,float );
//         
//         bp::def( 
//             "minimum"
//             , minimum_function_type( &::PLib::minimum )
//             , ( bp::arg("a"), bp::arg("b") ) );
//     
//     }

    { //::PLib::minimum
    
        typedef int ( *minimum_function_type )( int,int );
        
        bp::def( 
            "minimum"
            , minimum_function_type( &::PLib::minimum )
            , ( bp::arg("a"), bp::arg("b") ) );
    
    }

    { //::PLib::minimumByRef
    
        typedef ::Complex ( *minimumByRef_function_type )( ::Complex const &,::Complex const & );
        
        bp::def( 
            "minimumByRef"
            , minimumByRef_function_type( &::PLib::minimumByRef )
            , ( bp::arg("a"), bp::arg("b") ) );
    
    }

    { //::PLib::resizeBasicArray
    
        typedef void ( *resizeBasicArray_function_type )( ::PLib::BasicArray< int > &,int );
        
        bp::def( 
            "resizeBasicArray"
            , resizeBasicArray_function_type( &::PLib::resizeBasicArray )
            , ( bp::arg("a"), bp::arg("nsize") ) );
    
    }

    { //::PLib::resizeBasicArray
    
        typedef void ( *resizeBasicArray_function_type )( ::PLib::BasicArray< PLib::HPoint_nD< double, 3 > > &,int );
        
        bp::def( 
            "resizeBasicArray"
            , resizeBasicArray_function_type( &::PLib::resizeBasicArray )
            , ( bp::arg("a"), bp::arg("arg1") ) );
    
    }

//     { //::PLib::resizeBasicArray
//     
//         typedef void ( *resizeBasicArray_function_type )( ::PLib::BasicArray< PLib::HPoint_nD< float, 3 > > &,int );
//         
//         bp::def( 
//             "resizeBasicArray"
//             , resizeBasicArray_function_type( &::PLib::resizeBasicArray )
//             , ( bp::arg("a"), bp::arg("arg1") ) );
//     
//     }

    { //::PLib::resizeBasicArray
    
        typedef void ( *resizeBasicArray_function_type )( ::PLib::BasicArray< PLib::HPoint_nD< double, 2 > > &,int );
        
        bp::def( 
            "resizeBasicArray"
            , resizeBasicArray_function_type( &::PLib::resizeBasicArray )
            , ( bp::arg("a"), bp::arg("arg1") ) );
    
    }

//     { //::PLib::resizeBasicArray
//     
//         typedef void ( *resizeBasicArray_function_type )( ::PLib::BasicArray< PLib::HPoint_nD< float, 2 > > &,int );
//         
//         bp::def( 
//             "resizeBasicArray"
//             , resizeBasicArray_function_type( &::PLib::resizeBasicArray )
//             , ( bp::arg("a"), bp::arg("arg1") ) );
//     
//     }

    { //::PLib::resizeBasicArrayHPoint
    
        typedef void ( *resizeBasicArrayHPoint_function_type )( ::PLib::BasicArray< PLib::HPoint_nD< double, 3 > > &,int );
        
        bp::def( 
            "resizeBasicArrayHPoint"
            , resizeBasicArrayHPoint_function_type( &::PLib::resizeBasicArrayHPoint )
            , ( bp::arg("arg0"), bp::arg("arg1") ) );
    
    }

//     { //::PLib::resizeBasicArrayHPoint
//     
//         typedef void ( *resizeBasicArrayHPoint_function_type )( ::PLib::BasicArray< PLib::HPoint_nD< float, 3 > > &,int );
//         
//         bp::def( 
//             "resizeBasicArrayHPoint"
//             , resizeBasicArrayHPoint_function_type( &::PLib::resizeBasicArrayHPoint )
//             , ( bp::arg("arg0"), bp::arg("arg1") ) );
//     
//     }

    { //::PLib::resizeBasicArrayHPoint
    
        typedef void ( *resizeBasicArrayHPoint_function_type )( ::PLib::BasicArray< PLib::HPoint_nD< double, 2 > > &,int );
        
        bp::def( 
            "resizeBasicArrayHPoint"
            , resizeBasicArrayHPoint_function_type( &::PLib::resizeBasicArrayHPoint )
            , ( bp::arg("arg0"), bp::arg("arg1") ) );
    
    }

//     { //::PLib::resizeBasicArrayHPoint
//     
//         typedef void ( *resizeBasicArrayHPoint_function_type )( ::PLib::BasicArray< PLib::HPoint_nD< float, 2 > > &,int );
//         
//         bp::def( 
//             "resizeBasicArrayHPoint"
//             , resizeBasicArrayHPoint_function_type( &::PLib::resizeBasicArrayHPoint )
//             , ( bp::arg("arg0"), bp::arg("arg1") ) );
//     
//     }

    { //::PLib::resizeKeepBasic2DArray
    
        typedef void ( *resizeKeepBasic2DArray_function_type )( ::PLib::Basic2DArray< double > &,int const,int const );
        
        bp::def( 
            "resizeKeepBasic2DArray"
            , resizeKeepBasic2DArray_function_type( &::PLib::resizeKeepBasic2DArray )
            , ( bp::arg("ary"), bp::arg("nr"), bp::arg("nc") ) );
    
    }

    { //::PLib::resizeKeepBasic2DArray
    
        typedef void ( *resizeKeepBasic2DArray_function_type )( ::PLib::Basic2DArray< PLib::HPoint_nD< double, 2 > > &,int const,int const );
        
        bp::def( 
            "resizeKeepBasic2DArray"
            , resizeKeepBasic2DArray_function_type( &::PLib::resizeKeepBasic2DArray )
            , ( bp::arg("ary"), bp::arg("nr"), bp::arg("nc") ) );
    
    }

//     { //::PLib::resizeKeepBasic2DArray
//     
//         typedef void ( *resizeKeepBasic2DArray_function_type )( ::PLib::Basic2DArray< PLib::HPoint_nD< float, 2 > > &,int const,int const );
//         
//         bp::def( 
//             "resizeKeepBasic2DArray"
//             , resizeKeepBasic2DArray_function_type( &::PLib::resizeKeepBasic2DArray )
//             , ( bp::arg("ary"), bp::arg("nr"), bp::arg("nc") ) );
//     
//     }

    { //::PLib::resizeKeepBasic2DArray
    
        typedef void ( *resizeKeepBasic2DArray_function_type )( ::PLib::Basic2DArray< PLib::HPoint_nD< double, 3 > > &,int const,int const );
        
        bp::def( 
            "resizeKeepBasic2DArray"
            , resizeKeepBasic2DArray_function_type( &::PLib::resizeKeepBasic2DArray )
            , ( bp::arg("ary"), bp::arg("nr"), bp::arg("nc") ) );
    
    }

//     { //::PLib::resizeKeepBasic2DArray
//     
//         typedef void ( *resizeKeepBasic2DArray_function_type )( ::PLib::Basic2DArray< PLib::HPoint_nD< float, 3 > > &,int const,int const );
//         
//         bp::def( 
//             "resizeKeepBasic2DArray"
//             , resizeKeepBasic2DArray_function_type( &::PLib::resizeKeepBasic2DArray )
//             , ( bp::arg("ary"), bp::arg("nr"), bp::arg("nc") ) );
//     
//     }

    { //::PLib::resizeKeepBasic2DArrayHPoint
    
        typedef void ( *resizeKeepBasic2DArrayHPoint_function_type )( ::PLib::Basic2DArray< PLib::HPoint_nD< double, 2 > > &,int const,int const );
        
        bp::def( 
            "resizeKeepBasic2DArrayHPoint"
            , resizeKeepBasic2DArrayHPoint_function_type( &::PLib::resizeKeepBasic2DArrayHPoint )
            , ( bp::arg("a"), bp::arg("r"), bp::arg("c") ) );
    
    }

    { //::PLib::resizeKeepBasic2DArrayHPoint
    
        typedef void ( *resizeKeepBasic2DArrayHPoint_function_type )( ::PLib::Basic2DArray< PLib::HPoint_nD< float, 2 > > &,int const,int const );
        
        bp::def( 
            "resizeKeepBasic2DArrayHPoint"
            , resizeKeepBasic2DArrayHPoint_function_type( &::PLib::resizeKeepBasic2DArrayHPoint )
            , ( bp::arg("a"), bp::arg("r"), bp::arg("c") ) );
    
    }

    { //::PLib::resizeKeepBasic2DArrayHPoint
    
        typedef void ( *resizeKeepBasic2DArrayHPoint_function_type )( ::PLib::Basic2DArray< PLib::HPoint_nD< double, 3 > > &,int const,int const );
        
        bp::def( 
            "resizeKeepBasic2DArrayHPoint"
            , resizeKeepBasic2DArrayHPoint_function_type( &::PLib::resizeKeepBasic2DArrayHPoint )
            , ( bp::arg("a"), bp::arg("r"), bp::arg("c") ) );
    
    }

//     { //::PLib::resizeKeepBasic2DArrayHPoint
//     
//         typedef void ( *resizeKeepBasic2DArrayHPoint_function_type )( ::PLib::Basic2DArray< PLib::HPoint_nD< float, 3 > > &,int const,int const );
//         
//         bp::def( 
//             "resizeKeepBasic2DArrayHPoint"
//             , resizeKeepBasic2DArrayHPoint_function_type( &::PLib::resizeKeepBasic2DArrayHPoint )
//             , ( bp::arg("a"), bp::arg("r"), bp::arg("c") ) );
//     
//     }

    bp::scope().attr("blackColor") = PLib::blackColor;

    bp::scope().attr("blueColor") = PLib::blueColor;

    bp::scope().attr("cyanColor") = PLib::cyanColor;

    bp::scope().attr("gray50Color") = PLib::gray50Color;

    bp::scope().attr("gray80Color") = PLib::gray80Color;

    bp::scope().attr("greenColor") = PLib::greenColor;

    bp::scope().attr("magentaColor") = PLib::magentaColor;

    bp::scope().attr("redColor") = PLib::redColor;

    bp::scope().attr("whiteColor") = PLib::whiteColor;

    bp::scope().attr("yellowColor") = PLib::yellowColor;
}
