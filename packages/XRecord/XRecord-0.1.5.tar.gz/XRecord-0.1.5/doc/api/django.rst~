Integrating with Django
=======================

XRecord integrates seamlessly with the Django Web framework. 

Why?
----

In fact, integration with Django was one of our main concerns, when we designed and implemented XRecord.
When we first attempted to port some of our applications to use Django, the situation was as follows:

 * we had a big, complex MySQL database, with a frequently changing structure,
 * we had a number of Python applications that used this database,
 * we had a big, ugly PHP web app, which also used this database,
 * we had a simple thin db-api Python library named XRecord used by the Python applications.

We decided to port the web app to Django, so it seemed what we needed to do was:

 # use Django's `inspectdb` feature to generate the model from our db,
 # rewrite the web app
 # later rewrite the Python applications to use the Django model, so the project code is clean.

Step ``1`` turned out to be problematic, but not impossible. The Django introspection engine had some issues
detecting all the relationships between tables, so they had to be completed by hand. 

Step ``2`` seemed to be going fine, some working prototypes were produced, but then we had to modify
the database definition, and there was no other way, but to 
 
 * modify the mysql database 
 * make the corresponding changes to the model, by hand

As lovers of the DRY principle, we were totally dissatisfied with the way this was turning out. So we quickly
moved to step ``3``, to see if any other problems would surface. 

Without going into details - we understood that Django was simply not a good tool to write applications that are 
not meant to run in a web environment. We also understood, that it does not have to be such a tool, and probably,
should not be, since it had "Web framwork" in the name.

So we decided to take a different approach:

 # modify XRecord so it can be used inside Django
 # rewrite the web app
 # leave the other Python apps as they are, tested and working

How?
----

