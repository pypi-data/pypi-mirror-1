# -*- coding: utf8 -*-

class InformationSchema:

    def __init__(self, db):
        self.DB = db
        self._primary_keys = None
        self.table_info = {}

    @property
    def PrimaryKeys(self):
        if self._primary_keys is None:

            pks = self..ArrayObjectIndexedList (
                """
                SELECT C.TABLE_NAME, K.COLUMN_NAME FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS C INNER JOIN INFORMATION_SCHEMA.KEY_COLUMN_USAGE K
                ON C.CONSTRAINT_NAME = K.CONSTRAINT_NAME AND C.TABLE_SCHEMA = K.TABLE_SCHEMA AND K.TABLE_NAME = C.TABLE_NAME
                WHERE
                C.TABLE_SCHEMA = '{0}' AND C.CONSTRAINT_TYPE = 'PRIMARY KEY'
                """.format (self._dbname), "TABLE_NAME", __upper_case=True )
            for (t, pk) in pks.items():
                self._primary_keys [t] = tuple(map ( lambda x: x.COLUMN_NAME, pk ))
        return self._primary_keys
    
    def GetTable(self, table):

        allPK = self.PrimaryKeys
    