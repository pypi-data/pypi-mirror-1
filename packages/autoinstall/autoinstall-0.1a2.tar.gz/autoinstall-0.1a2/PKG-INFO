Metadata-Version: 1.0
Name: autoinstall
Version: 0.1a2
Summary: package loader for auto installing Python packages.
Home-page: http://pypi.python.org/pypi/autoinstall/
Author: Daniel Krech
Author-email: eikeon@eikeon.com
License: UNKNOWN
Description: package loader for auto installing Python packages.
        
        A package loader in the spirit of Zero Install that can be used to
        inject dependencies into the import process.
        
        
        To install::
        
        easy_install -U autoinstall
        
        or
        
        download, unpack, python setup.py install
        
        or
        
        try the bootstrap loader. See below.
        
        
        To use::
        
        # You can bind any package name to a URL pointing to something
        # that can be imported using the zipimporter.
        
        autoinstall.bind("pymarc", "http://pypi.python.org/packages/2.5/p/pymarc/pymarc-2.1-py2.5.egg")
        
        import pymarc
        
        print pymarc.__version__, pymarc.__file__
        
        
        Changelog::
        
        - added support for non top level packages.
        - cache files now use filename part from URL.
        
        TODO::
        
        - a more fitting name
        - a description of the intended use case
        - address other issues pointed out in:
        
        http://mail.python.org/pipermail/python-dev/2008-March/077926.html
        
        Scribbles::
        
        pull vs. push
        user vs. system
        web vs. filesystem
        auto vs. manual
        
        manage development sandboxes
        
        optional interfaces...
        
        def get_data(pathname) -> string with file data.
        
        Return the data associated with 'pathname'. Raise IOError if
        the file wasn't found.");
        
        def is_package,
        "is_package(fullname) -> bool.
        
        Return True if the module specified by fullname is a package.
        Raise ZipImportError is the module couldn't be found.");
        
        def get_code,
        "get_code(fullname) -> code object.
        
        Return the code object for the specified module. Raise ZipImportError
        is the module couldn't be found.");
        
        def get_source,
        "get_source(fullname) -> source string.
        
        Return the source code for the specified module. Raise ZipImportError
        is the module couldn't be found, return None if the archive does
        contain the module, but has no source for it.");
        
        
        Autoinstall can also be bootstraped with the nascent package loader
        bootstrap module. For example::
        
        #  or via the bootstrap
        # loader.
        
        try:
        _version = "0.1a2"
        import autoinstall
        if autoinstall.__version__ != _version:
        raise ImportError("A different version than expected found.")
        except ImportError, e:
        # http://svn.python.org/projects/sandbox/trunk/bootstrap/bootstrap.py
        import bootstrap
        pypi = "http://pypi.python.org"
        dir = "packages/source/a/autoinstall"
        url = "%s/%s/autoinstall-%s.tar.gz" % (pypi, dir, _version)
        bootstrap.main((url,))
        import autoinstall
        
        References::
        
        http://0install.net/
        http://www.python.org/dev/peps/pep-0302/
        http://svn.python.org/projects/sandbox/trunk/import_in_py
        http://0install.net/injector-find.html
        http://roscidus.com/desktop/node/903
        
        
Platform: UNKNOWN
