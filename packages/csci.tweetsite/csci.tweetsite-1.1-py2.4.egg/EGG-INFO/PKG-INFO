Metadata-Version: 1.0
Name: csci.tweetsite
Version: 1.1
Summary: UNKNOWN
Home-page: http://svn.plone.org/svn/plone/plone.example
Author: Plone Foundation
Author-email: plone-developers@lists.sourceforge.net
License: GPL
Description: .. contents::
        
        .. Note!
        -----
        Update the following URLs to point to your:
        
        - code repository
        - bug tracker
        - questions/comments feedback mail
        (do not set a real mail, to avoid spams)
        
        Or remove it if not used.
        
        - Code repository: http://svn.somewhere.com/...
        - Questions and comments to somemailing_list
        - Report bugs at http://bug.somewhere.com/..
        
        
        Change history
        **************
        
        Changelog
        =========
        
        1.1 (2009-11-20)
        ----------------
        
        - reversed order of status checks
        - accounted for 3 min api delay
        - set width on folder view template
        - schema for delay between posts for non-[remium feeds (default = 86400 = 24 hours)
        - users now own their news posts (to edit/delete)
        - link added to list
        
        
        1.0 (2009-11-19)
        ----------------
        
        - Created recipe with ZopeSkel
        [Plone Foundation]
        
        Detailed Documentation
        **********************
        
        Introduction
        ============
        
        This is a full-blown functional test. The emphasis here is on testing what
        the user may input and see, and the system is largely tested as a black box.
        We use PloneTestCase to set up this test as well, so we have a full Plone site
        to play with. We *can* inspect the state of the portal, e.g. using
        self.portal and self.folder, but it is often frowned upon since you are not
        treating the system as a black box. Also, if you, for example, log in or set
        roles using calls like self.setRoles(), these are not reflected in the test
        browser, which runs as a separate session.
        
        Being a doctest, we can tell a story here.
        
        First, we must perform some setup. We use the testbrowser that is shipped
        with Five, as this provides proper Zope 2 integration. Most of the
        documentation, though, is in the underlying zope.testbrower package.
        
        >>> from Products.Five.testbrowser import Browser
        >>> browser = Browser()
        >>> portal_url = self.portal.absolute_url()
        
        The following is useful when writing and debugging testbrowser tests. It lets
        us see all error messages in the error_log.
        
        >>> self.portal.error_log._ignored_exceptions = ()
        
        With that in place, we can go to the portal front page and log in. We will
        do this using the default user from PloneTestCase:
        
        >>> from Products.PloneTestCase.setup import portal_owner, default_password
        
        >>> browser.open(portal_url)
        
        We have the login portlet, so let's use that.
        
        >>> browser.getControl(name='__ac_name').value = portal_owner
        >>> browser.getControl(name='__ac_password').value = default_password
        >>> browser.getControl(name='submit').click()
        
        Here, we set the value of the fields on the login form and then simulate a
        submit click.
        
        We then test that we are still on the portal front page:
        
        >>> browser.url == portal_url
        True
        
        And we ensure that we get the friendly logged-in message:
        
        >>> "You are now logged in" in browser.contents
        True
        
        
        -*- extra stuff goes here -*-
        The tweetfolder content type
        ===============================
        
        In this section we are tesing the tweetfolder content type by performing
        basic operations like adding, updadating and deleting tweetfolder content
        items.
        
        Adding a new tweetfolder content item
        --------------------------------
        
        We use the 'Add new' menu to add a new content item.
        
        >>> browser.getLink('Add new').click()
        
        Then we select the type of item we want to add. In this case we select
        'tweetfolder' and click the 'Add' button to get to the add form.
        
        >>> browser.getControl('tweetfolder').click()
        >>> browser.getControl(name='form.button.Add').click()
        >>> 'tweetfolder' in browser.contents
        True
        
        Now we fill the form and submit it.
        
        >>> browser.getControl(name='title').value = 'tweetfolder Sample'
        >>> browser.getControl('Save').click()
        >>> 'Changes saved' in browser.contents
        True
        
        And we are done! We added a new 'tweetfolder' content item to the portal.
        
        Updating an existing tweetfolder content item
        ---------------------------------------
        
        Let's click on the 'edit' tab and update the object attribute values.
        
        >>> browser.getLink('Edit').click()
        >>> browser.getControl(name='title').value = 'New tweetfolder Sample'
        >>> browser.getControl('Save').click()
        
        We check that the changes were applied.
        
        >>> 'Changes saved' in browser.contents
        True
        >>> 'New tweetfolder Sample' in browser.contents
        True
        
        Removing a/an tweetfolder content item
        --------------------------------
        
        If we go to the home page, we can see a tab with the 'New tweetfolder
        Sample' title in the global navigation tabs.
        
        >>> browser.open(portal_url)
        >>> 'New tweetfolder Sample' in browser.contents
        True
        
        Now we are going to delete the 'New tweetfolder Sample' object. First we
        go to the contents tab and select the 'New tweetfolder Sample' for
        deletion.
        
        >>> browser.getLink('Contents').click()
        >>> browser.getControl('New tweetfolder Sample').click()
        
        We click on the 'Delete' button.
        
        >>> browser.getControl('Delete').click()
        >>> 'Item(s) deleted' in browser.contents
        True
        
        So, if we go back to the home page, there is no longer a 'New tweetfolder
        Sample' tab.
        
        >>> browser.open(portal_url)
        >>> 'New tweetfolder Sample' in browser.contents
        False
        
        Adding a new tweetfolder content item as contributor
        ------------------------------------------------
        
        Not only site managers are allowed to add tweetfolder content items, but
        also site contributors.
        
        Let's logout and then login as 'contributor', a portal member that has the
        contributor role assigned.
        
        >>> browser.getLink('Log out').click()
        >>> browser.open(portal_url)
        >>> browser.getControl(name='__ac_name').value = 'contributor'
        >>> browser.getControl(name='__ac_password').value = default_password
        >>> browser.getControl(name='submit').click()
        >>> browser.open(portal_url)
        
        We use the 'Add new' menu to add a new content item.
        
        >>> browser.getLink('Add new').click()
        
        We select 'tweetfolder' and click the 'Add' button to get to the add form.
        
        >>> browser.getControl('tweetfolder').click()
        >>> browser.getControl(name='form.button.Add').click()
        >>> 'tweetfolder' in browser.contents
        True
        
        Now we fill the form and submit it.
        
        >>> browser.getControl(name='title').value = 'tweetfolder Sample'
        >>> browser.getControl('Save').click()
        >>> 'Changes saved' in browser.contents
        True
        
        Done! We added a new tweetfolder content item logged in as contributor.
        
        Finally, let's login back as manager.
        
        >>> browser.getLink('Log out').click()
        >>> browser.open(portal_url)
        >>> browser.getControl(name='__ac_name').value = portal_owner
        >>> browser.getControl(name='__ac_password').value = default_password
        >>> browser.getControl(name='submit').click()
        >>> browser.open(portal_url)
        
        
        The onlineFeed content type
        ===============================
        
        In this section we are tesing the onlineFeed content type by performing
        basic operations like adding, updadating and deleting onlineFeed content
        items.
        
        Adding a new onlineFeed content item
        --------------------------------
        
        We use the 'Add new' menu to add a new content item.
        
        >>> browser.getLink('Add new').click()
        
        Then we select the type of item we want to add. In this case we select
        'onlineFeed' and click the 'Add' button to get to the add form.
        
        >>> browser.getControl('onlineFeed').click()
        >>> browser.getControl(name='form.button.Add').click()
        >>> 'onlineFeed' in browser.contents
        True
        
        Now we fill the form and submit it.
        
        >>> browser.getControl(name='title').value = 'onlineFeed Sample'
        >>> browser.getControl('Save').click()
        >>> 'Changes saved' in browser.contents
        True
        
        And we are done! We added a new 'onlineFeed' content item to the portal.
        
        Updating an existing onlineFeed content item
        ---------------------------------------
        
        Let's click on the 'edit' tab and update the object attribute values.
        
        >>> browser.getLink('Edit').click()
        >>> browser.getControl(name='title').value = 'New onlineFeed Sample'
        >>> browser.getControl('Save').click()
        
        We check that the changes were applied.
        
        >>> 'Changes saved' in browser.contents
        True
        >>> 'New onlineFeed Sample' in browser.contents
        True
        
        Removing a/an onlineFeed content item
        --------------------------------
        
        If we go to the home page, we can see a tab with the 'New onlineFeed
        Sample' title in the global navigation tabs.
        
        >>> browser.open(portal_url)
        >>> 'New onlineFeed Sample' in browser.contents
        True
        
        Now we are going to delete the 'New onlineFeed Sample' object. First we
        go to the contents tab and select the 'New onlineFeed Sample' for
        deletion.
        
        >>> browser.getLink('Contents').click()
        >>> browser.getControl('New onlineFeed Sample').click()
        
        We click on the 'Delete' button.
        
        >>> browser.getControl('Delete').click()
        >>> 'Item(s) deleted' in browser.contents
        True
        
        So, if we go back to the home page, there is no longer a 'New onlineFeed
        Sample' tab.
        
        >>> browser.open(portal_url)
        >>> 'New onlineFeed Sample' in browser.contents
        False
        
        Adding a new onlineFeed content item as contributor
        ------------------------------------------------
        
        Not only site managers are allowed to add onlineFeed content items, but
        also site contributors.
        
        Let's logout and then login as 'contributor', a portal member that has the
        contributor role assigned.
        
        >>> browser.getLink('Log out').click()
        >>> browser.open(portal_url)
        >>> browser.getControl(name='__ac_name').value = 'contributor'
        >>> browser.getControl(name='__ac_password').value = default_password
        >>> browser.getControl(name='submit').click()
        >>> browser.open(portal_url)
        
        We use the 'Add new' menu to add a new content item.
        
        >>> browser.getLink('Add new').click()
        
        We select 'onlineFeed' and click the 'Add' button to get to the add form.
        
        >>> browser.getControl('onlineFeed').click()
        >>> browser.getControl(name='form.button.Add').click()
        >>> 'onlineFeed' in browser.contents
        True
        
        Now we fill the form and submit it.
        
        >>> browser.getControl(name='title').value = 'onlineFeed Sample'
        >>> browser.getControl('Save').click()
        >>> 'Changes saved' in browser.contents
        True
        
        Done! We added a new onlineFeed content item logged in as contributor.
        
        Finally, let's login back as manager.
        
        >>> browser.getLink('Log out').click()
        >>> browser.open(portal_url)
        >>> browser.getControl(name='__ac_name').value = portal_owner
        >>> browser.getControl(name='__ac_password').value = default_password
        >>> browser.getControl(name='submit').click()
        >>> browser.open(portal_url)
        
        
        The controlPanel content type
        ===============================
        
        In this section we are tesing the controlPanel content type by performing
        basic operations like adding, updadating and deleting controlPanel content
        items.
        
        Adding a new controlPanel content item
        --------------------------------
        
        We use the 'Add new' menu to add a new content item.
        
        >>> browser.getLink('Add new').click()
        
        Then we select the type of item we want to add. In this case we select
        'controlPanel' and click the 'Add' button to get to the add form.
        
        >>> browser.getControl('controlPanel').click()
        >>> browser.getControl(name='form.button.Add').click()
        >>> 'controlPanel' in browser.contents
        True
        
        Now we fill the form and submit it.
        
        >>> browser.getControl(name='title').value = 'controlPanel Sample'
        >>> browser.getControl('Save').click()
        >>> 'Changes saved' in browser.contents
        True
        
        And we are done! We added a new 'controlPanel' content item to the portal.
        
        Updating an existing controlPanel content item
        ---------------------------------------
        
        Let's click on the 'edit' tab and update the object attribute values.
        
        >>> browser.getLink('Edit').click()
        >>> browser.getControl(name='title').value = 'New controlPanel Sample'
        >>> browser.getControl('Save').click()
        
        We check that the changes were applied.
        
        >>> 'Changes saved' in browser.contents
        True
        >>> 'New controlPanel Sample' in browser.contents
        True
        
        Removing a/an controlPanel content item
        --------------------------------
        
        If we go to the home page, we can see a tab with the 'New controlPanel
        Sample' title in the global navigation tabs.
        
        >>> browser.open(portal_url)
        >>> 'New controlPanel Sample' in browser.contents
        True
        
        Now we are going to delete the 'New controlPanel Sample' object. First we
        go to the contents tab and select the 'New controlPanel Sample' for
        deletion.
        
        >>> browser.getLink('Contents').click()
        >>> browser.getControl('New controlPanel Sample').click()
        
        We click on the 'Delete' button.
        
        >>> browser.getControl('Delete').click()
        >>> 'Item(s) deleted' in browser.contents
        True
        
        So, if we go back to the home page, there is no longer a 'New controlPanel
        Sample' tab.
        
        >>> browser.open(portal_url)
        >>> 'New controlPanel Sample' in browser.contents
        False
        
        Adding a new controlPanel content item as contributor
        ------------------------------------------------
        
        Not only site managers are allowed to add controlPanel content items, but
        also site contributors.
        
        Let's logout and then login as 'contributor', a portal member that has the
        contributor role assigned.
        
        >>> browser.getLink('Log out').click()
        >>> browser.open(portal_url)
        >>> browser.getControl(name='__ac_name').value = 'contributor'
        >>> browser.getControl(name='__ac_password').value = default_password
        >>> browser.getControl(name='submit').click()
        >>> browser.open(portal_url)
        
        We use the 'Add new' menu to add a new content item.
        
        >>> browser.getLink('Add new').click()
        
        We select 'controlPanel' and click the 'Add' button to get to the add form.
        
        >>> browser.getControl('controlPanel').click()
        >>> browser.getControl(name='form.button.Add').click()
        >>> 'controlPanel' in browser.contents
        True
        
        Now we fill the form and submit it.
        
        >>> browser.getControl(name='title').value = 'controlPanel Sample'
        >>> browser.getControl('Save').click()
        >>> 'Changes saved' in browser.contents
        True
        
        Done! We added a new controlPanel content item logged in as contributor.
        
        Finally, let's login back as manager.
        
        >>> browser.getLink('Log out').click()
        >>> browser.open(portal_url)
        >>> browser.getControl(name='__ac_name').value = portal_owner
        >>> browser.getControl(name='__ac_password').value = default_password
        >>> browser.getControl(name='submit').click()
        >>> browser.open(portal_url)
        
        
        
        
        Contributors
        ************
        
        Plone Foundation, Author
        
        
        Download
        ********
        
Platform: UNKNOWN
Classifier: Framework :: Plone
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: GNU General Public License (GPL)
