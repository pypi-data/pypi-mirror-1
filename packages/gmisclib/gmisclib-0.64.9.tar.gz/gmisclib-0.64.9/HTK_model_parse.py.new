import re


class tokstream(object):
	isspace = re.compile('\s+')
	spat = re.compile('(\s+|<\w+>|~[a-zA-Z])')

	def __init__(self, s):
		self.toks = s.split(self.spat)
		self.toks.reverse()

	def next(self):
		while self.toks:
			tmp = self.toks.pop(-1)
			if not self.isspace.match(tmp):
				return tmp
		return None

	def int(self):
		return int(self.next())



class mixture(object):
	def __init__(self, mean, var):
		self.mean = mean
		self.var = var

class state(object):
	def __int__(self, nmixes):
		self.nmixes = nmixes
		self.mixes = []

class hmm(object):
	def __int__(self, numstates):
		self.numstates = numstates
		self.states = []


def read(fd):
	hdr = {}
	var = {}
	lnum = 0
	toks = tokstream(fd.read())
	x = None
	while toks:
		tok = toks.next()
		if _isspace.match(tok):
			continue
		elif tok.startswith('~'):
			if tok == '~o':
				x = {}
				hdr = x
			elif tok == '~v':
				x = ???
				var[toks.next()] = x
			elif tok == '~h':
				x = {}
				model[toks.next()] = x
		elif tok.startswith('<'):
			tok = tok.lower()
			if tok == '<streaminfo>':
				x['streaminfo'] = (toks.int()), toks.int()))
			elif tok == '<vecsize>':
				x['vecsize'] = toks.int()
			elif tok == '<diagc>':
				x['covariance_type'] = 'DIAGC'
			elif tok == '<beginhmm>:
				pass
			elif tok == '<numstates>':
				x['numstates'] = toks.int()
			elif tok == '<state>':

			
