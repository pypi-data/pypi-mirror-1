# generated by 'xml2py'
# flags 'glu.xml -kdefst -l libGLU.so -o simple.py -rglu.* -v'
from OpenGL import platform, arrays
from OpenGL import constants as GLconstants
import ctypes
GLint = ctypes.c_int
GLenum = ctypes.c_uint
GLsizei = ctypes.c_int
GLboolean = ctypes.c_ubyte
GLubyte = ctypes.c_ubyte
GLdouble = ctypes.c_double
GLfloat = ctypes.c_float
POINTER = ctypes.POINTER
c_void_p = ctypes.c_void_p



# /usr/include/GL/glu.h 269
gluBuild1DMipmapLevels = platform.createBaseFunction( 
	'gluBuild1DMipmapLevels', dll=platform.GLU, resultType=GLint, 
	argTypes=[GLenum, GLint, GLsizei, GLenum, GLenum, GLint, GLint, GLint, c_void_p],
	doc='gluBuild1DMipmapLevels( GLenum(target), GLint(internalFormat), GLsizei(width), GLenum(format), GLenum(type), GLint(level), GLint(base), GLint(max), c_void_p(data) ) -> GLint', 
	argNames=('target', 'internalFormat', 'width', 'format', 'type', 'level', 'base', 'max', 'data'),
)

# /usr/include/GL/glu.h 270
gluBuild1DMipmaps = platform.createBaseFunction( 
	'gluBuild1DMipmaps', dll=platform.GLU, resultType=GLint, 
	argTypes=[GLenum, GLint, GLsizei, GLenum, GLenum, c_void_p],
	doc='gluBuild1DMipmaps( GLenum(target), GLint(internalFormat), GLsizei(width), GLenum(format), GLenum(type), c_void_p(data) ) -> GLint', 
	argNames=('target', 'internalFormat', 'width', 'format', 'type', 'data'),
)

# /usr/include/GL/glu.h 271
gluBuild2DMipmapLevels = platform.createBaseFunction( 
	'gluBuild2DMipmapLevels', dll=platform.GLU, resultType=GLint, 
	argTypes=[GLenum, GLint, GLsizei, GLsizei, GLenum, GLenum, GLint, GLint, GLint, c_void_p],
	doc='gluBuild2DMipmapLevels( GLenum(target), GLint(internalFormat), GLsizei(width), GLsizei(height), GLenum(format), GLenum(type), GLint(level), GLint(base), GLint(max), c_void_p(data) ) -> GLint', 
	argNames=('target', 'internalFormat', 'width', 'height', 'format', 'type', 'level', 'base', 'max', 'data'),
)

# /usr/include/GL/glu.h 272
gluBuild2DMipmaps = platform.createBaseFunction( 
	'gluBuild2DMipmaps', dll=platform.GLU, resultType=GLint, 
	argTypes=[GLenum, GLint, GLsizei, GLsizei, GLenum, GLenum, c_void_p],
	doc='gluBuild2DMipmaps( GLenum(target), GLint(internalFormat), GLsizei(width), GLsizei(height), GLenum(format), GLenum(type), c_void_p(data) ) -> GLint', 
	argNames=('target', 'internalFormat', 'width', 'height', 'format', 'type', 'data'),
)

# /usr/include/GL/glu.h 273
gluBuild3DMipmapLevels = platform.createBaseFunction( 
	'gluBuild3DMipmapLevels', dll=platform.GLU, resultType=GLint, 
	argTypes=[GLenum, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, GLint, GLint, GLint, c_void_p],
	doc='gluBuild3DMipmapLevels( GLenum(target), GLint(internalFormat), GLsizei(width), GLsizei(height), GLsizei(depth), GLenum(format), GLenum(type), GLint(level), GLint(base), GLint(max), c_void_p(data) ) -> GLint', 
	argNames=('target', 'internalFormat', 'width', 'height', 'depth', 'format', 'type', 'level', 'base', 'max', 'data'),
)

# /usr/include/GL/glu.h 274
gluBuild3DMipmaps = platform.createBaseFunction( 
	'gluBuild3DMipmaps', dll=platform.GLU, resultType=GLint, 
	argTypes=[GLenum, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, c_void_p],
	doc='gluBuild3DMipmaps( GLenum(target), GLint(internalFormat), GLsizei(width), GLsizei(height), GLsizei(depth), GLenum(format), GLenum(type), c_void_p(data) ) -> GLint', 
	argNames=('target', 'internalFormat', 'width', 'height', 'depth', 'format', 'type', 'data'),
)

# /usr/include/GL/glu.h 275
gluCheckExtension = platform.createBaseFunction( 
	'gluCheckExtension', dll=platform.GLU, resultType=GLboolean, 
	argTypes=[arrays.GLubyteArray, arrays.GLubyteArray],
	doc='gluCheckExtension( arrays.GLubyteArray(extName), arrays.GLubyteArray(extString) ) -> GLboolean', 
	argNames=('extName', 'extString'),
)

gluCheckExtension = arrays.setInputArraySizeType(
	gluCheckExtension,
	None, # XXX Could not determine size of argument extName for gluCheckExtension arrays.GLubyteArray
	arrays.GLubyteArray, 
	'extName',
)

gluCheckExtension = arrays.setInputArraySizeType(
	gluCheckExtension,
	None, # XXX Could not determine size of argument extString for gluCheckExtension arrays.GLubyteArray
	arrays.GLubyteArray, 
	'extString',
)

# /usr/include/GL/glu.h 243
class GLUquadric(ctypes.Structure):
    pass
# /usr/include/GL/glu.h 276
gluCylinder = platform.createBaseFunction( 
	'gluCylinder', dll=platform.GLU, resultType=None, 
	argTypes=[POINTER(GLUquadric), GLdouble, GLdouble, GLdouble, GLint, GLint],
	doc='gluCylinder( POINTER(GLUquadric)(quad), GLdouble(base), GLdouble(top), GLdouble(height), GLint(slices), GLint(stacks) ) -> None', 
	argNames=('quad', 'base', 'top', 'height', 'slices', 'stacks'),
)


# /usr/include/GL/glu.h 278
gluDeleteQuadric = platform.createBaseFunction( 
	'gluDeleteQuadric', dll=platform.GLU, resultType=None, 
	argTypes=[POINTER(GLUquadric)],
	doc='gluDeleteQuadric( POINTER(GLUquadric)(quad) ) -> None', 
	argNames=('quad',),
)


# /usr/include/GL/glu.h 280
gluDisk = platform.createBaseFunction( 
	'gluDisk', dll=platform.GLU, resultType=None, 
	argTypes=[POINTER(GLUquadric), GLdouble, GLdouble, GLint, GLint],
	doc='gluDisk( POINTER(GLUquadric)(quad), GLdouble(inner), GLdouble(outer), GLint(slices), GLint(loops) ) -> None', 
	argNames=('quad', 'inner', 'outer', 'slices', 'loops'),
)


# /usr/include/GL/glu.h 285
gluErrorString = platform.createBaseFunction( 
	'gluErrorString', dll=platform.GLU, resultType=POINTER(GLubyte), 
	argTypes=[GLenum],
	doc='gluErrorString( GLenum(error) ) -> POINTER(GLubyte)', 
	argNames=('error',),
)


# /usr/include/GL/glu.h 287
gluGetString = platform.createBaseFunction( 
	'gluGetString', dll=platform.GLU, resultType=POINTER(GLubyte), 
	argTypes=[GLenum],
	doc='gluGetString( GLenum(name) ) -> POINTER(GLubyte)', 
	argNames=('name',),
)

# /usr/include/GL/glu.h 290
gluLookAt = platform.createBaseFunction( 
	'gluLookAt', dll=platform.GLU, resultType=None, 
	argTypes=[GLdouble, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble],
	doc='gluLookAt( GLdouble(eyeX), GLdouble(eyeY), GLdouble(eyeZ), GLdouble(centerX), GLdouble(centerY), GLdouble(centerZ), GLdouble(upX), GLdouble(upY), GLdouble(upZ) ) -> None', 
	argNames=('eyeX', 'eyeY', 'eyeZ', 'centerX', 'centerY', 'centerZ', 'upX', 'upY', 'upZ'),
)


# /usr/include/GL/glu.h 292
gluNewQuadric = platform.createBaseFunction( 
	'gluNewQuadric', dll=platform.GLU, resultType=POINTER(GLUquadric), 
	argTypes=[],
	doc='gluNewQuadric(  ) -> POINTER(GLUquadric)', 
	argNames=(),
)

GLvoid = None
_GLUfuncptr = ctypes.CFUNCTYPE(GLvoid)

# /usr/include/GL/glu.h 301
gluOrtho2D = platform.createBaseFunction( 
	'gluOrtho2D', dll=platform.GLU, resultType=None, 
	argTypes=[GLdouble, GLdouble, GLdouble, GLdouble],
	doc='gluOrtho2D( GLdouble(left), GLdouble(right), GLdouble(bottom), GLdouble(top) ) -> None', 
	argNames=('left', 'right', 'bottom', 'top'),
)

# /usr/include/GL/glu.h 302
gluPartialDisk = platform.createBaseFunction( 
	'gluPartialDisk', dll=platform.GLU, resultType=None, 
	argTypes=[POINTER(GLUquadric), GLdouble, GLdouble, GLint, GLint, GLdouble, GLdouble],
	doc='gluPartialDisk( POINTER(GLUquadric)(quad), GLdouble(inner), GLdouble(outer), GLint(slices), GLint(loops), GLdouble(start), GLdouble(sweep) ) -> None', 
	argNames=('quad', 'inner', 'outer', 'slices', 'loops', 'start', 'sweep'),
)

# /usr/include/GL/glu.h 303
gluPerspective = platform.createBaseFunction( 
	'gluPerspective', dll=platform.GLU, resultType=None, 
	argTypes=[GLdouble, GLdouble, GLdouble, GLdouble],
	doc='gluPerspective( GLdouble(fovy), GLdouble(aspect), GLdouble(zNear), GLdouble(zFar) ) -> None', 
	argNames=('fovy', 'aspect', 'zNear', 'zFar'),
)

# /usr/include/GL/glu.h 304
gluPickMatrix = platform.createBaseFunction( 
	'gluPickMatrix', dll=platform.GLU, resultType=None, 
	argTypes=[GLdouble, GLdouble, GLdouble, GLdouble, arrays.GLintArray],
	doc='gluPickMatrix( GLdouble(x), GLdouble(y), GLdouble(delX), GLdouble(delY), arrays.GLintArray(viewport) ) -> None', 
	argNames=('x', 'y', 'delX', 'delY', 'viewport'),
)

gluPickMatrix = arrays.setInputArraySizeType(
	gluPickMatrix,
	None, # XXX Could not determine size of argument viewport for gluPickMatrix arrays.GLintArray
	arrays.GLintArray, 
	'viewport',
)

# /usr/include/GL/glu.h 307
gluQuadricCallback = platform.createBaseFunction( 
	'gluQuadricCallback', dll=platform.GLU, resultType=None, 
	argTypes=[POINTER(GLUquadric), GLenum, _GLUfuncptr],
	doc='gluQuadricCallback( POINTER(GLUquadric)(quad), GLenum(which), _GLUfuncptr(CallBackFunc) ) -> None', 
	argNames=('quad', 'which', 'CallBackFunc'),
)

# /usr/include/GL/glu.h 308
gluQuadricDrawStyle = platform.createBaseFunction( 
	'gluQuadricDrawStyle', dll=platform.GLU, resultType=None, 
	argTypes=[POINTER(GLUquadric), GLenum],
	doc='gluQuadricDrawStyle( POINTER(GLUquadric)(quad), GLenum(draw) ) -> None', 
	argNames=('quad', 'draw'),
)

# /usr/include/GL/glu.h 309
gluQuadricNormals = platform.createBaseFunction( 
	'gluQuadricNormals', dll=platform.GLU, resultType=None, 
	argTypes=[POINTER(GLUquadric), GLenum],
	doc='gluQuadricNormals( POINTER(GLUquadric)(quad), GLenum(normal) ) -> None', 
	argNames=('quad', 'normal'),
)

# /usr/include/GL/glu.h 310
gluQuadricOrientation = platform.createBaseFunction( 
	'gluQuadricOrientation', dll=platform.GLU, resultType=None, 
	argTypes=[POINTER(GLUquadric), GLenum],
	doc='gluQuadricOrientation( POINTER(GLUquadric)(quad), GLenum(orientation) ) -> None', 
	argNames=('quad', 'orientation'),
)

# /usr/include/GL/glu.h 311
gluQuadricTexture = platform.createBaseFunction( 
	'gluQuadricTexture', dll=platform.GLU, resultType=None, 
	argTypes=[POINTER(GLUquadric), GLboolean],
	doc='gluQuadricTexture( POINTER(GLUquadric)(quad), GLboolean(texture) ) -> None', 
	argNames=('quad', 'texture'),
)

# /usr/include/GL/glu.h 312
gluScaleImage = platform.createBaseFunction( 
	'gluScaleImage', dll=platform.GLU, resultType=GLint, 
	argTypes=[GLenum, GLsizei, GLsizei, GLenum, c_void_p, GLsizei, GLsizei, GLenum, POINTER(GLvoid)],
	doc='gluScaleImage( GLenum(format), GLsizei(wIn), GLsizei(hIn), GLenum(typeIn), c_void_p(dataIn), GLsizei(wOut), GLsizei(hOut), GLenum(typeOut), POINTER(GLvoid)(dataOut) ) -> GLint', 
	argNames=('format', 'wIn', 'hIn', 'typeIn', 'dataIn', 'wOut', 'hOut', 'typeOut', 'dataOut'),
)

# /usr/include/GL/glu.h 313
gluSphere = platform.createBaseFunction( 
	'gluSphere', dll=platform.GLU, resultType=None, 
	argTypes=[POINTER(GLUquadric), GLdouble, GLint, GLint],
	doc='gluSphere( POINTER(GLUquadric)(quad), GLdouble(radius), GLint(slices), GLint(stacks) ) -> None', 
	argNames=('quad', 'radius', 'slices', 'stacks'),
)
