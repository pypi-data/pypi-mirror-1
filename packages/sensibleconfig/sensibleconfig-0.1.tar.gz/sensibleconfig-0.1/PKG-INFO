Metadata-Version: 1.0
Name: sensibleconfig
Version: 0.1
Summary: UNKNOWN
Home-page: http://pidsoff.appspot.com/sensibleconfig
Author: Ali Afshar
Author-email: aafshar@gmail.com
License: UNKNOWN
Description: 
        sensibleconfig
        ~~~~~~~~~~~~~~
        
        So you have some configuration variables, and you want them to be available to
        be in any number of ini-like files, as well as overridable from the environment,
        and overridable from the command line. Define once, and use.
        
        
        >>> options = [
        ...    Option('debug', 'Run in debug mode', False,
        ...           short_name='d', converter=bool, action='store_true'),
        ... ]
        >>> conf = Config(options)
        >>> conf.debug # Will start as the default value
        False
        
        This time we shall pass an env prefix to look up on, so as not to pollute any
        environment namespace too badly:
        
        >>> conf = Config(options, 'PONY')
        >>> conf.grab_from_env({'PONY_DEBUG': '1'})
        >>> conf.debug
        True
        
        .. note::
        The optional env dict parameter will default to os.environ if it is omitted.
        
        Now we can grab some stuff from argv:
        
        >>> conf = Config(options)
        >>> conf.grab_from_argv(['--debug', '1'])
        >>> conf.debug
        True
        
        Also, remember that you can serialize these things:
        
        >>> conf = Config(options)
        >>> conf.to_dict()
        {'debug': False}
        
        .. note::
        In real life you would import this::
        
        from sensibleconfig import Config, Option
        
        So as you can see above, the options were declared, and then the config object
        was created from those options. It is imagined that an application may collate
        the options from many different places, such as plugins which wish to define
        their own options.
        
Platform: UNKNOWN
